ValueMetadata *type metadata accessor for LightGradientBackground()
{
  return &type metadata for LightGradientBackground;
}

uint64_t sub_100089B44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118484, 1);
}

double sub_100089B54@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;

  v2 = sub_100007D50(&qword_100159140);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100108810;
  if (qword_100158098 != -1)
    swift_once(&qword_100158098, sub_100051410);
  v4 = qword_10016A4B0;
  *(_QWORD *)(v3 + 32) = qword_10016A4B0;
  swift_retain(v4);
  *(_QWORD *)(v3 + 40) = static Color.clear.getter(v5);
  *(_QWORD *)&v15[0] = v3;
  specialized Array._endMutation()(v6);
  Gradient.init(colors:)(v3);
  v8 = static UnitPoint.top.getter(v7);
  v10 = v9;
  v11 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v15, v8, v10, v11, v12);
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 32) = v16;
  return result;
}

unint64_t sub_100089C48()
{
  unint64_t result;

  result = qword_10015CA88;
  if (!qword_10015CA88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_10015CA88);
  }
  return result;
}

Class sub_100089C8C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10008AD68();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

char *sub_100089D00(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100007D50(&qword_100159260);
      v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[40 * v8 + 32])
          memmove(v13, a4 + 32, 40 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10008A768(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100089E20(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100007D50(&qword_10015CAA8);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10008ADA4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100089F2C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100089F54(a1, a2, a3, a4, &qword_10015CAC0, (uint64_t (*)(_QWORD))&type metadata accessor for Song);
}

uint64_t sub_100089F40(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100089F54(a1, a2, a3, a4, &qword_10015CAB0, (uint64_t (*)(_QWORD))&type metadata accessor for Genre);
}

uint64_t sub_100089F54(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100007D50(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10008AE94(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_10008A160(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100007D50(&qword_10015CAB8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008B26C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

Swift::Int sub_10008A26C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100007D50(&qword_10015CAA0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_43;
    if (v15 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v15);
    if (!v25)
    {
      v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_34:
        swift_release(v5);
        v3 = v37;
        if ((v39 & 1) == 0)
          goto LABEL_41;
        goto LABEL_37;
      }
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v15 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v15 >= v12)
            goto LABEL_34;
          v25 = *(_QWORD *)(v38 + 8 * v15);
          ++v26;
          if (v25)
            goto LABEL_23;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_23:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v27[1]);
      v31 = v30;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v29, v28);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v18 == v33;
        if (v18 == v33)
          v18 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v30;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

id sub_10008A558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100007D50(&qword_10015CAA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    if (!v23)
      break;
LABEL_23:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10008A6F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_10002BA68(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_10002BAA4(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_10008A768(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100007D50(&qword_10015CA90);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10008A874(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  ValueWitnessTable *v26;
  uint64_t v27;
  char *v28;
  NSString v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void **aBlock;
  uint64_t v35;
  Class (*v36)(uint64_t);
  ValueMetadata *v37;
  _QWORD *(*v38)();
  _QWORD *v39;
  char *v40;

  v16 = sub_100007D50(&qword_100159260);
  v17 = swift_allocObject(v16, 192, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100109440;
  *(_QWORD *)(v17 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v17 + 64) = &off_10015BAD8;
  *(_BYTE *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = a1;
  *(_QWORD *)(v17 + 48) = a2;
  *(_QWORD *)(v17 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v17 + 104) = &off_10015BAB0;
  *(_BYTE *)(v17 + 72) = a3;
  *(_QWORD *)(v17 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v17 + 144) = &off_10015BB38;
  *(_BYTE *)(v17 + 112) = a4;
  *(_QWORD *)(v17 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v17 + 184) = &off_10015BB10;
  *(_QWORD *)(v17 + 152) = a5;
  *(_QWORD *)(v17 + 160) = a6;
  *(_BYTE *)(v17 + 168) = a7;
  v18 = *(_QWORD *)(a8 + 72);
  if (v18)
  {
    v19 = *(_QWORD *)(a8 + 64);
    v20 = *(_QWORD *)(a8 + 72);
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  v37 = &type metadata for AnalyticsString;
  v38 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v35 = v19;
  v36 = (Class (*)(uint64_t))v20;
  swift_bridgeObjectRetain(a2);
  sub_1000227F8(a5, a6, a7);
  v40 = (char *)v17;
  v21 = *(_QWORD *)(v17 + 16);
  v22 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v18);
  if (v21 >= v22 >> 1)
    v40 = sub_100089D00((char *)(v22 > 1), v21 + 1, 1, (char *)v17);
  v23 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v23);
  v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v26->initializeWithCopy)((uint64_t)v25, v27);
  sub_10008A6F0(v21, (uint64_t)v25, (uint64_t *)&v40, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v28 = v40;
  v29 = String._bridgeToObjectiveC()();
  v30 = (_QWORD *)swift_allocObject(&unk_10014CCF8, 40, 7);
  v30[2] = 0xD00000000000001ELL;
  v30[3] = 0x80000001001131B0;
  v30[4] = v28;
  v38 = sub_100022948;
  v39 = v30;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_100089C8C;
  v37 = (ValueMetadata *)&unk_10014CD10;
  v31 = _Block_copy(&aBlock);
  v32 = v39;
  swift_bridgeObjectRetain(v28);
  swift_release(v32);
  AnalyticsSendEventLazy(v29, v31);
  _Block_release(v31);
  swift_bridgeObjectRelease(v28);

}

void sub_10008AB1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  ValueWitnessTable *v16;
  uint64_t v17;
  char *v18;
  NSString v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void **aBlock;
  uint64_t v25;
  Class (*v26)(uint64_t);
  ValueMetadata *v27;
  _QWORD *(*v28)();
  _QWORD *v29;
  char *v30;

  v8 = sub_100007D50(&qword_100159260);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100108810;
  *(_QWORD *)(v9 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v9 + 64) = &off_10015BAD8;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = a1;
  *(_QWORD *)(v9 + 48) = a2;
  *(_QWORD *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v9 + 104) = &off_10015BAB0;
  *(_BYTE *)(v9 + 72) = a3;
  v10 = *(_QWORD *)(a4 + 72);
  if (v10)
  {
    v11 = *(_QWORD *)(a4 + 64);
    v12 = *(_QWORD *)(a4 + 72);
  }
  else
  {
    v11 = 0;
    v12 = 0xE000000000000000;
  }
  v27 = &type metadata for AnalyticsString;
  v28 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v25 = v11;
  v26 = (Class (*)(uint64_t))v12;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v10);
  v30 = sub_100089D00((char *)1, 3, 1, (char *)v9);
  v13 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v16->initializeWithCopy)((uint64_t)v15, v17);
  sub_10008A6F0(2, (uint64_t)v15, (uint64_t *)&v30, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v18 = v30;
  v19 = String._bridgeToObjectiveC()();
  v20 = (_QWORD *)swift_allocObject(&unk_10014CCA8, 40, 7);
  v20[2] = 0xD00000000000001CLL;
  v20[3] = 0x8000000100114700;
  v20[4] = v18;
  v28 = sub_100074F08;
  v29 = v20;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_100089C8C;
  v27 = (ValueMetadata *)&unk_10014CCC0;
  v21 = _Block_copy(&aBlock);
  v22 = v29;
  swift_bridgeObjectRetain(v18);
  swift_release(v22);
  AnalyticsSendEventLazy(v19, v21);
  _Block_release(v21);
  swift_bridgeObjectRelease(v18);

}

uint64_t sub_10008AD50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008AD60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10008AD68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CA98;
  if (!qword_10015CA98)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015CA98);
  }
  return result;
}

uint64_t sub_10008ADA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10008AE94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_10008AFAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *result;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain(a1);
LABEL_23:
    swift_bridgeObjectRelease(v1);
    return _swiftEmptyDictionarySingleton;
  }
  v3 = a1 + 32;
  swift_bridgeObjectRetain_n(a1, 2);
  while (1)
  {
    sub_10003BC30(v3, (uint64_t)v35);
    v6 = v36;
    v7 = v37;
    sub_10001BF94(v35, v36);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    v9 = *(_QWORD *)&aBundleidpagena[8 * v8 + 32];
    if (_swiftEmptyDictionarySingleton[2])
    {
      sub_100086E80(*(_QWORD *)&aId_3[8 * v8], v9);
      v11 = v10;
      swift_bridgeObjectRelease(v9);
      if ((v11 & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)&aBundleidpagena[8 * v8 + 32]);
    }
    v12 = v36;
    v13 = v37;
    sub_10001BF94(v35, v36);
    v14 = 8 * (*(char (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    v15 = *(_QWORD *)&aId_3[v14];
    v16 = *(_QWORD *)&aBundleidpagena[v14 + 32];
    v17 = v36;
    v18 = v37;
    sub_10001BF94(v35, v36);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v22 = sub_100086E80(v15, v16);
    v23 = _swiftEmptyDictionarySingleton[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (_swiftEmptyDictionarySingleton[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v21 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        sub_10008A558();
        if ((v26 & 1) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      sub_10008A26C(v25, isUniquelyReferenced_nonNull_native);
      v27 = sub_100086E80(v15, v16);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_26;
      v22 = v27;
      if ((v26 & 1) == 0)
      {
LABEL_17:
        _swiftEmptyDictionarySingleton[(v22 >> 6) + 8] |= 1 << v22;
        v29 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v22);
        *v29 = v15;
        v29[1] = v16;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v22) = v19;
        v30 = _swiftEmptyDictionarySingleton[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_25;
        _swiftEmptyDictionarySingleton[2] = v32;
        swift_bridgeObjectRetain(v16);
        goto LABEL_4;
      }
    }
    v4 = _swiftEmptyDictionarySingleton[7];
    v5 = *(void **)(v4 + 8 * v22);
    *(_QWORD *)(v4 + 8 * v22) = v19;

LABEL_4:
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_5:
    sub_1000228FC(v35);
    v3 += 40;
    if (!--v2)
    {
      v1 = a1;
      swift_bridgeObjectRelease(a1);
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10008B26C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10008B364@<X0>(uint64_t a1@<X8>)
{
  return sub_10008B418(&qword_10015CB18, &qword_10015CB20, (uint64_t (*)(_QWORD))&type metadata accessor for Artist, a1);
}

uint64_t sub_10008B380(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10008CFD4(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_10008D108(result, v3, 0, a1);
  swift_bridgeObjectRetain(v6);
  return v5;
}

uint64_t sub_10008B3FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10008B418(&qword_10015CB38, &qword_10015CB40, (uint64_t (*)(_QWORD))&type metadata accessor for Playlist, a1);
}

uint64_t sub_10008B418@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;

  v8 = sub_100007D50(a1);
  v9 = sub_10000F4E0(a2, a1, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  dispatch thunk of Collection.startIndex.getter(v8, v9);
  dispatch thunk of Collection.endIndex.getter(v17, v8, v9);
  if (v18 == v17[0])
  {
    v10 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  }
  else
  {
    v12 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v17, &v18, v8, v9);
    v14 = v13;
    v15 = a3(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a4, v14, v15);
    v12(v17, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a4, 0, 1, v15);
  }
}

uint64_t sub_10008B530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_10008CFD4(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for Artist(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_10008D074(result, v5, a1, a2);
    v7 = type metadata accessor for Artist(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_10008B5D0()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10008B5F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

uint64_t sub_10008B66C()
{
  return EnvironmentValues.dismiss.getter();
}

_OWORD *sub_10008B68C(uint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];

  v2 = v1;
  v65 = a1;
  v3 = sub_100007D50(&qword_10015B990);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  __chkstk_darwin(v3);
  v66 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_10015AD50);
  __chkstk_darwin(v5);
  v59 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015C210);
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  __chkstk_darwin(v7);
  v62 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015C218);
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_100159248);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_100159258);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0u;
  v2[3] = 0u;
  v2[1] = 0u;
  v20 = (char *)v2 + qword_10015C140;
  *(_QWORD *)&v69[0] = 0;
  Published.init(initialValue:)(v69, &type metadata for CGFloat);
  v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v20, v19, v16);
  v22 = (char *)v2 + qword_10015C148;
  LOBYTE(v69[0]) = 0;
  Published.init(initialValue:)(v69, &type metadata for Bool);
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v23(v22, v15, v12);
  v24 = (char *)v2 + qword_10015C150;
  LOBYTE(v69[0]) = 0;
  Published.init(initialValue:)(v69, &type metadata for Bool);
  v23(v24, v15, v12);
  v25 = (char *)v2 + qword_10015C158;
  LOBYTE(v69[0]) = 0;
  Published.init(initialValue:)(v69, &type metadata for Bool);
  v26 = v12;
  v27 = (uint64_t)v59;
  v23(v25, v15, v26);
  v28 = (char *)v2 + qword_10015C160;
  *(_QWORD *)&v69[0] = 0;
  Published.init(initialValue:)(v69, &type metadata for CGFloat);
  v21(v28, v19, v16);
  v29 = (char *)v2 + qword_10015C168;
  type metadata accessor for CGSize(0);
  v69[0] = 0uLL;
  Published.init(initialValue:)(v69, v30);
  v31 = v11;
  v32 = v65;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v29, v31, v61);
  v33 = (char *)v2 + qword_10015C170;
  memset(v69, 0, sizeof(v69));
  v34 = v62;
  Published.init(initialValue:)(v69, &type metadata for EdgeInsets);
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v33, v34, v64);
  v35 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 176);
  v36 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  v38 = sub_100007D50(&qword_10015A6A0);
  v39 = *(_QWORD *)(v38 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v32, v38);
  v40 = sub_100007428(&qword_10015B998, (uint64_t (*)(uint64_t))&type metadata accessor for LiveMusic, (uint64_t)&protocol conformance descriptor for LiveMusic);
  v41 = v66;
  v42 = Event<>.participants.getter(v38, v40);
  v43 = Participants<>.headliners.getter(v42);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v41, v68);
  sub_10008B530(v43, v27);
  swift_bridgeObjectRelease(v43);
  v44 = type metadata accessor for Artist(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v27, 1, v44);
  v47 = v46;
  if ((_DWORD)v46 == 1)
  {
    sub_100007F38(v27, &qword_10015AD50);
    v51 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 152))(v38, v51);
    v50 = v52;
  }
  else
  {
    v48 = Artist.id.getter(v46);
    v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v27, v44);
  }
  v53 = type metadata accessor for PromotionalAssetsController(0);
  v54 = swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v55 = v54 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  v56 = type metadata accessor for ArtistPromotionalAssets(0);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 1, 1, v56);
  *(_QWORD *)(v54 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v54 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v57);
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v50;
  *(_BYTE *)(v54 + 32) = v47 != 1;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v32, v38);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 168)) = v54;
  return v2;
}

uint64_t sub_10008BBE0()
{
  uint64_t v0;

  v0 = type metadata accessor for EventController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_1000D2F68();
}

uint64_t sub_10008BC14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  __n128 v36;
  _QWORD *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (**v98)();
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  __int128 v161;
  __int128 v162;

  v159 = a1;
  v137 = type metadata accessor for TaskPriority(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v134 = (char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100007D50(&qword_100158EB8);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100007D50(&qword_10015AD08);
  __chkstk_darwin(v158);
  v130 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v135 = (uint64_t)&v127 - v6;
  v139 = type metadata accessor for ErrorView(0);
  __chkstk_darwin(v139);
  v140 = (uint64_t *)((char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v142 = (uint64_t)&v127 - v9;
  v154 = sub_100007D50(&qword_10015AD20);
  __chkstk_darwin(v154);
  v141 = (uint64_t)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v143 = (uint64_t)&v127 - v12;
  v155 = sub_100007D50(&qword_10015CAC8);
  __chkstk_darwin(v155);
  v157 = (uint64_t)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100007D50(&qword_10015CAD0);
  __chkstk_darwin(v150);
  v152 = (uint64_t)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100007D50(&qword_10015CAD8);
  __chkstk_darwin(v156);
  v153 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100007D50(&qword_10015CAE0);
  __chkstk_darwin(v151);
  v144 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v138 = (uint64_t)&v127 - v18;
  v19 = sub_100007D50(&qword_10015ADE0);
  __chkstk_darwin(v19);
  v21 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100007D50(&qword_10015A6A0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  __chkstk_darwin(v22);
  __chkstk_darwin(v25);
  v27 = (char *)&v127 - v26;
  v29 = *(_QWORD *)(v1 + 16);
  v28 = *(_QWORD *)(v1 + 24);
  v160 = (_QWORD *)v1;
  v30 = *(unsigned __int8 *)(v1 + 32);
  v31 = type metadata accessor for EventController(0);
  v32 = sub_100007428(&qword_10015CAE8, type metadata accessor for EventController, (uint64_t)&unk_100110648);
  v147 = v29;
  v148 = v28;
  v149 = v30;
  v145 = v32;
  v146 = v31;
  v33 = StateObject.wrappedValue.getter(v29, v28, v30, v31, v32);
  KeyPath = swift_getKeyPath(&unk_10010E2F8);
  v35 = swift_getKeyPath(&unk_10010E320);
  static Published.subscript.getter(v33, KeyPath, v35);
  swift_release(v33);
  swift_release(KeyPath);
  v36 = swift_release(v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v23 + 48))(v21, 1, v22, v36) != 1)
  {
    v128 = (char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v129 = v23;
    v38 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v38(v27, v21, v22);
    v37 = v160;
    v39 = *v160;
    v40 = v160[1];
    v41 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 152))(v22, v41);
    v44 = v42;
    v45 = v27;
    if (v39 == v43 && v40 == v42)
    {
      swift_bridgeObjectRelease(v40);
      v46 = v128;
      v47 = v144;
    }
    else
    {
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v42, 0);
      swift_bridgeObjectRelease(v44);
      v46 = v128;
      v47 = v144;
      if ((v48 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v129 + 8))(v45, v22);
        goto LABEL_9;
      }
    }
    v49 = v129;
    (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v46, v45, v22);
    v50 = *(unsigned __int8 *)(v49 + 80);
    v51 = (v50 + 16) & ~v50;
    v52 = swift_allocObject(&unk_10014CE20, v51 + v24, v50 | 7);
    v38((char *)(v52 + v51), v46, v22);
    *(_QWORD *)v47 = sub_10008CF78;
    *((_QWORD *)v47 + 1) = v52;
    v47[16] = 0;
    *((_QWORD *)v47 + 3) = sub_100044A64;
    *((_QWORD *)v47 + 4) = 0;
    v47[40] = 0;
    v53 = sub_100007D50(&qword_100159A18);
    v54 = swift_allocObject(v53, 17, 7);
    *(_BYTE *)(v54 + 16) = 0;
    v55 = sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    *((_QWORD *)v47 + 6) = ObservedObject.init(wrappedValue:)(v54, v53, v55);
    *((_QWORD *)v47 + 7) = v56;
    *((_QWORD *)v47 + 8) = 0;
    v57 = type metadata accessor for RemoteViewConfiguration();
    v58 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *((_QWORD *)v47 + 9) = EnvironmentObject.init()(v57, v58);
    *((_QWORD *)v47 + 10) = v59;
    v60 = v151;
    v61 = &v47[*(int *)(v151 + 52)];
    *(_QWORD *)v61 = swift_getKeyPath(&unk_10010E388);
    v62 = sub_100007D50(qword_100158AC8);
    swift_storeEnumTagMultiPayload(v61, v62, 0);
    v63 = &v47[*(int *)(v60 + 56)];
    *(_QWORD *)v63 = swift_getKeyPath(&unk_10010E3B8);
    v64 = sub_100007D50(&qword_100158AC0);
    swift_storeEnumTagMultiPayload(v63, v64, 0);
    v65 = &v47[*(int *)(v60 + 60)];
    *(_QWORD *)v65 = swift_getKeyPath(&unk_10010E3E8);
    v66 = sub_100007D50(&qword_100158968);
    swift_storeEnumTagMultiPayload(v65, v66, 0);
    v67 = (uint64_t)v47;
    v68 = v22;
    v69 = v138;
    sub_100018EB4(v67, v138, &qword_10015CAE0);
    v70 = v152;
    sub_100007E78(v69, v152, &qword_10015CAE0);
    swift_storeEnumTagMultiPayload(v70, v150, 0);
    v71 = sub_10000F4E0(&qword_10015CB08, &qword_10015CAE0, (uint64_t)&unk_10010A868);
    v72 = sub_1000595E8();
    v73 = (uint64_t)v153;
    _ConditionalContent<>.init(storage:)(v70, v60, v154, v71, v72);
    v74 = v157;
    sub_100007E78(v73, v157, &qword_10015CAD8);
    swift_storeEnumTagMultiPayload(v74, v155, 0);
    v75 = sub_10008CDE4();
    v76 = sub_10005966C();
    _ConditionalContent<>.init(storage:)(v74, v156, v158, v75, v76);
    sub_100007F38(v73, &qword_10015CAD8);
    sub_100007F38(v69, &qword_10015CAE0);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v45, v68);
  }
  sub_100007F38((uint64_t)v21, &qword_10015ADE0);
  v37 = v160;
LABEL_9:
  v79 = v147;
  v78 = v148;
  v80 = StateObject.wrappedValue.getter(v147, v148, v149, v146, v145);
  v81 = swift_getKeyPath(&unk_10010E340);
  v82 = swift_getKeyPath(&unk_10010E368);
  static Published.subscript.getter(v80, v81, v82);
  swift_release(v80);
  swift_release(v81);
  swift_release(v82);
  v83 = v162;
  v84 = swift_errorRelease(v162);
  if (v83)
  {
    v85 = swift_getKeyPath(&unk_10010E388);
    v86 = (uint64_t)v140;
    *v140 = v85;
    v87 = sub_100007D50(qword_100158AC8);
    swift_storeEnumTagMultiPayload(v86, v87, 0);
    v88 = (_QWORD *)(v86 + *(int *)(v139 + 20));
    v89 = type metadata accessor for RemoteViewConfiguration();
    v90 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *v88 = EnvironmentObject.init()(v89, v90);
    v88[1] = v91;
    v92 = v142;
    sub_1000597D4(v86, v142);
    v93 = *(_OWORD *)v37;
    v161 = *(_OWORD *)(v37 + 5);
    v162 = v93;
    v94 = swift_allocObject(&unk_10014CDF8, 72, 7);
    v95 = *((_OWORD *)v37 + 1);
    *(_OWORD *)(v94 + 16) = *(_OWORD *)v37;
    *(_OWORD *)(v94 + 32) = v95;
    *(_OWORD *)(v94 + 48) = *((_OWORD *)v37 + 2);
    *(_QWORD *)(v94 + 64) = v37[6];
    v96 = v141;
    sub_10008CE94(v92, v141);
    v97 = v154;
    v98 = (uint64_t (**)())(v96 + *(int *)(v154 + 36));
    *v98 = sub_10008CE8C;
    v98[1] = (uint64_t (*)())v94;
    v98[2] = 0;
    v98[3] = 0;
    sub_100027618((uint64_t)&v162);
    sub_10002BE30(v79, v78);
    sub_10005120C(&v161);
    sub_10008CED8(v92);
    v99 = &qword_10015AD20;
    v100 = v143;
    sub_100018EB4(v96, v143, &qword_10015AD20);
    v101 = v152;
    sub_100007E78(v100, v152, &qword_10015AD20);
    swift_storeEnumTagMultiPayload(v101, v150, 1);
    v102 = sub_10000F4E0(&qword_10015CB08, &qword_10015CAE0, (uint64_t)&unk_10010A868);
    v103 = sub_1000595E8();
    v104 = (uint64_t)v153;
    _ConditionalContent<>.init(storage:)(v101, v151, v97, v102, v103);
    v105 = v157;
    sub_100007E78(v104, v157, &qword_10015CAD8);
    swift_storeEnumTagMultiPayload(v105, v155, 0);
    v106 = sub_10008CDE4();
    v107 = sub_10005966C();
    _ConditionalContent<>.init(storage:)(v105, v156, v158, v106, v107);
    sub_100007F38(v104, &qword_10015CAD8);
    v108 = v100;
  }
  else
  {
    v109 = v131;
    ProgressView<>.init<>()(v84);
    v110 = *(_OWORD *)v37;
    v161 = *(_OWORD *)(v37 + 5);
    v162 = v110;
    v111 = swift_allocObject(&unk_10014CDD0, 72, 7);
    v112 = *((_OWORD *)v37 + 1);
    *(_OWORD *)(v111 + 16) = *(_OWORD *)v37;
    *(_OWORD *)(v111 + 32) = v112;
    *(_OWORD *)(v111 + 48) = *((_OWORD *)v37 + 2);
    *(_QWORD *)(v111 + 64) = v37[6];
    sub_10002BE30(v79, v78);
    sub_100027618((uint64_t)&v162);
    v113 = sub_10005120C(&v161);
    v114 = v134;
    static TaskPriority.userInitiated.getter(v113);
    v115 = v158;
    v116 = (uint64_t)v130;
    v117 = &v130[*(int *)(v158 + 36)];
    v118 = type metadata accessor for _TaskModifier(0);
    v119 = v136;
    v120 = v137;
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(&v117[*(int *)(v118 + 20)], v114, v137);
    *(_QWORD *)v117 = &unk_10015CAF8;
    *((_QWORD *)v117 + 1) = v111;
    v121 = v132;
    v122 = v133;
    (*(void (**)(uint64_t, char *, uint64_t))(v132 + 16))(v116, v109, v133);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v114, v120);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v109, v122);
    v99 = &qword_10015AD08;
    v123 = v135;
    sub_100018EB4(v116, v135, &qword_10015AD08);
    v124 = v157;
    sub_100007E78(v123, v157, &qword_10015AD08);
    swift_storeEnumTagMultiPayload(v124, v155, 1);
    v125 = sub_10008CDE4();
    v126 = sub_10005966C();
    _ConditionalContent<>.init(storage:)(v124, v156, v115, v125, v126);
    v108 = v123;
  }
  return sub_100007F38(v108, v99);
}

_OWORD *sub_10008C858(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = sub_100007D50(&qword_10015A6A0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  v7 = sub_100007D50(&qword_10015CB10);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  return sub_10008B68C((uint64_t)v5);
}

uint64_t sub_10008C8EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = type metadata accessor for EventController(0);
  v6 = sub_100007428(&qword_10015CAE8, type metadata accessor for EventController, (uint64_t)&unk_100110648);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    swift_retain(v8);
    swift_bridgeObjectRetain(v10);
    sub_10008AB1C(v11, v10, 1, v8);
    swift_release(v9);
    swift_release(v8);
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_10008C9EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch(sub_10008CA58, v4, v5);
}

uint64_t sub_10008CA58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 32);
  v5 = type metadata accessor for EventController(0);
  v6 = sub_100007428(&qword_10015CAE8, type metadata accessor for EventController, (uint64_t)&unk_100110648);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_10015ED44);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_100058F50;
  return sub_1000D2A40(v7, v8);
}

uint64_t sub_10008CB10(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010E2F8);
  v3 = swift_getKeyPath(&unk_10010E320);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_10008CB78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100007D50(&qword_10015ADE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - v8;
  sub_100007E78(a1, (uint64_t)&v14 - v8, &qword_10015ADE0);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010E2F8);
  v12 = swift_getKeyPath(&unk_10010E320);
  sub_100007E78((uint64_t)v9, (uint64_t)v6, &qword_10015ADE0);
  swift_retain(v10);
  static Published.subscript.setter(v6, v10, KeyPath, v12);
  return sub_100007F38((uint64_t)v9, &qword_10015ADE0);
}

uint64_t sub_10008CC70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010E340);
  v5 = swift_getKeyPath(&unk_10010E368);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10008CCEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010E340);
  v5 = swift_getKeyPath(&unk_10010E368);
  v7 = v2;
  swift_errorRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

ValueMetadata *type metadata accessor for EventContentView()
{
  return &type metadata for EventContentView;
}

uint64_t sub_10008CD74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118540, 1);
}

uint64_t sub_10008CD98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10015CAF4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000FAC0;
  return sub_10008C9EC(v0 + 16);
}

unint64_t sub_10008CDE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CB00;
  if (!qword_10015CB00)
  {
    v1 = sub_100007D00(&qword_10015CAD8);
    sub_10000F4E0(&qword_10015CB08, &qword_10015CAE0, (uint64_t)&unk_10010A868);
    sub_1000595E8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CB00);
  }
  return result;
}

uint64_t sub_10008CE68()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_10008CE8C()
{
  uint64_t v0;

  return sub_10008C8EC(v0 + 16);
}

uint64_t sub_10008CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ErrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008CED8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ErrorView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008CF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100007D50(&qword_10015A6A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

_OWORD *sub_10008CF78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100007D50(&qword_10015A6A0) - 8) + 80);
  return sub_10008C858(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10008CFA8()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10008CFD4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10008D074@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for Artist(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10008D108(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_10008D164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CB28;
  if (!qword_10015CB28)
  {
    v1 = sub_100007D00(&qword_10015CB30);
    sub_10008CDE4();
    sub_10005966C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CB28);
  }
  return result;
}

uint64_t destroy for ScrollableTab(_QWORD *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease(*a1);
  v2 = a1[2];
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  swift_release(a1[4]);
  return swift_release(a1[5]);
}

uint64_t *initializeWithCopy for ScrollableTab(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[2];
  swift_bridgeObjectRetain(v4);
  if (v6 >= 2)
  {
    a1[1] = *v5;
    a1[2] = v6;
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v5;
  }
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  v9 = a2[5];
  v8 = a2[6];
  a1[5] = v9;
  a1[6] = v8;
  swift_retain(v7);
  swift_retain(v9);
  return a1;
}

_QWORD *assignWithCopy for ScrollableTab(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  if (v6 >= 2)
  {
    if (v7 >= 2)
    {
      a1[1] = a2[1];
      v9 = a2[2];
      a1[2] = v9;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v6);
      goto LABEL_8;
    }
    sub_10008D390((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v7 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    goto LABEL_8;
  }
  a1[1] = a2[1];
  v8 = a2[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
LABEL_8:
  v10 = a2[4];
  v11 = a1[4];
  a1[3] = a2[3];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a1[5];
  v13 = a2[5];
  a1[5] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[6] = a2[6];
  return a1;
}

uint64_t sub_10008D390(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

uint64_t *assignWithTake for ScrollableTab(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2 + 1;
  v6 = a1[2];
  if (v6 >= 2)
  {
    v7 = a2[2];
    if (v7 >= 2)
    {
      a1[1] = *v5;
      a1[2] = v7;
      swift_bridgeObjectRelease(v6);
      goto LABEL_6;
    }
    sub_10008D390((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v5;
LABEL_6:
  v8 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v8);
  v9 = a1[5];
  a1[5] = a2[5];
  swift_release(v9);
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTab(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTab(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableTab()
{
  return &type metadata for ScrollableTab;
}

uint64_t sub_10008D50C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001185A8, 1);
}

uint64_t sub_10008D51C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)();
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v26 = a3;
  v5 = type metadata accessor for ScrollViewProxy(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v25 = sub_100007D50(&qword_10015CB58);
  v8 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Axis.Set.horizontal.getter(v11);
  v28 = a2;
  v13 = sub_100007D50(&qword_10015CB60);
  v14 = sub_10008DE14();
  ScrollView.init(_:showsIndicators:content:)(v12, 0, sub_10008DE0C, v27, v13, v14);
  v15 = *(_OWORD *)(a2 + 1);
  v31 = *a2;
  v16 = a2[4];
  v29 = *(_OWORD *)(a2 + 5);
  v30 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = (v17 + 72) & ~v17;
  v19 = swift_allocObject(&unk_10014CF58, v18 + v7, v17 | 7);
  v20 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 32) = v20;
  *(_OWORD *)(v19 + 48) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(v19 + 64) = a2[6];
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v19 + v18, (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v21 = v25;
  v22 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v26, v10, v25);
  v23 = (void (**)())(v22 + *(int *)(sub_100007D50(&qword_10015CB80) + 36));
  *v23 = sub_10008DF34;
  v23[1] = (void (*)())v19;
  v23[2] = 0;
  v23[3] = 0;
  sub_100027640(&v31);
  sub_10008DDCC((uint64_t)&v30);
  swift_retain(v16);
  sub_10005120C(&v29);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v21);
}

uint64_t sub_10008D708@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = sub_100007D50(&qword_10015CB78);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v7);
  *((_QWORD *)v6 + 1) = 0x4020000000000000;
  v6[16] = 0;
  sub_100007D50(&qword_10015CB88);
  v8 = *a1;
  v24 = *(_OWORD *)(a1 + 1);
  v25 = v8;
  v22 = v8;
  KeyPath = swift_getKeyPath(&unk_10010E480);
  v10 = a1[4];
  v23 = *(_OWORD *)(a1 + 5);
  v11 = swift_allocObject(&unk_10014CF80, 72, 7);
  v12 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = *((_OWORD *)a1 + 2);
  *(_QWORD *)(v11 + 64) = a1[6];
  swift_bridgeObjectRetain(v8);
  sub_100027640(&v25);
  sub_10008DDCC((uint64_t)&v24);
  swift_retain(v10);
  sub_10005120C(&v23);
  v13 = sub_100007D50(&qword_10015CB90);
  v14 = sub_100007D50(&qword_10015CB98);
  v15 = sub_10000F4E0(&qword_10015CBA0, &qword_10015CB90, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_10008F038();
  v17 = sub_10000F4E0(&qword_10015CBB0, &qword_10015CB98, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v18 = ForEach<>.init(_:id:content:)(&v22, KeyPath, sub_10008F030, v11, v13, v14, v15, v16, v17);
  LOBYTE(v16) = static Edge.Set.horizontal.getter(v18);
  sub_100007E78((uint64_t)v6, a2, &qword_10015CB78);
  v19 = a2 + *(int *)(sub_100007D50(&qword_10015CB60) + 36);
  *(_BYTE *)v19 = v16;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_BYTE *)(v19 + 40) = 1;
  return sub_100007F38((uint64_t)v6, &qword_10015CB78);
}

double sub_10008D924@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __n128 v20;
  __n128 v21;
  __n128 v22;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a2;
  v20 = *(__n128 *)(a2 + 1);
  sub_10008F07C(&v20, &v21);
  sub_10008F07C(&v21, &v22);
  if (v22.n128_u64[1] == 1)
  {
    if (v6 == 1)
    {
      v9 = a2[4];
      v10 = a2[5];
      v11 = swift_allocObject(&unk_10014D020, 88, 7);
      v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
      *(_OWORD *)(v11 + 32) = v15;
      *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
      *(_QWORD *)(v11 + 64) = a2[6];
      *(_QWORD *)(v11 + 72) = v5;
      v13 = 1;
      *(_QWORD *)(v11 + 80) = 1;
LABEL_10:
      v14 = 0xEF6E6F697461636FLL;
      v8 = 0x4C746E6572727563;
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  if (v22.n128_u64[1])
  {
    if (v6 >= 2)
    {
      if (v22.n128_u64[0] == v5 && v6 == v22.n128_u64[1])
      {
        v9 = a2[4];
        v10 = a2[5];
        v11 = swift_allocObject(&unk_10014CFF8, 88, 7);
        v17 = *((_OWORD *)a2 + 1);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v11 + 32) = v17;
        *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
        *(_QWORD *)(v11 + 64) = a2[6];
        *(_QWORD *)(v11 + 72) = v5;
        *(_QWORD *)(v11 + 80) = v6;
        v13 = 1;
      }
      else
      {
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v22.n128_u64[0], v22.n128_u64[1], v5, v6, 0);
        v9 = a2[4];
        v10 = a2[5];
        v11 = swift_allocObject(&unk_10014CFD0, 88, 7);
        v18 = *((_OWORD *)a2 + 1);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
        *(_OWORD *)(v11 + 32) = v18;
        *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
        *(_QWORD *)(v11 + 64) = a2[6];
        *(_QWORD *)(v11 + 72) = v5;
        *(_QWORD *)(v11 + 80) = v6;
      }
      goto LABEL_17;
    }
LABEL_8:
    v9 = a2[4];
    v10 = a2[5];
    v11 = swift_allocObject(&unk_10014CFA8, 88, 7);
    v13 = 0;
    v16 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v11 + 32) = v16;
    *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
    *(_QWORD *)(v11 + 64) = a2[6];
    *(_QWORD *)(v11 + 72) = v5;
    *(_QWORD *)(v11 + 80) = v6;
    if (!v6)
    {
      v8 = 7105633;
      v14 = 0xE300000000000000;
      goto LABEL_18;
    }
    if (v6 == 1)
      goto LABEL_10;
    v13 = 0;
LABEL_17:
    v8 = v5;
    v14 = v6;
    goto LABEL_18;
  }
  if (v6)
    goto LABEL_8;
  v8 = 7105633;
  v9 = a2[4];
  v10 = a2[5];
  v11 = swift_allocObject(&unk_10014D048, 88, 7);
  v12 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(v11 + 64) = a2[6];
  *(_QWORD *)(v11 + 72) = v5;
  *(_QWORD *)(v11 + 80) = 0;
  v13 = 1;
  v14 = 0xE300000000000000;
LABEL_18:
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v13 & 1;
  *(_QWORD *)(a3 + 24) = sub_10008F0BC;
  *(_QWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v14;
  sub_10008DDF8(v5, v6);
  sub_10008DDF8(v5, v6);
  sub_10008DDF8(v5, v6);
  swift_bridgeObjectRetain(v7);
  sub_10008DDCC((uint64_t)&v20);
  swift_retain(v10);
  *(_QWORD *)&result = swift_retain(v9).n128_u64[0];
  return result;
}

void sub_10008DBDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(unint64_t **)a1;
    v4 = swift_retain(*(_QWORD *)(a1 + 40));
    v6 = sub_1000978A0(v5, v3, v4);
    v8 = v7;
    v9 = swift_release(v2);
    if (v8 != 2)
    {
      v10 = (*(uint64_t (**)(uint64_t, unint64_t, __n128))(a1 + 24))(v6, v8, v9);
      v11 = 0x4C746E6572727563;
      v12 = 0xE300000000000000;
      v13 = 7105633;
      if (v8)
      {
        v13 = v6;
        v12 = v8;
      }
      if (v8 == 1)
      {
        v14 = 0xEF6E6F697461636FLL;
      }
      else
      {
        v11 = v13;
        v14 = v12;
      }
      v20[0] = v11;
      v20[1] = v14;
      v15 = static UnitPoint.trailing.getter(v10);
      ScrollViewProxy.scrollTo<A>(_:anchor:)(v20, *(_QWORD *)&v15, v16, 0, &type metadata for String, &protocol witness table for String);
      swift_bridgeObjectRelease(v14);
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 48);
    v18 = type metadata accessor for RemoteViewConfiguration();
    v19 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
}

_QWORD *sub_10008DD18@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v8 = *(_OWORD *)(v1 + 1);
  v9 = v3;
  v10 = *(_OWORD *)(v1 + 5);
  v6 = swift_allocObject(&unk_10014CF30, 72, 7);
  *(_QWORD *)(v6 + 16) = v3;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v1 + 1);
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(v1 + 5);
  *a1 = sub_10008DDC4;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v6;
  sub_100027640(&v9);
  sub_10008DDCC((uint64_t)&v8);
  swift_retain(v4);
  return sub_10005120C(&v10);
}

uint64_t sub_10008DDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10008D51C(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_10008DDCC(uint64_t a1)
{
  sub_10008DDF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10008DDF8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_10008DE0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10008D708(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10008DE14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CB68;
  if (!qword_10015CB68)
  {
    v1 = sub_100007D00(&qword_10015CB60);
    sub_10000F4E0(&qword_10015CB70, &qword_10015CB78, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CB68);
  }
  return result;
}

uint64_t sub_10008DE98()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 2));
  v5 = *((_QWORD *)v0 + 4);
  if (v5 >= 2)
    swift_bridgeObjectRelease(v5);
  v6 = (v3 + 72) & ~v3;
  swift_release(*((_QWORD *)v0 + 6));
  swift_release(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v6], v1);
  return swift_deallocObject(v0, v6 + v4, v3 | 7);
}

void sub_10008DF34()
{
  uint64_t v0;

  type metadata accessor for ScrollViewProxy(0);
  sub_10008DBDC(v0 + 16);
}

void sub_10008DF64()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x80000001001147C0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_10015CB48 = (__int128)v3;
}

uint64_t sub_10008E004@<X0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[2];
  __n128 v28;
  __n128 v29;

  v27[1] = a1;
  v2 = sub_100007D50(&qword_10015CBC8);
  __chkstk_darwin(v2);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = sub_100007D50(&qword_10015CBD0);
  __chkstk_darwin(v27[0]);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015CBD8);
  __chkstk_darwin(v7);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015CBE0);
  __chkstk_darwin(v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015CBE8);
  __chkstk_darwin(v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008F07C(v1, &v28);
  sub_10008F07C(&v28, &v29);
  if (v29.n128_u64[1] == 1)
  {
    sub_10008E6D4((uint64_t)v4);
    sub_100007E78((uint64_t)v4, (uint64_t)v9, &qword_10015CBC8);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v21 = sub_10008F3FC();
    v22 = sub_10008F588();
    _ConditionalContent<>.init(storage:)(v9, v13, v2, v21, v22);
    sub_100007E78((uint64_t)v12, (uint64_t)v6, &qword_10015CBE0);
    swift_storeEnumTagMultiPayload(v6, v27[0], 0);
    v23 = sub_10008F3D8();
    _ConditionalContent<>.init(storage:)(v6, v10, v13, v23, v21);
    sub_100007F38((uint64_t)v12, &qword_10015CBE0);
    v19 = (uint64_t)v4;
    v20 = &qword_10015CBC8;
  }
  else if (v29.n128_u64[1])
  {
    sub_10008E3A8(v29.n128_i64[0], v29.n128_i64[1], (uint64_t)v15);
    sub_100007E78((uint64_t)v15, (uint64_t)v6, &qword_10015CBE8);
    swift_storeEnumTagMultiPayload(v6, v27[0], 1);
    v24 = sub_10008F3D8();
    v25 = sub_10008F3FC();
    _ConditionalContent<>.init(storage:)(v6, v10, v13, v24, v25);
    v19 = (uint64_t)v15;
    v20 = &qword_10015CBE8;
  }
  else
  {
    if (qword_100158130 != -1)
      swift_once(&qword_100158130, sub_10008DF64);
    sub_10008E3A8(xmmword_10015CB48, *((uint64_t *)&xmmword_10015CB48 + 1), (uint64_t)v15);
    sub_100007E78((uint64_t)v15, (uint64_t)v9, &qword_10015CBE8);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v16 = sub_10008F3FC();
    v17 = sub_10008F588();
    _ConditionalContent<>.init(storage:)(v9, v13, v2, v16, v17);
    sub_100007E78((uint64_t)v12, (uint64_t)v6, &qword_10015CBE0);
    swift_storeEnumTagMultiPayload(v6, v27[0], 0);
    v18 = sub_10008F3D8();
    _ConditionalContent<>.init(storage:)(v6, v10, v13, v18, v16);
    sub_100007F38((uint64_t)v12, &qword_10015CBE0);
    v19 = (uint64_t)v15;
    v20 = &qword_10015CBE8;
  }
  return sub_100007F38(v19, v20);
}

uint64_t sub_10008E3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a1;
  v51 = a3;
  v49 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v49);
  v50 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015CC28);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015CC18);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100007D50(&qword_10015CC08);
  __chkstk_darwin(v48);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v3 + 24);
  v16 = *(_QWORD *)(v3 + 32);
  v53 = v47;
  v54 = a2;
  v55 = v3;
  swift_retain(v16);
  v17 = sub_100007D50(&qword_10015CCA0);
  v18 = sub_10008F930();
  v19 = Button.init(action:label:)(v15, v16, sub_10008F924, v52, v17, v18);
  LOBYTE(v15) = static Edge.Set.vertical.getter(v19);
  v20 = EdgeInsets.init(_all:)(8.0);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
  v27 = &v12[*(int *)(v10 + 36)];
  *v27 = v15;
  *((double *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  v28 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(_BYTE *)(v3 + 16) & 1) != 0)
  {
    v30 = static Color.primary.getter(v28);
    v29 = v30;
  }
  else
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v29 = qword_10016A4B0;
    swift_retain(qword_10016A4B0);
  }
  v31 = static Edge.Set.all.getter(v30);
  sub_100007E78((uint64_t)v12, (uint64_t)v14, &qword_10015CC18);
  v32 = &v14[*(int *)(v48 + 36)];
  *(_QWORD *)v32 = v29;
  v32[8] = v31;
  sub_100007F38((uint64_t)v12, &qword_10015CC18);
  v33 = v50;
  v34 = &v50[*(int *)(v49 + 20)];
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v34, v35, v36);
  __asm { FMOV            V0.2D, #8.0 }
  *v33 = _Q0;
  v42 = sub_100007D50(&qword_10015CBE8);
  v43 = v51;
  v44 = v51 + *(int *)(v42 + 36);
  sub_10000F760((uint64_t)v33, v44);
  *(_WORD *)(v44 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v14, v43, &qword_10015CC08);
  sub_10000F854((uint64_t)v33);
  return sub_100007F38((uint64_t)v14, &qword_10015CC08);
}

uint64_t sub_10008E6D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];

  v93 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v94 = *(_QWORD *)(v2 - 8);
  v95 = v2;
  __chkstk_darwin(v2);
  v92 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v90);
  v91 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TitleAndIconLabelStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  v84 = v6;
  __chkstk_darwin(v5);
  v81 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for SymbolVariants(0);
  v76 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015CC90);
  __chkstk_darwin(v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocationButton(0);
  v73 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100007D50(&qword_10015CC78);
  v78 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100007D50(&qword_10015CC98);
  v77 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100007D50(&qword_10015CC70);
  __chkstk_darwin(v75);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100007D50(&qword_10015CC60);
  __chkstk_darwin(v82);
  v86 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100007D50(&qword_10015CC50);
  __chkstk_darwin(v85);
  v87 = (uint64_t)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100007D50(&qword_10015CC40);
  v24 = __chkstk_darwin(v88);
  v89 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LocationButton.Title.currentLocation.getter(v24);
  v26 = type metadata accessor for LocationButton.Title(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 0, 1, v26);
  v72 = v1;
  v28 = *(_QWORD *)(v1 + 24);
  v27 = *(_QWORD *)(v1 + 32);
  v29 = swift_retain(v27);
  v30 = LocationButton.init(_:action:)(v12, v28, v27, v29);
  static SymbolVariants.fill.getter(v30);
  v31 = sub_100007428(&qword_10015CC80, (uint64_t (*)(uint64_t))&type metadata accessor for LocationButton, (uint64_t)&protocol conformance descriptor for LocationButton);
  View.symbolVariant(_:)(v9, v13, v31);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v9, v79);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v15, v13);
  v33 = v81;
  TitleAndIconLabelStyle.init()(v32);
  v96[0] = v13;
  v96[1] = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v96, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v35 = sub_100007428(&qword_10015CC88, (uint64_t (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle, (uint64_t)&protocol conformance descriptor for TitleAndIconLabelStyle);
  v36 = v74;
  v37 = v83;
  View.labelStyle<A>(_:)(v33, v74, v83, OpaqueTypeConformance2, v35);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v33, v37);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v17, v36);
  v39 = static Font.subheadline.getter(v38);
  KeyPath = swift_getKeyPath(&unk_10010E4F8);
  v41 = v77;
  v42 = v80;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v21, v19, v80);
  v43 = (uint64_t *)&v21[*(int *)(v75 + 36)];
  *v43 = KeyPath;
  v43[1] = v39;
  v44 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v19, v42);
  v45 = *(_BYTE *)(v72 + 16);
  if ((v45 & 1) != 0)
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v46 = qword_10016A4A8;
    swift_retain(qword_10016A4A8);
  }
  else
  {
    v46 = static Color.primary.getter(v44);
  }
  v47 = (uint64_t)v86;
  v48 = swift_getKeyPath(&unk_10010E528);
  sub_100007E78((uint64_t)v21, v47, &qword_10015CC70);
  v49 = (uint64_t *)(v47 + *(int *)(v82 + 36));
  *v49 = v48;
  v49[1] = v46;
  v50 = sub_100007F38((uint64_t)v21, &qword_10015CC70);
  if ((v45 & 1) != 0)
  {
    v51 = static Color.primary.getter(v50);
  }
  else
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v51 = qword_10016A4B0;
    swift_retain(qword_10016A4B0);
  }
  v52 = swift_getKeyPath(&unk_10010E558);
  v53 = v87;
  sub_100007E78(v47, v87, &qword_10015CC60);
  v54 = (uint64_t *)(v53 + *(int *)(v85 + 36));
  *v54 = v52;
  v54[1] = v51;
  sub_100007F38(v47, &qword_10015CC60);
  v55 = v91;
  v56 = &v91[*(int *)(v90 + 20)];
  v57 = enum case for RoundedCornerStyle.continuous(_:);
  v58 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v56, v57, v58);
  __asm { FMOV            V0.2D, #8.0 }
  *v55 = _Q0;
  v65 = v88;
  v64 = (uint64_t)v89;
  v66 = (uint64_t)&v89[*(int *)(v88 + 36)];
  sub_10000F760((uint64_t)v55, v66);
  *(_WORD *)(v66 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78(v53, v64, &qword_10015CC50);
  sub_10000F854((uint64_t)v55);
  v67 = sub_100007F38(v53, &qword_10015CC50);
  v68 = v92;
  static AccessibilityTraits.isButton.getter(v67);
  v69 = sub_10008F60C();
  View.accessibility(addTraits:)(v68, v65, v69);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v68, v95);
  return sub_100007F38(v64, &qword_10015CC40);
}

double sub_10008EDC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double result;
  _QWORD v35[2];

  v35[0] = a1;
  v35[1] = a2;
  sub_10001DB0C();
  swift_bridgeObjectRetain(a2);
  v6 = Text.init<A>(_:)(v35, &type metadata for String);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.subheadline.getter(v6);
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  sub_100007D90(v6, v8, v12);
  v21 = swift_bridgeObjectRelease(v10);
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v22 = qword_10016A4A8;
    swift_retain(qword_10016A4A8);
  }
  else
  {
    v22 = static Color.primary.getter(v21);
  }
  v23 = v18 & 1;
  v24 = Text.foregroundColor(_:)(v22, v14, v16, v23, v20);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release(v22);
  sub_100007D90(v14, v16, v23);
  v31 = swift_bridgeObjectRelease(v20);
  v32 = static Edge.Set.horizontal.getter(v31);
  *(_QWORD *)a4 = v24;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v28 & 1;
  *(_QWORD *)(a4 + 24) = v30;
  *(_BYTE *)(a4 + 32) = v32;
  result = 0.0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_BYTE *)(a4 + 72) = 1;
  return result;
}

uint64_t sub_10008EF60@<X0>(uint64_t a1@<X8>)
{
  return sub_10008E004(a1);
}

uint64_t sub_10008EF98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10008EFC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_10008EFEC()
{
  _QWORD *v0;
  unint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  if (v1 >= 2)
    swift_bridgeObjectRelease(v1);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

double sub_10008F030@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10008D924(a1, (uint64_t *)(v2 + 16), a2);
}

unint64_t sub_10008F038()
{
  unint64_t result;

  result = qword_10015CBA8;
  if (!qword_10015CBA8)
  {
    result = swift_getWitnessTable(&unk_10010F5E8, &type metadata for Tab);
    atomic_store(result, (unint64_t *)&qword_10015CBA8);
  }
  return result;
}

__n128 *sub_10008F07C(__n128 *a1, __n128 *a2)
{
  initializeWithTake for ViewModulesConfiguration(a2, a1);
  return a2;
}

uint64_t sub_10008F0D0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[4];
  if (v1 >= 2)
    swift_bridgeObjectRelease(v1);
  swift_release(v0[6]);
  swift_release(v0[7]);
  v2 = v0[10];
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10008F124()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 40))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t destroy for TabButton(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 2)
    swift_bridgeObjectRelease(v2);
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v4);
      goto LABEL_8;
    }
    sub_10008D390(a1);
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
LABEL_8:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

uint64_t assignWithTake for TabButton(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 2)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 >= 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4);
      goto LABEL_6;
    }
    sub_10008D390(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabButton()
{
  return &type metadata for TabButton;
}

uint64_t sub_10008F39C()
{
  return sub_10000F4E0(&qword_10015CBB8, &qword_10015CBC0, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
}

uint64_t sub_10008F3C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001185D0, 1);
}

uint64_t sub_10008F3D8()
{
  return sub_10001881C(&qword_10015CBF0, &qword_10015CBE0, (void (*)(void))sub_10008F3FC, (void (*)(void))sub_10008F588);
}

unint64_t sub_10008F3FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CBF8;
  if (!qword_10015CBF8)
  {
    v1 = sub_100007D00(&qword_10015CBE8);
    sub_10008F480();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CBF8);
  }
  return result;
}

unint64_t sub_10008F480()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CC00;
  if (!qword_10015CC00)
  {
    v1 = sub_100007D00(&qword_10015CC08);
    sub_10008F504();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC00);
  }
  return result;
}

unint64_t sub_10008F504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CC10;
  if (!qword_10015CC10)
  {
    v1 = sub_100007D00(&qword_10015CC18);
    sub_10000F4E0(&qword_10015CC20, &qword_10015CC28, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC10);
  }
  return result;
}

unint64_t sub_10008F588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CC30;
  if (!qword_10015CC30)
  {
    v1 = sub_100007D00(&qword_10015CBC8);
    sub_10008F60C();
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC30);
  }
  return result;
}

unint64_t sub_10008F60C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CC38;
  if (!qword_10015CC38)
  {
    v1 = sub_100007D00(&qword_10015CC40);
    sub_10008F690();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC38);
  }
  return result;
}

unint64_t sub_10008F690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CC48;
  if (!qword_10015CC48)
  {
    v1 = sub_100007D00(&qword_10015CC50);
    sub_10008F714();
    sub_10000F4E0((unint64_t *)&qword_1001588B0, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC48);
  }
  return result;
}

unint64_t sub_10008F714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CC58;
  if (!qword_10015CC58)
  {
    v1 = sub_100007D00(&qword_10015CC60);
    sub_10008F798();
    sub_10000F4E0((unint64_t *)&qword_1001588B0, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC58);
  }
  return result;
}

unint64_t sub_10008F798()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_10015CC68;
  if (!qword_10015CC68)
  {
    v1 = sub_100007D00(&qword_10015CC70);
    v2 = sub_100007D00(&qword_10015CC78);
    v3 = type metadata accessor for TitleAndIconLabelStyle(255);
    v6 = type metadata accessor for LocationButton(255);
    v7 = sub_100007428(&qword_10015CC80, (uint64_t (*)(uint64_t))&type metadata accessor for LocationButton, (uint64_t)&protocol conformance descriptor for LocationButton);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    v5 = sub_100007428(&qword_10015CC88, (uint64_t (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle, (uint64_t)&protocol conformance descriptor for TitleAndIconLabelStyle);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CC68);
  }
  return result;
}

uint64_t sub_10008F8D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10008F8FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

double sub_10008F924@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10008EDC8(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_10008F930()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015CCA8;
  if (!qword_10015CCA8)
  {
    v1 = sub_100007D00(&qword_10015CCA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015CCA8);
  }
  return result;
}

uint64_t sub_10008F994()
{
  return sub_10001881C(&qword_10015CCB0, &qword_10015CCB8, (void (*)(void))sub_10008F3D8, (void (*)(void))sub_10008F3FC);
}

uint64_t sub_10008F9CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = " ";
  v4[2] = &unk_10010E640;
  v4[3] = " ";
  v4[4] = &unk_10010E640;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_10010E658;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 10, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

double sub_10008FA88()
{
  return sub_10008FC54() * 0.6136 * 0.74;
}

double sub_10008FAB4()
{
  return sub_10008FC54() * 0.56;
}

double sub_10008FAD4()
{
  return sub_10008FC54() * 0.56 * 0.18;
}

double sub_10008FB00()
{
  double v0;

  v0 = sub_10008FD9C();
  return (v0 + sub_10008FC54() * -0.6136) * 0.5;
}

BOOL sub_10008FB3C()
{
  _QWORD *v0;

  return Array.count.getter(v0[14], *(_QWORD *)(*v0 + 80)) > 1;
}

double sub_10008FB68()
{
  return sub_10008FC54() * -0.015;
}

double sub_10008FB88()
{
  return sub_10008FC54() * 0.6136 * 0.8;
}

double sub_10008FBB4()
{
  return sub_10008FC54() * 0.6;
}

uint64_t sub_10008FBD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  sub_10008FE68(a1, a2, a3, a4, a5, a6);
  return v13;
}

double sub_10008FC54()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010E6B8);
  sub_10008FCA4(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 120);
}

uint64_t sub_10008FCA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_10010E698, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_10008FD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_10010E698, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_10008FD9C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010E6F0);
  sub_10008FCA4(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 128);
}

void sub_10008FDEC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_10008FD04(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

uint64_t sub_10008FE68(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  *(_QWORD *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100114820);
  *(_QWORD *)(v6 + 24) = v13;
  *(_BYTE *)(v6 + 32) = v14 & 1;
  *(_QWORD *)(v6 + 40) = v15;
  *(_QWORD *)(v6 + 48) = 0x7A65426863746177;
  *(_QWORD *)(v6 + 56) = 0xEA00000000006C65;
  *(_QWORD *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100114850);
  *(_QWORD *)(v6 + 72) = v16;
  *(_BYTE *)(v6 + 80) = v17 & 1;
  *(_QWORD *)(v6 + 88) = v18;
  ObservationRegistrar.init()();
  *(_QWORD *)(v6 + 96) = a1;
  *(_QWORD *)(v6 + 104) = a2;
  *(_QWORD *)(v6 + 112) = a3;
  *(double *)(v6 + 120) = a5;
  *(double *)(v6 + 128) = a6;
  *(_BYTE *)(v6 + 136) = a4;
  return v6;
}

_QWORD *sub_10008FF4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = v0[3];
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[7]);
  v2 = v0[9];
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  v3 = (char *)v0 + qword_10015CCC0;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_10008FFD0()
{
  uint64_t v0;

  sub_10008FF4C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for WatchFacesViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WatchFacesViewModel);
}

void sub_100090000(double *a1@<X8>)
{
  *a1 = sub_10008FC54();
}

void sub_100090028(double *a1)
{
  sub_10008FDEC((uint64_t)&unk_10010E6B8, (uint64_t)sub_100090074, *a1);
}

uint64_t sub_10009005C()
{
  return 16;
}

__n128 sub_100090068(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100090074()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 120) = result;
  return result;
}

void sub_100090084(double *a1@<X8>)
{
  *a1 = sub_10008FD9C();
}

void sub_1000900AC(double *a1)
{
  sub_10008FDEC((uint64_t)&unk_10010E6F0, (uint64_t)sub_1000900F8, *a1);
}

uint64_t sub_1000900E0()
{
  return 16;
}

__n128 sub_1000900EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000900F8()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 128) = result;
  return result;
}

uint64_t sub_100090108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[11] = v6;
  v3[12] = v7;
  return swift_task_switch(sub_100090178, v6, v7);
}

uint64_t sub_100090178()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  v2 = sub_10002BA68((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v2, v1);
  v3 = (_QWORD *)swift_task_alloc(dword_1001596A4);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_100069184;
  return sub_100028180(v0 + 16);
}

ValueMetadata *type metadata accessor for CalendarController()
{
  return &type metadata for CalendarController;
}

id sub_100090210(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  void (*v26)(uint64_t, char *);
  id v27;
  NSString v28;
  uint64_t (*v29)(uint64_t, char *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  Class isa;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t WitnessTable;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t AssociatedConformanceWitness;
  id v46;
  id v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  Class v57;
  uint64_t v58;
  uint64_t v59;
  Class v60;
  id v61;
  uint64_t v62;
  char *v63;
  char *v64;
  Class v65;
  id v66;
  id v67;
  uint64_t (*v68)(uint64_t, char *);
  id v69;
  char *v70;
  uint64_t v71;
  NSString v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(uint64_t, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t AssociatedTypeWitness;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v8 = type metadata accessor for URL(0);
  v91 = *(_QWORD *)(v8 - 8);
  v92 = v8;
  __chkstk_darwin(v8);
  v90 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  __chkstk_darwin(v10);
  v86 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v84 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for DateInterval(0);
  v79 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v81 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &unk_10011790C, &unk_100117964);
  v94 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v78 = (char *)&v74 - v14;
  v15 = swift_getAssociatedTypeWitness(255, a4, a3, &unk_10011790C, &unk_10011797C);
  v75 = type metadata accessor for Optional(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v93 = (char *)&v74 - v16;
  v77 = (void (*)(uint64_t, uint64_t))v15;
  v95 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v17);
  v76 = (char *)&v74 - v19;
  v20 = type metadata accessor for String.Encoding(0, v18);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (void *)objc_opt_self(EKEvent);
  v89 = a2;
  v25 = objc_msgSend(v24, "eventWithEventStore:", a2);
  v26 = (void (*)(uint64_t, char *))*((_QWORD *)a4 + 20);
  v27 = v25;
  v26(a3, a4);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v27, "setTitle:", v28);

  v29 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)a4 + 19);
  v96 = a3;
  v97 = a1;
  v30 = v29(a3, a4);
  v32 = v31;
  static String.Encoding.utf8.getter();
  v33 = String.data(using:allowLossyConversion:)(v23, 0, v30, v32);
  v35 = v34;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (v35 >> 60 != 15)
  {
    v36 = v27;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setStructuredData:", isa);

    sub_1000909BC(v33, v35);
  }
  v38 = v96;
  v98 = (*((uint64_t (**)(uint64_t, char *))a4 + 27))(v96, a4);
  v39 = (uint64_t)v77;
  v40 = type metadata accessor for Array(0, v77);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v40);
  v42 = v93;
  Collection.first.getter(v40, WitnessTable);
  swift_bridgeObjectRelease();
  v43 = v95;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v42, 1, v39) == 1)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v42, v75);
  }
  else
  {
    v44 = v76;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v76, v42, v39);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, v38, v39, &unk_10011790C, &unk_10011795C);
    v46 = sub_1000909D0(v39, AssociatedConformanceWitness);
    v47 = objc_msgSend((id)objc_opt_self(EKStructuredLocation), "locationWithMapItem:", v46);

    objc_msgSend(v27, "setStructuredLocation:", v47);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v39);
  }
  v48 = v27;
  v95 = *((_QWORD *)a4 + 25);
  v49 = v78;
  ((void (*)(uint64_t, char *))v95)(v38, a4);
  v50 = AssociatedTypeWitness;
  v51 = swift_getAssociatedConformanceWitness(a4, v38, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  v93 = a4;
  v52 = v51;
  v77 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v53 = v81;
  v77(v50, v51);
  v94 = *(_QWORD *)(v94 + 8);
  v54 = ((uint64_t (*)(char *, uint64_t))v94)(v49, v50);
  v55 = v84;
  DateInterval.start.getter(v54);
  v79 = *(_QWORD *)(v79 + 8);
  v56 = v82;
  ((void (*)(char *, uint64_t))v79)(v53, v82);
  v57 = Date._bridgeToObjectiveC()().super.isa;
  v80 = *(_QWORD *)(v80 + 8);
  v58 = v85;
  ((void (*)(char *, uint64_t))v80)(v55, v85);
  objc_msgSend(v48, "setStartDate:", v57);

  ((void (*)(uint64_t, char *))v95)(v96, v93);
  v77(v50, v52);
  v59 = ((uint64_t (*)(char *, uint64_t))v94)(v49, v50);
  DateInterval.end.getter(v59);
  ((void (*)(char *, uint64_t))v79)(v53, v56);
  v60 = Date._bridgeToObjectiveC()().super.isa;
  ((void (*)(char *, uint64_t))v80)(v55, v58);
  objc_msgSend(v48, "setEndDate:", v60);

  v61 = v48;
  v62 = v96;
  v63 = v93;
  ((void (*)(uint64_t, char *))v95)(v96, v93);
  v64 = v86;
  (*(void (**)(uint64_t, uint64_t))(v52 + 16))(v50, v52);
  ((void (*)(char *, uint64_t))v94)(v49, v50);
  v65 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v64, v88);
  objc_msgSend(v61, "setTimeZone:", v65);

  v66 = v61;
  v67 = objc_msgSend(v89, "defaultCalendarForNewEvents");
  objc_msgSend(v66, "setCalendar:", v67);

  v68 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v63 + 22);
  v69 = v66;
  v70 = v90;
  v71 = v68(v62, v63);
  URL.absoluteString.getter(v71);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v70, v92);
  v72 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v69, "setNotes:", v72);

  return v69;
}

uint64_t sub_1000909BC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100029D7C(result, a2);
  return result;
}

id sub_1000909D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;

  v4 = (*(uint64_t (**)(void))(a2 + 48))();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    v8 = objc_msgSend(objc_allocWithZone((Class)MKPlacemark), "initWithCoordinate:postalAddress:", v5, v6, v7);

  }
  else
  {
    v9 = (*(double (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
    v8 = objc_msgSend(objc_allocWithZone((Class)MKPlacemark), "initWithCoordinate:", v9, v10);
  }
  v11 = objc_msgSend(objc_allocWithZone((Class)MKMapItem), "initWithPlacemark:", v8);

  return v11;
}

id sub_100090ABC()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  objc_class *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v13;
  objc_super v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[1];
  v15 = *v0;
  v16 = v1;
  v2 = sub_100007D50(&qword_10015CDE8);
  Binding.projectedValue.getter(&v17, v2);
  v13 = v17;
  v3 = v18;
  v4 = v19;
  v15 = v0[2];
  LOBYTE(v16) = *((_BYTE *)v0 + 48);
  v5 = sub_100007D50(&qword_10015CE00);
  Binding.projectedValue.getter(&v17, v5);
  v6 = v17;
  v7 = v18;
  v8 = (objc_class *)type metadata accessor for SearchBar.Coordinator();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtCV15ShazamEventsApp9SearchBar11Coordinator__text];
  *(_OWORD *)v10 = v13;
  *((_QWORD *)v10 + 2) = v3;
  *((_QWORD *)v10 + 3) = v4;
  v11 = &v9[OBJC_IVAR____TtCV15ShazamEventsApp9SearchBar11Coordinator__isSearching];
  *(_OWORD *)v11 = v6;
  v11[16] = v7;
  v14.receiver = v9;
  v14.super_class = v8;
  return objc_msgSendSuper2(&v14, "init");
}

id sub_100090B98()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  _BYTE v7[16];
  _QWORD v8[2];

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)UISearchBar), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v3 = sub_100007D50(&qword_10015CE08);
  UIViewRepresentableContext.coordinator.getter(v8, v3);
  v4 = (void *)v8[0];
  objc_msgSend(v2, "setDelegate:", v8[0]);

  objc_msgSend(v2, "setSearchBarStyle:", 2);
  sub_1000684E4(v1 + 56, (uint64_t)v7);
  sub_1000684E4((uint64_t)v7, (uint64_t)v8);
  if (v8[1])
    v5 = String._bridgeToObjectiveC()();
  else
    v5 = 0;
  objc_msgSend(v2, "setPlaceholder:", v5);

  objc_msgSend(v2, "setReturnKeyType:", 0);
  objc_msgSend(v2, "setShowsCancelButton:animated:", 0, 0);
  return v2;
}

uint64_t type metadata accessor for SearchBar.Coordinator()
{
  return objc_opt_self(_TtCV15ShazamEventsApp9SearchBar11Coordinator);
}

uint64_t sub_100090E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100090EAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t destroy for SearchBar(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for SearchBar(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v8;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *assignWithCopy for SearchBar(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  a1[7] = a2[7];
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t assignWithTake for SearchBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for SearchBar()
{
  return &type metadata for SearchBar;
}

id sub_1000910EC()
{
  return sub_100090B98();
}

void sub_10009112C(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  NSString v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v1;
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v3 = sub_100007D50(&qword_10015CDE8);
  Binding.wrappedValue.getter(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, "setText:", v4, v5, v6, v7);

}

id sub_1000911B0@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_100090ABC();
  *a1 = result;
  return result;
}

uint64_t sub_1000911D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100091298();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100091224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100091298();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100091274(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100091298();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100091298()
{
  unint64_t result;

  result = qword_10015CDF8;
  if (!qword_10015CDF8)
  {
    result = swift_getWitnessTable(&unk_10010E75C, &type metadata for SearchBar);
    atomic_store(result, (unint64_t *)&qword_10015CDF8);
  }
  return result;
}

uint64_t sub_1000912DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v2 = type metadata accessor for Optional(255);
  result = type metadata accessor for Binding(319, v2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v5, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100091364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a5 = a1;
  v6 = (char *)a5 + *(int *)(type metadata accessor for PageControl(0, a3, a4, a4) + 36);
  v7 = type metadata accessor for Optional(255);
  v8 = type metadata accessor for Binding(0, v7);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, a2, v8);
}

id sub_1000913D8()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v1 = objc_msgSend(v0, "colorWithAlphaComponent:", 0.3);

  return v1;
}

uint64_t sub_100091440(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Optional(255);
  v4 = type metadata accessor for Binding(0, v3);
  return a2(v4);
}

uint64_t sub_100091490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional(255);
  v4 = type metadata accessor for Binding(0, v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - v5;
  v8 = type metadata accessor for PageControl.Coordinator(0, v2, *(_QWORD *)(a1 + 24), v7);
  sub_100091440(a1, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_1000919D4((uint64_t)v6);
  return v9;
}

uint64_t sub_100091544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000919D4(a1);
  return v3;
}

id sub_100091580(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v12;

  v3 = v2;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIPageControl), "init");
  WitnessTable = swift_getWitnessTable(&unk_10010E8A8, a2);
  v7 = type metadata accessor for UIViewRepresentableContext(0, a2, WitnessTable);
  UIViewRepresentableContext.coordinator.getter(&v12, v7);
  v8 = v12;
  objc_msgSend(v5, "addTarget:action:forControlEvents:", v12, "pageDidChange:", 4096);
  swift_release(v8);
  objc_msgSend(v5, "setNumberOfPages:", Array.count.getter(*v3, *(_QWORD *)(a2 + 16)));
  v9 = sub_1000913D8();
  objc_msgSend(v5, "setPageIndicatorTintColor:", v9);

  v10 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  objc_msgSend(v5, "setCurrentPageIndicatorTintColor:", v10);

  return v5;
}

void sub_1000916B0(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  _QWORD v43[3];

  v4 = v3;
  v37 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = type metadata accessor for Optional(0);
  v34 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v38 = (char *)&v33 - v8;
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v9);
  v35 = v11;
  v36 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Binding(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - v14;
  WitnessTable = swift_getWitnessTable(&unk_10010E8A8, a3);
  v17 = type metadata accessor for UIViewRepresentableContext(0, a3, WitnessTable);
  UIViewRepresentableContext.coordinator.getter(v43, v17);
  v18 = v43[0];
  v19 = *v3;
  v20 = (_QWORD *)(v43[0] + *(_QWORD *)(*(_QWORD *)v43[0] + 104));
  swift_beginAccess(v20, v43, 1, 0);
  *v20 = v19;
  v21 = v37;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  sub_100091440(a3, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  v22 = v18 + *(_QWORD *)(*(_QWORD *)v18 + 96);
  swift_beginAccess(v22, &v41, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v22, v15, v12);
  swift_endAccess(&v41);
  v23 = objc_msgSend(v21, "numberOfPages");
  v24 = *v4;
  if (v23 != (id)Array.count.getter(*v4, v6))
    objc_msgSend(v21, "setNumberOfPages:", Array.count.getter(v24, v6));
  v25 = v38;
  sub_100091440(a3, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  v26 = v39;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v25, 1, v6) == 1)
  {
    v27 = swift_release(v18);
    (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v25, v35, v27);
  }
  else
  {
    v28 = v36;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v36, v25, v6);
    v40 = v24;
    v29 = type metadata accessor for Array(0, v6);
    v30 = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection<>.firstIndex(of:)(&v41, v28, v29, v30, *(_QWORD *)(a3 + 24));
    if (v42 == 1 || (v31 = v41, v31 == objc_msgSend(v21, "currentPage")))
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v6);
      swift_release(v18);
    }
    else
    {
      objc_msgSend(v21, "setCurrentPage:", v31);
      v32 = swift_release(v18);
      (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v28, v6, v32);
    }
  }
}

uint64_t sub_1000919D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(v1 + v3) = static Array._allocateUninitialized(_:)(0, *(_QWORD *)(*(_QWORD *)v1 + 80));
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v5 = type metadata accessor for Optional(255);
  v6 = type metadata accessor for Binding(0, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v4, a1, v6);
  return v1;
}

uint64_t sub_100091A54(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t result;
  id v14;
  id v15;
  id v16;
  __n128 v17;
  _BYTE v18[16];
  __int128 v19;
  id v20;
  __int128 v21;
  _BYTE v22[24];

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (_QWORD *)(v1 + *(_QWORD *)(v8 + 104));
  swift_beginAccess(v9, v22, 0, 0);
  *(_QWORD *)&v21 = *v9;
  v10 = type metadata accessor for Array(0, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  RandomAccessCollection<>.indices.getter(&v19, v10, WitnessTable, &protocol witness table for Int);
  v21 = v19;
  v20 = objc_msgSend(a1, "currentPage");
  v12 = sub_100007D50(qword_10015CF00);
  result = Range.contains(_:)(&v20, v12);
  if ((result & 1) != 0)
  {
    v14 = objc_msgSend(a1, "currentPage");
    swift_beginAccess(v9, &v19, 32, 0);
    Array.subscript.getter(v14, *v9, v4);
    swift_endAccess(&v19);
    v15 = objc_msgSend(a1, "interactionState");
    v16 = 0;
    if (v15 != (id)2)
    {
      v15 = (id)static Animation.default.getter();
      v16 = v15;
    }
    __chkstk_darwin(v15);
    *(_QWORD *)&v18[-16] = v2;
    *(_QWORD *)&v18[-8] = v7;
    withAnimation<A>(_:_:)(v16, sub_100091F4C, &v18[-32], (char *)&type metadata for () + 8);
    v17 = swift_release(v16);
    return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v17);
  }
  return result;
}

uint64_t sub_100091C24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 80);
  v6 = type metadata accessor for Optional(0);
  __chkstk_darwin(v6);
  v8 = &v18[-v7 - 8];
  v10 = type metadata accessor for Binding(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v18[-v12 - 8];
  v14 = (uint64_t)a1 + *(_QWORD *)(v4 + 96);
  swift_beginAccess(v14, v18, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, a2, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v5);
  Binding.wrappedValue.setter(v8, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

double sub_100091D68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  double result;

  v4 = a3;
  swift_retain(a1);
  sub_100091A54(v4);

  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_100091DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = type metadata accessor for Optional(255);
  v3 = type metadata accessor for Binding(0, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));
  return v0;
}

uint64_t sub_100091E08()
{
  uint64_t v0;

  sub_100091DA4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PageControl.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageControl.Coordinator);
}

uint64_t sub_100091E40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100091490(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100091E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010E8A8, a3);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_100091EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010E8A8, a3);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_100091F1C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010E8A8, a1);
  UIViewRepresentable.body.getter(a1, WitnessTable);
  __break(1u);
}

uint64_t sub_100091F4C()
{
  uint64_t v0;

  return sub_100091C24(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for PageControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PageControl);
}

uint64_t sub_100091F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for Optional(255);
  result = type metadata accessor for Binding(319, v2);
  if (v4 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v5, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100091FF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = v6 & 0x100000;
  v12 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v11 != 0 || ((v7 + 16) & ~v7) + v10 + (v8 & (v7 + 8)) > 0x18)
  {
    a1 = (uint64_t *)(v12 + (v8 & (v7 + 16)));
    swift_retain(v12);
  }
  else
  {
    v15 = ~v7;
    v16 = v8 & ((unint64_t)a2 + 15);
    v17 = *(_QWORD *)v16;
    v16 += 15;
    v18 = (_QWORD *)(v8 & ((unint64_t)a1 + 15));
    *v18 = v17;
    v19 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    *v19 = v20;
    v21 = (void *)(((unint64_t)v19 + v9) & v15);
    v22 = (const void *)((v9 + (v16 & 0xFFFFFFFFFFFFFFF8)) & v15);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain(v12);
    swift_retain(v17);
    swift_retain(v20);
    if (v23(v22, 1, v4))
    {
      memcpy(v21, v22, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v21, v22, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_100092148(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(((unint64_t)a1 + (v6 | 7) + 8) & ~(v6 | 7));
  swift_release(*v7);
  v8 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v8);
  v9 = ((unint64_t)v8 + v6 + 8) & ~v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  return result;
}

uint64_t *sub_1000921E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  size_t v18;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 8;
  v9 = (_QWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (uint64_t *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  v11 = *v10;
  *v9 = *v10;
  v12 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *v12 = *v13;
  v15 = (void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  v16 = (const void *)(((unint64_t)v13 + v7 + 8) & ~v7);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain(v4);
  swift_retain(v11);
  swift_retain(v14);
  if (v17(v16, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v18 = *(_QWORD *)(v6 + 64);
    else
      v18 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v15, v16, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

uint64_t *sub_1000922F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  size_t v24;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + 8;
  v12 = (uint64_t *)(((unint64_t)a1 + v11) & ~(v10 | 7));
  v13 = (uint64_t *)(((unint64_t)a2 + v11) & ~(v10 | 7));
  v14 = *v12;
  v15 = *v13;
  *v12 = *v13;
  swift_retain(v15);
  swift_release(v14);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  v19 = *v16;
  *v16 = *v17;
  swift_retain(v18);
  swift_release(v19);
  v20 = (void *)(((unint64_t)v16 + v10 + 8) & ~v10);
  v21 = (void *)(((unint64_t)v17 + v10 + 8) & ~v10);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v16) = v22(v20, 1, v8);
  v23 = v22(v21, 1, v8);
  if ((_DWORD)v16)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v20, v21, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v20, v21, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v20, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v24 = *(_QWORD *)(v9 + 64);
  else
    v24 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v20, v21, v24);
  return a1;
}

_QWORD *sub_100092460(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const void *v13;
  size_t v14;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v14 = *(_QWORD *)(v5 + 64);
    else
      v14 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v12, v13, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
  }
  return a1;
}

uint64_t *sub_10009254C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  size_t v21;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 8;
  v11 = (uint64_t *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  v13 = *v11;
  *v11 = *v12;
  swift_release(v13);
  v14 = (uint64_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v14;
  *v14 = *v15;
  swift_release(v16);
  v17 = (void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  v18 = (void *)(((unint64_t)v15 + v9 + 8) & ~v9);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v14) = v19(v17, 1, v7);
  v20 = v19(v18, 1, v7);
  if ((_DWORD)v14)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v17, v18, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
      return a1;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v17, v18, v7);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v17, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v21 = *(_QWORD *)(v8 + 64);
  else
    v21 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v17, v18, v21);
  return a1;
}

uint64_t sub_1000926A4(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v6 >= 0)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if (v5)
    v9 = *(_QWORD *)(v4 + 64);
  else
    v9 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = v10 | 7;
  v12 = v10 + 8;
  v13 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_30;
  v14 = v9 + ((v10 + 16) & ~v10) + (v12 & ~v11);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16)
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(_WORD *)((char *)a1 + v14))
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v18 < 2)
    {
LABEL_30:
      if (v8 == 0x7FFFFFFF)
      {
        v20 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL)
          LODWORD(v20) = -1;
        return (v20 + 1);
      }
      else
      {
        v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v12
                                                                     + (((((unint64_t)a1 + v11 + 8) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v10);
        if (v21 >= 2)
          return v21 - 1;
        else
          return 0;
      }
    }
  }
  v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((_BYTE *)a1 + v14))
    goto LABEL_30;
LABEL_23:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X12 }
  }
  return v8 + v19 + 1;
}

void sub_100092854(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v9 >= 0)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  v13 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v12
      + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(*(unsigned __int8 *)(v7 + 80) | 7));
  v14 = a3 >= v11;
  v15 = a3 - v11;
  if (v15 != 0 && v14)
  {
    if (v13 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v11 < a2)
        goto LABEL_22;
      goto LABEL_29;
    }
    v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v6 = &dword_100000004;
      if (v11 < a2)
      {
LABEL_22:
        v17 = ~v11 + a2;
        if (v13 < 4)
        {
          if ((_DWORD)v13)
          {
            v18 = v17 & ~(-1 << (8 * v13));
            bzero(a1, v13);
            if ((_DWORD)v13 == 3)
            {
              *a1 = v18;
              *((_BYTE *)a1 + 2) = BYTE2(v18);
            }
            else if ((_DWORD)v13 == 2)
            {
              *a1 = v18;
            }
            else
            {
              *(_BYTE *)a1 = v18;
            }
          }
        }
        else
        {
          bzero(a1, v13);
          *(_DWORD *)a1 = v17;
        }
        __asm { BR              X10 }
      }
LABEL_29:
      __asm { BR              X0 }
    }
    if (v16 >= 0x100)
      v6 = 2;
    else
      v6 = v16 > 1;
  }
  if (v11 < a2)
    goto LABEL_22;
  goto LABEL_29;
}

void sub_100092AD8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_100092AE0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_100092B00()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_100092B10()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_100092B18()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_100092B24(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10010E938, a1);
}

uint64_t type metadata accessor for CalendarSheet.CalendarCoordinator()
{
  return objc_opt_self(_TtCV15ShazamEventsApp13CalendarSheet19CalendarCoordinator);
}

void destroy for CalendarSheet(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 16))
    swift_release(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for CalendarSheet(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _OWORD *v7;
  id v8;
  id v9;
  uint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v7 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = v4;
  v9 = v5;
  if (v6)
  {
    v10 = *(_QWORD *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v10;
    swift_retain(v10);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for CalendarSheet(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v10)
    {
      v13 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v13;
      swift_retain(v13);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v10)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

uint64_t assignWithTake for CalendarSheet(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v5)
  {
    swift_release(*(_QWORD *)(a1 + 24));
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarSheet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalendarSheet()
{
  return &type metadata for CalendarSheet;
}

unint64_t sub_100092EA4()
{
  unint64_t result;

  result = qword_10015D020;
  if (!qword_10015D020)
  {
    result = swift_getWitnessTable(&unk_10010EA2C, &type metadata for CalendarSheet);
    atomic_store(result, (unint64_t *)&qword_10015D020);
  }
  return result;
}

id sub_100092EE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v7;

  v1 = *v0;
  v2 = v0[1];
  v3 = objc_msgSend(objc_allocWithZone((Class)EKEventEditViewController), "init");
  v4 = sub_100007D50(qword_10015D030);
  UIViewControllerRepresentableContext.coordinator.getter(&v7, v4);
  v5 = v7;
  objc_msgSend(v3, "setEditViewDelegate:", v7);

  objc_msgSend(v3, "setEventStore:", v2);
  objc_msgSend(v3, "setEvent:", v1);
  return v3;
}

id sub_100092FA4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  uint64_t *v7;
  id result;
  objc_super v9;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = (objc_class *)type metadata accessor for CalendarSheet.CalendarCoordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = (uint64_t *)&v6[OBJC_IVAR____TtCV15ShazamEventsApp13CalendarSheet19CalendarCoordinator_completionHandler];
  *v7 = v4;
  v7[1] = v3;
  sub_100020C7C(v4, v3);
  v9.receiver = v6;
  v9.super_class = v5;
  result = objc_msgSendSuper2(&v9, "init");
  *a1 = result;
  return result;
}

uint64_t sub_100093020(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

uint64_t sub_100093058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009311C();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000930A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10009311C();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000930F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009311C();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10009311C()
{
  unint64_t result;

  result = qword_10015D028;
  if (!qword_10015D028)
  {
    result = swift_getWitnessTable(&unk_10010E9B4, &type metadata for CalendarSheet);
    atomic_store(result, (unint64_t *)&qword_10015D028);
  }
  return result;
}

uint64_t sub_100093160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  char *v31;
  uint64_t result;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  double v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(uint64_t, uint64_t);
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v44 = a3;
  v58 = type metadata accessor for Calendar(0);
  v53 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for TimeZone(0);
  v52 = *(uint64_t (**)(char *, uint64_t))(v59 - 8);
  v8 = __chkstk_darwin(v59);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for DateInterval(0);
  v57 = *(char **)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v56 - 8);
  v16 = __chkstk_darwin(v56);
  v55 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v44 - v19;
  __chkstk_darwin(v18);
  v54 = (char *)&v44 - v21;
  v47 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v22 = v47(a1, a2);
  DateInterval.start.getter(v22);
  v23 = (void (*)(char *, uint64_t))*((_QWORD *)v57 + 1);
  v49 = v13;
  v45 = v23;
  v23(v15, v13);
  v24 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  v50 = a1;
  v51 = v3;
  v25 = a2;
  v46 = v24;
  v24(a1, a2);
  v57 = v12;
  v26 = TimeZone.secondsFromGMT(for:)(v20);
  v27 = static Calendar.current.getter();
  Calendar.timeZone.getter(v27);
  v53 = *(_QWORD *)(v53 + 8);
  ((void (*)(char *, uint64_t))v53)(v7, v58);
  v28 = v20;
  v29 = TimeZone.secondsFromGMT(for:)(v20);
  v30 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v52 + 1);
  v31 = v10;
  result = v30(v10, v59);
  if (__OFSUB__(v26, v29))
  {
    __break(1u);
  }
  else
  {
    v33 = v28;
    Date.addingTimeInterval(_:)(result, (double)(v26 - v29));
    v30(v57, v59);
    v48 = *(_QWORD *)(v48 + 8);
    ((void (*)(char *, uint64_t))v48)(v28, v56);
    v34 = v50;
    v35 = v47(v50, v25);
    v52 = v30;
    v36 = v55;
    DateInterval.end.getter(v35);
    v45(v15, v49);
    v46(v34, v25);
    v37 = TimeZone.secondsFromGMT(for:)(v36);
    v38 = static Calendar.current.getter();
    Calendar.timeZone.getter(v38);
    ((void (*)(char *, uint64_t))v53)(v7, v58);
    v39 = v36;
    v40 = v52;
    v41 = TimeZone.secondsFromGMT(for:)(v39);
    result = v40(v31, v59);
    if (!__OFSUB__(v37, v41))
    {
      v42 = (double)(v37 - v41);
      v43 = v55;
      Date.addingTimeInterval(_:)(result, v42);
      v40(v57, v59);
      ((void (*)(char *, uint64_t))v48)(v43, v56);
      return DateInterval.init(start:end:)(v54, v33);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100093514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  id v20;
  Class isa;
  uint64_t v22;
  Class v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v28 = a1;
  v2 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v27 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))((char *)&v27 - v18, 1, 1, v9, v17);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v20, "setDateStyle:", 2);
  sub_100016318((uint64_t)v19, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_100016360((uint64_t)v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v20, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_100016360((uint64_t)v19);
  v22 = sub_100093160(v28, v29, (uint64_t)v8);
  DateInterval.start.getter(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
  v24 = objc_msgSend(v20, "stringFromDate:", v23);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  return v25;
}

uint64_t sub_1000937A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  id v19;
  NSString v20;
  Class isa;
  uint64_t v22;
  Class v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v28 = a1;
  v2 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DateInterval(0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v27 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))((char *)&v27 - v17, 1, 1, v8, v16);
  v19 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setDateFormat:", v20);

  sub_100016318((uint64_t)v18, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_100016360((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v19, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_100016360((uint64_t)v18);
  v22 = sub_100093160(v28, v29, (uint64_t)v7);
  DateInterval.start.getter(v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v27);
  v23 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
  v24 = objc_msgSend(v19, "stringFromDate:", v23);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  return v25;
}

uint64_t sub_100093A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  NSString v21;
  Class isa;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  char *v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Class v37;
  id v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v43 = a2;
  v42 = a1;
  v2 = type metadata accessor for Date(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin(v2);
  v44 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DateInterval(0);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v47 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeZone(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v41 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for Locale(0, v13);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void *)objc_opt_self(NSDateFormatter);
  v21 = String._bridgeToObjectiveC()();
  static Locale.current.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v23 = objc_msgSend(v20, "dateFormatFromTemplate:options:locale:", v21, 0, isa);

  if (v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v25 = v24;

  }
  else
  {
    v25 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, 1, 1, v6);
  v26 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  if (v25)
  {
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "setDateFormat:", v27);

  }
  sub_100016318((uint64_t)v15, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
  {
    sub_100016360((uint64_t)v11);
  }
  else
  {
    v28 = v41;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v41, v11, v6);
    v29 = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "setTimeZone:", v29);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
  }
  v31 = v45;
  v30 = v46;
  v32 = v44;
  v34 = v42;
  v33 = v43;
  swift_bridgeObjectRelease(v25);
  sub_100016360((uint64_t)v15);
  v35 = v47;
  v36 = sub_100093160(v34, v33, v47);
  DateInterval.start.getter(v36);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v35, v49);
  v37 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v30);
  v38 = objc_msgSend(v26, "stringFromDate:", v37);

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  return v39;
}

uint64_t sub_100093E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  id v20;
  Class isa;
  uint64_t v22;
  Class v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v28 = a1;
  v2 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v27 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))((char *)&v27 - v18, 1, 1, v9, v17);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v20, "setDateStyle:", 3);
  sub_100016318((uint64_t)v19, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_100016360((uint64_t)v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v20, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_100016360((uint64_t)v19);
  v22 = sub_100093160(v28, v29, (uint64_t)v8);
  DateInterval.start.getter(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
  v24 = objc_msgSend(v20, "stringFromDate:", v23);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  return v25;
}

uint64_t sub_10009409C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  id v20;
  Class isa;
  uint64_t v22;
  Class v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  v28 = a1;
  v2 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v27 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))((char *)&v27 - v18, 1, 1, v9, v17);
  v20 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v20, "setTimeStyle:", 1);
  sub_100016318((uint64_t)v19, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_100016360((uint64_t)v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v20, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_100016360((uint64_t)v19);
  v22 = sub_100093160(v28, v29, (uint64_t)v8);
  DateInterval.start.getter(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
  v24 = objc_msgSend(v20, "stringFromDate:", v23);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  return v25;
}

void sub_100094338(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = " ";
  v4[1] = " ";
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100024044(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

_QWORD *sub_1000943BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t, __n128);
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v12 = a2[7];
    v11 = a2[8];
    v13 = *(int *)(a3 + 44);
    __dst = (void *)(a1 + v13);
    v14 = (char *)a2 + v13;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v11;
    v15 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v15 - 8);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v22 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    v16 = swift_bridgeObjectRetain(v11);
    if (v23(v14, 1, v15, v16))
    {
      v17 = sub_100007D50(&qword_100158658);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 16))(__dst, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v15);
    }
    v19 = *(int *)(a3 + 48);
    v20 = *(uint64_t *)((char *)a2 + v19);
    *(_QWORD *)((char *)v4 + v19) = v20;
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

uint64_t sub_10009453C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  v4 = (char *)a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 48)));
}

uint64_t sub_1000945DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v20)(const void *, uint64_t, uint64_t, __n128);
  void *__dst;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(int *)(a3 + 44);
  __dst = (void *)(a1 + v11);
  v12 = (const void *)(a2 + v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v9;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v14 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  v15 = swift_bridgeObjectRetain(v9);
  if (v20(v12, 1, v13, v15))
  {
    v16 = sub_100007D50(&qword_100158658);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v17 = *(int *)(a3 + 48);
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100094728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 44);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_100007D50(&qword_100158658);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(a3 + 48);
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000948EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(a3 + 44);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100007D50(&qword_100158658);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  return a1;
}

uint64_t sub_1000949D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 44);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100007D50(&qword_100158658);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100094B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100094B64);
}

uint64_t sub_100094B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158658);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_100094BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100094BF0);
}

uint64_t sub_100094BF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158658);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MusicViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MusicViewModel);
}

uint64_t sub_100094C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  v9 = v2 + *(int *)(a1 + 44);
  if (!*(_QWORD *)(v8 + 16))
    return sub_1000955E0(v9, a2);
  sub_1000955E0(v9, (uint64_t)v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    sub_1000955A0((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v10);
  }
  else
  {
    URL.appending(queryItems:)(v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
}

uint64_t sub_100094D94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  _OWORD v9[2];

  *(_QWORD *)&v8[0] = *(_QWORD *)(v1 + 64);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Array(0, v2);
  swift_bridgeObjectRetain(*(_QWORD *)&v8[0]);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Collection.prefix(_:)(v9, 5, v3, WitnessTable);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v5 = type metadata accessor for ArraySlice(0, v2);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v5);
  return Array.init<A>(_:)(v8, v2, v5, v6);
}

uint64_t sub_100094E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  char v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, 0, 0);
  v43 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  v10 = (char *)&v37 - v9;
  v45 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v11);
  v42 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - v14;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v37 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v37 - v18, a1, v4, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  v39 = a2;
  v46 = sub_100094D94(a2);
  v20 = type metadata accessor for Array(0, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  BidirectionalCollection.last.getter(v20, WitnessTable);
  swift_bridgeObjectRelease();
  v44 = TupleTypeMetadata2;
  v22 = *(int *)(TupleTypeMetadata2 + 48);
  v23 = v45;
  v24 = &v10[v22];
  v25 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v25(v10, v19, v7);
  v25(v24, v15, v7);
  v41 = v5;
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v26(v10, 1, v4) != 1)
  {
    v38 = v19;
    v29 = v42;
    v25(v42, v10, v7);
    if (v26(v24, 1, v4) != 1)
    {
      v31 = v40;
      v32 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v24, v4);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v31, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 24) + 16) + 8));
      v34 = *(void (**)(char *, uint64_t))(v32 + 8);
      v34(v31, v4);
      v35 = *(void (**)(char *, uint64_t))(v45 + 8);
      v35(v15, v7);
      v35(v38, v7);
      v34(v29, v4);
      v35(v10, v7);
      v28 = v33 ^ 1;
      return v28 & 1;
    }
    v30 = *(void (**)(char *, uint64_t))(v45 + 8);
    v30(v15, v7);
    v30(v38, v7);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v4);
    goto LABEL_6;
  }
  v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  v27(v15, v7);
  v27(v19, v7);
  if (v26(v24, 1, v4) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
    v28 = 1;
    return v28 & 1;
  }
  v27(v10, v7);
  v28 = 0;
  return v28 & 1;
}

uint64_t sub_1000951A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __n128);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = sub_100007D50(&qword_100158658);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + *(int *)(a1 + 48));
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(a1 + 24) + 80);
  if (!*(_QWORD *)(v9 + 16))
    return v11(v10, v6);
  v11(v10, v6);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
  {
    sub_1000955A0((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, 1, 1, v12);
  }
  else
  {
    URL.appending(queryItems:)(v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v12);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
}

void sub_1000952C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  ValueWitnessTable *v20;
  uint64_t v21;
  char *v22;
  NSString v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void **aBlock;
  uint64_t v29;
  Class (*v30)(uint64_t);
  ValueMetadata *v31;
  _QWORD *(*v32)();
  _QWORD *v33;
  char *v34;

  v8 = sub_100007D50(&qword_100159260);
  v9 = swift_allocObject(v8, 192, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100109440;
  v11 = a4[2];
  v10 = a4[3];
  *(_QWORD *)(v9 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v9 + 64) = &off_10015BAD8;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v11;
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v9 + 104) = &off_10015BAB0;
  *(_BYTE *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v9 + 144) = &off_10015BB38;
  *(_BYTE *)(v9 + 112) = 9;
  *(_QWORD *)(v9 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v9 + 184) = &off_10015BB10;
  *(_QWORD *)(v9 + 152) = a1;
  *(_QWORD *)(v9 + 160) = a2;
  *(_BYTE *)(v9 + 168) = a3;
  v12 = a4[9];
  if (v12)
  {
    v13 = a4[8];
    v14 = a4[9];
  }
  else
  {
    v13 = 0;
    v14 = 0xE000000000000000;
  }
  v31 = &type metadata for AnalyticsString;
  v32 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v29 = v13;
  v30 = (Class (*)(uint64_t))v14;
  swift_bridgeObjectRetain(v10);
  sub_1000227F8(a1, a2, a3);
  v34 = (char *)v9;
  v15 = *(_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v9 + 24);
  swift_bridgeObjectRetain(v12);
  if (v15 >= v16 >> 1)
    v34 = sub_100089D00((char *)(v16 > 1), v15 + 1, 1, (char *)v9);
  v17 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v20->initializeWithCopy)((uint64_t)v19, v21);
  sub_10008A6F0(v15, (uint64_t)v19, (uint64_t *)&v34, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v22 = v34;
  v23 = String._bridgeToObjectiveC()();
  v24 = (_QWORD *)swift_allocObject(&unk_10014D6F0, 40, 7);
  v24[2] = 0xD00000000000001ELL;
  v24[3] = 0x80000001001131B0;
  v24[4] = v22;
  v32 = sub_100022948;
  v33 = v24;
  aBlock = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_100089C8C;
  v31 = (ValueMetadata *)&unk_10014D708;
  v25 = _Block_copy(&aBlock);
  v26 = v33;
  swift_bridgeObjectRetain(v22);
  swift_release(v26);
  AnalyticsSendEventLazy(v23, v25);
  _Block_release(v25);
  swift_bridgeObjectRelease();

}

uint64_t sub_10009555C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100095588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100095598(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000955A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_100158658);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000955E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_100158658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100095628(_QWORD *a1)
{
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_100111CC8, *a1);
  v4 = ObservedObject.init(wrappedValue:)(a1, v2, WitnessTable);
  v5 = type metadata accessor for RemoteViewConfiguration();
  v6 = sub_10001F9C0();
  EnvironmentObject.init()(v5, v6);
  return v4;
}

uint64_t sub_1000956A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100007F38(a1, &qword_10015D460);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

_QWORD *sub_1000957D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

_QWORD *sub_100095814(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  return a1;
}

_QWORD *sub_100095880(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_release(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for CalendarModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalendarModule);
}

uint64_t sub_1000958D8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118858, 1);
}

uint64_t sub_10009590C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t WitnessTable;

  v8 = type metadata accessor for CalendarViewModel(0, a5, a6, a4);
  WitnessTable = swift_getWitnessTable(&unk_100111CC8, v8);
  return ObservedObject.projectedValue.getter(a1, a2, v8, WitnessTable);
}

uint64_t sub_100095968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t WitnessTable;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  unsigned __int8 v112;
  _OWORD v113[2];
  uint64_t v114;

  v108 = a5;
  v109 = a4;
  v110 = a3;
  v107 = a7;
  v10 = sub_100007D50(&qword_10015A250);
  __chkstk_darwin(v10);
  v97 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v95);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v98);
  v15 = (__int128 *)((char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100007D50(&qword_10015BC00);
  __chkstk_darwin(v16);
  v96 = (uint64_t *)((char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v99 = sub_100007D50(&qword_10015BC08);
  __chkstk_darwin(v99);
  v101 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_10015D140);
  __chkstk_darwin(v19);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100007D50(&qword_10015D148);
  __chkstk_darwin(v22);
  v24 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100007D50(&qword_10015D150);
  __chkstk_darwin(v102);
  v103 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v21 = static HorizontalAlignment.leading.getter(v26);
  *((_QWORD *)v21 + 1) = 0x4030000000000000;
  v21[16] = 0;
  v27 = (uint64_t)&v21[*(int *)(sub_100007D50(&qword_10015D158) + 44)];
  v104 = a1;
  v105 = a6;
  v106 = a2;
  v28 = sub_10009608C(a1, a2, v110, v109, v108, a6, v27);
  LOBYTE(a2) = static Edge.Set.all.getter(v28);
  sub_100007E78((uint64_t)v21, (uint64_t)v24, &qword_10015D140);
  v29 = *(int *)(v22 + 36);
  v100 = v24;
  v30 = &v24[v29];
  *v30 = a2;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  v30[40] = 1;
  sub_100007F38((uint64_t)v21, &qword_10015D140);
  if (qword_1001580B0 != -1)
    swift_once(&qword_1001580B0, sub_10005144C);
  v31 = qword_10016A4C8;
  KeyPath = swift_getKeyPath(&unk_10010EB58);
  v33 = v98;
  v34 = (char *)v15 + *(int *)(v98 + 20);
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v36 = type metadata accessor for RoundedCornerStyle(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104);
  v37(v34, v35, v36);
  __asm { FMOV            V0.2D, #12.0 }
  v94 = _Q0;
  *v15 = _Q0;
  sub_10000F760((uint64_t)v15, (uint64_t)v13);
  *(_WORD *)&v13[*(int *)(v95 + 36)] = 256;
  v43 = *(int *)(v16 + 36);
  v44 = v96;
  sub_100007E78((uint64_t)v13, (uint64_t)v96 + v43, &qword_100158640);
  *v44 = KeyPath;
  v44[1] = v31;
  swift_retain_n(v31, 2);
  swift_retain(KeyPath);
  sub_100007F38((uint64_t)v13, &qword_100158640);
  sub_10000F854((uint64_t)v15);
  swift_release(v31);
  v45 = swift_release(KeyPath);
  v46 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v37)((char *)v15 + *(int *)(v33 + 20), v35, v36, v45);
  *v15 = v94;
  v47 = static Color.black.getter(v46);
  v48 = Color.opacity(_:)(0.1);
  swift_release(v47);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v113, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v49 = v97;
  sub_10000F760((uint64_t)v15, v97);
  v50 = v49 + *(int *)(sub_100007D50(&qword_10015A258) + 36);
  v51 = v113[1];
  *(_OWORD *)v50 = v113[0];
  *(_OWORD *)(v50 + 16) = v51;
  *(_QWORD *)(v50 + 32) = v114;
  v52 = sub_100007D50(&qword_10015A260);
  *(_QWORD *)(v49 + *(int *)(v52 + 52)) = v48;
  *(_WORD *)(v49 + *(int *)(v52 + 56)) = 256;
  v53 = static Alignment.center.getter(v52);
  v55 = v54;
  v56 = (uint64_t *)(v49 + *(int *)(sub_100007D50(&qword_10015A268) + 36));
  *v56 = v53;
  v56[1] = v55;
  v57 = sub_10000F854((uint64_t)v15);
  v58 = static Alignment.center.getter(v57);
  v60 = v59;
  v61 = (uint64_t)v101;
  v62 = (uint64_t)&v101[*(int *)(v99 + 36)];
  sub_100007E78(v49, v62, &qword_10015A250);
  v63 = (uint64_t *)(v62 + *(int *)(sub_100007D50(&qword_10015A248) + 36));
  *v63 = v58;
  v63[1] = v60;
  sub_100007E78((uint64_t)v44, v61, &qword_10015BC00);
  sub_100007F38(v49, &qword_10015A250);
  v64 = sub_100007F38((uint64_t)v44, &qword_10015BC00);
  v65 = static Alignment.center.getter(v64);
  v67 = v66;
  v69 = v102;
  v68 = (uint64_t)v103;
  v70 = (uint64_t)&v103[*(int *)(v102 + 36)];
  sub_100007E78(v61, v70, &qword_10015BC08);
  v71 = (uint64_t *)(v70 + *(int *)(sub_100007D50(&qword_10015BC30) + 36));
  *v71 = v65;
  v71[1] = v67;
  v72 = (uint64_t)v100;
  sub_100007E78((uint64_t)v100, v68, &qword_10015D148);
  sub_100007F38(v61, &qword_10015BC08);
  sub_100007F38(v72, &qword_10015D148);
  v74 = v104;
  v73 = v105;
  v75 = v106;
  v76 = v108;
  v79 = sub_10009590C(v104, v106, v77, v78, v108, v105);
  __chkstk_darwin(v79);
  v80 = swift_getKeyPath(&unk_10010EB88);
  v82 = type metadata accessor for CalendarViewModel(255, v76, v73, v81);
  WitnessTable = swift_getWitnessTable(&unk_100111CC8, v82);
  ObservedObject.Wrapper.subscript.getter(v111, v80, v79, WitnessTable);
  swift_release(v80);
  swift_release(v79);
  v84 = v111[0];
  v85 = v111[1];
  v86 = v112;
  v87 = (_QWORD *)swift_allocObject(&unk_10014D7A0, 64, 7);
  v87[2] = v76;
  v87[3] = v73;
  v87[4] = v74;
  v87[5] = v75;
  v89 = v109;
  v88 = v110;
  v87[6] = v110;
  v87[7] = v89;
  swift_retain(v88);
  swift_retain(v75);
  v90 = sub_100007D50(&qword_10015D160);
  v91 = sub_1000974CC();
  v92 = sub_1000975D4();
  View.sheet<A>(isPresented:onDismiss:content:)(v84, v85, v86, 0, 0, sub_1000974BC, v87, v69, v90, v91, v92);
  swift_release(v85);
  swift_release(v87);
  swift_release(v84);
  return sub_100007F38(v68, &qword_10015D150);
}

uint64_t sub_10009608C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (**v108)(char *, uint64_t);
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;

  v113 = a5;
  v114 = a6;
  v115 = a4;
  v116 = a3;
  v112 = a7;
  v105 = sub_100007D50(&qword_10015BC38);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v104 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v101 = (char *)&v98 - v11;
  v102 = type metadata accessor for Divider(0);
  v99 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v109 = (char *)&v98 - v14;
  v15 = sub_100007D50(&qword_10015D188);
  __chkstk_darwin(v15);
  v110 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v111 = (uint64_t)&v98 - v19;
  v20 = type metadata accessor for AccessibilityChildBehavior(0, v18);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100007D50(&qword_10015A6F8);
  __chkstk_darwin(v24);
  v26 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100007D50(&qword_10015A700);
  __chkstk_darwin(v106);
  v28 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100007D50(&qword_10015D190);
  v30 = *(_QWORD *)(v29 - 8);
  v107 = v29;
  v108 = (void (**)(char *, uint64_t))v30;
  __chkstk_darwin(v29);
  v32 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100007D50(&qword_10015D198);
  __chkstk_darwin(v33);
  v35 = (void (**)(char *, uint64_t))((char *)&v98 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v36);
  v117 = (uint64_t)&v98 - v37;
  *(_QWORD *)v26 = static HorizontalAlignment.leading.getter(v38);
  *((_QWORD *)v26 + 1) = 0x4014000000000000;
  v26[16] = 0;
  v39 = (uint64_t)&v26[*(int *)(sub_100007D50(&qword_10015D1A0) + 44)];
  v98 = a1;
  v40 = sub_1000967AC(a2, v39);
  v41 = static Alignment.leading.getter(v40);
  sub_100043CC0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v28, 0.0, 1, 0.0, 1, v41, v42);
  v43 = sub_100007F38((uint64_t)v26, &qword_10015A6F8);
  static AccessibilityChildBehavior.ignore.getter(v43);
  v44 = sub_100097670();
  v45 = v106;
  View.accessibilityElement(children:)(v23, v106, v44);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_100007F38((uint64_t)v28, &qword_10015A700);
  swift_retain(a2);
  v46 = sub_1000EB2E4();
  v48 = v47;
  swift_release(a2);
  v118 = v46;
  v119 = v48;
  sub_10001DB0C();
  v49 = Text.init<A>(_:)(&v118, &type metadata for String);
  v51 = v50;
  v53 = v52;
  v55 = v54 & 1;
  v118 = v45;
  v119 = v44;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v57 = v107;
  View.accessibility(label:)(v49, v51, v55, v53, v107, OpaqueTypeConformance2);
  sub_100007D90(v49, v51, v55);
  swift_bridgeObjectRelease();
  v108[1](v32, v57);
  v108 = v35;
  sub_100018EB4((uint64_t)v35, v117, &qword_10015D198);
  swift_retain(a2);
  LOBYTE(v55) = sub_1000EB484();
  swift_release(a2);
  if ((v55 & 1) != 0)
  {
    v59 = v109;
    Divider.init()(v58);
    v60 = (_QWORD *)swift_allocObject(&unk_10014D7F0, 64, 7);
    v61 = v114;
    v60[2] = v113;
    v60[3] = v61;
    v60[4] = v98;
    v60[5] = a2;
    v63 = v115;
    v62 = v116;
    v60[6] = v116;
    v60[7] = v63;
    __chkstk_darwin(v62);
    v92 = v65;
    v93 = v64;
    v94 = v66;
    v95 = a2;
    v96 = v67;
    v97 = v68;
    swift_retain(v67);
    swift_retain(a2);
    v69 = sub_100007D50(&qword_10015BC60);
    v70 = sub_10000F4E0(&qword_10015BC68, &qword_10015BC60, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v71 = v101;
    Button.init(action:label:)(sub_100097724, v60, sub_100097734, &v98 - 8, v69, v70);
    v72 = v99;
    v73 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
    v74 = v100;
    v75 = v102;
    v73(v100, v59, v102);
    v77 = v103;
    v76 = v104;
    v78 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
    v79 = v105;
    v78(v104, v71, v105);
    v80 = (uint64_t)v110;
    v73(v110, v74, v75);
    v81 = sub_100007D50(&qword_10015D1C8);
    v78((char *)(v80 + *(int *)(v81 + 48)), v76, v79);
    v82 = *(void (**)(char *, uint64_t))(v77 + 8);
    v82(v71, v79);
    v83 = *(void (**)(char *, uint64_t))(v72 + 8);
    v83(v109, v75);
    v82(v76, v79);
    v83(v74, v75);
    v84 = sub_100007D50(&qword_10015D1B8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v80, 0, 1, v84);
    v85 = v111;
    sub_100018EB4(v80, v111, &qword_10015D188);
  }
  else
  {
    v86 = sub_100007D50(&qword_10015D1B8);
    v85 = v111;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v111, 1, 1, v86);
    v80 = (uint64_t)v110;
  }
  v87 = v117;
  v88 = (uint64_t)v108;
  sub_100007E78(v117, (uint64_t)v108, &qword_10015D198);
  sub_100007E78(v85, v80, &qword_10015D188);
  v89 = v112;
  sub_100007E78(v88, v112, &qword_10015D198);
  v90 = sub_100007D50(&qword_10015D1C0);
  sub_100007E78(v80, v89 + *(int *)(v90 + 48), &qword_10015D188);
  sub_100007F38(v85, &qword_10015D188);
  sub_100007F38(v87, &qword_10015D198);
  sub_100007F38(v80, &qword_10015D188);
  return sub_100007F38(v88, &qword_10015D198);
}

uint64_t sub_1000967AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v74 = a2;
  v68 = sub_100007D50(&qword_100159638);
  __chkstk_darwin(v68);
  v4 = (uint64_t *)((char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100007D50(&qword_100159648);
  __chkstk_darwin(v66);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100007D50(&qword_10015BCB8);
  __chkstk_darwin(v73);
  v69 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100007D50(&qword_10015BCC0);
  __chkstk_darwin(v72);
  v75 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v71 = (uint64_t)&v66 - v13;
  v67 = a1;
  swift_retain(a1);
  v14 = sub_1000EB070();
  v16 = v15;
  swift_release(a1);
  v76 = v14;
  v77 = v16;
  v70 = sub_10001DB0C();
  v17 = Text.init<A>(_:)(&v76, &type metadata for String);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = enum case for Text.Case.uppercase(_:);
  v25 = type metadata accessor for Text.Case(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v7, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v7, 0, 1, v25);
  KeyPath = swift_getKeyPath(&unk_10010EBF0);
  sub_100007E78((uint64_t)v7, (uint64_t)v4 + *(int *)(v68 + 28), &qword_100159640);
  *v4 = KeyPath;
  sub_100007E78((uint64_t)v4, (uint64_t)&v9[*(int *)(v66 + 36)], &qword_100159638);
  *(_QWORD *)v9 = v17;
  *((_QWORD *)v9 + 1) = v19;
  v9[16] = v23;
  *((_QWORD *)v9 + 3) = v21;
  sub_10000F844(v17, v19, v23);
  swift_bridgeObjectRetain(v21);
  sub_100007F38((uint64_t)v4, &qword_100159638);
  sub_100007F38((uint64_t)v7, &qword_100159640);
  sub_100007D90(v17, v19, v23);
  v28 = swift_bridgeObjectRelease();
  v29 = static Font.subheadline.getter(v28);
  v30 = swift_getKeyPath(&unk_10010EC20);
  v31 = v69;
  sub_100007E78((uint64_t)v9, v69, &qword_100159648);
  v32 = (uint64_t *)(v31 + *(int *)(v73 + 36));
  *v32 = v30;
  v32[1] = v29;
  sub_100007F38((uint64_t)v9, &qword_100159648);
  v33 = v75;
  sub_100007E78(v31, v75, &qword_10015BCB8);
  *(_QWORD *)(v33 + *(int *)(v72 + 36)) = 0x3FD999999999999ALL;
  sub_100007F38(v31, &qword_10015BCB8);
  v34 = v71;
  sub_100018EB4(v33, v71, &qword_10015BCC0);
  v35 = v67;
  swift_retain(v67);
  v36 = sub_1000EB164();
  v38 = v37;
  swift_release(v35);
  v76 = v36;
  v77 = v38;
  v39 = Text.init<A>(_:)(&v76, &type metadata for String);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v46 = static Font.body.getter(v39);
  v47 = Text.font(_:)(v46, v39, v41, v45, v43);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  swift_release(v46);
  sub_100007D90(v39, v41, v45);
  v54 = swift_bridgeObjectRelease();
  v55 = static Font.Weight.medium.getter(v54);
  v56 = Text.fontWeight(_:)(*(_QWORD *)&v55, 0, v47, v49, v51 & 1, v53);
  v58 = v57;
  v60 = v59;
  LOBYTE(v45) = v61 & 1;
  sub_100007D90(v47, v49, v51 & 1);
  swift_bridgeObjectRelease();
  v62 = v75;
  sub_100007E78(v34, v75, &qword_10015BCC0);
  v63 = v74;
  sub_100007E78(v62, v74, &qword_10015BCC0);
  v64 = v63 + *(int *)(sub_100007D50(&qword_10015D1E0) + 48);
  *(_QWORD *)v64 = v56;
  *(_QWORD *)(v64 + 8) = v58;
  *(_BYTE *)(v64 + 16) = v45;
  *(_QWORD *)(v64 + 24) = v60;
  sub_10000F844(v56, v58, v45);
  swift_bridgeObjectRetain(v60);
  sub_100007F38(v34, &qword_10015BCC0);
  sub_100007D90(v56, v58, v45);
  swift_bridgeObjectRelease();
  return sub_100007F38(v62, &qword_10015BCC0);
}

double sub_100096CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  double result;
  uint64_t v21;

  v12 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  type metadata accessor for MainActor(0);
  swift_retain(a3);
  v16 = swift_retain(a2);
  v17 = static MainActor.shared.getter(v16);
  v18 = (_QWORD *)swift_allocObject(&unk_10014D818, 80, 7);
  v18[2] = v17;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = a1;
  v18[7] = a2;
  v18[8] = a3;
  v18[9] = a4;
  v19 = sub_1000956A4((uint64_t)v14, (uint64_t)&unk_10015D1D8, (uint64_t)v18);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

uint64_t sub_100096DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  v8 = type metadata accessor for MainActor(0);
  v7[5] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v7[6] = v10;
  v7[7] = v11;
  return swift_task_switch(sub_100096E2C, v10, v11);
}

uint64_t sub_100096E2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = dword_10015F824;
  swift_retain(*(_QWORD *)(v0 + 16));
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_100096E80;
  return sub_1000EB4B8();
}

uint64_t sub_100096E80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_100096FA0;
  }
  else
  {
    swift_release(v2[2]);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_100096EEC;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100096EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
    swift_retain(v3);
    swift_retain(v2);
    sub_1000EB57C(v4);
    swift_release(v2);
    v5 = swift_release(v3);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 16);
    v9 = type metadata accessor for RemoteViewConfiguration();
    v10 = sub_10001F9C0();
    swift_retain(v8);
    return EnvironmentObject.error()(0, v7, v9, v10);
  }
}

uint64_t sub_100096FA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100096FE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[8];
  char v12;
  _BYTE v13[136];

  v5 = static VerticalAlignment.center.getter(a1);
  sub_1000970FC(a2, (uint64_t)v11);
  *(_OWORD *)&v13[103] = v11[6];
  *(_OWORD *)&v13[87] = v11[5];
  *(_OWORD *)&v13[39] = v11[2];
  *(_OWORD *)&v13[23] = v11[1];
  *(_OWORD *)&v13[119] = v11[7];
  v13[135] = v12;
  *(_OWORD *)&v13[55] = v11[3];
  *(_OWORD *)&v13[71] = v11[4];
  *(_OWORD *)&v13[7] = v11[0];
  v6 = *(_OWORD *)&v13[64];
  *(_OWORD *)(a3 + 97) = *(_OWORD *)&v13[80];
  v7 = *(_OWORD *)&v13[112];
  *(_OWORD *)(a3 + 113) = *(_OWORD *)&v13[96];
  *(_OWORD *)(a3 + 129) = v7;
  v8 = *(_OWORD *)v13;
  *(_OWORD *)(a3 + 33) = *(_OWORD *)&v13[16];
  result = *(double *)&v13[32];
  v10 = *(_OWORD *)&v13[48];
  *(_OWORD *)(a3 + 49) = *(_OWORD *)&v13[32];
  *(_OWORD *)(a3 + 65) = v10;
  *(_OWORD *)(a3 + 81) = v6;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = 0x4022000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 145) = *(_QWORD *)&v13[128];
  *(_OWORD *)(a3 + 17) = v8;
  return result;
}

uint64_t sub_1000970FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = Image.init(systemName:)(0xD000000000000013, 0x80000001001149B0);
  v31 = static Edge.Set.all.getter(v32);
  v4 = EdgeInsets.init(_all:)(8.0);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if (qword_1001580B8 != -1)
    swift_once(&qword_1001580B8, sub_100051460);
  v11 = qword_10016A4D0;
  KeyPath = swift_getKeyPath(&unk_10010EB58);
  swift_retain(v11);
  v30 = static Alignment.center.getter(v13);
  v15 = v14;
  v16 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120));
  v17 = *v16;
  v18 = v16[1];
  v19 = *((unsigned __int8 *)v16 + 16);
  v20 = v16[3];
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  v21 = Text.init(_:tableName:bundle:comment:)(v17, v18, v19, v20, 0, 0, 0, 0, 0, 256);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = swift_getKeyPath(&unk_10010EBC0);
  *(_QWORD *)a2 = v32;
  *(_BYTE *)(a2 + 8) = v31;
  *(double *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v10;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v30;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v21;
  *(_QWORD *)(a2 + 96) = v23;
  *(_BYTE *)(a2 + 104) = v27;
  *(_QWORD *)(a2 + 112) = v25;
  *(_QWORD *)(a2 + 120) = v28;
  *(_BYTE *)(a2 + 128) = 0;
  swift_retain(v32);
  swift_retain(KeyPath);
  swift_retain(v11);
  sub_10000F844(v21, v23, v27);
  swift_bridgeObjectRetain(v25);
  swift_retain(v28);
  sub_100007D90(v21, v23, v27);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v32);
  swift_release(v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009730C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000EB7E0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100097338(char *a1)
{
  return sub_1000EB868(*a1);
}

uint64_t sub_10009735C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  id v14;
  void *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  swift_retain(a2);
  v14 = sub_1000EB8F4();
  swift_release(a2);
  v15 = *(void **)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  v16 = (_QWORD *)swift_allocObject(&unk_10014D7C8, 64, 7);
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain(a3);
  v17 = v15;
  swift_retain(a2);
  v19 = static SafeAreaRegions.all.getter(v18);
  result = static Edge.Set.all.getter(v19);
  *(_QWORD *)a7 = v14;
  *(_QWORD *)(a7 + 8) = v17;
  *(_QWORD *)(a7 + 16) = sub_100097644;
  *(_QWORD *)(a7 + 24) = v16;
  *(_QWORD *)(a7 + 32) = v19;
  *(_BYTE *)(a7 + 40) = result;
  return result;
}

uint64_t sub_100097434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100095968(*v2, v2[1], v2[2], v2[3], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_100097450@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000EB7E0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10009747C(char *a1)
{
  return sub_1000EB868(*a1);
}

uint64_t sub_1000974A0()
{
  return 16;
}

__n128 sub_1000974AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000974BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10009735C(v1[4], v1[5], v1[6], v1[7], v1[2], v1[3], a1);
}

unint64_t sub_1000974CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D168;
  if (!qword_10015D168)
  {
    v1 = sub_100007D00(&qword_10015D150);
    sub_100097550();
    sub_10000F4E0(&qword_10015BD20, &qword_10015BC30, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D168);
  }
  return result;
}

unint64_t sub_100097550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D170;
  if (!qword_10015D170)
  {
    v1 = sub_100007D00(&qword_10015D148);
    sub_10000F4E0(&qword_10015D178, &qword_10015D140, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D170);
  }
  return result;
}

unint64_t sub_1000975D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D180;
  if (!qword_10015D180)
  {
    v1 = sub_100007D00(&qword_10015D160);
    sub_100092EA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D180);
  }
  return result;
}

double sub_100097644()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain(v1);
  sub_1000EB90C();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

unint64_t sub_100097670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D1A8;
  if (!qword_10015D1A8)
  {
    v1 = sub_100007D00(&qword_10015A700);
    sub_10000F4E0(&qword_10015D1B0, &qword_10015A6F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D1A8);
  }
  return result;
}

uint64_t sub_1000976F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

double sub_100097724()
{
  uint64_t *v0;

  return sub_100096CA8(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

double sub_100097734@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100096FE0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10009774C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100097780(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = v1[7];
  v9 = v1[8];
  v8 = v1[9];
  v10 = (_QWORD *)swift_task_alloc(dword_10015D1D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10000FAC0;
  return sub_100096DB8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100097830()
{
  _QWORD v1[4];

  v1[0] = sub_100007D00(&qword_10015D150);
  v1[1] = sub_100007D00(&qword_10015D160);
  v1[2] = sub_1000974CC();
  v1[3] = sub_1000975D4();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
}

uint64_t sub_1000978A0(uint64_t a1, unint64_t *a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  char v28;
  uint64_t v30;

  v5 = type metadata accessor for Locale(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    return 0;
  swift_bridgeObjectRetain_n(v9, 2);
  v11 = (_QWORD *)(v9 + 48);
  while (1)
  {
    v12 = *(v11 - 1);
    v13 = (void *)*v11;
    if ((*(_BYTE *)(v11 - 2) & 1) == 0)
    {
      swift_bridgeObjectRetain(*v11);
      swift_bridgeObjectRelease(v9);
      v16 = 0xE700000000000000;
      goto LABEL_9;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449707061, 0xE500000000000000, 0x7972746E756F63, 0xE700000000000000, 0);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(0xE500000000000000);
    if ((v14 & 1) != 0)
      break;
    v11 += 3;
    swift_bridgeObjectRelease(v13);
    if (!--v10)
    {
      v15 = (unint64_t *)v9;
LABEL_23:
      swift_bridgeObjectRelease_n(v15, 2);
      return 0;
    }
  }
  v16 = v9;
LABEL_9:
  swift_bridgeObjectRelease(v9);
  v17 = swift_bridgeObjectRelease(v16);
  static Locale.current.getter(v17);
  v18._countAndFlagsBits = v12;
  v18._object = v13;
  object = Locale.localizedString(forRegionCode:)(v18).value._object;
  swift_bridgeObjectRelease(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (!object)
    return 0;
  v20 = a2[2];
  if (!v20)
  {
    swift_bridgeObjectRelease(object);
    return 0;
  }
  swift_bridgeObjectRetain_n(a2, 2);
  v21 = a2 + 5;
  while (1)
  {
    v22 = *v21;
    if (*v21 >= 2)
      break;
LABEL_12:
    v21 += 2;
    if (!--v20)
    {
      swift_bridgeObjectRelease(object);
      v15 = a2;
      goto LABEL_23;
    }
  }
  v23 = *(v21 - 1);
  v24 = String.lowercased()();
  v25 = v24._object;
  v26 = String.lowercased()();
  if (v24._countAndFlagsBits == v26._countAndFlagsBits && v24._object == v26._object)
  {
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_26;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24._countAndFlagsBits, v24._object, v26._countAndFlagsBits, v26._object, 0);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v24._object);
  swift_bridgeObjectRelease(v26._object);
  if ((v28 & 1) == 0)
  {
    sub_100097B2C(v23, v22);
    goto LABEL_12;
  }
  v25 = a2;
LABEL_26:
  swift_bridgeObjectRelease_n(v25, 2);
  swift_bridgeObjectRelease(object);
  return v23;
}

uint64_t sub_100097B2C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t destroy for ScrollableTabViewModel(_QWORD *a1)
{
  unint64_t result;

  swift_bridgeObjectRelease(*a1);
  result = a1[2];
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t *_s15ShazamEventsApp22ScrollableTabViewModelVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  *a1 = *a2;
  v4 = a2 + 1;
  v5 = a2[2];
  swift_bridgeObjectRetain(v3);
  if (v5 >= 2)
  {
    a1[1] = *v4;
    a1[2] = v5;
    swift_bridgeObjectRetain(v5);
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  }
  return a1;
}

_QWORD *assignWithCopy for ScrollableTabViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = a2[2];
  if (a1[2] >= 2uLL)
  {
    if (v5 >= 2)
    {
      a1[1] = a2[1];
      v7 = a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10008D390((uint64_t)(a1 + 1));
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  a1[1] = a2[1];
  v6 = a2[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithTake for ScrollableTabViewModel(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2 + 1;
  if (a1[2] >= 2uLL)
  {
    v5 = a2[2];
    if (v5 >= 2)
    {
      a1[1] = *v4;
      a1[2] = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10008D390((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
  return a1;
}

ValueMetadata *type metadata accessor for ScrollableTabViewModel()
{
  return &type metadata for ScrollableTabViewModel;
}

_QWORD *sub_100097D2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100097DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100097E2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100097EB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_100097F48(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100097FC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100098040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009804C);
}

uint64_t sub_10009804C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000980C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000980D4);
}

uint64_t sub_1000980D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CompactDatePickerConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_10015D240;
  if (!qword_10015D240)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CompactDatePickerConfiguration);
  return result;
}

uint64_t sub_100098184(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10010ECA0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10010ECB8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100098200()
{
  return sub_100007428(&qword_10015D280, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010ED10);
}

uint64_t sub_10009822C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;

  v29 = a3;
  v5 = sub_100007D50(&qword_10015D290);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD **)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - v16;
  sub_100098448(a1, (uint64_t)&v28 - v16);
  sub_100098448(a2, (uint64_t)v14);
  v18 = sub_100007428(&qword_10015D298, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v17, v14, v11, v18);
  if ((result & 1) != 0)
  {
    v20 = &v10[*(int *)(v5 + 48)];
    v21 = (void (*)(char *, char *, uint64_t))v12[4];
    v21(v10, v17, v11);
    v21(v20, v14, v11);
    v22 = &v7[*(int *)(v5 + 48)];
    v23 = (void (*)(char *, char *, uint64_t))v12[2];
    v23(v7, v10, v11);
    v23(v22, v20, v11);
    v24 = v29;
    v21(v29, v7, v11);
    v25 = (void (*)(char *, uint64_t))v12[1];
    v25(v22, v11);
    v26 = &v7[*(int *)(v5 + 48)];
    v21(v7, v10, v11);
    v21(v26, v20, v11);
    v27 = sub_100007D50(&qword_10015D2A0);
    v21(&v24[*(int *)(v27 + 36)], v26, v11);
    return ((uint64_t (*)(char *, uint64_t))v25)(v7, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100098448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t);
  void *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  v35 = a2;
  v2 = type metadata accessor for DateComponents(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - v9;
  v11 = sub_100007D50(&qword_10015D2A8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v12);
  static Calendar.current.getter(v15);
  v16 = sub_100007D50(&qword_10015D2B0);
  v17 = type metadata accessor for Calendar.Component(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 6 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10010EC70;
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104);
  v23(v22 + v21, enum case for Calendar.Component.year(_:), v17);
  v23(v22 + v21 + v19, enum case for Calendar.Component.month(_:), v17);
  v23(v22 + v21 + 2 * v19, enum case for Calendar.Component.day(_:), v17);
  v23(v22 + v21 + 3 * v19, enum case for Calendar.Component.hour(_:), v17);
  v23(v22 + v21 + 4 * v19, enum case for Calendar.Component.minute(_:), v17);
  v23(v22 + v21 + 5 * v19, enum case for Calendar.Component.second(_:), v17);
  v24 = sub_100098C68(v22);
  swift_setDeallocating(v22);
  swift_arrayDestroy(v22 + v21, 6, v17);
  swift_deallocClassInstance(v22, 32, 7);
  Calendar.dateComponents(_:from:)(v24, v32);
  swift_bridgeObjectRelease();
  v25 = v31;
  v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v7, v31);
  Calendar.date(from:)(v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
  v26(v10, v25);
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v14, 1, v27) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v35, v14, v27);
  Date.init()();
  return sub_100098ED0((uint64_t)v14);
}

Swift::Int sub_100098748(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v3 = v1;
  Hasher.init(_seed:)(v9, 0);
  v4 = *v1;
  v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for Date(0);
  v7 = sub_100007428(&qword_10015D288, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  Hasher._combine(_:)(*((_BYTE *)v3 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void sub_100098804(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2;
  v6 = *v2;
  v7 = v4[1];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for Date(0);
  v9 = sub_100007428(&qword_10015D288, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  Hasher._combine(_:)(*((_BYTE *)v4 + *(int *)(a2 + 24)));
}

Swift::Int sub_1000988B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v4 = v2;
  Hasher.init(_seed:)(v10, a1);
  v5 = *v2;
  v6 = v4[1];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v10, v5, v6);
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for Date(0);
  v8 = sub_100007428(&qword_10015D288, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v10, v7, v8);
  Hasher._combine(_:)(*((_BYTE *)v4 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_100098968(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), v9 = 0, (v8 & 1) != 0))
  {
    v10 = type metadata accessor for CompactDatePickerConfiguration(0);
    if ((static Date.== infix(_:_:)((char *)a1 + *(int *)(v10 + 20), (char *)a2 + *(int *)(v10 + 20)) & 1) != 0)
      v9 = *((_BYTE *)a1 + *(int *)(v10 + 24)) ^ *((_BYTE *)a2 + *(int *)(v10 + 24)) ^ 1;
    else
      v9 = 0;
  }
  return v9 & 1;
}

void *sub_100098A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PresentationDetent(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100007D50(&qword_10015D2D0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007428(&qword_10015D2D8, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007428(&qword_10015D2E0, (uint64_t (*)(uint64_t))&type metadata accessor for PresentationDetent, (uint64_t)&protocol conformance descriptor for PresentationDetent);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_100098C68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100007D50(&qword_10015D2B8);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007428(&qword_10015D2C0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v5, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007428(&qword_10015D2C8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v5, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v5, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_100098ED0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015D2A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100098F18(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100098F64(&qword_10015D2E8, (uint64_t)&protocol conformance descriptor for PromotionalAssets.WatchFace);
  result = sub_100098F64((unint64_t *)&unk_10015D2F0, (uint64_t)&protocol conformance descriptor for PromotionalAssets.WatchFace);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100098F64(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PromotionalAssets.WatchFace(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100098FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[3];

  result = type metadata accessor for FeaturedVideoPlayer(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = "\b";
    v7[2] = "\b";
    result = swift_initClassMetadata2(a1, 0, 3, v7, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100099020()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional(255);
  v1 = type metadata accessor for Binding(0, v0);
  return Binding.wrappedValue.getter(v1);
}

uint64_t sub_100099064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Optional(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - v8;
  sub_100099020();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(v2);
LABEL_3:
    v10 = 0;
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v9, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
  v14 = v13(v2, v12);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17 = v13(v2, v12);
  if (!v16)
    goto LABEL_3;
  if (v14 == v17 && v16 == v18)
  {
    swift_bridgeObjectRelease();
    v10 = 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease();
  }
LABEL_4:
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10009921C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100099064(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  if ((v7 & 1) != 0)
    v8 = v5[*(int *)(a1 + 36)];
  else
    v8 = 1;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v8;
}

id sub_1000992BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t WitnessTable;
  uint64_t v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  void *v24;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)AVPlayerViewController), "init");
  (*(void (**)(_QWORD))(*(_QWORD *)(a2 + 24) + 40))(*(_QWORD *)(a2 + 16));
  v8 = objc_allocWithZone((Class)AVPlayer);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v12 = objc_msgSend(v8, "initWithURL:", v10);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  objc_msgSend(v7, "setModalPresentationStyle:", 0);
  objc_msgSend(v7, "setExitsFullScreenWhenPlaybackEnds:", 1);
  objc_msgSend(v7, "setShowsPlaybackControls:", 1);
  objc_msgSend(v7, "setVideoGravity:", AVLayerVideoGravityResizeAspectFill);
  objc_msgSend(v7, "setPlayer:", v12);
  v13 = objc_msgSend(v7, "player");
  if (v13)
  {
    v14 = v13;
    WitnessTable = swift_getWitnessTable(&unk_10010EE80, a2);
    v16 = type metadata accessor for UIViewControllerRepresentableContext(0, a2, WitnessTable);
    UIViewControllerRepresentableContext.coordinator.getter(&v24, v16);
    v17 = v24;
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "addObserver:forKeyPath:options:context:", v17, v18, 1, 0);

  }
  v19 = swift_getWitnessTable(&unk_10010EE80, a2);
  v20 = type metadata accessor for UIViewControllerRepresentableContext(0, a2, v19);
  UIViewControllerRepresentableContext.coordinator.getter(&v24, v20);
  v21 = v24;
  objc_msgSend(v7, "setDelegate:", v24);

  return v7;
}

_QWORD *sub_1000994F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v5 = objc_allocWithZone((Class)type metadata accessor for FeaturedVideoPlayer.Coordinator(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4));
  return sub_10009BA54(v4);
}

id sub_10009952C()
{
  _QWORD *v0;
  objc_class *ObjectType;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = swift_isaMask & *v0;
  v4 = *(_QWORD *)(v3 + 0x68);
  v5 = *(_QWORD *)((char *)v0 + v4);
  if (v5)
  {
    swift_retain(*(_QWORD *)((char *)v0 + v4));
    sub_100007D50(&qword_100159698);
    Task.cancel()();
    v2 = swift_release(v5).n128_u64[0];
    v3 = swift_isaMask & *v0;
  }
  v6 = *(_QWORD *)(v3 + 112);
  v7 = *(_QWORD *)((char *)v0 + v6);
  if (v7)
  {
    swift_retain(*(_QWORD *)((char *)v0 + v6));
    sub_100007D50(&qword_100159698);
    Task.cancel()();
    v2 = swift_release(v7).n128_u64[0];
  }
  v9.receiver = v0;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc", *(double *)&v2);
}

id sub_100099624(void *a1)
{
  id v1;

  v1 = a1;
  return sub_10009952C();
}

double sub_100099648(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  uint64_t v6;
  double result;

  v5 = (char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x60);
  v6 = type metadata accessor for FeaturedVideoPlayer(0, *(_QWORD *)((swift_isaMask & *a1) + 0x50), *(_QWORD *)((swift_isaMask & *a1) + 0x58), a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x68)));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(_QWORD *)((swift_isaMask & *a1) + 0x70))).n128_u64[0];
  return result;
}

uint64_t sub_1000996D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a4;
  v5 = type metadata accessor for Notification(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015D488);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100099780, 0, 0);
}

uint64_t sub_100099780()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100158138 != -1)
    swift_once(&qword_100158138, sub_10009B8A8);
  v2 = v0[6] + 16;
  NSNotificationCenter.notifications(named:object:)(qword_10016A588, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess(v2, v0 + 2, 0, 0);
  v3 = sub_100007428((unint64_t *)&unk_10015D490, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[14] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_1000998A0;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[10], v0[11], v3);
}

uint64_t sub_1000998A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_10009C17C;
  }
  else
  {
    v3 = sub_100099904;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100099904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v4 = *(_QWORD *)(v0 + 48) + 16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    Strong = swift_unknownObjectWeakLoadStrong(v4);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    if (Strong)
    {
      v9 = (void *)Strong;
      sub_100099A98();

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
      v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 136) = v10;
      *v10 = v0;
      v10[1] = sub_100099A34;
      return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
    }
    (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    v1 = *(_QWORD *)(v0 + 80);
  }
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v12, *(_QWORD *)(v0 + 88));
  swift_task_dealloc(v12);
  swift_task_dealloc(v1);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100099A34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_10009C17C;
  }
  else
  {
    v3 = sub_100099904;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100099A98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  char v31;
  _QWORD v32[2];
  _QWORD v33[5];
  __int128 v34;
  __int128 v35;

  v1 = *v0;
  v2 = swift_isaMask;
  v3 = (void *)((uint64_t (*)(void))Notification.name.getter)();
  if (qword_100158138 != -1)
    swift_once(&qword_100158138, sub_10009B8A8);
  v4 = qword_10016A588;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
  {

    v12 = swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);

    swift_bridgeObjectRelease();
    v12 = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v13 = (void *)Notification.name.getter(v12);
      if (qword_100158140 != -1)
        swift_once(&qword_100158140, sub_10009B8DC);
      v14 = qword_10016A590;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      if (v15 == v19 && v17 == v18)
      {

        swift_bridgeObjectRelease_n(v17, 2);
        return sub_10009A430();
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);

      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v31 & 1) != 0)
        return sub_10009A430();
      return result;
    }
  }
  v20 = Notification.userInfo.getter(v12);
  if (v20)
  {
    v21 = v20;
    v32[0] = 0x44496F65646976;
    v32[1] = 0xE700000000000000;
    AnyHashable.init<A>(_:)(v32, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v21 + 16) && (v22 = sub_100086FE0((uint64_t)v33), (v23 & 1) != 0))
    {
      sub_1000402F4(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v34);
    }
    else
    {
      v34 = 0u;
      v35 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100087010((uint64_t)v33);
    if (*((_QWORD *)&v35 + 1))
    {
      result = swift_dynamicCast(v33, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((result & 1) == 0)
        return result;
      v26 = v33[0];
      v25 = v33[1];
      v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)((v2 & v1) + 0x58) + 24))(*(_QWORD *)((v2 & v1) + 0x50));
      if (v26 == v27 && v25 == v28)
      {
        swift_bridgeObjectRelease_n(v25, 2);
      }
      else
      {
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v27, v28, 0);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
          return result;
      }
      return sub_10009A348();
    }
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  return sub_100007F38((uint64_t)&v34, (uint64_t *)&unk_10015D4A0);
}

uint64_t sub_100099DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v6 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009BE20(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100007F38((uint64_t)v8, &qword_10015D460);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v19 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v12);
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100099F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a4;
  v5 = type metadata accessor for Notification(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015D488);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100099FD0, 0, 0);
}

uint64_t sub_100099FD0()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100158140 != -1)
    swift_once(&qword_100158140, sub_10009B8DC);
  v2 = v0[6] + 16;
  NSNotificationCenter.notifications(named:object:)(qword_10016A590, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess(v2, v0 + 2, 0, 0);
  v3 = sub_100007428((unint64_t *)&unk_10015D490, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[14] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_10009A0F0;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[10], v0[11], v3);
}

uint64_t sub_10009A0F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_10009A284;
  }
  else
  {
    v3 = sub_10009A154;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009A154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v4 = *(_QWORD *)(v0 + 48) + 16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    Strong = swift_unknownObjectWeakLoadStrong(v4);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    if (Strong)
    {
      v9 = (void *)Strong;
      sub_100099A98();

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
      v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 136) = v10;
      *v10 = v0;
      v10[1] = sub_10009A2E4;
      return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
    }
    (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    v1 = *(_QWORD *)(v0 + 80);
  }
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(v12, *(_QWORD *)(v0 + 88));
  swift_task_dealloc(v12);
  swift_task_dealloc(v1);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009A284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 128);
  v1 = sub_100007D50(&qword_100159698);
  v2 = swift_dynamicCast(v1, v0 + 40, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10009A2E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_10009A284;
  }
  else
  {
    v3 = sub_10009A154;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10009A348()
{
  char *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = (_QWORD *)(swift_isaMask & *(_QWORD *)v0);
  v2 = v1[10];
  v3 = type metadata accessor for Optional(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v11 - v6;
  v8 = *(_QWORD *)(v2 - 8);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))((char *)&v11 - v6, &v0[v1[12]], v2, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v2);
  type metadata accessor for FeaturedVideoPlayer(0, v2, v1[11], v9);
  sub_10009B910((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10009A430()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = swift_isaMask & *v0;
  v2 = *(_QWORD *)(v1 + 0x50);
  v3 = type metadata accessor for Optional(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v2 - 8) + 56))((char *)&v10 - v6, 1, 1, v2, v5);
  type metadata accessor for FeaturedVideoPlayer(0, v2, *(_QWORD *)(v1 + 88), v8);
  sub_10009B910((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_10009A4FC(void *a1, void *a2)
{
  id v3;
  void *v4;
  float v5;
  id v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v3 = objc_msgSend(a1, "player");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "rate");
    if (v5 > 0.0)
    {
      v6 = objc_msgSend(v4, "error");
      if (!v6)
      {
        v7 = 1;
        goto LABEL_7;
      }

    }
    v7 = 0;
LABEL_7:
    v8 = swift_allocObject(&unk_10014DB40, 32, 7);
    *(_BYTE *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v4;
    v12[4] = sub_10009C144;
    v13 = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10009A62C;
    v12[3] = &unk_10014DB58;
    v9 = _Block_copy(v12);
    v10 = v13;
    v11 = v4;
    objc_msgSend(a2, "animateAlongsideTransition:completion:", 0, v9, swift_release(v10).n128_f64[0]);
    _Block_release(v9);

  }
}

uint64_t sub_10009A62C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10009A674(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t MainExecutor;
  uint64_t result;
  char isEscapingClosureAtFileLocation;
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;

  v8 = v6;
  v14 = static MainActor.shared.getter();
  v15 = swift_release(v14);
  MainExecutor = swift_task_getMainExecutor(v15);
  if ((swift_task_isCurrentExecutor(MainExecutor) & 1) == 0)
    goto LABEL_6;
  a4 = swift_allocObject(&unk_10014DB18, 32, 7);
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = a2;
  a1();
  if (v7)
    return swift_release(a4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(a4, "", 0, 0, 0, 0);
  result = swift_release(a4);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v19._object = (void *)0x8000000100114AE0;
    v19._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v19);
    v20._countAndFlagsBits = _typeName(_:qualified:)(v8, 0);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, a3, a4, a5, a6, 0);
    __break(1u);
  }
  return result;
}

void sub_10009A800(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  _QWORD v9[6];

  type metadata accessor for MainActor(0);
  v9[2] = a3;
  v9[3] = a4;
  v7 = a3;
  swift_unknownObjectRetain(a4);
  v8 = a1;
  sub_10009A674(sub_10009C0F8, (uint64_t)v9, (uint64_t)"ShazamEventsApp/FeaturedVideoPlayer.swift", 41, 2u, 121);

  swift_unknownObjectRelease(a4);
}

uint64_t sub_10009A8A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  _OWORD v20[2];

  if (a3)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v10 = v9;
    if (a4)
      goto LABEL_3;
LABEL_6:
    memset(v20, 0, sizeof(v20));
    v17 = a5;
    v18 = a1;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v16 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v10 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain(a4);
  v11 = a5;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)(v20, a4);
  swift_unknownObjectRelease(a4);
  if (!a5)
    goto LABEL_7;
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  v14 = v13;
  v15 = sub_100007428(&qword_100158220, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100108218);
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a5, v14, (char *)&type metadata for Any + 8, v15);

LABEL_8:
  sub_10009BE68(v8, v10, (uint64_t)v20, v16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_100007F38((uint64_t)v20, (uint64_t *)&unk_10015D4A0);
}

void sub_10009A9C8()
{
  sub_10009C0CC();
}

uint64_t type metadata accessor for FeaturedVideoPlayer.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideoPlayer.Coordinator);
}

uint64_t type metadata accessor for FeaturedVideoPlayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideoPlayer);
}

uint64_t sub_10009A9FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[3];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v2 - 8) + 64;
    v9[1] = &unk_10010EE08;
    v5 = type metadata accessor for Optional(255);
    v6 = type metadata accessor for Binding(319, v5);
    v3 = v6;
    if (v7 <= 0x3F)
    {
      v9[2] = *(_QWORD *)(v6 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v9, a1 + 32);
      return 0;
    }
  }
  return v3;
}

_QWORD *sub_10009AAA8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = ~(v8 | 7);
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = v7 + 1;
  v12 = v8 & 0x100000;
  if (v9 > 7 || v12 != 0 || ((v9 + 16) & ~v9) + v11 + (((v9 | 7) + v7 + 1) & ~(v9 | 7)) > 0x18)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v9 + 16) & v10));
    swift_retain(v15);
  }
  else
  {
    v16 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
    v16(a1, a2, *(_QWORD *)(a3 + 16));
    *((_BYTE *)v4 + v7) = *((_BYTE *)a2 + v7);
    v17 = (_QWORD *)(((unint64_t)v4 + v7 + 8) & v10);
    v18 = (uint64_t *)(((unint64_t)a2 + v7 + 8) & v10);
    v19 = *v18;
    *v17 = *v18;
    v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = *v21;
    *v20 = *v21;
    v23 = (_QWORD *)(((unint64_t)v20 + v9 + 8) & ~v9);
    v24 = (_QWORD *)(((unint64_t)v21 + v9 + 8) & ~v9);
    v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    swift_retain(v19);
    swift_retain(v22);
    if (v25(v24, 1, v5))
    {
      memcpy(v23, v24, v11);
    }
    else
    {
      v16(v23, v24, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t sub_10009AC14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)((a1 + *(_QWORD *)(v4 + 64) + (v5 | 7) + 1) & ~(v5 | 7));
  swift_release(*v6);
  v7 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v7);
  v8 = ((unint64_t)v7 + v5 + 8) & ~v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
  if (!(_DWORD)result)
    return v10(v8, v3);
  return result;
}

void *sub_10009ACCC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  size_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 | 7) + 1;
  v11 = (_QWORD *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  v13 = *v12;
  *v11 = *v12;
  v14 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  *v14 = *v15;
  v17 = (void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  v18 = (const void *)(((unint64_t)v15 + v9 + 8) & ~v9);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain(v13);
  swift_retain(v16);
  if (v19(v18, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v20 = v8;
    else
      v20 = v8 + 1;
    memcpy(v17, v18, v20);
  }
  else
  {
    v7(v17, v18, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
  }
  return a1;
}

void *sub_10009ADE8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  size_t v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 | 7) + 1;
  v11 = (uint64_t *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  v13 = *v11;
  v14 = *v12;
  *v11 = *v12;
  swift_retain(v14);
  swift_release(v13);
  v15 = (uint64_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  v18 = *v15;
  *v15 = *v16;
  swift_retain(v17);
  swift_release(v18);
  v19 = (void *)(((unint64_t)v15 + v9 + 8) & ~v9);
  v20 = (void *)(((unint64_t)v16 + v9 + 8) & ~v9);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v15) = v21(v19, 1, v5);
  v22 = v21(v20, 1, v5);
  if ((_DWORD)v15)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v19, v20, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v22)
    {
      v7(v19, v20, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v19, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v23 = v8;
  else
    v23 = v8 + 1;
  memcpy(v19, v20, v23);
  return a1;
}

void *sub_10009AF5C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  const void *v16;
  size_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 | 7) + 1;
  v11 = (_QWORD *)(((unint64_t)a1 + v8 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)(((unint64_t)a2 + v8 + v10) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = (void *)(((unint64_t)v13 + v9 + 8) & ~v9);
  v16 = (const void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v17 = v8;
    else
      v17 = v8 + 1;
    memcpy(v15, v16, v17);
  }
  else
  {
    v7(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_10009B064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  size_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8 + a2;
  *(_BYTE *)(v8 + a1) = *(_BYTE *)(v8 + a2);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 | 7) + 1;
  v12 = (uint64_t *)((v11 + v8 + a1) & ~(v10 | 7));
  v13 = (uint64_t *)((v11 + v9) & ~(v10 | 7));
  v14 = *v12;
  *v12 = *v13;
  swift_release(v14);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v15;
  *v15 = *v16;
  swift_release(v17);
  v18 = (void *)(((unint64_t)v15 + v10 + 8) & ~v10);
  v19 = (void *)(((unint64_t)v16 + v10 + 8) & ~v10);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v16) = v20(v18, 1, v5);
  v21 = v20(v19, 1, v5);
  if ((_DWORD)v16)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v18, v19, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v21)
    {
      v7((uint64_t)v18, (uint64_t)v19, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v18, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v22 = v8;
  else
    v22 = v8 + 1;
  memcpy(v18, v19, v22);
  return a1;
}

uint64_t sub_10009B1C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = *(_DWORD *)(v4 + 84);
  v9 = *(_QWORD *)(v4 + 64);
  if (v5)
    v10 = *(_QWORD *)(v4 + 64);
  else
    v10 = v9 + 1;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = v11 | 7;
  v13 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_31;
  v14 = ((v11 + 16) & ~v11) + v10 + ((v12 + v9 + 1) & ~v12);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v18 < 2)
    {
LABEL_31:
      if (v5 >= v7)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v20 = (unint64_t *)((((a1 + v9 + v12 + 1) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v20 + v11 + 8) & ~v11);
        if (v22 >= 2)
          return v22 - 1;
        else
          return 0;
      }
      else
      {
        v21 = *v20;
        if (v21 >= 0xFFFFFFFF)
          LODWORD(v21) = -1;
        return (v21 + 1);
      }
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_31;
LABEL_24:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X12 }
  }
  return v8 + v19 + 1;
}

void sub_10009B390(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = *(_DWORD *)(v7 + 84);
  v12 = *(_QWORD *)(v7 + 64);
  if (v8)
    v13 = *(_QWORD *)(v7 + 64);
  else
    v13 = v12 + 1;
  v14 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v13
      + (((*(unsigned __int8 *)(v7 + 80) | 7) + v12 + 1) & ~(*(unsigned __int8 *)(v7 + 80) | 7));
  v15 = a3 >= v11;
  v16 = a3 - v11;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = &_mh_execute_header.magic + 1;
      if (v11 < a2)
        goto LABEL_22;
      goto LABEL_16;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = &dword_100000004;
      if (v11 < a2)
      {
LABEL_22:
        v18 = ~v11 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_16:
      __asm { BR              X4 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v11 < a2)
    goto LABEL_22;
  goto LABEL_16;
}

uint64_t sub_10009B6E0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v12 = type metadata accessor for FeaturedVideoPlayer(0, a4, a5, v11);
  *(_BYTE *)(a6 + *(int *)(v12 + 36)) = a2;
  v13 = a6 + *(int *)(v12 + 40);
  v14 = type metadata accessor for Optional(255);
  v15 = type metadata accessor for Binding(0, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, a3, v15);
}

void sub_10009B784(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10009B9B0(a1, a3);
}

_QWORD *sub_10009B78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *result;

  result = sub_1000994F4(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t sub_10009B7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010EE80, a3);
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_10009B80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010EE80, a3);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_10009B868(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10010EE80, a1);
  UIViewControllerRepresentable.body.getter(a1, WitnessTable);
  __break(1u);
}

uint64_t sub_10009B898(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10010EE30, a1);
}

NSString sub_10009B8A8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10016A588 = (uint64_t)result;
  return result;
}

NSString sub_10009B8DC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10016A590 = (uint64_t)result;
  return result;
}

uint64_t sub_10009B910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Optional(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - v3, a1, v2);
  v6 = type metadata accessor for Binding(0, v2);
  return Binding.wrappedValue.setter(v4, v6);
}

void sub_10009B9B0(void *a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = objc_msgSend(a1, "player");
  if (v4)
  {
    v5 = v4;
    if ((sub_10009921C(a2) & 1) != 0)
    {
      objc_msgSend(v5, "pause");
      objc_msgSend(a1, "setShowsPlaybackControls:", 0);
      objc_msgSend(a1, "setShowsPlaybackControls:", 1);
    }

  }
}

_QWORD *sub_10009BA54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  objc_class *ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v30;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = (_QWORD *)(swift_isaMask & *v1);
  v6 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)((char *)v2 + v5[13]) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)((swift_isaMask & *v2) + 0x70)) = 0;
  v9 = (char *)v2 + *(_QWORD *)((swift_isaMask & *v2) + 0x60);
  v10 = v5[10];
  v11 = v5[11];
  v13 = type metadata accessor for FeaturedVideoPlayer(0, v10, v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, a1, v13);
  v30.receiver = v2;
  v30.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v30, "init");
  v15 = type metadata accessor for TaskPriority(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v8, 1, 1, v15);
  v17 = swift_allocObject(&unk_10014DAA0, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v14);
  v18 = (_QWORD *)swift_allocObject(&unk_10014DAC8, 56, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v10;
  v18[5] = v11;
  v18[6] = v17;
  v19 = v14;
  v20 = sub_100099DAC((uint64_t)v8, (uint64_t)&unk_10015D470, (uint64_t)v18);
  sub_100007F38((uint64_t)v8, &qword_10015D460);
  v21 = *(_QWORD *)((swift_isaMask & *v19) + 0x68);
  v22 = *(_QWORD *)((char *)v19 + v21);
  *(_QWORD *)((char *)v19 + v21) = v20;
  v23 = swift_release(v22);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v16)(v8, 1, 1, v15, v23);
  v24 = swift_allocObject(&unk_10014DAA0, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v19);
  v25 = (_QWORD *)swift_allocObject(&unk_10014DAF0, 56, 7);
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = v10;
  v25[5] = v11;
  v25[6] = v24;
  v26 = sub_100099DAC((uint64_t)v8, (uint64_t)&unk_10015D480, (uint64_t)v25);

  sub_100007F38((uint64_t)v8, &qword_10015D460);
  v27 = *(_QWORD *)((swift_isaMask & *v19) + 0x70);
  v28 = *(_QWORD *)((char *)v19 + v27);
  *(_QWORD *)((char *)v19 + v27) = v26;
  swift_release(v28);
  return v19;
}

uint64_t sub_10009BCC8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009BCF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10015D46C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10003D1D4;
  return sub_1000996D4(a1, v4, v5, v6);
}

uint64_t sub_10009BD74()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10009BDA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10015D47C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000FAC0;
  return sub_100099F24(a1, v4, v5, v6);
}

uint64_t sub_10009BE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015D460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10009BE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  double v21;
  __int128 v22;
  __int128 v23;

  if (!a2)
    return;
  v5 = v4;
  v7 = *v5;
  v8 = swift_isaMask;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 1702125938, 0xE400000000000000, 0) & 1) == 0)
  {
    return;
  }
  if (!a4 || !*(_QWORD *)(a4 + 16))
  {
    v22 = 0u;
    v23 = 0u;
    goto LABEL_16;
  }
  v9 = NSKeyValueChangeNewKey;
  v10 = sub_100086EE4((uint64_t)v9);
  if ((v11 & 1) == 0)
  {
    v22 = 0u;
    v23 = 0u;

    goto LABEL_16;
  }
  sub_1000402F4(*(_QWORD *)(a4 + 56) + 32 * v10, (uint64_t)&v22);

  if (!*((_QWORD *)&v23 + 1))
  {
LABEL_16:
    sub_100007F38((uint64_t)&v22, (uint64_t *)&unk_10015D4A0);
    return;
  }
  if ((swift_dynamicCast(&v21, &v22, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0
    && v21 != 0.0)
  {
    v12 = v8 & v7;
    v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_100158138 != -1)
      swift_once(&qword_100158138, sub_10009B8A8);
    v14 = qword_10016A588;
    v15 = sub_100007D50((uint64_t *)&unk_10015D4B0);
    inited = swift_initStackObject(v15, &v20);
    *(_OWORD *)(inited + 16) = xmmword_100109020;
    *(_QWORD *)&v22 = 0x44496F65646976;
    *((_QWORD *)&v22 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)(&v22, &type metadata for String, &protocol witness table for String);
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v12 + 88) + 24))(*(_QWORD *)(v12 + 80));
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = v17;
    *(_QWORD *)(inited + 80) = v18;
    sub_1000FB050(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, "postNotificationName:object:userInfo:", v14, 0, isa);

  }
}

void sub_10009C0CC()
{
  _swift_stdlib_reportUnimplementedInitializer("ShazamEventsApp.Coordinator", 27, "init()", 6, 0);
  __break(1u);
}

void sub_10009C0F8()
{
  uint64_t v0;

  sub_10009A4FC(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10009C110()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009C120()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10009C144()
{
  uint64_t v0;
  id result;

  if (*(_BYTE *)(v0 + 16) == 1)
    return objc_msgSend(*(id *)(v0 + 24), "play");
  return result;
}

uint64_t sub_10009C164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009C174(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t destroy for TourPhotosTitleView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TourPhotosTitleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosTitleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosTitleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosTitleView()
{
  return &type metadata for TourPhotosTitleView;
}

uint64_t sub_10009C464(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001189D4, 1);
}

uint64_t sub_10009C474@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0, a2);
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BlendMode(0, v3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015D4C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015D4C8);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100007D50(&qword_10015D4D0);
  v16 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v20 = sub_100007D50(&qword_10015D4D8);
  sub_10009C6EC(v28, (uint64_t)&v12[*(int *)(v20 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for BlendMode.plusLighter(_:), v6);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v15[*(int *)(v13 + 36)], v9, v6);
  sub_100007E78((uint64_t)v12, (uint64_t)v15, &qword_10015D4C0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = sub_100007F38((uint64_t)v12, &qword_10015D4C0);
  static AccessibilityChildBehavior.combine.getter(v21);
  v22 = sub_10009D264();
  View.accessibilityElement(children:)(v5, v13, v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v30);
  sub_100007F38((uint64_t)v15, &qword_10015D4C8);
  v23 = v31;
  v24 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v31, v18, v27);
  *(_BYTE *)(v23 + *(int *)(sub_100007D50(&qword_10015D4F0) + 36)) = 1;
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v24);
}

uint64_t sub_10009C6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE v114[4];
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t KeyPath;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[5];

  v122 = a2;
  v3 = sub_100007D50(&qword_10015D4F8);
  __chkstk_darwin(v3);
  v5 = &v114[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100007D50(&qword_10015D500);
  __chkstk_darwin(v6);
  v8 = &v114[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100007D50(&qword_10015D508);
  __chkstk_darwin(v9);
  v11 = &v114[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v114[-v13];
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v15);
  *((_QWORD *)v5 + 1) = 0x4010000000000000;
  v5[16] = 0;
  v16 = sub_100007D50(&qword_10015D510);
  v17 = sub_10009CE44((uint64_t *)a1, (uint64_t)&v5[*(int *)(v16 + 44)]);
  v18 = static Color.white.getter(v17);
  v19 = Color.opacity(_:)(0.6);
  swift_release(v18);
  sub_100007E78((uint64_t)v5, (uint64_t)v8, &qword_10015D4F8);
  *(_QWORD *)&v8[*(int *)(v6 + 36)] = v19;
  v20 = sub_100007F38((uint64_t)v5, &qword_10015D4F8);
  v21 = static Edge.Set.bottom.getter(v20);
  v22 = EdgeInsets.init(_all:)(10.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007E78((uint64_t)v8, (uint64_t)v11, &qword_10015D500);
  v29 = (double *)&v11[*(int *)(v9 + 36)];
  *(_BYTE *)v29 = v21;
  v29[1] = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  *((_BYTE *)v29 + 40) = 0;
  sub_100007F38((uint64_t)v8, &qword_10015D500);
  v123 = v14;
  v124 = v11;
  sub_10009D31C((uint64_t)v11, (uint64_t)v14);
  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
  {
    v134[0] = *(_QWORD *)(a1 + 64);
    v134[1] = v30;
    sub_10001DB0C();
    swift_bridgeObjectRetain(v30);
    v31 = Text.init<A>(_:)(v134, &type metadata for String);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    v38 = static Font.largeTitle.getter();
    static Font.Weight.bold.getter(v38);
    v39 = Font.weight(_:)(v38);
    swift_release(v38);
    v40 = Text.font(_:)(v39, v31, v33, v37, v35);
    v42 = v41;
    v44 = v43;
    v46 = v45;
    swift_release(v39);
    v47 = v44 & 1;
    sub_100007D90(v31, v33, v37);
    v48 = swift_bridgeObjectRelease();
    v49 = static Color.white.getter(v48);
    v50 = Color.opacity(_:)(0.95);
    swift_release(v49);
    v134[0] = v50;
    v51 = Text.foregroundStyle<A>(_:)(v134, v40, v42, v47, v46, &type metadata for Color, &protocol witness table for Color);
    v132 = v52;
    v133 = v51;
    v130 = v53 & 1;
    v131 = v54;
    sub_100007D90(v40, v42, v47);
    swift_release(v50);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath(&unk_10010EF68);
    v128 = swift_getKeyPath(&unk_10010EF98);
    LOBYTE(v47) = static Edge.Set.bottom.getter(v128);
    v121 = EdgeInsets.init(_all:)(4.0);
    v120 = v55;
    v119 = v56;
    v118 = v57;
    v125 = v47;
    v126 = 1;
    v127 = 2;
  }
  else
  {
    v132 = 0;
    v133 = 0;
    v130 = 0;
    v131 = 0;
    v128 = 0;
    KeyPath = 0;
    v126 = 0;
    v127 = 0;
    v125 = 0;
    v121 = 0.0;
    v120 = 0;
    v119 = 0;
    v118 = 0;
  }
  v58 = *(_QWORD *)(a1 + 32);
  v59 = *(_QWORD *)(a1 + 40);
  v60 = *(unsigned __int8 *)(a1 + 48);
  v61 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v61);
  v62 = Text.init(_:tableName:bundle:comment:)(v58, v59, v60, v61, 0, 0, 0, 0, 0, 256);
  v64 = v63;
  v66 = v65;
  v68 = v67 & 1;
  v69 = static Font.subheadline.getter(v62);
  static Font.Weight.regular.getter();
  v70 = Font.weight(_:)(v69);
  swift_release(v69);
  v71 = Text.font(_:)(v70, v62, v64, v68, v66);
  v73 = v72;
  v75 = v74;
  v77 = v76;
  swift_release(v70);
  v78 = v75 & 1;
  sub_100007D90(v62, v64, v68);
  v79 = swift_bridgeObjectRelease();
  v80 = static Color.white.getter(v79);
  v81 = Color.opacity(_:)(0.6);
  swift_release(v80);
  v134[0] = v81;
  v82 = Text.foregroundStyle<A>(_:)(v134, v71, v73, v78, v77, &type metadata for Color, &protocol witness table for Color);
  v116 = v83;
  v117 = v84;
  v115 = v85 & 1;
  sub_100007D90(v71, v73, v78);
  swift_release(v81);
  swift_bridgeObjectRelease();
  v86 = swift_getKeyPath(&unk_10010EF68);
  v87 = swift_getKeyPath(&unk_10010EF98);
  v88 = (uint64_t)v124;
  sub_100007E78((uint64_t)v123, (uint64_t)v124, &qword_10015D508);
  v89 = v88;
  v90 = v122;
  sub_100007E78(v89, v122, &qword_10015D508);
  v91 = sub_100007D50(&qword_10015D518);
  v92 = v90 + *(int *)(v91 + 48);
  v93 = v132;
  v94 = v133;
  *(_QWORD *)v92 = v133;
  *(_QWORD *)(v92 + 8) = v93;
  v132 = v93;
  v133 = v94;
  v95 = v93;
  v96 = v130;
  *(_QWORD *)(v92 + 16) = v130;
  v97 = v96;
  v130 = v96;
  v98 = v131;
  *(_QWORD *)(v92 + 24) = v131;
  v99 = v98;
  v131 = v98;
  v100 = KeyPath;
  *(_QWORD *)(v92 + 32) = KeyPath;
  v101 = v100;
  KeyPath = v100;
  v102 = v127;
  *(_QWORD *)(v92 + 40) = v127;
  *(_QWORD *)(v92 + 48) = 0;
  v103 = v102;
  v127 = v102;
  v104 = v128;
  *(_QWORD *)(v92 + 56) = v128;
  v105 = v104;
  v128 = v104;
  v106 = v126;
  *(_QWORD *)(v92 + 64) = v126;
  v126 = v106;
  v107 = v125;
  *(_QWORD *)(v92 + 72) = v125;
  v125 = v107;
  v108 = v120;
  *(double *)(v92 + 80) = v121;
  *(_QWORD *)(v92 + 88) = v108;
  v109 = v118;
  *(_QWORD *)(v92 + 96) = v119;
  *(_QWORD *)(v92 + 104) = v109;
  *(_BYTE *)(v92 + 112) = 0;
  v110 = v90 + *(int *)(v91 + 64);
  v111 = v116;
  *(_QWORD *)v110 = v82;
  *(_QWORD *)(v110 + 8) = v111;
  LOBYTE(v78) = v115;
  *(_BYTE *)(v110 + 16) = v115;
  v112 = v117;
  *(_QWORD *)(v110 + 24) = v117;
  *(_QWORD *)(v110 + 32) = v86;
  *(_QWORD *)(v110 + 40) = 2;
  *(_BYTE *)(v110 + 48) = 0;
  *(_QWORD *)(v110 + 56) = v87;
  *(_BYTE *)(v110 + 64) = 1;
  sub_10009D374(v94, v95, v97, v99, v101, v103, 0, v105);
  sub_10000F844(v82, v111, v78);
  swift_bridgeObjectRetain(v112);
  swift_retain(v86);
  swift_retain(v87);
  sub_100007F38((uint64_t)v123, &qword_10015D508);
  sub_100007D90(v82, v111, v78);
  swift_release(v87);
  swift_release(v86);
  swift_bridgeObjectRelease();
  sub_10009D3C4(v133, v132, v130, v131, KeyPath, v127, 0, v128);
  return sub_100007F38((uint64_t)v124, &qword_10015D508);
}

uint64_t sub_10009CE44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  __int128 v62;

  v51 = a2;
  v3 = type metadata accessor for Image.ResizingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015D520);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015D528);
  __chkstk_darwin(v10);
  v50 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - v13;
  v15 = Image.init(_:bundle:)(0xD00000000000001FLL, 0x8000000100114B60, 0);
  v16 = enum case for Image.TemplateRenderingMode.template(_:);
  v17 = type metadata accessor for Image.TemplateRenderingMode(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v9, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
  v19 = Image.renderingMode(_:)(v9, v15);
  swift_release(v15);
  sub_100007F38((uint64_t)v9, &qword_10015D520);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
  v20 = Image.resizable(capInsets:resizingMode:)(v6, v19, 0.0, 0.0, 0.0, 0.0);
  v21 = swift_release(v19);
  v22 = (*(uint64_t (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v21);
  v23 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v58, 0x4031000000000000, 0, 0x4030000000000000, 0, v23, v24);
  v52 = v20;
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v56 = v61;
  v57 = v62;
  v25 = sub_100007D50(&qword_10015D530);
  v26 = sub_10009D414();
  View.accessibilityHidden(_:)(1, v25, v26);
  swift_release(v20);
  v27 = *a1;
  v28 = a1[1];
  v29 = *((unsigned __int8 *)a1 + 16);
  v30 = a1[3];
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  v31 = Text.init(_:tableName:bundle:comment:)(v27, v28, v29, v30, 0, 0, 0, 0, 0, 256);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = static Font.caption2.getter(v31);
  static Font.Weight.semibold.getter();
  v39 = Font.weight(_:)(v38);
  swift_release(v38);
  v40 = Text.font(_:)(v39, v31, v33, v37, v35);
  v42 = v41;
  LOBYTE(v4) = v43;
  v45 = v44;
  swift_release(v39);
  LOBYTE(v4) = v4 & 1;
  sub_100007D90(v31, v33, v37);
  swift_bridgeObjectRelease();
  v46 = v50;
  sub_100007E78((uint64_t)v14, v50, &qword_10015D528);
  v47 = v51;
  sub_100007E78(v46, v51, &qword_10015D528);
  v48 = v47 + *(int *)(sub_100007D50(&qword_10015D540) + 48);
  *(_QWORD *)v48 = v40;
  *(_QWORD *)(v48 + 8) = v42;
  *(_BYTE *)(v48 + 16) = v4;
  *(_QWORD *)(v48 + 24) = v45;
  sub_10000F844(v40, v42, v4);
  swift_bridgeObjectRetain(v45);
  sub_100007F38((uint64_t)v14, &qword_10015D528);
  sub_100007D90(v40, v42, v4);
  swift_bridgeObjectRelease();
  return sub_100007F38(v46, &qword_10015D528);
}

uint64_t sub_10009D224@<X0>(uint64_t a1@<X8>)
{
  __n128 *v1;

  return sub_10009C474(a1, v1[1]);
}

unint64_t sub_10009D264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D4E0;
  if (!qword_10015D4E0)
  {
    v1 = sub_100007D00(&qword_10015D4C8);
    sub_10009D2D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D4E0);
  }
  return result;
}

unint64_t sub_10009D2D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D4E8;
  if (!qword_10015D4E8)
  {
    v1 = sub_100007D00(&qword_10015D4C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D4E8);
  }
  return result;
}

uint64_t sub_10009D31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015D508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10009D374(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (a4)
  {
    sub_10000F844(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    *(_QWORD *)&result = swift_retain(a8).n128_u64[0];
  }
  return result;
}

uint64_t sub_10009D3C4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    sub_100007D90(result, a2, a3 & 1);
    swift_release(a8);
    swift_release(a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10009D414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D538;
  if (!qword_10015D538)
  {
    v1 = sub_100007D00(&qword_10015D530);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D538);
  }
  return result;
}

unint64_t sub_10009D47C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015D548[0];
  if (!qword_10015D548[0])
  {
    v1 = sub_100007D00(&qword_10015D4F0);
    v2[0] = sub_100007D00(&qword_10015D4C8);
    v2[1] = sub_10009D264();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10001BEB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, qword_10015D548);
  }
  return result;
}

uint64_t sub_10009D510@<X0>(char a1@<W0>, char a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;

  *(_BYTE *)a9 = a1;
  *(_BYTE *)(a9 + 1) = a2;
  *(_QWORD *)(a9 + 8) = a5;
  *(_QWORD *)(a9 + 16) = a6;
  type metadata accessor for ObservableScrollView(0, a7, a8, a4);
  v11 = swift_retain(a6);
  a3(v11);
  return swift_release(a6);
}

uint64_t type metadata accessor for ObservableScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableScrollView);
}

uint64_t sub_10009D584(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = &unk_10010EFF8;
  v4[2] = (char *)&value witness table for () + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_10009D618(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v10 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + 9) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = ((unint64_t)v10 + v6 + 16) & ~v6;
    v14 = ((unint64_t)v11 + v6 + 16) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v12);
    v15(v13, v14, v4);
  }
  return v3;
}

uint64_t sub_10009D6FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 9) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v3 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_10009D744(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v4 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v5 + v9 + 16) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain(v6);
  v12(v10, v11, v7);
  return a1;
}

_BYTE *sub_10009D7D4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (_QWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  v8 = v5[1];
  *v5 = *v6;
  v5[1] = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *sub_10009D868(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_OWORD *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_BYTE *sub_10009D8D8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = (unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8;
  v6 = (_OWORD *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(v5 + 8);
  *(_OWORD *)v5 = *v6;
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(unsigned __int8 *)(v8 + 80) + 16 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_10009D95C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 9) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 16) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10009DA30 + 4 * byte_10010EFD0[(v9 - 1)]))();
}

void sub_10009DAA8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_10009DCA8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118A94, 1);
}

void sub_10009DCDC(uint64_t a1@<X0>, double *a2@<X8>)
{
  swift_getWitnessTable(&unk_10010F098, a1);
  *a2 = sub_10002BC58();
}

uint64_t sub_10009DD24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD v53[5];

  v4 = v3;
  v44 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v36 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey(255, v36, v5, a2);
  WitnessTable = swift_getWitnessTable(&unk_10010F0B4, v6);
  v38 = v6;
  v40 = WitnessTable;
  v9 = type metadata accessor for SizeModifier(255, v6, WitnessTable, v8);
  v10 = type metadata accessor for ModifiedContent(255, v36, v9);
  v53[2] = v5;
  v53[3] = swift_getWitnessTable(&unk_100108C38, v9);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v11 = type metadata accessor for ScrollView(0, v10, v35);
  v37 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - v12;
  v14 = sub_100007D00(&qword_10015D5D0);
  v15 = type metadata accessor for ModifiedContent(0, v11, v14);
  v43 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  v39 = sub_10009E318();
  v41 = type metadata accessor for _PreferenceActionModifier(255, v6, WitnessTable, v39);
  v18 = type metadata accessor for ModifiedContent(0, v15, v41);
  v42 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v35 - v22;
  v24 = v4[1];
  v46 = v36;
  v47 = v5;
  v48 = v4;
  ScrollView.init(_:showsIndicators:content:)(*v4, v24, sub_10009E35C, v45, v10, v35);
  v53[0] = 0x69566C6C6F726373;
  v53[1] = 0xEA00000000007765;
  v25 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v11);
  View.coordinateSpace<A>(name:)(v53, v11, &type metadata for String, v25, &protocol witness table for String);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v11);
  v27 = *((_QWORD *)v4 + 1);
  v26 = *((_QWORD *)v4 + 2);
  v28 = swift_allocObject(&unk_10014DD58, 32, 7);
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = v26;
  v29 = sub_10009E3B0();
  v51 = v25;
  v52 = v29;
  swift_retain(v26);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  View.onPreferenceChange<A>(_:perform:)(v38, sub_10009E38C, v28, v15, v38, v30, v40, v39);
  v31 = swift_release(v28);
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v17, v15, v31);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v41);
  v49 = v30;
  v50 = v32;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  sub_10005135C((uint64_t)v20, v18, (uint64_t)v23);
  v33 = *(void (**)(char *, uint64_t))(v42 + 8);
  v33(v20, v18);
  sub_1000424BC((uint64_t)v23, v18, v44);
  return ((uint64_t (*)(char *, uint64_t))v33)(v23, v18);
}

uint64_t sub_10009E0BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v25 = a3;
  v5 = type metadata accessor for CoordinateSpace(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&WitnessTable - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey(255, a1, a2, v9);
  WitnessTable = swift_getWitnessTable(&unk_10010F0B4, v10);
  v23 = type metadata accessor for SizeModifier(255, v10, WitnessTable, v11);
  v12 = type metadata accessor for ModifiedContent(0, a1, v23);
  v24 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&WitnessTable - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&WitnessTable - v16;
  type metadata accessor for ObservableScrollView(0, a1, a2, v18);
  v28[0] = 0x69566C6C6F726373;
  v28[1] = 0xEA00000000007765;
  AnyHashable.init<A>(_:)(v28, &type metadata for String, &protocol witness table for String);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for CoordinateSpace.named(_:), v5);
  sub_10005698C(v10, (uint64_t)v8, (uint64_t)sub_10009E300, 0, a1, v10, a2, WitnessTable, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = swift_getWitnessTable(&unk_100108C38, v23);
  v26 = a2;
  v27 = v19;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  sub_10005135C((uint64_t)v14, v12, (uint64_t)v17);
  v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v14, v12);
  sub_1000424BC((uint64_t)v17, v12, v25);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, v12);
}

void sub_10009E300(double *a1@<X8>, double a2@<D1>)
{
  *a1 = a2;
}

uint64_t type metadata accessor for ObservableScrollView.OffsetPreferenceKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableScrollView.OffsetPreferenceKey);
}

unint64_t sub_10009E318()
{
  unint64_t result;

  result = qword_10015D5D8;
  if (!qword_10015D5D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_10015D5D8);
  }
  return result;
}

uint64_t sub_10009E35C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10009E0BC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10009E368()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009E38C(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double))(v1 + 16))(*a1);
}

unint64_t sub_10009E3B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D5E0[0];
  if (!qword_10015D5E0[0])
  {
    v1 = sub_100007D00(&qword_10015D5D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _CoordinateSpaceModifier<A>, v1);
    atomic_store(result, qword_10015D5E0);
  }
  return result;
}

uint64_t sub_10009E3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_10009E404(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = type metadata accessor for ObservableScrollView.OffsetPreferenceKey(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(&unk_10010F0B4, v5);
  v8 = type metadata accessor for SizeModifier(255, v5, WitnessTable, v7);
  v9 = type metadata accessor for ModifiedContent(255, v4, v8);
  swift_getWitnessTable(&unk_100108C38, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v11 = type metadata accessor for ScrollView(255, v9, v10);
  v12 = sub_100007D00(&qword_10015D5D0);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v14 = sub_10009E318();
  v15 = type metadata accessor for _PreferenceActionModifier(255, v5, WitnessTable, v14);
  v16 = type metadata accessor for ModifiedContent(255, v13, v15);
  swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v11);
  sub_10009E3B0();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_10009E56C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_10010F0B4, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009E598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  *(_QWORD *)a5 = sub_10009E698(a1, a2, a3, a4);
  *(_QWORD *)(a5 + 8) = v8;
  *(_BYTE *)(a5 + 16) = v9 & 1;
  v11 = (int *)type metadata accessor for FilterView(0, a3, a4, v10);
  v12 = (_QWORD *)(a5 + v11[9]);
  *v12 = swift_getKeyPath(&unk_10010F110);
  v13 = sub_100007D50(&qword_100158AC0);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  v14 = (_QWORD *)(a5 + v11[10]);
  *v14 = swift_getKeyPath(&unk_10010F140);
  v15 = sub_100007D50(qword_100158AC8);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = (uint64_t *)(a5 + v11[11]);
  v17 = type metadata accessor for RemoteViewConfiguration();
  v18 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v17, v18);
  *v16 = result;
  v16[1] = v20;
  return result;
}

void sub_10009E690(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10009E698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t WitnessTable;

  v6 = type metadata accessor for FilterViewModel(0, a3, a4, a4);
  WitnessTable = swift_getWitnessTable(&unk_100110A30, v6);
  return StateObject.init(wrappedValue:)(a1, a2, v6, WitnessTable);
}

uint64_t type metadata accessor for FilterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterView);
}

uint64_t sub_10009E714(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;

  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v8 = type metadata accessor for FilterViewModel(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  WitnessTable = swift_getWitnessTable(&unk_100110A30, v8);
  return a2(v5, v6, v7, v8, WitnessTable);
}

uint64_t sub_10009E780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata3;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t TupleTypeMetadata;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[16];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v83 = a2;
  v81 = type metadata accessor for NavigationPath(255, a3);
  v106 = sub_100007D00(&qword_100158C80);
  v4 = sub_100007D00(&qword_10015D6E8);
  v78 = sub_100007D00(&qword_10015D6F0);
  v5 = *(_QWORD *)(a1 + 16);
  v80 = *(_QWORD *)(a1 + 24);
  v79 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v80, v5, &unk_10011790C, &unk_10011799C);
  v7 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v80, v5, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v9 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v10 = swift_getAssociatedTypeWitness(255, v9, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v11 = sub_100007D00(&qword_10015D6F8);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v11, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(255, v18, WitnessTable);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  v22 = type metadata accessor for Button(255, v20, v21);
  v23 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v101 = v7;
  v102 = v10;
  v103 = v24;
  v104 = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v105 = swift_getAssociatedConformanceWitness(v9, AssociatedTypeWitness, v10, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v25 = type metadata accessor for ForEach(255, &v101);
  v99 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v22);
  v100 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v98 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v27 = type metadata accessor for LazyVGrid(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v27);
  v29 = type metadata accessor for ScrollView(255, v27, v28);
  v30 = type metadata accessor for ModifiedContent(255, v29, &type metadata for _PaddingLayout);
  v31 = swift_getTupleTypeMetadata2(255, v4, v30, 0, 0);
  type metadata accessor for TupleView(255, v31);
  v32 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v4, v78, v32, 0, 0);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  v38 = type metadata accessor for ScrollView(255, v36, v37);
  v39 = type metadata accessor for ModifiedContent(255, v38, &type metadata for PaddingModifier);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _PaddingLayout);
  v41 = sub_100007D00(&qword_100158630);
  v107 = type metadata accessor for ModifiedContent(255, v40, v41);
  v108 = type metadata accessor for Divider(255);
  v109 = sub_100007D00(&qword_10015D700);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v43 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v43);
  v45 = type metadata accessor for VStack(255, v43, v44);
  v46 = type metadata accessor for ModifiedContent(255, v45, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v47 = type metadata accessor for CompactDatePickerConfiguration(255);
  v96 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v45);
  v97 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v49 = sub_100007428(&qword_10015D280, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010ED10);
  v101 = v46;
  v102 = v47;
  v103 = v48;
  v104 = v49;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v101, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v101 = v46;
  v102 = v47;
  v103 = v48;
  v104 = v49;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v101, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v101 = OpaqueTypeMetadata2;
  v102 = v47;
  v103 = OpaqueTypeConformance2;
  v104 = v49;
  v52 = swift_getOpaqueTypeMetadata2(255, &v101, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v101 = OpaqueTypeMetadata2;
  v102 = v47;
  v103 = OpaqueTypeConformance2;
  v104 = v49;
  v53 = swift_getOpaqueTypeConformance2(&v101, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v101 = v52;
  v102 = v53;
  v54 = swift_getOpaqueTypeMetadata2(255, &v101, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v101 = v52;
  v102 = v53;
  v55 = swift_getOpaqueTypeConformance2(&v101, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v101 = v54;
  v102 = v55;
  v56 = swift_getOpaqueTypeMetadata2(255, &v101, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 0);
  v57 = sub_100007D00(&qword_10015D708);
  v101 = v54;
  v102 = v55;
  v58 = swift_getOpaqueTypeConformance2(&v101, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v59 = sub_10000F4E0(&qword_10015D710, &qword_10015D708, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v101 = v56;
  v102 = v57;
  v103 = v58;
  v104 = v59;
  v60 = swift_getOpaqueTypeMetadata2(255, &v101, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v61 = sub_100007D00(&qword_10015D718);
  v62 = type metadata accessor for ModifiedContent(255, v60, v61);
  v63 = sub_100007D00(&qword_10015D720);
  v64 = type metadata accessor for ModifiedContent(255, v62, v63);
  v65 = type metadata accessor for ModifiedContent(255, v64, &type metadata for _AppearanceActionModifier);
  v66 = type metadata accessor for ModifiedContent(255, v65, &type metadata for _AppearanceActionModifier);
  v101 = v56;
  v102 = v57;
  v103 = v58;
  v104 = v59;
  v94 = swift_getOpaqueTypeConformance2(&v101, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v95 = sub_10000F4E0(&qword_10015D728, &qword_10015D718, (uint64_t)&unk_10010C4A0);
  v92 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v93 = sub_10000F4E0(&qword_10015D730, &qword_10015D720, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v90 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  v91 = &protocol witness table for _AppearanceActionModifier;
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v89 = &protocol witness table for _AppearanceActionModifier;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  v68 = type metadata accessor for NavigationStack(0, v81, v66, v67);
  v69 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v71 = (char *)&v78 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __chkstk_darwin(v72);
  v75 = (char *)&v78 - v74;
  v85 = v79;
  v86 = v80;
  v87 = v82;
  NavigationStack.init<>(root:)(sub_1000A9B60, v84, v66, v67, v73);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v68);
  sub_10005135C((uint64_t)v71, v68, (uint64_t)v75);
  v76 = *(void (**)(char *, uint64_t))(v69 + 8);
  v76(v71, v68);
  sub_1000424BC((uint64_t)v75, v68, v83);
  return ((uint64_t (*)(char *, uint64_t))v76)(v75, v68);
}

uint64_t sub_10009F01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t TupleTypeMetadata3;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t TupleTypeMetadata;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v66;
  uint64_t v67;
  uint64_t OpaqueTypeConformance2;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, char *, uint64_t);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  __n128 v184;
  uint64_t v185;
  char *v186;
  void (*v187)(char *, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  __n128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __n128 v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t);
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void (*v256)(uint64_t, char *, uint64_t);
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD v264[6];
  _QWORD v265[18];
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;

  v263 = a1;
  v249 = a4;
  v6 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v247 = *(_QWORD *)(v6 - 8);
  v248 = v6;
  __chkstk_darwin(v6);
  v246 = (char *)&v208 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = a3;
  v259 = type metadata accessor for FilterView(0, a2, a3, v8);
  v245 = *(_QWORD *)(v259 - 8);
  v256 = *(void (**)(uint64_t, char *, uint64_t))(v245 + 64);
  __chkstk_darwin(v259);
  v260 = (char *)&v208 - v9;
  v258 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v258);
  v244 = (char *)&v208 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = sub_100007D00(&qword_100158C80);
  v11 = sub_100007D00(&qword_10015D6E8);
  v257 = sub_100007D00(&qword_10015D6F0);
  v261 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v13 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v15 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v16 = swift_getAssociatedTypeWitness(255, v15, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v17 = sub_100007D00(&qword_10015D6F8);
  v18 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v18);
  v19 = type metadata accessor for _AnimationModifier(255, v18);
  v20 = type metadata accessor for ModifiedContent(255, v17, v19);
  v21 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v19);
  v22 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v20, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for ZStack(255, v24, WitnessTable);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v26);
  v28 = type metadata accessor for Button(255, v26, v27);
  v29 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v30 = type metadata accessor for ModifiedContent(255, v28, v29);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  v32 = swift_getAssociatedConformanceWitness(v15, AssociatedTypeWitness, v16, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v266 = v13;
  v267 = v16;
  v268 = v30;
  v269 = v31;
  v270 = v32;
  v33 = type metadata accessor for ForEach(255, &v266);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v28);
  v35 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v265[16] = v34;
  v265[17] = v35;
  v265[15] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v33);
  v37 = type metadata accessor for LazyVGrid(255, v33, v36);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v37);
  v39 = type metadata accessor for ScrollView(255, v37, v38);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _PaddingLayout);
  v41 = swift_getTupleTypeMetadata2(255, v11, v40, 0, 0);
  type metadata accessor for TupleView(255, v41);
  v42 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v11, v257, v42, 0, 0);
  v44 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for VStack(255, v44, v45);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v46);
  v48 = type metadata accessor for ScrollView(255, v46, v47);
  v49 = type metadata accessor for ModifiedContent(255, v48, &type metadata for PaddingModifier);
  v50 = type metadata accessor for ModifiedContent(255, v49, &type metadata for _PaddingLayout);
  v51 = sub_100007D00(&qword_100158630);
  v272 = type metadata accessor for ModifiedContent(255, v50, v51);
  v273 = type metadata accessor for Divider(255);
  v274 = sub_100007D00(&qword_10015D700);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v53 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v255 = v53;
  v254 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v53);
  v54 = type metadata accessor for VStack(0, v53, v254);
  v257 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v56 = (char *)&v208 - v55;
  v57 = type metadata accessor for ModifiedContent(0, v54, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v228 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v208 = (char *)&v208 - v58;
  v253 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v54);
  v265[13] = v253;
  v265[14] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v57);
  v60 = sub_100007428(&qword_10015D280, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010ED10);
  v266 = v57;
  v61 = v57;
  v210 = v57;
  v211 = v59;
  v62 = v258;
  v267 = v258;
  v268 = v59;
  v63 = v59;
  v269 = v60;
  v64 = v60;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v266, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v232 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v66 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v250 = (char *)&v208 - v67;
  v266 = v61;
  v267 = v62;
  v268 = v63;
  v269 = v64;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v266, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v266 = v66;
  v267 = v62;
  v69 = v66;
  v217 = v66;
  v218 = OpaqueTypeConformance2;
  v70 = v62;
  v268 = OpaqueTypeConformance2;
  v269 = v64;
  v71 = OpaqueTypeConformance2;
  v209 = v64;
  v72 = swift_getOpaqueTypeMetadata2(0, &v266, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v230 = *(_QWORD *)(v72 - 8);
  v73 = v72;
  __chkstk_darwin(v72);
  v213 = (char *)&v208 - v74;
  v266 = v69;
  v267 = v70;
  v268 = v71;
  v269 = v64;
  v75 = swift_getOpaqueTypeConformance2(&v266, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v215 = v73;
  v216 = v75;
  v266 = v73;
  v267 = v75;
  v76 = v75;
  v77 = swift_getOpaqueTypeMetadata2(0, &v266, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v233 = *(_QWORD *)(v77 - 8);
  v78 = v77;
  __chkstk_darwin(v77);
  v214 = (char *)&v208 - v79;
  v266 = v73;
  v267 = v76;
  v80 = swift_getOpaqueTypeConformance2(&v266, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v266 = v78;
  v267 = v80;
  v81 = v78;
  v219 = v78;
  v220 = v80;
  v82 = v80;
  v83 = swift_getOpaqueTypeMetadata2(0, &v266, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 0);
  v231 = *(_QWORD *)(v83 - 8);
  v84 = v83;
  v223 = v83;
  __chkstk_darwin(v83);
  v221 = (char *)&v208 - v85;
  v86 = sub_100007D00(&qword_10015D708);
  v222 = v86;
  v266 = v81;
  v267 = v82;
  v87 = swift_getOpaqueTypeConformance2(&v266, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v225 = v87;
  v224 = sub_10000F4E0(&qword_10015D710, &qword_10015D708, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v266 = v84;
  v267 = v86;
  v268 = v87;
  v269 = v224;
  v88 = swift_getOpaqueTypeMetadata2(0, &v266, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v89 = *(_QWORD *)(v88 - 8);
  v226 = v88;
  v227 = v89;
  __chkstk_darwin(v88);
  v212 = (char *)&v208 - v90;
  v91 = sub_100007D00(&qword_10015D718);
  v92 = type metadata accessor for ModifiedContent(0, v88, v91);
  v235 = *(_QWORD *)(v92 - 8);
  v229 = v92;
  __chkstk_darwin(v92);
  v251 = (char *)&v208 - v93;
  v94 = sub_100007D00(&qword_10015D720);
  v95 = type metadata accessor for ModifiedContent(0, v92, v94);
  v96 = *(_QWORD *)(v95 - 8);
  v236 = v95;
  v238 = v96;
  __chkstk_darwin(v95);
  v252 = (char *)&v208 - v97;
  v99 = type metadata accessor for ModifiedContent(0, v98, &type metadata for _AppearanceActionModifier);
  v100 = *(_QWORD *)(v99 - 8);
  v239 = v99;
  v242 = v100;
  __chkstk_darwin(v99);
  v234 = (char *)&v208 - v101;
  v241 = type metadata accessor for ModifiedContent(0, v102, &type metadata for _AppearanceActionModifier);
  v243 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v237 = (char *)&v208 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v104);
  v240 = (uint64_t)&v208 - v105;
  v107 = static HorizontalAlignment.leading.getter(v106);
  v108 = v261;
  v109 = v262;
  v265[2] = v261;
  v265[3] = v262;
  v110 = v263;
  v265[4] = v263;
  v111 = VStack.init(alignment:spacing:content:)(v107, 0, 0, sub_1000A9B6C, v265, v255, v254);
  v112 = static SafeAreaRegions.all.getter(v111);
  v113 = static Edge.Set.all.getter(v112);
  View.ignoresSafeArea(_:edges:)(v112, v113, v54, v253);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v56, v54);
  v114 = v259;
  v117 = sub_10009E714(v259, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v115, v116);
  v118 = (uint64_t)v244;
  sub_1000D5060();
  v119 = swift_release(v117);
  v120 = v245;
  v257 = *(_QWORD *)(v245 + 16);
  v121 = v260;
  v122 = v114;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v257)(v260, v110, v114, v119);
  v123 = *(unsigned __int8 *)(v120 + 80);
  v254 = (uint64_t)v256 + ((v123 + 32) & ~v123);
  v255 = (v123 + 32) & ~v123;
  v124 = v255;
  v253 = v123 | 7;
  v125 = swift_allocObject(&unk_10014DE60, v254, v123 | 7);
  *(_QWORD *)(v125 + 16) = v108;
  *(_QWORD *)(v125 + 24) = v109;
  v126 = *(void (**)(uint64_t, char *, uint64_t))(v120 + 32);
  v127 = v121;
  v128 = v122;
  v126(v125 + v124, v127, v122);
  v256 = v126;
  v129 = v210;
  v130 = v208;
  v131 = v209;
  View.onChange<A>(of:initial:_:)(v118, 0, sub_1000A9B7C, v125, v210, v258, v211, v209);
  swift_release(v125);
  sub_10001E24C(v118, type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v228 + 8))(v130, v129);
  v132 = v263;
  v135 = sub_10009E714(v128, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v133, v134);
  sub_1000D50A8();
  v136 = swift_release(v135);
  v137 = v260;
  v138 = v128;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v257)(v260, v132, v128, v136);
  v139 = swift_allocObject(&unk_10014DE88, v254, v253);
  v140 = v262;
  *(_QWORD *)(v139 + 16) = v261;
  *(_QWORD *)(v139 + 24) = v140;
  v126(v139 + v255, v137, v128);
  v141 = v213;
  v142 = v217;
  v143 = v250;
  View.onChange<A>(of:initial:_:)(v118, 0, sub_1000A9B7C, v139, v217, v258, v218, v131);
  swift_release(v139);
  sub_10001E24C(v118, type metadata accessor for CompactDatePickerConfiguration);
  (*(void (**)(char *, uint64_t))(v232 + 8))(v143, v142);
  v145 = v246;
  v144 = v247;
  v146 = v248;
  (*(void (**)(char *, _QWORD, uint64_t))(v247 + 104))(v246, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v248);
  v148 = v214;
  v147 = v215;
  View.navigationBarTitleDisplayMode(_:)(v145, v215, v216);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v145, v146);
  (*(void (**)(char *, uint64_t))(v230 + 8))(v141, v147);
  v149 = v263;
  v152 = sub_10009E714(v138, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v150, v151);
  v153 = v152 + *(_QWORD *)(*(_QWORD *)v152 + 232);
  v154 = *(_QWORD *)v153;
  v155 = *(_QWORD *)(v153 + 8);
  v156 = *(unsigned __int8 *)(v153 + 16);
  v157 = *(_QWORD *)(v153 + 24);
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRetain(v157);
  v158 = swift_release(v152);
  v159 = v221;
  v160 = v154;
  v161 = v219;
  View.navigationBarTitle(_:)(v160, v155, v156, v157, v219, v220, v158);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v233 + 8))(v148, v161);
  v162 = v262;
  v264[2] = v261;
  v264[3] = v262;
  v264[4] = v149;
  v163 = v149;
  v164 = v212;
  v166 = v222;
  v165 = v223;
  v168 = v224;
  v167 = v225;
  View.toolbar<A>(content:)(sub_1000A9C20, v264, v223, v222, v225, v224);
  (*(void (**)(char *, uint64_t))(v231 + 8))(v159, v165);
  v266 = v165;
  v267 = v166;
  v268 = v167;
  v269 = v168;
  v169 = swift_getOpaqueTypeConformance2(&v266, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v258 = sub_1000A9C2C();
  v170 = v226;
  v171 = sub_1000573F0((uint64_t)&type metadata for FilterViewSafeAreaPreferenceKey, (uint64_t)sub_10004D770, 0, v226, (uint64_t)&type metadata for FilterViewSafeAreaPreferenceKey, v169, v258);
  (*(void (**)(char *, uint64_t, double))(v227 + 8))(v164, v170, v171);
  v173 = v259;
  v172 = v260;
  ((void (*)(char *, uint64_t, uint64_t))v257)(v260, v163, v259);
  v175 = v253;
  v174 = v254;
  v176 = swift_allocObject(&unk_10014DEB0, v254, v253);
  v177 = v261;
  *(_QWORD *)(v176 + 16) = v261;
  *(_QWORD *)(v176 + 24) = v162;
  v178 = v255;
  v256(v176 + v255, v172, v173);
  v179 = sub_10000F4E0(&qword_10015D728, &qword_10015D718, (uint64_t)&unk_10010C4A0);
  v265[11] = v169;
  v265[12] = v179;
  v180 = v229;
  v181 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v229);
  v182 = sub_10004EDCC();
  v183 = v251;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for FilterViewSafeAreaPreferenceKey, sub_1000A9C74, v176, v180, &type metadata for FilterViewSafeAreaPreferenceKey, v181, v258, v182);
  v184 = swift_release(v176);
  (*(void (**)(char *, uint64_t, __n128))(v235 + 8))(v183, v180, v184);
  v185 = v259;
  v186 = v260;
  v187 = (void (*)(char *, uint64_t, uint64_t))v257;
  ((void (*)(char *, uint64_t, uint64_t))v257)(v260, v263, v259);
  v188 = swift_allocObject(&unk_10014DED8, v174, v175);
  v189 = v262;
  *(_QWORD *)(v188 + 16) = v177;
  *(_QWORD *)(v188 + 24) = v189;
  v190 = v188 + v178;
  v191 = v185;
  v256(v190, v186, v185);
  v192 = sub_10000F4E0(&qword_10015D730, &qword_10015D720, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v265[9] = v181;
  v265[10] = v192;
  v193 = v236;
  v194 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v236);
  v195 = v234;
  v196 = v252;
  View.onAppear(perform:)(sub_1000A9CD0, v188, v193, v194);
  v197 = swift_release(v188);
  (*(void (**)(char *, uint64_t, __n128))(v238 + 8))(v196, v193, v197);
  v187(v186, v263, v191);
  v198 = swift_allocObject(&unk_10014DF00, v254, v253);
  v199 = v262;
  *(_QWORD *)(v198 + 16) = v261;
  *(_QWORD *)(v198 + 24) = v199;
  v256(v198 + v255, v186, v191);
  v265[7] = v194;
  v265[8] = &protocol witness table for _AppearanceActionModifier;
  v200 = v239;
  v201 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v239);
  v202 = (uint64_t)v237;
  View.onDisappear(perform:)(sub_1000A9D40, v198, v200, v201);
  v203 = swift_release(v198);
  (*(void (**)(char *, uint64_t, __n128))(v242 + 8))(v195, v200, v203);
  v265[5] = v201;
  v265[6] = &protocol witness table for _AppearanceActionModifier;
  v204 = v241;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v241);
  v205 = v240;
  sub_10005135C(v202, v204, v240);
  v206 = *(void (**)(uint64_t, uint64_t))(v243 + 8);
  v206(v202, v204);
  sub_1000424BC(v205, v204, v249);
  return ((uint64_t (*)(uint64_t, uint64_t))v206)(v205, v204);
}

uint64_t sub_1000A00C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t WitnessTable;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t TupleTypeMetadata3;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t KeyPath;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  void (*v236)(char *, uint64_t);
  void (*v237)(char *, uint64_t);
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  void (*v256)(char *, uint64_t);
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char v299[8];
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  unint64_t v306;
  _QWORD v307[13];
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;

  v250 = a1;
  v289 = a4;
  v288 = type metadata accessor for AccessibilityTraits(0);
  v287 = *(_QWORD *)(v288 - 8);
  __chkstk_darwin(v288);
  v286 = (char *)&v239 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v277);
  v278 = (char *)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = type metadata accessor for FilterView(0, a2, a3, v8);
  v264 = *(_QWORD *)(v298 - 8);
  v262 = *(_QWORD *)(v264 + 64);
  __chkstk_darwin(v298);
  v263 = (char *)&v239 - v9;
  v268 = sub_100007D50(&qword_10015D760);
  v267 = *(_QWORD *)(v268 - 8);
  __chkstk_darwin(v268);
  v266 = (char *)&v239 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = sub_100007D50(&qword_10015D768);
  __chkstk_darwin(v265);
  v271 = (char *)&v239 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = sub_100007D50(&qword_10015D770);
  __chkstk_darwin(v269);
  v274 = (uint64_t)&v239 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_100007D50(&qword_10015D778);
  __chkstk_darwin(v270);
  v275 = (char *)&v239 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = sub_100007D50(&qword_10015D780);
  __chkstk_darwin(v272);
  v276 = (uint64_t)&v239 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_100007D50(&qword_10015D788);
  __chkstk_darwin(v273);
  v280 = (char *)&v239 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v281 = sub_100007D50(&qword_10015D790);
  __chkstk_darwin(v281);
  v282 = (uint64_t)&v239 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = sub_100007D50(&qword_10015D700);
  __chkstk_darwin(v283);
  v285 = (uint64_t)&v239 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v279 = (char *)&v239 - v19;
  __chkstk_darwin(v20);
  v284 = (uint64_t)&v239 - v21;
  v254 = type metadata accessor for ColorScheme(0);
  v253 = *(_QWORD *)(v254 - 8);
  __chkstk_darwin(v254);
  v252 = (char *)&v239 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v251 = (uint64_t)&v239 - v24;
  v25 = sub_100007D00(&qword_10015D6E8);
  v295 = sub_100007D00(&qword_10015D6F0);
  v297 = a3;
  v296 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v27 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v29 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v30 = swift_getAssociatedTypeWitness(255, v29, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v31 = sub_100007D00(&qword_10015D6F8);
  v32 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v32);
  v33 = type metadata accessor for _AnimationModifier(255, v32);
  v34 = type metadata accessor for ModifiedContent(255, v31, v33);
  v35 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v33);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for ZStack(255, v38, WitnessTable);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v40);
  v42 = type metadata accessor for Button(255, v40, v41);
  v43 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v44 = type metadata accessor for ModifiedContent(255, v42, v43);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for [A], v27);
  v46 = swift_getAssociatedConformanceWitness(v29, AssociatedTypeWitness, v30, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v308 = v27;
  v309 = v30;
  v310 = v44;
  v311 = v45;
  v312 = v46;
  v47 = type metadata accessor for ForEach(255, &v308);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v42);
  v49 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v307[11] = v48;
  v307[12] = v49;
  v307[10] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v47);
  v51 = type metadata accessor for LazyVGrid(255, v47, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v51);
  v53 = type metadata accessor for ScrollView(255, v51, v52);
  v54 = type metadata accessor for ModifiedContent(255, v53, &type metadata for _PaddingLayout);
  v55 = swift_getTupleTypeMetadata2(255, v25, v54, 0, 0);
  type metadata accessor for TupleView(255, v55);
  v56 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v25, v295, v56, 0, 0);
  v58 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v58);
  v60 = type metadata accessor for VStack(255, v58, v59);
  v241 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v60);
  v61 = type metadata accessor for ScrollView(0, v60, v241);
  v242 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v240 = (char *)&v239 - v62;
  v243 = v63;
  v64 = type metadata accessor for ModifiedContent(0, v63, &type metadata for PaddingModifier);
  v245 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v244 = (char *)&v239 - v65;
  v246 = v66;
  v67 = type metadata accessor for ModifiedContent(0, v66, &type metadata for _PaddingLayout);
  v248 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v290 = (char *)&v239 - v68;
  v69 = sub_100007D00(&qword_100158630);
  v249 = v67;
  v295 = type metadata accessor for ModifiedContent(0, v67, v69);
  v291 = *(_QWORD *)(v295 - 8);
  __chkstk_darwin(v295);
  v261 = (char *)&v239 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71);
  v247 = (char *)&v239 - v72;
  __chkstk_darwin(v73);
  v294 = (uint64_t)&v239 - v74;
  v75 = type metadata accessor for Divider(0);
  v76 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v293 = (char *)&v239 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v78);
  v80 = (char *)&v239 - v79;
  v81 = sub_100007D50(&qword_100158C80);
  __chkstk_darwin(v81);
  v83 = (char *)&v239 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v84);
  v86 = (char *)&v239 - v85;
  v88 = Divider.init()(v87);
  LOBYTE(v42) = static Edge.Set.top.getter(v88);
  v89 = v250;
  v92 = sub_10009E714(v298, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v90, v91);
  v93 = sub_1000D4FD4();
  swift_release(v92);
  v94 = EdgeInsets.init(_all:)(v93);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v255 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v255(v83, v80, v75);
  v257 = v81;
  v101 = &v83[*(int *)(v81 + 36)];
  *v101 = v42;
  *((double *)v101 + 1) = v94;
  *((_QWORD *)v101 + 2) = v96;
  *((_QWORD *)v101 + 3) = v98;
  *((_QWORD *)v101 + 4) = v100;
  v101[40] = 0;
  v102 = *(void (**)(char *, uint64_t))(v76 + 8);
  v259 = v80;
  v103 = v80;
  v104 = v240;
  v260 = v75;
  v256 = v102;
  v102(v103, v75);
  v258 = v83;
  v292 = v86;
  v105 = sub_100018EB4((uint64_t)v83, (uint64_t)v86, &qword_100158C80);
  v300 = v296;
  v301 = v297;
  v302 = v89;
  v106 = static Axis.Set.vertical.getter(v105);
  v107 = ScrollView.init(_:showsIndicators:content:)(v106, 0, sub_1000A9E4C, v299, v60, v241);
  v108 = static Edge.Set.leading.getter(v107);
  v109 = v108;
  v110 = static Edge.Set.trailing.getter(v108);
  v111 = Edge.Set.init(rawValue:)(0);
  v112 = Edge.Set.init(rawValue:)(v111);
  if (Edge.Set.init(rawValue:)(v112 & v109) != v109)
    v111 = Edge.Set.init(rawValue:)(v111 | v109);
  v113 = Edge.Set.init(rawValue:)(v111);
  if (Edge.Set.init(rawValue:)(v113 & v110) != v110)
    LOBYTE(v111) = Edge.Set.init(rawValue:)(v111 | v110);
  v116 = (uint64_t)v271;
  v117 = v298;
  v118 = sub_10009E714(v298, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v114, v115);
  v119 = sub_1000D4FD4();
  v121 = v120;
  v123 = v122;
  v125 = v124;
  swift_release(v118);
  v126 = v243;
  v127 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v243);
  v128 = v244;
  sub_100056AB8(v111, v126, v127, v119, v121, v123, v125);
  v129 = (*(uint64_t (**)(char *, uint64_t))(v242 + 8))(v104, v126);
  v130 = static Edge.Set.horizontal.getter(v129);
  v131 = sub_10004FD6C();
  v307[8] = v127;
  v307[9] = v131;
  v132 = v246;
  v133 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v246);
  View.padding(_:_:)(v130, 0, 1, v132, v133);
  v134 = v117;
  (*(void (**)(char *, uint64_t))(v245 + 8))(v128, v132);
  v135 = v251;
  sub_100018C18(v251);
  v136 = v253;
  v137 = v252;
  v138 = v254;
  (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v252, enum case for ColorScheme.light(_:), v254);
  LOBYTE(v130) = static ColorScheme.== infix(_:_:)(v135, v137);
  v139 = *(void (**)(char *, uint64_t))(v136 + 8);
  v139(v137, v138);
  v139((char *)v135, v138);
  if ((v130 & 1) != 0)
  {
    v140 = (uint64_t)v280;
    if (qword_1001580B8 != -1)
      swift_once(&qword_1001580B8, sub_100051460);
    v141 = &qword_10016A4D0;
  }
  else
  {
    v140 = (uint64_t)v280;
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v141 = &qword_10016A4A8;
  }
  v142 = *v141;
  swift_retain(*v141);
  v308 = v142;
  v144 = static Edge.Set.all.getter(v143);
  v307[6] = v133;
  v307[7] = &protocol witness table for _PaddingLayout;
  v145 = v249;
  v146 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v249);
  v147 = (uint64_t)v247;
  v148 = v144;
  v149 = v290;
  View.background<A>(_:ignoresSafeAreaEdges:)(&v308, v148, v145, &type metadata for Color, v146, &protocol witness table for Color);
  v150 = swift_release(v142);
  (*(void (**)(char *, uint64_t, __n128))(v248 + 8))(v149, v145, v150);
  v151 = sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v307[4] = v146;
  v307[5] = v151;
  v152 = v295;
  v280 = (char *)swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v295);
  sub_10005135C(v147, v152, v294);
  v290 = *(char **)(v291 + 8);
  v153 = ((uint64_t (*)(uint64_t, uint64_t))v290)(v147, v152);
  Divider.init()(v153);
  v154 = v264;
  v155 = v263;
  (*(void (**)(char *, uint64_t, uint64_t))(v264 + 16))(v263, v89, v134);
  v156 = *(unsigned __int8 *)(v154 + 80);
  v157 = (v156 + 32) & ~v156;
  v158 = swift_allocObject(&unk_10014DFA0, v157 + v262, v156 | 7);
  v159 = v296;
  v160 = v297;
  *(_QWORD *)(v158 + 16) = v296;
  *(_QWORD *)(v158 + 24) = v160;
  v161 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v154 + 32))(v158 + v157, v155, v134);
  __chkstk_darwin(v161);
  *(&v239 - 4) = v159;
  *(&v239 - 3) = v160;
  *(&v239 - 2) = v89;
  v162 = sub_100007D50(&qword_10015D798);
  v163 = sub_1000A9E74();
  v164 = v266;
  Button.init(action:label:)(sub_1000A9E5C, v158, sub_1000A9E68, &v239 - 6, v162, v163);
  v167 = sub_10009E714(v134, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v165, v166);
  LOBYTE(v162) = sub_1000D6540();
  swift_release(v167);
  KeyPath = swift_getKeyPath(&unk_10010F208);
  v169 = swift_allocObject(&unk_10014DFC8, 17, 7);
  *(_BYTE *)(v169 + 16) = (v162 & 1) == 0;
  v170 = v267;
  v171 = v268;
  (*(void (**)(uint64_t, char *, uint64_t))(v267 + 16))(v116, v164, v268);
  v172 = (uint64_t *)(v116 + *(int *)(v265 + 36));
  *v172 = KeyPath;
  v172[1] = (uint64_t)sub_1000ACFC4;
  v172[2] = v169;
  (*(void (**)(char *, uint64_t))(v170 + 8))(v164, v171);
  v175 = sub_10009E714(v134, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v173, v174);
  LOBYTE(v158) = sub_1000D6540();
  v177 = swift_release(v175);
  if ((v158 & 1) != 0)
    v178 = static Color.blue.getter(v176);
  else
    v178 = static Color.gray.getter(v177);
  v179 = v178;
  v180 = static Edge.Set.all.getter(v178);
  v181 = v274;
  sub_100007E78(v116, v274, &qword_10015D768);
  v182 = v181 + *(int *)(v269 + 36);
  *(_QWORD *)v182 = v179;
  *(_BYTE *)(v182 + 8) = v180;
  sub_100007F38(v116, &qword_10015D768);
  v183 = v278;
  v184 = &v278[*(int *)(v277 + 20)];
  v185 = enum case for RoundedCornerStyle.continuous(_:);
  v186 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 104))(v184, v185, v186);
  __asm { FMOV            V0.2D, #8.0 }
  *v183 = _Q0;
  v192 = (uint64_t)v275;
  v193 = (uint64_t)&v275[*(int *)(v270 + 36)];
  sub_10001BFB8((uint64_t)v183, v193, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v193 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78(v181, v192, &qword_10015D770);
  sub_10001E24C((uint64_t)v183, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v194 = sub_100007F38(v181, &qword_10015D770);
  LOBYTE(v193) = static Edge.Set.vertical.getter(v194);
  v195 = v276;
  sub_100007E78(v192, v276, &qword_10015D778);
  v196 = v195 + *(int *)(v272 + 36);
  *(_BYTE *)v196 = v193;
  *(_OWORD *)(v196 + 8) = 0u;
  *(_OWORD *)(v196 + 24) = 0u;
  *(_BYTE *)(v196 + 40) = 1;
  v197 = sub_100007F38(v192, &qword_10015D778);
  LOBYTE(v193) = static Edge.Set.horizontal.getter(v197);
  sub_100007E78(v195, v140, &qword_10015D780);
  v198 = v140 + *(int *)(v273 + 36);
  *(_BYTE *)v198 = v193;
  *(_OWORD *)(v198 + 8) = 0u;
  *(_OWORD *)(v198 + 24) = 0u;
  *(_BYTE *)(v198 + 40) = 1;
  v199 = sub_100007F38(v195, &qword_10015D780);
  v200 = static Edge.Set.leading.getter(v199);
  v201 = v200;
  v202 = static Edge.Set.trailing.getter(v200);
  v203 = v202;
  v204 = static Edge.Set.bottom.getter(v202);
  v205 = Edge.Set.init(rawValue:)(0);
  v206 = Edge.Set.init(rawValue:)(v205);
  if (Edge.Set.init(rawValue:)(v206 & v201) != v201)
    v205 = Edge.Set.init(rawValue:)(v205 | v201);
  v207 = Edge.Set.init(rawValue:)(v205);
  if (Edge.Set.init(rawValue:)(v207 & v203) != v203)
    v205 = Edge.Set.init(rawValue:)(v205 | v203);
  v208 = Edge.Set.init(rawValue:)(v205);
  if (Edge.Set.init(rawValue:)(v208 & v204) != v204)
    LOBYTE(v205) = Edge.Set.init(rawValue:)(v205 | v204);
  v211 = sub_10009E714(v134, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v209, v210);
  v212 = sub_1000D4FD4();
  v214 = v213;
  v216 = v215;
  v218 = v217;
  swift_release(v211);
  v219 = v282;
  sub_100007E78(v140, v282, &qword_10015D788);
  v220 = v281;
  v221 = v219 + *(int *)(v281 + 36);
  *(_BYTE *)v221 = v205;
  *(double *)(v221 + 8) = v212;
  *(_QWORD *)(v221 + 16) = v214;
  *(_QWORD *)(v221 + 24) = v216;
  *(_QWORD *)(v221 + 32) = v218;
  v222 = sub_100007F38(v140, &qword_10015D788);
  v223 = v286;
  static AccessibilityTraits.isHeader.getter(v222);
  v224 = sub_1000A9F08();
  v225 = (uint64_t)v279;
  View.accessibilityAddTraits(_:)(v223, v220, v224);
  (*(void (**)(char *, uint64_t))(v287 + 8))(v223, v288);
  sub_100007F38(v219, &qword_10015D790);
  v226 = v284;
  sub_100018EB4(v225, v284, &qword_10015D700);
  v227 = (uint64_t)v258;
  sub_100007E78((uint64_t)v292, (uint64_t)v258, &qword_100158C80);
  v308 = v227;
  v228 = v261;
  v229 = v294;
  v230 = v295;
  (*(void (**)(char *, uint64_t, uint64_t))(v291 + 16))(v261, v294, v295);
  v309 = (uint64_t)v228;
  v231 = v259;
  v232 = v293;
  v233 = v260;
  v255(v259, v293, v260);
  v310 = (uint64_t)v231;
  v234 = v285;
  sub_100007E78(v226, v285, &qword_10015D700);
  v311 = v234;
  v307[0] = v257;
  v307[1] = v230;
  v307[2] = v233;
  v307[3] = v283;
  v303 = sub_1000AA15C();
  v304 = v280;
  v305 = sub_100007428(&qword_10015D7E8, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
  v306 = sub_1000AA1E0();
  sub_100042510(&v308, 4uLL, (uint64_t)v307);
  sub_100007F38(v226, &qword_10015D700);
  v235 = v232;
  v236 = v256;
  v256(v235, v233);
  v237 = (void (*)(char *, uint64_t))v290;
  ((void (*)(uint64_t, uint64_t))v290)(v229, v230);
  sub_100007F38((uint64_t)v292, &qword_100158C80);
  sub_100007F38(v234, &qword_10015D700);
  v236(v231, v233);
  v237(v228, v230);
  return sub_100007F38(v227, &qword_100158C80);
}

uint64_t sub_1000A1674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata3;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[5];

  v49 = a1;
  v50 = a4;
  v47 = sub_100007D00(&qword_10015D6E8);
  v48 = sub_100007D00(&qword_10015D6F0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v7 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v9 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v10 = swift_getAssociatedTypeWitness(255, v9, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v11 = sub_100007D00(&qword_10015D6F8);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v11, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(255, v18, WitnessTable);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  v22 = type metadata accessor for Button(255, v20, v21);
  v23 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v58[0] = v7;
  v58[1] = v10;
  v58[2] = v24;
  v58[3] = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v58[4] = swift_getAssociatedConformanceWitness(v9, AssociatedTypeWitness, v10, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v25 = type metadata accessor for ForEach(255, v58);
  v56 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v22);
  v57 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v27 = type metadata accessor for LazyVGrid(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v27);
  v29 = type metadata accessor for ScrollView(255, v27, v28);
  v30 = type metadata accessor for ModifiedContent(255, v29, &type metadata for _PaddingLayout);
  v31 = swift_getTupleTypeMetadata2(255, v47, v30, 0, 0);
  type metadata accessor for TupleView(255, v31);
  v32 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v47, v48, v32, 0, 0);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(0, v34, v35);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v39 = (char *)&v47 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v42 = (char *)&v47 - v41;
  v44 = static HorizontalAlignment.leading.getter(v43);
  v52 = a2;
  v53 = a3;
  v54 = v49;
  VStack.init(alignment:spacing:content:)(v44, 0x4030000000000000, 0, sub_1000AA264, v51, v34, v35);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  sub_10005135C((uint64_t)v39, v36, (uint64_t)v42);
  v45 = *(void (**)(char *, uint64_t))(v37 + 8);
  v45(v39, v36);
  sub_1000424BC((uint64_t)v42, v36, v50);
  return ((uint64_t (*)(char *, uint64_t))v45)(v42, v36);
}

uint64_t sub_1000A1AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  int v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD v246[9];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  _OWORD v256[3];
  char v257;
  _BYTE v258[7];
  _BYTE v259[7];
  char v260;
  _BYTE v261[7];
  char v262;
  _BYTE v263[7];
  char v264;
  char v265;
  _BYTE v266[7];
  _BYTE v267[7];
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  _OWORD v281[3];
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  _BYTE v298[7];
  _BYTE v299[7];
  char v300;
  _BYTE v301[7];
  char v302;
  _BYTE v303[7];
  char v304;
  char v305;
  _BYTE v306[7];
  _BYTE v307[7];
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  _OWORD v317[3];

  v241 = a1;
  v233 = a4;
  v243 = a2;
  v244 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v7 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v9 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v10 = swift_getAssociatedTypeWitness(255, v9, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v11 = sub_100007D00(&qword_10015D6F8);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v11, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(255, v18, WitnessTable);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  v22 = type metadata accessor for Button(255, v20, v21);
  v23 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  *(_QWORD *)&v308 = v7;
  *((_QWORD *)&v308 + 1) = v10;
  *(_QWORD *)&v309 = v24;
  *((_QWORD *)&v309 + 1) = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  *(_QWORD *)&v310 = swift_getAssociatedConformanceWitness(v9, AssociatedTypeWitness, v10, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v25 = type metadata accessor for ForEach(255, &v308);
  v283 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v22);
  v284 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v282 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v27 = type metadata accessor for LazyVGrid(255, v25, v26);
  v208 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v27);
  v209 = v27;
  v28 = type metadata accessor for ScrollView(0, v27, v208);
  v211 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v210 = (char *)&v206 - v29;
  v212 = v30;
  v31 = type metadata accessor for ModifiedContent(0, v30, &type metadata for _PaddingLayout);
  v213 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v215 = (char *)&v206 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v214 = (uint64_t)&v206 - v34;
  v245 = sub_100007D00(&qword_10015D6E8);
  v216 = v31;
  v35 = swift_getTupleTypeMetadata2(255, v245, v31, 0, 0);
  v229 = type metadata accessor for TupleView(255, v35);
  v232 = type metadata accessor for Optional(0);
  v240 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v231 = (char *)&v206 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v230 = (uint64_t)&v206 - v38;
  v227 = sub_100007D50(&qword_10015D7F8);
  __chkstk_darwin(v227);
  v223 = (uint64_t)&v206 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100007D50(&qword_10015D800);
  v225 = *(_QWORD *)(v40 - 8);
  v226 = v40;
  __chkstk_darwin(v40);
  v224 = (char *)&v206 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = sub_100007D50(&qword_10015D6F0);
  __chkstk_darwin(v238);
  v228 = (uint64_t)&v206 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v222 = (char *)&v206 - v44;
  __chkstk_darwin(v45);
  v239 = (uint64_t)&v206 - v46;
  v235 = type metadata accessor for AccessibilityTraits(0);
  v220 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v234 = (char *)&v206 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v207 = (char *)&v206 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v236 = (char *)&v206 - v51;
  __chkstk_darwin(v52);
  v242 = (uint64_t)&v206 - v53;
  __chkstk_darwin(v54);
  v237 = (uint64_t)&v206 - v55;
  v221 = type metadata accessor for FilterView(0, v243, v244, v56);
  v59 = sub_10009E714(v221, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v57, v58);
  v60 = v59 + *(_QWORD *)(*(_QWORD *)v59 + 208);
  v61 = *(_QWORD *)v60;
  v62 = *(_QWORD *)(v60 + 8);
  v63 = *(unsigned __int8 *)(v60 + 16);
  v64 = *(_QWORD *)(v60 + 24);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v64);
  swift_release(v59);
  LOWORD(v205) = 256;
  v65 = Text.init(_:tableName:bundle:comment:)(v61, v62, v63, v64, 0, 0, 0, 0, 0, v205);
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  v72 = static Font.Weight.semibold.getter();
  v73 = Text.fontWeight(_:)(*(_QWORD *)&v72, 0, v65, v67, v71, v69);
  v75 = v74;
  v77 = v76;
  v79 = v78 & 1;
  sub_100007D90(v65, v67, v71);
  v80 = swift_bridgeObjectRelease();
  v81 = static Font.title2.getter(v80);
  v82 = Text.font(_:)(v81, v73, v75, v79, v77);
  v218 = v83;
  v219 = v82;
  LOBYTE(v10) = v84;
  v217 = v85;
  swift_release(v81);
  sub_100007D90(v73, v75, v79);
  v86 = swift_bridgeObjectRelease();
  v87 = static Alignment.leading.getter(v86);
  v89 = _FrameLayout.init(width:height:alignment:)(&v285, 0, 1, 0, 1, v87, v88);
  v90 = v285;
  LOBYTE(v75) = v286;
  v91 = v287;
  LOBYTE(v67) = v288;
  v92 = v289;
  v93 = v290;
  LOBYTE(v81) = static Edge.Set.top.getter(v89);
  v94 = EdgeInsets.init(_all:)(28.0);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v304 = v10 & 1;
  v302 = v75;
  v300 = v67;
  v297 = 0;
  LOBYTE(v75) = static Edge.Set.bottom.getter(v101);
  v102 = EdgeInsets.init(_all:)(4.0);
  *(_DWORD *)((char *)&v273 + 1) = *(_DWORD *)v303;
  DWORD1(v273) = *(_DWORD *)&v303[3];
  *(_DWORD *)((char *)&v274 + 9) = *(_DWORD *)v301;
  HIDWORD(v274) = *(_DWORD *)&v301[3];
  *(_DWORD *)((char *)&v275 + 9) = *(_DWORD *)v299;
  HIDWORD(v275) = *(_DWORD *)&v299[3];
  *(_DWORD *)((char *)&v277 + 1) = *(_DWORD *)v298;
  DWORD1(v277) = *(_DWORD *)&v298[3];
  v305 = 0;
  *(_QWORD *)&v272 = v219;
  *((_QWORD *)&v272 + 1) = v218;
  LOBYTE(v273) = v304;
  *((_QWORD *)&v273 + 1) = v217;
  *(_QWORD *)&v274 = v90;
  v103 = v242;
  BYTE8(v274) = v302;
  *(_QWORD *)&v275 = v91;
  BYTE8(v275) = v300;
  *(_QWORD *)&v276 = v92;
  *((_QWORD *)&v276 + 1) = v93;
  LOBYTE(v277) = v81;
  *((double *)&v277 + 1) = v94;
  *(_QWORD *)&v278 = v96;
  *((_QWORD *)&v278 + 1) = v98;
  *(_QWORD *)&v279 = v100;
  BYTE8(v279) = v297;
  HIDWORD(v279) = *(_DWORD *)&v307[3];
  *(_DWORD *)((char *)&v279 + 9) = *(_DWORD *)v307;
  LOBYTE(v280) = v75;
  DWORD1(v280) = *(_DWORD *)&v306[3];
  *(_DWORD *)((char *)&v280 + 1) = *(_DWORD *)v306;
  *((double *)&v280 + 1) = v102;
  *(_QWORD *)&v281[0] = v104;
  *((_QWORD *)&v281[0] + 1) = v105;
  *(_QWORD *)&v281[1] = v106;
  BYTE8(v281[1]) = 0;
  v107 = v234;
  static AccessibilityTraits.isHeader.getter(v108);
  v109 = sub_100007D50(&qword_10015D808);
  v110 = sub_10001E0A8(&qword_10015D810, &qword_10015D808, (void (*)(void))sub_1000AA270);
  v111 = (uint64_t)v236;
  v219 = v110;
  View.accessibilityAddTraits(_:)(v107, v109, v110);
  v220 = *(_QWORD *)(v220 + 8);
  ((void (*)(char *, uint64_t))v220)(v107, v235);
  v316 = v280;
  v317[0] = v281[0];
  *(_OWORD *)((char *)v317 + 9) = *(_OWORD *)((char *)v281 + 9);
  v312 = v276;
  v313 = v277;
  v315 = v279;
  v314 = v278;
  v308 = v272;
  v309 = v273;
  v311 = v275;
  v310 = v274;
  sub_1000AA350((uint64_t)&v308);
  ModifiedContent<>.accessibilityHeading(_:)(1, v245);
  sub_100007F38(v111, &qword_10015D6E8);
  sub_100018EB4(v103, v237, &qword_10015D6E8);
  v246[2] = v243;
  v246[3] = v244;
  v246[4] = v241;
  v112 = v223;
  sub_1000A3AEC(v243, v244, v223);
  v113 = sub_100007D50(&qword_10015D838);
  v114 = sub_1000AA398();
  v115 = sub_1000AA564();
  v116 = v224;
  v117 = Section<>.init(header:content:)(v112, sub_1000AA38C, v246, v227, v113, v114, v115);
  LOBYTE(v114) = static Edge.Set.bottom.getter(v117);
  v119 = v225;
  v118 = v226;
  v120 = (uint64_t)v222;
  (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v222, v116, v226);
  v121 = v120 + *(int *)(v238 + 36);
  *(_BYTE *)v121 = v114;
  *(_OWORD *)(v121 + 8) = 0u;
  *(_OWORD *)(v121 + 24) = 0u;
  *(_BYTE *)(v121 + 40) = 1;
  v122 = *(void (**)(char *, uint64_t))(v119 + 8);
  v123 = v221;
  v122(v116, v118);
  sub_100018EB4(v120, v239, &qword_10015D6F0);
  v126 = sub_10009E714(v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v124, v125);
  LOBYTE(v114) = sub_1000D59E0();
  swift_release(v126);
  if ((v114 & 1) != 0)
  {
    v129 = sub_10009E714(v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v127, v128);
    v130 = v129 + *(_QWORD *)(*(_QWORD *)v129 + 224);
    v131 = *(_QWORD *)v130;
    v132 = *(_QWORD *)(v130 + 8);
    v133 = *(unsigned __int8 *)(v130 + 16);
    v134 = *(_QWORD *)(v130 + 24);
    swift_bridgeObjectRetain(v132);
    swift_bridgeObjectRetain(v134);
    swift_release(v129);
    LOWORD(v205) = 256;
    v135 = Text.init(_:tableName:bundle:comment:)(v131, v132, v133, v134, 0, 0, 0, 0, 0, v205);
    v137 = v136;
    v139 = v138;
    v141 = v140 & 1;
    v142 = static Font.Weight.semibold.getter();
    v143 = Text.fontWeight(_:)(*(_QWORD *)&v142, 0, v135, v137, v141, v139);
    v145 = v144;
    v147 = v146;
    v227 = v109;
    v149 = v148 & 1;
    sub_100007D90(v135, v137, v141);
    v150 = swift_bridgeObjectRelease();
    v151 = static Font.title2.getter(v150);
    v152 = Text.font(_:)(v151, v143, v145, v149, v147);
    v225 = v153;
    v226 = v152;
    LOBYTE(v141) = v154;
    v224 = v155;
    swift_release(v151);
    sub_100007D90(v143, v145, v149);
    v156 = swift_bridgeObjectRelease();
    v157 = static Alignment.leading.getter(v156);
    v159 = _FrameLayout.init(width:height:alignment:)(&v291, 0, 1, 0, 1, v157, v158);
    v160 = v291;
    LOBYTE(v151) = v292;
    v161 = v293;
    LOBYTE(v139) = v294;
    v162 = v295;
    v163 = v296;
    LOBYTE(v143) = static Edge.Set.bottom.getter(v159);
    v164 = EdgeInsets.init(_all:)(4.0);
    v166 = v165;
    v168 = v167;
    v170 = v169;
    v264 = v141 & 1;
    v262 = v151;
    v260 = v139;
    v257 = 0;
    LOBYTE(v151) = static Edge.Set.top.getter(v171);
    v172 = EdgeInsets.init(_all:)(4.0);
    *(_DWORD *)((char *)&v248 + 1) = *(_DWORD *)v263;
    DWORD1(v248) = *(_DWORD *)&v263[3];
    *(_DWORD *)((char *)&v249 + 9) = *(_DWORD *)v261;
    HIDWORD(v249) = *(_DWORD *)&v261[3];
    *(_DWORD *)((char *)&v250 + 9) = *(_DWORD *)v259;
    HIDWORD(v250) = *(_DWORD *)&v259[3];
    *(_DWORD *)((char *)&v252 + 1) = *(_DWORD *)v258;
    DWORD1(v252) = *(_DWORD *)&v258[3];
    v265 = 0;
    *(_QWORD *)&v247 = v226;
    *((_QWORD *)&v247 + 1) = v225;
    LOBYTE(v248) = v264;
    *((_QWORD *)&v248 + 1) = v224;
    *(_QWORD *)&v249 = v160;
    BYTE8(v249) = v262;
    *(_QWORD *)&v250 = v161;
    v103 = v242;
    BYTE8(v250) = v260;
    *(_QWORD *)&v251 = v162;
    *((_QWORD *)&v251 + 1) = v163;
    LOBYTE(v252) = v143;
    *((double *)&v252 + 1) = v164;
    *(_QWORD *)&v253 = v166;
    *((_QWORD *)&v253 + 1) = v168;
    *(_QWORD *)&v254 = v170;
    BYTE8(v254) = v257;
    HIDWORD(v254) = *(_DWORD *)&v267[3];
    *(_DWORD *)((char *)&v254 + 9) = *(_DWORD *)v267;
    LOBYTE(v255) = v151;
    DWORD1(v255) = *(_DWORD *)&v266[3];
    *(_DWORD *)((char *)&v255 + 1) = *(_DWORD *)v266;
    *((double *)&v255 + 1) = v172;
    *(_QWORD *)&v256[0] = v173;
    *((_QWORD *)&v256[0] + 1) = v174;
    *(_QWORD *)&v256[1] = v175;
    BYTE8(v256[1]) = 0;
    v176 = v234;
    static AccessibilityTraits.isHeader.getter(v177);
    v178 = (uint64_t)v207;
    View.accessibilityAddTraits(_:)(v176, v227, v219);
    ((void (*)(char *, uint64_t))v220)(v176, v235);
    v280 = v255;
    v281[0] = v256[0];
    *(_OWORD *)((char *)v281 + 9) = *(_OWORD *)((char *)v256 + 9);
    v276 = v251;
    v277 = v252;
    v278 = v253;
    v279 = v254;
    v272 = v247;
    v273 = v248;
    v274 = v249;
    v275 = v250;
    sub_1000AA350((uint64_t)&v272);
    v179 = (uint64_t)v236;
    ModifiedContent<>.accessibilityHeading(_:)(1, v245);
    sub_100007F38(v178, &qword_10015D6E8);
    v180 = sub_100018EB4(v179, v103, &qword_10015D6E8);
    __chkstk_darwin(v180);
    v181 = v244;
    *(&v206 - 4) = v243;
    *(&v206 - 3) = v181;
    v204 = v241;
    v183 = static Axis.Set.vertical.getter(v182);
    v184 = v210;
    v185 = ScrollView.init(_:showsIndicators:content:)(v183, 0, sub_1000AA704, &v206 - 6, v209, v208);
    v186 = static Edge.Set.bottom.getter(v185);
    v187 = v212;
    v188 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v212);
    v189 = (uint64_t)v215;
    View.padding(_:_:)(v186, 0, 1, v187, v188);
    (*(void (**)(char *, uint64_t))(v211 + 8))(v184, v187);
    v246[7] = v188;
    v246[8] = &protocol witness table for _PaddingLayout;
    v190 = v216;
    v191 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v216);
    v192 = v214;
    sub_10005135C(v189, v190, v214);
    v193 = v213;
    v194 = *(void (**)(uint64_t, uint64_t))(v213 + 8);
    v194(v189, v190);
    sub_100007E78(v103, v179, &qword_10015D6E8);
    *(_QWORD *)&v247 = v179;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v189, v192, v190);
    *((_QWORD *)&v247 + 1) = v189;
    v269 = v245;
    v270 = v190;
    v246[5] = sub_1000AA5E8();
    v246[6] = v191;
    v195 = (uint64_t)v231;
    sub_100042510((uint64_t *)&v247, 2uLL, (uint64_t)&v269);
    v194(v192, v190);
    sub_100007F38(v103, &qword_10015D6E8);
    v194(v189, v190);
    sub_100007F38(v179, &qword_10015D6E8);
    v196 = v229;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 56))(v195, 0, 1, v229);
  }
  else
  {
    v196 = v229;
    v195 = (uint64_t)v231;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 56))(v231, 1, 1, v229);
  }
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v196);
  v197 = v230;
  sub_1000424D4(v195, v230);
  v198 = *(void (**)(uint64_t, uint64_t))(v240 + 8);
  v199 = v232;
  v198(v195, v232);
  v200 = v237;
  sub_100007E78(v237, v103, &qword_10015D6E8);
  *(_QWORD *)&v272 = v103;
  v201 = v239;
  v202 = v228;
  sub_100007E78(v239, v228, &qword_10015D6F0);
  *((_QWORD *)&v272 + 1) = v202;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v240 + 16))(v195, v197, v199);
  *(_QWORD *)&v273 = v195;
  *(_QWORD *)&v247 = v245;
  *((_QWORD *)&v247 + 1) = v238;
  *(_QWORD *)&v248 = v199;
  v269 = sub_1000AA5E8();
  v270 = sub_10001E0A8(&qword_10015D888, &qword_10015D6F0, (void (*)(void))sub_1000AA68C);
  v268 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v196);
  v271 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v199);
  sub_100042510((uint64_t *)&v272, 3uLL, (uint64_t)&v247);
  v198(v197, v199);
  sub_100007F38(v201, &qword_10015D6F0);
  sub_100007F38(v200, &qword_10015D6E8);
  v198(v195, v199);
  sub_100007F38(v202, &qword_10015D6F0);
  return sub_100007F38(v242, &qword_10015D6E8);
}

uint64_t sub_1000A2BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v8 = sub_100007D50(&qword_10015D878);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = static Alignment.center.getter(v11);
  v10[1] = v12;
  v13 = sub_100007D50(&qword_10015D8C8);
  v14 = sub_1000A2D04(a1, a2, a3, (uint64_t)v10 + *(int *)(v13 + 44));
  LOBYTE(a3) = static Edge.Set.top.getter(v14);
  v15 = EdgeInsets.init(_all:)(-8.0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_100007E78((uint64_t)v10, a4, &qword_10015D878);
  v22 = a4 + *(int *)(sub_100007D50(&qword_10015D838) + 36);
  *(_BYTE *)v22 = a3;
  *(double *)(v22 + 8) = v15;
  *(_QWORD *)(v22 + 16) = v17;
  *(_QWORD *)(v22 + 24) = v19;
  *(_QWORD *)(v22 + 32) = v21;
  *(_BYTE *)(v22 + 40) = 0;
  return sub_100007F38((uint64_t)v10, &qword_10015D878);
}

uint64_t sub_1000A2D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v67 = a3;
  v75 = a1;
  v76 = a2;
  v74 = a4;
  v4 = sub_100007D50(&qword_10015D8D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100007D50(&qword_10015D8D8);
  __chkstk_darwin(v69);
  v72 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100007D50(&qword_10015D8E0);
  __chkstk_darwin(v71);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v73 = (uint64_t)&v65 - v11;
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v65 - v17;
  v19 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v19);
  v21 = (_OWORD *)((char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = sub_100007D50(&qword_10015C7A0);
  __chkstk_darwin(v66);
  v70 = (uint64_t)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v65 - v24;
  __chkstk_darwin(v26);
  v68 = (uint64_t)&v65 - v27;
  v28 = (char *)v21 + *(int *)(v19 + 20);
  v29 = enum case for RoundedCornerStyle.continuous(_:);
  v30 = type metadata accessor for RoundedCornerStyle(0);
  v31 = v29;
  v32 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v28, v31, v30);
  __asm { FMOV            V0.2D, #8.0 }
  *v21 = _Q0;
  type metadata accessor for FilterView(0, v76, v32, v38);
  sub_100018C18((uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for ColorScheme.light(_:), v12);
  LOBYTE(v28) = static ColorScheme.== infix(_:_:)(v18, v15);
  v39 = *(void (**)(char *, uint64_t))(v13 + 8);
  v39(v15, v12);
  v39(v18, v12);
  if ((v28 & 1) != 0)
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v40 = &qword_10016A4A8;
  }
  else
  {
    if (qword_1001580B8 != -1)
      swift_once(&qword_1001580B8, sub_100051460);
    v40 = &qword_10016A4D0;
  }
  v41 = *v40;
  swift_retain(*v40);
  KeyPath = swift_getKeyPath(&unk_10010F268);
  sub_10001BFB8((uint64_t)v21, (uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v43 = (uint64_t *)&v25[*(int *)(v66 + 36)];
  *v43 = KeyPath;
  v43[1] = v41;
  sub_10001E24C((uint64_t)v21, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v44 = (uint64_t)v25;
  v45 = v68;
  v46 = sub_100018EB4(v44, v68, &qword_10015C7A0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v46);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v47 = sub_100007D50(&qword_10015D8E8);
  v48 = sub_1000A3240(v76, v32, (uint64_t)&v6[*(int *)(v47 + 44)]);
  LOBYTE(v41) = static Edge.Set.horizontal.getter(v48);
  v49 = v72;
  sub_100007E78((uint64_t)v6, v72, &qword_10015D8D0);
  v50 = v49 + *(int *)(v69 + 36);
  *(_BYTE *)v50 = v41;
  *(_OWORD *)(v50 + 8) = 0u;
  *(_OWORD *)(v50 + 24) = 0u;
  *(_BYTE *)(v50 + 40) = 1;
  v51 = sub_100007F38((uint64_t)v6, &qword_10015D8D0);
  LOBYTE(v41) = static Edge.Set.vertical.getter(v51);
  v52 = EdgeInsets.init(_all:)(4.0);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_100007E78(v49, (uint64_t)v9, &qword_10015D8D8);
  v59 = &v9[*(int *)(v71 + 36)];
  *v59 = v41;
  *((double *)v59 + 1) = v52;
  *((_QWORD *)v59 + 2) = v54;
  *((_QWORD *)v59 + 3) = v56;
  *((_QWORD *)v59 + 4) = v58;
  v59[40] = 0;
  sub_100007F38(v49, &qword_10015D8D8);
  v60 = v73;
  sub_100018EB4((uint64_t)v9, v73, &qword_10015D8E0);
  v61 = v70;
  sub_100007E78(v45, v70, &qword_10015C7A0);
  sub_100007E78(v60, (uint64_t)v9, &qword_10015D8E0);
  v62 = v74;
  sub_100007E78(v61, v74, &qword_10015C7A0);
  v63 = sub_100007D50(&qword_10015D8F0);
  sub_100007E78((uint64_t)v9, v62 + *(int *)(v63 + 48), &qword_10015D8E0);
  sub_100007F38(v60, &qword_10015D8E0);
  sub_100007F38(v45, &qword_10015C7A0);
  sub_100007F38((uint64_t)v9, &qword_10015D8E0);
  return sub_100007F38(v61, &qword_10015C7A0);
}

uint64_t sub_1000A3240@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v120 = a3;
  v119 = type metadata accessor for Divider(0);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v123 = (char *)&v109 - v7;
  v8 = sub_100007D50(&qword_10015D8F8);
  __chkstk_darwin(v8);
  v124 = (uint64_t *)((char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v126 = (uint64_t *)((char *)&v109 - v11);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v109 - v13);
  v121 = (uint64_t *)((char *)&v109 - v13);
  v15 = (int *)type metadata accessor for CompactDatePicker(0);
  __chkstk_darwin(v15);
  v116 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v122 = (uint64_t)&v109 - v18;
  __chkstk_darwin(v19);
  v115 = (char *)&v109 - v20;
  __chkstk_darwin(v21);
  v125 = (uint64_t)&v109 - v22;
  v24 = type metadata accessor for FilterView(0, a1, a2, v23);
  v27 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v25, v26);
  v141 = a1;
  v142 = a2;
  KeyPath = swift_getKeyPath(&unk_10010F298);
  v30 = type metadata accessor for FilterViewModel(255, a1, a2, v29);
  WitnessTable = swift_getWitnessTable(&unk_100110A30, v30);
  ObservedObject.Wrapper.subscript.getter(v14, KeyPath, v27, WitnessTable);
  swift_release(v27);
  swift_release(KeyPath);
  v34 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v32, v33);
  v139 = a1;
  v140 = a2;
  v35 = a1;
  v36 = swift_getKeyPath(&unk_10010F2D0);
  ObservedObject.Wrapper.subscript.getter(v126, v36, v34, WitnessTable);
  swift_release(v34);
  swift_release(v36);
  v39 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v37, v38);
  v137 = a1;
  v138 = a2;
  v113 = a2;
  v40 = swift_getKeyPath(&unk_10010F298);
  v41 = v124;
  v112 = WitnessTable;
  ObservedObject.Wrapper.subscript.getter(v124, v40, v39, WitnessTable);
  swift_release(v39);
  swift_release(v40);
  v44 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v42, v43);
  v135 = v35;
  v136 = a2;
  v45 = swift_getKeyPath(&unk_10010F308);
  ObservedObject.Wrapper.subscript.getter(&v143, v45, v44, WitnessTable);
  swift_release(v45);
  swift_release(v44);
  v111 = v143;
  v110 = v144;
  v46 = v145;
  v49 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v47, v48);
  v50 = v125;
  sub_1000D5308((char *)(v125 + v15[8]));
  swift_release(v49);
  v53 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v51, v52);
  v54 = sub_1000D54E4();
  swift_release(v53);
  v57 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v55, v56);
  LOBYTE(v45) = sub_1000D556C();
  swift_release(v57);
  v58 = v121;
  sub_100018EB4((uint64_t)v121, v50, &qword_10015D8F8);
  v59 = v126;
  sub_100018EB4((uint64_t)v126, v50 + v15[5], &qword_10015D8F8);
  v60 = sub_100018EB4((uint64_t)v41, v50 + v15[6], &qword_10015D8F8);
  v114 = v15;
  v61 = (_QWORD *)(v50 + v15[7]);
  v62 = v110;
  *v61 = v111;
  v61[1] = v62;
  v61[2] = v46;
  *(double *)(v50 + v15[9]) = v54;
  *(_BYTE *)(v50 + v15[10]) = v45 & 1;
  Divider.init()(v60);
  v65 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v63, v64);
  v66 = v113;
  v133 = v35;
  v134 = v113;
  v67 = swift_getKeyPath(&unk_10010F298);
  v68 = v112;
  ObservedObject.Wrapper.subscript.getter(v58, v67, v65, v112);
  swift_release(v65);
  swift_release(v67);
  v71 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v69, v70);
  v131 = v35;
  v132 = v66;
  v72 = swift_getKeyPath(&unk_10010F2D0);
  ObservedObject.Wrapper.subscript.getter(v59, v72, v71, v68);
  swift_release(v71);
  swift_release(v72);
  v75 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v73, v74);
  v129 = v35;
  v130 = v66;
  v76 = swift_getKeyPath(&unk_10010F2D0);
  ObservedObject.Wrapper.subscript.getter(v124, v76, v75, v68);
  swift_release(v75);
  swift_release(v76);
  v79 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v77, v78);
  v127 = v35;
  v128 = v66;
  v80 = swift_getKeyPath(&unk_10010F340);
  ObservedObject.Wrapper.subscript.getter(&v143, v80, v79, v68);
  swift_release(v80);
  swift_release(v79);
  v81 = v143;
  v82 = v144;
  v83 = v145;
  v86 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v84, v85);
  v87 = v114;
  v88 = (uint64_t)v115;
  sub_1000D55A0(&v115[v114[8]]);
  swift_release(v86);
  v91 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v89, v90);
  sub_1000D5784();
  v93 = v92;
  swift_release(v91);
  v96 = sub_10009E714(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v94, v95);
  LOBYTE(v80) = sub_1000D5838();
  swift_release(v96);
  sub_100018EB4((uint64_t)v121, v88, &qword_10015D8F8);
  sub_100018EB4((uint64_t)v126, v88 + v87[5], &qword_10015D8F8);
  sub_100018EB4((uint64_t)v124, v88 + v87[6], &qword_10015D8F8);
  v97 = (_QWORD *)(v88 + v87[7]);
  *v97 = v81;
  v97[1] = v82;
  v97[2] = v83;
  *(_QWORD *)(v88 + v87[9]) = v93;
  *(_BYTE *)(v88 + v87[10]) = v80 & 1;
  v98 = v122;
  sub_10001BFB8(v125, v122, type metadata accessor for CompactDatePicker);
  v99 = v118;
  v100 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v101 = v117;
  v102 = v123;
  v103 = v119;
  v100(v117, v123, v119);
  v104 = v116;
  sub_10001BFB8(v88, v116, type metadata accessor for CompactDatePicker);
  v105 = v120;
  sub_10001BFB8(v98, v120, type metadata accessor for CompactDatePicker);
  v106 = sub_100007D50(&qword_10015D900);
  v100((char *)(v105 + *(int *)(v106 + 48)), v101, v103);
  sub_10001BFB8(v104, v105 + *(int *)(v106 + 64), type metadata accessor for CompactDatePicker);
  sub_10001E24C(v88, type metadata accessor for CompactDatePicker);
  v107 = *(void (**)(char *, uint64_t))(v99 + 8);
  v107(v102, v103);
  sub_10001E24C(v125, type metadata accessor for CompactDatePicker);
  sub_10001E24C(v104, type metadata accessor for CompactDatePicker);
  v107(v101, v103);
  return sub_10001E24C(v122, type metadata accessor for CompactDatePicker);
}

void sub_1000A3A54(double *a1@<X8>)
{
  *a1 = sub_1000D52E0();
}

uint64_t sub_1000A3A7C(double *a1)
{
  return sub_1000D52F4(*a1);
}

void sub_1000A3AA0(double *a1@<X8>)
{
  *a1 = sub_1000D5578();
}

uint64_t sub_1000A3AC8(double *a1)
{
  return sub_1000D558C(*a1);
}

uint64_t sub_1000A3AEC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t KeyPath;
  double v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v52 = a3;
  v53 = type metadata accessor for AccessibilityTraits(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v49 = sub_100007D50(&qword_10015D8C0);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v7 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FilterView(0, a1, a2, v8);
  v12 = sub_10009E714(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = (uint64_t *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 216));
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  swift_release(v12);
  v54 = v14;
  v55 = v15;
  sub_10001DB0C();
  v16 = Text.init<A>(_:)(&v54, &type metadata for String);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = static Edge.Set.bottom.getter(v16);
  v24 = EdgeInsets.init(_all:)(-16.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v31 = v20 & 1;
  v46 = v31;
  v32 = qword_10016A4B8;
  v33 = swift_retain(qword_10016A4B8);
  v34 = static Font.caption.getter(v33);
  KeyPath = swift_getKeyPath(&unk_10010F238);
  v54 = v16;
  v55 = v18;
  v56 = v31;
  v57 = v22;
  v58 = v23;
  v59 = v24;
  v60 = v26;
  v61 = v28;
  v62 = v30;
  v63 = 0;
  v64 = v32;
  v65 = KeyPath;
  v66 = v34;
  v36 = static Font.Weight.semibold.getter();
  v47 = v22;
  v37 = v36;
  v38 = sub_100007D50(&qword_10015D848);
  v39 = sub_1000AA444();
  View.fontWeight(_:)(*(_QWORD *)&v37, 0, v38, v39);
  sub_100007D90(v16, v18, v46);
  swift_release(v34);
  swift_release(KeyPath);
  swift_release(v32);
  v40 = swift_bridgeObjectRelease();
  v41 = v50;
  static AccessibilityTraits.isHeader.getter(v40);
  v54 = v38;
  v55 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v43 = v49;
  View.accessibilityRemoveTraits(_:)(v41, v49, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v41, v53);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v48 + 8))(v7, v43);
}

uint64_t sub_1000A3DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[5];

  v52 = a1;
  v54 = a4;
  v6 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v6);
  v53 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v9 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v11 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v12 = swift_getAssociatedTypeWitness(255, v11, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v13 = sub_100007D00(&qword_10015D6F8);
  v14 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v14);
  v15 = type metadata accessor for _AnimationModifier(255, v14);
  v16 = type metadata accessor for ModifiedContent(255, v13, v15);
  v17 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v15);
  v18 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v16, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for ZStack(255, v20, WitnessTable);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v22);
  v24 = type metadata accessor for Button(255, v22, v23);
  v25 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v28 = swift_getAssociatedConformanceWitness(v11, AssociatedTypeWitness, v12, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v62[0] = v9;
  v62[1] = v12;
  v62[2] = v26;
  v62[3] = v27;
  v62[4] = v28;
  v29 = type metadata accessor for ForEach(255, v62);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v24);
  v31 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v60 = v30;
  v61 = v31;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v29);
  v33 = type metadata accessor for LazyVGrid(0, v29, v32);
  v51 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v35 = (char *)&v51 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v38 = (char *)&v51 - v37;
  v40 = type metadata accessor for FilterView(0, a2, a3, v39);
  v41 = v52;
  v44 = sub_10009E714(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v42, v43);
  v45 = *(_QWORD *)(v44 + *(_QWORD *)(*(_QWORD *)v44 + 256));
  swift_bridgeObjectRetain(v45);
  swift_release(v44);
  v56 = a2;
  v57 = a3;
  v58 = v41;
  v47 = static HorizontalAlignment.center.getter(v46);
  v48 = v53;
  sub_1000B07DC();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v45, v47, 0x4030000000000000, 0, v48, sub_1000AA710, v55, v29, v32);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v33);
  sub_10005135C((uint64_t)v35, v33, (uint64_t)v38);
  v49 = *(void (**)(char *, uint64_t))(v51 + 8);
  v49(v35, v33);
  sub_1000424BC((uint64_t)v38, v33, v54);
  return ((uint64_t (*)(char *, uint64_t))v49)(v38, v33);
}

uint64_t sub_1000A41F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[6];

  v63 = a3;
  v64 = a1;
  v67 = a5;
  v62 = a2;
  v61 = type metadata accessor for FilterView(0, a2, a3, a4);
  v7 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
  v65 = *(_QWORD *)(v61 - 8);
  v66 = v7;
  __chkstk_darwin(v61);
  v9 = (char *)&v55 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v11 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v13 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v59 = v13;
  v14 = swift_getAssociatedTypeWitness(255, v13, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v15 = sub_100007D00(&qword_10015D6F8);
  v16 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v16);
  v17 = type metadata accessor for _AnimationModifier(255, v16);
  v18 = type metadata accessor for ModifiedContent(255, v15, v17);
  v19 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v17);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v18, v20, 0, 0);
  v22 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v22);
  v24 = type metadata accessor for ZStack(255, v22, WitnessTable);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v24);
  v26 = type metadata accessor for Button(255, v24, v25);
  v27 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v28 = type metadata accessor for ModifiedContent(255, v26, v27);
  v58 = v11;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v56 = v29;
  v57 = v14;
  v30 = swift_getAssociatedConformanceWitness(v13, AssociatedTypeWitness, v14, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v71[0] = v11;
  v71[1] = v14;
  v71[2] = v28;
  v71[3] = v29;
  v71[4] = v30;
  v31 = type metadata accessor for ForEach(0, v71);
  v60 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v33 = (char *)&v55 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v55 - v35;
  v37 = v61;
  v38 = v64;
  v41 = sub_10009E714(v61, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v39, v40);
  v42 = sub_1000D5A78();
  v43 = swift_release(v41);
  v71[0] = v42;
  v44 = v65;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v65 + 16))(v9, v38, v37, v43);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = v44;
  v47 = (v45 + 32) & ~v45;
  v48 = swift_allocObject(&unk_10014DFF0, v47 + v66, v45 | 7);
  v49 = v63;
  *(_QWORD *)(v48 + 16) = v62;
  *(_QWORD *)(v48 + 24) = v49;
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v48 + v47, v9, v37);
  v50 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v26);
  v51 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v69 = v50;
  v70 = v51;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v28);
  ForEach<>.init(_:content:)(v71, sub_1000AA844, v48, v58, v57, v28, v56, v52, v59);
  v68 = v52;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v31);
  sub_10005135C((uint64_t)v33, v31, (uint64_t)v36);
  v53 = *(void (**)(char *, uint64_t))(v60 + 8);
  v53(v33, v31);
  sub_1000424BC((uint64_t)v36, v31, v67);
  return ((uint64_t (*)(char *, uint64_t))v53)(v36, v31);
}

uint64_t sub_1000A463C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char v95[16];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[4];

  v81 = a2;
  v83 = a1;
  v92 = a5;
  v7 = type metadata accessor for AccessibilityTraits(0);
  v89 = *(_QWORD *)(v7 - 8);
  v90 = v7;
  __chkstk_darwin(v7);
  v91 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &unk_10011790C, &unk_10011799C);
  v93 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = AssociatedTypeWitness;
  v80 = *(_QWORD *)(v93 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v79 = (char *)&v73 - v11;
  v78 = a4;
  v13 = type metadata accessor for FilterView(0, a3, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v17 = (char *)&v73 - v16;
  v75 = (char *)&v73 - v16;
  v18 = sub_100007D00(&qword_10015D6F8);
  v19 = a3;
  v20 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v10, &unk_10011790C, &unk_100117924) + 8);
  v74 = v10;
  v21 = type metadata accessor for Set(255, v10, v20);
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v21);
  v22 = type metadata accessor for _AnimationModifier(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v18, v22);
  v24 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v22);
  v25 = type metadata accessor for ModifiedContent(255, v24, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v23, v25, 0, 0);
  v27 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v27);
  v29 = type metadata accessor for ZStack(255, v27, WitnessTable);
  v77 = v29;
  v76 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v29);
  v30 = type metadata accessor for Button(0, v29, v76);
  v85 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v94 = (char *)&v73 - v31;
  v32 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v84 = v30;
  v82 = type metadata accessor for ModifiedContent(0, v30, v32);
  v88 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v86 = (char *)&v73 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v34);
  v87 = (uint64_t)&v73 - v36;
  v37 = v14;
  v38 = v81;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, v81, v13, v35);
  v39 = v93;
  v40 = v79;
  v41 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v79, v83, v10);
  v42 = *(unsigned __int8 *)(v37 + 80);
  v43 = v37;
  v44 = (v42 + 32) & ~v42;
  v45 = *(unsigned __int8 *)(v39 + 80);
  v46 = (v15 + v44 + v45) & ~v45;
  v47 = swift_allocObject(&unk_10014E018, v46 + v80, v42 | v45 | 7);
  v48 = v19;
  *(_QWORD *)(v47 + 16) = v19;
  v49 = v78;
  *(_QWORD *)(v47 + 24) = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v47 + v44, v75, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v47 + v46, v40, v74);
  v96 = v48;
  v97 = v49;
  v98 = v38;
  v99 = v41;
  Button.init(action:label:)(sub_1000AAA40, v47, sub_1000AAAD4, v95, v77, v76);
  v52 = sub_10009E714(v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v50, v51);
  LOBYTE(v47) = sub_1000D6034(v41);
  v53 = swift_release(v52);
  if ((v47 & 1) != 0)
  {
    v54 = sub_100007D50(&qword_100158C40);
    v55 = v89;
    v56 = swift_allocObject(v54, ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ 2 * *(_QWORD *)(v89 + 72), *(unsigned __int8 *)(v89 + 80) | 7);
    *(_OWORD *)(v56 + 16) = xmmword_100108810;
    v57 = static AccessibilityTraits.isToggle.getter((__n128)xmmword_100108810);
    static AccessibilityTraits.isSelected.getter(v57);
    v100[0] = v56;
    v58 = sub_100007428(&qword_100158C48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v59 = sub_100007D50(&qword_100158C50);
    v60 = sub_10000F4E0(&qword_100158C58, &qword_100158C50, (uint64_t)&protocol conformance descriptor for [A]);
    v61 = v90;
    v62 = v91;
    dispatch thunk of SetAlgebra.init<A>(_:)(v100, v59, v60, v90, v58);
    v63 = v55;
  }
  else
  {
    v62 = v91;
    static AccessibilityTraits.isToggle.getter(v53);
    v63 = v89;
    v61 = v90;
  }
  v64 = v84;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v84);
  v66 = (uint64_t)v86;
  v67 = v94;
  View.accessibilityAddTraits(_:)(v62, v64, v65);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v61);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v67, v64);
  v68 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v100[1] = v65;
  v100[2] = v68;
  v69 = v82;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v82);
  v70 = v87;
  sub_10005135C(v66, v69, v87);
  v71 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
  v71(v66, v69);
  sub_1000424BC(v70, v69, v92);
  return ((uint64_t (*)(uint64_t, uint64_t))v71)(v70, v69);
}

void sub_1000A4C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for FilterView(0, a3, a4, a4);
  v9 = sub_10009E714(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v7, v8);
  sub_1000D5A8C(a2);
  swift_release(v9);
  v12 = sub_10009E714(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = (uint64_t *)(a1 + *(int *)(v6 + 44));
  v14 = *v13;
  if (*v13)
  {
    v15 = v12;
    swift_retain(*v13);
    sub_1000D5D98(7, 0x65726E6567, 0xE500000000000000, 2u, v14);
    swift_release(v15);
    swift_release(v14);
  }
  else
  {
    v16 = v13[1];
    v17 = type metadata accessor for RemoteViewConfiguration();
    v18 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

uint64_t sub_1000A4D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a5;
  v9 = sub_100007D00(&qword_10015D6F8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &unk_10011790C, &unk_10011799C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v12 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v12);
  v13 = type metadata accessor for _AnimationModifier(255, v12);
  v14 = type metadata accessor for ModifiedContent(255, v9, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v13);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for ZStack(0, v18, WitnessTable);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v31 - v25;
  v33 = a3;
  v34 = a4;
  v35 = a1;
  v36 = a2;
  v28 = static Alignment.center.getter(v27);
  ZStack.init(alignment:content:)(v28);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v20);
  sub_10005135C((uint64_t)v23, v20, (uint64_t)v26);
  v29 = *(void (**)(char *, uint64_t))(v21 + 8);
  v29(v23, v20);
  sub_1000424BC((uint64_t)v26, v20, v32);
  return ((uint64_t (*)(char *, uint64_t))v29)(v26, v20);
}

uint64_t sub_1000A4F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD);
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t (*v135)(uint64_t, uint64_t, __n128);
  uint64_t v136;
  __n128 v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t AssociatedConformanceWitness;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t WitnessTable;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[4];
  uint64_t v165;
  uint64_t *v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  char v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  __int128 v184;
  __int128 v185;
  char v186;
  uint64_t v187;
  uint64_t *v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  __int128 v194;
  __int128 v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  _OWORD v199[2];
  uint64_t v200;

  v160 = a2;
  v161 = a1;
  v152 = a5;
  v145 = sub_100007D50(&qword_10015D898);
  __chkstk_darwin(v145);
  v146 = (uint64_t)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorScheme(0);
  v141 = *(_QWORD *)(v8 - 8);
  v142 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v139 - v12;
  v159 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v159);
  v15 = (_OWORD *)((char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100007D50(&qword_10015AA48);
  __chkstk_darwin(v143);
  v17 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100007D50(&qword_10015D6F8);
  __chkstk_darwin(v18);
  v148 = (uint64_t *)((char *)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v140 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &unk_10011790C, &unk_10011799C);
  v21 = a4;
  v22 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v21, a3, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v150 = AssociatedTypeWitness;
  v23 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v23);
  v154 = v23;
  v24 = type metadata accessor for _AnimationModifier(255, v23);
  v147 = v18;
  v155 = v24;
  v158 = type metadata accessor for ModifiedContent(0, v18, v24);
  v156 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v151 = (char *)&v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v144 = (char *)&v139 - v27;
  __chkstk_darwin(v28);
  v157 = (uint64_t)&v139 - v29;
  v30 = (char *)v15 + *(int *)(v159 + 20);
  v31 = enum case for RoundedCornerStyle.continuous(_:);
  v32 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  __asm { FMOV            V0.2D, #8.0 }
  *v15 = _Q0;
  v159 = type metadata accessor for FilterView(0, v22, v140, v38);
  sub_100018C18((uint64_t)v13);
  v39 = v141;
  v40 = v142;
  (*(void (**)(char *, _QWORD, uint64_t))(v141 + 104))(v10, enum case for ColorScheme.light(_:), v142);
  LOBYTE(v30) = static ColorScheme.== infix(_:_:)(v13, v10);
  v41 = *(void (**)(char *, uint64_t))(v39 + 8);
  v41(v10, v40);
  v41(v13, v40);
  if ((v30 & 1) != 0)
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v42 = &qword_10016A4A8;
  }
  else
  {
    if (qword_1001580B8 != -1)
      swift_once(&qword_1001580B8, sub_100051460);
    v42 = &qword_10016A4D0;
  }
  v43 = *v42;
  swift_retain(*v42);
  sub_10001BFB8((uint64_t)v15, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v44 = v143;
  *(_QWORD *)&v17[*(int *)(v143 + 52)] = v43;
  *(_WORD *)&v17[*(int *)(v44 + 56)] = 256;
  v45 = sub_10001E24C((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v46 = static Color.blue.getter(v45);
  v49 = sub_10009E714(v159, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v47, v48);
  v50 = sub_1000D6034(v160);
  swift_release(v49);
  v51 = 0.0;
  if ((v50 & 1) != 0)
    v51 = 1.0;
  v52 = Color.opacity(_:)(v51);
  swift_release(v46);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v199, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v53 = (void (*)(_QWORD, _QWORD))v148;
  sub_10001BFB8((uint64_t)v17, (uint64_t)v148, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v54 = *(double *)v199 * 0.5;
  v55 = v146;
  sub_10001BFB8((uint64_t)v17, v146, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(double *)(v55 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v54;
  v56 = sub_100007D50(&qword_10015D8A0);
  v57 = v55 + *(int *)(v56 + 36);
  v58 = v199[1];
  *(_OWORD *)v57 = v199[0];
  *(_OWORD *)(v57 + 16) = v58;
  *(_QWORD *)(v57 + 32) = v200;
  v59 = v145;
  *(_QWORD *)(v55 + *(int *)(v145 + 52)) = v52;
  *(_WORD *)(v55 + *(int *)(v59 + 56)) = 256;
  v60 = static Alignment.center.getter(v56);
  v62 = v61;
  v63 = v147;
  v64 = (uint64_t)v53 + *(int *)(v147 + 68);
  v65 = v64 + *(int *)(sub_100007D50(&qword_10015D8A8) + 36);
  sub_100007E78((uint64_t)v17, v65, &qword_10015AA48);
  v66 = (uint64_t *)(v65 + *(int *)(sub_100007D50(&qword_10015D8B0) + 36));
  *v66 = v60;
  v66[1] = v62;
  sub_100018EB4(v55, v64, &qword_10015D898);
  sub_100007F38((uint64_t)v17, &qword_10015AA48);
  v67 = v159;
  v70 = sub_10009E714(v159, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v68, v69);
  LOBYTE(v62) = sub_1000D6034(v160);
  v71 = swift_release(v70);
  if ((v62 & 1) != 0)
    v71.n128_f64[0] = 0.2;
  else
    v71.n128_f64[0] = 0.1;
  v72 = static Animation.easeInOut(duration:)(v71);
  v75 = sub_10009E714(v67, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v73, v74);
  v76 = sub_1000D60D8();
  swift_release(v75);
  v187 = v76;
  v77 = sub_10000F4E0(&qword_10015D8B8, &qword_10015D6F8, (uint64_t)&protocol conformance descriptor for StrokeBorderShapeView<A, B, C>);
  v78 = (uint64_t)v144;
  View.animation<A>(_:value:)(v72, &v187, v63, v154, v77, WitnessTable);
  swift_bridgeObjectRelease();
  swift_release(v72);
  sub_100007F38((uint64_t)v53, &qword_10015D6F8);
  v79 = swift_getWitnessTable(&protocol conformance descriptor for _AnimationModifier<A>, v155);
  v197 = v77;
  v198 = v79;
  v146 = v79;
  v80 = v158;
  v147 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  sub_10005135C(v78, v80, v157);
  v148 = *(uint64_t **)(v156 + 8);
  ((void (*)(uint64_t, uint64_t))v148)(v78, v80);
  v81 = v160;
  v187 = (*(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 32))(v150);
  v188 = (uint64_t *)v82;
  sub_10001DB0C();
  v83 = Text.init<A>(_:)(&v187, &type metadata for String);
  v85 = v84;
  v87 = v86;
  v89 = v88;
  v90 = sub_10009E714(v67, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v86, v88);
  LOBYTE(v77) = sub_1000D6034(v81);
  swift_release(v90);
  if ((v77 & 1) != 0)
    v92 = static Color.blue.getter(v91);
  else
    v92 = static Color.primary.getter(v91);
  v93 = v92;
  v94 = v87 & 1;
  v95 = Text.foregroundColor(_:)(v92, v83, v85, v87 & 1, v89);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  swift_release(v93);
  v102 = v99 & 1;
  sub_100007D90(v83, v85, v94);
  swift_bridgeObjectRelease();
  v177 = v95;
  v178 = (uint64_t *)v97;
  v179 = v102;
  v180 = v101;
  v103 = v159;
  v106 = sub_10009E714(v159, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v104, v105);
  v107 = sub_1000D6034(v160);
  v108 = swift_release(v106);
  if ((v107 & 1) != 0)
    v108.n128_f64[0] = 0.1;
  else
    v108.n128_f64[0] = 0.2;
  v109 = static Animation.easeInOut(duration:)(v108);
  v112 = sub_10009E714(v103, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v110, v111);
  v113 = sub_1000D60D8();
  swift_release(v112);
  v165 = v113;
  View.animation<A>(_:value:)(v109, &v165, &type metadata for Text, v154, &protocol witness table for Text, WitnessTable);
  swift_bridgeObjectRelease();
  swift_release(v109);
  sub_100007D90(v95, v97, v102);
  swift_bridgeObjectRelease();
  v114 = v187;
  v115 = (uint64_t)v188;
  v116 = v189;
  v117 = v191;
  v165 = v187;
  v166 = v188;
  v167 = v189;
  v168 = v190;
  v169 = v191;
  v170 = v192;
  v118 = type metadata accessor for ModifiedContent(0, &type metadata for Text, v155);
  v175 = &protocol witness table for Text;
  v176 = v146;
  v119 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v118);
  View.padding(_:)(&v177, v118, v119, 15.0);
  sub_100007D90(v114, v115, v116);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v117);
  v120 = v177;
  v121 = (uint64_t)v178;
  v122 = v179;
  v123 = v181;
  v165 = v177;
  v166 = v178;
  v167 = v179;
  v168 = v180;
  v169 = v181;
  v170 = v182;
  v171 = v183;
  v172 = v184;
  v173 = v185;
  v174 = v186;
  v124 = type metadata accessor for ModifiedContent(0, v118, &type metadata for _PaddingLayout);
  v164[2] = v119;
  v164[3] = &protocol witness table for _PaddingLayout;
  v125 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v124);
  sub_10005135C((uint64_t)&v165, v124, (uint64_t)&v187);
  sub_100007D90(v120, v121, v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v126 = swift_release(v123);
  v127 = v157;
  v128 = (uint64_t)v151;
  v129 = v158;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v156 + 16))(v151, v157, v158, v126);
  v130 = v190;
  v131 = v191;
  v132 = v192;
  v177 = v187;
  v178 = v188;
  v179 = v189;
  v180 = v190;
  v181 = v191;
  v182 = v192;
  v183 = v193;
  v184 = v194;
  v185 = v195;
  v186 = v196;
  v165 = v128;
  v166 = &v177;
  sub_10000F844(v187, (uint64_t)v188, v189);
  swift_retain(v131);
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRetain(v130);
  v164[0] = v129;
  v164[1] = v124;
  v162 = v147;
  v163 = v125;
  sub_100042510(&v165, 2uLL, (uint64_t)v164);
  v133 = v191;
  sub_100007D90(v187, (uint64_t)v188, v189);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v134 = swift_release(v133);
  v135 = (uint64_t (*)(uint64_t, uint64_t, __n128))v148;
  ((void (*)(uint64_t, uint64_t, __n128))v148)(v127, v129, v134);
  v136 = v181;
  sub_100007D90(v177, (uint64_t)v178, v179);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v137 = swift_release(v136);
  return v135(v128, v129, v137);
}

uint64_t sub_1000A5A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for DismissAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FilterView(0, a2, a3, v10);
  v14 = sub_10009E714(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v12, v13);
  sub_1000D60EC();
  swift_release(v14);
  v17 = sub_10009E714(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v15, v16);
  v18 = (uint64_t *)(a1 + *(int *)(v11 + 44));
  v19 = *v18;
  if (*v18)
  {
    v20 = v17;
    swift_retain(*v18);
    sub_1000D5D98(7, 21, 0, 3u, v19);
    swift_release(v20);
    swift_release(v19);
    sub_100018E80((uint64_t)v9);
    DismissAction.callAsFunction()();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v22 = v18[1];
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
  return result;
}

double sub_1000A5BF0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double result;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[12];
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v5 = type metadata accessor for FilterView(0, a1, a2, a3);
  v8 = sub_10009E714(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = sub_1000D646C();
  v11 = v10;
  swift_release(v8);
  *(_QWORD *)&v68 = v9;
  *((_QWORD *)&v68 + 1) = v11;
  sub_10001DB0C();
  v12 = Text.init<A>(_:)(&v68, &type metadata for String);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = static Font.Weight.semibold.getter();
  v20 = Text.fontWeight(_:)(*(_QWORD *)&v19, 0, v12, v14, v18, v16);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  sub_100007D90(v12, v14, v18);
  v27 = swift_bridgeObjectRelease();
  v28 = static Font.headline.getter(v27);
  v29 = Text.font(_:)(v28, v20, v22, v26, v24);
  v31 = v30;
  LOBYTE(v16) = v32;
  v55 = v33;
  swift_release(v28);
  LOBYTE(v28) = v16 & 1;
  sub_100007D90(v20, v22, v26);
  v34 = swift_bridgeObjectRelease();
  v35 = static Color.white.getter(v34);
  v36 = Text.foregroundColor(_:)(v35, v29, v31, v16 & 1, v55);
  v56 = v37;
  LOBYTE(v26) = v38;
  v40 = v39;
  swift_release(v35);
  sub_100007D90(v29, v31, v28);
  v41 = swift_bridgeObjectRelease();
  v58 = v36;
  v59 = v56;
  v60 = v26 & 1;
  v61 = v40;
  v62 = static Edge.Set.all.getter(v41);
  v63 = EdgeInsets.init(_all:)(16.0);
  v64 = v42;
  v65 = v43;
  v66 = v44;
  v67 = 0;
  v46 = static Alignment.center.getter(v45);
  sub_100043D18(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v57, 0.0, 1, 0.0, 1, v46, v47);
  sub_100007D90(v36, v56, v26 & 1);
  swift_bridgeObjectRelease();
  v76 = v57[10];
  v77 = v57[11];
  v72 = v57[4];
  v73 = v57[5];
  v74 = v57[6];
  v75 = v57[7];
  v68 = v57[0];
  v69 = v57[1];
  v70 = v57[2];
  v71 = v57[3];
  v48 = v57[9];
  a4[8] = v57[8];
  a4[9] = v48;
  v49 = v77;
  a4[10] = v76;
  a4[11] = v49;
  v50 = v73;
  a4[4] = v72;
  a4[5] = v50;
  v51 = v75;
  a4[6] = v74;
  a4[7] = v51;
  v52 = v69;
  *a4 = v68;
  a4[1] = v52;
  result = *(double *)&v70;
  v54 = v71;
  a4[2] = v70;
  a4[3] = v54;
  return result;
}

uint64_t sub_1000A5E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v36 = a4;
  v35 = sub_100007D50(&qword_10015D740);
  __chkstk_darwin(v35);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015D748);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100007D50(&qword_10015B348);
  v15 = *(_QWORD *)(v32 - 8);
  v16 = __chkstk_darwin(v32);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarLeading.getter(v16);
  v42 = a2;
  v43 = a3;
  v44 = a1;
  v19 = sub_100007D50(&qword_100158648);
  v20 = sub_10000F4E0(&qword_10015B358, &qword_100158648, (uint64_t)&protocol conformance descriptor for Button<A>);
  ToolbarItem<>.init(placement:content:)(v14, sub_1000A9D4C, v41, v19, v20);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v21);
  v38 = a2;
  v39 = a3;
  v40 = a1;
  v22 = sub_100007D50(&qword_10015D750);
  v23 = sub_1000A9D64();
  ToolbarItem<>.init(placement:content:)(v14, sub_1000A9D58, v37, v22, v23);
  v24 = v35;
  v25 = &v8[*(int *)(v35 + 48)];
  v26 = v32;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v8, v18, v32);
  v27 = v33;
  v28 = v25;
  v29 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v28, v11, v34);
  TupleToolbarContent.init(_:)(v8, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v26);
}

uint64_t sub_1000A60C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a5;
  v8 = type metadata accessor for FilterView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)&v25 - v11;
  v16 = sub_10009E714(v13, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v14, v15);
  v17 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 248);
  v18 = *(_QWORD *)(v17 + 8);
  v27 = *(_QWORD *)v17;
  v26 = *(unsigned __int8 *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v20 = swift_release(v16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v20);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_10014DF78, v22 + v10, v21 | 7);
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v23 + v22, v12, v8);
  return Button<>.init(_:action:)(v27, v18, v26, v19, sub_1000A9E40, v23);
}

uint64_t sub_1000A6200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilterView(0, a2, a3, v9);
  sub_100018E80((uint64_t)v8);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A62A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE v35[12];
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a2;
  v39 = a3;
  v42 = a5;
  v6 = type metadata accessor for FilterView(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = &v35[-v9];
  v11 = sub_100007D50(&qword_100158648);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_10009E714(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v14, v15);
  v17 = v16 + *(_QWORD *)(*(_QWORD *)v16 + 240);
  v18 = *(_QWORD *)(v17 + 8);
  v37 = *(_QWORD *)v17;
  v36 = *(unsigned __int8 *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v20 = swift_release(v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v20);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_10014DF28, v22 + v8, v21 | 7);
  v24 = v39;
  *(_QWORD *)(v23 + 16) = v38;
  *(_QWORD *)(v23 + 24) = v24;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v23 + v22, v10, v6);
  Button<>.init(_:action:)(v37, v18, v36, v19, sub_1000A9E04, v23);
  v27 = sub_10009E714(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v25, v26);
  LOBYTE(v19) = sub_1000D6A98();
  swift_release(v27);
  KeyPath = swift_getKeyPath(&unk_10010F208);
  v29 = swift_allocObject(&unk_10014DF50, 17, 7);
  *(_BYTE *)(v29 + 16) = (v19 & 1) == 0;
  v31 = v40;
  v30 = v41;
  v32 = v42;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v40 + 16))(v42, v13, v41);
  v33 = (uint64_t *)(v32 + *(int *)(sub_100007D50(&qword_10015D750) + 36));
  *v33 = KeyPath;
  v33[1] = (uint64_t)sub_1000A9E34;
  v33[2] = v29;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v31 + 8))(v13, v30);
}

void sub_1000A64D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12 = type metadata accessor for FilterView(0, a2, a3, (uint64_t)a4);
  v15 = sub_10009E714(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v13, v14);
  a4();
  swift_release(v15);
  v18 = sub_10009E714(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v16, v17);
  v19 = (uint64_t *)(a1 + *(int *)(v12 + 44));
  v20 = *v19;
  if (*v19)
  {
    v21 = v18;
    swift_retain(*v19);
    sub_1000D5D98(7, a5, a6, a7, v20);
    swift_release(v21);
    swift_release(v20);
  }
  else
  {
    v22 = v19[1];
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
}

double sub_1000A65E0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for FilterView(0, a3, a4, a4);
  v11 = sub_10009E714(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v9, v10);
  sub_1000D6ABC(v4, v5, v6, v7);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

void sub_1000A664C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for FilterView(0, a2, a3, a4);
  v8 = sub_10009E714(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = (_QWORD *)(a1 + *(int *)(v5 + 44));
  v10 = *v9;
  if (*v9)
  {
    v11 = v8;
    swift_retain(*v9);
    sub_1000D6B60(v12, v13, v14, v15);
    swift_release(v11);
    swift_release(v10);
  }
  else
  {
    v16 = v9[1];
    v17 = type metadata accessor for RemoteViewConfiguration();
    v18 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

void sub_1000A66FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = type metadata accessor for FilterView(0, a2, a3, a4);
  v8 = sub_10009E714(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  v10 = *v9;
  if (*v9)
  {
    v11 = v8;
    swift_retain(*v9);
    sub_1000D5D98(7, 2, 0, 3u, v10);
    swift_release(v11);
    swift_release(v10);
  }
  else
  {
    v12 = v9[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
}

uint64_t sub_1000A67C4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  id v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = type metadata accessor for Date(0);
  v0 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v24 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)&v24 - v14, 1, 1, v5, v13);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v16, "setDateStyle:", 2);
  sub_100007E78((uint64_t)v15, (uint64_t)v11, &qword_1001588C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    sub_100007F38((uint64_t)v11, &qword_1001588C0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_100007F38((uint64_t)v15, &qword_1001588C0);
  type metadata accessor for CompactDatePicker(0);
  v18 = sub_100007D50(&qword_10015D8F8);
  Binding.wrappedValue.getter(v18);
  v19 = v26;
  (*(void (**)(char *, char *, uint64_t))(v0 + 16))(v2, &v4[*(int *)(v25 + 20)], v26);
  sub_10001E24C((uint64_t)v4, type metadata accessor for CompactDatePickerConfiguration);
  v20 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v19);
  v21 = objc_msgSend(v16, "stringFromDate:", v20);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  return v22;
}

uint64_t sub_1000A6A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v3 = sub_100007D50(&qword_10015D9C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - v7;
  v9 = sub_100007D50(&qword_10015D9D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015D9D8);
  __chkstk_darwin(v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v19 = sub_100007D50(&qword_10015D9E0);
  v20 = sub_1000A6D20(a1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.vertical.getter(v20);
  v22 = EdgeInsets.init(_all:)(8.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007E78((uint64_t)v11, (uint64_t)v14, &qword_10015D9D0);
  v29 = &v14[*(int *)(v12 + 36)];
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_100007F38((uint64_t)v11, &qword_10015D9D0);
  v30 = sub_100018EB4((uint64_t)v14, (uint64_t)v17, &qword_10015D9D8);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v30);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v31 = sub_100007D50(&qword_10015D9E8);
  sub_1000A7B38(a1, &v8[*(int *)(v31 + 44)]);
  sub_100007E78((uint64_t)v17, (uint64_t)v14, &qword_10015D9D8);
  sub_100007E78((uint64_t)v8, (uint64_t)v5, &qword_10015D9C8);
  v32 = v36;
  sub_100007E78((uint64_t)v14, v36, &qword_10015D9D8);
  v33 = sub_100007D50(&qword_10015D9F0);
  sub_100007E78((uint64_t)v5, v32 + *(int *)(v33 + 48), &qword_10015D9C8);
  sub_100007F38((uint64_t)v8, &qword_10015D9C8);
  sub_100007F38((uint64_t)v17, &qword_10015D9D8);
  sub_100007F38((uint64_t)v5, &qword_10015D9C8);
  return sub_100007F38((uint64_t)v14, &qword_10015D9D8);
}

uint64_t sub_1000A6D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87[16];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v67 = a1;
  v86 = a2;
  v83 = type metadata accessor for DatePickerButtonStyle(0);
  __chkstk_darwin(v83);
  v80 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CompactDatePicker(0);
  v75 = *(_QWORD *)(v4 - 8);
  v5 = v4;
  v73 = v4;
  v76 = *(_QWORD *)(v75 + 64);
  __chkstk_darwin(v4);
  v74 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100007D50(&qword_10015DA88);
  v85 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v77 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100007D50(&qword_10015DA90);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v78 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v79 = (char *)&v65 - v10;
  v70 = type metadata accessor for AccessibilityTraits(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = sub_100007D50(&qword_1001582B0);
  __chkstk_darwin(v68);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v65 = (char *)&v65 - v19;
  __chkstk_darwin(v20);
  v66 = (uint64_t)&v65 - v21;
  v72 = a1 + *(int *)(v5 + 24);
  v71 = sub_100007D50(&qword_10015D8F8);
  Binding.wrappedValue.getter(v71);
  v23 = *v15;
  v22 = v15[1];
  swift_bridgeObjectRetain(v22);
  sub_10001E24C((uint64_t)v15, type metadata accessor for CompactDatePickerConfiguration);
  v89 = v23;
  v90 = v22;
  sub_10001DB0C();
  v24 = Text.init<A>(_:)(&v89, &type metadata for String);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v31 = static Font.Weight.regular.getter();
  v32 = Text.fontWeight(_:)(*(_QWORD *)&v31, 0, v24, v26, v30, v28);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  sub_100007D90(v24, v26, v30);
  v39 = swift_bridgeObjectRelease();
  v89 = v32;
  v90 = v34;
  v91 = v36 & 1;
  v92 = v38;
  static AccessibilityTraits.isHeader.getter(v39);
  View.accessibilityAddTraits(_:)(v12, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v12, v70);
  sub_100007D90(v89, v90, v91);
  swift_bridgeObjectRelease();
  v40 = (uint64_t)v65;
  v41 = v68;
  ModifiedContent<>.accessibilityHeading(_:)(2, v68);
  sub_100007F38((uint64_t)v17, &qword_1001582B0);
  v42 = v66;
  sub_100018EB4(v40, v66, &qword_1001582B0);
  v43 = v67;
  v44 = v74;
  sub_10001BFB8(v67, v74, type metadata accessor for CompactDatePicker);
  v45 = *(unsigned __int8 *)(v75 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = swift_allocObject(&unk_10014E098, v46 + v76, v45 | 7);
  sub_1000AC450(v44, v47 + v46);
  v88 = v43;
  v48 = sub_100007DF4();
  v49 = v77;
  Button.init(action:label:)(sub_1000AC674, v47, sub_1000AC6A0, v87, v41, v48);
  LOBYTE(v47) = *(_BYTE *)(v43 + *(int *)(v73 + 40));
  v50 = v83;
  v51 = v80;
  Binding.wrappedValue.getter(v71);
  *v51 = v47;
  *(_QWORD *)&v51[*(int *)(v50 + 24)] = 0x3FD3333333333333;
  v52 = sub_10000F4E0(&qword_10015DA98, &qword_10015DA88, (uint64_t)&protocol conformance descriptor for Button<A>);
  v53 = sub_100007428(&qword_10015DAA0, type metadata accessor for DatePickerButtonStyle, (uint64_t)&unk_10010F58C);
  v54 = v78;
  v55 = v81;
  View.buttonStyle<A>(_:)(v51, v81, v50, v52, v53);
  sub_10001E24C((uint64_t)v51, type metadata accessor for DatePickerButtonStyle);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v49, v55);
  v56 = v82;
  v57 = v79;
  v58 = v84;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v79, v54, v84);
  sub_100007E78(v42, v40, &qword_1001582B0);
  v59 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v59(v54, v57, v58);
  v60 = v86;
  sub_100007E78(v40, v86, &qword_1001582B0);
  v61 = sub_100007D50(&qword_10015DAA8);
  v62 = v60 + *(int *)(v61 + 48);
  *(_QWORD *)v62 = 0;
  *(_BYTE *)(v62 + 8) = 1;
  v59((char *)(v60 + *(int *)(v61 + 64)), v54, v58);
  v63 = *(void (**)(char *, uint64_t))(v56 + 8);
  v63(v57, v58);
  sub_100007F38(v42, &qword_1001582B0);
  v63(v54, v58);
  return sub_100007F38(v40, &qword_1001582B0);
}

double sub_1000A7340(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  double result;
  _QWORD v5[4];

  a2.n128_u64[0] = 0x3FD3333333333333;
  v3 = static Animation.easeInOut(duration:)(a2);
  v5[2] = a1;
  withAnimation<A>(_:_:)(v3, sub_1000AC6A8, v5, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_1000A73AC(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[2];

  v2 = sub_100007D50(&qword_10015D8F8);
  __chkstk_darwin(v2);
  v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v40 - v8);
  __chkstk_darwin(v10);
  v42 = (char *)&v40 - v11;
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v40 - v13);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v40 - v16);
  v44 = &a1[*(int *)(type metadata accessor for CompactDatePicker(0) + 24)];
  Binding.wrappedValue.getter(v2);
  Binding.wrappedValue.getter(v2);
  v18 = v17[1];
  v19 = v14[1];
  v20 = *v17 == *v14 && v18 == v19;
  if ((v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, *v14, v19, 0) & 1) != 0)
    && (static Date.== infix(_:_:)((char *)v17 + *(int *)(v4 + 20), (char *)v14 + *(int *)(v4 + 20)) & 1) != 0)
  {
    v21 = *(int *)(v4 + 24);
    v22 = *((unsigned __int8 *)v17 + v21);
    v41 = v4;
    v23 = a1;
    v24 = *((unsigned __int8 *)v14 + v21);
    sub_10001E24C((uint64_t)v14, type metadata accessor for CompactDatePickerConfiguration);
    sub_10001E24C((uint64_t)v17, type metadata accessor for CompactDatePickerConfiguration);
    v20 = v22 == v24;
    a1 = v23;
    v4 = v41;
    v25 = (uint64_t)v43;
    if (v20)
    {
      v26 = v42;
      Binding.wrappedValue.getter(v2);
      v26[*(int *)(v4 + 24)] = 0;
      Binding.wrappedValue.setter(v26, v2);
    }
  }
  else
  {
    sub_10001E24C((uint64_t)v14, type metadata accessor for CompactDatePickerConfiguration);
    sub_10001E24C((uint64_t)v17, type metadata accessor for CompactDatePickerConfiguration);
    v25 = (uint64_t)v43;
  }
  Binding.wrappedValue.getter(v2);
  Binding.wrappedValue.getter(v2);
  v27 = v9[1];
  v28 = v6[1];
  v29 = *v9 == *v6 && v27 == v28;
  if ((v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v9, v27, *v6, v28, 0) & 1) != 0)
    && (static Date.== infix(_:_:)((char *)v9 + *(int *)(v4 + 20), (char *)v6 + *(int *)(v4 + 20)) & 1) != 0)
  {
    v43 = a1;
    v30 = *(int *)(v4 + 24);
    v31 = *((unsigned __int8 *)v9 + v30);
    v32 = *((unsigned __int8 *)v6 + v30);
    sub_10001E24C((uint64_t)v6, type metadata accessor for CompactDatePickerConfiguration);
    sub_10001E24C((uint64_t)v9, type metadata accessor for CompactDatePickerConfiguration);
    if (v31 == v32)
    {
      v33 = v42;
      Binding.wrappedValue.getter(v2);
      v33[*(int *)(v4 + 24)] = 0;
      Binding.wrappedValue.setter(v33, v2);
    }
  }
  else
  {
    sub_10001E24C((uint64_t)v6, type metadata accessor for CompactDatePickerConfiguration);
    sub_10001E24C((uint64_t)v9, type metadata accessor for CompactDatePickerConfiguration);
  }
  sub_100007E78((uint64_t)v44, v25, &qword_10015D8F8);
  KeyPath = swift_getKeyPath(&unk_10010F4C0);
  Binding.subscript.getter(&v48, KeyPath, v2);
  swift_release(KeyPath);
  sub_100007F38(v25, &qword_10015D8F8);
  v35 = v48;
  v36 = v49;
  v37 = v50;
  v45 = v48;
  v46 = v49;
  v47 = v50;
  v38 = sub_100007D50(&qword_10015CE00);
  Binding.wrappedValue.getter(v38);
  v45 = v35;
  v46 = v36;
  v47 = v37;
  v51[0] = (v51[1] & 1) == 0;
  Binding.wrappedValue.setter(v51, v38);
  swift_release(v36);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

uint64_t sub_1000A7774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v38 = a1;
  v1 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessibilityTraits(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100007D50(&qword_1001582B0);
  __chkstk_darwin(v36);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v37 = (char *)&v34 - v11;
  v40 = sub_1000A67C4();
  v41 = v12;
  sub_10001DB0C();
  v40 = Text.init<A>(_:)(&v40, &type metadata for String);
  v41 = v13;
  v42 = v14 & 1;
  v43 = v15;
  type metadata accessor for CompactDatePicker(0);
  v16 = sub_100007D50(&qword_10015D8F8);
  Binding.wrappedValue.getter(v16);
  v35 = v1;
  v17 = v3[*(int *)(v1 + 24)];
  sub_10001E24C((uint64_t)v3, type metadata accessor for CompactDatePickerConfiguration);
  if (v17 == 1)
  {
    v18 = sub_100007D50(&qword_100158C40);
    v19 = swift_allocObject(v18, ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72), *(unsigned __int8 *)(v5 + 80) | 7);
    *(_OWORD *)(v19 + 16) = xmmword_100109020;
    static AccessibilityTraits.isSelected.getter(v19);
    v39 = (_QWORD *)v19;
    v20 = sub_100007428(&qword_100158C48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v21 = sub_100007D50(&qword_100158C50);
    v22 = sub_10000F4E0(&qword_100158C58, &qword_100158C50, (uint64_t)&protocol conformance descriptor for [A]);
    v23 = v21;
    v24 = v4;
    v25 = v20;
  }
  else
  {
    v39 = _swiftEmptyArrayStorage;
    v26 = sub_100007428(&qword_100158C48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v27 = sub_100007D50(&qword_100158C50);
    v22 = sub_10000F4E0(&qword_100158C58, &qword_100158C50, (uint64_t)&protocol conformance descriptor for [A]);
    v23 = v27;
    v24 = v4;
    v25 = v26;
  }
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v23, v22, v24, v25);
  View.accessibilityAddTraits(_:)(v7, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100007D90(v40, v41, v42);
  swift_bridgeObjectRelease();
  Binding.wrappedValue.getter(v16);
  v28 = v3[*(int *)(v35 + 24)];
  sub_10001E24C((uint64_t)v3, type metadata accessor for CompactDatePickerConfiguration);
  if (v28 == 1)
  {
    v29 = 0xD00000000000003FLL;
    v30 = 0x8000000100114BC0;
  }
  else
  {
    v30 = 0x8000000100114B80;
    v29 = 0xD00000000000003ELL;
  }
  v31 = LocalizedStringKey.init(stringLiteral:)(v29, v30);
  v32 = (uint64_t)v37;
  ModifiedContent<>.accessibilityHint(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100007F38((uint64_t)v9, &qword_1001582B0);
  return sub_100018EB4(v32, v38, &qword_1001582B0);
}

uint64_t sub_1000A7B38@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t KeyPath;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (**v81)(CGFloat *@<X8>, double@<D0>);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (**v89)(uint64_t *);
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, char *, uint64_t);
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  _QWORD v114[3];
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v153 = a2;
  v3 = type metadata accessor for CompactDatePicker(0);
  v150 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v151 = v4;
  v152 = (uint64_t)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CoordinateSpace(0);
  v147 = *(_QWORD *)(v5 - 8);
  v148 = v5;
  v6 = __chkstk_darwin(v5);
  v146 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GraphicalDatePickerStyle(0, v6);
  v143 = *(_QWORD *)(v8 - 8);
  v144 = v8;
  v9 = __chkstk_darwin(v8);
  v142 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DatePickerComponents(0, v9);
  __chkstk_darwin(v11);
  v126 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v13);
  v122 = (uint64_t)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100007D50(&qword_10015D9F8);
  __chkstk_darwin(v15);
  v118 = (uint64_t *)((char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100007D50(&qword_10015D8F8);
  __chkstk_darwin(v17);
  v117 = (uint64_t *)((char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v123 = sub_100007D50(&qword_10015DA00);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v119 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100007D50(&qword_10015DA08);
  __chkstk_darwin(v124);
  v125 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100007D50(&qword_10015DA10);
  v128 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v127 = (char *)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100007D50(&qword_10015DA18);
  __chkstk_darwin(v120);
  v134 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100007D50(&qword_10015DA20);
  __chkstk_darwin(v130);
  v133 = (uint64_t)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100007D50(&qword_10015DA28);
  __chkstk_darwin(v129);
  v136 = (uint64_t)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100007D50(&qword_10015A728);
  __chkstk_darwin(v132);
  v140 = (uint64_t)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100007D50(&qword_10015A730);
  __chkstk_darwin(v26);
  v139 = (uint64_t)&v115 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100007D50(&qword_10015DA30);
  __chkstk_darwin(v138);
  v145 = (uint64_t)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v137 = (uint64_t)&v115 - v30;
  __chkstk_darwin(v31);
  v141 = (uint64_t)&v115 - v32;
  v33 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v115 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Divider(0);
  v116 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v115 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100007D50(&qword_10015DA38);
  v157 = *(_QWORD *)(v39 - 8);
  v158 = v39;
  __chkstk_darwin(v39);
  v135 = (char *)&v115 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v43 = (char *)&v115 - v42;
  __chkstk_darwin(v44);
  v156 = (char *)&v115 - v45;
  Divider.init()(v46);
  v159 = v3;
  v47 = a1 + *(int *)(v3 + 24);
  v149 = v17;
  v154 = v47;
  Binding.wrappedValue.getter(v17);
  v155 = v33;
  LOBYTE(v3) = v35[*(int *)(v33 + 24)];
  v48 = sub_10001E24C((uint64_t)v35, type metadata accessor for CompactDatePickerConfiguration);
  v49 = static Animation.linear(duration:)(v48, 0.09);
  v50 = v49;
  if ((v3 & 1) == 0)
  {
    v51 = Animation.delay(_:)(v49, 0.21);
    swift_release(v50);
    v50 = v51;
  }
  __chkstk_darwin(v49);
  v114[2] = a1;
  v52 = sub_100007D50(&qword_10015A740);
  v115 = a1;
  v53 = v52;
  v54 = sub_100007428(&qword_10015D7E8, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
  v55 = sub_10001E0A8(&qword_10015DA40, &qword_10015A740, (void (*)(void))sub_1000AC32C);
  View.animation<A>(_:body:)(v50, sub_1000AC324, v114, v36, v53, v54, v55);
  v56 = swift_release(v50);
  (*(void (**)(char *, uint64_t, __n128))(v116 + 8))(v38, v36, v56);
  (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v43, v158);
  v57 = v117;
  v58 = v149;
  Binding.projectedValue.getter(v117, v149);
  KeyPath = swift_getKeyPath(&unk_10010F4A0);
  v60 = v118;
  Binding.subscript.getter(v118, KeyPath, v58);
  swift_release(KeyPath);
  sub_100007F38((uint64_t)v57, &qword_10015D8F8);
  v61 = v115;
  v62 = v122;
  v63 = sub_100007E78(v115 + *(int *)(v159 + 32), v122, &qword_10015D2A0);
  v64 = v126;
  static DatePickerComponents.date.getter(v63);
  v65 = v119;
  DatePicker.init(selection:in:displayedComponents:label:)(v60, v62, v64, nullsub_1, 0, &type metadata for EmptyView, &protocol witness table for EmptyView);
  Binding.wrappedValue.getter(v58);
  LOBYTE(v62) = v35[*(int *)(v155 + 24)];
  sub_10001E24C((uint64_t)v35, type metadata accessor for CompactDatePickerConfiguration);
  v66 = sub_10000F4E0(&qword_10015DA60, &qword_10015DA00, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
  v67 = (uint64_t)v125;
  v68 = v123;
  View.accessibilityHidden(_:isEnabled:)(1, (v62 & 1) == 0, v123, v66);
  v69 = (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v65, v68);
  v70 = v142;
  GraphicalDatePickerStyle.init()(v69);
  v71 = sub_1000AC3B0();
  v72 = sub_100007428(&qword_10015DA70, (uint64_t (*)(uint64_t))&type metadata accessor for GraphicalDatePickerStyle, (uint64_t)&protocol conformance descriptor for GraphicalDatePickerStyle);
  v73 = v127;
  v74 = v144;
  View.datePickerStyle<A>(_:)(v70, v124, v144, v71, v72);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v70, v74);
  sub_100007F38(v67, &qword_10015DA08);
  v76 = v146;
  v75 = v147;
  v77 = v148;
  (*(void (**)(char *, _QWORD, uint64_t))(v147 + 104))(v146, enum case for CoordinateSpace.local(_:), v148);
  v78 = (uint64_t)v134;
  v79 = &v134[*(int *)(v120 + 36)];
  v80 = sub_100007D50(&qword_10015DA78);
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(&v79[*(int *)(v80 + 36)], v76, v77);
  *(_QWORD *)v79 = &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
  v81 = (void (**)(CGFloat *@<X8>, double@<D0>))&v79[*(int *)(v80 + 40)];
  *v81 = sub_1000A8A2C;
  v81[1] = 0;
  v82 = v128;
  v83 = v131;
  (*(void (**)(uint64_t, char *, uint64_t))(v128 + 16))(v78, v73, v131);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v73, v83);
  v84 = v152;
  sub_10001BFB8(v61, v152, type metadata accessor for CompactDatePicker);
  v85 = *(unsigned __int8 *)(v150 + 80);
  v86 = (v85 + 16) & ~v85;
  v87 = swift_allocObject(&unk_10014E070, v86 + v151, v85 | 7);
  sub_1000AC450(v84, v87 + v86);
  v88 = v133;
  sub_100007E78(v78, v133, &qword_10015DA18);
  v89 = (uint64_t (**)(uint64_t *))(v88 + *(int *)(v130 + 36));
  *v89 = sub_1000AC494;
  v89[1] = (uint64_t (*)(uint64_t *))v87;
  sub_100007F38(v78, &qword_10015DA18);
  v90 = *(_QWORD *)(v61 + *(int *)(v159 + 36));
  v91 = v136;
  sub_100007E78(v88, v136, &qword_10015DA20);
  v92 = (_QWORD *)(v91 + *(int *)(v129 + 36));
  *v92 = 0;
  v92[1] = v90;
  sub_100007F38(v88, &qword_10015DA20);
  Binding.wrappedValue.getter(v58);
  v93 = v155;
  LODWORD(v73) = v35[*(int *)(v155 + 24)];
  sub_10001E24C((uint64_t)v35, type metadata accessor for CompactDatePickerConfiguration);
  if ((_DWORD)v73)
    v94 = 1.0;
  else
    v94 = 0.5;
  v95 = v140;
  sub_100007E78(v91, v140, &qword_10015DA28);
  *(double *)(v95 + *(int *)(v132 + 36)) = v94;
  sub_100007F38(v91, &qword_10015DA28);
  Binding.wrappedValue.getter(v58);
  v96 = v35[*(int *)(v93 + 24)];
  v97 = sub_10001E24C((uint64_t)v35, type metadata accessor for CompactDatePickerConfiguration);
  if (v96)
    v98 = INFINITY;
  else
    v98 = 0.0;
  v99 = static Alignment.center.getter(v97);
  v100 = v139;
  sub_100043EC4(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v139, 0.0, 1, v98, 0, v99, v101);
  sub_100007F38(v95, &qword_10015A728);
  v102 = v137;
  sub_100007E78(v100, v137, &qword_10015A730);
  *(_WORD *)(v102 + *(int *)(v138 + 36)) = 0;
  sub_100007F38(v100, &qword_10015A730);
  v103 = v141;
  sub_100018EB4(v102, v141, &qword_10015DA30);
  v105 = v156;
  v104 = v157;
  v106 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
  v107 = v135;
  v108 = v158;
  v106(v135, v156, v158);
  v109 = v145;
  sub_100007E78(v103, v145, &qword_10015DA30);
  v110 = v153;
  v106(v153, v107, v108);
  v111 = sub_100007D50(&qword_10015DA80);
  sub_100007E78(v109, (uint64_t)&v110[*(int *)(v111 + 48)], &qword_10015DA30);
  sub_100007F38(v103, &qword_10015DA30);
  v112 = *(void (**)(char *, uint64_t))(v104 + 8);
  v112(v105, v108);
  sub_100007F38(v109, &qword_10015DA30);
  return ((uint64_t (*)(char *, uint64_t))v112)(v107, v108);
}

uint64_t sub_1000A880C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v3 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015A738);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015A740);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompactDatePicker(0);
  v12 = sub_100007D50(&qword_10015D8F8);
  Binding.wrappedValue.getter(v12);
  v13 = v5[*(int *)(v3 + 24)];
  sub_10001E24C((uint64_t)v5, type metadata accessor for CompactDatePickerConfiguration);
  if (v13)
    v14 = 1.0;
  else
    v14 = 0.0;
  v15 = sub_100007D50(&qword_10015DA58);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, a1, v15);
  *(double *)&v8[*(int *)(v6 + 36)] = v14;
  Binding.wrappedValue.getter(v12);
  v16 = v5[*(int *)(v3 + 24)];
  v17 = sub_10001E24C((uint64_t)v5, type metadata accessor for CompactDatePickerConfiguration);
  if (v16)
    v18 = INFINITY;
  else
    v18 = 0.0;
  v19 = static Alignment.center.getter(v17);
  sub_100043F1C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v11, 0.0, 1, v18, 0, v19, v20);
  sub_100007F38((uint64_t)v8, &qword_10015A738);
  return sub_100018EB4((uint64_t)v11, v23, &qword_10015A740);
}

void sub_1000A8A2C(CGFloat *a1@<X8>, double a2@<D0>)
{
  *a1 = CGRectGetHeight(*(CGRect *)&a2);
}

uint64_t sub_1000A8A50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = *a1;
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for CompactDatePicker(0) + 28));
  v4 = v3[1];
  v5 = v3[2];
  v8[1] = *v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[0] = v2;
  v6 = sub_100007D50(&qword_10015C490);
  return Binding.wrappedValue.setter(v8, v6);
}

uint64_t sub_1000A8AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100007D50(&qword_10015D9C0);
  return sub_1000A6A98(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_1000A8B04@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  __n128 v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _BYTE *v84;
  uint64_t v85;

  v85 = a1;
  v82 = type metadata accessor for RoundedRectangle(0);
  v2 = __chkstk_darwin(v82);
  v83 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for ButtonStyleConfiguration.Label(0, v2);
  v4 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100007D50(&qword_10015DB60);
  __chkstk_darwin(v71);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100007D50(&qword_10015DB68);
  __chkstk_darwin(v72);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100007D50(&qword_10015DB70);
  __chkstk_darwin(v73);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100007D50(&qword_10015DB78);
  __chkstk_darwin(v77);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100007D50(&qword_10015DB80);
  __chkstk_darwin(v78);
  v74 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100007D50(&qword_10015DB88);
  __chkstk_darwin(v79);
  v76 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100007D50(&qword_10015DB90);
  v17 = __chkstk_darwin(v80);
  v81 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = ButtonStyleConfiguration.label.getter(v17);
  v84 = v1;
  if (*v1 == 1)
    v20 = static Color.blue.getter(v19);
  else
    v20 = static Color.primary.getter(v19);
  v21 = v20;
  KeyPath = swift_getKeyPath(&unk_10010F268);
  v23 = v75;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v75);
  v24 = (uint64_t *)&v8[*(int *)(v71 + 36)];
  *v24 = KeyPath;
  v24[1] = v21;
  v25 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v23);
  if ((ButtonStyleConfiguration.isPressed.getter(v25) & 1) != 0)
    v26 = 0.3;
  else
    v26 = 1.0;
  sub_100007E78((uint64_t)v8, (uint64_t)v10, &qword_10015DB60);
  *(double *)&v10[*(int *)(v72 + 36)] = v26;
  v27 = sub_100007F38((uint64_t)v8, &qword_10015DB60);
  v28 = static Edge.Set.horizontal.getter(v27);
  v29 = EdgeInsets.init(_all:)(20.0);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100007E78((uint64_t)v10, (uint64_t)v12, &qword_10015DB68);
  v36 = &v12[*(int *)(v73 + 36)];
  *v36 = v28;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  v37 = sub_100007F38((uint64_t)v10, &qword_10015DB68);
  v38 = static Edge.Set.vertical.getter(v37);
  v39 = EdgeInsets.init(_all:)(8.0);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  sub_100007E78((uint64_t)v12, (uint64_t)v14, &qword_10015DB70);
  v46 = &v14[*(int *)(v77 + 36)];
  *v46 = v38;
  *((double *)v46 + 1) = v39;
  *((_QWORD *)v46 + 2) = v41;
  *((_QWORD *)v46 + 3) = v43;
  *((_QWORD *)v46 + 4) = v45;
  v46[40] = 0;
  sub_100007F38((uint64_t)v12, &qword_10015DB70);
  if (qword_1001580B8 != -1)
    swift_once(&qword_1001580B8, sub_100051460);
  v47 = qword_10016A4D0;
  swift_retain(qword_10016A4D0);
  v49 = static Edge.Set.all.getter(v48);
  v50 = v74;
  sub_100007E78((uint64_t)v14, v74, &qword_10015DB78);
  v51 = v50 + *(int *)(v78 + 36);
  *(_QWORD *)v51 = v47;
  *(_BYTE *)(v51 + 8) = v49;
  sub_100007F38((uint64_t)v14, &qword_10015DB78);
  v52 = v83;
  v53 = &v83[*(int *)(v82 + 20)];
  v54 = enum case for RoundedCornerStyle.continuous(_:);
  v55 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v53, v54, v55);
  __asm { FMOV            V0.2D, #7.0 }
  *v52 = _Q0;
  v61 = (uint64_t)v76;
  v62 = (uint64_t)&v76[*(int *)(v79 + 36)];
  sub_10001BFB8((uint64_t)v52, v62, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v62 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78(v50, v61, &qword_10015DB80);
  sub_10001E24C((uint64_t)v52, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100007F38(v50, &qword_10015DB80);
  v63 = type metadata accessor for DatePickerButtonStyle(0);
  v64 = v84;
  v65.n128_u64[0] = *(_QWORD *)&v84[*(int *)(v63 + 24)];
  v66 = static Animation.easeInOut(duration:)(v65);
  v67 = &v64[*(int *)(v63 + 20)];
  LOBYTE(v64) = v67[*(int *)(type metadata accessor for CompactDatePickerConfiguration(0) + 24)];
  v68 = v81;
  sub_100007E78(v61, v81, &qword_10015DB88);
  v69 = v68 + *(int *)(v80 + 36);
  *(_QWORD *)v69 = v66;
  *(_BYTE *)(v69 + 8) = (_BYTE)v64;
  sub_100007F38(v61, &qword_10015DB88);
  return sub_100018EB4(v68, v85, &qword_10015DB90);
}

void sub_1000A90BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010F178;
  sub_10005EC20(319, (unint64_t *)&qword_100158FE8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005EC20(319, (unint64_t *)&qword_100159888, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_10010F190;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

unint64_t sub_1000A9184(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10002BE30(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a3[9];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    v13 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v12;
      *v11 = *v12;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v18 = a3[10];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    v21 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v20;
      *v19 = *v20;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
    v25 = a3[11];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v16 = *v27;
    v28 = v27[1];
    *v26 = v16;
    v26[1] = v28;
  }
  swift_retain(v16);
  return a1;
}

double sub_1000A9304(uint64_t *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  sub_1000189BC(*a1, a1[1]);
  v4 = (uint64_t *)((char *)a1 + a2[9]);
  v5 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (uint64_t *)((char *)a1 + a2[10]);
  v8 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  *(_QWORD *)&result = swift_release(*(uint64_t *)((char *)a1 + a2[11])).n128_u64[0];
  return result;
}

uint64_t sub_1000A93E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a3[9];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = a3[10];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = a3[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  *v24 = v26;
  v24[1] = v27;
  swift_retain(v26);
  return a1;
}

uint64_t sub_1000A953C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_1000189BC(v9, v10);
  if (a1 != a2)
  {
    v11 = a3[9];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_100007F38(a1 + v11, &qword_100158AC0);
    v14 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = a3[10];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    sub_100007F38(a1 + v18, qword_100158AC8);
    v21 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v20;
      *v19 = *v20;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
  }
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = *(_QWORD *)(a1 + v25);
  v29 = *v27;
  *(_QWORD *)(a1 + v25) = *v27;
  swift_retain(v29);
  swift_release(v28);
  *(_QWORD *)(v26 + 8) = v27[1];
  return a1;
}

uint64_t sub_1000A96DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[10];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1000A9820(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000189BC(v7, v8);
  if (a1 != a2)
  {
    v9 = a3[9];
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    sub_100007F38(a1 + v9, &qword_100158AC0);
    v12 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v14 = a3[10];
    v15 = (void *)(a1 + v14);
    v16 = (const void *)(a2 + v14);
    sub_100007F38(a1 + v14, qword_100158AC8);
    v17 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = (_QWORD *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *v21;
  swift_release(v22);
  *(_QWORD *)(v20 + 8) = v21[1];
  return a1;
}

uint64_t sub_1000A99B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A99C0);
}

uint64_t sub_1000A99C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v6 = sub_100007D50(qword_100158F60);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100007D50(&qword_100158670);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[11]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_1000A9A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A9A84);
}

uint64_t sub_1000A9A84(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100007D50(qword_100158F60);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100007D50(&qword_100158670);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11]) = a2;
  return result;
}

uint64_t sub_1000A9B2C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118B58, 1);
}

uint64_t sub_1000A9B60@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10009F01C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000A9B6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A00C8(v1[4], v1[2], v1[3], a1);
}

void sub_1000A9B7C()
{
  sub_1000A9B9C((void (*)(void))sub_1000D655C, 1702125924, 0xE400000000000000, 2);
}

void sub_1000A9B9C(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a4;
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v9, v10, a4) - 8) + 80);
  sub_1000A64D8(v4 + ((v11 + 32) & ~v11), v9, v10, a1, a2, a3, v5);
}

uint64_t sub_1000A9C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A5E74(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000A9C2C()
{
  unint64_t result;

  result = qword_10015D738;
  if (!qword_10015D738)
  {
    result = swift_getWitnessTable(&unk_10010F454, &type metadata for FilterViewSafeAreaPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015D738);
  }
  return result;
}

double sub_1000A9C74(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v6, v7, a4) - 8) + 80);
  return sub_1000A65E0(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_1000A9CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A9CDC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A664C, a2, a3, a4);
}

uint64_t sub_1000A9CDC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1000A9D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A9CDC((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000A66FC, a2, a3, a4);
}

uint64_t sub_1000A9D4C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000A60C0(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000A9D58@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000A62A8(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_1000A9D64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D758;
  if (!qword_10015D758)
  {
    v1 = sub_100007D00(&qword_10015D750);
    sub_10000F4E0(&qword_10015B358, &qword_100158648, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000F4E0(&qword_100159538, &qword_100159540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D758);
  }
  return result;
}

void sub_1000A9E04()
{
  sub_1000A9B9C((void (*)(void))sub_1000D66D0, 18, 0, 3);
}

uint64_t sub_1000A9E24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000A9E34(_BYTE *a1)
{
  uint64_t v1;

  return sub_10002749C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_1000A9E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A9CDC(sub_1000A6200, a2, a3, a4);
}

uint64_t sub_1000A9E4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A1674(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000A9E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A9CDC(sub_1000A5A80, a2, a3, a4);
}

double sub_1000A9E68@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000A5BF0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_1000A9E74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7A0;
  if (!qword_10015D7A0)
  {
    v1 = sub_100007D00(&qword_10015D798);
    sub_1000AA2F4((unint64_t *)&qword_10015CCA8, &qword_10015CCA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7A0);
  }
  return result;
}

uint64_t sub_1000A9EF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000A9F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7A8;
  if (!qword_10015D7A8)
  {
    v1 = sub_100007D00(&qword_10015D790);
    sub_10001E0A8(&qword_10015D7B0, &qword_10015D788, (void (*)(void))sub_1000A9F94);
    sub_10004FD6C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7A8);
  }
  return result;
}

uint64_t sub_1000A9F94()
{
  return sub_10001E0A8(&qword_10015D7B8, &qword_10015D780, (void (*)(void))sub_1000A9FB8);
}

unint64_t sub_1000A9FB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7C0;
  if (!qword_10015D7C0)
  {
    v1 = sub_100007D00(&qword_10015D778);
    sub_1000AA03C();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7C0);
  }
  return result;
}

unint64_t sub_1000AA03C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7C8;
  if (!qword_10015D7C8)
  {
    v1 = sub_100007D00(&qword_10015D770);
    sub_1000AA0C0();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7C8);
  }
  return result;
}

unint64_t sub_1000AA0C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7D0;
  if (!qword_10015D7D0)
  {
    v1 = sub_100007D00(&qword_10015D768);
    sub_10000F4E0(&qword_10015D7D8, &qword_10015D760, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000F4E0(&qword_100159538, &qword_100159540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7D0);
  }
  return result;
}

unint64_t sub_1000AA15C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7E0;
  if (!qword_10015D7E0)
  {
    v1 = sub_100007D00(&qword_100158C80);
    sub_100007428(&qword_10015D7E8, (uint64_t (*)(uint64_t))&type metadata accessor for Divider, (uint64_t)&protocol conformance descriptor for Divider);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7E0);
  }
  return result;
}

unint64_t sub_1000AA1E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D7F0;
  if (!qword_10015D7F0)
  {
    v1 = sub_100007D00(&qword_10015D700);
    sub_1000A9F08();
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D7F0);
  }
  return result;
}

uint64_t sub_1000AA264@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A1AC8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000AA270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D818;
  if (!qword_10015D818)
  {
    v1 = sub_100007D00(&qword_10015D820);
    sub_1000AA2F4(&qword_10015D828, &qword_10015D830);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D818);
  }
  return result;
}

uint64_t sub_1000AA2F4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007D00(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AA350(uint64_t a1)
{
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000AA38C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A2BF0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000AA398()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015D840;
  if (!qword_10015D840)
  {
    v1 = sub_100007D00(&qword_10015D7F8);
    v2[0] = sub_100007D00(&qword_10015D848);
    v2[1] = sub_1000AA444();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D840);
  }
  return result;
}

unint64_t sub_1000AA444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D850;
  if (!qword_10015D850)
  {
    v1 = sub_100007D00(&qword_10015D848);
    sub_1000AA4C8();
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D850);
  }
  return result;
}

unint64_t sub_1000AA4C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D858;
  if (!qword_10015D858)
  {
    v1 = sub_100007D00(&qword_10015D860);
    sub_1000AA2F4((unint64_t *)&qword_10015CCA8, &qword_10015CCA0);
    sub_10000F4E0(&qword_100158618, &qword_100158620, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D858);
  }
  return result;
}

unint64_t sub_1000AA564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D868;
  if (!qword_10015D868)
  {
    v1 = sub_100007D00(&qword_10015D838);
    sub_10000F4E0(&qword_10015D870, &qword_10015D878, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D868);
  }
  return result;
}

unint64_t sub_1000AA5E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D880;
  if (!qword_10015D880)
  {
    v1 = sub_100007D00(&qword_10015D6E8);
    sub_10001E0A8(&qword_10015D810, &qword_10015D808, (void (*)(void))sub_1000AA270);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D880);
  }
  return result;
}

unint64_t sub_1000AA68C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015D890;
  if (!qword_10015D890)
  {
    v1 = sub_100007D00(&qword_10015D800);
    sub_1000AA398();
    sub_1000AA564();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10015D890);
  }
  return result;
}

uint64_t sub_1000AA704@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A3DD4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000AA710@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000A41F8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000AA720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (int *)type metadata accessor for FilterView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v4 + v8;
  sub_1000189BC(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8));
  v11 = (_QWORD *)(v4 + v8 + v5[9]);
  v12 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v10 + v5[10]);
  v15 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  swift_release(*(_QWORD *)(v10 + v5[11]));
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_1000AA844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FilterView(0, v6, v7, a2) - 8) + 80);
  return sub_1000A463C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_1000AA8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for FilterView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v25 = *(_QWORD *)(v8 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v5, &unk_10011790C, &unk_10011799C);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = v4 + v10;
  sub_1000189BC(*(_QWORD *)(v4 + v10), *(_QWORD *)(v4 + v10 + 8));
  v16 = (_QWORD *)(v4 + v10 + v7[9]);
  v17 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (_QWORD *)(v15 + v7[10]);
  v20 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*v19);
  }
  v22 = (v10 + v25 + v13) & ~v13;
  v23 = swift_release(*(_QWORD *)(v15 + v7[11]));
  (*(void (**)(uint64_t, uint64_t, __n128))(v12 + 8))(v4 + v22, AssociatedTypeWitness, v23);
  return swift_deallocObject(v4, v22 + v14, v9 | v13 | 7);
}

void sub_1000AAA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for FilterView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, v6, v5, &unk_10011790C, &unk_10011799C) - 8)
                           + 80);
  sub_1000A4C4C(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_1000AAAD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A4D54(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1000AAAE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A4F88(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t type metadata accessor for CompactDatePicker(uint64_t a1)
{
  return sub_100025D84(a1, (uint64_t *)&unk_10015D960, (uint64_t)&nominal type descriptor for CompactDatePicker);
}

uint64_t sub_1000AAB18()
{
  return 16;
}

__n128 sub_1000AAB24(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000AAB38()
{
  return 16;
}

__n128 sub_1000AAB44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000AAB50(double *a1@<X8>)
{
  *a1 = sub_1000D52E0();
}

uint64_t sub_1000AAB78(double *a1)
{
  return sub_1000D52F4(*a1);
}

uint64_t sub_1000AAB9C()
{
  return 16;
}

__n128 sub_1000AABA8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000AABB4(double *a1@<X8>)
{
  *a1 = sub_1000D5578();
}

uint64_t sub_1000AABDC(double *a1)
{
  return sub_1000D558C(*a1);
}

uint64_t sub_1000AAC00()
{
  return 16;
}

__n128 sub_1000AAC0C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for FilterViewSafeAreaPreferenceKey()
{
  return &type metadata for FilterViewSafeAreaPreferenceKey;
}

_QWORD *sub_1000AAC28(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  void (*v59)(char *, char *, uint64_t, __n128);
  uint64_t v60;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    a1[1] = v7;
    swift_retain(v5);
    swift_retain(v7);
    v60 = sub_100007D50(&qword_10015D8F8);
    v8 = *(int *)(v60 + 32);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *v9 = *(_QWORD *)((char *)a2 + v8);
    v9[1] = v11;
    v12 = type metadata accessor for CompactDatePickerConfiguration(0);
    v13 = *(int *)(v12 + 20);
    v14 = (char *)v9 + v13;
    v15 = &v10[v13];
    v16 = type metadata accessor for Date(0);
    v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
    v59 = v17;
    v18 = swift_bridgeObjectRetain(v11);
    v17(v14, v15, v16, v18);
    *((_BYTE *)v9 + *(int *)(v12 + 24)) = v10[*(int *)(v12 + 24)];
    v19 = a3[5];
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    *v20 = *v21;
    v20[1] = v23;
    v24 = *(int *)(v60 + 32);
    v25 = (uint64_t *)((char *)v20 + v24);
    v26 = (char *)v21 + v24;
    v27 = *(uint64_t *)((char *)v21 + v24 + 8);
    *v25 = *(uint64_t *)((char *)v21 + v24);
    v25[1] = v27;
    v28 = *(int *)(v12 + 20);
    v29 = (char *)v20 + v24 + v28;
    v30 = &v26[v28];
    swift_retain(v22);
    swift_retain(v23);
    v31 = swift_bridgeObjectRetain(v27);
    v59(v29, v30, v16, v31);
    *((_BYTE *)v25 + *(int *)(v12 + 24)) = v26[*(int *)(v12 + 24)];
    v32 = a3[6];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = *v34;
    v36 = v34[1];
    *v33 = *v34;
    v33[1] = v36;
    v37 = *(int *)(v60 + 32);
    v38 = (uint64_t *)((char *)v33 + v37);
    v39 = (char *)v34 + v37;
    v40 = *(uint64_t *)((char *)v34 + v37 + 8);
    *v38 = *(uint64_t *)((char *)v34 + v37);
    v38[1] = v40;
    v41 = *(int *)(v12 + 20);
    v42 = (char *)v33 + v37 + v41;
    v43 = &v39[v41];
    swift_retain(v35);
    swift_retain(v36);
    v44 = swift_bridgeObjectRetain(v40);
    v59(v42, v43, v16, v44);
    *((_BYTE *)v38 + *(int *)(v12 + 24)) = v39[*(int *)(v12 + 24)];
    v45 = a3[7];
    v46 = a3[8];
    v47 = (_QWORD *)((char *)a1 + v45);
    v48 = (_QWORD *)((char *)a2 + v45);
    v50 = v48[1];
    v49 = v48[2];
    v47[1] = v50;
    v47[2] = v49;
    v51 = *v48;
    *v47 = *v48;
    v52 = (char *)a1 + v46;
    v53 = (char *)a2 + v46;
    swift_retain(v51);
    v54 = swift_retain(v50);
    v59(v52, v53, v16, v54);
    v55 = sub_100007D50(&qword_10015D2A0);
    ((void (*)(char *, char *, uint64_t))v59)(&v52[*(int *)(v55 + 36)], &v53[*(int *)(v55 + 36)], v16);
    v56 = a3[10];
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)a1 + v56) = *((_BYTE *)a2 + v56);
  }
  return a1;
}

uint64_t sub_1000AAE80(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  __n128 v14;
  char *v15;
  char *v16;
  void (*v18)(char *, uint64_t);

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = sub_100007D50(&qword_10015D8F8);
  v5 = (char *)a1 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for CompactDatePickerConfiguration(0);
  v7 = &v5[*(int *)(v6 + 20)];
  v8 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v18(v7, v8);
  v9 = (_QWORD *)((char *)a1 + a2[5]);
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (char *)v9 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v18(&v10[*(int *)(v6 + 20)], v8);
  v11 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = (char *)v11 + *(int *)(v4 + 32);
  swift_bridgeObjectRelease();
  v18(&v12[*(int *)(v6 + 20)], v8);
  v13 = (_QWORD *)((char *)a1 + a2[7]);
  swift_release(*v13);
  v14 = swift_release(v13[1]);
  v15 = (char *)a1 + a2[8];
  ((void (*)(char *, uint64_t, __n128))v18)(v15, v8, v14);
  v16 = &v15[*(int *)(sub_100007D50(&qword_10015D2A0) + 36)];
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, v8);
}

_QWORD *sub_1000AAFE8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t, __n128);

  v5 = *a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain(v5);
  swift_retain(v6);
  v57 = sub_100007D50(&qword_10015D8F8);
  v7 = *(int *)(v57 + 32);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = *(_QWORD *)((char *)a2 + v7 + 8);
  *v8 = *(_QWORD *)((char *)a2 + v7);
  v8[1] = v10;
  v11 = type metadata accessor for CompactDatePickerConfiguration(0);
  v12 = *(int *)(v11 + 20);
  v13 = (char *)v8 + v12;
  v14 = &v9[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
  v58 = v16;
  v17 = swift_bridgeObjectRetain(v10);
  v16(v13, v14, v15, v17);
  *((_BYTE *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
  v18 = a3[5];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  *v19 = *v20;
  v19[1] = v22;
  v23 = *(int *)(v57 + 32);
  v24 = (uint64_t *)((char *)v19 + v23);
  v25 = (char *)v20 + v23;
  v26 = *(uint64_t *)((char *)v20 + v23 + 8);
  *v24 = *(uint64_t *)((char *)v20 + v23);
  v24[1] = v26;
  v27 = *(int *)(v11 + 20);
  v28 = (char *)v19 + v23 + v27;
  v29 = &v25[v27];
  swift_retain(v21);
  swift_retain(v22);
  v30 = swift_bridgeObjectRetain(v26);
  v58(v28, v29, v15, v30);
  *((_BYTE *)v24 + *(int *)(v11 + 24)) = v25[*(int *)(v11 + 24)];
  v31 = a3[6];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = *v33;
  v35 = v33[1];
  *v32 = *v33;
  v32[1] = v35;
  v36 = *(int *)(v57 + 32);
  v37 = (uint64_t *)((char *)v32 + v36);
  v38 = (char *)v33 + v36;
  v39 = *(uint64_t *)((char *)v33 + v36 + 8);
  *v37 = *(uint64_t *)((char *)v33 + v36);
  v37[1] = v39;
  v40 = *(int *)(v11 + 20);
  v41 = (char *)v32 + v36 + v40;
  v42 = &v38[v40];
  swift_retain(v34);
  swift_retain(v35);
  v43 = swift_bridgeObjectRetain(v39);
  v58(v41, v42, v15, v43);
  *((_BYTE *)v37 + *(int *)(v11 + 24)) = v38[*(int *)(v11 + 24)];
  v44 = a3[7];
  v45 = a3[8];
  v46 = (_QWORD *)((char *)a1 + v44);
  v47 = (_QWORD *)((char *)a2 + v44);
  v49 = v47[1];
  v48 = v47[2];
  v46[1] = v49;
  v46[2] = v48;
  v50 = *v47;
  *v46 = *v47;
  v51 = (char *)a1 + v45;
  v52 = (char *)a2 + v45;
  swift_retain(v50);
  v53 = swift_retain(v49);
  v58(v51, v52, v15, v53);
  v54 = sub_100007D50(&qword_10015D2A0);
  ((void (*)(char *, char *, uint64_t))v58)(&v51[*(int *)(v54 + 36)], &v52[*(int *)(v54 + 36)], v15);
  v55 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + v55) = *((_BYTE *)a2 + v55);
  return a1;
}

char *sub_1000AB218(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain(v6);
  swift_release(v5);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v7;
  swift_retain(v7);
  swift_release(v8);
  v9 = sub_100007D50(&qword_10015D8F8);
  v10 = *(int *)(v9 + 32);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)&a2[v10];
  v13 = *(_QWORD *)&a2[v10 + 8];
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for CompactDatePickerConfiguration(0);
  v15 = *(int *)(v14 + 20);
  v16 = &v11[v15];
  v17 = &v12[v15];
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24);
  v19(v16, v17, v18);
  v11[*(int *)(v14 + 24)] = v12[*(int *)(v14 + 24)];
  v20 = a3[5];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)&a1[v20];
  v24 = *(_QWORD *)&a2[v20];
  *(_QWORD *)&a1[v20] = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = *((_QWORD *)v22 + 1);
  v26 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v21 + 1) = v25;
  swift_retain(v25);
  swift_release(v26);
  v27 = *(int *)(v9 + 32);
  v28 = &v21[v27];
  v29 = &v22[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  v19(&v28[*(int *)(v14 + 20)], &v29[*(int *)(v14 + 20)], v18);
  v28[*(int *)(v14 + 24)] = v29[*(int *)(v14 + 24)];
  v31 = a3[6];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *(_QWORD *)&a1[v31];
  v35 = *(_QWORD *)&a2[v31];
  *(_QWORD *)&a1[v31] = v35;
  swift_retain(v35);
  swift_release(v34);
  v36 = *((_QWORD *)v33 + 1);
  v37 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = *(int *)(v9 + 32);
  v39 = &v32[v38];
  v40 = &v33[v38];
  *(_QWORD *)v39 = *(_QWORD *)&v33[v38];
  v41 = *(_QWORD *)&v33[v38 + 8];
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  v19(&v39[*(int *)(v14 + 20)], &v40[*(int *)(v14 + 20)], v18);
  v39[*(int *)(v14 + 24)] = v40[*(int *)(v14 + 24)];
  v42 = a3[7];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = *(_QWORD *)&a1[v42];
  v46 = *(_QWORD *)&a2[v42];
  *(_QWORD *)&a1[v42] = v46;
  swift_retain(v46);
  swift_release(v45);
  v47 = *((_QWORD *)v44 + 1);
  v48 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v47;
  swift_retain(v47);
  swift_release(v48);
  *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
  v49 = a3[8];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v19(&a1[v49], &a2[v49], v18);
  v52 = sub_100007D50(&qword_10015D2A0);
  v19(&v50[*(int *)(v52 + 36)], &v51[*(int *)(v52 + 36)], v18);
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_1000AB4C8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v39 = sub_100007D50(&qword_10015D8F8);
  v7 = *(int *)(v39 + 32);
  v8 = &a1[v7];
  v9 = &a2[v7];
  *(_OWORD *)&a1[v7] = *(_OWORD *)&a2[v7];
  v10 = type metadata accessor for CompactDatePickerConfiguration(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
  v16 = a3[5];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  v20 = *(int *)(v39 + 32);
  v21 = &v17[v20];
  v22 = &v18[v20];
  *(_OWORD *)&v17[v20] = *(_OWORD *)&v18[v20];
  v15(&v17[v20 + *(int *)(v10 + 20)], &v18[v20 + *(int *)(v10 + 20)], v14);
  v21[*(int *)(v10 + 24)] = v22[*(int *)(v10 + 24)];
  v23 = a3[6];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = *(int *)(v39 + 32);
  v28 = &v24[v27];
  v29 = &v25[v27];
  *(_OWORD *)&v24[v27] = *(_OWORD *)&v25[v27];
  v15(&v24[v27 + *(int *)(v10 + 20)], &v25[v27 + *(int *)(v10 + 20)], v14);
  v28[*(int *)(v10 + 24)] = v29[*(int *)(v10 + 24)];
  v30 = a3[7];
  v31 = a3[8];
  v32 = &a1[v30];
  v33 = &a2[v30];
  *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v34 = &a1[v31];
  v35 = &a2[v31];
  v15(&a1[v31], &a2[v31], v14);
  v36 = sub_100007D50(&qword_10015D2A0);
  v15(&v34[*(int *)(v36 + 36)], &v35[*(int *)(v36 + 36)], v14);
  v37 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v37] = a2[v37];
  return a1;
}

char *sub_1000AB688(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release(v5);
  v6 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_release(v6);
  v7 = sub_100007D50(&qword_10015D8F8);
  v8 = *(int *)(v7 + 32);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for CompactDatePickerConfiguration(0);
  v13 = *(int *)(v12 + 20);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  v9[*(int *)(v12 + 24)] = v10[*(int *)(v12 + 24)];
  v18 = a3[5];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  swift_release(v21);
  v22 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_release(v22);
  v23 = *(int *)(v7 + 32);
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  v17(&v24[*(int *)(v12 + 20)], &v25[*(int *)(v12 + 20)], v16);
  v24[*(int *)(v12 + 24)] = v25[*(int *)(v12 + 24)];
  v27 = a3[6];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *(_QWORD *)&a1[v27];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  swift_release(v30);
  v31 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  swift_release(v31);
  v32 = *(int *)(v7 + 32);
  v33 = &v28[v32];
  v34 = &v29[v32];
  v35 = *(_QWORD *)&v29[v32 + 8];
  *(_QWORD *)v33 = *(_QWORD *)&v29[v32];
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v17(&v33[*(int *)(v12 + 20)], &v34[*(int *)(v12 + 20)], v16);
  v33[*(int *)(v12 + 24)] = v34[*(int *)(v12 + 24)];
  v36 = a3[7];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *(_QWORD *)&a1[v36];
  *(_QWORD *)&a1[v36] = *(_QWORD *)&a2[v36];
  swift_release(v39);
  v40 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_release(v40);
  *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
  v41 = a3[8];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v17(&a1[v41], &a2[v41], v16);
  v44 = sub_100007D50(&qword_10015D2A0);
  v17(&v42[*(int *)(v44 + 36)], &v43[*(int *)(v44 + 36)], v16);
  v45 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v45] = a2[v45];
  return a1;
}

uint64_t sub_1000AB8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AB8D0);
}

uint64_t sub_1000AB8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100007D50(&qword_10015D8F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100007D50(&qword_10015D2A0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000AB984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AB990);
}

uint64_t sub_1000AB990(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100007D50(&qword_10015D8F8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_100007D50(&qword_10015D2A0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000ABA40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_10005EC20(319, &qword_10015D970, type metadata accessor for CompactDatePickerConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = v6[0];
    v6[3] = &unk_10010F3B8;
    sub_1000ABB00(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[6] = &unk_10010F3D0;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_1000ABB00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_10015D978)
  {
    v2 = type metadata accessor for Date(255);
    v3 = sub_100007428(&qword_10015D298, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v4 = type metadata accessor for ClosedRange(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10015D978);
  }
}

uint64_t sub_1000ABB78(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata3;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t TupleTypeMetadata;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v2 = *a1;
  v3 = a1[1];
  v70 = type metadata accessor for NavigationPath(255, a2);
  v76 = sub_100007D00(&qword_100158C80);
  v4 = sub_100007D00(&qword_10015D6E8);
  v69 = sub_100007D00(&qword_10015D6F0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v2, &unk_10011790C, &unk_10011799C);
  v6 = type metadata accessor for Array(255, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v8 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  v9 = swift_getAssociatedTypeWitness(255, v8, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v10 = sub_100007D00(&qword_10015D6F8);
  v11 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v11);
  v12 = type metadata accessor for _AnimationModifier(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v10, v12);
  v14 = type metadata accessor for ModifiedContent(255, &type metadata for Text, v12);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for ZStack(255, v17, WitnessTable);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v19);
  v21 = type metadata accessor for Button(255, v19, v20);
  v22 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v71 = v6;
  v72 = v9;
  v73 = v23;
  v74 = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v75 = swift_getAssociatedConformanceWitness(v8, AssociatedTypeWitness, v9, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v24 = type metadata accessor for ForEach(255, &v71);
  swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v21);
  sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v24);
  v26 = type metadata accessor for LazyVGrid(255, v24, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v26);
  v28 = type metadata accessor for ScrollView(255, v26, v27);
  v29 = type metadata accessor for ModifiedContent(255, v28, &type metadata for _PaddingLayout);
  v30 = swift_getTupleTypeMetadata2(255, v4, v29, 0, 0);
  type metadata accessor for TupleView(255, v30);
  v31 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v4, v69, v31, 0, 0);
  v33 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v33);
  v35 = type metadata accessor for VStack(255, v33, v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v35);
  v37 = type metadata accessor for ScrollView(255, v35, v36);
  v38 = type metadata accessor for ModifiedContent(255, v37, &type metadata for PaddingModifier);
  v39 = type metadata accessor for ModifiedContent(255, v38, &type metadata for _PaddingLayout);
  v40 = sub_100007D00(&qword_100158630);
  v77 = type metadata accessor for ModifiedContent(255, v39, v40);
  v78 = type metadata accessor for Divider(255);
  v79 = sub_100007D00(&qword_10015D700);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 4);
  v42 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  v44 = type metadata accessor for VStack(255, v42, v43);
  v45 = type metadata accessor for ModifiedContent(255, v44, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v46 = type metadata accessor for CompactDatePickerConfiguration(255);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v44);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v45);
  v48 = sub_100007428(&qword_10015D280, type metadata accessor for CompactDatePickerConfiguration, (uint64_t)&unk_10010ED10);
  v71 = v45;
  v72 = v46;
  v73 = v47;
  v74 = v48;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v71 = v45;
  v72 = v46;
  v73 = v47;
  v74 = v48;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v71 = OpaqueTypeMetadata2;
  v72 = v46;
  v73 = OpaqueTypeConformance2;
  v74 = v48;
  v51 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v71 = OpaqueTypeMetadata2;
  v72 = v46;
  v73 = OpaqueTypeConformance2;
  v74 = v48;
  v52 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v71 = v51;
  v72 = v52;
  v53 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v71 = v51;
  v72 = v52;
  v54 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v71 = v53;
  v72 = v54;
  v55 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 0);
  v56 = sub_100007D00(&qword_10015D708);
  v71 = v53;
  v72 = v54;
  v57 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:)>>, 1);
  v58 = sub_10000F4E0(&qword_10015D710, &qword_10015D708, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v71 = v55;
  v72 = v56;
  v73 = v57;
  v74 = v58;
  v59 = swift_getOpaqueTypeMetadata2(255, &v71, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v60 = sub_100007D00(&qword_10015D718);
  v61 = type metadata accessor for ModifiedContent(255, v59, v60);
  v62 = sub_100007D00(&qword_10015D720);
  v63 = type metadata accessor for ModifiedContent(255, v61, v62);
  v64 = type metadata accessor for ModifiedContent(255, v63, &type metadata for _AppearanceActionModifier);
  v65 = type metadata accessor for ModifiedContent(255, v64, &type metadata for _AppearanceActionModifier);
  v71 = v55;
  v72 = v56;
  v73 = v57;
  v74 = v58;
  swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  sub_10000F4E0(&qword_10015D728, &qword_10015D718, (uint64_t)&unk_10010C4A0);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v61);
  sub_10000F4E0(&qword_10015D730, &qword_10015D720, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v63);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  v66 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v67 = type metadata accessor for NavigationStack(255, v70, v65, v66);
  return swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v67);
}

uint64_t sub_1000AC2F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118BE0, 1);
}

unint64_t sub_1000AC300(uint64_t a1)
{
  unint64_t result;

  result = sub_1000A9C2C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AC324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A880C(a1, a2);
}

unint64_t sub_1000AC32C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DA48;
  if (!qword_10015DA48)
  {
    v1 = sub_100007D00(&qword_10015A738);
    sub_10000F4E0(&qword_10015DA50, &qword_10015DA58, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DA48);
  }
  return result;
}

unint64_t sub_1000AC3B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DA68;
  if (!qword_10015DA68)
  {
    v1 = sub_100007D00(&qword_10015DA08);
    sub_10000F4E0(&qword_10015DA60, &qword_10015DA00, (uint64_t)&protocol conformance descriptor for DatePicker<A>);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DA68);
  }
  return result;
}

uint64_t sub_1000AC450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompactDatePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AC494(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CompactDatePicker(0) - 8) + 80);
  return sub_1000A8A50(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t type metadata accessor for DatePickerButtonStyle(uint64_t a1)
{
  return sub_100025D84(a1, qword_10015DB08, (uint64_t)&nominal type descriptor for DatePickerButtonStyle);
}

uint64_t sub_1000AC4E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for CompactDatePicker(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = sub_100007D50(&qword_10015D8F8);
  v9 = v7 + *(int *)(v8 + 32);
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for CompactDatePickerConfiguration(0);
  v11 = v9 + *(int *)(v10 + 20);
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = (_QWORD *)(v7 + v1[5]);
  swift_release(*v14);
  swift_release(v14[1]);
  v15 = (char *)v14 + *(int *)(v8 + 32);
  swift_bridgeObjectRelease();
  v13((uint64_t)&v15[*(int *)(v10 + 20)], v12);
  v16 = (_QWORD *)(v7 + v1[6]);
  swift_release(*v16);
  swift_release(v16[1]);
  v17 = (char *)v16 + *(int *)(v8 + 32);
  swift_bridgeObjectRelease();
  v13((uint64_t)&v17[*(int *)(v10 + 20)], v12);
  v18 = (_QWORD *)(v7 + v1[7]);
  swift_release(*v18);
  v19 = swift_release(v18[1]);
  v20 = v7 + v1[8];
  ((void (*)(uint64_t, uint64_t, __n128))v13)(v20, v12, v19);
  v21 = sub_100007D50(&qword_10015D2A0);
  v13(v20 + *(int *)(v21 + 36), v12);
  return swift_deallocObject(v0, v5, v6);
}

double sub_1000AC674()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CompactDatePicker(0) - 8) + 80);
  return sub_1000A7340(v0 + ((v1 + 16) & ~v1), v2);
}

uint64_t sub_1000AC6A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A7774(a1);
}

double sub_1000AC6A8()
{
  uint64_t v0;

  return sub_1000A73AC(*(char **)(v0 + 16));
}

ValueMetadata *type metadata accessor for FilterViewStartDatePickerHeightPreferenceKey()
{
  return &type metadata for FilterViewStartDatePickerHeightPreferenceKey;
}

uint64_t *sub_1000AC6D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  char *v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7 + 8);
    *v8 = *(uint64_t *)((char *)a2 + v7);
    v8[1] = v10;
    v11 = type metadata accessor for CompactDatePickerConfiguration(0);
    v12 = *(int *)(v11 + 20);
    v19 = (char *)v8 + v12;
    v13 = &v9[v12];
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
    v16 = swift_bridgeObjectRetain(v10);
    v15(v19, v13, v14, v16);
    *((_BYTE *)v8 + *(int *)(v11 + 24)) = v9[*(int *)(v11 + 24)];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1000AC7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v3 = v2 + *(int *)(type metadata accessor for CompactDatePickerConfiguration(0) + 20);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_BYTE *sub_1000AC818(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  void (*v14)(char *, _BYTE *, uint64_t, __n128);
  __n128 v15;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_QWORD *)&a2[v5 + 8];
  *v6 = *(_QWORD *)&a2[v5];
  v6[1] = v8;
  v9 = type metadata accessor for CompactDatePickerConfiguration(0);
  v10 = *(int *)(v9 + 20);
  v11 = (char *)v6 + v10;
  v12 = &v7[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(char *, _BYTE *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
  v15 = swift_bridgeObjectRetain(v8);
  v14(v11, v12, v13, v15);
  *((_BYTE *)v6 + *(int *)(v9 + 24)) = v7[*(int *)(v9 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1000AC8E4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *v7 = *(_QWORD *)&a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for CompactDatePickerConfiguration(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v7 + v11;
  v13 = &v8[v11];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *((_BYTE *)v7 + *(int *)(v10 + 24)) = v8[*(int *)(v10 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1000AC9A8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  v9 = type metadata accessor for CompactDatePickerConfiguration(0);
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1000ACA54(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *v7 = *(_QWORD *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for CompactDatePickerConfiguration(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v7 + v11;
  v13 = &v8[v11];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *((_BYTE *)v7 + *(int *)(v10 + 24)) = v8[*(int *)(v10 + 24)];
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1000ACB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ACB14);
}

uint64_t sub_1000ACB14(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for CompactDatePickerConfiguration(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t sub_1000ACB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ACB9C);
}

_BYTE *sub_1000ACB9C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for CompactDatePickerConfiguration(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000ACC0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10010F3D0;
  result = type metadata accessor for CompactDatePickerConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000ACC8C()
{
  return sub_10000F4E0(&qword_10015DB48, &qword_10015DB50, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_1000ACCB8(uint64_t a1)
{
  unint64_t result;

  result = sub_1000ACCDC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000ACCDC()
{
  unint64_t result;

  result = qword_10015DB58;
  if (!qword_10015DB58)
  {
    result = swift_getWitnessTable(&unk_10010F528, &type metadata for FilterViewStartDatePickerHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015DB58);
  }
  return result;
}

uint64_t sub_1000ACD20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118C08, 1);
}

unint64_t sub_1000ACD34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DB98;
  if (!qword_10015DB98)
  {
    v1 = sub_100007D00(&qword_10015DB90);
    sub_1000ACDB8();
    sub_10000F4E0(&qword_10015DBD0, &qword_10015DBD8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DB98);
  }
  return result;
}

unint64_t sub_1000ACDB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DBA0;
  if (!qword_10015DBA0)
  {
    v1 = sub_100007D00(&qword_10015DB88);
    sub_1000ACE3C();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DBA0);
  }
  return result;
}

unint64_t sub_1000ACE3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DBA8;
  if (!qword_10015DBA8)
  {
    v1 = sub_100007D00(&qword_10015DB80);
    sub_10001E0A8(&qword_10015DBB0, &qword_10015DB78, (void (*)(void))sub_1000ACEE0);
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DBA8);
  }
  return result;
}

uint64_t sub_1000ACEE0()
{
  return sub_10001E0A8(&qword_10015DBB8, &qword_10015DB70, (void (*)(void))sub_1000ACF04);
}

uint64_t sub_1000ACF04()
{
  return sub_10001E0A8(&qword_10015DBC0, &qword_10015DB68, (void (*)(void))sub_1000ACF28);
}

unint64_t sub_1000ACF28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DBC8;
  if (!qword_10015DBC8)
  {
    v1 = sub_100007D00(&qword_10015DB60);
    sub_100007428(&qword_10015C3E0, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_10000F4E0((unint64_t *)&qword_1001588B0, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DBC8);
  }
  return result;
}

unint64_t destroy for Tab(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *_s15ShazamEventsApp3TabVwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = a2[1];
  if (v3 >= 2)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for Tab(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  if (a1[1] >= 2uLL)
  {
    if (v4 >= 2)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10008D390((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v5 = a2[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithTake for Tab(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  if (a1[1] >= 2uLL)
  {
    v4 = a2[1];
    if (v4 >= 2)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10008D390((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Tab(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab()
{
  return &type metadata for Tab;
}

unint64_t sub_1000AD1D0()
{
  unint64_t result;

  result = qword_10015DBE0;
  if (!qword_10015DBE0)
  {
    result = swift_getWitnessTable(&unk_10010F628, &type metadata for Tab);
    atomic_store(result, (unint64_t *)&qword_10015DBE0);
  }
  return result;
}

uint64_t sub_1000AD214(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 7105633;
  if (a2)
    v2 = a1;
  if (a2 == 1)
    v3 = 0x4C746E6572727563;
  else
    v3 = v2;
  sub_10008DDF8(a1, a2);
  return v3;
}

Swift::Int sub_1000AD27C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)(v5, v1, v2);
      return Hasher._finalize()();
    }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000AD2F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = 1;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(2uLL);
  String.hash(into:)(a1, v5, v3);
}

Swift::Int sub_1000AD36C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)(v6, v2, v3);
      return Hasher._finalize()();
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000AD3E4()
{
  uint64_t v0;

  return sub_1000AD214(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1000AD3EC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return !v4;
  if (v3 == 1)
    return v4 == 1;
  if (v4 < 2)
    return 0;
  v6 = *a1;
  if (v6 != *a2 || v3 != v4)
    return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v3, *a2, v4, 0);
  return 1;
}

Swift::Int sub_1000AD44C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5, 0);
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain(v2);
      String.hash(into:)(v5, v1, v2);
      sub_100097B2C(v1, v2);
      return Hasher._finalize()();
    }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000AD4DC(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  if (v3 == 1)
  {
    v4 = 1;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v5, v3);
  sub_100097B2C(v5, v3);
}

Swift::Int sub_1000AD564(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(2uLL);
      swift_bridgeObjectRetain(v3);
      String.hash(into:)(v6, v2, v3);
      sub_100097B2C(v2, v3);
      return Hasher._finalize()();
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

unint64_t destroy for Tab.Style(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s15ShazamEventsApp3TabV5StyleOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for Tab.Style(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for Tab.Style(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab.Style(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Tab.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1000AD804(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000AD81C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Tab.Style()
{
  return &type metadata for Tab.Style;
}

unint64_t sub_1000AD850()
{
  unint64_t result;

  result = qword_10015DBE8;
  if (!qword_10015DBE8)
  {
    result = swift_getWitnessTable(&unk_10010F658, &type metadata for Tab.Style);
    atomic_store(result, (unint64_t *)&qword_10015DBE8);
  }
  return result;
}

uint64_t sub_1000AD898(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000AD8E4(&qword_10015ADF8, (uint64_t)&protocol conformance descriptor for Genre);
  result = sub_1000AD8E4(qword_10015DBF0, (uint64_t)&protocol conformance descriptor for Genre);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AD8E4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Genre(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AD924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x8000000100114C00);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6 & 1;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_1000AD974(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_1000AD9A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_1000ADA00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *sub_1000ADA84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v7 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareSheet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for LineupViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LineupViewModel);
}

uint64_t sub_1000ADB80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  v8 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010CF70, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v8, WitnessTable);
  v11 = (int *)type metadata accessor for FeaturedVideosView(0, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88), v10);
  v12 = a4 + v11[9];
  v13 = type metadata accessor for Optional(255);
  v14 = type metadata accessor for Binding(0, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, a2, v14);
  sub_100008470(a3);
  v15 = (_QWORD *)(a4 + v11[11]);
  v16 = type metadata accessor for RemoteViewConfiguration();
  v17 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  *v15 = EnvironmentObject.init()(v16, v17);
  v15[1] = v18;
  v19 = (_QWORD *)(a4 + v11[12]);
  *v19 = swift_getKeyPath(&unk_10010F750);
  v20 = sub_100007D50(&qword_100158968);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = (_QWORD *)(a4 + v11[13]);
  *v21 = swift_getKeyPath(&unk_10010F780);
  return swift_storeEnumTagMultiPayload(v21, v20, 0);
}

uint64_t type metadata accessor for FeaturedVideosView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideosView);
}

uint64_t sub_1000ADCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for FeaturedVideosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000ADD24()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional(255);
  v1 = type metadata accessor for State(0, v0);
  return State.projectedValue.getter(v1);
}

uint64_t sub_1000ADD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t OpaqueTypeConformance2;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;

  v58 = a2;
  v3 = sub_100007D00(&qword_10015DCF8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array(255, v4);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for FeaturedVideoPlayer(255, v4, v6, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _AspectRatioLayout);
  v10 = sub_100007D00(&qword_100158640);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  v12 = sub_100007D00(&qword_100159D08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v11, v12, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for VStack(255, v14, WitnessTable);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v16);
  v67 = v16;
  v68 = v17;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v20 = *(_QWORD **)(v6 + 8);
  v67 = v5;
  v68 = v4;
  v69 = OpaqueTypeMetadata2;
  v70 = (void *)v19;
  v71 = v20;
  v21 = type metadata accessor for ForEach(255, &v67);
  v67 = v16;
  v68 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v21);
  v23 = type metadata accessor for LazyHStack(255, v21, v22);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v23);
  v67 = v23;
  v68 = v24;
  v25 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v67 = v23;
  v68 = v24;
  v26 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v27 = type metadata accessor for ScrollView(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v27);
  v67 = v27;
  v68 = v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v67 = v27;
  v68 = v28;
  v30 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v67 = v29;
  v68 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v32 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v67 = v29;
  v68 = v30;
  v33 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v67 = v31;
  v68 = v32;
  v69 = v33;
  v70 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v34 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v67 = v31;
  v68 = v32;
  v69 = v33;
  v70 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v35 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v67 = v34;
  v68 = v4;
  v69 = v35;
  v70 = v20;
  v36 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v37 = type metadata accessor for ModifiedContent(255, v36, &type metadata for _FlexFrameLayout);
  v38 = type metadata accessor for Optional(255);
  v67 = v34;
  v68 = v4;
  v69 = v35;
  v70 = v20;
  v64 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v65 = &protocol witness table for _FlexFrameLayout;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v63 = v20[1];
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v38);
  v67 = v37;
  v68 = v38;
  v69 = v39;
  v70 = (void *)v40;
  v41 = swift_getOpaqueTypeMetadata2(255, &v67, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v42 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _AppearanceActionModifier);
  v43 = swift_getTupleTypeMetadata2(255, v3, v42, 0, 0);
  v44 = type metadata accessor for TupleView(255, v43);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for VStack(0, v44, v45);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v49 = (char *)&v57 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v52 = (char *)&v57 - v51;
  v54 = static HorizontalAlignment.leading.getter(v53);
  v60 = v4;
  v61 = v6;
  v62 = v57;
  VStack.init(alignment:spacing:content:)(v54, 0x402A000000000000, 0, sub_1000B2448, v59, v44, v45);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v46);
  sub_10005135C((uint64_t)v49, v46, (uint64_t)v52);
  v55 = *(void (**)(char *, uint64_t))(v47 + 8);
  v55(v49, v46);
  sub_1000424BC((uint64_t)v52, v46, v58);
  return ((uint64_t (*)(char *, uint64_t))v55)(v52, v46);
}

uint64_t sub_1000AE260@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata2;
  uint64_t v29;
  uint64_t WitnessTable;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void *v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(_QWORD, _QWORD);
  char *v141;
  uint64_t v142;
  void (*v143)(_QWORD, _QWORD);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  __n128 v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t KeyPath;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t OpaqueTypeConformance2;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  void (*v242)(_QWORD, _QWORD);
  _QWORD v243[7];
  _QWORD v244[2];
  uint64_t v245;
  void (*v246)(_QWORD, _QWORD, _QWORD);
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  char v253;
  char v254;
  double v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  uint64_t v260[10];

  v242 = a1;
  v233 = a5;
  v5 = a2;
  v239 = type metadata accessor for FeaturedVideosView(0, a2, a3, a4);
  v7 = *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64);
  v230 = *(_QWORD *)(v239 - 8);
  v231 = v7;
  __chkstk_darwin(v239);
  v229 = (char *)&v181 - v8;
  v9 = type metadata accessor for Optional(0);
  v10 = *(_QWORD *)(v9 - 8);
  v236 = v9;
  v232 = v10;
  __chkstk_darwin(v9);
  v228 = (char *)&v181 - v11;
  v13 = type metadata accessor for Binding(0, v12);
  v226 = *(_QWORD *)(v13 - 8);
  v227 = v13;
  __chkstk_darwin(v13);
  v225 = (char *)&v181 - v14;
  v15 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v15);
  v223 = (char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = (_QWORD *)type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v224 = *(v235 - 1);
  __chkstk_darwin(v235);
  v222 = (char *)&v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ContentMarginPlacement(0);
  v220 = *(_QWORD *)(v18 - 8);
  v221 = v18;
  __chkstk_darwin(v18);
  v219 = (char *)&v181 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Array(255, v5);
  v21 = a3;
  v241 = a3;
  v23 = type metadata accessor for FeaturedVideoPlayer(255, v5, a3, v22);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _AspectRatioLayout);
  v25 = sub_100007D00(&qword_100158640);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = sub_100007D00(&qword_100159D08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v26, v27, 0, 0);
  v29 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v31 = type metadata accessor for VStack(255, v29, WitnessTable);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v31);
  v245 = v31;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v32;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v245, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for [A], v20);
  v35 = *(_QWORD **)(v21 + 8);
  v245 = v20;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
  v247 = OpaqueTypeMetadata2;
  v248 = (void *)v34;
  v249 = (uint64_t)v35;
  v36 = v35;
  v37 = type metadata accessor for ForEach(255, &v245);
  v245 = v31;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v32;
  v260[8] = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v37);
  v39 = type metadata accessor for LazyHStack(255, v37, v38);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v39);
  v245 = v39;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v40;
  v41 = swift_getOpaqueTypeMetadata2(255, &v245, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v204 = v41;
  v245 = v39;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v42 = type metadata accessor for ScrollView(0, v41, OpaqueTypeConformance2);
  v211 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v199 = (char *)&v181 - v43;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v42);
  v245 = v42;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v44;
  v45 = v44;
  v196 = v44;
  v46 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v212 = *(_QWORD *)(v46 - 8);
  v47 = v46;
  __chkstk_darwin(v46);
  v195 = (char *)&v181 - v48;
  v245 = v42;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v45;
  v49 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v245 = v47;
  v50 = v47;
  v192 = v47;
  v193 = v49;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v49;
  v51 = v49;
  v52 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v210 = *(_QWORD *)(v52 - 8);
  v53 = v52;
  __chkstk_darwin(v52);
  v189 = (char *)&v181 - v54;
  v245 = v50;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v51;
  v55 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v245 = v53;
  v56 = v53;
  v187 = v53;
  v57 = (uint64_t)v235;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v235;
  v247 = v55;
  v188 = v55;
  v248 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v58 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v209 = *(_QWORD *)(v58 - 8);
  v59 = v58;
  __chkstk_darwin(v58);
  v186 = (char *)&v181 - v60;
  v245 = v56;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v57;
  v247 = v55;
  v248 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v61 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v245 = v59;
  v62 = v59;
  v182 = v59;
  v183 = v61;
  v234 = v5;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
  v247 = v61;
  v63 = v61;
  v248 = v36;
  v64 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v208 = *(_QWORD *)(v64 - 8);
  v197 = v64;
  __chkstk_darwin(v64);
  v185 = (char *)&v181 - v65;
  v67 = type metadata accessor for ModifiedContent(0, v66, &type metadata for _FlexFrameLayout);
  v218 = *(_QWORD *)(v67 - 8);
  v68 = v67;
  __chkstk_darwin(v67);
  v237 = (char *)&v181 - v69;
  v245 = v62;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
  v247 = v63;
  v181 = v36;
  v248 = v36;
  v184 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v260[6] = v184;
  v260[7] = (uint64_t)&protocol witness table for _FlexFrameLayout;
  v205 = v68;
  v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v207 = v70;
  v260[5] = v36[1];
  v71 = v236;
  v206 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v236);
  v245 = v68;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v71;
  v247 = v70;
  v248 = (void *)v206;
  v72 = swift_getOpaqueTypeMetadata2(0, &v245, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v216 = *(_QWORD *)(v72 - 8);
  v213 = v72;
  __chkstk_darwin(v72);
  v238 = (char *)&v181 - v73;
  v215 = type metadata accessor for ModifiedContent(0, v74, &type metadata for _AppearanceActionModifier);
  v217 = *(_QWORD *)(v215 - 8);
  __chkstk_darwin(v215);
  v240 = (char *)&v181 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v76);
  v214 = (uint64_t)&v181 - v77;
  v78 = v239;
  v79 = v242;
  v83 = sub_1000ADCE8(v239, v80, v81, v82);
  v84 = sub_10007153C();
  v86 = v85;
  LOBYTE(v5) = v87;
  v89 = v88;
  swift_release(v83);
  v90 = Text.init(_:tableName:bundle:comment:)(v84, v86, v5 & 1, v89, 0, 0, 0, 0, 0, 256);
  v92 = v91;
  v94 = v93;
  v96 = v95 & 1;
  v97 = static Font.title2.getter(v90);
  static Font.Weight.bold.getter(v97);
  v98 = Font.weight(_:)(v97);
  swift_release(v97);
  v99 = Text.font(_:)(v98, v90, v92, v96, v94);
  v200 = v100;
  v201 = v99;
  LOBYTE(v97) = v101;
  v202 = v102;
  swift_release(v98);
  v198 = v97 & 1;
  sub_100007D90(v90, v92, v96);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010F840);
  v191 = swift_getKeyPath(&unk_10010F870);
  v190 = static Edge.Set.leading.getter(v191);
  v103 = EdgeInsets.init(_all:)(20.0);
  v105 = v104;
  v107 = v106;
  v109 = v108;
  v111 = static Axis.Set.horizontal.getter(v110);
  v112 = v234;
  v243[2] = v234;
  v243[3] = v241;
  v243[4] = v79;
  v113 = v199;
  ScrollView.init(_:showsIndicators:content:)(v111, 0, sub_1000B2464, v243, v204, OpaqueTypeConformance2);
  v117 = sub_1000ADCE8(v78, v114, v115, v116);
  LOBYTE(v92) = sub_1000715EC();
  swift_release(v117);
  v118 = v195;
  View.scrollDisabled(_:)(v92 & 1, v42, v196);
  v119 = (*(uint64_t (**)(char *, uint64_t))(v211 + 8))(v113, v42);
  v120 = static Edge.Set.horizontal.getter(v119);
  v121 = v219;
  static ContentMarginPlacement.automatic.getter();
  v122 = v189;
  v123 = v192;
  View.contentMargins(_:_:for:)(v120, 0x4034000000000000, 0, v121, v192, v193);
  (*(void (**)(char *, uint64_t))(v220 + 8))(v121, v221);
  v124 = (*(uint64_t (**)(char *, uint64_t))(v212 + 8))(v118, v123);
  v125 = v223;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v124);
  v126 = v222;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v125);
  v128 = v186;
  v127 = v187;
  v129 = v235;
  View.scrollTargetBehavior<A>(_:)(v126, v187, v235, v188, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, _QWORD *))(v224 + 8))(v126, v129);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v122, v127);
  v130 = v225;
  sub_100091440(v78, (uint64_t (*)(uint64_t))&Binding.projectedValue.getter);
  v131 = v185;
  v132 = v182;
  v133 = v112;
  View.scrollPosition<A>(id:anchor:)(v130, 0, 0, 1, v182, v112, v183, v181);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v130, v227);
  v134 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v128, v132);
  v135 = static Alignment.center.getter(v134);
  v136 = v197;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0x7FF0000000000000, 0, v135, v137, v197, v184);
  (*(void (**)(char *, uint64_t))(v208 + 8))(v131, v136);
  v138 = v228;
  v139 = v78;
  v140 = v242;
  sub_100091440(v78, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  v141 = v229;
  v142 = v230;
  v235 = *(_QWORD **)(v230 + 16);
  v143 = v140;
  v144 = v139;
  ((void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))v235)(v229, v143, v139);
  v145 = *(unsigned __int8 *)(v142 + 80);
  v146 = (v145 + 32) & ~v145;
  v231 += v146;
  v227 = v145 | 7;
  v147 = swift_allocObject(&unk_10014E408, v231, v145 | 7);
  v148 = v241;
  *(_QWORD *)(v147 + 16) = v133;
  *(_QWORD *)(v147 + 24) = v148;
  v230 = *(_QWORD *)(v142 + 32);
  v149 = v141;
  ((void (*)(uint64_t, char *, uint64_t))v230)(v147 + v146, v141, v144);
  v150 = v237;
  v151 = v205;
  v152 = (void *)v206;
  v153 = v236;
  v154 = v207;
  View.onChange<A>(of:initial:_:)(v138, 0, sub_1000B2474, v147, v205, v236, v207, v206);
  v155 = swift_release(v147);
  (*(void (**)(char *, uint64_t, __n128))(v232 + 8))(v138, v153, v155);
  v156 = v150;
  v157 = v151;
  (*(void (**)(char *, uint64_t))(v218 + 8))(v156, v151);
  v158 = v239;
  ((void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))v235)(v149, v242, v239);
  v159 = swift_allocObject(&unk_10014E430, v231, v227);
  v160 = v241;
  *(_QWORD *)(v159 + 16) = v234;
  *(_QWORD *)(v159 + 24) = v160;
  ((void (*)(uint64_t, char *, uint64_t))v230)(v159 + v146, v149, v158);
  v245 = v157;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v153;
  v247 = v154;
  v248 = v152;
  v161 = swift_getOpaqueTypeConformance2(&v245, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v162 = (uint64_t)v240;
  v163 = v213;
  v164 = v238;
  View.onAppear(perform:)(sub_1000B2484, v159, v213, v161);
  v165 = swift_release(v159);
  (*(void (**)(char *, uint64_t, __n128))(v216 + 8))(v164, v163, v165);
  v260[2] = v161;
  v260[3] = (uint64_t)&protocol witness table for _AppearanceActionModifier;
  v166 = v215;
  v241 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v215);
  v167 = v214;
  sub_10005135C(v162, v166, v214);
  v168 = v217;
  v242 = *(void (**)(_QWORD, _QWORD))(v217 + 8);
  v242(v162, v166);
  v169 = v200;
  v170 = v201;
  v245 = v201;
  v246 = (void (*)(_QWORD, _QWORD, _QWORD))v200;
  LOBYTE(v164) = v198;
  LOBYTE(v247) = v198;
  v171 = v202;
  v248 = v202;
  v172 = KeyPath;
  v249 = KeyPath;
  v250 = 2;
  v251 = 0;
  v173 = v191;
  v252 = v191;
  v253 = 0;
  v254 = v190;
  v255 = v103;
  v256 = v105;
  v257 = v107;
  v258 = v109;
  v259 = 0;
  v260[0] = (uint64_t)&v245;
  v174 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
  v175 = (uint64_t)v240;
  v174(v240, v167, v166);
  v260[1] = v175;
  sub_10000F844(v170, v169, (char)v164);
  swift_bridgeObjectRetain(v171);
  v176 = v172;
  swift_retain(v172);
  swift_retain(v173);
  v244[0] = sub_100007D50(&qword_10015DCF8);
  v244[1] = v166;
  v243[5] = sub_1000B24F0();
  v243[6] = v241;
  sub_100042510(v260, 2uLL, (uint64_t)v244);
  v177 = (void (*)(char *, uint64_t))v242;
  v242(v167, v166);
  sub_100007D90(v170, v169, (char)v164);
  swift_release(v173);
  swift_release(v176);
  swift_bridgeObjectRelease();
  v177(v240, v166);
  v178 = v249;
  v179 = v252;
  sub_100007D90(v245, (uint64_t)v246, v247);
  swift_release(v179);
  swift_release(v178);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AF0BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v44 = a1;
  v45 = a4;
  v6 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v6);
  v43 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Array(255, a2);
  v10 = type metadata accessor for FeaturedVideoPlayer(255, a2, a3, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _AspectRatioLayout);
  v12 = sub_100007D00(&qword_100158640);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v14 = sub_100007D00(&qword_100159D08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for VStack(255, v16, WitnessTable);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v18);
  v51 = v18;
  v52 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v51, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  v22 = *(_QWORD *)(a3 + 8);
  v51 = v8;
  v52 = a2;
  v53 = OpaqueTypeMetadata2;
  v54 = v21;
  v55 = v22;
  v23 = type metadata accessor for ForEach(255, &v51);
  v51 = v18;
  v52 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v23);
  v25 = type metadata accessor for LazyHStack(0, v23, v24);
  v42 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v40 - v26;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v25);
  v51 = v25;
  v52 = v28;
  v29 = swift_getOpaqueTypeMetadata2(0, &v51, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v41 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v31 = (char *)&v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v40 - v33;
  v47 = a2;
  v48 = a3;
  v49 = v44;
  v36 = static VerticalAlignment.center.getter(v35);
  v37 = v43;
  sub_1000B07DC();
  LazyHStack.init(alignment:spacing:pinnedViews:content:)(v36, 0x4024000000000000, 0, v37, sub_1000B2680, v46, v23, v24);
  View.scrollTargetLayout(isEnabled:)(1, v25, v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v25);
  v51 = v25;
  v52 = v28;
  swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_10005135C((uint64_t)v31, v29, (uint64_t)v34);
  v38 = *(void (**)(char *, uint64_t))(v41 + 8);
  v38(v31, v29);
  sub_1000424BC((uint64_t)v34, v29, v45);
  return ((uint64_t (*)(char *, uint64_t))v38)(v34, v29);
}

uint64_t sub_1000AF42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t OpaqueTypeConformance2;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v59 = a5;
  v8 = type metadata accessor for FeaturedVideosView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v8;
  v58 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v57 = (char *)&v48 - v11;
  v12 = type metadata accessor for Array(255, a2);
  v14 = type metadata accessor for FeaturedVideoPlayer(255, a2, a3, v13);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _AspectRatioLayout);
  v16 = sub_100007D00(&qword_100158640);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_100007D00(&qword_100159D08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v17, v18, 0, 0);
  v20 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for VStack(255, v20, WitnessTable);
  v51 = v22;
  v50 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v22);
  v64 = v22;
  v65 = v50;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v64, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v54 = OpaqueTypeMetadata2;
  v55 = v12;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v52 = *(_QWORD *)(a3 + 8);
  v53 = v24;
  v64 = v12;
  v65 = a2;
  v66 = OpaqueTypeMetadata2;
  v67 = v24;
  v68 = v52;
  v25 = type metadata accessor for ForEach(0, &v64);
  v56 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v48 - v29;
  v31 = v10;
  v35 = sub_1000ADCE8(v10, v32, v33, v34);
  v36 = sub_10007172C();
  swift_bridgeObjectRetain(v36);
  swift_release(v35);
  v63 = v36;
  v60 = a2;
  v61 = a3;
  KeyPath = swift_getKeyPath(&unk_10010F8A8);
  v37 = v9;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v39 = v57;
  v40 = a1;
  v41 = v31;
  v38(v57, v40, v31);
  v42 = *(unsigned __int8 *)(v37 + 80);
  v43 = (v42 + 32) & ~v42;
  v44 = swift_allocObject(&unk_10014E458, v43 + v58, v42 | 7);
  *(_QWORD *)(v44 + 16) = a2;
  *(_QWORD *)(v44 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v44 + v43, v39, v41);
  v64 = v51;
  v65 = v50;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  ForEach<>.init(_:id:content:)(&v63, KeyPath, sub_1000B28CC, v44, v55, v54, v53, v52, OpaqueTypeConformance2);
  v62 = OpaqueTypeConformance2;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  sub_10005135C((uint64_t)v27, v25, (uint64_t)v30);
  v46 = *(void (**)(char *, uint64_t))(v56 + 8);
  v46(v27, v25);
  sub_1000424BC((uint64_t)v30, v25, v59);
  return ((uint64_t (*)(char *, uint64_t))v46)(v30, v25);
}

uint64_t sub_1000AF780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t WitnessTable;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t);
  void (*v52)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t (*v54)(_BYTE *, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  void (*v68)(_BYTE *, uint64_t);
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  void (*v75)(_BYTE *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  void (*v88)(_BYTE *, uint64_t);
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  void (*v98)(uint64_t, uint64_t);
  _BYTE v100[12];
  int v101;
  _BYTE *v102;
  void (*v103)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _QWORD *v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126[16];
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v125 = a2;
  v115 = (_BYTE *)a4;
  v116 = a1;
  v121 = a5;
  v124 = type metadata accessor for FeaturedVideosView(0, a3, a4, a4);
  v110 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v120 = &v100[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v122 = &v100[-v9];
  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  v11 = *(_QWORD **)(v10 - 8);
  __chkstk_darwin(v10);
  v104 = &v100[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v123 = sub_100007D50(&qword_100158A18);
  __chkstk_darwin(v123);
  v109 = &v100[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = &v100[-v15];
  v17 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v17);
  v102 = &v100[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v108 = &v100[-v20];
  __chkstk_darwin(v21);
  v105 = &v100[-v22];
  __chkstk_darwin(v23);
  v106 = &v100[-v24];
  __chkstk_darwin(v25);
  v27 = &v100[-v26];
  __chkstk_darwin(v28);
  v30 = &v100[-v29];
  v32 = type metadata accessor for FeaturedVideoPlayer(255, a3, a4, v31);
  v33 = type metadata accessor for ModifiedContent(255, v32, &type metadata for _AspectRatioLayout);
  v34 = sub_100007D00(&qword_100158640);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = sub_100007D00(&qword_100159D08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v35, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for VStack(0, v38, WitnessTable);
  v113 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v42 = &v100[-v41];
  v43 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v40);
  v114 = v40;
  v131 = v40;
  v132 = v43;
  v111 = v43;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v131, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v112 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v117 = &v100[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v46);
  v118 = &v100[-v47];
  v49 = static HorizontalAlignment.leading.getter(v48);
  v127 = a3;
  v128 = v115;
  v129 = v116;
  v130 = v125;
  v115 = v42;
  v50 = VStack.init(alignment:spacing:content:)(v49, 0, 1, sub_1000B2934, v126, v38, WitnessTable);
  LODWORD(v116) = static Axis.Set.horizontal.getter(v50);
  sub_100018474((uint64_t)v30);
  v51 = (void (*)(_BYTE *, _QWORD, uint64_t))v11[13];
  v51(v27, enum case for UserInterfaceSizeClass.regular(_:), v10);
  v52 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v11[7];
  v52(v27, 0, 1, v10);
  v53 = (uint64_t)&v16[*(int *)(v123 + 48)];
  sub_100075248((uint64_t)v30, (uint64_t)v16);
  sub_100075248((uint64_t)v27, v53);
  v107 = v11;
  v54 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v11[6];
  v55 = v54(v16, 1, v10);
  v119 = OpaqueTypeMetadata2;
  if (v55 == 1)
  {
    sub_100007F38((uint64_t)v27, &qword_100158970);
    sub_100007F38((uint64_t)v30, &qword_100158970);
    if (v54((_BYTE *)v53, 1, v10) == 1)
    {
      sub_100007F38((uint64_t)v16, &qword_100158970);
      v56 = v110;
      v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 16);
      v58 = v122;
      v59 = v124;
      v57(v122, v125, v124);
      v60 = v121;
LABEL_13:
      v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
      v68(v58, v59);
      v70 = v119;
      v69 = v120;
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  v61 = v106;
  sub_100075248((uint64_t)v16, (uint64_t)v106);
  if (v54((_BYTE *)v53, 1, v10) == 1)
  {
    sub_100007F38((uint64_t)v27, &qword_100158970);
    sub_100007F38((uint64_t)v30, &qword_100158970);
    ((void (*)(_BYTE *, uint64_t))v107[1])(v61, v10);
LABEL_6:
    v103 = v52;
    sub_100007F38((uint64_t)v16, &qword_100158A18);
    v56 = v110;
    v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 16);
    v58 = v122;
    v59 = v124;
    v57(v122, v125, v124);
    goto LABEL_7;
  }
  v103 = v52;
  v72 = v107;
  v73 = v104;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v107[4])(v104, v53, v10);
  v74 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v101 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v73, v10, v74);
  v75 = (void (*)(_BYTE *, uint64_t))v72[1];
  v75(v73, v10);
  sub_100007F38((uint64_t)v27, &qword_100158970);
  sub_100007F38((uint64_t)v30, &qword_100158970);
  v75(v106, v10);
  sub_100007F38((uint64_t)v16, &qword_100158970);
  v56 = v110;
  v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 16);
  v58 = v122;
  v59 = v124;
  v57(v122, v125, v124);
  v60 = v121;
  if ((v101 & 1) != 0)
    goto LABEL_13;
LABEL_7:
  v62 = v105;
  sub_100018474((uint64_t)v105);
  v63 = v108;
  v51(v108, enum case for UserInterfaceSizeClass.compact(_:), v10);
  v64 = (uint64_t)v62;
  v103(v63, 0, 1, v10);
  v65 = v58;
  v66 = v109;
  v67 = (uint64_t)&v109[*(int *)(v123 + 48)];
  sub_100075248(v64, (uint64_t)v109);
  sub_100075248((uint64_t)v63, v67);
  if (v54(v66, 1, v10) == 1)
  {
    sub_100007F38((uint64_t)v63, &qword_100158970);
    sub_100007F38(v64, &qword_100158970);
    v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
    v68(v65, v59);
    if (v54((_BYTE *)v67, 1, v10) == 1)
    {
      sub_100007F38((uint64_t)v109, &qword_100158970);
      v70 = v119;
      v69 = v120;
      v60 = v121;
LABEL_14:
      v57(v69, v125, v59);
      goto LABEL_15;
    }
    v70 = v119;
    v69 = v120;
    v66 = v109;
    goto LABEL_18;
  }
  v71 = v102;
  sub_100075248((uint64_t)v66, (uint64_t)v102);
  if (v54((_BYTE *)v67, 1, v10) == 1)
  {
    sub_100007F38((uint64_t)v108, &qword_100158970);
    sub_100007F38(v64, &qword_100158970);
    v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
    v68(v122, v59);
    ((void (*)(_BYTE *, uint64_t))v107[1])(v71, v10);
    v70 = v119;
    v69 = v120;
LABEL_18:
    v60 = v121;
    sub_100007F38((uint64_t)v66, &qword_100158A18);
    v57(v69, v125, v59);
LABEL_20:
    v82 = ((uint64_t (*)(_BYTE *, uint64_t))v68)(v69, v59);
    goto LABEL_21;
  }
  v84 = v64;
  v85 = v107;
  v86 = v104;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v107[4])(v104, v67, v10);
  v87 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  LODWORD(v123) = dispatch thunk of static Equatable.== infix(_:_:)(v71, v86, v10, v87);
  v88 = (void (*)(_BYTE *, uint64_t))v85[1];
  v88(v86, v10);
  sub_100007F38((uint64_t)v108, &qword_100158970);
  sub_100007F38(v84, &qword_100158970);
  v68 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v68(v122, v124);
  v88(v71, v10);
  v59 = v124;
  sub_100007F38((uint64_t)v66, &qword_100158970);
  v69 = v120;
  v57(v120, v125, v59);
  v70 = v119;
  v60 = v121;
  if ((v123 & 1) == 0)
    goto LABEL_20;
LABEL_15:
  v79 = sub_1000ADCE8(v59, v76, v77, v78);
  v80 = sub_10007159C();
  v81 = swift_release(v79);
  v82 = ((uint64_t (*)(_BYTE *, uint64_t, __n128))v68)(v69, v59, v81);
  if (!v80)
  {
LABEL_21:
    v83 = 1;
    goto LABEL_22;
  }
  v83 = 2;
LABEL_22:
  v90 = v114;
  v89 = v115;
  v91 = v113;
  v92 = v112;
  v93 = v111;
  v94 = static Alignment.center.getter(v82);
  v95 = (uint64_t)v117;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)(v116, v83, 1, v94, v96, v90, v93, 10.0);
  (*(void (**)(_BYTE *, uint64_t))(v91 + 8))(v89, v90);
  v131 = v90;
  v132 = v93;
  swift_getOpaqueTypeConformance2(&v131, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v97 = v118;
  sub_10005135C(v95, v70, (uint64_t)v118);
  v98 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v98(v95, v70);
  sub_1000424BC((uint64_t)v97, v70, v60);
  return ((uint64_t (*)(_BYTE *, uint64_t))v98)(v97, v70);
}

uint64_t sub_1000B01C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t WitnessTable;
  char *v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105[8];

  v86 = a1;
  v91 = a4;
  v90 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v90);
  v89 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Optional(255);
  v9 = type metadata accessor for Binding(0, v8);
  __chkstk_darwin(v9);
  v11 = (char *)&v82 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2;
  v18 = type metadata accessor for FeaturedVideoPlayer(0, a2, a3, v17);
  v85 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v82 - v19;
  v21 = type metadata accessor for ModifiedContent(0, v18, &type metadata for _AspectRatioLayout);
  v22 = *(_QWORD *)(v21 - 8);
  v84 = v21;
  v87 = v22;
  __chkstk_darwin(v21);
  v83 = (char *)&v82 - v23;
  v24 = sub_100007D00(&qword_100158640);
  v93 = type metadata accessor for ModifiedContent(0, v21, v24);
  v88 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v92 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v26);
  v94 = (uint64_t)&v82 - v28;
  v29 = v15;
  v30 = (uint64_t)v15;
  v31 = v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v29, a1, v16, v27);
  v33 = type metadata accessor for FeaturedVideosView(0, v16, a3, v32);
  v37 = sub_1000ADCE8(v33, v34, v35, v36);
  LOBYTE(v16) = sub_100071470();
  swift_release(v37);
  sub_1000ADD24();
  v38 = v16 & 1;
  v39 = v31;
  sub_10009B6E0(v30, v38, (uint64_t)v11, v31, a3, (uint64_t)v20);
  WitnessTable = swift_getWitnessTable(&unk_10010EE30, v18);
  v41 = v83;
  View.aspectRatio(_:contentMode:)(0x3FFC71C71C71C71CLL, 0, 0, v18, WitnessTable);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v20, v18);
  v42 = v90;
  v43 = v89;
  v44 = &v89[*(int *)(v90 + 20)];
  v45 = enum case for RoundedCornerStyle.continuous(_:);
  v46 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
  __asm { FMOV            V0.2D, #8.0 }
  *v43 = _Q0;
  v105[5] = WitnessTable;
  v105[6] = (uint64_t)&protocol witness table for _AspectRatioLayout;
  v52 = v84;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v84);
  v54 = sub_100007428(&qword_10015DD18, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
  v55 = (uint64_t)v92;
  View.clipShape<A>(_:style:)(v43, 256, v52, v42, v53, v54);
  sub_10000F854((uint64_t)v43);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v41, v52);
  v56 = sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v105[3] = v53;
  v105[4] = v56;
  v57 = v93;
  v89 = (char *)swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v93);
  sub_10005135C(v55, v57, v94);
  v58 = v88;
  v90 = *(_QWORD *)(v88 + 8);
  ((void (*)(uint64_t, uint64_t))v90)(v55, v57);
  v98 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(v39, a3);
  v99 = v59;
  sub_10001DB0C();
  v60 = Text.init<A>(_:)(&v98, &type metadata for String);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  v67 = static Font.subheadline.getter(v60);
  static Font.Weight.regular.getter();
  v68 = Font.weight(_:)(v67);
  swift_release(v67);
  v69 = Text.font(_:)(v68, v60, v62, v66, v64);
  v71 = v70;
  LOBYTE(a3) = v72;
  v74 = v73;
  swift_release(v68);
  sub_100007D90(v60, v62, v66);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010F840);
  v76 = (uint64_t)v92;
  v77 = v93;
  v78 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v92, v94, v93);
  v98 = v69;
  v99 = v71;
  v100 = a3 & 1;
  v101 = v74;
  v102 = KeyPath;
  v103 = 1;
  v104 = 0;
  v105[0] = v76;
  v105[1] = (uint64_t)&v98;
  sub_10000F844(v69, v71, a3 & 1);
  swift_bridgeObjectRetain(v74);
  swift_retain(KeyPath);
  v97[0] = v77;
  v97[1] = sub_100007D50(&qword_100159D08);
  v95 = v89;
  v96 = sub_10003B9E0();
  sub_100042510(v105, 2uLL, (uint64_t)v97);
  sub_100007D90(v69, v71, a3 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  v79 = (uint64_t (*)(uint64_t, uint64_t))v90;
  ((void (*)(uint64_t, uint64_t))v90)(v78, v77);
  v80 = v102;
  sub_100007D90(v98, v99, v100);
  swift_release(v80);
  swift_bridgeObjectRelease();
  return v79(v76, v77);
}

uint64_t sub_1000B07DC()
{
  uint64_t v0;
  uint64_t v1;
  int v3;

  v0 = type metadata accessor for PinnedScrollableViews(0);
  v3 = 0;
  v1 = sub_100007428(&qword_100159D20, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  return dispatch thunk of OptionSet.init(rawValue:)(&v3, v0, v1);
}

void sub_1000B0840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = type metadata accessor for FeaturedVideosView(0, a2, a3, a4);
  v9 = sub_1000ADCE8(v5, v6, v7, v8);
  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100158140 != -1)
    swift_once(&qword_100158140, sub_10009B8DC);
  objc_msgSend(v10, "postNotificationName:object:userInfo:", qword_10016A590, 0, 0);
  swift_release(v9);

  v14 = sub_1000ADCE8(v5, v11, v12, v13);
  v16 = *(_QWORD *)(v14 + 16);
  v15 = *(_QWORD *)(v14 + 24);
  swift_bridgeObjectRetain(v15);
  swift_release(v14);
  v17 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  v18 = *v17;
  if (*v17)
  {
    swift_retain(*v17);
    sub_10008A874(v16, v15, 8, 13, 25, 0, 3u, v18);
    swift_bridgeObjectRelease();
    swift_release(v18);
  }
  else
  {
    v19 = v17[1];
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

uint64_t sub_1000B09A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, uint64_t);
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t WitnessTable;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v33 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - v16;
  v19 = type metadata accessor for FeaturedVideosView(0, a2, a3, v18);
  v34 = a1;
  sub_100091440(v19, (uint64_t (*)(uint64_t))&Binding.wrappedValue.getter);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a3) = v20(v17, 1, a2);
  v21 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  result = v21(v17, v9);
  if ((_DWORD)a3 == 1)
  {
    v32 = v8;
    v26 = sub_1000ADCE8(v19, v23, v24, v25);
    v27 = sub_10007172C();
    swift_bridgeObjectRetain(v27);
    swift_release(v26);
    v35 = v27;
    v28 = type metadata accessor for Array(0, a2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v28);
    Collection.first.getter(v28, WitnessTable);
    swift_bridgeObjectRelease();
    if (v20(v14, 1, a2) == 1)
    {
      return v21(v14, v9);
    }
    else
    {
      v30 = v32;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v14, a2);
      v31 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v33, v30, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v31, 0, 1, a2);
      sub_1000B25E0(v31);
      v21((char *)v31, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v30, a2);
    }
  }
  return result;
}

void sub_1000B0C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for FeaturedVideosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v15[0] = *(_QWORD *)(v6 - 8) + 64;
    v8 = type metadata accessor for Optional(255);
    v9 = type metadata accessor for Binding(319, v8);
    if (v10 <= 0x3F)
    {
      v15[1] = *(_QWORD *)(v9 - 8) + 64;
      v11 = type metadata accessor for State(319, v8);
      if (v12 <= 0x3F)
      {
        v15[2] = *(_QWORD *)(v11 - 8) + 64;
        v15[3] = &unk_10010F7C8;
        sub_1000175DC(319);
        if (v14 <= 0x3F)
        {
          v16 = *(_QWORD *)(v13 - 8) + 64;
          v17 = v16;
          swift_initStructMetadata(a1, 0, 6, v15, a1 + 32);
        }
      }
    }
  }
}

_QWORD *sub_1000B0CF0(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v23);
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = type metadata accessor for FeaturedVideosViewModel(255, v8, *(_QWORD *)(a3 + 24), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    v11 = *(int *)(a3 + 36);
    v12 = (_QWORD *)((char *)a1 + v11);
    v54 = a2;
    v13 = (char *)a2 + v11;
    v14 = *(_QWORD *)((char *)a2 + v11);
    v15 = *(_QWORD *)((char *)a2 + v11 + 8);
    *v12 = v14;
    v12[1] = v15;
    v16 = type metadata accessor for Optional(255);
    v17 = *(int *)(type metadata accessor for Binding(0, v16) + 32);
    v18 = (char *)v12 + v17;
    v19 = &v13[v17];
    v20 = *(_QWORD *)(v8 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
    swift_retain(v14);
    v22 = swift_retain(v15);
    if (v21(v19, 1, v8, v22))
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v19, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v8);
    }
    v24 = *(int *)(a3 + 40);
    v25 = (char *)a1 + v24;
    v26 = (char *)v54 + v24;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v21)((char *)v54 + v24, 1, v8))
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v26, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v8);
    }
    v27 = *(int *)(type metadata accessor for State(0, v16) + 28);
    v28 = *(_QWORD *)&v26[v27];
    *(_QWORD *)&v25[v27] = v28;
    v29 = *(int *)(a3 + 44);
    v30 = *(int *)(a3 + 48);
    v31 = (_QWORD *)((char *)a1 + v29);
    v32 = (_QWORD *)((char *)v54 + v29);
    v34 = *v32;
    v33 = v32[1];
    *v31 = v34;
    v31[1] = v33;
    v35 = (_QWORD *)((char *)a1 + v30);
    v36 = (_QWORD *)((char *)v54 + v30);
    swift_retain(v28);
    swift_retain(v34);
    v37 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
      {
        v40 = sub_100007D50(&qword_100158970);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
        v41 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
      }
    }
    else
    {
      v42 = *v36;
      *v35 = *v36;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v41);
    v43 = *(int *)(a3 + 52);
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)v54 + v43);
    if (swift_getEnumCaseMultiPayload((char *)v54 + v43, v37) == 1)
    {
      v46 = type metadata accessor for UserInterfaceSizeClass(0);
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = sub_100007D50(&qword_100158970);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 16))(v44, v45, v46);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      v50 = v44;
      v51 = v37;
      v52 = 1;
    }
    else
    {
      v49 = *v45;
      *v44 = *v45;
      swift_retain(v49);
      v50 = v44;
      v51 = v37;
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v50, v51, v52);
  }
  return a1;
}

void sub_1000B1084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for FeaturedVideosViewModel(255, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = type metadata accessor for Optional(255);
  v11 = (char *)v9 + *(int *)(type metadata accessor for Binding(0, v10) + 32);
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v11, 1, v6))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v6);
  v14 = (char *)(a1 + *(int *)(a2 + 40));
  if (!v13(v14, 1, v6))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
  v15 = type metadata accessor for State(0, v10);
  swift_release(*(_QWORD *)&v14[*(int *)(v15 + 28)]);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44)));
  v16 = (_QWORD *)(a1 + *(int *)(a2 + 48));
  v17 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for UserInterfaceSizeClass(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v20 = (_QWORD *)(a1 + *(int *)(a2 + 52));
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v20, v21);
  }
  else
  {
    swift_release(*v20);
  }
}

uint64_t sub_1000B1298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void *v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v52 = a1;
  v11 = (_QWORD *)(a1 + v10);
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10);
  v14 = *(_QWORD *)(a2 + v10 + 8);
  *v11 = v13;
  v11[1] = v14;
  v15 = type metadata accessor for Optional(255);
  v16 = *(int *)(type metadata accessor for Binding(0, v15) + 32);
  v17 = (char *)v11 + v16;
  v18 = (const void *)(v12 + v16);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v19 + 48);
  swift_retain(v13);
  v21 = swift_retain(v14);
  if (v20(v18, 1, v7, v21))
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(v17, v18, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v7);
  }
  v22 = *(int *)(a3 + 40);
  v23 = (char *)(v52 + v22);
  v24 = (char *)(a2 + v22);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(a2 + v22, 1, v7))
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v24, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v23, 0, 1, v7);
  }
  v25 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v26 = *(_QWORD *)&v24[v25];
  *(_QWORD *)&v23[v25] = v26;
  v27 = *(int *)(a3 + 44);
  v28 = *(int *)(a3 + 48);
  v29 = (_QWORD *)(v52 + v27);
  v30 = (uint64_t *)(a2 + v27);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  v33 = (uint64_t *)(v52 + v28);
  v34 = (uint64_t *)(a2 + v28);
  swift_retain(v26);
  swift_retain(v32);
  v35 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for UserInterfaceSizeClass(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
    {
      v38 = sub_100007D50(&qword_100158970);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      v39 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(v33, v34, v36);
      v39 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
    }
  }
  else
  {
    v40 = *v34;
    *v33 = *v34;
    swift_retain(v40);
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v35, v39);
  v41 = *(int *)(a3 + 52);
  v42 = (uint64_t *)(v52 + v41);
  v43 = (uint64_t *)(a2 + v41);
  if (swift_getEnumCaseMultiPayload(v43, v35) == 1)
  {
    v44 = type metadata accessor for UserInterfaceSizeClass(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      v46 = sub_100007D50(&qword_100158970);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v48 = v42;
    v49 = v35;
    v50 = 1;
  }
  else
  {
    v47 = *v43;
    *v42 = *v43;
    swift_retain(v47);
    v48 = v42;
    v49 = v35;
    v50 = 0;
  }
  swift_storeEnumTagMultiPayload(v48, v49, v50);
  return v52;
}

uint64_t sub_1000B1600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10);
  v14 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v14;
  swift_retain(v14);
  swift_release(v13);
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v15;
  swift_retain(v15);
  swift_release(v16);
  v17 = type metadata accessor for Optional(255);
  v18 = *(int *)(type metadata accessor for Binding(0, v17) + 32);
  v19 = (void *)(v11 + v18);
  v20 = (void *)(v12 + v18);
  v21 = *(_QWORD *)(v7 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v19, 1, v7);
  v24 = v22(v20, 1, v7);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v19, v20, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v19, v7);
LABEL_6:
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v19, v20, v7);
LABEL_7:
  v25 = *(int *)(a3 + 40);
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = v22((void *)(a1 + v25), 1, v7);
  v29 = v22(v27, 1, v7);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v26, v27, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v26, 0, 1, v7);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v7);
LABEL_12:
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v26, v27, v7);
LABEL_13:
  v30 = *(int *)(type metadata accessor for State(0, v17) + 28);
  v31 = *(_QWORD *)&v26[v30];
  v32 = *(_QWORD *)&v27[v30];
  *(_QWORD *)&v26[v30] = v32;
  swift_retain(v32);
  swift_release(v31);
  v33 = *(int *)(a3 + 44);
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_QWORD *)(a1 + v33);
  v37 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(a1 + v33) = v37;
  swift_retain(v37);
  swift_release(v36);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  if (a1 != a2)
  {
    v38 = *(int *)(a3 + 48);
    v39 = (uint64_t *)(a1 + v38);
    v40 = (uint64_t *)(a2 + v38);
    sub_100007F38(a1 + v38, &qword_100158968);
    v41 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
    {
      v42 = type metadata accessor for UserInterfaceSizeClass(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v42))
      {
        v44 = sub_100007D50(&qword_100158970);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        v45 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16))(v39, v40, v42);
        v45 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
      }
    }
    else
    {
      v46 = *v40;
      *v39 = *v40;
      swift_retain(v46);
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v41, v45);
    v47 = *(int *)(a3 + 52);
    v48 = (uint64_t *)(a1 + v47);
    v49 = (uint64_t *)(a2 + v47);
    sub_100007F38(a1 + v47, &qword_100158968);
    v50 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for UserInterfaceSizeClass(0);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48))(v49, 1, v51))
      {
        v53 = sub_100007D50(&qword_100158970);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v52 + 16))(v48, v49, v51);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
      }
      v55 = v48;
      v56 = v50;
      v57 = 1;
    }
    else
    {
      v54 = *v49;
      *v48 = *v49;
      swift_retain(v54);
      v55 = v48;
      v56 = v50;
      v57 = 0;
    }
    swift_storeEnumTagMultiPayload(v55, v56, v57);
  }
  return a1;
}

uint64_t sub_1000B1A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (_QWORD *)(a1 + v10);
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a2 + v10 + 8);
  *v11 = *(_QWORD *)(a2 + v10);
  v11[1] = v13;
  v14 = type metadata accessor for Optional(255);
  v15 = *(int *)(type metadata accessor for Binding(0, v14) + 32);
  v16 = (char *)v11 + v15;
  v17 = (const void *)(v12 + v15);
  v18 = *(_QWORD *)(v7 - 8);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v17, 1, v7))
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v18 + 32))(v16, v17, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v7);
  }
  v20 = *(int *)(a3 + 40);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  if (v19((const void *)(a2 + v20), 1, v7))
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v22, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v7);
  }
  v23 = type metadata accessor for State(0, v14);
  *(_QWORD *)&v21[*(int *)(v23 + 28)] = *(_QWORD *)&v22[*(int *)(v23 + 28)];
  v24 = *(int *)(a3 + 48);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for UserInterfaceSizeClass(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v28))
    {
      v30 = sub_100007D50(&qword_100158970);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v25, v26, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
    }
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v31 = *(int *)(a3 + 52);
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (swift_getEnumCaseMultiPayload(v33, v27) == 1)
  {
    v34 = type metadata accessor for UserInterfaceSizeClass(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_100007D50(&qword_100158970);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    swift_storeEnumTagMultiPayload(v32, v27, 1);
  }
  else
  {
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000B1D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for FeaturedVideosViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_release(v13);
  v14 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_release(v14);
  v15 = type metadata accessor for Optional(255);
  v16 = *(int *)(type metadata accessor for Binding(0, v15) + 32);
  v17 = (void *)(v11 + v16);
  v18 = (void *)(v12 + v16);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v17, 1, v7);
  v22 = v20(v18, 1, v7);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v17, v18, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v17, v7);
LABEL_6:
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v17, v18, v7);
LABEL_7:
  v23 = *(int *)(a3 + 40);
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = v20((void *)(a1 + v23), 1, v7);
  v27 = v20(v25, 1, v7);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v25, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v7);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v24, v7);
LABEL_12:
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v24, v25, v7);
LABEL_13:
  v28 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v29 = *(_QWORD *)&v24[v28];
  *(_QWORD *)&v24[v28] = *(_QWORD *)&v25[v28];
  swift_release(v29);
  v30 = *(int *)(a3 + 44);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_release(v33);
  *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
  if (a1 != a2)
  {
    v34 = *(int *)(a3 + 48);
    v35 = (void *)(a1 + v34);
    v36 = (const void *)(a2 + v34);
    sub_100007F38(a1 + v34, &qword_100158968);
    v37 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
      {
        v40 = sub_100007D50(&qword_100158970);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v39 + 32))(v35, v36, v38);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
      }
      swift_storeEnumTagMultiPayload(v35, v37, 1);
    }
    else
    {
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    v41 = *(int *)(a3 + 52);
    v42 = (void *)(a1 + v41);
    v43 = (const void *)(a2 + v41);
    sub_100007F38(a1 + v41, &qword_100158968);
    v44 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for UserInterfaceSizeClass(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v45))
      {
        v47 = sub_100007D50(&qword_100158970);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v42, v43, v45);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
      }
      swift_storeEnumTagMultiPayload(v42, v44, 1);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000B21A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B21B0);
}

uint64_t sub_1000B21B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v7 = type metadata accessor for FeaturedVideosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, a2, v8);
  v11 = type metadata accessor for Optional(255);
  v12 = type metadata accessor for Binding(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v14 = v12;
    v15 = *(int *)(a3 + 36);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1 + v15, a2, v14);
  }
  v16 = type metadata accessor for State(0, v11);
  v13 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v14 = v16;
    v15 = *(int *)(a3 + 40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1 + v15, a2, v14);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v14 = sub_100007D50(&qword_100158978);
    v13 = *(_QWORD *)(v14 - 8);
    v15 = *(int *)(a3 + 48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1 + v15, a2, v14);
  }
  v17 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_1000B22DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B22E8);
}

uint64_t sub_1000B22E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v8 = type metadata accessor for FeaturedVideosViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    v14 = type metadata accessor for Optional(255);
    v15 = type metadata accessor for Binding(0, v14);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      v11 = v15;
      v17 = *(int *)(a4 + 36);
    }
    else
    {
      result = type metadata accessor for State(0, v14);
      v16 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v16 + 84) == a3)
      {
        v11 = result;
        v17 = *(int *)(a4 + 40);
      }
      else
      {
        if (a3 == 2147483646)
        {
          *(_QWORD *)(a1 + *(int *)(a4 + 44)) = a2;
          return result;
        }
        v11 = sub_100007D50(&qword_100158978);
        v16 = *(_QWORD *)(v11 - 8);
        v17 = *(int *)(a4 + 48);
      }
    }
    v13 = a1 + v17;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }
  return v12(v13, a2, a2, v11);
}

uint64_t sub_1000B2410(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118D6C, 1);
}

uint64_t sub_1000B2448@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000AE260(*(void (**)(_QWORD, _QWORD))(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_1000B2464@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000AF0BC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000B2474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B2490((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000B0840, a2, a3, a4);
}

uint64_t sub_1000B2484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B2490(sub_1000B09A4, a2, a3, a4);
}

uint64_t sub_1000B2490(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedVideosView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

unint64_t sub_1000B24F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DD00;
  if (!qword_10015DD00)
  {
    v1 = sub_100007D00(&qword_10015DCF8);
    sub_1000B255C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DD00);
  }
  return result;
}

unint64_t sub_1000B255C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DD08;
  if (!qword_10015DD08)
  {
    v1 = sub_100007D00(&qword_10015DD10);
    sub_10003B9E0();
    sub_10000F4E0(&qword_10015C400, qword_10015C408, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DD08);
  }
  return result;
}

uint64_t sub_1000B25E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Optional(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - v3, a1, v2);
  v6 = type metadata accessor for Binding(0, v2);
  return Binding.wrappedValue.setter(v4, v6);
}

uint64_t sub_1000B2680@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000AF42C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000B2690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for FeaturedVideosView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v30 = *(_QWORD *)(v8 + 64);
  v11 = v4 + v10;
  v13 = type metadata accessor for FeaturedVideosViewModel(255, v5, v6, v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v4 + v10, v14);
  v15 = (_QWORD *)(v4 + v10 + v7[9]);
  swift_release(*v15);
  swift_release(v15[1]);
  v16 = type metadata accessor for Optional(255);
  v17 = (char *)v15 + *(int *)(type metadata accessor for Binding(0, v16) + 32);
  v18 = *(_QWORD *)(v5 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (!v19(v17, 1, v5))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v5);
  v20 = (char *)(v11 + v7[10]);
  if (!v19(v20, 1, v5))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v5);
  v21 = type metadata accessor for State(0, v16);
  swift_release(*(_QWORD *)&v20[*(int *)(v21 + 28)]);
  swift_release(*(_QWORD *)(v11 + v7[11]));
  v22 = (_QWORD *)(v11 + v7[12]);
  v23 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v26 = (_QWORD *)(v11 + v7[13]);
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    swift_release(*v26);
  }
  return swift_deallocObject(v4, v10 + v30, v9 | 7);
}

uint64_t sub_1000B28CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FeaturedVideosView(0, v6, v7, a2) - 8) + 80);
  return sub_1000AF780(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_1000B2934@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000B01C8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000B2940(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_10015DCF8);
  v4 = type metadata accessor for Array(255, v1);
  v6 = type metadata accessor for FeaturedVideoPlayer(255, v1, v2, v5);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _AspectRatioLayout);
  v8 = sub_100007D00(&qword_100158640);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  v10 = sub_100007D00(&qword_100159D08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v9, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(255, v12, WitnessTable);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v46 = v14;
  v47 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v18 = *(void **)(v2 + 8);
  v46 = v4;
  v47 = v1;
  v48 = OpaqueTypeMetadata2;
  v49 = (void *)v17;
  v50 = v18;
  v19 = type metadata accessor for ForEach(255, &v46);
  v46 = v14;
  v47 = v15;
  swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v19);
  v21 = type metadata accessor for LazyHStack(255, v19, v20);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for LazyHStack<A>, v21);
  v46 = v21;
  v47 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v46 = v21;
  v47 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v25 = type metadata accessor for ScrollView(255, v23, OpaqueTypeConformance2);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v25);
  v46 = v25;
  v47 = v26;
  v27 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v46 = v25;
  v47 = v26;
  v28 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v46 = v27;
  v47 = v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v30 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v46 = v27;
  v47 = v28;
  v31 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v46 = v29;
  v47 = v30;
  v48 = v31;
  v49 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v32 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v46 = v29;
  v47 = v30;
  v48 = v31;
  v49 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v33 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v46 = v32;
  v47 = v1;
  v48 = v33;
  v49 = v18;
  v34 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v35 = type metadata accessor for ModifiedContent(255, v34, &type metadata for _FlexFrameLayout);
  v36 = type metadata accessor for Optional(255);
  v46 = v32;
  v47 = v1;
  v48 = v33;
  v49 = v18;
  swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v36);
  v46 = v35;
  v47 = v36;
  v48 = v37;
  v49 = (void *)v38;
  v39 = swift_getOpaqueTypeMetadata2(255, &v46, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _AppearanceActionModifier);
  v41 = swift_getTupleTypeMetadata2(255, v3, v40, 0, 0);
  v42 = type metadata accessor for TupleView(255, v41);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  v44 = type metadata accessor for VStack(255, v42, v43);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v44);
}

unint64_t sub_1000B2D64(uint64_t a1)
{
  unint64_t result;

  result = sub_1000B2D88();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B2D88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DD20;
  if (!qword_10015DD20)
  {
    v1 = type metadata accessor for Playlist(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Playlist, v1);
    atomic_store(result, (unint64_t *)&qword_10015DD20);
  }
  return result;
}

_QWORD *sub_1000B2DD0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_100007D50(&qword_10015DD28);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = v21;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = (int *)type metadata accessor for EventRowViewModel(0);
    v10 = v9[6];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v15 = swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13, v15);
    v16 = v9[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)((char *)a2 + v16 + 24);
    if (v19)
    {
      v20 = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 3) = v19;
      *((_QWORD *)v17 + 4) = v20;
      (**(void (***)(void))(v19 - 8))();
    }
    else
    {
      v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
    }
    *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    v23 = v9[9];
    v24 = *(_QWORD *)((char *)a2 + v23);
    *(_QWORD *)((char *)a1 + v23) = v24;
    v25 = *(int *)(v6 + 28);
    v21 = *(_QWORD *)((char *)a2 + v25);
    *(_QWORD *)((char *)a1 + v25) = v21;
    swift_retain(v24);
  }
  swift_retain(v21);
  return a1;
}

double sub_1000B2F14(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for EventRowViewModel(0);
  v3 = a1 + v2[6];
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (_QWORD *)(a1 + v2[7]);
  if (v5[3])
    sub_1000228FC(v5);
  swift_release(*(_QWORD *)(a1 + v2[9]));
  v6 = *(_QWORD *)(a1 + *(int *)(sub_100007D50(&qword_10015DD28) + 28));
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

_QWORD *sub_1000B2FAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  v11(v8, v9, v10, v12);
  v13 = v6[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v19 = v6[9];
  v20 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  v21 = *(int *)(sub_100007D50(&qword_10015DD28) + 28);
  v22 = *(_QWORD *)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  swift_retain(v22);
  return a1;
}

_QWORD *sub_1000B30C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 24);
  if (!*(_QWORD *)((char *)a1 + v11 + 24))
  {
    if (v14)
    {
      *((_QWORD *)v12 + 3) = v14;
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      (**(void (***)(char *, char *))(v14 - 8))(v12, v13);
      goto LABEL_8;
    }
LABEL_7:
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
    *(_OWORD *)v12 = v15;
    *((_OWORD *)v12 + 1) = v16;
    goto LABEL_8;
  }
  if (!v14)
  {
    sub_1000228FC(v12);
    goto LABEL_7;
  }
  sub_100084B54(v12, v13);
LABEL_8:
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v17 = v6[9];
  v18 = *(_QWORD *)((char *)a1 + v17);
  v19 = *(_QWORD *)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  swift_retain(v19);
  swift_release(v18);
  v20 = *(int *)(sub_100007D50(&qword_10015DD28) + 28);
  v21 = *(_QWORD *)((char *)a1 + v20);
  v22 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  swift_retain(v22);
  swift_release(v21);
  return a1;
}

_OWORD *sub_1000B3228(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for EventRowViewModel(0);
  v6 = v5[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = v5[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *((_BYTE *)a1 + v5[8]) = *((_BYTE *)a2 + v5[8]);
  *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
  v14 = sub_100007D50(&qword_10015DD28);
  *(_QWORD *)((char *)a1 + *(int *)(v14 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 28));
  return a1;
}

_QWORD *sub_1000B32E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  if (*(_QWORD *)((char *)a1 + v11 + 24))
    sub_1000228FC((_QWORD *)((char *)a1 + v11));
  v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((_QWORD *)v12 + 4) = *(_QWORD *)((char *)a2 + v11 + 32);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v14 = v6[9];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_release(v15);
  v16 = *(int *)(sub_100007D50(&qword_10015DD28) + 28);
  v17 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_release(v17);
  return a1;
}

uint64_t sub_1000B33E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B33EC);
}

uint64_t sub_1000B33EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015DD28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000B342C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B3438);
}

uint64_t sub_1000B3438(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015DD28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for EventRow(uint64_t a1)
{
  return sub_100025D84(a1, (uint64_t *)&unk_10015DD88, (uint64_t)&nominal type descriptor for EventRow);
}

uint64_t sub_1000B3490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B6410(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000B349C);
}

void sub_1000B349C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015DD98)
  {
    v2 = type metadata accessor for EventRowViewModel(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015DD98);
  }
}

uint64_t sub_1000B34F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118E50, 1);
}

uint64_t sub_1000B3500@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v82 = a1;
  v83 = type metadata accessor for TaskPriority(0);
  v81 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v80 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for EventRow(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v4;
  __chkstk_darwin(v3);
  v77 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EventRowViewModel(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char **)((char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = type metadata accessor for AccessibilityChildBehavior(0, v7);
  v10 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015DDC8);
  __chkstk_darwin(v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015DDD0);
  __chkstk_darwin(v16);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_10015DDD8);
  v20 = *(_QWORD *)(v19 - 8);
  v73 = v19;
  v74 = v20;
  __chkstk_darwin(v19);
  v69 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100007D50(&qword_10015DDE0);
  __chkstk_darwin(v76);
  v71 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v75 = (char *)&v69 - v24;
  *(_QWORD *)v15 = static VerticalAlignment.center.getter(v25);
  *((_QWORD *)v15 + 1) = 0x4026000000000000;
  v15[16] = 0;
  v26 = (uint64_t)&v15[*(int *)(sub_100007D50(&qword_10015DDE8) + 44)];
  v70 = v1;
  v27 = sub_1000B3A80(v26);
  v28 = static Edge.Set.top.getter(v27);
  sub_100007E78((uint64_t)v15, (uint64_t)v18, &qword_10015DDC8);
  v29 = &v18[*(int *)(v16 + 36)];
  *v29 = v28;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  v29[40] = 1;
  v30 = sub_100007F38((uint64_t)v15, &qword_10015DDC8);
  static AccessibilityChildBehavior.ignore.getter(v30);
  v31 = sub_100032B98(&qword_10015DDF0, &qword_10015DDD0, &qword_10015DDF8, &qword_10015DDC8);
  View.accessibilityElement(children:)(v12, v16, v31);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v72);
  sub_100007F38((uint64_t)v18, &qword_10015DDD0);
  v32 = sub_100007D50(&qword_10015DD28);
  State.wrappedValue.getter(v9, v32);
  v33 = sub_1000883F4();
  v35 = v34;
  sub_10001E24C((uint64_t)v9, type metadata accessor for EventRowViewModel);
  v84 = v33;
  v85 = v35;
  sub_10001DB0C();
  v36 = Text.init<A>(_:)(&v84, &type metadata for String);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v84 = v16;
  v85 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v44 = (uint64_t)v71;
  v45 = v73;
  v46 = v69;
  View.accessibility(label:)(v36, v38, v42, v40, v73, OpaqueTypeConformance2);
  sub_100007D90(v36, v38, v42);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v46, v45);
  v47 = sub_100007D50(&qword_10015C300);
  v48 = swift_allocObject(v47, 64, 7);
  *(_OWORD *)(v48 + 16) = xmmword_100109020;
  v49 = v70;
  State.wrappedValue.getter(v9, v32);
  v51 = v9[2];
  v50 = v9[3];
  swift_bridgeObjectRetain(v50);
  sub_10001E24C((uint64_t)v9, type metadata accessor for EventRowViewModel);
  v84 = v51;
  v85 = v50;
  *(_QWORD *)(v48 + 32) = Text.init<A>(_:)(&v84, &type metadata for String);
  *(_QWORD *)(v48 + 40) = v52;
  *(_BYTE *)(v48 + 48) = v53 & 1;
  *(_QWORD *)(v48 + 56) = v54;
  v55 = (uint64_t)v75;
  ModifiedContent<>.accessibility(inputLabels:)(v48, v76);
  swift_bridgeObjectRelease();
  sub_100007F38(v44, &qword_10015DDE0);
  v56 = v77;
  sub_10001BFB8(v49, v77, type metadata accessor for EventRow);
  v57 = *(unsigned __int8 *)(v78 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = swift_allocObject(&unk_10014E500, v58 + v79, v57 | 7);
  v60 = sub_1000B481C(v56, v59 + v58);
  v61 = v80;
  static TaskPriority.userInitiated.getter(v60);
  v62 = sub_100007D50(&qword_10015DE10);
  v63 = v82;
  v64 = (char *)(v82 + *(int *)(v62 + 36));
  v65 = type metadata accessor for _TaskModifier(0);
  v66 = v81;
  v67 = v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(&v64[*(int *)(v65 + 20)], v61, v83);
  *(_QWORD *)v64 = &unk_10015DE08;
  *((_QWORD *)v64 + 1) = v59;
  sub_100007E78(v55, v63, &qword_10015DDE0);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v67);
  return sub_100007F38(v55, &qword_10015DDE0);
}

uint64_t sub_1000B3A80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[9];
  _OWORD v72[2];
  _OWORD v73[11];
  char v74;
  __int128 v75;
  _BYTE v76[177];
  _QWORD v77[2];
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v58 = a1;
  v1 = type metadata accessor for Divider(0);
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  __chkstk_darwin(v1);
  v54 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v53 = (char *)&v50 - v4;
  v5 = sub_100007D50(&qword_10015DE18);
  __chkstk_darwin(v5);
  v57 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v51 = (uint64_t *)((char *)&v50 - v8);
  v9 = type metadata accessor for EventRowImage(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100007D50(&qword_10015DE20);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100007D50(&qword_10015DE28);
  __chkstk_darwin(v15);
  v59 = (uint64_t)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v50 - v18;
  v52 = (uint64_t)&v50 - v18;
  v20 = sub_100007D50(&qword_10015DD28);
  State.wrappedValue.getter(v11, v20);
  sub_10001BFB8((uint64_t)v11, (uint64_t)v14, type metadata accessor for EventRowImage);
  v14[*(int *)(v12 + 36)] = 1;
  v21 = sub_10001E24C((uint64_t)v11, type metadata accessor for EventRowImage);
  LOBYTE(v12) = static Edge.Set.bottom.getter(v21);
  v22 = v59;
  sub_100007E78((uint64_t)v14, v59, &qword_10015DE20);
  v23 = v22 + *(int *)(v15 + 36);
  *(_BYTE *)v23 = v12;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_BYTE *)(v23 + 40) = 1;
  sub_100007F38((uint64_t)v14, &qword_10015DE20);
  v24 = sub_100018EB4(v22, (uint64_t)v19, &qword_10015DE28);
  v25 = static HorizontalAlignment.leading.getter(v24);
  v26 = (uint64_t)v51;
  *v51 = v25;
  *(_QWORD *)(v26 + 8) = 0x4030000000000000;
  *(_BYTE *)(v26 + 16) = 0;
  v27 = sub_100007D50(&qword_10015DE30);
  v28 = v26 + *(int *)(v27 + 44);
  v29 = static HorizontalAlignment.leading.getter(v27);
  v30 = sub_1000B3FB8((uint64_t)v71);
  *(_OWORD *)((char *)&v73[4] + 7) = v71[4];
  *(_OWORD *)((char *)&v73[3] + 7) = v71[3];
  *(_OWORD *)((char *)&v73[7] + 7) = v71[7];
  *(_OWORD *)((char *)&v73[8] + 7) = v71[8];
  *(_OWORD *)((char *)&v73[9] + 7) = v72[0];
  v73[10] = *(_OWORD *)((char *)v72 + 9);
  *(_OWORD *)((char *)&v73[5] + 7) = v71[5];
  *(_OWORD *)((char *)&v73[6] + 7) = v71[6];
  *(_OWORD *)((char *)v73 + 7) = v71[0];
  v74 = 0;
  *(_OWORD *)((char *)&v73[1] + 7) = v71[1];
  *(_OWORD *)((char *)&v73[2] + 7) = v71[2];
  v68 = v73[8];
  v69 = v73[9];
  v70 = *(_OWORD *)((char *)v72 + 9);
  v64 = v73[4];
  v65 = v73[5];
  v66 = v73[6];
  v67 = v73[7];
  v60 = v73[0];
  v61 = v73[1];
  v62 = v73[2];
  v63 = v73[3];
  v31 = v53;
  Divider.init()(v30);
  v32 = v54;
  v33 = v55;
  v34 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v35 = v56;
  v34(v54, v31, v56);
  *(_OWORD *)&v76[113] = v67;
  *(_OWORD *)&v76[129] = v68;
  *(_OWORD *)&v76[145] = v69;
  *(_OWORD *)&v76[161] = v70;
  *(_OWORD *)&v76[49] = v63;
  *(_OWORD *)&v76[65] = v64;
  *(_OWORD *)&v76[81] = v65;
  *(_OWORD *)&v76[97] = v66;
  *(_OWORD *)&v76[1] = v60;
  *(_QWORD *)&v75 = v29;
  *((_QWORD *)&v75 + 1) = 0x4014000000000000;
  v76[0] = 0;
  *(_OWORD *)&v76[17] = v61;
  *(_OWORD *)&v76[33] = v62;
  v36 = *(_OWORD *)&v76[160];
  *(_OWORD *)(v28 + 160) = *(_OWORD *)&v76[144];
  *(_OWORD *)(v28 + 176) = v36;
  *(_BYTE *)(v28 + 192) = v76[176];
  v37 = *(_OWORD *)&v76[96];
  *(_OWORD *)(v28 + 96) = *(_OWORD *)&v76[80];
  *(_OWORD *)(v28 + 112) = v37;
  v38 = *(_OWORD *)&v76[128];
  *(_OWORD *)(v28 + 128) = *(_OWORD *)&v76[112];
  *(_OWORD *)(v28 + 144) = v38;
  v39 = *(_OWORD *)&v76[32];
  *(_OWORD *)(v28 + 32) = *(_OWORD *)&v76[16];
  *(_OWORD *)(v28 + 48) = v39;
  v40 = *(_OWORD *)&v76[64];
  *(_OWORD *)(v28 + 64) = *(_OWORD *)&v76[48];
  *(_OWORD *)(v28 + 80) = v40;
  v41 = *(_OWORD *)v76;
  *(_OWORD *)v28 = v75;
  *(_OWORD *)(v28 + 16) = v41;
  v42 = sub_100007D50(&qword_10015DE38);
  v34((char *)(v28 + *(int *)(v42 + 48)), v32, v35);
  sub_1000B48D8((uint64_t)&v75);
  v43 = *(void (**)(char *, uint64_t))(v33 + 8);
  v43(v31, v35);
  v43(v32, v35);
  v86 = v67;
  v87 = v68;
  v88 = v69;
  v89 = v70;
  v82 = v63;
  v83 = v64;
  v84 = v65;
  v85 = v66;
  v79 = v60;
  v80 = v61;
  v77[0] = v29;
  v77[1] = 0x4014000000000000;
  v78 = 0;
  v81 = v62;
  sub_1000B49E8((uint64_t)v77);
  v44 = v52;
  v45 = v59;
  sub_100007E78(v52, v59, &qword_10015DE28);
  v46 = v57;
  sub_100007E78(v26, v57, &qword_10015DE18);
  v47 = v58;
  sub_100007E78(v45, v58, &qword_10015DE28);
  v48 = sub_100007D50(&qword_10015DE40);
  sub_100007E78(v46, v47 + *(int *)(v48 + 48), &qword_10015DE18);
  sub_100007F38(v26, &qword_10015DE18);
  sub_100007F38(v44, &qword_10015DE28);
  sub_100007F38(v46, &qword_10015DE18);
  return sub_100007F38(v45, &qword_10015DE28);
}

uint64_t sub_1000B3FB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t KeyPath;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  char v108;
  char v109;

  v2 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v2);
  v95 = (uint64_t)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for EventRowViewModel(0);
  __chkstk_darwin(v94);
  *(_QWORD *)&v93 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v91 - v6);
  v8 = sub_100007D50(&qword_10015DD28);
  v92 = v8;
  State.wrappedValue.getter(v7, v8);
  v9 = *v7;
  v10 = v7[1];
  swift_bridgeObjectRetain(v10);
  sub_10001E24C((uint64_t)v7, type metadata accessor for EventRowViewModel);
  v104 = v9;
  v105 = v10;
  sub_10001DB0C();
  v11 = Text.init<A>(_:)(&v104, &type metadata for String);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.subheadline.getter(v11);
  v19 = Text.font(_:)(v18, v11, v13, v17, v15);
  v99 = v20;
  v100 = v19;
  v96 = v21;
  v101 = v22;
  swift_release(v18);
  sub_100007D90(v11, v13, v17);
  swift_bridgeObjectRelease();
  State.wrappedValue.getter(v7, v8);
  v24 = v7[2];
  v23 = v7[3];
  swift_bridgeObjectRetain(v23);
  sub_10001E24C((uint64_t)v7, type metadata accessor for EventRowViewModel);
  v104 = v24;
  v105 = v23;
  v25 = Text.init<A>(_:)(&v104, &type metadata for String);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.Weight.medium.getter(v25);
  v33 = Text.fontWeight(_:)(*(_QWORD *)&v32, 0, v25, v27, v31, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_100007D90(v25, v27, v31);
  v40 = swift_bridgeObjectRelease();
  v41 = static Font.body.getter(v40);
  v98 = Text.font(_:)(v41, v33, v35, v39, v37);
  v102 = v42;
  v103 = v43;
  v45 = v44;
  swift_release(v41);
  v46 = v39;
  v47 = v93;
  sub_100007D90(v33, v35, v46);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010F960);
  State.wrappedValue.getter(*(_QWORD **)&v47, v92);
  v48 = *(_QWORD *)(*(_QWORD *)&v47 + *(int *)(v94 + 36));
  if (!v48)
  {
    v76 = type metadata accessor for ArtistPromotionalAssets(0);
    v53 = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v95, 1, 1, v76);
    goto LABEL_5;
  }
  v49 = swift_getKeyPath(&unk_10010F990);
  v104 = v48;
  v50 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v49, v50);
  swift_release(v49);
  v51 = v48 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v48 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, &v104, 0, 0);
  v52 = v51;
  v53 = v95;
  sub_100007E78(v52, v95, &qword_10015A610);
  v54 = type metadata accessor for ArtistPromotionalAssets(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v53, 1, v54) == 1)
  {
LABEL_5:
    sub_100007F38(v53, &qword_10015A610);
    sub_10001E24C(*(uint64_t *)&v47, type metadata accessor for EventRowViewModel);
    v66 = 0;
    v65 = 0;
    v74 = 0;
    v64 = 0;
    v75 = 0;
    v67 = 0.0;
    v69 = 0;
    v71 = 0;
    v73 = 0;
    goto LABEL_6;
  }
  sub_100007F38(v53, &qword_10015A610);
  sub_10001E24C(*(uint64_t *)&v47, type metadata accessor for EventRowViewModel);
  v55 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100114370);
  v57 = v56;
  v59 = v58;
  v61 = v60;
  v62 = static Edge.Set.top.getter(v55);
  v63 = EdgeInsets.init(_all:)(3.0);
  v64 = v61;
  v65 = v57;
  v66 = v55;
  v67 = v63;
  v69 = v68;
  v71 = v70;
  v73 = v72;
  v74 = v59 & 1;
  v75 = v62;
LABEL_6:
  v93 = v67;
  v94 = v69;
  v95 = v71;
  v77 = v96 & 1;
  v106 = v96 & 1;
  v78 = v45 & 1;
  v109 = v96 & 1;
  v108 = v45 & 1;
  v107 = 0;
  v79 = v100;
  v80 = v101;
  *(_QWORD *)a1 = v100;
  v81 = v79;
  v83 = v98;
  v82 = v99;
  *(_QWORD *)(a1 + 8) = v99;
  v84 = v82;
  *(_BYTE *)(a1 + 16) = v77;
  *(_QWORD *)(a1 + 24) = v80;
  *(_QWORD *)(a1 + 32) = 0x3FE3333333333333;
  v85 = v102;
  *(_QWORD *)(a1 + 40) = v83;
  *(_QWORD *)(a1 + 48) = v85;
  *(_BYTE *)(a1 + 56) = v78;
  v86 = KeyPath;
  *(_QWORD *)(a1 + 64) = v103;
  *(_QWORD *)(a1 + 72) = v86;
  *(_QWORD *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v66;
  *(_QWORD *)(a1 + 104) = v65;
  *(_QWORD *)(a1 + 112) = v74;
  *(_QWORD *)(a1 + 120) = v64;
  *(_QWORD *)(a1 + 128) = v75;
  *(double *)(a1 + 136) = v67;
  *(_QWORD *)(a1 + 144) = v69;
  *(_QWORD *)(a1 + 152) = v71;
  *(_QWORD *)(a1 + 160) = v73;
  *(_BYTE *)(a1 + 168) = 0;
  v87 = v66;
  v88 = v64;
  v89 = v74;
  sub_10000F844(v81, v84, v77);
  swift_bridgeObjectRetain(v80);
  sub_10000F844(v83, v102, v78);
  swift_bridgeObjectRetain(v103);
  swift_retain(v86);
  sub_1000B49B8(v87, v65, v89, v88);
  sub_10000C20C(v87, v65, v89, v88);
  sub_100007D90(v98, v102, v78);
  swift_release(KeyPath);
  swift_bridgeObjectRelease();
  sub_100007D90(v100, v99, v106);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B4568(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = a1;
  v2 = type metadata accessor for EventRowViewModel(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[6] = v5;
  v1[7] = v6;
  return swift_task_switch(sub_1000B45F8, v5, v6);
}

uint64_t sub_1000B45F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD **)(v0 + 32);
  v3 = sub_100007D50(&qword_10015DD28);
  State.wrappedValue.getter(v1, v3);
  v4 = *(_QWORD *)((char *)v1 + *(int *)(v2 + 36));
  *(_QWORD *)(v0 + 64) = v4;
  swift_retain(v4);
  sub_10001E24C((uint64_t)v1, type metadata accessor for EventRowViewModel);
  if (v4)
  {
    v5 = (_QWORD *)swift_task_alloc(dword_10015F784);
    *(_QWORD *)(v0 + 72) = v5;
    *v5 = v0;
    v5[1] = sub_1000B46B0;
    return sub_1000E96D8();
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 40));
    swift_task_dealloc(*(_QWORD *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B46B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_1000B4704, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1000B4704()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B4740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(type metadata accessor for EventRow(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v0 + v3 + v6[6];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (_QWORD *)(v0 + v3 + v6[7]);
  if (v9[3])
    sub_1000228FC(v9);
  swift_release(*(_QWORD *)(v5 + v6[9]));
  v10 = sub_100007D50(&qword_10015DD28);
  swift_release(*(_QWORD *)(v5 + *(int *)(v10 + 28)));
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000B481C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRow(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B4860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventRow(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015DE04);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000FAC0;
  return sub_1000B4568(v3);
}

uint64_t type metadata accessor for EventRowImage(uint64_t a1)
{
  return sub_100025D84(a1, qword_10015DEA0, (uint64_t)&nominal type descriptor for EventRowImage);
}

uint64_t sub_1000B48D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_BYTE *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 144);
  sub_10000F844(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_10000F844(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  sub_1000B49B8(v12, v11, v8, v10);
  return a1;
}

uint64_t sub_1000B49B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1000B49E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 144);
  sub_100007D90(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_100007D90(v2, v3, v4);
  swift_release(v5);
  swift_bridgeObjectRelease();
  sub_10000C20C(v10, v9, v6, v8);
  return a1;
}

uint64_t sub_1000B4AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[3];

  v56 = a1;
  v2 = type metadata accessor for Calendar(0);
  v52 = *(_QWORD *)(v2 - 8);
  v53 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100007D50(&qword_10015DF10);
  __chkstk_darwin(v55);
  v9 = (uint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015DF18);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100007D50(&qword_10015DF20);
  __chkstk_darwin(v54);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v49 - v20;
  v22 = type metadata accessor for EventRowViewModel(0);
  if (*(_BYTE *)(v1 + *(int *)(v22 + 32)) == 1)
  {
    v23 = sub_10008829C((uint64_t)v12);
    v24 = static Animation.easeInOut.getter(v23);
    v25 = Transaction.init(animation:)(v24);
    v26 = sub_100007D50(&qword_10015DF40);
    v27 = sub_1000B66BC();
    v28 = AsyncImage.init(url:scale:transaction:content:)(v12, v25, sub_1000B4E94, 0, v26, v27, 1.0);
    v29 = static Alignment.center.getter(v28);
    _FrameLayout.init(width:height:alignment:)(v57, 0x4049000000000000, 0, 0x4049000000000000, 0, v29, v30);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v16, v13);
    v31 = v54;
    v32 = &v18[*(int *)(v54 + 36)];
    v33 = v57[1];
    *(_OWORD *)v32 = v57[0];
    *((_OWORD *)v32 + 1) = v33;
    *((_OWORD *)v32 + 2) = v57[2];
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    sub_100018EB4((uint64_t)v18, (uint64_t)v21, &qword_10015DF20);
    sub_100007E78((uint64_t)v21, (uint64_t)v9, &qword_10015DF20);
    swift_storeEnumTagMultiPayload(v9, v55, 0);
    v34 = sub_1000B65F4();
    v35 = sub_1000B6678();
    _ConditionalContent<>.init(storage:)(v9, v31, &type metadata for CalendarIcon, v34, v35);
    return sub_100007F38((uint64_t)v21, &qword_10015DF20);
  }
  else
  {
    v37 = v1 + *(int *)(v22 + 24);
    v38 = sub_100016124();
    v40 = v39;
    v42 = v50;
    v41 = v51;
    v43.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t))(v50 + 104))(v7, enum case for Calendar.Component.day(_:), v51);
    static Calendar.current.getter(v43);
    v44 = Calendar.component(_:from:)(v7, v37);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v4, v53);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v41);
    *(_QWORD *)&v57[0] = v44;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *v9 = v38;
    v9[1] = v40;
    v9[2] = v45;
    v9[3] = v46;
    swift_storeEnumTagMultiPayload(v9, v55, 1);
    v47 = sub_1000B65F4();
    v48 = sub_1000B6678();
    return _ConditionalContent<>.init(storage:)(v9, v54, &type metadata for CalendarIcon, v47, v48);
  }
}

double sub_1000B4E94@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double result;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  _OWORD v70[4];
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[42];

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 88))(v12, v8);
  if ((_DWORD)v13 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v12, v8);
    v14 = *v12;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v15 = Image.resizable(capInsets:resizingMode:)(v7, v14, 0.0, 0.0, 0.0, 0.0);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v17 = static Color.black.getter(v16);
    v18 = Color.opacity(_:)(0.1);
    swift_release(v17);
    *(_QWORD *)&v56 = v15;
    *((_QWORD *)&v56 + 1) = v18;
    v57 = xmmword_1001087E0;
    *(_QWORD *)&v58 = 0x4010000000000000;
    sub_1000B67EC((uint64_t)&v56);
    sub_100018EB4((uint64_t)&v56, (uint64_t)&v81, &qword_10015DF78);
    swift_retain(v15);
    swift_retain(v18);
    v19 = sub_100007D50(&qword_100159470);
    v20 = sub_100007D50(&qword_10015DF68);
    v21 = sub_10001E0A8(&qword_100159468, &qword_100159470, (void (*)(void))sub_100025EB0);
    v22 = sub_10000F4E0(&qword_10015DF60, &qword_10015DF68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(&v81, v19, v20, v21, v22);
    v67 = v53;
    v68 = v54;
    v69[0] = v55[0];
    *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)((char *)v55 + 9);
    v63 = v49;
    v64 = v50;
    v65 = v51;
    v66 = v52;
    *(_OWORD *)((char *)v80 + 9) = *(_OWORD *)((char *)v55 + 9);
    v79 = v54;
    v80[0] = v55[0];
    v77 = v52;
    v78 = v53;
    v75 = v50;
    v76 = v51;
    v74 = v49;
    sub_1000B67E4((uint64_t)&v74);
    sub_100018EB4((uint64_t)&v74, (uint64_t)&v81, &qword_10015DF70);
    sub_1000B6860((uint64_t)&v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000B67F4);
    v23 = sub_100007D50(&qword_10015DF58);
    v24 = sub_1000B6728();
    _ConditionalContent<>.init(storage:)(&v81, v23, &type metadata for EmptyView, v24, &protocol witness table for EmptyView);
    swift_release(v14);
    sub_1000B6860((uint64_t)&v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000B68C4);
    swift_release(v18);
    swift_release(v15);
    v85 = v71;
    *(_OWORD *)v86 = v72;
    *(_OWORD *)&v86[16] = v73[0];
    v25 = *(_OWORD *)((char *)v73 + 10);
  }
  else
  {
    if ((_DWORD)v13 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v12, v8);
      v13 = swift_errorRelease(*v12);
    }
    else if ((_DWORD)v13 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_1000B67CC((uint64_t)v70);
      sub_100018EB4((uint64_t)v70, (uint64_t)&v81, &qword_10015DF70);
      v45 = sub_100007D50(&qword_10015DF58);
      v46 = sub_1000B6728();
      _ConditionalContent<>.init(storage:)(&v81, v45, &type metadata for EmptyView, v46, &protocol witness table for EmptyView);
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
      v85 = v78;
      *(_OWORD *)v86 = v79;
      *(_OWORD *)&v86[16] = v80[0];
      *(_OWORD *)&v86[26] = *(_OWORD *)((char *)v80 + 10);
      v81 = v74;
      v82 = v75;
      v39 = v76;
      v40 = v77;
      goto LABEL_8;
    }
    v26 = static Alignment.center.getter(v13);
    v28 = v27;
    sub_1000B54E4((uint64_t)&v81);
    v29 = v81;
    v30 = v82;
    v31 = *((_QWORD *)&v83 + 1);
    v47 = v84;
    *(_QWORD *)&v63 = v26;
    *((_QWORD *)&v63 + 1) = v28;
    v64 = v81;
    v48 = v81;
    v65 = v82;
    LOWORD(v66) = v83;
    *((_QWORD *)&v66 + 1) = *((_QWORD *)&v83 + 1);
    v67 = v84;
    LOBYTE(v68) = v85;
    *((_QWORD *)&v68 + 1) = *((_QWORD *)&v85 + 1);
    LOBYTE(v69[0]) = v86[0];
    *(_OWORD *)((char *)v69 + 8) = *(_OWORD *)&v86[8];
    sub_1000B67D8((uint64_t)&v63);
    sub_100018EB4((uint64_t)&v63, (uint64_t)&v81, &qword_10015DF78);
    v32 = v47;
    swift_retain(v47);
    swift_retain(v29);
    swift_retain(*((_QWORD *)&v29 + 1));
    swift_retain(v30);
    swift_retain(v31);
    v33 = sub_100007D50(&qword_100159470);
    v34 = sub_100007D50(&qword_10015DF68);
    v35 = sub_10001E0A8(&qword_100159468, &qword_100159470, (void (*)(void))sub_100025EB0);
    v36 = sub_10000F4E0(&qword_10015DF60, &qword_10015DF68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(&v81, v33, v34, v35, v36);
    v78 = v60;
    v79 = v61;
    v80[0] = v62[0];
    *(_OWORD *)((char *)v80 + 9) = *(_OWORD *)((char *)v62 + 9);
    v74 = v56;
    v75 = v57;
    v76 = v58;
    v77 = v59;
    sub_1000B67E4((uint64_t)&v74);
    sub_100018EB4((uint64_t)&v74, (uint64_t)&v81, &qword_10015DF70);
    v37 = sub_100007D50(&qword_10015DF58);
    v38 = sub_1000B6728();
    _ConditionalContent<>.init(storage:)(&v81, v37, &type metadata for EmptyView, v38, &protocol witness table for EmptyView);
    swift_release(v32);
    swift_release(v31);
    swift_release(v30);
    swift_release(*((_QWORD *)&v29 + 1));
    swift_release(v48);
    v85 = v71;
    *(_OWORD *)v86 = v72;
    *(_OWORD *)&v86[16] = v73[0];
    v25 = *(_OWORD *)((char *)v73 + 10);
  }
  *(_OWORD *)&v86[26] = v25;
  v81 = v70[0];
  v82 = v70[1];
  v39 = v70[2];
  v40 = v70[3];
LABEL_8:
  v83 = v39;
  v84 = v40;
  v41 = *(_OWORD *)v86;
  a2[4] = v85;
  a2[5] = v41;
  a2[6] = *(_OWORD *)&v86[16];
  *(_OWORD *)((char *)a2 + 106) = *(_OWORD *)&v86[26];
  v42 = v82;
  *a2 = v81;
  a2[1] = v42;
  result = *(double *)&v83;
  v44 = v84;
  a2[2] = v83;
  a2[3] = v44;
  return result;
}

double sub_1000B54E4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001580A8 != -1)
    swift_once(&qword_1001580A8, sub_100051438);
  v6 = qword_10016A4C0;
  KeyPath = swift_getKeyPath(&unk_10010FA88);
  swift_retain(v6);
  v8 = Image.init(systemName:)(0x662E6E6F73726570, 0xEB000000006C6C69);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v9 = Image.resizable(capInsets:resizingMode:)(v5, v8, 0.0, 0.0, 0.0, 0.0);
  v10 = swift_release(v8);
  v11 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v10);
  v12 = static Color.white.getter(v11);
  v13 = swift_getKeyPath(&unk_10010FA88);
  v14 = static Alignment.center.getter(v13);
  _FrameLayout.init(width:height:alignment:)(&v22, 0x4039000000000000, 0, 0x4039000000000000, 0, v14, v15);
  v16 = v22;
  v17 = v23;
  v18 = v24;
  v19 = v25;
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v16;
  *(_BYTE *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 88) = v26;
  swift_retain(KeyPath);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

uint64_t sub_1000B56A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v67 = a1;
  v68 = a2;
  v72 = a5;
  v71 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v71);
  v69 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015D4F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015DEE8);
  __chkstk_darwin(v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_10015DEF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_10015DEF8);
  __chkstk_darwin(v17);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100007D50(&qword_10015DF00);
  __chkstk_darwin(v70);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v10 + 1) = 0x4010000000000000;
  v10[16] = 0;
  v23 = sub_100007D50(&qword_10015D510);
  v24 = sub_1000B5AD8(v67, v68, a3, a4, (uint64_t)&v10[*(int *)(v23 + 44)]);
  LOBYTE(a3) = static Edge.Set.vertical.getter(v24);
  v25 = EdgeInsets.init(_all:)(3.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_100007E78((uint64_t)v10, (uint64_t)v13, &qword_10015D4F8);
  v32 = &v13[*(int *)(v11 + 36)];
  *v32 = a3;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = sub_100007F38((uint64_t)v10, &qword_10015D4F8);
  LOBYTE(v11) = static Edge.Set.trailing.getter(v33);
  v34 = EdgeInsets.init(_all:)(8.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_100007E78((uint64_t)v13, (uint64_t)v16, &qword_10015DEE8);
  v41 = &v16[*(int *)(v14 + 36)];
  *v41 = v11;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  v42 = sub_100007F38((uint64_t)v13, &qword_10015DEE8);
  LOBYTE(v13) = static Edge.Set.leading.getter(v42);
  v43 = EdgeInsets.init(_all:)(5.0);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  sub_100007E78((uint64_t)v16, (uint64_t)v19, &qword_10015DEF0);
  v50 = &v19[*(int *)(v17 + 36)];
  *v50 = (char)v13;
  *((double *)v50 + 1) = v43;
  *((_QWORD *)v50 + 2) = v45;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v49;
  v50[40] = 0;
  sub_100007F38((uint64_t)v16, &qword_10015DEF0);
  v51 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v52 = Color.init(_:)(v51);
  LOBYTE(v16) = static Edge.Set.all.getter(v52);
  sub_100007E78((uint64_t)v19, (uint64_t)v21, &qword_10015DEF8);
  v53 = &v21[*(int *)(v70 + 36)];
  *(_QWORD *)v53 = v52;
  v53[8] = (char)v16;
  sub_100007F38((uint64_t)v19, &qword_10015DEF8);
  v54 = v69;
  v55 = &v69[*(int *)(v71 + 20)];
  v56 = enum case for RoundedCornerStyle.continuous(_:);
  v57 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v55, v56, v57);
  __asm { FMOV            V0.2D, #6.0 }
  *v54 = _Q0;
  v63 = sub_100007D50(&qword_10015DF08);
  v64 = v72;
  v65 = v72 + *(int *)(v63 + 36);
  sub_10001BFB8((uint64_t)v54, v65, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v65 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v21, v64, &qword_10015DF00);
  sub_10001E24C((uint64_t)v54, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_100007F38((uint64_t)v21, &qword_10015DF00);
}

uint64_t sub_1000B5AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 v60;

  v50 = a5;
  v9 = sub_100007D50(&qword_10015D528);
  __chkstk_darwin(v9);
  v49 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - v12;
  v14 = Image.init(_:bundle:)(0xD00000000000001BLL, 0x8000000100114C30, 0);
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v56, 0x4031000000000000, 0, 0x4030000000000000, 0, v15, v16);
  v51[0] = v14;
  v51[1] = v56;
  v52 = v57;
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v17 = sub_100007D50(&qword_10015D530);
  v18 = sub_10009D414();
  View.accessibilityHidden(_:)(1, v17, v18);
  swift_release(v14);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v19 = Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, 0, 0, 256);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = static Font.caption2.getter(v19);
  static Font.Weight.semibold.getter();
  v27 = Font.weight(_:)(v26);
  swift_release(v26);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_release(v27);
  v35 = v32 & 1;
  sub_100007D90(v19, v21, v25);
  v36 = swift_bridgeObjectRelease();
  v37 = static Color.blue.getter(v36);
  v51[0] = v37;
  v38 = Text.foregroundStyle<A>(_:)(v51, v28, v30, v35, v34, &type metadata for Color, &protocol witness table for Color);
  v40 = v39;
  v42 = v41;
  LOBYTE(v27) = v43 & 1;
  sub_100007D90(v28, v30, v35);
  swift_release(v37);
  swift_bridgeObjectRelease();
  v44 = v49;
  sub_100007E78((uint64_t)v13, v49, &qword_10015D528);
  v45 = v50;
  sub_100007E78(v44, v50, &qword_10015D528);
  v46 = v45 + *(int *)(sub_100007D50(&qword_10015D540) + 48);
  *(_QWORD *)v46 = v38;
  *(_QWORD *)(v46 + 8) = v40;
  *(_BYTE *)(v46 + 16) = v27;
  *(_QWORD *)(v46 + 24) = v42;
  sub_10000F844(v38, v40, v27);
  swift_bridgeObjectRetain(v42);
  sub_100007F38((uint64_t)v13, &qword_10015D528);
  sub_100007D90(v38, v40, v27);
  swift_bridgeObjectRelease();
  return sub_100007F38(v44, &qword_10015D528);
}

uint64_t sub_1000B5DE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B56A8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for PromotionalAssetsTagView()
{
  return &type metadata for PromotionalAssetsTagView;
}

_QWORD *sub_1000B5E18(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = type metadata accessor for EventRowViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(v4 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = v6[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)((char *)a2 + v15 + 24);
    if (v18)
    {
      v19 = *((_QWORD *)v17 + 4);
      *((_QWORD *)v16 + 3) = v18;
      *((_QWORD *)v16 + 4) = v19;
      (**(void (***)(void))(v18 - 8))();
    }
    else
    {
      v21 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v21;
      *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    }
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    v22 = v6[9];
    v20 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v20;
  }
  swift_retain(v20);
  return a1;
}

double sub_1000B5F38(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for EventRowViewModel(0);
  v3 = a1 + v2[6];
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (_QWORD *)(a1 + v2[7]);
  if (v5[3])
    sub_1000228FC(v5);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + v2[9])).n128_u64[0];
  return result;
}

_QWORD *sub_1000B5FB8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  v11(v8, v9, v10, v12);
  v13 = v6[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v19 = v6[9];
  v20 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  return a1;
}

_QWORD *sub_1000B60B0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a2 + v11 + 24);
  if (!*(_QWORD *)((char *)a1 + v11 + 24))
  {
    if (v14)
    {
      *((_QWORD *)v12 + 3) = v14;
      *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
      (**(void (***)(char *, char *))(v14 - 8))(v12, v13);
      goto LABEL_8;
    }
LABEL_7:
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
    *(_OWORD *)v12 = v15;
    *((_OWORD *)v12 + 1) = v16;
    goto LABEL_8;
  }
  if (!v14)
  {
    sub_1000228FC(v12);
    goto LABEL_7;
  }
  sub_100084B54(v12, v13);
LABEL_8:
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v17 = v6[9];
  v18 = *(_QWORD *)((char *)a1 + v17);
  v19 = *(_QWORD *)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  swift_retain(v19);
  swift_release(v18);
  return a1;
}

_OWORD *sub_1000B61F0(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for EventRowViewModel(0);
  v6 = v5[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = v5[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  *((_BYTE *)a1 + v5[8]) = *((_BYTE *)a2 + v5[8]);
  *(_QWORD *)((char *)a1 + v5[9]) = *(_QWORD *)((char *)a2 + v5[9]);
  return a1;
}

_QWORD *sub_1000B6298(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for EventRowViewModel(0);
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  if (*(_QWORD *)((char *)a1 + v11 + 24))
    sub_1000228FC((_QWORD *)((char *)a1 + v11));
  v13 = *(_OWORD *)((char *)a2 + v11 + 16);
  *(_OWORD *)v12 = *(_OWORD *)((char *)a2 + v11);
  *((_OWORD *)v12 + 1) = v13;
  *((_QWORD *)v12 + 4) = *(_QWORD *)((char *)a2 + v11 + 32);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v14 = v6[9];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_release(v15);
  return a1;
}

uint64_t sub_1000B6370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B637C);
}

uint64_t sub_1000B637C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRowViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000B63B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B63C4);
}

uint64_t sub_1000B63C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRowViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1000B6404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B6410(a1, a2, a3, type metadata accessor for EventRowViewModel);
}

uint64_t sub_1000B6410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v7, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1000B647C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DED8;
  if (!qword_10015DED8)
  {
    v1 = sub_100007D00(&qword_10015DE10);
    sub_1000B6500();
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DED8);
  }
  return result;
}

unint64_t sub_1000B6500()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015DEE0;
  if (!qword_10015DEE0)
  {
    v1 = sub_100007D00(&qword_10015DDE0);
    v2[0] = sub_100007D00(&qword_10015DDD0);
    v2[1] = sub_100032B98(&qword_10015DDF0, &qword_10015DDD0, &qword_10015DDF8, &qword_10015DDC8);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DEE0);
  }
  return result;
}

uint64_t sub_1000B65D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118EA0, 1);
}

uint64_t sub_1000B65E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118E78, 1);
}

unint64_t sub_1000B65F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF28;
  if (!qword_10015DF28)
  {
    v1 = sub_100007D00(&qword_10015DF20);
    sub_10000F4E0(&qword_10015DF30, &qword_10015DF18, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF28);
  }
  return result;
}

unint64_t sub_1000B6678()
{
  unint64_t result;

  result = qword_10015DF38;
  if (!qword_10015DF38)
  {
    result = swift_getWitnessTable(&unk_1001104B0, &type metadata for CalendarIcon);
    atomic_store(result, (unint64_t *)&qword_10015DF38);
  }
  return result;
}

unint64_t sub_1000B66BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF48;
  if (!qword_10015DF48)
  {
    v1 = sub_100007D00(&qword_10015DF40);
    sub_1000B6728();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF48);
  }
  return result;
}

unint64_t sub_1000B6728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF50;
  if (!qword_10015DF50)
  {
    v1 = sub_100007D00(&qword_10015DF58);
    sub_10001E0A8(&qword_100159468, &qword_100159470, (void (*)(void))sub_100025EB0);
    sub_10000F4E0(&qword_10015DF60, &qword_10015DF68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF50);
  }
  return result;
}

uint64_t sub_1000B67CC(uint64_t result)
{
  *(_BYTE *)(result + 121) = 1;
  return result;
}

uint64_t sub_1000B67D8(uint64_t result)
{
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_1000B67E4(uint64_t result)
{
  *(_BYTE *)(result + 121) = 0;
  return result;
}

uint64_t sub_1000B67EC(uint64_t result)
{
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_1000B67F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if ((a16 & 1) != 0)
  {
    swift_retain(a9);
    swift_retain(a3);
    swift_retain(a4);
    a1 = a5;
    a2 = a8;
  }
  swift_retain(a1);
  return swift_retain(a2);
}

uint64_t sub_1000B6860(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_1000B68C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if ((a16 & 1) != 0)
  {
    a2 = a9;
    swift_release(a3);
    swift_release(a5);
    swift_release(a8);
    a1 = a4;
  }
  swift_release(a1);
  return swift_release(a2);
}

unint64_t sub_1000B6930()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF80;
  if (!qword_10015DF80)
  {
    v1 = sub_100007D00(&qword_10015DF08);
    sub_1000B69B4();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF80);
  }
  return result;
}

unint64_t sub_1000B69B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF88;
  if (!qword_10015DF88)
  {
    v1 = sub_100007D00(&qword_10015DF00);
    sub_10001E0A8(&qword_10015DF90, &qword_10015DEF8, (void (*)(void))sub_1000B6A58);
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF88);
  }
  return result;
}

unint64_t sub_1000B6A58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DF98;
  if (!qword_10015DF98)
  {
    v1 = sub_100007D00(&qword_10015DEF0);
    sub_100032B98(&qword_10015DFA0, &qword_10015DEE8, &qword_10015DFA8, &qword_10015D4F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DF98);
  }
  return result;
}

unint64_t sub_1000B6AE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DFB0;
  if (!qword_10015DFB0)
  {
    v1 = sub_100007D00(&qword_10015DFB8);
    sub_1000B65F4();
    sub_1000B6678();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DFB0);
  }
  return result;
}

uint64_t sub_1000B6B54()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1000B6B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E78(a1, (uint64_t)v4, &qword_100158970);
  return EnvironmentValues.verticalSizeClass.setter(v4);
}

uint64_t sub_1000B6BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  uint64_t v11;

  v4 = sub_100007D50(&qword_10015DFE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B6CFC(a2, (uint64_t)v6);
  v7 = swift_allocObject(&unk_10014E698, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = sub_1000B72CC();
  v9 = swift_retain(a2);
  View.onContinueUserActivity(_:perform:)(0xD000000000000021, 0x8000000100114C50, sub_1000B7438, v7, v4, v8, v9);
  swift_release(v7);
  return sub_100007F38((uint64_t)v6, &qword_10015DFE0);
}

uint64_t sub_1000B6CFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a2;
  v3 = type metadata accessor for EventRootView(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - v7;
  v32 = sub_100007D50(&qword_10015E008);
  __chkstk_darwin(v32);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - v12;
  v14 = sub_100007D50(&qword_10015E030);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10010FB08);
  v18 = swift_getKeyPath(&unk_10010FB30);
  static Published.subscript.getter(a1, KeyPath, v18);
  swift_release(KeyPath);
  swift_release(v18);
  v19 = v34;
  if (v34)
  {
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *v5 = EnvironmentObject.init()(v20, v21);
    v5[1] = v22;
    v23 = (_QWORD *)((char *)v5 + *(int *)(v3 + 20));
    *v23 = swift_getKeyPath(&unk_10010FB50);
    v24 = sub_100007D50(&qword_100158968);
    swift_storeEnumTagMultiPayload(v23, v24, 0);
    sub_1000B7484((uint64_t)v5, (uint64_t)v8);
    v25 = static ObservableObject.environmentStore.getter(v20, v21);
    sub_1000B74C8((uint64_t)v8, (uint64_t)v10);
    v26 = v32;
    v27 = (uint64_t *)&v10[*(int *)(v32 + 36)];
    *v27 = v25;
    v27[1] = v19;
    swift_retain(v19);
    sub_1000B750C((uint64_t)v8);
    sub_1000B7548((uint64_t)v10, (uint64_t)v13);
    sub_100007E78((uint64_t)v13, (uint64_t)v16, &qword_10015E008);
    swift_storeEnumTagMultiPayload(v16, v14, 0);
    v28 = sub_1000B739C();
    _ConditionalContent<>.init(storage:)(v16, v26, &type metadata for EmptyView, v28, &protocol witness table for EmptyView);
    swift_release(v19);
    return sub_100007F38((uint64_t)v13, &qword_10015E008);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v16, v14, 1);
    v30 = sub_1000B739C();
    return _ConditionalContent<>.init(storage:)(v16, v32, &type metadata for EmptyView, v30, &protocol witness table for EmptyView);
  }
}

uint64_t sub_1000B6FDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  _QWORD v14[2];

  v1 = sub_100007D50(&qword_10015DFD0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v5 = v0[1];
  v7 = swift_allocObject(&unk_10014E670, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain(v5);
  v8 = sub_100007D50(&qword_10015DFD8);
  v9 = sub_100007D00(&qword_10015DFE0);
  v10 = sub_1000B72CC();
  v14[0] = v9;
  v14[1] = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v14, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
  WindowGroup.init(id:title:lazyContent:)(0, 0, 0, 0, 0, 0, sub_1000B72C4, v7, v8, OpaqueTypeConformance2);
  v12 = sub_10000F4E0(&qword_10015E028, &qword_10015DFD0, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
  static SceneBuilder.buildBlock<A>(_:)(v4, v1, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000B712C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for ShazamEventsAppModel(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v9 = 0;
  v4 = sub_100007D50((uint64_t *)&unk_10015C7F8);
  Published.init(initialValue:)(&v9, v4);
  v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp20ShazamEventsAppModel_userActivityType);
  *v5 = 0xD000000000000021;
  v5[1] = 0x8000000100114C50;
  v6 = sub_100007428(&qword_10015DFC8, type metadata accessor for ShazamEventsAppModel, (uint64_t)&unk_10010DD00);
  result = ObservedObject.init(wrappedValue:)(v3, v2, v6);
  *a1 = result;
  a1[1] = v8;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000B723C();
  static App.main()();
  return 0;
}

unint64_t sub_1000B723C()
{
  unint64_t result;

  result = qword_10015DFC0;
  if (!qword_10015DFC0)
  {
    result = swift_getWitnessTable(&unk_10010FAC8, &type metadata for ShazamEventsApp);
    atomic_store(result, (unint64_t *)&qword_10015DFC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShazamEventsApp()
{
  return &type metadata for ShazamEventsApp;
}

uint64_t sub_1000B7290(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118EE4, 1);
}

uint64_t sub_1000B72A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B72C4()
{
  uint64_t v0;

  return sub_1000B6BF4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000B72CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DFE8;
  if (!qword_10015DFE8)
  {
    v1 = sub_100007D00(&qword_10015DFE0);
    sub_1000B7330();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DFE8);
  }
  return result;
}

unint64_t sub_1000B7330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015DFF0;
  if (!qword_10015DFF0)
  {
    v1 = sub_100007D00(&qword_10015DFF8);
    sub_1000B739C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015DFF0);
  }
  return result;
}

unint64_t sub_1000B739C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E000;
  if (!qword_10015E000)
  {
    v1 = sub_100007D00(&qword_10015E008);
    sub_100007428(&qword_10015E010, type metadata accessor for EventRootView, (uint64_t)&unk_100108F28);
    sub_10000F4E0(&qword_10015E018, &qword_10015E020, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E000);
  }
  return result;
}

void sub_1000B7438(void *a1)
{
  sub_100086888(a1);
}

uint64_t sub_1000B7460()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_1000B7484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRootView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B74C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EventRootView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B750C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for EventRootView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B7548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015E008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B7590()
{
  return sub_10000F4E0(&qword_10015E028, &qword_10015DFD0, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
}

void sub_1000B75C0()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  v2 = 750;
  if (v1 == (id)1)
    v2 = 1410;
  qword_10016A598 = v2;
}

uint64_t value<A>(iOS:iPadOS:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  id v5;
  id v6;

  v5 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (v6 == (id)1)
    return a3();
  else
    return a1();
}

uint64_t sub_1000B76C8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000B7714(&qword_10015E038, (uint64_t)&protocol conformance descriptor for Ticket);
  result = sub_1000B7714(&qword_10015E040, (uint64_t)&protocol conformance descriptor for Ticket);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000B7714(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Ticket(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B7754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t result;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char *v37;
  _QWORD v38[2];
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v38[1] = a1;
  v47 = type metadata accessor for Calendar(0);
  v43 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v2 = (char *)v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for TimeZone(0);
  v42 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)v38 - v6;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Date(0);
  v40 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)v38 - v14;
  __chkstk_darwin(v16);
  v44 = (char *)v38 - v17;
  v18 = sub_100007D50(&qword_10015E0A0);
  v19 = ((uint64_t (*)(void))Event.Time.dateInterval.getter)();
  DateInterval.start.getter(v19);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v41 = v8;
  v39 = v20;
  v20(v11, v8);
  Event.Time.timeZone.getter(v18);
  v21 = TimeZone.secondsFromGMT(for:)(v15);
  v23 = static Calendar.current.getter(v22);
  Calendar.timeZone.getter(v23);
  v43 = *(_QWORD *)(v43 + 8);
  ((void (*)(char *, uint64_t))v43)(v2, v47);
  v24 = TimeZone.secondsFromGMT(for:)(v15);
  v25 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  result = v25(v4, v48);
  if (__OFSUB__(v21, v24))
  {
    __break(1u);
  }
  else
  {
    Date.addingTimeInterval(_:)(result, (double)(v21 - v24));
    v25(v7, v48);
    v42 = *(_QWORD *)(v40 + 8);
    ((void (*)(char *, uint64_t))v42)(v15, v46);
    v27 = Event.Time.dateInterval.getter(v18);
    v28 = v4;
    v29 = v2;
    v30 = v7;
    v31 = v45;
    DateInterval.end.getter(v27);
    v39(v11, v41);
    Event.Time.timeZone.getter(v18);
    v32 = TimeZone.secondsFromGMT(for:)(v31);
    v34 = static Calendar.current.getter(v33);
    Calendar.timeZone.getter(v34);
    ((void (*)(char *, uint64_t))v43)(v29, v47);
    v35 = TimeZone.secondsFromGMT(for:)(v31);
    result = v25(v28, v48);
    if (!__OFSUB__(v32, v35))
    {
      v36 = (double)(v32 - v35);
      v37 = v45;
      Date.addingTimeInterval(_:)(result, v36);
      v25(v30, v48);
      ((void (*)(char *, uint64_t))v42)(v37, v46);
      return DateInterval.init(start:end:)(v44, v15);
    }
  }
  __break(1u);
  return result;
}

void sub_1000B7ABC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t, __n128);
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t);
  char *v124;
  char *v125;
  char *v126;
  int *v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  _QWORD v168[2];

  v3 = v2;
  v162 = a1;
  v163 = a2;
  v139 = sub_100007D50(&qword_10015E098);
  __chkstk_darwin(v139);
  v138 = (uint64_t)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v137 = (char *)&v132 - v6;
  v7 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v7);
  v161 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for DateInterval(0);
  v156 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v152 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100007D50(&qword_10015E0A0);
  v158 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v154 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015A6A0);
  v164 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v133 = (char *)&v132 - v15;
  __chkstk_darwin(v16);
  v132 = (char *)&v132 - v17;
  v18 = sub_100007D50(&qword_10015D2A8);
  __chkstk_darwin(v18);
  v134 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v157 = (char *)&v132 - v21;
  v159 = type metadata accessor for Date(0);
  v165 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v136 = (char *)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v135 = (char *)&v132 - v24;
  __chkstk_darwin(v25);
  v160 = (char *)&v132 - v26;
  v28 = __chkstk_darwin(v27);
  v166 = (char *)&v132 - v29;
  v30 = type metadata accessor for Locale(0, v28);
  v31 = __chkstk_darwin(v30);
  v151 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for String.LocalizationValue(0, v31);
  __chkstk_darwin(v33);
  v150 = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100007D50(&qword_100159258);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v132 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100007D50(&qword_100159250);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (char *)&v132 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100007D50(&qword_10015ADD8);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v38 = (char *)&v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100007D50(&qword_10015ADE0);
  __chkstk_darwin(v141);
  v40 = (char *)&v132 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v43 = (char *)&v132 - v42;
  v44 = sub_100007D50(&qword_100159248);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v47 = (char *)&v132 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 128)];
  LOBYTE(v168[0]) = 0;
  Published.init(initialValue:)(v168, &type metadata for Bool);
  v140 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v140(v48, v47, v44);
  v49 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 136)];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v43, 1, 1, v11);
  sub_100007E78((uint64_t)v43, (uint64_t)v40, &qword_10015ADE0);
  Published.init(initialValue:)(v40, v141);
  sub_100007F38((uint64_t)v43, &qword_10015ADE0);
  (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v49, v38, v143);
  v50 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 144)];
  v168[0] = 0;
  v168[1] = 0xE000000000000000;
  v51 = v144;
  Published.init(initialValue:)(v168, &type metadata for String);
  (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v50, v51, v146);
  v52 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 152)];
  LOBYTE(v168[0]) = 0;
  Published.init(initialValue:)(v168, &type metadata for Bool);
  v140(v52, v47, v44);
  v53 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 160)];
  v168[0] = 0;
  v54 = v147;
  Published.init(initialValue:)(v168, &type metadata for CGFloat);
  (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v53, v54, v149);
  v55 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 184)];
  *(_QWORD *)v55 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100113CE0);
  *((_QWORD *)v55 + 1) = v56;
  v55[16] = v57 & 1;
  *((_QWORD *)v55 + 3) = v58;
  v59 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 192)];
  *(_QWORD *)v59 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000030, 0x8000000100114C80);
  *((_QWORD *)v59 + 1) = v60;
  v59[16] = v61 & 1;
  *((_QWORD *)v59 + 3) = v62;
  v63 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 200)];
  *(_QWORD *)v63 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100114CC0);
  *((_QWORD *)v63 + 1) = v64;
  v63[16] = v65 & 1;
  *((_QWORD *)v63 + 3) = v66;
  v67 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 208)];
  v68 = v150;
  v69 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100114CF0);
  v70 = v151;
  static Locale.current.getter(v69);
  *(_QWORD *)v67 = String.init(localized:table:bundle:locale:comment:)(v68, 0, 0, 0, v70, 0, 0, 256);
  *((_QWORD *)v67 + 1) = v71;
  v72 = &v3[*(_QWORD *)(*(_QWORD *)v3 + 112)];
  v73 = type metadata accessor for Venue(0);
  v149 = *(_QWORD *)(v73 - 8);
  v74 = *(void (**)(char *, uint64_t))(v149 + 16);
  v150 = (char *)v73;
  v74(v72, v162);
  v75 = v163;
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 120)] = v163;
  v76 = *(_QWORD *)(*(_QWORD *)v3 + 176);
  v151 = v3;
  v77 = &v3[v76];
  v78 = v75;
  swift_beginAccess(v77, v168, 33, 0);
  v167 = v78;
  swift_bridgeObjectRetain_n(v78, 2);
  v79 = sub_100007D50(&qword_10015ADE8);
  Published.init(initialValue:)(&v167, v79);
  swift_endAccess(v168);
  v80 = *(_QWORD *)(v78 + 16);
  if (v80)
  {
    v81 = v78 + ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80));
    v82 = v164;
    v83 = v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v164 + 16))(v132, v81, v11);
    v84 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
    v85 = v154;
    (*(void (**)(uint64_t, uint64_t))(v84 + 200))(v11, v84);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v11);
    v86 = v152;
    sub_1000B7754(v152);
    v87 = (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v85, v155);
    v88 = v157;
    DateInterval.start.getter(v87);
    v89 = v153;
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v86, v153);
    v90 = v165;
    v91 = v159;
    v148 = *(_QWORD *)(v165 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v148)(v88, 0, 1, v159);
    v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v91);
    v93 = v90;
    v94 = v86;
    v95 = v158;
    if (v92 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v166, v157, v91);
      goto LABEL_8;
    }
    v96 = (uint64_t)v157;
  }
  else
  {
    v96 = (uint64_t)v157;
    v91 = v159;
    v148 = *(_QWORD *)(v165 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v148)(v157, 1, 1, v159);
    v94 = v152;
    v89 = v153;
    v95 = v158;
  }
  ((void (*)(void))Date.init())();
  sub_100007F38(v96, &qword_10015D2A8);
  if (!v80)
  {
    v97 = (uint64_t)v134;
    v98 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v148)(v134, 1, 1, v91);
    v99 = v165;
    goto LABEL_10;
  }
LABEL_8:
  if (v80 <= *(_QWORD *)(v163 + 16))
  {
    v100 = v164;
    v158 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    v101 = v89;
    v102 = v133;
    (*(void (**)(char *, unint64_t, uint64_t))(v164 + 16))(v133, v163 + v158 + *(_QWORD *)(v164 + 72) * (v80 - 1), v11);
    v103 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
    v104 = v154;
    (*(void (**)(uint64_t, uint64_t))(v103 + 200))(v11, v103);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v11);
    sub_1000B7754(v94);
    v105 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v104, v155);
    v97 = (uint64_t)v134;
    DateInterval.start.getter(v105);
    (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v94, v101);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v148)(v97, 0, 1, v91);
    v99 = v165;
    v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v97, 1, v91);
    if ((_DWORD)v98 != 1)
    {
      v110 = (uint64_t)v160;
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v160, v97, v91);
      sub_10009822C((uint64_t)v166, v110, v161);
      v168[0] = _swiftEmptyArrayStorage;
      v107 = v163;
      v108 = v164;
      v109 = v158;
      goto LABEL_13;
    }
LABEL_10:
    v106 = (uint64_t)v160;
    Date.init()(v98);
    sub_100007F38(v97, &qword_10015D2A8);
    sub_10009822C((uint64_t)v166, v106, v161);
    v168[0] = _swiftEmptyArrayStorage;
    if (!v80)
    {
      v117 = _swiftEmptyArrayStorage;
      v107 = v163;
LABEL_17:
      v118 = v107;
      v119 = sub_10005C00C((uint64_t)v117);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v119);
      v121 = sub_1000B9EE4(v120);
      swift_bridgeObjectRelease();
      v168[0] = v121;
      sub_1000BA9D4(v168);
      swift_bridgeObjectRelease();
      v122 = v168[0];
      v123 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
      v124 = v135;
      v123(v135, (uint64_t)v166, v91);
      v125 = v136;
      v126 = v160;
      v123(v136, (uint64_t)v160, v91);
      v127 = (int *)v139;
      v128 = v137;
      DateInterval.init(start:end:)(v124, v125);
      *v128 = 0;
      v128[1] = v118;
      v128[2] = _swiftEmptyArrayStorage;
      v129 = v161;
      sub_100007E78((uint64_t)v161, (uint64_t)v128 + v127[12], &qword_10015D2A0);
      *(_QWORD *)((char *)v128 + v127[13]) = v122;
      *(_QWORD *)((char *)v128 + v127[14]) = &_swiftEmptySetSingleton;
      swift_beginAccess(&v151[*(_QWORD *)(*(_QWORD *)v151 + 168)], v168, 33, 0);
      v130 = v138;
      sub_100007E78((uint64_t)v128, v138, &qword_10015E098);
      Published.init(initialValue:)(v130, v127);
      sub_100007F38((uint64_t)v128, &qword_10015E098);
      swift_endAccess(v168);
      (*(void (**)(uint64_t, char *))(v149 + 8))(v162, v150);
      sub_100007F38((uint64_t)v129, &qword_10015D2A0);
      v131 = *(void (**)(char *, uint64_t))(v165 + 8);
      v131(v126, v91);
      v131(v166, v91);
      return;
    }
    v107 = v163;
    v108 = v164;
    v109 = (*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
LABEL_13:
    v111 = v107 + v109;
    v112 = *(_QWORD *)(v108 + 72);
    v113 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v108 + 16);
    v114 = swift_bridgeObjectRetain(v107);
    do
    {
      v115 = v113(v13, v111, v11, v114);
      v116 = Event<>.genres.getter(v115);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v13, v11);
      sub_1000BA0E0(v116);
      v111 += v112;
      --v80;
    }
    while (v80);
    swift_bridgeObjectRelease();
    v117 = (_QWORD *)v168[0];
    v91 = v159;
    v99 = v165;
    goto LABEL_17;
  }
  __break(1u);
  swift_release(v168[0]);
  __break(1u);
}

uint64_t sub_1000B8890()
{
  uint64_t v0;

  v0 = type metadata accessor for VenueController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_10006A5E0();
}

ValueMetadata *type metadata accessor for VenueEventContentView()
{
  return &type metadata for VenueEventContentView;
}

uint64_t sub_1000B88D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118F78, 1);
}

uint64_t sub_1000B88E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  _OWORD *v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  void (**v147)();
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  _OWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  __int128 v180;
  __int128 v181;

  v178 = a1;
  v156 = type metadata accessor for TaskPriority(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v153 = (char *)&v140 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100007D50(&qword_100158EB8);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100007D50(&qword_10015AD08);
  __chkstk_darwin(v177);
  v149 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v154 = (uint64_t)&v140 - v6;
  v157 = type metadata accessor for ErrorView(0);
  __chkstk_darwin(v157);
  v158 = (uint64_t *)((char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v160 = (uint64_t)&v140 - v9;
  v170 = sub_100007D50(&qword_10015AD20);
  __chkstk_darwin(v170);
  v159 = (uint64_t)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v161 = (uint64_t)&v140 - v12;
  v174 = sub_100007D50(&qword_10015E048);
  __chkstk_darwin(v174);
  v176 = (uint64_t)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100007D50(&qword_10015E050);
  __chkstk_darwin(v166);
  v168 = (uint64_t)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100007D50(&qword_10015E058);
  __chkstk_darwin(v175);
  v169 = (char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100007D50(&qword_10015E060);
  __chkstk_darwin(v167);
  v147 = (void (**)())((char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v148 = (uint64_t)&v140 - v18;
  v19 = sub_100007D50(&qword_10015ADC8);
  __chkstk_darwin(v19);
  v162 = (uint64_t)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Venue(0);
  v164 = *(_QWORD *)(v21 - 8);
  v165 = v21;
  __chkstk_darwin(v21);
  v146 = (char *)&v140 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = v22;
  __chkstk_darwin(v23);
  v163 = (char *)&v140 - v24;
  v25 = sub_100007D50(&qword_10015B790);
  __chkstk_darwin(v25);
  v27 = (char *)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100007D50(&qword_10015B838);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v144 = (char *)&v140 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = v30;
  __chkstk_darwin(v31);
  v179 = (char *)&v140 - v32;
  v34 = *(_QWORD *)(v1 + 16);
  v33 = *(_QWORD *)(v1 + 24);
  v171 = (_OWORD *)v1;
  v35 = *(unsigned __int8 *)(v1 + 32);
  v36 = type metadata accessor for VenueController(0);
  v172 = sub_100007428(&qword_10015E068, type metadata accessor for VenueController, (uint64_t)&unk_10010C530);
  v173 = v34;
  v37 = StateObject.wrappedValue.getter(v34, v33, v35, v36, v172);
  KeyPath = swift_getKeyPath(&unk_10010FC18);
  v39 = swift_getKeyPath(&unk_10010FC40);
  static Published.subscript.getter(v37, KeyPath, v39);
  swift_release(v37);
  swift_release(KeyPath);
  v40 = swift_release(v39);
  v41 = v29;
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v29 + 48);
  v43 = v28;
  if (v42(v27, 1, v28, v40) == 1)
  {
    v44 = v36;
    v45 = v35;
    v46 = v33;
    sub_100007F38((uint64_t)v27, &qword_10015B790);
    v47 = v172;
    v48 = v173;
  }
  else
  {
    v49 = v41;
    v142 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v142(v179, v27, v43);
    v48 = v173;
    v46 = v33;
    v45 = v35;
    v44 = v36;
    v50 = v36;
    v47 = v172;
    v51 = StateObject.wrappedValue.getter(v173, v33, v35, v50, v172);
    v52 = v162;
    sub_100069EE8(v162);
    v53 = swift_release(v51);
    v54 = v164;
    v55 = v165;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v164 + 48))(v52, 1, v165, v53) != 1)
    {
      v106 = v54;
      v107 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
      v108 = v163;
      v107(v163, v52, v55);
      v109 = v146;
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v146, v108, v55);
      v110 = v144;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v144, v179, v43);
      v111 = *(unsigned __int8 *)(v106 + 80);
      v112 = v49;
      v141 = v49;
      v113 = (v111 + 16) & ~v111;
      v114 = *(unsigned __int8 *)(v112 + 80);
      v115 = v55;
      v116 = (v145 + v114 + v113) & ~v114;
      v117 = swift_allocObject(&unk_10014E810, v116 + v143, v111 | v114 | 7);
      v107((char *)(v117 + v113), (uint64_t)v109, v115);
      v142((char *)(v117 + v116), v110, v43);
      v118 = (uint64_t)v147;
      *v147 = sub_1000B9CDC;
      *(_QWORD *)(v118 + 8) = v117;
      *(_BYTE *)(v118 + 16) = 0;
      v119 = sub_100007D50(&qword_100159A18);
      v120 = swift_allocObject(v119, 17, 7);
      *(_BYTE *)(v120 + 16) = 0;
      v121 = sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
      *(_QWORD *)(v118 + 24) = ObservedObject.init(wrappedValue:)(v120, v119, v121);
      *(_QWORD *)(v118 + 32) = v122;
      *(_BYTE *)(v118 + 40) = FocusState.init<>()() & 1;
      *(_QWORD *)(v118 + 48) = v123;
      *(_BYTE *)(v118 + 56) = v124 & 1;
      v125 = v167;
      v126 = (_QWORD *)(v118 + *(int *)(v167 + 60));
      *v126 = swift_getKeyPath(&unk_10010FCA8);
      v127 = sub_100007D50(qword_100158AC8);
      swift_storeEnumTagMultiPayload(v126, v127, 0);
      v128 = (_QWORD *)(v118 + *(int *)(v125 + 64));
      v129 = type metadata accessor for RemoteViewConfiguration();
      v130 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
      *v128 = EnvironmentObject.init()(v129, v130);
      v128[1] = v131;
      v132 = v148;
      sub_100018EB4(v118, v148, &qword_10015E060);
      v133 = v168;
      sub_100007E78(v132, v168, &qword_10015E060);
      swift_storeEnumTagMultiPayload(v133, v166, 0);
      v134 = sub_10000F4E0(&qword_10015E088, &qword_10015E060, (uint64_t)&unk_100109DE0);
      v135 = sub_1000595E8();
      v136 = (uint64_t)v169;
      _ConditionalContent<>.init(storage:)(v133, v125, v170, v134, v135);
      v137 = v176;
      sub_100007E78(v136, v176, &qword_10015E058);
      swift_storeEnumTagMultiPayload(v137, v174, 0);
      v138 = sub_1000B9B90();
      v139 = sub_10005966C();
      _ConditionalContent<>.init(storage:)(v137, v175, v177, v138, v139);
      sub_100007F38(v136, &qword_10015E058);
      sub_100007F38(v132, &qword_10015E060);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v163, v115);
      return (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v179, v43);
    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v179, v43);
    sub_100007F38(v52, &qword_10015ADC8);
  }
  v56 = StateObject.wrappedValue.getter(v48, v46, v45, v44, v47);
  v57 = swift_getKeyPath(&unk_10010FC60);
  v58 = swift_getKeyPath(&unk_10010FC88);
  static Published.subscript.getter(v56, v57, v58);
  swift_release(v56);
  swift_release(v57);
  swift_release(v58);
  v59 = v181;
  v60 = swift_errorRelease(v181);
  if (v59)
  {
    v61 = swift_getKeyPath(&unk_10010FCA8);
    v62 = (uint64_t)v158;
    *v158 = v61;
    v63 = sub_100007D50(qword_100158AC8);
    swift_storeEnumTagMultiPayload(v62, v63, 0);
    v64 = (_QWORD *)(v62 + *(int *)(v157 + 20));
    v65 = type metadata accessor for RemoteViewConfiguration();
    v66 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *v64 = EnvironmentObject.init()(v65, v66);
    v64[1] = v67;
    v68 = v160;
    sub_1000597D4(v62, v160);
    v69 = v171;
    v70 = *v171;
    v180 = *(_OWORD *)((char *)v171 + 40);
    v181 = v70;
    v71 = swift_allocObject(&unk_10014E7E8, 72, 7);
    v72 = v69[1];
    *(_OWORD *)(v71 + 16) = *v69;
    *(_OWORD *)(v71 + 32) = v72;
    *(_OWORD *)(v71 + 48) = v69[2];
    *(_QWORD *)(v71 + 64) = *((_QWORD *)v69 + 6);
    v73 = v159;
    sub_10008CE94(v68, v159);
    v74 = v170;
    v75 = (uint64_t (**)())(v73 + *(int *)(v170 + 36));
    *v75 = sub_1000B9C1C;
    v75[1] = (uint64_t (*)())v71;
    v75[2] = 0;
    v75[3] = 0;
    sub_100027618((uint64_t)&v181);
    sub_10002BE30(v48, v46);
    sub_10005120C(&v180);
    sub_10008CED8(v68);
    v76 = &qword_10015AD20;
    v77 = v161;
    sub_100018EB4(v73, v161, &qword_10015AD20);
    v78 = v168;
    sub_100007E78(v77, v168, &qword_10015AD20);
    swift_storeEnumTagMultiPayload(v78, v166, 1);
    v79 = sub_10000F4E0(&qword_10015E088, &qword_10015E060, (uint64_t)&unk_100109DE0);
    v80 = sub_1000595E8();
    v81 = (uint64_t)v169;
    _ConditionalContent<>.init(storage:)(v78, v167, v74, v79, v80);
    v82 = v176;
    sub_100007E78(v81, v176, &qword_10015E058);
    swift_storeEnumTagMultiPayload(v82, v174, 0);
    v83 = sub_1000B9B90();
    v84 = sub_10005966C();
    _ConditionalContent<>.init(storage:)(v82, v175, v177, v83, v84);
    sub_100007F38(v81, &qword_10015E058);
    v85 = v77;
  }
  else
  {
    v86 = v150;
    ProgressView<>.init<>()(v60);
    v87 = v171;
    v88 = *v171;
    v180 = *(_OWORD *)((char *)v171 + 40);
    v181 = v88;
    v89 = swift_allocObject(&unk_10014E7C0, 72, 7);
    v90 = v87[1];
    *(_OWORD *)(v89 + 16) = *v87;
    *(_OWORD *)(v89 + 32) = v90;
    *(_OWORD *)(v89 + 48) = v87[2];
    *(_QWORD *)(v89 + 64) = *((_QWORD *)v87 + 6);
    sub_10002BE30(v48, v46);
    sub_100027618((uint64_t)&v181);
    v91 = sub_10005120C(&v180);
    v92 = v153;
    static TaskPriority.userInitiated.getter(v91);
    v93 = v177;
    v94 = (uint64_t)v149;
    v95 = &v149[*(int *)(v177 + 36)];
    v96 = type metadata accessor for _TaskModifier(0);
    v97 = v155;
    v98 = v156;
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(&v95[*(int *)(v96 + 20)], v92, v156);
    *(_QWORD *)v95 = &unk_10015E078;
    *((_QWORD *)v95 + 1) = v89;
    v99 = v151;
    v100 = v152;
    (*(void (**)(uint64_t, char *, uint64_t))(v151 + 16))(v94, v86, v152);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v92, v98);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v86, v100);
    v76 = &qword_10015AD08;
    v101 = v154;
    sub_100018EB4(v94, v154, &qword_10015AD08);
    v102 = v176;
    sub_100007E78(v101, v176, &qword_10015AD08);
    swift_storeEnumTagMultiPayload(v102, v174, 1);
    v103 = sub_1000B9B90();
    v104 = sub_10005966C();
    _ConditionalContent<>.init(storage:)(v102, v175, v93, v103, v104);
    v85 = v101;
  }
  return sub_100007F38(v85, v76);
}

void sub_1000B9608(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for Venue(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  v7 = sub_100007D50(&qword_10015B838);
  v8 = VenueSchedule.events.getter(v7);
  v9 = sub_100007D50(&qword_10015E090);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  sub_1000B7ABC((uint64_t)v5, v8);
}

uint64_t sub_1000B96B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = type metadata accessor for VenueController(0);
  v6 = sub_100007428(&qword_10015E068, type metadata accessor for VenueController, (uint64_t)&unk_10010C530);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    swift_retain(v8);
    swift_bridgeObjectRetain(v10);
    sub_10008AB1C(v11, v10, 5, v8);
    swift_release(v9);
    swift_release(v8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B97B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch(sub_1000B9824, v4, v5);
}

uint64_t sub_1000B9824()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 32);
  v5 = type metadata accessor for VenueController(0);
  v6 = sub_100007428(&qword_10015E068, type metadata accessor for VenueController, (uint64_t)&unk_10010C530);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_10015B844);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_100058F50;
  return sub_10006A078(v7, v8);
}

uint64_t sub_1000B98DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010FC18);
  v3 = swift_getKeyPath(&unk_10010FC40);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_1000B9948(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100007D50(&qword_10015B790);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - v8;
  sub_100007E78(a1, (uint64_t)&v14 - v8, &qword_10015B790);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010FC18);
  v12 = swift_getKeyPath(&unk_10010FC40);
  sub_100007E78((uint64_t)v9, (uint64_t)v6, &qword_10015B790);
  swift_retain(v10);
  static Published.subscript.setter(v6, v10, KeyPath, v12);
  return sub_100007F38((uint64_t)v9, &qword_10015B790);
}

uint64_t sub_1000B9A44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010FC60);
  v5 = swift_getKeyPath(&unk_10010FC88);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000B9AC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010FC60);
  v5 = swift_getKeyPath(&unk_10010FC88);
  v7 = v2;
  swift_errorRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000B9B44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10015E074);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000FAC0;
  return sub_1000B97B8(v0 + 16);
}

unint64_t sub_1000B9B90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E080;
  if (!qword_10015E080)
  {
    v1 = sub_100007D00(&qword_10015E058);
    sub_10000F4E0(&qword_10015E088, &qword_10015E060, (uint64_t)&unk_100109DE0);
    sub_1000595E8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E080);
  }
  return result;
}

uint64_t sub_1000B9C1C()
{
  uint64_t v0;

  return sub_1000B96B8(v0 + 16);
}

uint64_t sub_1000B9C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Venue(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100007D50(&qword_10015B838);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void sub_1000B9CDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for Venue(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_100007D50(&qword_10015B838);
  sub_1000B9608(v0 + v2);
}

char *sub_1000B9D40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_100007D50(&qword_10015E0C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(qword_10015E0D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  if (!*a1)
    return (char *)&_swiftEmptyArrayStorage;
  if (v8 <= 0)
  {
    v14 = &_swiftEmptyArrayStorage;
LABEL_11:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GridItem(0) - 8) + 80);
    v18 = (uint64_t)v14 + ((v17 + 32) & ~v17);
    sub_100007E78((uint64_t)a1, (uint64_t)v4, &qword_10015E0C8);
    v19 = sub_1000BC150((uint64_t)v7, v18, v8);
    result = (char *)sub_100007F38((uint64_t)v7, qword_10015E0D0);
    if (v19 == v8)
      return (char *)v14;
    __break(1u);
    goto LABEL_14;
  }
  v9 = sub_100007D50(&qword_100159A28);
  v10 = *(_QWORD *)(type metadata accessor for GridItem(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (_QWORD *)swift_allocObject(v9, v13 + v11 * v8, v12 | 7);
  result = (char *)j__malloc_size(v14);
  if (v11)
  {
    if (&result[-v13] == (char *)0x8000000000000000 && v11 == -1)
      goto LABEL_15;
    v14[2] = v8;
    v14[3] = 2 * ((uint64_t)&result[-v13] / v11);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

_QWORD *sub_1000B9EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100007D50(&qword_10015CAB0);
  v4 = *(_QWORD *)(type metadata accessor for Genre(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_1000BC314(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_1000BC800(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000B9FFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100007D50(&qword_10015CAA8);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000BC5DC((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_1000BC800(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1000BA0E0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int isUniquelyReferenced_nonNull_native;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  void (*v52)(_QWORD, _QWORD, _QWORD);
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  char *v59;
  uint64_t (*v60)(unint64_t, char *, uint64_t);
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t, __n128);
  int64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  unint64_t v73;
  unint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;

  v3 = type metadata accessor for Genre(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v80 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015E0B0);
  __chkstk_darwin(v6);
  v81 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v69 - v9;
  v15 = __chkstk_darwin(v11);
  v17 = (char *)&v69 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *v1;
  v20 = *(_QWORD *)(*v1 + 16);
  v21 = v20 + v18;
  if (__OFADD__(v20, v18))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v19;
  v79 = v10;
  if (!isUniquelyReferenced_nonNull_native || (v23 = *(_QWORD *)(v19 + 24) >> 1, v23 < v21))
  {
    if (v20 <= v21)
      v24 = v20 + v18;
    else
      v24 = v20;
    v19 = sub_100089F40(isUniquelyReferenced_nonNull_native, v24, 1, v19);
    *v1 = v19;
    v23 = *(_QWORD *)(v19 + 24) >> 1;
  }
  v25 = *(_QWORD *)(v19 + 16);
  v20 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v21 = *(_QWORD *)(v4 + 72);
  v26 = v23 - v25;
  v27 = sub_1000BC314(&v82, v19 + v20 + v21 * v25, v23 - v25, a1);
  if (v27 < v18)
    goto LABEL_15;
  if (v27)
  {
    v29 = *(_QWORD *)(v19 + 16);
    v30 = __OFADD__(v29, v27);
    v31 = v29 + v27;
    if (v30)
    {
      __break(1u);
LABEL_20:
      v36 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else
      {
        v37 = (v28 + 64) >> 6;
        v78 = a1;
        if (v36 >= v37)
          goto LABEL_41;
        v38 = *(_QWORD *)(v19 + 8 * v36);
        if (v38)
        {
LABEL_23:
          v33 = (v38 - 1) & v38;
          v34 = __clz(__rbit64(v38)) + (v36 << 6);
          a1 = v36;
          goto LABEL_18;
        }
        v39 = a1 + 2;
        v78 = a1 + 1;
        if (a1 + 2 >= v37)
          goto LABEL_41;
        v14 = v20;
        v13 = v26;
        v12 = v18;
        v38 = *(_QWORD *)(v19 + 8 * v39);
        if (v38)
        {
LABEL_26:
          v36 = v39;
          goto LABEL_23;
        }
        v78 = a1 + 2;
        v19 = v77;
        if (a1 + 3 >= v37)
          goto LABEL_41;
        v38 = *(_QWORD *)(v77 + 8 * (a1 + 3));
        if (v38)
        {
          v36 = a1 + 3;
          goto LABEL_23;
        }
        v39 = a1 + 4;
        v78 = a1 + 3;
        v19 = v77;
        if (a1 + 4 >= v37)
          goto LABEL_41;
        v38 = *(_QWORD *)(v77 + 8 * v39);
        if (v38)
          goto LABEL_26;
        v36 = a1 + 5;
        v78 = a1 + 4;
        v19 = v77;
        if (a1 + 5 >= v37)
        {
LABEL_41:
          v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
          v70(v17, 1, 1, v3, v15);
          v35 = 0;
          a1 = v78;
          goto LABEL_42;
        }
        v38 = *(_QWORD *)(v77 + 8 * v36);
        if (v38)
          goto LABEL_23;
        v78 = v37 - 1;
        v40 = a1 + 6;
        while (v37 != v40)
        {
          v38 = *(_QWORD *)(v77 + 8 * v40++);
          if (v38)
          {
            v36 = v40 - 1;
            goto LABEL_23;
          }
        }
      }
      v18 = v12;
      v26 = v13;
      v19 = v77;
      v20 = v14;
      goto LABEL_41;
    }
    *(_QWORD *)(v19 + 16) = v31;
  }
  if (v27 != v26)
    return sub_1000BC800(v82);
LABEL_16:
  v26 = *(_QWORD *)(v19 + 16);
  v18 = v82;
  v19 = v83;
  v28 = v84;
  a1 = v85;
  v77 = v83;
  v74 = v84;
  if (!v86)
    goto LABEL_20;
  v33 = (v86 - 1) & v86;
  v34 = __clz(__rbit64(v86)) | (v85 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))(v17, *(_QWORD *)(v18 + 48) + v34 * v21, v3, v15);
  v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v70)(v17, 0, 1, v3);
  v35 = v33;
  v19 = v77;
LABEL_42:
  v76 = v35;
  v78 = a1;
  v82 = v18;
  v83 = v19;
  v84 = v74;
  v85 = a1;
  v86 = v35;
  v41 = v18;
  v42 = (uint64_t)v79;
  sub_100007E78((uint64_t)v17, (uint64_t)v79, &qword_10015E0B0);
  v43 = v42;
  v44 = v41;
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v75(v43, 1, v3) == 1)
  {
LABEL_82:
    sub_100007F38((uint64_t)v17, &qword_10015E0B0);
    sub_1000BC800(v44);
    return sub_100007F38((uint64_t)v79, &qword_10015E0B0);
  }
  v45 = (uint64_t)v79;
  v46 = v80;
  v71 = v20;
  while (1)
  {
    sub_100007F38(v45, &qword_10015E0B0);
    v47 = *(_QWORD *)(*v1 + 24);
    v48 = v47 >> 1;
    if ((uint64_t)(v47 >> 1) < v26 + 1)
    {
      v54 = sub_100089F40(v47 > 1, v26 + 1, 1, *v1);
      *v1 = v54;
      v78 = v54;
      v48 = *(_QWORD *)(v54 + 24) >> 1;
    }
    else
    {
      v78 = *v1;
    }
    v49 = v81;
    sub_100007E78((uint64_t)v17, v81, &qword_10015E0B0);
    if (v75(v49, 1, v3) != 1)
      break;
    v50 = v81;
LABEL_50:
    sub_100007F38(v50, &qword_10015E0B0);
    v51 = v26;
LABEL_45:
    *(_QWORD *)(*v1 + 16) = v51;
    v45 = (uint64_t)v79;
    sub_100007E78((uint64_t)v17, (uint64_t)v79, &qword_10015E0B0);
    if (v75(v45, 1, v3) == 1)
    {
      v44 = v82;
      v78 = v85;
      v76 = v86;
      goto LABEL_82;
    }
  }
  v73 = v78 + v20;
  v52 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  if (v26 <= v48)
    v53 = v48;
  else
    v53 = v26;
  v74 = v53;
  v50 = v81;
  v72 = v52;
  while (1)
  {
    v58 = v46;
    v59 = v46;
    v60 = (uint64_t (*)(unint64_t, char *, uint64_t))v52;
    v52(v58, v50, v3);
    v51 = v74;
    if (v26 == v74)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v59, v3);
      v26 = v51;
      v46 = v59;
      v20 = v71;
      goto LABEL_45;
    }
    sub_100007F38((uint64_t)v17, &qword_10015E0B0);
    v78 = v26;
    result = v60(v73 + v26 * v21, v59, v3);
    v56 = v82;
    v61 = v85;
    v76 = v84;
    v77 = v83;
    if (v86)
    {
      v55 = (v86 - 1) & v86;
      v62 = __clz(__rbit64(v86)) | (v85 << 6);
      v20 = v71;
      goto LABEL_62;
    }
    v69 = v82;
    v64 = v85 + 1;
    v20 = v71;
    if (__OFADD__(v85, 1))
      break;
    v65 = (v84 + 64) >> 6;
    v63 = v85;
    if (v64 < v65)
    {
      v66 = *(_QWORD *)(v83 + 8 * v64);
      if (v66)
        goto LABEL_66;
      v67 = v85 + 2;
      v63 = v85 + 1;
      if (v85 + 2 < v65)
      {
        v66 = *(_QWORD *)(v83 + 8 * v67);
        if (v66)
          goto LABEL_69;
        v63 = v85 + 2;
        if (v85 + 3 < v65)
        {
          v66 = *(_QWORD *)(v83 + 8 * (v85 + 3));
          if (v66)
          {
            v64 = v85 + 3;
            goto LABEL_66;
          }
          v67 = v85 + 4;
          v63 = v85 + 3;
          if (v85 + 4 < v65)
          {
            v66 = *(_QWORD *)(v83 + 8 * v67);
            if (v66)
            {
LABEL_69:
              v64 = v67;
              goto LABEL_66;
            }
            v64 = v85 + 5;
            v63 = v85 + 4;
            if (v85 + 5 < v65)
            {
              v66 = *(_QWORD *)(v83 + 8 * v64);
              if (!v66)
              {
                v63 = v65 - 1;
                v68 = v85 + 6;
                do
                {
                  if (v65 == v68)
                  {
                    v20 = v71;
                    goto LABEL_57;
                  }
                  v66 = *(_QWORD *)(v83 + 8 * v68++);
                }
                while (!v66);
                v64 = v68 - 1;
                v20 = v71;
              }
LABEL_66:
              v55 = (v66 - 1) & v66;
              v62 = __clz(__rbit64(v66)) + (v64 << 6);
              v61 = v64;
              v56 = v69;
LABEL_62:
              (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v17, *(_QWORD *)(v56 + 48) + v62 * v21, v3);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v70)(v17, 0, 1, v3);
              v63 = v61;
              goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_57:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v70)(v17, 1, 1, v3);
    v55 = 0;
    v56 = v69;
LABEL_58:
    v26 = v78 + 1;
    v82 = v56;
    v83 = v77;
    v84 = v76;
    v85 = v63;
    v86 = v55;
    v50 = v81;
    sub_100007E78((uint64_t)v17, v81, &qword_10015E0B0);
    v57 = v75(v50, 1, v3);
    v46 = v80;
    v52 = v72;
    if (v57 == 1)
      goto LABEL_50;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BA880(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10008A160(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1000BA9D4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for Genre(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1000BC7D8(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1000BAA54(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1000BAA54(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t, uint64_t);
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  _QWORD *v148;
  Swift::Int v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  Swift::Int v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;

  v2 = v1;
  v4 = type metadata accessor for Genre(0);
  v169 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v156 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v163 = (char *)&v148 - v7;
  __chkstk_darwin(v8);
  v165 = (char *)&v148 - v9;
  __chkstk_darwin(v10);
  v164 = (char *)&v148 - v11;
  __chkstk_darwin(v12);
  v152 = (char *)&v148 - v13;
  __chkstk_darwin(v14);
  v159 = (char *)&v148 - v15;
  __chkstk_darwin(v16);
  v154 = (char *)&v148 - v17;
  __chkstk_darwin(v18);
  v153 = (char *)&v148 - v19;
  v168 = a1;
  v20 = a1[1];
  result = _minimumMergeRunLength(_:)(v20);
  if (result >= v20)
  {
    if (v20 < 0)
      goto LABEL_150;
    if (v20)
      return sub_1000BB5EC(0, v20, 1, v168);
    return result;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_158;
  v149 = result;
  if (v20 < 2)
  {
    v27 = (char *)_swiftEmptyArrayStorage;
    v26 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
    v148 = _swiftEmptyArrayStorage;
    if (v20 != 1)
    {
      v29 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v29 >= 2)
      {
        v141 = *v168;
        do
        {
          v142 = v29 - 2;
          if (v29 < 2)
            goto LABEL_145;
          if (!v141)
            goto LABEL_157;
          v143 = *(_QWORD *)&v27[16 * v142 + 32];
          v144 = *(_QWORD *)&v27[16 * v29 + 24];
          v145 = v26;
          sub_1000BB8B4(v141 + *(_QWORD *)(v169 + 72) * v143, v141 + *(_QWORD *)(v169 + 72) * *(_QWORD *)&v27[16 * v29 + 16], v141 + *(_QWORD *)(v169 + 72) * v144, (unint64_t)v26);
          if (v2)
            break;
          if (v144 < v143)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
            v27 = sub_1000BC13C((uint64_t)v27);
          if (v142 >= *((_QWORD *)v27 + 2))
            goto LABEL_147;
          v146 = &v27[16 * v142 + 32];
          *(_QWORD *)v146 = v143;
          *((_QWORD *)v146 + 1) = v144;
          v147 = *((_QWORD *)v27 + 2);
          if (v29 > v147)
            goto LABEL_148;
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v147 - v29));
          *((_QWORD *)v27 + 2) = v147 - 1;
          v29 = v147 - 1;
          v26 = v145;
        }
        while (v147 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      v148[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = static Array._allocateBufferUninitialized(minimumCapacity:)(v22 >> 1, v4);
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v169 + 80);
    v148 = (_QWORD *)v24;
    v26 = (char *)(v24 + ((v25 + 32) & ~v25));
  }
  v28 = 0;
  v27 = (char *)_swiftEmptyArrayStorage;
  v158 = v26;
  v162 = v4;
  while (1)
  {
    v30 = v28;
    v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      v41 = v28 + 1;
      goto LABEL_67;
    }
    v166 = v20;
    v32 = *v168;
    v33 = *(_QWORD *)(v169 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
    v34(v153, *v168 + v33 * v31, v4);
    v157 = v30;
    v155 = v32;
    v167 = v33;
    v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v154, v32 + v33 * v30, v4);
    v36 = Genre.name.getter(v35);
    v38 = v37;
    v40 = Genre.name.getter(v36);
    if (v36 == v40 && v38 == v39)
      LODWORD(v161) = 0;
    else
      LODWORD(v161) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 1);
    v42 = v152;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = *(void (**)(char *, uint64_t))(v169 + 8);
    v44 = v162;
    v43(v154, v162);
    v43(v153, v44);
    v41 = v157 + 2;
    if (v157 + 2 < v166)
    {
      v150 = v27;
      v151 = v2;
      v160 = v167 * v31;
      v45 = v155;
      v46 = v167 * v41;
      while (1)
      {
        v47 = v162;
        v34(v159, v45 + v46, v162);
        v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v42, v45 + v160, v47);
        v49 = Genre.name.getter(v48);
        v51 = v50;
        v53 = Genre.name.getter(v49);
        if (v49 == v53 && v51 == v52)
          v54 = 0;
        else
          v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v53, v52, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55 = v162;
        v43(v42, v162);
        v43(v159, v55);
        if (((v161 ^ v54) & 1) != 0)
          break;
        ++v41;
        v45 += v167;
        if (v166 == v41)
        {
          v56 = v166;
          v41 = v166;
          v27 = v150;
          v2 = v151;
          goto LABEL_32;
        }
      }
      v27 = v150;
      v2 = v151;
    }
    v56 = v166;
LABEL_32:
    v30 = v157;
    v57 = v155;
    if ((v161 & 1) == 0)
      break;
    if (v41 < v157)
      goto LABEL_151;
    if (v157 >= v41)
      break;
    v150 = v27;
    v151 = v2;
    v58 = 0;
    v59 = v167 * (v41 - 1);
    v60 = v41 * v167;
    v61 = v157;
    v62 = v157 * v167;
    do
    {
      if (v61 != v41 + v58 - 1)
      {
        if (!v57)
          goto LABEL_156;
        v66 = v41;
        v67 = v57 + v62;
        v68 = v57 + v59;
        v161 = *(_QWORD *)(v169 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v161)(v156, v57 + v62, v162);
        if (v62 < v59 || v67 >= v57 + v60)
        {
          v63 = v57 + v62;
          v64 = v57 + v59;
          v65 = v162;
          swift_arrayInitWithTakeFrontToBack(v63, v64, 1, v162);
        }
        else
        {
          v65 = v162;
          if (v62 != v59)
            swift_arrayInitWithTakeBackToFront(v67, v68);
        }
        ((void (*)(uint64_t, char *, uint64_t))v161)(v68, v156, v65);
        v41 = v66;
        v57 = v155;
      }
      ++v61;
      --v58;
      v59 -= v167;
      v60 -= v167;
      v62 += v167;
    }
    while (v61 < v41 + v58);
    v27 = v150;
    v2 = v151;
    v69 = v162;
    v30 = v157;
    v56 = v166;
    if (v41 < v166)
      goto LABEL_48;
LABEL_67:
    if (v41 < v30)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = sub_1000BBE90(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v90 = *((_QWORD *)v27 + 2);
    v89 = *((_QWORD *)v27 + 3);
    v29 = v90 + 1;
    v26 = v158;
    v167 = v41;
    if (v90 >= v89 >> 1)
    {
      v140 = sub_1000BBE90((char *)(v89 > 1), v90 + 1, 1, v27);
      v26 = v158;
      v27 = v140;
    }
    *((_QWORD *)v27 + 2) = v29;
    v91 = v27 + 32;
    v92 = &v27[16 * v90 + 32];
    v93 = v167;
    *(_QWORD *)v92 = v30;
    *((_QWORD *)v92 + 1) = v93;
    if (v90)
    {
      while (1)
      {
        v94 = v29 - 1;
        if (v29 >= 4)
        {
          v99 = &v91[16 * v29];
          v100 = *((_QWORD *)v99 - 8);
          v101 = *((_QWORD *)v99 - 7);
          v105 = __OFSUB__(v101, v100);
          v102 = v101 - v100;
          if (v105)
            goto LABEL_133;
          v104 = *((_QWORD *)v99 - 6);
          v103 = *((_QWORD *)v99 - 5);
          v105 = __OFSUB__(v103, v104);
          v97 = v103 - v104;
          v98 = v105;
          if (v105)
            goto LABEL_134;
          v106 = v29 - 2;
          v107 = &v91[16 * v29 - 32];
          v109 = *(_QWORD *)v107;
          v108 = *((_QWORD *)v107 + 1);
          v105 = __OFSUB__(v108, v109);
          v110 = v108 - v109;
          if (v105)
            goto LABEL_136;
          v105 = __OFADD__(v97, v110);
          v111 = v97 + v110;
          if (v105)
            goto LABEL_139;
          if (v111 >= v102)
          {
            v129 = &v91[16 * v94];
            v131 = *(_QWORD *)v129;
            v130 = *((_QWORD *)v129 + 1);
            v105 = __OFSUB__(v130, v131);
            v132 = v130 - v131;
            if (v105)
              goto LABEL_143;
            v122 = v97 < v132;
            goto LABEL_104;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v123 = *((_QWORD *)v27 + 4);
            v124 = *((_QWORD *)v27 + 5);
            v105 = __OFSUB__(v124, v123);
            v116 = v124 - v123;
            v117 = v105;
            goto LABEL_98;
          }
          v96 = *((_QWORD *)v27 + 4);
          v95 = *((_QWORD *)v27 + 5);
          v105 = __OFSUB__(v95, v96);
          v97 = v95 - v96;
          v98 = v105;
        }
        if ((v98 & 1) != 0)
          goto LABEL_135;
        v106 = v29 - 2;
        v112 = &v91[16 * v29 - 32];
        v114 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        v115 = __OFSUB__(v113, v114);
        v116 = v113 - v114;
        v117 = v115;
        if (v115)
          goto LABEL_138;
        v118 = &v91[16 * v94];
        v120 = *(_QWORD *)v118;
        v119 = *((_QWORD *)v118 + 1);
        v105 = __OFSUB__(v119, v120);
        v121 = v119 - v120;
        if (v105)
          goto LABEL_141;
        if (__OFADD__(v116, v121))
          goto LABEL_142;
        if (v116 + v121 >= v97)
        {
          v122 = v97 < v121;
LABEL_104:
          if (v122)
            v94 = v106;
          goto LABEL_106;
        }
LABEL_98:
        if ((v117 & 1) != 0)
          goto LABEL_137;
        v125 = &v91[16 * v94];
        v127 = *(_QWORD *)v125;
        v126 = *((_QWORD *)v125 + 1);
        v105 = __OFSUB__(v126, v127);
        v128 = v126 - v127;
        if (v105)
          goto LABEL_140;
        if (v128 < v116)
          goto LABEL_14;
LABEL_106:
        v133 = v94 - 1;
        if (v94 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v168)
          goto LABEL_155;
        v134 = v27;
        v135 = &v91[16 * v133];
        v136 = *(_QWORD *)v135;
        v137 = &v91[16 * v94];
        v138 = *((_QWORD *)v137 + 1);
        sub_1000BB8B4(*v168 + *(_QWORD *)(v169 + 72) * *(_QWORD *)v135, *v168 + *(_QWORD *)(v169 + 72) * *(_QWORD *)v137, *v168 + *(_QWORD *)(v169 + 72) * v138, (unint64_t)v26);
        if (v2)
          goto LABEL_127;
        if (v138 < v136)
          goto LABEL_130;
        if (v94 > *((_QWORD *)v134 + 2))
          goto LABEL_131;
        *(_QWORD *)v135 = v136;
        *(_QWORD *)&v91[16 * v133 + 8] = v138;
        v139 = *((_QWORD *)v134 + 2);
        if (v94 >= v139)
          goto LABEL_132;
        v27 = v134;
        v29 = v139 - 1;
        memmove(&v91[16 * v94], v137 + 16, 16 * (v139 - 1 - v94));
        *((_QWORD *)v134 + 2) = v139 - 1;
        v26 = v158;
        if (v139 <= 2)
          goto LABEL_14;
      }
    }
    v29 = 1;
LABEL_14:
    v20 = v168[1];
    v28 = v167;
    v4 = v162;
    if (v167 >= v20)
      goto LABEL_116;
  }
  v69 = v162;
  if (v41 >= v56)
    goto LABEL_67;
LABEL_48:
  if (__OFSUB__(v41, v30))
    goto LABEL_149;
  if (v41 - v30 >= v149)
    goto LABEL_67;
  if (__OFADD__(v30, v149))
    goto LABEL_152;
  if (v30 + v149 >= v56)
    v70 = v56;
  else
    v70 = v30 + v149;
  if (v70 >= v30)
  {
    if (v41 != v70)
    {
      v157 = v30;
      v150 = v27;
      v151 = v2;
      v71 = *(_QWORD *)(v169 + 72);
      v160 = *(_QWORD *)(v169 + 16);
      v161 = v71;
      v166 = v41 * v71;
      v167 = v71 * (v41 - 1);
      v155 = v70;
      do
      {
        v73 = 0;
        v74 = v157;
        while (1)
        {
          v75 = *v168;
          v76 = (uint64_t (*)(char *, uint64_t, uint64_t))v160;
          ((void (*)(char *, Swift::Int, uint64_t))v160)(v164, v166 + v73 + *v168, v69);
          v77 = v76(v165, v167 + v73 + v75, v69);
          v78 = Genre.name.getter(v77);
          v80 = v79;
          v82 = Genre.name.getter(v78);
          if (v78 == v82 && v80 == v81)
            break;
          v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v82, v81, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v84 = *(void (**)(char *, uint64_t))(v169 + 8);
          v69 = v162;
          v84(v165, v162);
          v84(v164, v69);
          if ((v83 & 1) == 0)
            goto LABEL_58;
          v85 = *v168;
          if (!*v168)
            goto LABEL_154;
          v86 = v85 + v166 + v73;
          v87 = (char *)(v85 + v167 + v73);
          v88 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 32);
          v88(v163, v86, v69);
          swift_arrayInitWithTakeFrontToBack(v86, v87, 1, v69);
          v88(v87, (uint64_t)v163, v69);
          v73 -= v161;
          if (v41 == ++v74)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n(v80, 2);
        v72 = *(void (**)(char *, uint64_t))(v169 + 8);
        v69 = v162;
        v72(v165, v162);
        v72(v164, v69);
LABEL_58:
        ++v41;
        v167 += v161;
        v166 += v161;
      }
      while (v41 != v155);
      v41 = v155;
      v27 = v150;
      v2 = v151;
      v30 = v157;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000BB5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v41 = a4;
  v35 = a1;
  v6 = type metadata accessor for Genre(0);
  v42 = *(_QWORD **)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v40 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v44 = (char *)&v33 - v10;
  result = __chkstk_darwin(v9);
  v43 = (char *)&v33 - v12;
  v39 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v13 = v42[9];
    v36 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[2];
    v37 = v13;
    v14 = v13 * (v39 - 1);
    v45 = v13 * v39;
LABEL_6:
    v16 = 0;
    v17 = v35;
    v38 = v14;
    while (1)
    {
      v18 = *v41;
      v19 = v36;
      v36(v43, v45 + v16 + *v41, v6);
      v20 = v19(v44, v14 + v16 + v18, v6);
      v21 = Genre.name.getter(v20);
      v23 = v22;
      v25 = Genre.name.getter(v21);
      v26 = v24;
      if (v21 == v25 && v23 == v24)
      {
        swift_bridgeObjectRelease_n(v23, 2);
        v15 = (void (*)(char *, uint64_t))v42[1];
        v15(v44, v6);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v43, v6);
        v14 = v38;
LABEL_5:
        v14 += v37;
        v45 += v37;
        if (++v39 == v34)
          return result;
        goto LABEL_6;
      }
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v24, 1);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      v28 = (void (*)(char *, uint64_t))v42[1];
      v28(v44, v6);
      result = ((uint64_t (*)(char *, uint64_t))v28)(v43, v6);
      v14 = v38;
      if ((v27 & 1) == 0)
        goto LABEL_5;
      v29 = *v41;
      if (!*v41)
        break;
      v30 = v29 + v45 + v16;
      v31 = v29 + v38 + v16;
      v32 = (void (*)(char *, uint64_t, uint64_t))v42[4];
      v32(v40, v30, v6);
      swift_arrayInitWithTakeFrontToBack(v30, v31, 1, v6);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v40, v6);
      v16 -= v37;
      if (v39 == ++v17)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BB8B4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char v34;
  void (*v35)(char *, uint64_t);
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t (*v43)(char *, unint64_t, uint64_t);
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t result;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v8 = type metadata accessor for Genre(0);
  __chkstk_darwin(v8);
  v63 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v62 = (char *)&v59 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v59 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  v64 = v18;
  v65 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v65 == -1)
    goto LABEL_69;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v65 == -1)
    goto LABEL_70;
  v21 = (uint64_t)(a2 - a1) / v65;
  v68 = a1;
  v67 = a4;
  v22 = v20 / v65;
  if (v21 >= v20 / v65)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v65;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v22, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v39 = a4 + v24;
      v66 = a4 + v24;
      v68 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v41 = -v65;
        v65 = *(_QWORD *)(v64 + 16);
        v60 = a4;
        v61 = a1;
        do
        {
          v42 = a3;
          v43 = (uint64_t (*)(char *, unint64_t, uint64_t))v65;
          ((void (*)(char *, unint64_t, uint64_t))v65)(v62, v39 + v41, v8);
          v44 = a2 + v41;
          v45 = v43(v63, a2 + v41, v8);
          v46 = Genre.name.getter(v45);
          v48 = v47;
          v50 = Genre.name.getter(v46);
          if (v46 == v50 && v48 == v49)
            v51 = 0;
          else
            v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v50, v49, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 += v41;
          v52 = *(void (**)(char *, uint64_t))(v64 + 8);
          v52(v63, v8);
          v52(v62, v8);
          if ((v51 & 1) != 0)
          {
            if (v42 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v42 + v41, a2 + v41, 1, v8);
              v54 = v60;
              v55 = v61;
            }
            else
            {
              v53 = v42 == a2;
              v54 = v60;
              v55 = v61;
              if (!v53)
                swift_arrayInitWithTakeBackToFront(a3, a2 + v41);
            }
            v68 += v41;
          }
          else
          {
            v56 = v66;
            v57 = v66 + v41;
            v66 += v41;
            if (v42 < v56 || a3 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack(v42 + v41, v57, 1, v8);
              v44 = a2;
              v54 = v60;
              v55 = v61;
            }
            else
            {
              v55 = v61;
              if (v42 != v56)
                swift_arrayInitWithTakeBackToFront(v42 + v41, v57);
              v44 = a2;
              v54 = v60;
            }
          }
          v39 = v66;
          if (v66 <= v54)
            break;
          a2 = v44;
        }
        while (v44 > v55);
      }
LABEL_67:
      sub_1000BBF88(&v68, &v67, (uint64_t *)&v66);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v65;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v21, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v63 = (char *)(a4 + v23);
    v66 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v64 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        v27 = ((uint64_t (*)(char *, unint64_t, uint64_t))v26)(v14, a4, v8);
        v28 = Genre.name.getter(v27);
        v30 = v29;
        v32 = Genre.name.getter(v28);
        if (v28 == v32 && v30 == v31)
          break;
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35 = *(void (**)(char *, uint64_t))(v64 + 8);
        v35(v14, v8);
        v35(v17, v8);
        if ((v34 & 1) == 0)
          goto LABEL_31;
        v36 = v68;
        v37 = a2 + v65;
        if (v68 < a2 || v68 >= v37)
        {
          swift_arrayInitWithTakeFrontToBack(v68, a2, 1, v8);
        }
        else if (v68 == a2)
        {
          v36 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v68, a2);
        }
LABEL_37:
        v68 = v36 + v65;
        a4 = v67;
        if (v67 < (unint64_t)v63)
        {
          a2 = v37;
          if (v37 < a3)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n(v30, 2);
      v33 = *(void (**)(char *, uint64_t))(v64 + 8);
      v33(v14, v8);
      v33(v17, v8);
LABEL_31:
      v36 = v68;
      v38 = v67 + v65;
      if (v68 < v67 || v68 >= v38)
      {
        swift_arrayInitWithTakeFrontToBack(v68, v67, 1, v8);
      }
      else if (v68 != v67)
      {
        swift_arrayInitWithTakeBackToFront(v68, v67);
      }
      v67 = v38;
      v37 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_1000BBE90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007D50(&qword_10015E0A8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000BBF88(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for Genre(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_1000BC094(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1000BC13C(uint64_t a1)
{
  return sub_1000BBE90(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000BC150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = sub_100007D50(&qword_10015E0C8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100007D50(qword_10015E0D0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_100018EB4(v4, (uint64_t)v13, &qword_10015E0C8);
  v15 = *(int *)(v11 + 36);
  *(_QWORD *)((char *)v13 + v15) = 0;
  if (!a2)
  {
LABEL_13:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    sub_100018EB4((uint64_t)v13, a1, qword_10015E0D0);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*v13)
    {
      v24 = a1;
      v16 = 1;
      while (1)
      {
        sub_100007E78((uint64_t)v13, (uint64_t)v10, &qword_10015E0C8);
        v17 = *v10;
        result = sub_100007F38((uint64_t)v10, &qword_10015E0C8);
        if (v16 - 1 >= v17)
          break;
        if (v16 - 1 >= *v13)
          goto LABEL_16;
        v18 = (char *)v13 + *(int *)(v8 + 28);
        *(_QWORD *)((char *)v13 + v15) = v16;
        v19 = type metadata accessor for GridItem(0);
        v20 = *(_QWORD *)(v19 - 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a2, v18, v19);
        if (a3 == v16)
          goto LABEL_12;
        a2 += *(_QWORD *)(v20 + 72);
        v21 = v16 + 1;
        if (v16++ == *v13)
        {
          a3 = v21 - 1;
LABEL_12:
          a1 = v24;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000BC314(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for Genre(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  v39 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v37 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v17 - 24);
  v35 = a1;
  v22 = 0;
  v23 = 0;
  v36 = (unint64_t)(63 - v19) >> 6;
  v33 = v36 - 1;
  v38 = a3;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v39 + 48) + v29 * v25, v8);
    v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v36)
      goto LABEL_32;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v36)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v36)
    goto LABEL_32;
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v36)
    {
      v21 = 0;
      v22 = v33;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v37 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000BC5DC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000BC7D8(_QWORD *a1)
{
  return sub_1000F16FC(0, a1[2], 0, a1);
}

uint64_t sub_1000BC7EC(uint64_t a1)
{
  return sub_1000F1A58(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000BC800(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1000BC80C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E0B8;
  if (!qword_10015E0B8)
  {
    v1 = sub_100007D00(&qword_10015E0C0);
    sub_1000B9B90();
    sub_10005966C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E0B8);
  }
  return result;
}

uint64_t sub_1000BC878@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;

  v18 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010AEA8, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v18, WitnessTable);
  v21 = (int *)type metadata accessor for TourPhotosView(0, *(_QWORD *)(v18 + 80), *(_QWORD *)(v18 + 88), v20);
  v22 = a8 + v21[9];
  *(_QWORD *)v22 = a2;
  *(_QWORD *)(v22 + 8) = a3;
  *(_QWORD *)(v22 + 16) = a4;
  *(_BYTE *)(v22 + 24) = a5 & 1;
  v23 = a8 + v21[10];
  *(_QWORD *)v23 = a6;
  *(_QWORD *)(v23 + 8) = a7;
  *(double *)(v23 + 16) = a9;
  v24 = (uint64_t *)(a8 + v21[11]);
  v25 = type metadata accessor for RemoteViewConfiguration();
  v26 = sub_10001F9C0();
  result = EnvironmentObject.init()(v25, v26);
  *v24 = result;
  v24[1] = v28;
  return result;
}

uint64_t type metadata accessor for TourPhotosView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TourPhotosView);
}

uint64_t sub_1000BC96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];

  v5 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = &unk_10010FD10;
    v8[2] = &unk_10010FD28;
    v8[3] = &unk_10010FD40;
    swift_initStructMetadata(a1, 0, 4, v8, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000BCA00(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    v5 = (uint64_t *)(v24 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v5, a2, v9);
    v10 = *(int *)(a3 + 36);
    v11 = *(int *)(a3 + 40);
    v12 = (char *)v5 + v10;
    v13 = (char *)a2 + v10;
    v14 = *(_QWORD *)v13;
    v15 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v15;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    v12[24] = v13[24];
    v16 = (uint64_t *)((char *)v5 + v11);
    v17 = (uint64_t *)((char *)a2 + v11);
    v18 = *v17;
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v16[2] = v17[2];
    v20 = *(int *)(a3 + 44);
    v21 = (uint64_t *)((char *)v5 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v24 = *v22;
    v23 = v22[1];
    *v21 = v24;
    v21[1] = v23;
    swift_retain(v14);
    swift_retain(v15);
    swift_retain(v18);
    swift_retain(v19);
  }
  swift_retain(v24);
  return v5;
}

double sub_1000BCB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double result;

  v6 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  swift_release(*v9);
  swift_release(v9[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000BCB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = a1 + v9;
  v12 = (uint64_t *)(a2 + v9);
  v13 = *v12;
  v14 = v12[1];
  *(_QWORD *)v11 = *v12;
  *(_QWORD *)(v11 + 8) = v14;
  *(_QWORD *)(v11 + 16) = v12[2];
  *(_BYTE *)(v11 + 24) = *((_BYTE *)v12 + 24);
  v15 = (uint64_t *)(a1 + v10);
  v16 = (uint64_t *)(a2 + v10);
  v17 = *v16;
  v18 = v16[1];
  *v15 = *v16;
  v15[1] = v18;
  v15[2] = v16[2];
  v19 = *(int *)(a3 + 44);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v23);
  return a1;
}

uint64_t sub_1000BCC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + v9) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = *(_QWORD *)(v11 + 8);
  v15 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  *(_QWORD *)(v10 + 16) = v16;
  v17 = *(int *)(a3 + 40);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = *(_QWORD *)(v19 + 8);
  v23 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v22;
  swift_retain(v22);
  swift_release(v23);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  v24 = *(int *)(a3 + 44);
  v25 = a1 + v24;
  v26 = (uint64_t *)(a2 + v24);
  v27 = *(_QWORD *)(a1 + v24);
  v28 = *v26;
  *(_QWORD *)(a1 + v24) = *v26;
  swift_retain(v28);
  swift_release(v27);
  *(_QWORD *)(v25 + 8) = v26[1];
  return a1;
}

uint64_t sub_1000BCD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = (_OWORD *)(a1 + v9);
  v12 = (_OWORD *)(a2 + v9);
  *v11 = *v12;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v12 + 9);
  v13 = a1 + v10;
  v14 = a2 + v10;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000BCE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_release(v12);
  v13 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
  swift_release(v13);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_release(v18);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  v19 = *(int *)(a3 + 44);
  v20 = a1 + v19;
  v21 = (_QWORD *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *v21;
  swift_release(v22);
  *(_QWORD *)(v20 + 8) = v21[1];
  return a1;
}

uint64_t sub_1000BCF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BCF3C);
}

uint64_t sub_1000BCF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v7 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, a2, v8);
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000BCFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BCFD8);
}

uint64_t sub_1000BCFD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  result = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000BD064(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100119000, 1);
}

uint64_t sub_1000BD098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for TourPhotosViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000BD0D4()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100007D50(&qword_10015E1E8);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_1000BD134()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100007D50(&qword_10015E1E8);
  Binding.projectedValue.getter(&v2, v0);
  return v2;
}

double sub_1000BD198()
{
  uint64_t v0;
  double v2;

  v0 = sub_100007D50(&qword_10015C490);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_1000BD1EC(uint64_t a1, double a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 40));
  v4 = v3[1];
  v5 = v3[2];
  v8[1] = *v3;
  v8[2] = v4;
  v8[3] = v5;
  *(double *)v8 = a2;
  v6 = sub_100007D50(&qword_10015C490);
  return Binding.wrappedValue.setter(v8, v6);
}

uint64_t sub_1000BD244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char *v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  void *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t OpaqueTypeConformance2;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD v200[6];
  _QWORD v201[6];
  char v202[16];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  void *v220;
  void *v221;

  v197 = a2;
  v198 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  v195 = *(_QWORD *)(a1 - 8);
  v196 = v3;
  v4 = __chkstk_darwin(a1);
  v194 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PagingScrollTargetBehavior(0, v4);
  v193 = *(_QWORD *)(v6 - 8);
  v7 = (void *)v6;
  __chkstk_darwin(v6);
  v184 = (char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, v199, "offset element ", 0);
  v10 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v11 = sub_100007D00(&qword_10015E158);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v217 = v10;
  v218 = &type metadata for Int;
  v219 = v11;
  v220 = (void *)WitnessTable;
  v221 = &protocol witness table for Int;
  v13 = type metadata accessor for ForEach(255, &v217);
  v216 = sub_10000F4E0(&qword_10015E160, &qword_10015E158, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v13);
  v15 = type metadata accessor for HStack(255, v13, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v15);
  v217 = v15;
  v218 = (void *)v16;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v217, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v175 = OpaqueTypeMetadata2;
  v217 = v15;
  v218 = (void *)v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v18 = type metadata accessor for ScrollView(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v181 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v171 = (char *)&v146 - v19;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v18);
  v217 = v18;
  v218 = v7;
  v160 = v7;
  v219 = v20;
  v220 = &protocol witness table for PagingScrollTargetBehavior;
  v21 = v20;
  v161 = v20;
  v22 = swift_getOpaqueTypeMetadata2(0, &v217, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v185 = *(_QWORD *)(v22 - 8);
  v23 = v22;
  __chkstk_darwin(v22);
  v159 = (char *)&v146 - v24;
  v217 = v18;
  v218 = v7;
  v219 = v21;
  v220 = &protocol witness table for PagingScrollTargetBehavior;
  v25 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v217 = v23;
  v218 = &type metadata for Int;
  v26 = v23;
  v163 = v23;
  v164 = v25;
  v219 = v25;
  v220 = &protocol witness table for Int;
  v27 = v25;
  v28 = swift_getOpaqueTypeMetadata2(0, &v217, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v182 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v162 = (char *)&v146 - v29;
  v217 = v26;
  v218 = &type metadata for Int;
  v219 = v27;
  v220 = &protocol witness table for Int;
  v30 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v217 = v28;
  v218 = (void *)v30;
  v31 = v28;
  v147 = v28;
  v148 = v30;
  v32 = (void *)v30;
  v33 = swift_getOpaqueTypeMetadata2(0, &v217, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v186 = *(_QWORD *)(v33 - 8);
  v178 = v33;
  __chkstk_darwin(v33);
  v165 = (char *)&v146 - v34;
  v35 = sub_100007D00(&qword_10015E168);
  v36 = type metadata accessor for ModifiedContent(0, v33, v35);
  v188 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v172 = (char *)&v146 - v37;
  v152 = v36;
  v38 = type metadata accessor for ModifiedContent(0, v36, &type metadata for _FrameLayout);
  v187 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v174 = (char *)&v146 - v39;
  v40 = sub_100007D00(&qword_10015AA40);
  v153 = v38;
  v41 = type metadata accessor for ModifiedContent(0, v38, v40);
  v189 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v173 = (char *)&v146 - v42;
  v43 = sub_100007D00(&qword_10015E170);
  v155 = v41;
  v44 = type metadata accessor for ModifiedContent(0, v41, v43);
  v190 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v180 = (char *)&v146 - v45;
  v157 = v44;
  v46 = type metadata accessor for ModifiedContent(0, v44, &type metadata for _PaddingLayout);
  v191 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v183 = (char *)&v146 - v47;
  v48 = sub_100007D00(&qword_10015E178);
  v170 = v48;
  v217 = v31;
  v218 = v32;
  v49 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v149 = v49;
  v50 = sub_10000F4E0(&qword_10015E180, &qword_10015E168, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v214 = v49;
  v215 = v50;
  v151 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
  v212 = v151;
  v213 = &protocol witness table for _FrameLayout;
  v51 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v38);
  v150 = v51;
  v52 = sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v210 = v51;
  v211 = v52;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v41);
  v154 = v53;
  v54 = sub_10000F4E0(&qword_10015E188, &qword_10015E170, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v208 = v53;
  v209 = v54;
  v156 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v206 = v156;
  v207 = &protocol witness table for _PaddingLayout;
  v166 = v46;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v168 = v55;
  v167 = sub_1000C0F90();
  v217 = v46;
  v218 = (void *)v48;
  v219 = v55;
  v220 = (void *)v167;
  v177 = swift_getOpaqueTypeMetadata2(0, &v217, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v179 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v158 = (char *)&v146 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v169 = (uint64_t)&v146 - v58;
  v60 = static Axis.Set.horizontal.getter(v59);
  v61 = v198;
  v62 = v199;
  v146 = *(_QWORD *)(v198 + 24);
  v203 = v199;
  v204 = v146;
  v63 = v192;
  v205 = v192;
  v64 = v171;
  v65 = ScrollView.init(_:showsIndicators:content:)(v60, 0, sub_1000C0FEC, v202, v175, OpaqueTypeConformance2);
  v66 = v184;
  PagingScrollTargetBehavior.init()(v65);
  v68 = v159;
  v67 = v160;
  View.scrollTargetBehavior<A>(_:)(v66, v18, v160, v161, &protocol witness table for PagingScrollTargetBehavior);
  (*(void (**)(char *, void *))(v193 + 8))(v66, v67);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v64, v18);
  v69 = v63;
  v70 = sub_1000BD134();
  v72 = v71;
  v217 = v70;
  v218 = v71;
  v219 = v73;
  LOBYTE(v220) = v74 & 1;
  v76 = v162;
  v75 = v163;
  View.scrollPosition<A>(id:anchor:)(&v217, 0, 0, 1, v163, &type metadata for Int, v164, &protocol witness table for Int);
  swift_release(v72);
  v77 = swift_release(v70);
  (*(void (**)(char *, uint64_t, __n128))(v185 + 8))(v68, v75, v77);
  v78 = v69;
  v82 = sub_1000BD098(v61, v79, v80, v81);
  LOBYTE(v70) = sub_100052114();
  swift_release(v82);
  v83 = v165;
  v84 = v147;
  View.scrollDisabled(_:)((v70 & 1) == 0, v147, v148);
  v85 = (*(uint64_t (**)(char *, uint64_t))(v182 + 8))(v76, v84);
  v201[2] = v62;
  v86 = v146;
  v201[3] = v146;
  v201[4] = v78;
  v87 = static Alignment.center.getter(v85);
  v89 = v88;
  v90 = sub_100007D50(&qword_10015E198);
  v91 = sub_10000F4E0(&qword_10015E1A0, &qword_10015E198, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v92 = v172;
  v93 = v178;
  View.background<A>(alignment:content:)(v87, v89, sub_1000C0FF8, v201, v178, v90, v149, v91);
  (*(void (**)(char *, uint64_t))(v186 + 8))(v83, v93);
  v94 = v198;
  v98 = sub_1000BD098(v198, v95, v96, v97);
  v99 = *(_QWORD *)(v98 + 64);
  swift_release(v98);
  v101 = static Alignment.center.getter(v100);
  v102 = v174;
  v103 = v152;
  View.frame(width:height:alignment:)(0, 1, v99, 0, v101, v104, v152, v151);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v92, v103);
  v105 = v173;
  v106 = v153;
  View.clipped(antialiased:)(0, v153, v150);
  v107 = (*(uint64_t (**)(char *, uint64_t))(v187 + 8))(v102, v106);
  v108 = v199;
  v200[2] = v199;
  v200[3] = v86;
  v109 = v86;
  v200[4] = v78;
  v110 = static Alignment.center.getter(v107);
  v112 = v111;
  v113 = sub_100007D50(&qword_10015E1A8);
  v114 = sub_1000C1010();
  v115 = v180;
  v116 = v112;
  v117 = v155;
  View.overlay<A>(alignment:content:)(v110, v116, sub_1000C1004, v200, v155, v113, v154, v114);
  v118 = (*(uint64_t (**)(char *, uint64_t))(v189 + 8))(v105, v117);
  v119 = static Edge.Set.bottom.getter(v118);
  v120 = v94;
  v124 = sub_1000BD098(v94, v121, v122, v123);
  LODWORD(v110) = *(unsigned __int8 *)(v124 + 72);
  swift_release(v124);
  if ((_DWORD)v110)
    v125 = 0xC042000000000000;
  else
    v125 = 0;
  v126 = v183;
  v127 = v119;
  v128 = v157;
  View.padding(_:_:)(v127, v125, 0, v157, v156);
  (*(void (**)(char *, uint64_t))(v190 + 8))(v115, v128);
  v217 = sub_1000BD0D4();
  LOBYTE(v218) = v129 & 1;
  v131 = v194;
  v130 = v195;
  (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v194, v78, v120);
  v132 = *(unsigned __int8 *)(v130 + 80);
  v133 = v130;
  v134 = (v132 + 32) & ~v132;
  v135 = swift_allocObject(&unk_10014E8E0, v134 + v196, v132 | 7);
  *(_QWORD *)(v135 + 16) = v108;
  *(_QWORD *)(v135 + 24) = v109;
  (*(void (**)(uint64_t, char *, uint64_t))(v133 + 32))(v135 + v134, v131, v120);
  v136 = (uint64_t)v158;
  v138 = v166;
  v137 = (void *)v167;
  v139 = (void *)v170;
  v140 = v168;
  View.onChange<A>(of:initial:_:)(&v217, 0, sub_1000C1170, v135, v166, v170, v168, v167);
  v141 = swift_release(v135);
  (*(void (**)(char *, uint64_t, __n128))(v191 + 8))(v126, v138, v141);
  v217 = v138;
  v218 = v139;
  v219 = v140;
  v220 = v137;
  swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v142 = v169;
  v143 = v177;
  sub_10005135C(v136, v177, v169);
  v144 = *(void (**)(uint64_t, uint64_t))(v179 + 8);
  v144(v136, v143);
  sub_1000424BC(v142, v143, v197);
  return ((uint64_t (*)(uint64_t, uint64_t))v144)(v142, v143);
}

uint64_t sub_1000BDDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t WitnessTable;
  void *v36;

  v24 = a1;
  v25 = a3;
  v26 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a2, "offset element ", 0);
  v32 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v33 = &type metadata for Int;
  v34 = sub_100007D00(&qword_10015E158);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v32);
  v36 = &protocol witness table for Int;
  v6 = type metadata accessor for ForEach(255, &v32);
  v31 = sub_10000F4E0(&qword_10015E160, &qword_10015E158, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
  v8 = type metadata accessor for HStack(0, v6, v7);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - v9;
  v11 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  v32 = v8;
  v33 = (void *)v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v32, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v13 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v23 - v17;
  v28 = a2;
  v29 = v25;
  v30 = v24;
  v20 = static VerticalAlignment.center.getter(v19);
  HStack.init(alignment:spacing:content:)(v20, 0, 0, sub_1000C1AD0, v27, v6, v7);
  View.scrollTargetLayout(isEnabled:)(1, v8, v11);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  v32 = v8;
  v33 = (void *)v11;
  swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_10005135C((uint64_t)v15, OpaqueTypeMetadata2, (uint64_t)v18);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v15, OpaqueTypeMetadata2);
  sub_1000424BC((uint64_t)v18, OpaqueTypeMetadata2, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, OpaqueTypeMetadata2);
}

uint64_t sub_1000BE03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t TupleTypeMetadata2;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t WitnessTable;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[6];

  v38 = a3;
  v35 = a1;
  v44 = a5;
  v6 = type metadata accessor for TourPhotosView(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v39 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v37 = (char *)&v35 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, a2, "offset element ", 0);
  v9 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v42 = v9;
  v10 = sub_100007D00(&qword_10015E158);
  v41 = v10;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v49[0] = v9;
  v49[1] = &type metadata for Int;
  v49[2] = v10;
  v49[3] = WitnessTable;
  v49[4] = &protocol witness table for Int;
  v11 = type metadata accessor for ForEach(0, v49);
  v43 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v20 = sub_1000BD098(v6, v17, v18, v19);
  v21 = *(_QWORD *)(v20 + 32);
  swift_bridgeObjectRetain(v21);
  swift_release(v20);
  v48 = v21;
  v22 = type metadata accessor for Array(0, a2);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  Sequence.enumerated()(v49, v22, v23);
  swift_bridgeObjectRelease();
  v48 = v49[0];
  v24 = type metadata accessor for EnumeratedSequence(0, v22, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v24);
  v49[0] = Array.init<A>(_:)(&v48, TupleTypeMetadata2, v24, v25);
  v26 = v38;
  v45 = a2;
  v46 = v38;
  TupleTypeMetadata2 = swift_getKeyPath(&unk_10010FDB8);
  v27 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v37, v35, v6);
  v28 = *(unsigned __int8 *)(v7 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(&unk_10014E930, v29 + v39, v28 | 7);
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v30 + v29, v27, v6);
  v31 = (_QWORD *)swift_allocObject(&unk_10014E958, 48, 7);
  v31[2] = a2;
  v31[3] = v26;
  v31[4] = sub_1000C1AE0;
  v31[5] = v30;
  v32 = sub_10000F4E0(&qword_10015E160, &qword_10015E158, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  ForEach<>.init(_:id:content:)(v49, TupleTypeMetadata2, sub_1000C1B74, v31, v42, v41, WitnessTable, &protocol witness table for Int, v32);
  v47 = v32;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  sub_10005135C((uint64_t)v13, v11, (uint64_t)v16);
  v33 = *(void (**)(char *, uint64_t))(v43 + 8);
  v33(v13, v11);
  sub_1000424BC((uint64_t)v16, v11, v44);
  return ((uint64_t (*)(char *, uint64_t))v33)(v16, v11);
}

uint64_t sub_1000BE3A0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v26[1] = a4;
  v7 = type metadata accessor for TourPhotosView(0, a2, a3, a2);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)v26 - v10;
  v12 = sub_100007D50(&qword_100158658);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, __n128))(a3 + 24))(a2, a3, v13);
  v16 = type metadata accessor for URL(0);
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 0, 1, v16);
  v18 = static Animation.easeInOut.getter(v17);
  v19 = Transaction.init(animation:)(v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(&unk_10014E980, v21 + v9, v20 | 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, v11, v7);
  v23 = sub_100007D50(&qword_10015E2B8);
  v24 = sub_1000C180C(&qword_10015E2C0, &qword_10015E2B8, (void (*)(void))sub_1000C1D2C);
  return AsyncImage.init(url:scale:transaction:content:)(v15, v19, sub_1000C1CC4, v22, v23, v24, 1.0);
}

uint64_t sub_1000BE554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *);
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v153;
  __int128 v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  uint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD v198[3];
  _BYTE v199[32];
  __int128 v200;

  v192 = a4;
  v191 = a3;
  *(_QWORD *)&v193 = a2;
  v188 = a5;
  v162 = sub_100007D50(&qword_10015E270);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v160 = (uint64_t (*)(char *, uint64_t))((char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v184 = sub_100007D50(&qword_10015E380);
  __chkstk_darwin(v184);
  v159 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v163 = (void (*)(char *))((char *)&v154 - v9);
  v189 = sub_100007D50(&qword_10015E388);
  __chkstk_darwin(v189);
  v187 = (uint64_t)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100007D50(&qword_10015E390);
  __chkstk_darwin(v181);
  v182 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100007D50(&qword_10015E2D0);
  __chkstk_darwin(v190);
  v183 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100007D50(&qword_10015E398);
  __chkstk_darwin(v176);
  v177 = (uint64_t)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100007D50(&qword_10015E3A0);
  __chkstk_darwin(v175);
  v178 = (uint64_t)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Image.ResizingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100007D50(&qword_10015E288);
  v164 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v20 = (char *)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100007D50(&qword_10015E340);
  __chkstk_darwin(v185);
  v22 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100007D50(&qword_10015E330);
  __chkstk_darwin(v186);
  v24 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100007D50(&qword_10015E320);
  __chkstk_darwin(v165);
  v169 = (uint64_t)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100007D50(&qword_10015E310);
  __chkstk_darwin(v166);
  v170 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100007D50(&qword_10015E300);
  __chkstk_darwin(v168);
  v174 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100007D50(&qword_10015E2F0);
  __chkstk_darwin(v171);
  v173 = (uint64_t)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100007D50(&qword_10015E2E0);
  __chkstk_darwin(v180);
  v172 = (uint64_t)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v179 = (uint64_t)&v154 - v31;
  v32 = type metadata accessor for AsyncImagePhase(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (uint64_t *)((char *)&v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v33 + 16))(v36, a1, v32, v34);
  v37 = (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 88))(v36, v32);
  if (v37 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v33 + 96))(v36, v32);
    v161 = *v36;
    v38 = v161;
    LODWORD(v162) = enum case for Image.ResizingMode.stretch(_:);
    v163 = *(void (**)(char *))(v16 + 104);
    v163(v18);
    v39 = Image.resizable(capInsets:resizingMode:)(v18, v38, 0.0, 0.0, 0.0, 0.0);
    v160 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    v40 = v160(v18, v15);
    *(_OWORD *)v199 = (unint64_t)v39;
    *(_WORD *)&v199[16] = 257;
    v41 = static Axis.Set.horizontal.getter(v40);
    v42 = static Alignment.center.getter(v41);
    v44 = v43;
    v45 = sub_100007D50(&qword_1001590D0);
    v155 = v15;
    v46 = v45;
    v159 = (char *)v45;
    v158 = sub_100020844();
    View.containerRelativeFrame(_:alignment:)(v41, v42, v44, v46, v158);
    swift_release(v39);
    v157 = type metadata accessor for TourPhotosView(0, v191, v192, v47);
    v51 = sub_1000BD098(v157, v48, v49, v50);
    v52 = *(_QWORD *)(v51 + 64);
    swift_release(v51);
    v54 = static Alignment.center.getter(v53);
    _FrameLayout.init(width:height:alignment:)(v198, 0, 1, v52, 0, v54, v55);
    v56 = v164;
    v156 = *(void (**)(char *, char *, uint64_t))(v164 + 16);
    v57 = v167;
    v156(v22, v20, v167);
    v58 = &v22[*(int *)(v185 + 36)];
    v59 = v198[1];
    *(_OWORD *)v58 = v198[0];
    *((_OWORD *)v58 + 1) = v59;
    *((_OWORD *)v58 + 2) = v198[2];
    v164 = *(_QWORD *)(v56 + 8);
    ((void (*)(char *, uint64_t))v164)(v20, v57);
    sub_100007E78((uint64_t)v22, (uint64_t)v24, &qword_10015E340);
    *(_WORD *)&v24[*(int *)(v186 + 36)] = 0;
    v60 = sub_100007F38((uint64_t)v22, &qword_10015E340);
    v61 = static Alignment.center.getter(v60);
    v63 = v62;
    sub_1000C092C((uint64_t (*)(void))&static Color.black.getter, (uint64_t (*)(void))&static Color.clear.getter, (uint64_t)v199, 0.64, 0.86);
    v64 = *(_QWORD *)v199;
    v154 = *(_OWORD *)&v199[8];
    v65 = *(_QWORD *)&v199[24];
    v66 = v200;
    v67 = v169;
    sub_100007E78((uint64_t)v24, v169, &qword_10015E330);
    v68 = v67 + *(int *)(v165 + 36);
    *(_QWORD *)v68 = v61;
    *(_QWORD *)(v68 + 8) = v63;
    *(_QWORD *)(v68 + 16) = v64;
    *(_OWORD *)(v68 + 24) = v154;
    *(_QWORD *)(v68 + 40) = v65;
    *(_QWORD *)(v68 + 48) = v66;
    sub_100007F38((uint64_t)v24, &qword_10015E330);
    v69 = v155;
    ((void (*)(char *, _QWORD, uint64_t))v163)(v18, v162, v155);
    v70 = v161;
    v71 = Image.resizable(capInsets:resizingMode:)(v18, v161, 0.0, 0.0, 0.0, 0.0);
    v72 = v160(v18, v69);
    *(_OWORD *)v199 = (unint64_t)v71;
    *(_WORD *)&v199[16] = 257;
    v73 = static Axis.Set.horizontal.getter(v72);
    v74 = static Alignment.center.getter(v73);
    View.containerRelativeFrame(_:alignment:)(v73, v74, v75, v159, v158);
    swift_release(v71);
    v79 = sub_1000BD098(v157, v76, v77, v78);
    v80 = *(_QWORD *)(v79 + 64);
    swift_release(v79);
    v82 = static Alignment.center.getter(v81);
    _FrameLayout.init(width:height:alignment:)(v199, 0, 1, v80, 0, v82, v83);
    v156(v22, v20, v57);
    v84 = &v22[*(int *)(v185 + 36)];
    v85 = *(_OWORD *)&v199[16];
    *(_OWORD *)v84 = *(_OWORD *)v199;
    *((_OWORD *)v84 + 1) = v85;
    *((_OWORD *)v84 + 2) = v200;
    ((void (*)(char *, uint64_t))v164)(v20, v57);
    sub_100007E78((uint64_t)v22, (uint64_t)v24, &qword_10015E340);
    *(_WORD *)&v24[*(int *)(v186 + 36)] = 0;
    sub_100007F38((uint64_t)v22, &qword_10015E340);
    v86 = v177;
    sub_100007E78((uint64_t)v24, v177, &qword_10015E330);
    v87 = v86 + *(int *)(v176 + 36);
    *(_QWORD *)v87 = 0x4049000000000000;
    *(_BYTE *)(v87 + 8) = 1;
    sub_100007F38((uint64_t)v24, &qword_10015E330);
    v88 = v178;
    sub_100007E78(v86, v178, &qword_10015E398);
    *(_WORD *)(v88 + *(int *)(v175 + 36)) = 0;
    v89 = sub_100007F38(v86, &qword_10015E398);
    v90 = static Alignment.center.getter(v89);
    v92 = v91;
    v93 = (uint64_t)v170;
    v94 = (uint64_t)&v170[*(int *)(v166 + 36)];
    sub_100007E78(v88, v94, &qword_10015E3A0);
    v95 = (uint64_t *)(v94 + *(int *)(sub_100007D50(&qword_10015E360) + 36));
    *v95 = v90;
    v95[1] = v92;
    sub_100007E78(v67, v93, &qword_10015E320);
    sub_100007F38(v88, &qword_10015E3A0);
    v96 = sub_100007F38(v67, &qword_10015E320);
    v97 = static Alignment.center.getter(v96);
    v99 = v98;
    v100 = (uint64_t)v174;
    v101 = (uint64_t)&v174[*(int *)(v168 + 36)];
    sub_1000BF4FC(v70, v193, v191, v192, v101);
    v102 = (uint64_t *)(v101 + *(int *)(sub_100007D50(&qword_10015E370) + 36));
    *v102 = v97;
    v102[1] = v99;
    v103 = sub_100018EB4(v93, v100, &qword_10015E310);
    v104 = static Alignment.center.getter(v103);
    v106 = v105;
    sub_1000C09E8((uint64_t)&v194);
    v107 = v194;
    v193 = v195;
    v108 = v196;
    v109 = v197;
    v110 = v173;
    sub_100007E78(v100, v173, &qword_10015E300);
    v111 = v110 + *(int *)(v171 + 36);
    *(_QWORD *)v111 = v107;
    *(_OWORD *)(v111 + 8) = v193;
    *(_QWORD *)(v111 + 24) = v108;
    *(_QWORD *)(v111 + 32) = v109;
    *(_QWORD *)(v111 + 40) = v104;
    *(_QWORD *)(v111 + 48) = v106;
    sub_100007F38(v100, &qword_10015E300);
    v112 = v172;
    sub_100007E78(v110, v172, &qword_10015E2F0);
    v113 = v180;
    *(_BYTE *)(v112 + *(int *)(v180 + 36)) = 1;
    sub_100007F38(v110, &qword_10015E2F0);
    v114 = &qword_10015E2E0;
    v115 = v179;
    sub_100018EB4(v112, v179, &qword_10015E2E0);
    v116 = v182;
    sub_100007E78(v115, v182, &qword_10015E2E0);
    swift_storeEnumTagMultiPayload(v116, v181, 0);
    v117 = sub_1000C1D98();
    v118 = sub_1000C213C();
    v119 = (uint64_t)v183;
    _ConditionalContent<>.init(storage:)(v116, v113, v184, v117, v118);
    v120 = v187;
    sub_100007E78(v119, v187, &qword_10015E2D0);
    swift_storeEnumTagMultiPayload(v120, v189, 0);
    v121 = sub_1000C1D2C();
    _ConditionalContent<>.init(storage:)(v120, v190, &type metadata for EmptyView, v121, &protocol witness table for EmptyView);
    swift_release(v70);
    sub_100007F38(v119, &qword_10015E2D0);
    v122 = v115;
    return sub_100007F38(v122, v114);
  }
  v123 = v187;
  if (v37 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v33 + 96))(v36, v32);
    swift_errorRelease(*v36);
LABEL_6:
    if (qword_1001580A8 != -1)
      swift_once(&qword_1001580A8, sub_100051438);
    v125 = qword_10016A4C0;
    *(_QWORD *)v199 = qword_10016A4C0;
    *(_WORD *)&v199[8] = 256;
    swift_retain(qword_10016A4C0);
    v127 = static Axis.Set.horizontal.getter(v126);
    v128 = static Alignment.center.getter(v127);
    v130 = v129;
    v131 = sub_100007D50(&qword_100158D48);
    v132 = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v133 = (char *)v160;
    View.containerRelativeFrame(_:alignment:)(v127, v128, v130, v131, v132);
    swift_release(v125);
    v135 = static Alignment.center.getter(v134);
    v137 = v136;
    sub_1000C09E8((uint64_t)v199);
    v138 = *(_QWORD *)v199;
    v193 = *(_OWORD *)&v199[8];
    v139 = *(_QWORD *)&v199[24];
    v140 = v200;
    v141 = v161;
    v142 = (uint64_t)v159;
    v143 = v162;
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v159, v133, v162);
    v144 = v184;
    v145 = v142 + *(int *)(v184 + 36);
    *(_QWORD *)v145 = v138;
    *(_OWORD *)(v145 + 8) = v193;
    *(_QWORD *)(v145 + 24) = v139;
    *(_QWORD *)(v145 + 32) = v140;
    *(_QWORD *)(v145 + 40) = v135;
    *(_QWORD *)(v145 + 48) = v137;
    (*(void (**)(char *, uint64_t))(v141 + 8))(v133, v143);
    v114 = &qword_10015E380;
    v146 = v163;
    sub_100018EB4(v142, (uint64_t)v163, &qword_10015E380);
    v147 = v182;
    sub_100007E78((uint64_t)v146, v182, &qword_10015E380);
    swift_storeEnumTagMultiPayload(v147, v181, 1);
    v148 = sub_1000C1D98();
    v149 = sub_1000C213C();
    v150 = (uint64_t)v183;
    _ConditionalContent<>.init(storage:)(v147, v180, v144, v148, v149);
    sub_100007E78(v150, v123, &qword_10015E2D0);
    swift_storeEnumTagMultiPayload(v123, v189, 0);
    v151 = sub_1000C1D2C();
    _ConditionalContent<>.init(storage:)(v123, v190, &type metadata for EmptyView, v151, &protocol witness table for EmptyView);
    sub_100007F38(v150, &qword_10015E2D0);
    v122 = (uint64_t)v146;
    return sub_100007F38(v122, v114);
  }
  v124 = v190;
  if (v37 == enum case for AsyncImagePhase.empty(_:))
    goto LABEL_6;
  swift_storeEnumTagMultiPayload(v187, v189, 1);
  v153 = sub_1000C1D2C();
  _ConditionalContent<>.init(storage:)(v123, v124, &type metadata for EmptyView, v153, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 8))(v36, v32);
}

uint64_t sub_1000BF4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v64 = a3;
  v65 = a4;
  v67 = a2;
  v69 = a5;
  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v68 = sub_100007D50(&qword_10015E288);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100007D50(&qword_10015E340);
  __chkstk_darwin(v62);
  v58 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100007D50(&qword_10015E330);
  __chkstk_darwin(v63);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100007D50(&qword_10015E3A8);
  __chkstk_darwin(v61);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100007D50(&qword_10015E3B0);
  __chkstk_darwin(v60);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100007D50(&qword_10015E3B8);
  v19 = __chkstk_darwin(v59);
  v57 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6, v19);
  v21 = Image.resizable(capInsets:resizingMode:)(v9, a1, 0.0, 0.0, 0.0, 0.0);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v74 = (unint64_t)v21;
  LOWORD(v75) = 257;
  v23 = static Axis.Set.horizontal.getter(v22);
  v24 = static Alignment.center.getter(v23);
  v26 = v25;
  v27 = sub_100007D50(&qword_1001590D0);
  v28 = sub_100020844();
  View.containerRelativeFrame(_:alignment:)(v23, v24, v26, v27, v28);
  swift_release(v21);
  v30 = type metadata accessor for TourPhotosView(0, v64, v65, v29);
  v34 = sub_1000BD098(v30, v31, v32, v33);
  v35 = *(_QWORD *)(v34 + 64);
  swift_release(v34);
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(&v74, 0, 1, v35, 0, v37, v38);
  v39 = v66;
  v40 = (uint64_t)v58;
  v41 = v68;
  (*(void (**)(char *, char *, _QWORD))(v66 + 16))(v58, v11, v68);
  v42 = (_OWORD *)(v40 + *(int *)(v62 + 36));
  v43 = v75;
  *v42 = v74;
  v42[1] = v43;
  v42[2] = v76;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v41);
  sub_100007E78(v40, (uint64_t)v14, &qword_10015E340);
  *(_WORD *)&v14[*(int *)(v63 + 36)] = 0;
  sub_100007F38(v40, &qword_10015E340);
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_10015E330);
  *(_QWORD *)&v16[*(int *)(v61 + 36)] = 0x3FF0000000000000;
  sub_100007F38((uint64_t)v14, &qword_10015E330);
  sub_100007E78((uint64_t)v16, (uint64_t)v18, &qword_10015E3A8);
  v44 = &v18[*(int *)(v60 + 36)];
  *(_QWORD *)v44 = 0x4038000000000000;
  v44[8] = 1;
  sub_100007F38((uint64_t)v16, &qword_10015E3A8);
  v45 = v57;
  sub_100007E78((uint64_t)v18, v57, &qword_10015E3B0);
  *(_WORD *)(v45 + *(int *)(v59 + 36)) = 0;
  v46 = sub_100007F38((uint64_t)v18, &qword_10015E3B0);
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  sub_1000C092C((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v70, 0.65, 1.0);
  v51 = v69;
  v50 = v70;
  v68 = v71;
  v52 = v72;
  v53 = v73;
  sub_100007E78(v45, v69, &qword_10015E3B8);
  v54 = v51 + *(int *)(sub_100007D50(&qword_10015E3C0) + 36);
  *(_QWORD *)v54 = v47;
  *(_QWORD *)(v54 + 8) = v49;
  *(_QWORD *)(v54 + 16) = v50;
  *(_OWORD *)(v54 + 24) = v68;
  *(_QWORD *)(v54 + 40) = v52;
  *(_QWORD *)(v54 + 48) = v53;
  return sub_100007F38(v45, &qword_10015E3B8);
}

uint64_t sub_1000BF9E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a3;
  v5 = type metadata accessor for Optional(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - v7;
  v9 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015E198);
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TourPhotosView(0, a1, a2, v15);
  v20 = sub_1000BD098(v16, v17, v18, v19);
  v21 = *(_QWORD *)(v20 + 32);
  swift_bridgeObjectRetain(v21);
  swift_release(v20);
  v37 = v21;
  v22 = type metadata accessor for Array(0, a1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  Collection.first.getter(v22, WitnessTable);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v25 = type metadata accessor for URL(0);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v11, 1, 1, v25);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, a1);
    v27 = type metadata accessor for URL(0);
    v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 0, 1, v27);
  }
  v28 = static Animation.easeInOut.getter(v26);
  v29 = Transaction.init(animation:)(v28);
  v30 = swift_allocObject(&unk_10014E908, 32, 7);
  *(_QWORD *)(v30 + 16) = a1;
  *(_QWORD *)(v30 + 24) = a2;
  v31 = sub_100007D50(&qword_10015E1F0);
  v32 = sub_1000C180C(&qword_10015E1F8, &qword_10015E1F0, (void (*)(void))sub_1000C1878);
  AsyncImage.init(url:scale:transaction:content:)(v11, v29, sub_1000C1804, v30, v31, v32, 1.0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v36, v14, v35);
}

uint64_t sub_1000BFC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;

  v100 = a2;
  *(_QWORD *)&v101 = a3;
  v106 = a1;
  v108 = a4;
  v107 = sub_100007D50(&qword_10015E270);
  v92 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v91 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100007D50(&qword_10015E278);
  __chkstk_darwin(v109);
  v111 = (uint64_t)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100007D50(&qword_10015E280);
  __chkstk_darwin(v103);
  v104 = (uint64_t)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100007D50(&qword_10015E208);
  __chkstk_darwin(v110);
  v105 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Image.ResizingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100007D50(&qword_10015E288);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100007D50(&qword_10015E248);
  __chkstk_darwin(v94);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100007D50(&qword_10015E238);
  __chkstk_darwin(v95);
  v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100007D50(&qword_10015E228);
  __chkstk_darwin(v93);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100007D50(&qword_10015E218);
  __chkstk_darwin(v102);
  v98 = (uint64_t)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v99 = (uint64_t)&v91 - v22;
  v23 = type metadata accessor for AsyncImagePhase(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (uint64_t *)((char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v24 + 16))(v27, v106, v23, v25);
  v28 = (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 88))(v27, v23);
  if (v28 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v27, v23);
    v29 = *v27;
    v106 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
    v30 = Image.resizable(capInsets:resizingMode:)(v11, v29, 0.0, 0.0, 0.0, 0.0);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v112 = v30;
    *(_QWORD *)&v113 = 0;
    WORD4(v113) = 257;
    v32 = static Axis.Set.horizontal.getter(v31);
    v33 = static Alignment.center.getter(v32);
    v35 = v34;
    v36 = sub_100007D50(&qword_1001590D0);
    v37 = sub_100020844();
    View.containerRelativeFrame(_:alignment:)(v32, v33, v35, v36, v37);
    v38 = swift_release(v30);
    v39 = v96;
    v40 = v97;
    (*(void (**)(char *, char *, uint64_t, __n128))(v96 + 16))(v15, v13, v97, v38);
    v41 = &v15[*(int *)(v94 + 36)];
    *(_QWORD *)v41 = 0x4059000000000000;
    v41[8] = 1;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v40);
    sub_100007E78((uint64_t)v15, (uint64_t)v17, &qword_10015E248);
    *(_WORD *)&v17[*(int *)(v95 + 36)] = 0;
    v42 = sub_100007F38((uint64_t)v15, &qword_10015E248);
    v43 = static Alignment.center.getter(v42);
    v45 = v44;
    v46 = (uint64_t)&v19[*(int *)(v93 + 36)];
    v47 = v106;
    sub_1000C055C(v106, v100, v101, v46);
    v48 = (uint64_t *)(v46 + *(int *)(sub_100007D50(&qword_10015E258) + 36));
    *v48 = v43;
    v48[1] = v45;
    v49 = sub_100018EB4((uint64_t)v17, (uint64_t)v19, &qword_10015E238);
    v50 = static Alignment.center.getter(v49);
    v52 = v51;
    sub_1000C09E8((uint64_t)&v112);
    v53 = v112;
    v101 = v113;
    v54 = v114;
    v55 = v115;
    v56 = v98;
    sub_100007E78((uint64_t)v19, v98, &qword_10015E228);
    v57 = v102;
    v58 = v56 + *(int *)(v102 + 36);
    *(_QWORD *)v58 = v53;
    *(_OWORD *)(v58 + 8) = v101;
    *(_QWORD *)(v58 + 24) = v54;
    *(_QWORD *)(v58 + 32) = v55;
    *(_QWORD *)(v58 + 40) = v50;
    *(_QWORD *)(v58 + 48) = v52;
    sub_100007F38((uint64_t)v19, &qword_10015E228);
    v59 = v56;
    v60 = v99;
    sub_100018EB4(v59, v99, &qword_10015E218);
    v61 = v104;
    sub_100007E78(v60, v104, &qword_10015E218);
    swift_storeEnumTagMultiPayload(v61, v103, 0);
    v62 = sub_1000C192C();
    v63 = sub_100007D00(&qword_100158D48);
    v64 = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v112 = v63;
    *(_QWORD *)&v113 = v64;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v112, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    v66 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)(v61, v57, v107, v62, OpaqueTypeConformance2);
    v67 = v111;
    sub_100007E78(v66, v111, &qword_10015E208);
    swift_storeEnumTagMultiPayload(v67, v109, 0);
    v68 = sub_1000C1878();
    _ConditionalContent<>.init(storage:)(v67, v110, &type metadata for EmptyView, v68, &protocol witness table for EmptyView);
    swift_release(v47);
    sub_100007F38(v66, &qword_10015E208);
    return sub_100007F38(v60, &qword_10015E218);
  }
  v70 = v107;
  if (v28 == enum case for AsyncImagePhase.failure(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v27, v23);
    swift_errorRelease(*v27);
  }
  else
  {
    v72 = v110;
    v71 = v111;
    if (v28 != enum case for AsyncImagePhase.empty(_:))
    {
      swift_storeEnumTagMultiPayload(v111, v109, 1);
      v90 = sub_1000C1878();
      _ConditionalContent<>.init(storage:)(v71, v72, &type metadata for EmptyView, v90, &protocol witness table for EmptyView);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v27, v23);
    }
  }
  if (qword_1001580A8 != -1)
    swift_once(&qword_1001580A8, sub_100051438);
  v73 = qword_10016A4C0;
  v112 = qword_10016A4C0;
  LOWORD(v113) = 256;
  swift_retain(qword_10016A4C0);
  v75 = static Axis.Set.horizontal.getter(v74);
  v76 = static Alignment.center.getter(v75);
  v78 = v77;
  v79 = sub_100007D50(&qword_100158D48);
  v80 = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
  v81 = v91;
  View.containerRelativeFrame(_:alignment:)(v75, v76, v78, v79, v80);
  v82 = swift_release(v73);
  v83 = v92;
  v84 = v104;
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v92 + 16))(v104, v81, v70, v82);
  swift_storeEnumTagMultiPayload(v84, v103, 1);
  v85 = sub_1000C192C();
  v112 = v79;
  *(_QWORD *)&v113 = v80;
  v86 = swift_getOpaqueTypeConformance2(&v112, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
  v87 = (uint64_t)v105;
  _ConditionalContent<>.init(storage:)(v84, v102, v70, v85, v86);
  v88 = v111;
  sub_100007E78(v87, v111, &qword_10015E208);
  swift_storeEnumTagMultiPayload(v88, v109, 0);
  v89 = sub_1000C1878();
  _ConditionalContent<>.init(storage:)(v88, v110, &type metadata for EmptyView, v89, &protocol witness table for EmptyView);
  sub_100007F38(v87, &qword_10015E208);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v81, v70);
}

uint64_t sub_1000C055C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a2;
  *(_QWORD *)&v51 = a3;
  v52 = a4;
  v5 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015E288);
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100007D50(&qword_10015E290);
  __chkstk_darwin(v47);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100007D50(&qword_10015E298);
  __chkstk_darwin(v46);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100007D50(&qword_10015E2A0);
  __chkstk_darwin(v45);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100007D50(&qword_10015E2A8);
  v18 = __chkstk_darwin(v44);
  v43 = (uint64_t)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5, v18);
  v20 = Image.resizable(capInsets:resizingMode:)(v8, a1, 0.0, 0.0, 0.0, 0.0);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v53 = v20;
  *(_QWORD *)&v54 = 0;
  WORD4(v54) = 257;
  v22 = static Axis.Set.horizontal.getter(v21);
  v23 = static Alignment.center.getter(v22);
  v25 = v24;
  v26 = sub_100007D50(&qword_1001590D0);
  v27 = sub_100020844();
  View.containerRelativeFrame(_:alignment:)(v22, v23, v25, v26, v27);
  v28 = swift_release(v20);
  v30 = v48;
  v29 = v49;
  (*(void (**)(char *, char *, uint64_t, __n128))(v48 + 16))(v13, v11, v49, v28);
  *(_WORD *)&v13[*(int *)(v47 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v29);
  sub_100007E78((uint64_t)v13, (uint64_t)v15, &qword_10015E290);
  *(_QWORD *)&v15[*(int *)(v46 + 36)] = 0x3FF0000000000000;
  sub_100007F38((uint64_t)v13, &qword_10015E290);
  sub_100007E78((uint64_t)v15, (uint64_t)v17, &qword_10015E298);
  v31 = &v17[*(int *)(v45 + 36)];
  *(_QWORD *)v31 = 0x4038000000000000;
  v31[8] = 1;
  sub_100007F38((uint64_t)v15, &qword_10015E298);
  v32 = v43;
  sub_100007E78((uint64_t)v17, v43, &qword_10015E2A0);
  *(_WORD *)(v32 + *(int *)(v44 + 36)) = 0;
  v33 = sub_100007F38((uint64_t)v17, &qword_10015E2A0);
  v34 = static Alignment.center.getter(v33);
  v36 = v35;
  sub_1000C092C((uint64_t (*)(void))&static Color.clear.getter, (uint64_t (*)(void))&static Color.black.getter, (uint64_t)&v53, 0.65, 1.0);
  v38 = v52;
  v37 = v53;
  v51 = v54;
  v39 = v55;
  v40 = v56;
  sub_100007E78(v32, v52, &qword_10015E2A8);
  v41 = v38 + *(int *)(sub_100007D50(&qword_10015E2B0) + 36);
  *(_QWORD *)v41 = v34;
  *(_QWORD *)(v41 + 8) = v36;
  *(_QWORD *)(v41 + 16) = v37;
  *(_OWORD *)(v41 + 24) = v51;
  *(_QWORD *)(v41 + 40) = v39;
  *(_QWORD *)(v41 + 48) = v40;
  return sub_100007F38(v32, &qword_10015E2A8);
}

double sub_1000C092C@<D0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  uint64_t v16;

  v10 = sub_100007D50(&qword_100159140);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100108810;
  *(_QWORD *)(v11 + 32) = a1();
  *(_QWORD *)(v11 + 40) = a2();
  *(_QWORD *)&v15[0] = v11;
  specialized Array._endMutation()(v12);
  Gradient.init(colors:)(v11);
  LinearGradient.init(gradient:startPoint:endPoint:)(v15, 0.0, a4, 0.0, a5);
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *(_OWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 32) = v16;
  return result;
}

double sub_1000C09E8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  v2 = sub_100007D50(&qword_100159140);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100108810;
  v4 = static Color.clear.getter(v3);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = static Color.black.getter(v4);
  v6 = Color.opacity(_:)(0.5);
  v7 = swift_release(v5);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)&v10[0] = v3;
  specialized Array._endMutation()(v7);
  Gradient.init(colors:)(v3);
  LinearGradient.init(gradient:startPoint:endPoint:)(v10, 0.0, 0.66, 0.0, 1.0);
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v11;
  return result;
}

void *sub_1000C0AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  _OWORD __src[19];

  static HorizontalAlignment.center.getter(a1);
  sub_1000C0C4C(a2, a3, v6, (uint64_t)__src);
  static Edge.Set.bottom.getter(v7);
  EdgeInsets.init(_all:)(28.0);
  v8 = static Alignment.bottom.getter();
  sub_100043F74(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)__src, 0.0, 1, INFINITY, 0, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = memcpy(a4, __src, 0x128uLL);
  a4[296] = 0;
  return result;
}

void sub_1000C0C4C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = type metadata accessor for TourPhotosView(0, a1, a2, a3);
  v9 = sub_1000BD098(v5, v6, v7, v8);
  v10 = *(_QWORD *)(v9 + 48);
  v39 = *(_QWORD *)(v9 + 40);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v11 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100114370);
  v37 = v12;
  v38 = v11;
  v35 = v13;
  v36 = v14;
  v15 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001001143A0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = sub_1000BD098(v5, v16, v18, v20);
  v23 = sub_100052114();
  swift_release(v22);
  v27 = 0.0;
  v28 = 0.0;
  v29 = 0.0;
  if (v23)
  {
    v30 = sub_1000BD098(v5, v24, v25, v26);
    v27 = sub_1000520B8();
    swift_release(v30);
    v34 = sub_1000BD098(v5, v31, v32, v33);
    v28 = sub_1000520D0();
    swift_release(v34);
    v29 = sub_1000BD198();
  }
  *(_QWORD *)a4 = v38;
  *(_QWORD *)(a4 + 8) = v37;
  *(_BYTE *)(a4 + 16) = v35 & 1;
  *(_QWORD *)(a4 + 24) = v36;
  *(_QWORD *)(a4 + 32) = v15;
  *(_QWORD *)(a4 + 40) = v17;
  *(_BYTE *)(a4 + 48) = v19 & 1;
  *(_QWORD *)(a4 + 56) = v21;
  *(_QWORD *)(a4 + 64) = v39;
  *(_QWORD *)(a4 + 72) = v10;
  *(double *)(a4 + 80) = v27;
  *(double *)(a4 + 88) = v28;
  *(double *)(a4 + 96) = v29;
  *(_BYTE *)(a4 + 104) = !v23;
}

void sub_1000C0DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[6];

  v20[2] = a2;
  v20[3] = a3;
  v20[4] = a1;
  v6 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v6, sub_1000C11C0, v20, (char *)&type metadata for () + 8);
  swift_release(v6);
  v8 = type metadata accessor for TourPhotosView(0, a2, a3, v7);
  v12 = sub_1000BD098(v8, v9, v10, v11);
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain(v13);
  swift_release(v12);
  v15 = (uint64_t *)(a1 + *(int *)(v8 + 44));
  v16 = *v15;
  if (*v15)
  {
    swift_retain(*v15);
    sub_10008A874(v14, v13, 8, 1, 23, 0, 3u, v16);
    swift_bridgeObjectRelease();
    swift_release(v16);
  }
  else
  {
    v17 = v15[1];
    v18 = type metadata accessor for RemoteViewConfiguration();
    v19 = sub_10001F9C0();
    EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
}

uint64_t sub_1000C0F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;

  v4 = type metadata accessor for TourPhotosView(0, a2, a3, a4);
  result = sub_1000BD0D4();
  if ((v6 & 1) == 0)
  {
    v9 = (double)result;
    v10 = sub_1000BD098(v4, v6, v7, v8);
    v11 = sub_1000520D0();
    swift_release(v10);
    return sub_1000BD1EC(v4, v11 * v9);
  }
  return result;
}

unint64_t sub_1000C0F90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E190;
  if (!qword_10015E190)
  {
    v1 = sub_100007D00(&qword_10015E178);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015E190);
  }
  return result;
}

uint64_t sub_1000C0FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000BDDC0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000C0FF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BF9E4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void *sub_1000C1004@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C0AA8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_1000C1010()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E1B0;
  if (!qword_10015E1B0)
  {
    v1 = sub_100007D00(&qword_10015E1A8);
    sub_1000C107C();
    sub_10000E2C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E1B0);
  }
  return result;
}

unint64_t sub_1000C107C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E1B8;
  if (!qword_10015E1B8)
  {
    v1 = sub_100007D00(&qword_10015E1C0);
    sub_1000C10E8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E1B8);
  }
  return result;
}

unint64_t sub_1000C10E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E1C8;
  if (!qword_10015E1C8)
  {
    v1 = sub_100007D00(&qword_10015E1D0);
    sub_10000F4E0(&qword_10015E1D8, &qword_10015E1E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E1C8);
  }
  return result;
}

void sub_1000C1170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TourPhotosView(0, v5, v6, a4) - 8) + 80);
  sub_1000C0DEC(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1000C11C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1000C0F0C(v4[4], v4[2], v4[3], a4);
}

uint64_t sub_1000C11DC@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[3];
  _OWORD v63[3];

  v61 = a1;
  v60 = sub_100007D50(&qword_10015E3E8);
  __chkstk_darwin(v60);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v59 = (uint64_t)&v53 - v10;
  v11 = type metadata accessor for RoundedRectangle(0);
  v58 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100159F08);
  v54 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100007D50(&qword_10015E3F0);
  __chkstk_darwin(v57);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v56 = (uint64_t)&v53 - v20;
  v21 = &v13[*(int *)(v11 + 20)];
  v22 = enum case for RoundedCornerStyle.continuous(_:);
  v23 = type metadata accessor for RoundedCornerStyle(0);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104);
  v25 = v24(v21, v22, v23);
  __asm { FMOV            V0.2D, #1.0 }
  v55 = _Q0;
  *(_OWORD *)v13 = _Q0;
  v31 = static Color.white.getter(v25);
  v32 = Color.opacity(_:)(0.18);
  swift_release(v31);
  sub_10000F760((uint64_t)v13, (uint64_t)v16);
  *(_QWORD *)&v16[*(int *)(v14 + 36)] = v32;
  v33 = sub_10000F854((uint64_t)v13);
  v34 = static Alignment.center.getter(v33);
  _FrameLayout.init(width:height:alignment:)(v62, *(_QWORD *)&a2, 0, 0x4000000000000000, 0, v34, v35);
  sub_100007E78((uint64_t)v16, (uint64_t)v18, &qword_100159F08);
  v36 = v57;
  v37 = &v18[*(int *)(v57 + 36)];
  v38 = v62[1];
  *(_OWORD *)v37 = v62[0];
  *((_OWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 2) = v62[2];
  sub_100007F38((uint64_t)v16, &qword_100159F08);
  v39 = v56;
  sub_100018EB4((uint64_t)v18, v56, &qword_10015E3F0);
  v40 = v24(&v13[*(int *)(v58 + 20)], v22, v23);
  *(_OWORD *)v13 = v55;
  v41 = static Color.white.getter(v40);
  v42 = Color.opacity(_:)(0.25);
  swift_release(v41);
  sub_10000F760((uint64_t)v13, (uint64_t)v16);
  *(_QWORD *)&v16[*(int *)(v54 + 36)] = v42;
  v43 = sub_10000F854((uint64_t)v13);
  v44 = static Alignment.center.getter(v43);
  _FrameLayout.init(width:height:alignment:)(v63, *(_QWORD *)&a3, 0, 0x4000000000000000, 0, v44, v45);
  sub_100007E78((uint64_t)v16, (uint64_t)v18, &qword_100159F08);
  v46 = &v18[*(int *)(v36 + 36)];
  v47 = v63[1];
  *(_OWORD *)v46 = v63[0];
  *((_OWORD *)v46 + 1) = v47;
  *((_OWORD *)v46 + 2) = v63[2];
  sub_100007F38((uint64_t)v16, &qword_100159F08);
  sub_100007E78((uint64_t)v18, (uint64_t)v8, &qword_10015E3F0);
  v48 = &v8[*(int *)(v60 + 36)];
  *(double *)v48 = a4;
  *((_QWORD *)v48 + 1) = 0;
  sub_100007F38((uint64_t)v18, &qword_10015E3F0);
  v49 = v59;
  sub_100018EB4((uint64_t)v8, v59, &qword_10015E3E8);
  sub_100007E78(v39, (uint64_t)v18, &qword_10015E3F0);
  sub_100007E78(v49, (uint64_t)v8, &qword_10015E3E8);
  v50 = v61;
  sub_100007E78((uint64_t)v18, v61, &qword_10015E3F0);
  v51 = sub_100007D50(&qword_10015E3F8);
  sub_100007E78((uint64_t)v8, v50 + *(int *)(v51 + 48), &qword_10015E3E8);
  sub_100007F38(v49, &qword_10015E3E8);
  sub_100007F38(v39, &qword_10015E3F0);
  sub_100007F38((uint64_t)v8, &qword_10015E3E8);
  return sub_100007F38((uint64_t)v18, &qword_10015E3F0);
}

uint64_t sub_1000C1628@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  double *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = type metadata accessor for BlendMode(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015E3C8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100007D50(&qword_10015E3D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  v15 = v2[1];
  v16 = v2[2];
  *v10 = static Alignment.leading.getter(v17);
  v10[1] = v18;
  v19 = sub_100007D50(&qword_10015E3D8);
  sub_1000C11DC((uint64_t)v10 + *(int *)(v19 + 44), v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for BlendMode.plusLighter(_:), v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v13[*(int *)(v11 + 36)], v7, v4);
  sub_100007E78((uint64_t)v10, (uint64_t)v13, &qword_10015E3C8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100007F38((uint64_t)v10, &qword_10015E3C8);
  sub_100007E78((uint64_t)v13, a1, &qword_10015E3D0);
  *(_BYTE *)(a1 + *(int *)(sub_100007D50(&qword_10015E3E0) + 36)) = 1;
  return sub_100007F38((uint64_t)v13, &qword_10015E3D0);
}

uint64_t sub_1000C17F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C1804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000BFC74(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1000C180C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C1878()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015E200;
  if (!qword_10015E200)
  {
    v1 = sub_100007D00(&qword_10015E208);
    sub_1000C192C();
    v2[0] = sub_100007D00(&qword_100158D48);
    v2[1] = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E200);
  }
  return result;
}

unint64_t sub_1000C192C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E210;
  if (!qword_10015E210)
  {
    v1 = sub_100007D00(&qword_10015E218);
    sub_1000C19B0();
    sub_10000F4E0(&qword_10015E260, &qword_10015E268, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E210);
  }
  return result;
}

unint64_t sub_1000C19B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E220;
  if (!qword_10015E220)
  {
    v1 = sub_100007D00(&qword_10015E228);
    sub_1000C1A34();
    sub_10000F4E0(&qword_10015E250, &qword_10015E258, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E220);
  }
  return result;
}

unint64_t sub_1000C1A34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E230;
  if (!qword_10015E230)
  {
    v1 = sub_100007D00(&qword_10015E238);
    sub_1000C20B0(&qword_10015E240, &qword_10015E248);
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E230);
  }
  return result;
}

uint64_t sub_1000C1AD0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000BE03C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000C1AE0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TourPhotosView(0, v4, v5, a1) - 8) + 80);
  return sub_1000BE3A0(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_1000C1B50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C1B74(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  v4 = *(_QWORD *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, *(_QWORD *)(v1 + 16), "offset element ", 0);
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_1000C1BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for TourPhotosView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  v13 = v4 + v10;
  v15 = type metadata accessor for TourPhotosViewModel(255, v5, v6, v14);
  v16 = type metadata accessor for Bindable(0, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
  v17 = (_QWORD *)(v13 + v7[9]);
  swift_release(*v17);
  swift_release(v17[1]);
  v18 = (_QWORD *)(v13 + v7[10]);
  swift_release(*v18);
  swift_release(v18[1]);
  swift_release(*(_QWORD *)(v13 + v7[11]));
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_1000C1CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TourPhotosView(0, v6, v7, a2) - 8) + 80);
  return sub_1000BE554(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_1000C1D2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2C8;
  if (!qword_10015E2C8)
  {
    v1 = sub_100007D00(&qword_10015E2D0);
    sub_1000C1D98();
    sub_1000C213C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2C8);
  }
  return result;
}

unint64_t sub_1000C1D98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2D8;
  if (!qword_10015E2D8)
  {
    v1 = sub_100007D00(&qword_10015E2E0);
    sub_1000C1E04();
    sub_10001BEB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2D8);
  }
  return result;
}

unint64_t sub_1000C1E04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2E8;
  if (!qword_10015E2E8)
  {
    v1 = sub_100007D00(&qword_10015E2F0);
    sub_1000C1E88();
    sub_10000F4E0(&qword_10015E260, &qword_10015E268, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2E8);
  }
  return result;
}

unint64_t sub_1000C1E88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E2F8;
  if (!qword_10015E2F8)
  {
    v1 = sub_100007D00(&qword_10015E300);
    sub_1000C1F0C();
    sub_10000F4E0(&qword_10015E368, &qword_10015E370, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E2F8);
  }
  return result;
}

unint64_t sub_1000C1F0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E308;
  if (!qword_10015E308)
  {
    v1 = sub_100007D00(&qword_10015E310);
    sub_1000C1F90();
    sub_10000F4E0(&qword_10015E358, &qword_10015E360, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E308);
  }
  return result;
}

unint64_t sub_1000C1F90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E318;
  if (!qword_10015E318)
  {
    v1 = sub_100007D00(&qword_10015E320);
    sub_1000C2014();
    sub_10000F4E0(&qword_10015E348, &qword_10015E350, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E318);
  }
  return result;
}

unint64_t sub_1000C2014()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E328;
  if (!qword_10015E328)
  {
    v1 = sub_100007D00(&qword_10015E330);
    sub_1000C20B0(&qword_10015E338, &qword_10015E340);
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E328);
  }
  return result;
}

uint64_t sub_1000C20B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = sub_100007D00(a2);
    v5[0] = sub_100007D00(&qword_1001590D0);
    v5[1] = sub_100020844();
    swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C213C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015E378;
  if (!qword_10015E378)
  {
    v1 = sub_100007D00(&qword_10015E380);
    v2[0] = sub_100007D00(&qword_100158D48);
    v2[1] = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    sub_10000F4E0(&qword_10015E260, &qword_10015E268, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E378);
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosScrollBar()
{
  return &type metadata for TourPhotosScrollBar;
}

uint64_t sub_1000C2218(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *WitnessTable;
  void *v33;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Int, *a1, "offset element ", 0);
  v29 = type metadata accessor for Array(255, TupleTypeMetadata2);
  v30 = &type metadata for Int;
  v31 = sub_100007D00(&qword_10015E158);
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
  v33 = &protocol witness table for Int;
  v2 = type metadata accessor for ForEach(255, &v29);
  sub_10000F4E0(&qword_10015E160, &qword_10015E158, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
  v3 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
  v4 = type metadata accessor for HStack(255, v2, v3);
  v5 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v4);
  v29 = v4;
  v30 = (void *)v5;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v29 = v4;
  v30 = (void *)v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v8 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v10 = type metadata accessor for PagingScrollTargetBehavior(255, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v8);
  v29 = v8;
  v30 = (void *)v10;
  v31 = v11;
  WitnessTable = &protocol witness table for PagingScrollTargetBehavior;
  v12 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v29 = v8;
  v30 = (void *)v10;
  v31 = v11;
  WitnessTable = &protocol witness table for PagingScrollTargetBehavior;
  v13 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v29 = v12;
  v30 = &type metadata for Int;
  v31 = v13;
  WitnessTable = &protocol witness table for Int;
  v14 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v29 = v12;
  v30 = &type metadata for Int;
  v31 = v13;
  WitnessTable = &protocol witness table for Int;
  v15 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v29 = v14;
  v30 = (void *)v15;
  v16 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v17 = sub_100007D00(&qword_10015E168);
  v18 = type metadata accessor for ModifiedContent(255, v16, v17);
  v19 = type metadata accessor for ModifiedContent(255, v18, &type metadata for _FrameLayout);
  v20 = sub_100007D00(&qword_10015AA40);
  v21 = type metadata accessor for ModifiedContent(255, v19, v20);
  v22 = sub_100007D00(&qword_10015E170);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _PaddingLayout);
  v25 = sub_100007D00(&qword_10015E178);
  v29 = v14;
  v30 = (void *)v15;
  swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  sub_10000F4E0(&qword_10015E180, &qword_10015E168, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
  sub_10000F4E0(&qword_10015E188, &qword_10015E170, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v27 = sub_1000C0F90();
  v29 = v24;
  v30 = (void *)v25;
  v31 = v26;
  WitnessTable = (void *)v27;
  return swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_1000C2600(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119034, 1);
}

unint64_t sub_1000C2614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E400;
  if (!qword_10015E400)
  {
    v1 = sub_100007D00(&qword_10015E3E0);
    sub_1000C2680();
    sub_10001BEB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E400);
  }
  return result;
}

unint64_t sub_1000C2680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E408;
  if (!qword_10015E408)
  {
    v1 = sub_100007D00(&qword_10015E3D0);
    sub_10000F4E0(qword_10015E410, &qword_10015E3C8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E408);
  }
  return result;
}

uint64_t sub_1000C2704@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_10010FE80);
  v2 = sub_100007D50(qword_100158AC8);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_1000C2748@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];

  v5 = *a1;
  v15[0] = a1;
  State.init(wrappedValue:)(v15, v5);
  v6 = v15[2];
  *a3 = v15[1];
  a3[1] = v6;
  v8 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  a3[2] = sub_100045C94(0);
  a3[3] = v9;
  v11 = type metadata accessor for SavedWallpaperView(0, v8, v7, v10);
  sub_100018EB4(a2, (uint64_t)a3 + *(int *)(v11 + 40), &qword_100158670);
  v12 = (_QWORD *)((char *)a3 + *(int *)(v11 + 44));
  *v12 = swift_getKeyPath(&unk_10010FE50);
  v13 = sub_100007D50(&qword_1001582E8);
  return swift_storeEnumTagMultiPayload(v12, v13, 0);
}

uint64_t sub_1000C2808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *(*a4)(__int128 *__return_ptr)@<X3>, uint64_t a5@<X4>, _QWORD *(*a6)(__int128 *__return_ptr, uint64_t)@<X5>, uint64_t a7@<X6>, _QWORD *(*a8)(__int128 *__return_ptr)@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned __int8 v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  unsigned __int8 v48;
  _QWORD *(*v49)(__int128 *__return_ptr);
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v86;
  double v87;
  int v88;
  char *v89;
  double v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *(*v143)(__int128 *__return_ptr);
  _QWORD *(*v144)(__int128 *__return_ptr, uint64_t);
  _QWORD *(*v145)(__int128 *__return_ptr);
  int v146;
  __int16 v147;
  _DWORD v148[2];
  _DWORD v149[2];
  _DWORD v150[2];
  _DWORD v151[2];
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  _BYTE v156[7];
  _BYTE v157[7];
  _BYTE v158[7];
  _BYTE v159[11];
  __int16 v160;
  _BYTE v161[7];
  _BYTE v162[7];
  _BYTE v163[7];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  int v179;
  __int16 v180;
  char v181;
  _BYTE v182[7];
  _BYTE v183[7];
  _BYTE v184[7];
  _BYTE v185[7];
  int v186;
  __int16 v187;
  _OWORD v188[34];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  char v198;
  _BYTE v199[7];
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  _BYTE v205[7];
  uint64_t v206;
  char v207;
  _BYTE v208[7];
  char v209;
  char v210;
  int v211;
  __int16 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  _BYTE v218[7];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  _BYTE v224[7];
  char v225;
  _BYTE v226[7];
  double v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  _BYTE v232[7];
  uint64_t v233;
  uint64_t v234;
  char v235;
  char v236;
  int v237;
  __int16 v238;
  _QWORD *(*v239)(_QWORD *__return_ptr, _QWORD);
  char v240;
  char v241;
  int v242;
  __int16 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  _BYTE v249[7];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  _BYTE v255[7];
  char v256;
  _BYTE v257[7];
  double v258;
  _QWORD *(*v259)(_QWORD *__return_ptr);
  uint64_t v260;
  uint64_t v261;
  char v262;
  _BYTE v263[7];
  uint64_t v264;
  uint64_t v265;
  char v266;
  char v267;
  int v268;
  __int16 v269;
  _QWORD *(*v270)(_QWORD *__return_ptr);

  v143 = a8;
  v144 = a6;
  v140 = a7;
  v141 = a5;
  v145 = a4;
  v96 = a3;
  v94 = a1;
  v95 = a2;
  v105 = a9;
  v142 = a10;
  v101 = sub_100007D50(&qword_10015ACC8);
  __chkstk_darwin(v101);
  v100 = (uint64_t)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015ACB8);
  __chkstk_darwin(v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100007D50(&qword_10015ACC0);
  __chkstk_darwin(v92);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100007D50(&qword_10015A748);
  __chkstk_darwin(v98);
  v97 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_10015A750);
  __chkstk_darwin(v17);
  v102 = (uint64_t)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_10015E4C0);
  v103 = *(_QWORD *)(v19 - 8);
  v104 = v19;
  __chkstk_darwin(v19);
  v99 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100007D50(&qword_10015ACD0);
  v22 = type metadata accessor for ToolbarPlacement(0);
  v23 = swift_allocObject(v21, ((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) | 7);
  *(_OWORD *)(v23 + 16) = xmmword_100109020;
  static ToolbarPlacement.navigationBar.getter();
  v24 = sub_100007D50(&qword_10015E4A8);
  v25 = sub_10001E0A8(&qword_10015E4C8, &qword_10015E4A8, (void (*)(void))sub_1000C6B04);
  View.toolbar(_:for:)(2, v23, v24, v25);
  v26 = swift_bridgeObjectRelease();
  v27 = v144(&v164, v26);
  v93 = static Edge.Set.vertical.getter(v27);
  v28 = EdgeInsets.init(_all:)(11.5);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = static Edge.Set.all.getter(v35);
  v91 = v36;
  v106 = static SafeAreaRegions.all.getter(v36);
  v173 = 0;
  v144 = (_QWORD *(*)(__int128 *__return_ptr, uint64_t))static VerticalAlignment.center.getter(v106);
  v119 = v173;
  v37 = v145(&v189);
  v132 = static Edge.Set.vertical.getter(v37);
  v117 = BYTE1(v189);
  v118 = v189;
  v115 = v190;
  v116 = *((_QWORD *)&v189 + 1);
  v112 = v191;
  v113 = *((_QWORD *)&v190 + 1);
  v110 = BYTE8(v191);
  v107 = *((_QWORD *)&v192 + 1);
  v109 = v192;
  v138 = *((_QWORD *)&v193 + 1);
  v133 = v193;
  v38 = v194;
  v39 = EdgeInsets.init(_all:)(11.5);
  v87 = v39;
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v175 = v38;
  v174 = 0;
  v46 = HorizontalEdge.rawValue.getter(0);
  LODWORD(v140) = Edge.init(rawValue:)((2 * v46) | 1u);
  v131 = static SafeAreaRegions.container.getter();
  v114 = v175;
  v123 = v174;
  v176 = 1;
  v145 = (_QWORD *(*)(__int128 *__return_ptr))static VerticalAlignment.center.getter(v131);
  v124 = v176;
  v47 = v143(&v189);
  v139 = static Edge.Set.vertical.getter(v47);
  v122 = v189;
  v121 = BYTE1(v189);
  v128 = v190;
  v129 = *((_QWORD *)&v189 + 1);
  v126 = v191;
  v127 = *((_QWORD *)&v190 + 1);
  v125 = BYTE8(v191);
  v136 = *((_QWORD *)&v192 + 1);
  v137 = v192;
  v134 = *((_QWORD *)&v193 + 1);
  v135 = v193;
  v48 = v194;
  v90 = EdgeInsets.init(_all:)(11.5);
  v142 = v50;
  v143 = v49;
  v141 = v51;
  v178 = v48;
  v177 = 0;
  v52 = HorizontalEdge.rawValue.getter(1);
  v111 = Edge.init(rawValue:)((2 * v52) | 1u);
  v130 = static SafeAreaRegions.container.getter();
  v108 = v178;
  v120 = v177;
  v181 = 1;
  v152 = v186;
  v153 = v187;
  v151[0] = *(_DWORD *)v185;
  *(_DWORD *)((char *)v151 + 3) = *(_DWORD *)&v185[3];
  v150[0] = *(_DWORD *)v184;
  *(_DWORD *)((char *)v150 + 3) = *(_DWORD *)&v184[3];
  *(_DWORD *)((char *)v149 + 3) = *(_DWORD *)&v183[3];
  v149[0] = *(_DWORD *)v183;
  v148[0] = *(_DWORD *)v182;
  *(_DWORD *)((char *)v148 + 3) = *(_DWORD *)&v182[3];
  v88 = 1;
  v146 = v179;
  v147 = v180;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v130);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v53 = sub_100007D50(&qword_10015ACD8);
  v54 = sub_100057794(v94, v95, v96, (double *)&v13[*(int *)(v53 + 44)]);
  v55 = static Edge.Set.all.getter(v54);
  v56 = v55;
  v57 = static SafeAreaRegions.all.getter(v55);
  v89 = v15;
  sub_100007E78((uint64_t)v13, (uint64_t)v15, &qword_10015ACB8);
  v58 = &v15[*(int *)(v92 + 36)];
  *(_QWORD *)v58 = v57;
  v58[8] = v56;
  v59 = sub_100007F38((uint64_t)v13, &qword_10015ACB8);
  v60 = static Alignment.center.getter(v59);
  v62 = v61;
  *(_DWORD *)((char *)&v188[23] + 10) = v186;
  *(_DWORD *)((char *)&v188[26] + 1) = *(_DWORD *)v185;
  *(_DWORD *)((char *)&v188[28] + 9) = *(_DWORD *)v184;
  *(_DWORD *)((char *)&v188[29] + 1) = *(_DWORD *)v183;
  *(_DWORD *)((char *)&v188[31] + 9) = *(_DWORD *)v182;
  *(_DWORD *)((char *)&v188[33] + 2) = v179;
  HIWORD(v188[23]) = v187;
  DWORD1(v188[26]) = *(_DWORD *)&v185[3];
  HIDWORD(v188[28]) = *(_DWORD *)&v184[3];
  DWORD1(v188[29]) = *(_DWORD *)&v183[3];
  HIDWORD(v188[31]) = *(_DWORD *)&v182[3];
  WORD3(v188[33]) = v180;
  v188[6] = v170;
  v188[7] = v171;
  v188[8] = v172;
  v188[2] = v166;
  v188[3] = v167;
  v188[4] = v168;
  v188[5] = v169;
  v188[0] = v164;
  v188[1] = v165;
  v63 = v93;
  LOBYTE(v188[9]) = v93;
  *((double *)&v188[9] + 1) = v28;
  *(_QWORD *)&v188[10] = v30;
  *((_QWORD *)&v188[10] + 1) = v32;
  *(_QWORD *)&v188[11] = v34;
  BYTE8(v188[11]) = v119;
  *(_QWORD *)&v188[12] = v106;
  LOBYTE(v24) = v91;
  BYTE8(v188[12]) = v91;
  LOBYTE(v188[13]) = v118;
  BYTE1(v188[13]) = v117;
  *((_QWORD *)&v188[13] + 1) = v116;
  *(_QWORD *)&v188[14] = v115;
  *((_QWORD *)&v188[14] + 1) = v113;
  *(_QWORD *)&v188[15] = v112;
  BYTE8(v188[15]) = v110;
  *(_QWORD *)&v188[16] = v109;
  *((_QWORD *)&v188[16] + 1) = v107;
  *(_QWORD *)&v188[17] = v133;
  *((_QWORD *)&v188[17] + 1) = v138;
  LOBYTE(v188[18]) = v114;
  BYTE8(v188[18]) = v132;
  *(double *)&v188[19] = v39;
  *((_QWORD *)&v188[19] + 1) = v41;
  v64 = v41;
  *(_QWORD *)&v188[20] = v43;
  *((_QWORD *)&v188[20] + 1) = v45;
  LOBYTE(v188[21]) = v123;
  *((_QWORD *)&v188[21] + 1) = v131;
  *(_QWORD *)&v188[22] = 0;
  BYTE8(v188[22]) = v124;
  BYTE9(v188[22]) = v140;
  *(_QWORD *)&v188[23] = v144;
  BYTE8(v188[23]) = v122;
  BYTE9(v188[23]) = v121;
  *(_QWORD *)&v188[24] = v129;
  *((_QWORD *)&v188[24] + 1) = v128;
  *(_QWORD *)&v188[25] = v127;
  *((_QWORD *)&v188[25] + 1) = v126;
  LOBYTE(v188[26]) = v125;
  *((_QWORD *)&v188[26] + 1) = v137;
  *(_QWORD *)&v188[27] = v136;
  *((_QWORD *)&v188[27] + 1) = v135;
  *(_QWORD *)&v188[28] = v134;
  BYTE8(v188[28]) = v108;
  LOBYTE(v188[29]) = v139;
  v65 = v90;
  *((double *)&v188[29] + 1) = v90;
  *(_QWORD *)&v188[30] = v143;
  *((_QWORD *)&v188[30] + 1) = v142;
  *(_QWORD *)&v188[31] = v141;
  BYTE8(v188[31]) = v120;
  v188[32] = (unint64_t)v130;
  LOBYTE(v188[33]) = 1;
  BYTE1(v188[33]) = v111;
  *((_QWORD *)&v188[33] + 1) = v145;
  v66 = (uint64_t)v89;
  v67 = v100;
  sub_100007E78((uint64_t)v89, v100, &qword_10015ACC0);
  v68 = (uint64_t *)(v67 + *(int *)(v101 + 36));
  *v68 = v60;
  v68[1] = v62;
  v69 = v97;
  sub_100007E78(v67, (uint64_t)&v97[*(int *)(v98 + 36)], &qword_10015ACC8);
  memcpy(v69, v188, 0x220uLL);
  sub_1000C6B88((uint64_t)v188);
  sub_100007F38(v67, &qword_10015ACC8);
  sub_100007F38(v66, &qword_10015ACC0);
  v198 = v63;
  v204 = v119;
  v206 = v106;
  v207 = v24;
  v209 = v118;
  v210 = v117;
  v213 = v116;
  v214 = v115;
  v215 = v113;
  v216 = v112;
  v217 = v110;
  v219 = v109;
  v220 = v107;
  v195 = v170;
  v196 = v171;
  v197 = v172;
  v191 = v166;
  v192 = v167;
  v193 = v168;
  v194 = v169;
  v189 = v164;
  v190 = v165;
  *(_DWORD *)v199 = *(_DWORD *)v163;
  *(_DWORD *)&v199[3] = *(_DWORD *)&v163[3];
  v200 = v28;
  v201 = v30;
  v202 = v32;
  v203 = v34;
  *(_DWORD *)v205 = *(_DWORD *)v162;
  *(_DWORD *)&v205[3] = *(_DWORD *)&v162[3];
  *(_DWORD *)&v208[3] = *(_DWORD *)&v161[3];
  *(_DWORD *)v208 = *(_DWORD *)v161;
  v212 = v160;
  v211 = *(_DWORD *)&v159[7];
  *(_DWORD *)v218 = *(_DWORD *)v159;
  *(_DWORD *)&v218[3] = *(_DWORD *)&v159[3];
  v221 = v133;
  v222 = v138;
  v223 = v114;
  *(_DWORD *)v224 = *(_DWORD *)v158;
  *(_DWORD *)&v224[3] = *(_DWORD *)&v158[3];
  v225 = v132;
  *(_DWORD *)v226 = *(_DWORD *)v157;
  *(_DWORD *)&v226[3] = *(_DWORD *)&v157[3];
  v227 = v87;
  v228 = v64;
  v229 = v43;
  v230 = v45;
  v231 = v123;
  *(_DWORD *)v232 = *(_DWORD *)v156;
  *(_DWORD *)&v232[3] = *(_DWORD *)&v156[3];
  v233 = v131;
  v234 = 0;
  v235 = v124;
  v236 = v140;
  v237 = v154;
  v238 = v155;
  v239 = (_QWORD *(*)(_QWORD *__return_ptr, _QWORD))v144;
  v240 = v122;
  v241 = v121;
  v242 = v152;
  v243 = v153;
  v244 = v129;
  v245 = v128;
  v246 = v127;
  v247 = v126;
  v248 = v125;
  *(_DWORD *)v249 = v151[0];
  *(_DWORD *)&v249[3] = *(_DWORD *)((char *)v151 + 3);
  v250 = v137;
  v251 = v136;
  v252 = v135;
  v253 = v134;
  v254 = v108;
  *(_DWORD *)v255 = v150[0];
  *(_DWORD *)&v255[3] = *(_DWORD *)((char *)v150 + 3);
  v256 = v139;
  *(_DWORD *)v257 = v149[0];
  *(_DWORD *)&v257[3] = *(_DWORD *)((char *)v149 + 3);
  v258 = v65;
  v259 = (_QWORD *(*)(_QWORD *__return_ptr))v143;
  v260 = v142;
  v261 = v141;
  v262 = v120;
  *(_DWORD *)v263 = v148[0];
  *(_DWORD *)&v263[3] = *(_DWORD *)((char *)v148 + 3);
  v264 = v130;
  v265 = 0;
  v266 = v88;
  v267 = v111;
  v268 = v146;
  v269 = v147;
  v270 = (_QWORD *(*)(_QWORD *__return_ptr))v145;
  v70 = sub_1000C6C1C((uint64_t)&v189);
  v71 = static Alignment.top.getter(v70);
  v72 = v102;
  sub_10004414C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v102, 0.0, 1, INFINITY, 0, v71, v73);
  v74 = sub_100007F38((uint64_t)v69, &qword_10015A748);
  v75 = static Alignment.center.getter(v74);
  v77 = v76;
  v78 = sub_100007D50(&qword_10015E4E0);
  v79 = v105;
  v80 = v105 + *(int *)(v78 + 36);
  sub_100007E78(v72, v80, &qword_10015A750);
  v81 = (uint64_t *)(v80 + *(int *)(sub_100007D50(&qword_10015E4E8) + 36));
  *v81 = v75;
  v81[1] = v77;
  v83 = v103;
  v82 = v104;
  v84 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v103 + 16))(v79, v99, v104);
  sub_100007F38(v72, &qword_10015A750);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v84, v82);
}

uint64_t sub_1000C33E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;

  v0 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(60, 1);
  v3._countAndFlagsBits = 0xD00000000000003CLL;
  v3._object = (void *)0x8000000100114DD0;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v3);
  v4 = Image.init(systemName:)(0xD000000000000013, 0x8000000100114E10);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release(v4);
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
  return LocalizedStringKey.init(stringInterpolation:)(v2);
}

uint64_t sub_1000C34A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for SavedWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for State(0, v4);
  State.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t type metadata accessor for SavedWallpaperView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SavedWallpaperView);
}

void sub_1000C3510(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010FEC8;
  v6[1] = &unk_10010FEC8;
  sub_10003C940(319, (unint64_t *)&qword_100159888, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003C940(319, (unint64_t *)&qword_100158BE8, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

uint64_t *sub_1000C35C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v9 = a2[1];
    v8 = a2[2];
    a1[1] = v9;
    a1[2] = v8;
    v10 = a2[3];
    a1[3] = v10;
    v11 = *(int *)(a3 + 40);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain(v5);
    swift_retain(v9);
    swift_retain(v10);
    v14 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = *(int *)(a3 + 44);
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

double sub_1000C3740(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 40));
  v5 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 44));
  v8 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000C3824(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = *(int *)(a3 + 40);
  v10 = (uint64_t *)((char *)a1 + v9);
  v11 = (uint64_t *)((char *)a2 + v9);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = *(int *)(a3 + 44);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  return a1;
}

uint64_t *sub_1000C3970(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[2] = a2[2];
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 40);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100007F38((uint64_t)a1 + v12, qword_100158AC8);
    v15 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = *(int *)(a3 + 44);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100007F38((uint64_t)a1 + v19, &qword_1001582E8);
    v22 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  return a1;
}

_OWORD *sub_1000C3B08(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 40);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 44);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000C3C38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_release(v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 40);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100007F38((uint64_t)a1 + v10, qword_100158AC8);
    v13 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = *(int *)(a3 + 44);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_100007F38((uint64_t)a1 + v15, &qword_1001582E8);
    v18 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000C3DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C3DC4);
}

uint64_t sub_1000C3DC4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158B78);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1000C3E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C3E78);
}

char *sub_1000C3E78(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158B78);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000C3F1C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001190BC, 1);
}

uint64_t sub_1000C3F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  _QWORD *v40;
  __n128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;

  v3 = v2;
  v50 = a2;
  v5 = sub_100007D50(&qword_10015E498);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015E4A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015E4A8);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_QWORD *)(a1 + 16);
  v49 = *(_QWORD *)(a1 + 24);
  v56 = v48;
  v57 = v49;
  v58 = v3;
  v15 = sub_100007D50(&qword_10015E4B0);
  v16 = sub_10000F4E0(&qword_10015E4B8, &qword_10015E4B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v18 = NavigationStack.init<>(root:)(sub_1000C6AE4, v55, v15, v16, v17);
  LOBYTE(v15) = static Edge.Set.top.getter(v18);
  v19 = EdgeInsets.init(_all:)(60.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
  v26 = &v11[*(int *)(v9 + 36)];
  *v26 = v15;
  *((double *)v26 + 1) = v19;
  *((_QWORD *)v26 + 2) = v21;
  *((_QWORD *)v26 + 3) = v23;
  *((_QWORD *)v26 + 4) = v25;
  v26[40] = 0;
  v27 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v15) = static Edge.Set.bottom.getter(v27);
  v28 = EdgeInsets.init(_all:)(20.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_100007E78((uint64_t)v11, (uint64_t)v14, &qword_10015E4A0);
  v35 = &v14[*(int *)(v12 + 36)];
  *v35 = v15;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  sub_100007F38((uint64_t)v11, &qword_10015E4A0);
  v37 = *(_QWORD *)(v3 + 16);
  v36 = *(_QWORD *)(v3 + 24);
  type metadata accessor for MainActor(0);
  v38 = swift_retain(v36);
  v39 = static MainActor.shared.getter(v38);
  v40 = (_QWORD *)swift_allocObject(&unk_10014EAC8, 48, 7);
  v40[2] = v39;
  v40[3] = &protocol witness table for MainActor;
  v40[4] = v37;
  v40[5] = v36;
  v41 = swift_retain(v36);
  v42 = static MainActor.shared.getter(v41);
  v43 = (_QWORD *)swift_allocObject(&unk_10014EAF0, 48, 7);
  v43[2] = v42;
  v43[3] = &protocol witness table for MainActor;
  v43[4] = v37;
  v43[5] = v36;
  Binding.init(get:set:)(&v59, sub_1000832BC, v40, sub_10004F7C4, v43, &type metadata for Bool);
  v44 = v59;
  v45 = v60;
  v52 = v48;
  v53 = v49;
  v54 = v3;
  sub_1000C2808(v59, v60, v61, (_QWORD *(*)(__int128 *__return_ptr))sub_1000C6790, 0, (_QWORD *(*)(__int128 *__return_ptr, uint64_t))sub_1000C6810, 0, (_QWORD *(*)(__int128 *__return_ptr))sub_1000C6AF8, v50, (uint64_t)v51);
  swift_release(v45);
  swift_release(v44);
  return sub_100007F38((uint64_t)v14, &qword_10015E4A8);
}

uint64_t sub_1000C4298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  *(_QWORD *)a4 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v8 = sub_100007D50(&qword_10015E4F0);
  return sub_1000C42F8(a1, a2, a3, a4 + *(int *)(v8 + 44));
}

uint64_t sub_1000C42F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (**v66)(double *@<X8>, double@<D2>, double@<D3>);
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __n128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  double (**v84)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  int v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char v179;
  char v180;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[33];
  __int128 v223;
  _BYTE v224[168];
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  _BYTE v229[7];
  char v230;
  _BYTE v231[7];
  double v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  _OWORD v237[7];
  _OWORD v238[2];
  _OWORD v239[9];
  char v240;
  unsigned __int8 v241;
  char v242;
  _BYTE v243[7];
  _BYTE v244[7];
  _BYTE v245[7];
  _BYTE v246[7];
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  __int128 v268;

  v217 = a1;
  v211 = a4;
  v6 = sub_100007D50(&qword_10015E4F8);
  v190 = *(_QWORD *)(v6 - 8);
  v191 = v6;
  __chkstk_darwin(v6);
  v189 = (char *)&v186 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015E500);
  v201 = *(_QWORD *)(v8 - 8);
  v202 = v8;
  __chkstk_darwin(v8);
  v188 = (char *)&v186 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v10);
  v207 = (char *)&v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v208 = *(_QWORD *)(v12 - 8);
  v209 = v12;
  __chkstk_darwin(v12);
  v199 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = v13;
  __chkstk_darwin(v14);
  v200 = (char *)&v186 - v15;
  v16 = sub_100007D50(&qword_10015E508);
  __chkstk_darwin(v16);
  v210 = (uint64_t)&v186 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v218 = (uint64_t)&v186 - v19;
  v215 = a2;
  v220 = a3;
  v21 = type metadata accessor for SavedWallpaperView(0, a2, a3, v20);
  v213 = *(_QWORD *)(v21 - 8);
  v214 = v21;
  v212 = *(_QWORD *)(v213 + 64);
  __chkstk_darwin(v21);
  v216 = (char *)&v186 - v22;
  v193 = sub_100007D50(&qword_10015E510);
  __chkstk_darwin(v193);
  v24 = (char *)&v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for CoordinateSpace(0);
  v25 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v194 = (char *)&v186 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Image.ResizingMode(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100007D50(&qword_10015E518);
  __chkstk_darwin(v192);
  v32 = (char *)&v186 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100007D50(&qword_10015E520);
  __chkstk_darwin(v196);
  v198 = (id *)((char *)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v197 = sub_100007D50(&qword_10015E528);
  __chkstk_darwin(v197);
  v204 = (char *)&v186 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100007D50(&qword_10015E530);
  v205 = *(_QWORD *)(v35 - 8);
  v206 = v35;
  __chkstk_darwin(v35);
  v203 = (uint64_t)&v186 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100007D50(&qword_10015E538);
  __chkstk_darwin(v37);
  v219 = (uint64_t)&v186 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v221 = (uint64_t)&v186 - v40;
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v42 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v41);

  if (v42)
  {
    v186 = v42;
    v43 = Image.init(uiImage:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for Image.ResizingMode.stretch(_:), v27);
    v44 = Image.resizable(capInsets:resizingMode:)(v30, v43, 0.0, 0.0, 0.0, 0.0);
    v45 = swift_release(v43);
    (*(void (**)(char *, uint64_t, __n128))(v28 + 8))(v30, v27, v45);
    v46 = v214;
    v50 = sub_1000C34A8(v214, v47, v48, v49);
    v51 = sub_100016AC0();
    swift_release(v50);
    LOBYTE(v50) = static Edge.Set.all.getter(v52);
    v53 = EdgeInsets.init(_all:)(v51);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v61 = static Alignment.center.getter(v60);
    LOBYTE(v183) = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v256, 0, 1, 0, 1, 0, 1, 0x4054000000000000, 0, 0, 1, 0, v183, v61, v62);
    v223 = (unint64_t)v44;
    *(_WORD *)v224 = 1;
    v224[8] = v50;
    *(double *)&v224[16] = v53;
    *(_QWORD *)&v224[24] = v55;
    *(_QWORD *)&v224[32] = v57;
    *(_QWORD *)&v224[40] = v59;
    v224[48] = 0;
    *(_WORD *)&v224[49] = 0;
    *(_QWORD *)&v224[56] = v256;
    v224[64] = v257;
    *(_QWORD *)&v224[72] = v258;
    v224[80] = v259;
    *(_QWORD *)&v224[88] = v260;
    v224[96] = v261;
    *(_QWORD *)&v224[104] = v262;
    v224[112] = v263;
    *(_QWORD *)&v224[120] = v264;
    v224[128] = v265;
    *(_QWORD *)&v224[136] = v266;
    v224[144] = v267;
    *(_OWORD *)&v224[152] = v268;
    v64 = v194;
    v63 = v195;
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v194, enum case for CoordinateSpace.local(_:), v195);
    v65 = v193;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(&v24[*(int *)(v193 + 36)], v64, v63);
    *(_QWORD *)v24 = &type metadata for BezelSizePreferenceKey;
    v66 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v24[*(int *)(v65 + 40)];
    *v66 = sub_10001F8A8;
    v66[1] = 0;
    sub_100007E78((uint64_t)v24, (uint64_t)&v32[*(int *)(v192 + 36)], &qword_10015E510);
    v67 = *(_OWORD *)&v224[128];
    *((_OWORD *)v32 + 8) = *(_OWORD *)&v224[112];
    *((_OWORD *)v32 + 9) = v67;
    *((_OWORD *)v32 + 10) = *(_OWORD *)&v224[144];
    *((_QWORD *)v32 + 22) = *(_QWORD *)&v224[160];
    v68 = *(_OWORD *)&v224[64];
    *((_OWORD *)v32 + 4) = *(_OWORD *)&v224[48];
    *((_OWORD *)v32 + 5) = v68;
    v69 = *(_OWORD *)&v224[96];
    *((_OWORD *)v32 + 6) = *(_OWORD *)&v224[80];
    *((_OWORD *)v32 + 7) = v69;
    v70 = *(_OWORD *)v224;
    *(_OWORD *)v32 = v223;
    *((_OWORD *)v32 + 1) = v70;
    v71 = *(_OWORD *)&v224[32];
    *((_OWORD *)v32 + 2) = *(_OWORD *)&v224[16];
    *((_OWORD *)v32 + 3) = v71;
    sub_10005120C(&v223);
    sub_100007F38((uint64_t)v24, &qword_10015E510);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v64, v63);
    v72 = swift_release(v44);
    v73 = v213;
    v74 = v216;
    v75 = v217;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v213 + 16))(v216, v217, v46, v72);
    v76 = *(unsigned __int8 *)(v73 + 80);
    v77 = (v76 + 32) & ~v76;
    v78 = (v212 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
    v79 = swift_allocObject(&unk_10014EB68, v78 + 8, v76 | 7);
    v80 = v215;
    v81 = v220;
    *(_QWORD *)(v79 + 16) = v215;
    *(_QWORD *)(v79 + 24) = v81;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v79 + v77, v74, v46);
    v82 = v186;
    *(_QWORD *)(v79 + v78) = v186;
    v83 = (char *)v198;
    sub_100007E78((uint64_t)v32, (uint64_t)v198, &qword_10015E518);
    v84 = (double (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v83[*(int *)(v196 + 36)];
    *v84 = sub_1000C7254;
    v84[1] = (double (*)(uint64_t, uint64_t, uint64_t, uint64_t))v79;
    v85 = v82;
    v86 = sub_100007F38((uint64_t)v32, &qword_10015E518);
    v87 = static Alignment.center.getter(v86);
    v89 = v88;
    v90 = (uint64_t)v204;
    v91 = (uint64_t)&v204[*(int *)(v197 + 36)];
    sub_1000C5310(v75, v80, v220, v92, v91);
    v93 = (uint64_t *)(v91 + *(int *)(sub_100007D50(&qword_10015E588) + 36));
    *v93 = v87;
    v93[1] = v89;
    v94 = sub_100018EB4((uint64_t)v83, v90, &qword_10015E520);
    LOBYTE(v87) = static Edge.Set.bottom.getter(v94);
    v95 = EdgeInsets.init(_all:)(20.0);
    v97 = v96;
    v99 = v98;
    v101 = v100;
    v102 = v203;
    sub_100007E78(v90, v203, &qword_10015E528);

    v103 = v206;
    v104 = v102 + *(int *)(v206 + 36);
    *(_BYTE *)v104 = v87;
    *(double *)(v104 + 8) = v95;
    *(_QWORD *)(v104 + 16) = v97;
    *(_QWORD *)(v104 + 24) = v99;
    *(_QWORD *)(v104 + 32) = v101;
    *(_BYTE *)(v104 + 40) = 0;
    sub_100007F38(v90, &qword_10015E528);
    v105 = v221;
    sub_100018EB4(v102, v221, &qword_10015E530);
    v106 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v105, 0, 1, v103);
    v107 = v75;
  }
  else
  {
    v105 = v221;
    v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 56))(v221, 1, 1, v206);
    v107 = v217;
  }
  v108 = static HorizontalAlignment.center.getter(v106);
  v109 = sub_1000C5EB0((uint64_t)v237);
  *(_OWORD *)((char *)&v239[6] + 7) = v237[6];
  *(_OWORD *)((char *)&v239[5] + 7) = v237[5];
  *(_OWORD *)((char *)&v239[2] + 7) = v237[2];
  *(_OWORD *)((char *)&v239[1] + 7) = v237[1];
  *(_OWORD *)((char *)&v239[7] + 7) = v238[0];
  v239[8] = *(_OWORD *)((char *)v238 + 9);
  *(_OWORD *)((char *)&v239[3] + 7) = v237[3];
  v240 = 0;
  *(_OWORD *)((char *)&v239[4] + 7) = v237[4];
  *(_OWORD *)((char *)v239 + 7) = v237[0];
  v110 = 0;
  v253 = v239[6];
  v254 = v239[7];
  v255 = *(_OWORD *)((char *)v238 + 9);
  v249 = v239[2];
  v250 = v239[3];
  v252 = v239[5];
  v251 = v239[4];
  v248 = v239[1];
  v247 = v239[0];
  v111 = static Edge.Set.horizontal.getter(v109);
  v112 = EdgeInsets.init(_all:)(30.0);
  v114 = v113;
  v116 = v115;
  v118 = v117;
  v241 = 0;
  LODWORD(v204) = static Edge.Set.bottom.getter(v119);
  v120 = EdgeInsets.init(_all:)(28.0);
  v122 = v121;
  v124 = v123;
  v126 = v125;
  LODWORD(v203) = v241;
  v242 = 0;
  v127 = (uint64_t)v207;
  URL.init(string:)(0xD000000000000012, 0x8000000100114DB0);
  swift_bridgeObjectRelease();
  v128 = v208;
  v129 = v209;
  v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v127, 1, v209);
  v206 = v108;
  LODWORD(v217) = 0;
  LODWORD(v205) = v111;
  if (v130 == 1)
  {
    sub_100007F38(v127, &qword_100158658);
    v131 = 1;
    v132 = v218;
    v133 = v202;
  }
  else
  {
    v198 = *(id **)(v128 + 32);
    v134 = v200;
    ((void (*)(char *, uint64_t, uint64_t))v198)(v200, v127, v129);
    v135 = v213;
    v136 = v214;
    (*(void (**)(char *, uint64_t, uint64_t))(v213 + 16))(v216, v107, v214);
    (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v199, v134, v129);
    v137 = *(unsigned __int8 *)(v135 + 80);
    v138 = (v137 + 32) & ~v137;
    v139 = *(unsigned __int8 *)(v128 + 80);
    v140 = (v212 + v139 + v138) & ~v139;
    v141 = swift_allocObject(&unk_10014EB40, v140 + v187, v137 | v139 | 7);
    v143 = v215;
    v142 = v216;
    v144 = v220;
    *(_QWORD *)(v141 + 16) = v215;
    *(_QWORD *)(v141 + 24) = v144;
    (*(void (**)(uint64_t, char *, uint64_t))(v135 + 32))(v141 + v138, v142, v136);
    v145 = ((uint64_t (*)(uint64_t, char *, uint64_t))v198)(v141 + v140, v199, v129);
    __chkstk_darwin(v145);
    v184 = v143;
    v185 = v144;
    v146 = sub_100007D50(&qword_10015E548);
    v147 = sub_1000C74EC(&qword_10015E550, &qword_10015E548, (void (*)(void))sub_1000C7054);
    v148 = v189;
    v149 = Button.init(action:label:)(sub_1000C6FD0, v141, sub_1000C704C, &v182, v146, v147);
    LOBYTE(v141) = static Edge.Set.horizontal.getter(v149);
    v150 = EdgeInsets.init(_all:)(20.0);
    v214 = v126;
    v215 = v124;
    v151 = v120;
    v152 = v112;
    v153 = v150;
    v216 = v122;
    v154 = v114;
    v156 = v155;
    v157 = v116;
    v159 = v158;
    v220 = v118;
    v161 = v160;
    v162 = v128;
    v164 = v190;
    v163 = v191;
    v165 = (uint64_t)v188;
    (*(void (**)(char *, char *, uint64_t))(v190 + 16))(v188, v148, v191);
    v133 = v202;
    v166 = v165 + *(int *)(v202 + 36);
    *(_BYTE *)v166 = v141;
    *(double *)(v166 + 8) = v153;
    *(_QWORD *)(v166 + 16) = v156;
    v112 = v152;
    v120 = v151;
    v114 = v154;
    v122 = v216;
    *(_QWORD *)(v166 + 24) = v159;
    *(_QWORD *)(v166 + 32) = v161;
    v116 = v157;
    v126 = v214;
    v124 = v215;
    v118 = v220;
    *(_BYTE *)(v166 + 40) = 0;
    v167 = v163;
    v110 = v217;
    (*(void (**)(char *, uint64_t))(v164 + 8))(v148, v167);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v200, v129);
    v105 = v221;
    v132 = v218;
    sub_100018EB4(v165, v218, &qword_10015E500);
    v131 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 56))(v132, v131, 1, v133);
  v168 = v132;
  v169 = v219;
  sub_100007E78(v105, v219, &qword_10015E538);
  v170 = v242;
  v171 = v168;
  v172 = v210;
  sub_100007E78(v171, v210, &qword_10015E508);
  v173 = v169;
  v174 = v211;
  sub_100007E78(v173, v211, &qword_10015E538);
  v175 = sub_100007D50(&qword_10015E540);
  v176 = *(int *)(v175 + 48);
  *(_OWORD *)((char *)&v222[12] + 1) = v252;
  *(_OWORD *)((char *)&v222[14] + 1) = v253;
  *(_OWORD *)((char *)&v222[16] + 1) = v254;
  *(_OWORD *)((char *)&v222[18] + 1) = v255;
  *(_OWORD *)((char *)&v222[4] + 1) = v248;
  *(_OWORD *)((char *)&v222[6] + 1) = v249;
  *(_OWORD *)((char *)&v222[8] + 1) = v250;
  *(_OWORD *)((char *)&v222[10] + 1) = v251;
  v177 = v206;
  v222[0] = v206;
  v222[1] = 0x4020000000000000;
  LOBYTE(v222[2]) = v110;
  *(_OWORD *)((char *)&v222[2] + 1) = v247;
  *(_DWORD *)((char *)&v222[20] + 1) = *(_DWORD *)v246;
  HIDWORD(v222[20]) = *(_DWORD *)&v246[3];
  v178 = v205;
  LOBYTE(v222[21]) = v205;
  *(_DWORD *)((char *)&v222[21] + 1) = *(_DWORD *)v245;
  HIDWORD(v222[21]) = *(_DWORD *)&v245[3];
  *(double *)&v222[22] = v112;
  v222[23] = v114;
  v222[24] = v116;
  v222[25] = v118;
  v179 = v203;
  LOBYTE(v222[26]) = v203;
  *(_DWORD *)((char *)&v222[26] + 1) = *(_DWORD *)v244;
  HIDWORD(v222[26]) = *(_DWORD *)&v244[3];
  v180 = (char)v204;
  LOBYTE(v222[27]) = (_BYTE)v204;
  HIDWORD(v222[27]) = *(_DWORD *)&v243[3];
  *(_DWORD *)((char *)&v222[27] + 1) = *(_DWORD *)v243;
  *(double *)&v222[28] = v120;
  v222[29] = v122;
  v222[30] = v124;
  v222[31] = v126;
  LOBYTE(v222[32]) = v170;
  memcpy((void *)(v174 + v176), v222, 0x101uLL);
  sub_100007E78(v172, v174 + *(int *)(v175 + 64), &qword_10015E508);
  sub_1000C6D0C((uint64_t)v222);
  sub_100007F38(v218, &qword_10015E508);
  sub_100007F38(v221, &qword_10015E538);
  sub_100007F38(v172, &qword_10015E508);
  *(_OWORD *)&v224[81] = v252;
  *(_OWORD *)&v224[97] = v253;
  *(_OWORD *)&v224[113] = v254;
  *(_OWORD *)&v224[129] = v255;
  *(_OWORD *)&v224[17] = v248;
  *(_OWORD *)&v224[33] = v249;
  *(_OWORD *)&v224[49] = v250;
  *(_OWORD *)&v224[65] = v251;
  *(_QWORD *)&v223 = v177;
  *((_QWORD *)&v223 + 1) = 0x4020000000000000;
  v224[0] = v217;
  *(_OWORD *)&v224[1] = v247;
  *(_DWORD *)&v224[145] = *(_DWORD *)v246;
  *(_DWORD *)&v224[148] = *(_DWORD *)&v246[3];
  v224[152] = v178;
  *(_DWORD *)&v224[153] = *(_DWORD *)v245;
  *(_DWORD *)&v224[156] = *(_DWORD *)&v245[3];
  *(double *)&v224[160] = v112;
  v225 = v114;
  v226 = v116;
  v227 = v118;
  v228 = v179;
  *(_DWORD *)v229 = *(_DWORD *)v244;
  *(_DWORD *)&v229[3] = *(_DWORD *)&v244[3];
  v230 = v180;
  *(_DWORD *)&v231[3] = *(_DWORD *)&v243[3];
  *(_DWORD *)v231 = *(_DWORD *)v243;
  v232 = v120;
  v233 = v122;
  v234 = v124;
  v235 = v126;
  v236 = v170;
  sub_1000C6DB4((uint64_t)&v223);
  return sub_100007F38(v219, &qword_10015E538);
}

double sub_1000C521C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double result;

  v6 = *(double *)(a1 + 8);
  v7 = type metadata accessor for SavedWallpaperView(0, a4, a5, a4);
  v11 = sub_1000C34A8(v7, v8, v9, v10);
  sub_1000167FC(v6);
  swift_release(v11);
  v15 = sub_1000C34A8(v7, v12, v13, v14);
  v16 = sub_1000167A4();
  objc_msgSend(a3, "size", swift_release(v15).n128_f64[0]);
  v18 = v16 / v17;
  v22 = sub_1000C34A8(v7, v19, v20, v21);
  objc_msgSend(a3, "size");
  sub_100016958(v18 * v23);
  swift_release(v22);
  v27 = sub_1000C34A8(v7, v24, v25, v26);
  objc_msgSend(a3, "size");
  sub_1000169C4(v18 * v28);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

uint64_t sub_1000C5310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v31[2];

  v31[0] = a1;
  v31[1] = a5;
  v7 = type metadata accessor for SavedWallpaperView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)v31 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v16);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000C34A8(v7, v19, v20, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v22 + *(_QWORD *)(*(_QWORD *)v22 + 96), a2);
  v23 = swift_release(v22);
  (*(void (**)(uint64_t, uint64_t, __n128))(a3 + 24))(a2, a3, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a2);
  v24 = type metadata accessor for URL(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v18, 0, 1, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 16))(v11, v31[0], v7);
  v25 = *(unsigned __int8 *)(v8 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_10014EB90, v26 + v9, v25 | 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v27 + v26, v11, v7);
  v28 = sub_100007D50(&qword_10015E590);
  v29 = sub_1000C7448();
  return AsyncImage.init(url:scale:transaction:content:)(v18, 0, sub_1000C73E0, v27, v28, v29, 1.0);
}

uint64_t sub_1000C5504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _OWORD v154[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  __int128 v170;

  v126 = a3;
  v127 = (char *)a4;
  v129 = a2;
  v125 = a1;
  v134 = a5;
  v117 = sub_100007D50(&qword_100159F08);
  __chkstk_darwin(v117);
  v119 = (uint64_t)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100007D50(&qword_10015E5F8);
  __chkstk_darwin(v118);
  v122 = (uint64_t)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100007D50(&qword_10015E5E8);
  __chkstk_darwin(v133);
  v120 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v115 - v9;
  v131 = sub_100007D50(&qword_10015E610);
  __chkstk_darwin(v131);
  v132 = (uint64_t)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v121);
  v123 = (uint64_t)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v128);
  v14 = (double *)((char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Image.ResizingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100007D50(&qword_10015E5A8);
  __chkstk_darwin(v130);
  v20 = (_OWORD *)((char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v124 = (uint64_t)&v115 - v22;
  v23 = type metadata accessor for AsyncImagePhase(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (uint64_t *)((char *)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v24 + 16))(v27, v125, v23, v25);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v24 + 88))(v27, v23) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v24 + 96))(v27, v23);
    v29 = *v27;
    v125 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
    v122 = Image.resizable(capInsets:resizingMode:)(v18, v29, 0.0, 0.0, 0.0, 0.0);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v31 = static Alignment.center.getter(v30);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v155, 0, 1, 0, 1, 0, 1, 0x4054000000000000, 0, 0, 1, 0, 1, v31, v32);
    v33 = v155;
    v120 = v156;
    v34 = v157;
    v119 = v158;
    v117 = v162;
    v118 = v160;
    v115 = v165;
    v116 = v164;
    v141 = 1;
    v140 = BYTE8(v155);
    v139 = BYTE8(v156);
    v138 = BYTE8(v157);
    v137 = v159;
    v136 = v161;
    v135 = v163;
    v36 = type metadata accessor for SavedWallpaperView(0, v126, (uint64_t)v127, v35);
    v40 = sub_1000C34A8(v36, v37, v38, v39);
    v41 = sub_100016A54();
    swift_release(v40);
    v42 = v41;
    v46 = sub_1000C34A8(v36, v43, v44, v45);
    v47 = sub_100016A74();
    swift_release(v46);
    v49 = static Alignment.center.getter(v48);
    _FrameLayout.init(width:height:alignment:)(&v166, *(_QWORD *)&v42, 0, *(_QWORD *)&v47, 0, v49, v50);
    v143 = v167;
    v142 = v169;
    v51 = v122;
    v144 = (unint64_t)v122;
    LOBYTE(v145) = v141;
    BYTE1(v145) = 1;
    *((_QWORD *)&v145 + 1) = v33;
    LOBYTE(v146) = v140;
    *((_QWORD *)&v146 + 1) = v120;
    LOBYTE(v147) = v139;
    *((_QWORD *)&v147 + 1) = v34;
    LOBYTE(v148) = v138;
    *((_QWORD *)&v148 + 1) = v119;
    LOBYTE(v149) = v137;
    *((_QWORD *)&v149 + 1) = v118;
    LOBYTE(v150) = v136;
    *((_QWORD *)&v150 + 1) = v117;
    LOBYTE(v151) = v135;
    *((_QWORD *)&v151 + 1) = v116;
    *(_QWORD *)&v152 = v115;
    *((_QWORD *)&v152 + 1) = v166;
    LOBYTE(v153) = v167;
    *((_QWORD *)&v153 + 1) = v168;
    LOBYTE(v154[0]) = v169;
    *(_OWORD *)((char *)v154 + 8) = v170;
    WORD4(v154[1]) = 0;
    v55 = sub_1000C34A8(v36, v52, v53, v54);
    v56 = sub_100016A94();
    swift_release(v55);
    v57 = (char *)v14 + *(int *)(v128 + 20);
    v58 = enum case for RoundedCornerStyle.continuous(_:);
    v59 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v57, v58, v59);
    *v14 = v56;
    v14[1] = v56;
    v60 = v123;
    sub_10000F760((uint64_t)v14, v123);
    *(_WORD *)(v60 + *(int *)(v121 + 36)) = 256;
    v61 = v130;
    sub_100007E78(v60, (uint64_t)v20 + *(int *)(v130 + 36), &qword_100158640);
    v62 = v153;
    v20[8] = v152;
    v20[9] = v62;
    v20[10] = v154[0];
    *(_OWORD *)((char *)v20 + 170) = *(_OWORD *)((char *)v154 + 10);
    v63 = v149;
    v20[4] = v148;
    v20[5] = v63;
    v64 = v151;
    v20[6] = v150;
    v20[7] = v64;
    v65 = v145;
    *v20 = v144;
    v20[1] = v65;
    v66 = v147;
    v20[2] = v146;
    v20[3] = v66;
    sub_10005120C(&v144);
    sub_100007F38(v60, &qword_100158640);
    sub_10000F854((uint64_t)v14);
    swift_release(v51);
    v67 = (uint64_t)v20;
    v68 = v124;
    sub_100018EB4(v67, v124, &qword_10015E5A8);
    v69 = v132;
    sub_100007E78(v68, v132, &qword_10015E5A8);
    swift_storeEnumTagMultiPayload(v69, v131, 0);
    v70 = sub_1000C74EC(&qword_10015E5A0, &qword_10015E5A8, (void (*)(void))sub_1000C7570);
    v71 = sub_10001E0A8(&qword_10015E5E0, &qword_10015E5E8, (void (*)(void))sub_1000C7638);
    _ConditionalContent<>.init(storage:)(v69, v61, v133, v70, v71);
    swift_release(v125);
    return sub_100007F38(v68, &qword_10015E5A8);
  }
  else
  {
    v73 = type metadata accessor for SavedWallpaperView(0, v126, (uint64_t)v127, v28);
    v127 = v10;
    v77 = sub_1000C34A8(v73, v74, v75, v76);
    v78 = sub_100016A94();
    swift_release(v77);
    v79 = (char *)v14 + *(int *)(v128 + 20);
    v80 = enum case for RoundedCornerStyle.continuous(_:);
    v81 = type metadata accessor for RoundedCornerStyle(0);
    v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v79, v80, v81);
    *v14 = v78;
    v14[1] = v78;
    v83 = static Color.black.getter(v82);
    v84 = v119;
    sub_10000F760((uint64_t)v14, v119);
    *(_QWORD *)(v84 + *(int *)(v117 + 36)) = v83;
    v85 = sub_10000F854((uint64_t)v14);
    v86 = static Alignment.center.getter(v85);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v144, 0, 1, 0, 1, 0, 1, 0x4054000000000000, 0, 0, 1, 0, 1, v86, v87);
    v88 = v122;
    sub_100007E78(v84, v122, &qword_100159F08);
    v89 = (_OWORD *)(v88 + *(int *)(v118 + 36));
    v90 = v149;
    v89[4] = v148;
    v89[5] = v90;
    v89[6] = v150;
    v91 = v145;
    *v89 = v144;
    v89[1] = v91;
    v92 = v147;
    v89[2] = v146;
    v89[3] = v92;
    sub_100007F38(v84, &qword_100159F08);
    v96 = sub_1000C34A8(v73, v93, v94, v95);
    v97 = sub_100016A54();
    swift_release(v96);
    v98 = v97;
    v102 = sub_1000C34A8(v73, v99, v100, v101);
    v103 = sub_100016A74();
    swift_release(v102);
    v105 = static Alignment.center.getter(v104);
    _FrameLayout.init(width:height:alignment:)(&v155, *(_QWORD *)&v98, 0, *(_QWORD *)&v103, 0, v105, v106);
    v107 = v120;
    sub_100007E78(v88, v120, &qword_10015E5F8);
    v108 = v133;
    v109 = (_OWORD *)(v107 + *(int *)(v133 + 36));
    v110 = v156;
    *v109 = v155;
    v109[1] = v110;
    v109[2] = v157;
    sub_100007F38(v88, &qword_10015E5F8);
    v111 = (uint64_t)v127;
    sub_100018EB4(v107, (uint64_t)v127, &qword_10015E5E8);
    v112 = v132;
    sub_100007E78(v111, v132, &qword_10015E5E8);
    swift_storeEnumTagMultiPayload(v112, v131, 1);
    v113 = sub_1000C74EC(&qword_10015E5A0, &qword_10015E5A8, (void (*)(void))sub_1000C7570);
    v114 = sub_10001E0A8(&qword_10015E5E0, &qword_10015E5E8, (void (*)(void))sub_1000C7638);
    _ConditionalContent<>.init(storage:)(v112, v130, v108, v113, v114);
    sub_100007F38(v111, &qword_10015E5E8);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v24 + 8))(v27, v23);
  }
}

uint64_t sub_1000C5EB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  _BYTE v66[7];
  char v67;
  char v68;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000038, 0x8000000100114E30);
  v6 = Text.init(_:tableName:bundle:comment:)(v2, v4, v3 & 1, v5, 0, 0, 0, 0, 0, 256);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.title.getter(v6);
  static Font.Weight.bold.getter(v13);
  v14 = Font.weight(_:)(v13);
  swift_release(v13);
  v15 = Text.font(_:)(v14, v6, v8, v12, v10);
  v57 = v16;
  v58 = v15;
  v53 = v17;
  v59 = v18;
  swift_release(v14);
  sub_100007D90(v6, v8, v12);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010FF70);
  v55 = swift_getKeyPath(&unk_10010FFA0);
  v19 = sub_1000C33E4();
  LOWORD(v50) = 256;
  v23 = Text.init(_:tableName:bundle:comment:)(v19, v21, v20 & 1, v22, 0, 0, 0, 0, 0, v50);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Font.subheadline.getter(v23);
  static Font.Weight.regular.getter();
  v31 = Font.weight(_:)(v30);
  swift_release(v30);
  v32 = Text.font(_:)(v31, v23, v25, v29, v27);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  swift_release(v31);
  sub_100007D90(v23, v25, v29);
  swift_bridgeObjectRelease();
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v39 = v53 & 1;
  v40 = qword_10016A4B8;
  v60[0] = qword_10016A4B8;
  swift_retain(qword_10016A4B8);
  v51 = Text.foregroundStyle<A>(_:)(v60, v32, v34, v36 & 1, v38, &type metadata for Color, &protocol witness table for Color);
  v42 = v41;
  v54 = v43;
  v45 = v44 & 1;
  v52 = v44 & 1;
  sub_100007D90(v32, v34, v36 & 1);
  swift_release(v40);
  swift_bridgeObjectRelease();
  v46 = swift_getKeyPath(&unk_10010FF70);
  v47 = swift_getKeyPath(&unk_10010FFA0);
  v68 = v39;
  v67 = 0;
  v64 = v45;
  v62 = 0;
  *(_DWORD *)(a1 + 17) = v60[0];
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)v60 + 3);
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v66;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v66[3];
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v65[3];
  *(_DWORD *)(a1 + 65) = *(_DWORD *)v65;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v63;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v61;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v61[3];
  *(_QWORD *)a1 = v58;
  *(_QWORD *)(a1 + 8) = v57;
  *(_BYTE *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 24) = v59;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_QWORD *)(a1 + 40) = 2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v55;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = v51;
  *(_QWORD *)(a1 + 80) = v42;
  *(_BYTE *)(a1 + 88) = v45;
  *(_QWORD *)(a1 + 96) = v54;
  *(_QWORD *)(a1 + 104) = v46;
  *(_QWORD *)(a1 + 112) = 2;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v47;
  v48 = v47;
  *(_BYTE *)(a1 + 136) = 1;
  sub_10000F844(v58, v57, v39);
  swift_bridgeObjectRetain(v59);
  swift_retain(KeyPath);
  swift_retain(v55);
  sub_10000F844(v51, v42, v52);
  swift_bridgeObjectRetain(v54);
  swift_retain(v46);
  swift_retain(v48);
  sub_100007D90(v51, v42, v52);
  swift_release(v48);
  swift_release(v46);
  swift_bridgeObjectRelease();
  sub_100007D90(v58, v57, v39);
  swift_release(v55);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C62A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for OpenURLAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView(0, a3, a4, v11);
  sub_100018A2C((uint64_t)v10);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000C635C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t KeyPath;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char v109;

  v63 = a1;
  v67 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v67);
  v66 = (uint64_t)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v65);
  v64 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000039, 0x8000000100114D70);
  v7 = Text.init(_:tableName:bundle:comment:)(v3, v5, v4 & 1, v6, 0, 0, 0, 0, 0, 256);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.body.getter(v7);
  static Font.Weight.semibold.getter();
  v15 = Font.weight(_:)(v14);
  swift_release(v14);
  v16 = Text.font(_:)(v15, v7, v9, v13, v11);
  v18 = v17;
  LOBYTE(v14) = v19;
  v61 = v20;
  swift_release(v15);
  v21 = v14 & 1;
  sub_100007D90(v7, v9, v13);
  v22 = swift_bridgeObjectRelease();
  v23 = static Color.white.getter(v22);
  *(_QWORD *)&v95 = v23;
  v62 = Text.foregroundStyle<A>(_:)(&v95, v16, v18, v21, v61, &type metadata for Color, &protocol witness table for Color);
  v25 = v24;
  v27 = v26;
  LOBYTE(v15) = v28 & 1;
  sub_100007D90(v16, v18, v21);
  swift_release(v23);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_10010FF70);
  LOBYTE(v23) = static Edge.Set.vertical.getter(KeyPath);
  v30 = EdgeInsets.init(_all:)(14.0);
  v31 = v62;
  v68 = v62;
  v69 = v25;
  v70 = v15;
  v71 = v27;
  v72 = KeyPath;
  v73 = 1;
  v74 = 0;
  v75 = v23;
  v76 = v30;
  v77 = v32;
  v78 = v33;
  v79 = v34;
  v80 = 0;
  v36 = static Alignment.center.getter(v35);
  sub_1000441A4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v95, 0.0, 1, 0.0, 1, v36, v37);
  sub_100007D90(v31, v25, v15);
  swift_release(KeyPath);
  v38 = swift_bridgeObjectRelease();
  v92 = v106;
  v93 = v107;
  v88 = v102;
  v89 = v103;
  v90 = v104;
  v91 = v105;
  v84 = v98;
  v85 = v99;
  v86 = v100;
  v87 = v101;
  v81 = v95;
  v94 = v108;
  v82 = v96;
  v83 = v97;
  v39 = static Color.blue.getter(v38);
  v40 = static Edge.Set.all.getter(v39);
  v105 = v91;
  v106 = v92;
  v107 = v93;
  v101 = v87;
  v102 = v88;
  v103 = v89;
  v104 = v90;
  v97 = v83;
  v98 = v84;
  v99 = v85;
  v100 = v86;
  v95 = v81;
  v96 = v82;
  *(_QWORD *)&v108 = v94;
  *((_QWORD *)&v108 + 1) = v39;
  v109 = v40;
  v41 = v64;
  v42 = &v64[*(int *)(v65 + 20)];
  v43 = enum case for RoundedCornerStyle.continuous(_:);
  v44 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  __asm { FMOV            V0.2D, #12.0 }
  *v41 = _Q0;
  v50 = v66;
  sub_10000F760((uint64_t)v41, v66);
  *(_WORD *)(v50 + *(int *)(v67 + 36)) = 256;
  v51 = sub_100007D50(&qword_10015E548);
  v52 = v63;
  sub_100007E78(v50, v63 + *(int *)(v51 + 36), &qword_100158640);
  v53 = v108;
  *(_OWORD *)(v52 + 192) = v107;
  *(_OWORD *)(v52 + 208) = v53;
  *(_BYTE *)(v52 + 224) = v109;
  v54 = v104;
  *(_OWORD *)(v52 + 128) = v103;
  *(_OWORD *)(v52 + 144) = v54;
  v55 = v106;
  *(_OWORD *)(v52 + 160) = v105;
  *(_OWORD *)(v52 + 176) = v55;
  v56 = v100;
  *(_OWORD *)(v52 + 64) = v99;
  *(_OWORD *)(v52 + 80) = v56;
  v57 = v102;
  *(_OWORD *)(v52 + 96) = v101;
  *(_OWORD *)(v52 + 112) = v57;
  v58 = v96;
  *(_OWORD *)v52 = v95;
  *(_OWORD *)(v52 + 16) = v58;
  v59 = v98;
  *(_OWORD *)(v52 + 32) = v97;
  *(_OWORD *)(v52 + 48) = v59;
  sub_1000C7730((uint64_t)&v95);
  sub_100007F38(v50, &qword_100158640);
  sub_10000F854((uint64_t)v41);
  return sub_1000C7788((uint64_t)&v95);
}

double sub_1000C6790@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  char v5;
  double result;

  v2 = static Font.title.getter();
  static Font.Weight.medium.getter();
  v3 = Font.weight(_:)(v2);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_10010FF40);
  v5 = static Edge.Set.horizontal.getter();
  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = nullsub_1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v5;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

__n128 sub_1000C6810@<Q0>(uint64_t a1@<X8>)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  _OWORD v16[9];

  v2 = static Font.Weight.semibold.getter();
  v3 = Text.fontWeight(_:)(*(_QWORD *)&v2, 0, 0, 0xE000000000000000, 0, _swiftEmptyArrayStorage);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.center.getter(v3);
  sub_100042B7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v10, v11, v3, v5, v9, v7);
  sub_100007D90(v3, v5, v9);
  swift_bridgeObjectRelease();
  v12 = v16[7];
  *(_OWORD *)(a1 + 96) = v16[6];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = v16[8];
  v13 = v16[3];
  *(_OWORD *)(a1 + 32) = v16[2];
  *(_OWORD *)(a1 + 48) = v13;
  v14 = v16[5];
  *(_OWORD *)(a1 + 64) = v16[4];
  *(_OWORD *)(a1 + 80) = v14;
  result = (__n128)v16[1];
  *(_OWORD *)a1 = v16[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double sub_1000C6908@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  char v22;
  double result;
  uint64_t v24;

  v9 = type metadata accessor for SavedWallpaperView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v24 - v13, a1, v9, v12);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(&unk_10014EB18, v16 + v11, v15 | 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, v14, v9);
  v19 = static Font.title.getter(v18);
  static Font.Weight.medium.getter(v19);
  v20 = Font.weight(_:)(v19);
  swift_release(v19);
  KeyPath = swift_getKeyPath(&unk_10010FF40);
  v22 = static Edge.Set.horizontal.getter(KeyPath);
  *(_WORD *)a5 = 1;
  *(_QWORD *)(a5 + 8) = sub_1000C6CB4;
  *(_QWORD *)(a5 + 16) = v17;
  *(_QWORD *)(a5 + 24) = KeyPath;
  *(_QWORD *)(a5 + 32) = v20;
  *(_BYTE *)(a5 + 40) = v22;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 1;
  return result;
}

uint64_t sub_1000C6A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SavedWallpaperView(0, a2, a3, v9);
  sub_100018E80((uint64_t)v8);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000C6AE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C4298(v1[4], v1[2], v1[3], a1);
}

double sub_1000C6AF8@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000C6908(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_1000C6B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E4D0;
  if (!qword_10015E4D0)
  {
    v1 = sub_100007D00(&qword_10015E4A0);
    sub_10000F4E0(&qword_10015E4D8, &qword_10015E498, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E4D0);
  }
  return result;
}

uint64_t sub_1000C6B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 224);
  v4 = *(_QWORD *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 240);
  v6 = *(_QWORD *)(a1 + 392);
  v7 = *(_QWORD *)(a1 + 400);
  v8 = *(_QWORD *)(a1 + 408);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v8);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_1000C6C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232);
  v4 = *(_QWORD *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 392);
  v6 = *(_QWORD *)(a1 + 400);
  v7 = *(_QWORD *)(a1 + 408);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v6);
  swift_release(v5);
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  swift_release(v4);
  swift_release(v7);
  return a1;
}

uint64_t sub_1000C6CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v5, v6, a4) - 8) + 80);
  return sub_1000C6A38(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_1000C6D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 152);
  sub_10000F844(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10000F844(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_1000C6DB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 152);
  sub_100007D90(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  sub_100007D90(v4, v5, v6);
  swift_release(v8);
  swift_release(v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000C6E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = type metadata accessor for SavedWallpaperView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v23 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v14 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v17 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    v19 = swift_release(*v16);
  }
  v20 = (v8 + v23 + v11) & ~v11;
  v21 = v20 + v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v4 + v20, v9, v19);
  return swift_deallocObject(v4, v21, v7 | v11 | 7);
}

uint64_t sub_1000C6FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1000C62A4(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_1000C704C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C635C(a1);
}

unint64_t sub_1000C7054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E558;
  if (!qword_10015E558)
  {
    v1 = sub_100007D00(&qword_10015E560);
    sub_10001E0A8(&qword_10015E568, &qword_10015E570, (void (*)(void))sub_1000C70F8);
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E558);
  }
  return result;
}

uint64_t sub_1000C70F8()
{
  return sub_10001E0A8(&qword_10015E578, &qword_10015E580, (void (*)(void))sub_10003B9E0);
}

uint64_t sub_1000C711C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = type metadata accessor for SavedWallpaperView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v11 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v14 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v16 + 8;

  return swift_deallocObject(v4, v17, v7 | 7);
}

double sub_1000C7254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_1000C521C(a1, v4 + v9, *(void **)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7);
}

uint64_t sub_1000C72C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for SavedWallpaperView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v11 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v14 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_1000C73E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SavedWallpaperView(0, v6, v7, a2) - 8) + 80);
  return sub_1000C5504(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_1000C7448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E598;
  if (!qword_10015E598)
  {
    v1 = sub_100007D00(&qword_10015E590);
    sub_1000C74EC(&qword_10015E5A0, &qword_10015E5A8, (void (*)(void))sub_1000C7570);
    sub_10001E0A8(&qword_10015E5E0, &qword_10015E5E8, (void (*)(void))sub_1000C7638);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E598);
  }
  return result;
}

uint64_t sub_1000C74EC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    a3();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C7570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E5B0;
  if (!qword_10015E5B0)
  {
    v1 = sub_100007D00(&qword_10015E5B8);
    sub_10001E0A8(&qword_10015E5C0, &qword_10015E5C8, (void (*)(void))sub_1000C7614);
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E5B0);
  }
  return result;
}

uint64_t sub_1000C7614()
{
  return sub_10001E0A8(&qword_10015E5D0, &qword_10015E5D8, (void (*)(void))sub_100020844);
}

uint64_t sub_1000C7638()
{
  return sub_10001E0A8(&qword_10015E5F0, &qword_10015E5F8, (void (*)(void))sub_1000C765C);
}

unint64_t sub_1000C765C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E600;
  if (!qword_10015E600)
  {
    v1 = sub_100007D00(&qword_100159F08);
    sub_1000C76E0();
    sub_10000F4E0(&qword_100158618, &qword_100158620, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E600);
  }
  return result;
}

unint64_t sub_1000C76E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E608;
  if (!qword_10015E608)
  {
    v1 = type metadata accessor for RoundedRectangle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RoundedRectangle, v1);
    atomic_store(result, (unint64_t *)&qword_10015E608);
  }
  return result;
}

uint64_t sub_1000C7730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 216);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000C7788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 216);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BezelSizePreferenceKey()
{
  return &type metadata for BezelSizePreferenceKey;
}

unint64_t sub_1000C77FC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015E618;
  if (!qword_10015E618)
  {
    v1 = sub_100007D00(&qword_10015E4E0);
    v2[0] = sub_100007D00(&qword_10015E4A8);
    v2[1] = sub_10001E0A8(&qword_10015E4C8, &qword_10015E4A8, (void (*)(void))sub_1000C6B04);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    sub_10000F4E0(&qword_10015E620, &qword_10015E4E8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E618);
  }
  return result;
}

unint64_t sub_1000C78D0(uint64_t a1)
{
  unint64_t result;

  result = sub_1000C78F4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C78F4()
{
  unint64_t result;

  result = qword_10015E628;
  if (!qword_10015E628)
  {
    result = swift_getWitnessTable(&unk_10010FFE8, &type metadata for BezelSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015E628);
  }
  return result;
}

_QWORD *initializeWithCopy for EventCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for EventCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for EventCampaignHandler(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for EventCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventCampaignHandler(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EventCampaignHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventCampaignHandler()
{
  return &type metadata for EventCampaignHandler;
}

void sub_1000C7B4C()
{
  qword_10015E630 = 0x6763737469;
  *(_QWORD *)algn_10015E638 = 0xE500000000000000;
}

void sub_1000C7B6C()
{
  qword_10015E640 = 0x7463737469;
  *(_QWORD *)algn_10015E648 = 0xE500000000000000;
}

void sub_1000C7B8C()
{
  qword_10015E650 = 29795;
  *(_QWORD *)algn_10015E658 = 0xE200000000000000;
}

void sub_1000C7BA4()
{
  qword_10015E660 = 29808;
  *(_QWORD *)algn_10015E668 = 0xE200000000000000;
}

uint64_t sub_1000C7BC0(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100007D50(&qword_100159698);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C7C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[39] = a2;
  v3[40] = a3;
  v3[38] = a1;
  return swift_task_switch(sub_1000C7C68, 0, 0);
}

uint64_t sub_1000C7C68()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 10;
  v2 = objc_msgSend((id)objc_opt_self(SHRemoteConfiguration), "sharedInstance");
  v0[41] = v2;
  v0[15] = v0 + 36;
  v0[10] = v0;
  v0[11] = sub_1000C7D28;
  v3 = swift_continuation_init(v0 + 10, 1);
  v0[26] = _NSConcreteStackBlock;
  v4 = v0 + 26;
  v4[1] = 0x40000000;
  v4[2] = sub_1000C7BBC;
  v4[3] = &unk_10014ED00;
  v4[4] = v3;
  objc_msgSend(v2, "defaultValuesWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000C7D28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 336) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 320));
    v3 = sub_1000C811C;
  }
  else
  {
    v3 = sub_1000C7D90;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C7D90()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0 + 18;
  v2 = (void *)v0[41];
  v3 = (void *)v0[36];
  v4 = objc_msgSend(v3, "campaignGroup");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v0[43] = v5;
  v0[44] = v7;
  v0[23] = v0 + 36;
  v0[18] = v0;
  v0[19] = sub_1000C7E70;
  v8 = swift_continuation_init(v0 + 18, 1);
  v0[26] = _NSConcreteStackBlock;
  v9 = v0 + 26;
  v9[1] = 0x40000000;
  v9[2] = sub_1000C7BBC;
  v9[3] = &unk_10014ED18;
  v9[4] = v8;
  objc_msgSend(v2, "campaignTokenWithCompletion:", v9);
  return swift_continuation_await(v1);
}

uint64_t sub_1000C7E70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  *(_QWORD *)(*v0 + 360) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 320);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 352));
    swift_bridgeObjectRelease(v3);
    v4 = sub_1000C8320;
  }
  else
  {
    v4 = sub_1000C7EE4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C7EE4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0 + 2;
  v2 = (void *)v0[41];
  v3 = (void *)v0[36];
  if (v0[40])
    v4 = v0[40];
  else
    v4 = 0x8000000100114EE0;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v6 = objc_msgSend(v3, "tokenForClientIdentifier:", v5);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;
  v0[34] = v7;
  v0[35] = v8;

  v0[46] = v9;
  v0[7] = v0 + 36;
  v0[2] = v0;
  v0[3] = sub_1000C8008;
  v10 = swift_continuation_init(v0 + 2, 1);
  v0[26] = _NSConcreteStackBlock;
  v11 = v0 + 26;
  v11[1] = 0x40000000;
  v11[2] = sub_1000C7BBC;
  v11[3] = &unk_10014ED30;
  v11[4] = v10;
  objc_msgSend(v2, "defaultValuesWithCompletion:", v11);
  return swift_continuation_await(v1);
}

uint64_t sub_1000C8008()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 376) = v2;
  if (v2)
  {
    v3 = v1[46];
    swift_bridgeObjectRelease(v1[44]);
    swift_bridgeObjectRelease(v3);
    v4 = sub_1000C8528;
  }
  else
  {
    v1[48] = v1[34];
    v4 = sub_1000C8084;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000C8084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(void **)(v0 + 328);
  v4 = *(void **)(v0 + 288);
  v5 = objc_msgSend(v4, "providerToken");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD **)(v0 + 304);
  *v10 = *(_QWORD *)(v0 + 344);
  v10[1] = v2;
  v10[2] = v9;
  v10[3] = v1;
  v10[4] = v6;
  v10[5] = v8;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C811C(__n128 a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v15;

  v2 = *(void **)(v1 + 328);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 336);
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v4 = type metadata accessor for Logger(0);
  sub_100029E7C(v4, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v3, v1 + 296, v1 + 248);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264));
    v12 = v11;
    *(_QWORD *)(v1 + 208) = sub_10003FCB4(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not fetch event campaign values due to Error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v13 = *(_OWORD **)(v1 + 304);
  v13[1] = 0u;
  v13[2] = 0u;
  *v13 = 0u;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C8320(__n128 a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v15;

  v2 = *(void **)(v1 + 328);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 360);
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v4 = type metadata accessor for Logger(0);
  sub_100029E7C(v4, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v3, v1 + 296, v1 + 248);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264));
    v12 = v11;
    *(_QWORD *)(v1 + 208) = sub_10003FCB4(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not fetch event campaign values due to Error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v13 = *(_OWORD **)(v1 + 304);
  v13[1] = 0u;
  v13[2] = 0u;
  *v13 = 0u;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C8528(__n128 a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v15;

  v2 = *(void **)(v1 + 328);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 376);
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v4 = type metadata accessor for Logger(0);
  sub_100029E7C(v4, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v3, v1 + 296, v1 + 248);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264));
    v12 = v11;
    *(_QWORD *)(v1 + 208) = sub_10003FCB4(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not fetch event campaign values due to Error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v13 = *(_OWORD **)(v1 + 304);
  v13[1] = 0u;
  v13[2] = 0u;
  *v13 = 0u;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C8730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100007F38(a1, &qword_10015D460);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10014EE58, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10015E7C0, v16);
}

uint64_t sub_1000C887C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100110170);
  v4 = v0;
  v2 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_1000C8900(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110170);
  v6 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_1000C898C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110170);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000CB1F4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000C8A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_100110198);
  v6[0] = v1;
  v4 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 24, v6, 0, 0);
  return sub_1000345D4(v1 + 24, a1);
}

uint64_t sub_1000C8ADC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110198);
  v7[0] = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 24, v7, 0, 0);
  return sub_1000345D4(v3 + 24, a2);
}

uint64_t sub_1000C8B84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_1000345D4(a1, (uint64_t)v9);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110198);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000CAD3C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v9, &qword_1001597E0);
}

uint64_t sub_1000C8C44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 24;
  swift_beginAccess(a1 + 24, v5, 33, 0);
  sub_1000CAD54(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000C8CA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100110120);
  v4 = v0;
  v2 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 64)).n128_u64[0];
  return result;
}

double sub_1000C8D2C@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110120);
  v8 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 64);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000C8DBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110120);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000CACC8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

double sub_1000C8E74()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100110148);
  v4 = v0;
  v2 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + 72)).n128_u64[0];
  return result;
}

double sub_1000C8EFC@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110148);
  v8 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 72);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000C8F8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110148);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000CAD08, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000C9044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  _QWORD v25[3];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v1 = type metadata accessor for MusicPlayer.Queue.Entry(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_10015E790);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100110198);
  v25[0] = v0;
  v9 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v25, KeyPath, v9);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 24, v25, 0, 0);
  sub_1000345D4(v0 + 24, (uint64_t)v26);
  v10 = v27;
  if (v27)
  {
    v11 = v28;
    v12 = sub_10001BF94(v26, v27);
    v13 = *(_QWORD *)(v10 - 8);
    v14 = __chkstk_darwin(v12);
    v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v13 + 16))(v16, v14);
    sub_100007F38((uint64_t)v26, &qword_1001597E0);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 96))(v10, v11);
    LOBYTE(v11) = v18;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v10);
    if ((v11 & 1) == 0)
      return v17;
  }
  else
  {
    sub_100007F38((uint64_t)v26, &qword_1001597E0);
  }
  type metadata accessor for SystemMusicPlayer(0);
  v19 = static SystemMusicPlayer.shared.getter();
  v20 = dispatch thunk of SystemMusicPlayer.queue.getter();
  v21 = swift_release(v19);
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter(v21);
  v22 = swift_release(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v2 + 48))(v7, 1, v1, v22))
  {
    sub_100007F38((uint64_t)v7, &qword_10015E790);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    v23 = sub_100007F38((uint64_t)v7, &qword_10015E790);
    v17 = MusicPlayer.Queue.Entry.endTime.getter(v23);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v17;
}

double sub_1000C92E0()
{
  double v0;
  double v1;
  char v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  BOOL v7;

  v0 = COERCE_DOUBLE(sub_1000C9044());
  v1 = 0.0;
  if ((v2 & 1) == 0)
  {
    v3 = v0;
    if (v0 > 0.0
      && ((~*(_QWORD *)&v0 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v0 & 0xFFFFFFFFFFFFFLL) == 0)
      && (sub_1000C9398() & 1) != 0)
    {
      type metadata accessor for SystemMusicPlayer(0);
      v4 = static SystemMusicPlayer.shared.getter();
      v5 = dispatch thunk of MusicPlayer.playbackTime.getter();
      swift_release(v4);
      v6 = v5 / v3;
      v7 = (COERCE_UNSIGNED_INT64(v5 / v3) & 0xFFFFFFFFFFFFFLL) != 0
        && (~COERCE__INT64(v5 / v3) & 0x7FF0000000000000) == 0;
      if (v6 >= 0.0 && !v7)
      {
        if (v6 <= 1.0)
          return v5 / v3;
        else
          return 1.0;
      }
    }
  }
  return v1;
}

uint64_t sub_1000C9398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD v39[3];
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for MusicPlayer.Queue.Entry(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015E790);
  __chkstk_darwin(v6);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015E798);
  __chkstk_darwin(v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemMusicPlayer(0);
  v12 = static SystemMusicPlayer.shared.getter();
  v13 = dispatch thunk of SystemMusicPlayer.queue.getter();
  v14 = swift_release(v12);
  dispatch thunk of MusicPlayer.Queue.currentEntry.getter(v14);
  v15 = swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v3 + 48))(v8, 1, v2, v15))
  {
    v16 = &qword_10015E790;
    v17 = (uint64_t)v8;
LABEL_5:
    sub_100007F38(v17, v16);
    v21 = 0;
    v22 = 0;
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  v18 = sub_100007F38((uint64_t)v8, &qword_10015E790);
  MusicPlayer.Queue.Entry.item.getter(v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v19 = type metadata accessor for MusicPlayer.Queue.Entry.Item(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v19) == 1)
  {
    v16 = &qword_10015E798;
    v17 = (uint64_t)v11;
    goto LABEL_5;
  }
  v21 = MusicPlayer.Queue.Entry.Item.id.getter();
  v22 = v37;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
LABEL_6:
  KeyPath = swift_getKeyPath(&unk_100110198);
  v39[0] = v1;
  v24 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, KeyPath, v24);
  swift_release(KeyPath);
  v25 = v1 + 24;
  swift_beginAccess(v25, v39, 0, 0);
  sub_1000345D4(v25, (uint64_t)v40);
  v26 = v41;
  if (!v41)
  {
    sub_100007F38((uint64_t)v40, &qword_1001597E0);
    if (!v22)
      goto LABEL_15;
LABEL_13:
    v36 = 0;
LABEL_19:
    swift_bridgeObjectRelease();
    return v36 & 1;
  }
  v27 = v42;
  v28 = sub_10001BF94(v40, v41);
  v29 = *(_QWORD *)(v26 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)v39 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v29 + 16))(v32, v30);
  sub_100007F38((uint64_t)v40, &qword_1001597E0);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 88))(v26, v27);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v26);
  if (v35)
  {
    if (v22)
    {
      if (v33 == v21 && v22 == v35)
      {
        swift_bridgeObjectRelease();
        v36 = 1;
      }
      else
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v21, v22, 0);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v36 = 0;
    }
    goto LABEL_19;
  }
  if (v22)
    goto LABEL_13;
LABEL_15:
  v36 = 1;
  return v36 & 1;
}

double sub_1000C972C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v1 = v0;
  v2 = sub_100007D50(&qword_10015E750);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_10015E758);
  v47 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CA41C();
  KeyPath = swift_getKeyPath(&unk_100110120);
  v9 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16AppleMusicPlayer___observationRegistrar;
  v54 = v0;
  v10 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, KeyPath, v10);
  swift_release(KeyPath);
  v11 = *(_QWORD *)(v0 + 64);
  if (v11)
  {
    swift_retain(*(_QWORD *)(v1 + 64));
    AnyCancellable.cancel()();
    swift_release(v11);
  }
  v12 = swift_getKeyPath(&unk_100110148);
  v54 = v1;
  v51 = v10;
  v52 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v12, v10);
  swift_release(v12);
  v13 = *(_QWORD *)(v1 + 72);
  if (v13)
  {
    swift_retain(*(_QWORD *)(v1 + 72));
    AnyCancellable.cancel()();
    swift_release(v13);
  }
  v50 = type metadata accessor for SystemMusicPlayer(0);
  v15 = static SystemMusicPlayer.shared.getter(v14);
  v16 = MusicPlayer.state.getter();
  v17 = swift_release(v15);
  v18 = dispatch thunk of MusicPlayer.State.objectWillChange.getter(v17);
  swift_release(v16);
  v54 = v18;
  v49 = (id)objc_opt_self(NSRunLoop);
  v53 = objc_msgSend(v49, "mainRunLoop");
  v19 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v48(v4, 1, 1, v19);
  v20 = sub_100007D50(&qword_10015E768);
  v46 = v20;
  v21 = sub_1000CAC40();
  v45 = v21;
  v22 = sub_10000F4E0(&qword_10015E778, &qword_10015E768, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v44 = v22;
  v43 = sub_100007428(&qword_10015E780, (uint64_t (*)(uint64_t))sub_1000CAC40, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  Publisher.receive<A>(on:options:)(&v53, v4, v20, v21, v22, v43);
  sub_100007F38((uint64_t)v4, &qword_10015E750);

  swift_release(v54);
  v23 = swift_allocObject(&unk_10014ED90, 24, 7);
  swift_weakInit(v23 + 16, v1);
  v24 = swift_allocObject(&unk_10014EDB8, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_1000CACA0;
  *(_QWORD *)(v24 + 24) = v23;
  v42 = sub_10000F4E0(&qword_10015E788, &qword_10015E758, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v25 = Publisher<>.sink(receiveValue:)(sub_1000CACA8, v24, v5, v42);
  v26 = swift_release(v24);
  v47 = *(_QWORD *)(v47 + 8);
  ((void (*)(char *, uint64_t, __n128))v47)(v7, v5, v26);
  v27 = swift_getKeyPath(&unk_100110120);
  __chkstk_darwin(v27);
  *(&v40 - 2) = v1;
  *(&v40 - 1) = v25;
  v54 = v1;
  v41 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v54, v27, sub_1000CACC8, &v40 - 4, (char *)&type metadata for () + 8, v51);
  swift_release(v27);
  v28 = swift_release(v25);
  v29 = static SystemMusicPlayer.shared.getter(v28);
  v30 = dispatch thunk of SystemMusicPlayer.queue.getter();
  v31 = swift_release(v29);
  v32 = dispatch thunk of MusicPlayer.Queue.objectWillChange.getter(v31);
  *(_QWORD *)&v33 = swift_release(v30).n128_u64[0];
  v54 = v32;
  v53 = objc_msgSend(v49, "mainRunLoop", v33);
  v48(v4, 1, 1, v19);
  Publisher.receive<A>(on:options:)(&v53, v4, v46, v45, v44, v43);
  sub_100007F38((uint64_t)v4, &qword_10015E750);

  swift_release(v54);
  v34 = swift_allocObject(&unk_10014ED90, 24, 7);
  swift_weakInit(v34 + 16, v1);
  v35 = swift_allocObject(&unk_10014EDE0, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_1000CACDC;
  *(_QWORD *)(v35 + 24) = v34;
  v36 = Publisher<>.sink(receiveValue:)(sub_1000CB208, v35, v5, v42);
  v37 = swift_release(v35);
  ((void (*)(char *, uint64_t, __n128))v47)(v7, v5, v37);
  v38 = swift_getKeyPath(&unk_100110148);
  __chkstk_darwin(v38);
  *(&v40 - 2) = v1;
  *(&v40 - 1) = v36;
  v54 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v54, v38, sub_1000CAD08, &v40 - 4, v41, v51);
  swift_release(v38);
  *(_QWORD *)&result = swift_release(v36).n128_u64[0];
  return result;
}

double sub_1000C9CA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[5];

  sub_10003BC30((uint64_t)a1, (uint64_t)v22);
  KeyPath = swift_getKeyPath(&unk_100110198);
  v19 = v1;
  v20 = v22;
  v21 = v1;
  v4 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_1000CB1E0, v18, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  sub_100007F38((uint64_t)v22, &qword_1001597E0);
  v5 = swift_getKeyPath(&unk_100110170);
  v16 = v1;
  v17 = 1;
  v22[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v22, v5, sub_1000CB1F4, &v15, (char *)&type metadata for () + 8, v4);
  swift_release(v5);
  type metadata accessor for SystemMusicPlayer(0);
  v6 = static SystemMusicPlayer.shared.getter();
  v7 = sub_100007D50(&qword_10015E7C8);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100109020;
  v9 = a1[3];
  v10 = a1[4];
  v11 = sub_10001BF94(a1, v9);
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v10 + 8);
  v12 = sub_10002BA68((_QWORD *)(v8 + 32));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v12, v11, v9);
  type metadata accessor for MusicPlayer.Queue(0);
  v13 = dispatch thunk of MusicPlayer.Queue.__allocating_init(arrayLiteral:)(v8);
  dispatch thunk of SystemMusicPlayer.queue.setter(v13);
  swift_release(v6);
  return sub_1000CAEBC();
}

void sub_1000C9E70()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if ((sub_1000C9398() & 1) != 0)
  {
    sub_1000CAEBC();
  }
  else
  {
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v0 = type metadata accessor for Logger(0);
    v1 = sub_100029E7C(v0, (uint64_t)qword_10016A5B0);
    oslog = Logger.logObject.getter(v1);
    v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Player asked to resume song but current song not in system player queue.", v3, 2u);
      swift_slowDealloc(v3, -1, -1);
    }

  }
}

void sub_1000C9F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if ((sub_1000C9398() & 1) != 0)
  {
    type metadata accessor for SystemMusicPlayer(0);
    v0 = static SystemMusicPlayer.shared.getter();
    dispatch thunk of MusicPlayer.pause()();
    swift_release(v0);
  }
  else
  {
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100029E7C(v1, (uint64_t)qword_10016A5B0);
    oslog = Logger.logObject.getter(v2);
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Failed to pause song. Current song not in System player..", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

  }
}

uint64_t sub_1000CA054()
{
  return swift_task_switch(sub_1000CA068, 0, 0);
}

uint64_t sub_1000CA068()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  type metadata accessor for SystemMusicPlayer(0);
  *(_QWORD *)(v0 + 56) = static SystemMusicPlayer.shared.getter();
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of MusicPlayer.play()
                         + async function pointer to dispatch thunk of MusicPlayer.play());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MusicPlayer.play() + 1));
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1000CA0D8;
  return v3();
}

uint64_t sub_1000CA0D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CA220;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 56));
    v4 = sub_1000CA144;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CA144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100029E7C(v1, (uint64_t)qword_10016A5B0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Song playback started.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CA220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for Logger(0);
  sub_100029E7C(v2, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 72);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_10003FCB4(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to play song with error %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 72));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000CA41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  int v10;
  uint64_t KeyPath;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for MusicPlayer.PlaybackStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000C9398() & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100110170);
    __chkstk_darwin(KeyPath);
    v12 = &v23 - 4;
    *(&v23 - 2) = v0;
    *((_BYTE *)&v23 - 8) = 0;
    v24 = v0;
    v13 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
    v14 = (char *)&type metadata for () + 8;
LABEL_6:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, KeyPath, sub_1000CB1F4, v12, v14, v13);
    swift_release(KeyPath);
    return;
  }
  type metadata accessor for SystemMusicPlayer(0);
  v6 = ((uint64_t (*)(void))static SystemMusicPlayer.shared.getter)();
  v7 = MusicPlayer.state.getter();
  v8 = swift_release(v6);
  dispatch thunk of MusicPlayer.State.playbackStatus.getter(v8);
  v9 = swift_release(v7);
  v10 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 88))(v5, v2, v9);
  if (v10 == enum case for MusicPlayer.PlaybackStatus.stopped(_:))
  {
    if (sub_1000C92E0() <= 0.0)
      return;
    KeyPath = swift_getKeyPath(&unk_100110170);
    __chkstk_darwin(KeyPath);
    v12 = &v23 - 4;
    *(&v23 - 2) = v1;
    *((_BYTE *)&v23 - 8) = 0;
    v24 = v1;
    v13 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
    v14 = (char *)&type metadata for () + 8;
    goto LABEL_6;
  }
  if (v10 == enum case for MusicPlayer.PlaybackStatus.playing(_:))
  {
    KeyPath = swift_getKeyPath(&unk_100110170);
    __chkstk_darwin(KeyPath);
    v12 = &v23 - 4;
    *(&v23 - 2) = v1;
    *((_BYTE *)&v23 - 8) = 2;
    v24 = v1;
    v13 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
    v14 = (char *)&type metadata for () + 8;
    goto LABEL_6;
  }
  if (v10 == enum case for MusicPlayer.PlaybackStatus.paused(_:)
    || v10 == enum case for MusicPlayer.PlaybackStatus.interrupted(_:))
  {
    v16 = swift_getKeyPath(&unk_100110170);
    __chkstk_darwin(v16);
    *(&v23 - 2) = v1;
    *((_BYTE *)&v23 - 8) = 3;
    v24 = v1;
    v17 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v16, sub_1000CB1F4, &v23 - 4, (char *)&type metadata for () + 8, v17);
    v18 = swift_release(v16);
    v19 = static SystemMusicPlayer.shared.getter(v18);
    v20 = dispatch thunk of MusicPlayer.playbackTime.getter();
    swift_release(v19);
    if (v20 == 0.0)
    {
      v21 = swift_getKeyPath(&unk_100110170);
      __chkstk_darwin(v21);
      *(&v23 - 2) = v1;
      *((_BYTE *)&v23 - 8) = 0;
      v24 = v1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v21, sub_1000CB1F4, &v23 - 4, (char *)&type metadata for () + 8, v17);
      swift_release(v21);
    }
  }
  else if (v10 != enum case for MusicPlayer.PlaybackStatus.seekingForward(_:)
         && v10 != enum case for MusicPlayer.PlaybackStatus.seekingBackward(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

double sub_1000CA864(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1000CA41C();
    *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  }
  return result;
}

double sub_1000CA8B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  char v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    if ((sub_1000C9398() & 1) != 0)
    {
      *(_QWORD *)&result = swift_release(v4).n128_u64[0];
    }
    else
    {
      KeyPath = swift_getKeyPath(&unk_100110170);
      __chkstk_darwin(KeyPath);
      v7[2] = v4;
      v8 = 0;
      v9 = v4;
      v6 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000CAD24, v7, (char *)&type metadata for () + 8, v6);
      swift_release(v4);
      *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_1000CA9CC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100007F38((uint64_t)(v0 + 3), &qword_1001597E0);
  swift_release(v0[8]);
  swift_release(v0[9]);
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp16AppleMusicPlayer___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000CAA3C()
{
  return type metadata accessor for AppleMusicPlayer(0);
}

uint64_t type metadata accessor for AppleMusicPlayer(uint64_t a1)
{
  uint64_t result;

  result = qword_10015E6A8;
  if (!qword_10015E6A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleMusicPlayer);
  return result;
}

uint64_t sub_1000CAA80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1001100A8;
  v4[1] = &unk_1001100C0;
  v4[2] = &unk_1001100D8;
  v4[3] = &unk_1001100D8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000CAB0C()
{
  return sub_1000C92E0();
}

uint64_t sub_1000CAB2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_100110170);
  v5 = v1;
  v3 = sub_100007428(&qword_10015E760, type metadata accessor for AppleMusicPlayer, (uint64_t)&unk_1001100F0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v1 + 16);
}

double sub_1000CABB0(_QWORD *a1)
{
  return sub_1000C9CA8(a1);
}

void sub_1000CABD0()
{
  sub_1000C9E70();
}

void sub_1000CABF0()
{
  sub_1000C9F54();
}

double sub_1000CAC10()
{
  return sub_1000C972C();
}

unint64_t sub_1000CAC40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E770;
  if (!qword_10015E770)
  {
    v1 = objc_opt_self(NSRunLoop);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015E770);
  }
  return result;
}

uint64_t sub_1000CAC7C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1000CACA0()
{
  uint64_t v0;

  return sub_1000CA864(v0);
}

uint64_t sub_1000CACA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000CACC8()
{
  return sub_1000CADD4();
}

double sub_1000CACDC()
{
  uint64_t v0;

  return sub_1000CA8B8(v0);
}

uint64_t sub_1000CACE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CAD08()
{
  return sub_1000CAD9C();
}

void sub_1000CAD24()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000CAD3C()
{
  uint64_t v0;

  return sub_1000C8C44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000CAD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_1001597E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CAD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 72) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_1000CADD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_1000CAE0C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000CAE70;
  return v6(a1);
}

uint64_t sub_1000CAE70()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_1000CAEBC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  double result;
  _QWORD v19[4];

  v0 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject(&unk_10014EE08, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100007F38((uint64_t)v2, &qword_10015D460);
    v7 = 0;
    v8 = 0;
    v9 = 7168;
  }
  else
  {
    v10 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v9 = v10 | 0x1C00;
    v11 = *v6;
    if (*v6)
    {
      v12 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType(*v6);
      swift_unknownObjectRetain(v11);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
      v8 = v14;
      swift_unknownObjectRelease(v11);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  v15 = swift_allocObject(&unk_10014EE30, 32, 7);
  *(_QWORD *)(v15 + 16) = &unk_10015E7A8;
  *(_QWORD *)(v15 + 24) = v5;
  if (v8 | v7)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v7;
    v19[3] = v8;
  }
  else
  {
    v16 = 0;
  }
  v17 = swift_task_create(v9, v16, (char *)&type metadata for () + 8, &unk_10015E7B8, v15);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_1000CB078()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CB09C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015E7A4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000FAC0;
  return swift_task_switch(sub_1000CA068, 0, 0);
}

uint64_t sub_1000CB0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10015E7B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003D1D4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10015E7B0 + dword_10015E7B0))(a1, v4);
}

uint64_t sub_1000CB164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10015E7B4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10000FAC0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10015E7B0 + dword_10015E7B0))(a1, v4);
}

uint64_t sub_1000CB1E0()
{
  return sub_1000CAD3C();
}

void sub_1000CB1F4()
{
  sub_1000CAD24();
}

uint64_t *assignWithCopy for PromotionalAssetsEntryView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for PromotionalAssetsEntryView()
{
  return &type metadata for PromotionalAssetsEntryView;
}

uint64_t sub_1000CB278(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001191F4, 1);
}

uint64_t sub_1000CB288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (**v58)(double *@<X8>, double@<D2>, double@<D3>);
  uint64_t v59;
  uint64_t v60;
  void (**v61)(uint64_t *);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v75 = a2;
  v80 = a3;
  v4 = type metadata accessor for CoordinateSpace(0);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  __chkstk_darwin(v4);
  v69 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PhotoEntryView(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_100007D50(&qword_10015E7E8);
  __chkstk_darwin(v70);
  v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100007D50(&qword_10015E7F0);
  __chkstk_darwin(v79);
  v71 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v74 = (uint64_t)&v66 - v12;
  v76 = sub_100007D50(&qword_10015E7F8);
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for DefaultEntryView(0);
  __chkstk_darwin(v77);
  v15 = (uint64_t *)((char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v18 = (char *)&v66 - v17;
  v19 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v66 - v23;
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a1;
  v82 = v75;
  v29 = sub_100007D50(&qword_10015E800);
  State.wrappedValue.getter(&v83, v29);
  v30 = v83;
  sub_100062594((uint64_t)v24);
  v31 = swift_release(v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v26 + 48))(v24, 1, v25, v31) == 1)
  {
    sub_100007F38((uint64_t)v24, &qword_100158658);
    *v15 = swift_getKeyPath(&unk_100110270);
    v32 = sub_100007D50(&qword_100158AC0);
    swift_storeEnumTagMultiPayload(v15, v32, 0);
    v33 = v77;
    v34 = (char *)v15 + *(int *)(v77 + 20);
    *(_QWORD *)v34 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100114370);
    *((_QWORD *)v34 + 1) = v35;
    v34[16] = v36 & 1;
    *((_QWORD *)v34 + 3) = v37;
    v38 = (char *)v15 + *(int *)(v33 + 24);
    *(_QWORD *)v38 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100114F70);
    *((_QWORD *)v38 + 1) = v39;
    v38[16] = v40 & 1;
    *((_QWORD *)v38 + 3) = v41;
    sub_10003C9D4((uint64_t)v15, (uint64_t)v18, type metadata accessor for DefaultEntryView);
    v42 = v78;
    sub_10001BFB8((uint64_t)v18, v78, type metadata accessor for DefaultEntryView);
    swift_storeEnumTagMultiPayload(v42, v76, 1);
    v43 = sub_1000CBB78();
    v44 = sub_100007428(&qword_10015E840, type metadata accessor for DefaultEntryView, (uint64_t)&unk_1001103CC);
    _ConditionalContent<>.init(storage:)(v42, v79, v33, v43, v44);
    return sub_10001E24C((uint64_t)v18, type metadata accessor for DefaultEntryView);
  }
  else
  {
    v46 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v67 = v28;
    v46(v28, v24, v25);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v28, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v21, 0, 1, v25);
    v47 = type metadata accessor for PromotionalAssetsPhotoEntryViewModel(0);
    swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
    v48 = sub_1000EDA84((uint64_t)v21);
    v83 = v48;
    swift_retain(v48);
    State.init(wrappedValue:)(&v83, v47);
    v49 = v82;
    *v8 = v81;
    v8[1] = v49;
    v50 = (_QWORD *)((char *)v8 + *(int *)(v6 + 20));
    *v50 = swift_getKeyPath(&unk_100110270);
    v51 = sub_100007D50(&qword_100158AC0);
    swift_storeEnumTagMultiPayload(v50, v51, 0);
    v53 = v72;
    v52 = v73;
    v54 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v69, enum case for CoordinateSpace.local(_:), v73);
    v55 = (uint64_t)v68;
    v56 = &v68[*(int *)(v70 + 36)];
    v57 = sub_100007D50(&qword_10015E828);
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v56[*(int *)(v57 + 36)], v54, v52);
    *(_QWORD *)v56 = &type metadata for PhotoEntryViewSizePreferenceKey;
    v58 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v56[*(int *)(v57 + 40)];
    *v58 = sub_10001F8A8;
    v58[1] = 0;
    sub_10001BFB8((uint64_t)v8, v55, type metadata accessor for PhotoEntryView);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
    sub_10001E24C((uint64_t)v8, type metadata accessor for PhotoEntryView);
    v59 = v71;
    sub_100007E78(v55, v71, &qword_10015E7E8);
    v60 = v79;
    v61 = (void (**)(uint64_t *))(v59 + *(int *)(v79 + 36));
    *v61 = sub_1000CF630;
    v61[1] = (void (*)(uint64_t *))v48;
    swift_retain(v48);
    sub_100007F38(v55, &qword_10015E7E8);
    v62 = v74;
    sub_100018EB4(v59, v74, &qword_10015E7F0);
    v63 = v78;
    sub_100007E78(v62, v78, &qword_10015E7F0);
    swift_storeEnumTagMultiPayload(v63, v76, 0);
    v64 = sub_1000CBB78();
    v65 = sub_100007428(&qword_10015E840, type metadata accessor for DefaultEntryView, (uint64_t)&unk_1001103CC);
    _ConditionalContent<>.init(storage:)(v63, v60, v77, v64, v65);
    swift_release(v48);
    sub_100007F38(v62, &qword_10015E7F0);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v67, v25);
  }
}

void sub_1000CB8E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  v4 = a1[1];
  KeyPath = swift_getKeyPath(&unk_1001102A0);
  v10 = a2;
  v11 = v3;
  v12 = a2;
  v6 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_1000CF640, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(&unk_1001102C8);
  v8[2] = a2;
  v8[3] = v4;
  v12 = a2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, v7, sub_1000CF664, v8, (char *)&type metadata for () + 8, v6);
  swift_release(v7);
}

uint64_t sub_1000CB9EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v19;

  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  v5 = (_OWORD *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100007D50(&qword_10015E7D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CB288(*v1, v1[1], (uint64_t)v8);
  v9 = (char *)v5 + *(int *)(v3 + 20);
  v10 = enum case for RoundedCornerStyle.continuous(_:);
  v11 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  __asm { FMOV            V0.2D, #16.0 }
  *v5 = _Q0;
  v17 = a1 + *(int *)(sub_100007D50(&qword_10015E7D8) + 36);
  sub_10001BFB8((uint64_t)v5, v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_BYTE *)(v17 + *(int *)(sub_100007D50(&qword_10015E7E0) + 36)) = 0;
  sub_100007E78((uint64_t)v8, a1, &qword_10015E7D0);
  sub_10001E24C((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_100007F38((uint64_t)v8, &qword_10015E7D0);
}

uint64_t type metadata accessor for PhotoEntryView(uint64_t a1)
{
  return sub_100025D84(a1, qword_10015E940, (uint64_t)&nominal type descriptor for PhotoEntryView);
}

uint64_t type metadata accessor for DefaultEntryView(uint64_t a1)
{
  return sub_100025D84(a1, qword_10015E8A8, (uint64_t)&nominal type descriptor for DefaultEntryView);
}

unint64_t sub_1000CBB78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E808;
  if (!qword_10015E808)
  {
    v1 = sub_100007D00(&qword_10015E7F0);
    sub_1000CBBFC();
    sub_10000F4E0(&qword_10015E830, &qword_10015E838, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E808);
  }
  return result;
}

unint64_t sub_1000CBBFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E810;
  if (!qword_10015E810)
  {
    v1 = sub_100007D00(&qword_10015E7E8);
    sub_100007428(&qword_10015E818, type metadata accessor for PhotoEntryView, (uint64_t)&unk_10011041C);
    sub_10000F4E0(&qword_10015E820, &qword_10015E828, (uint64_t)&unk_100108C38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E810);
  }
  return result;
}

uint64_t sub_1000CBC98@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = (uint64_t)v1;
  v72 = a1;
  v71 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v71);
  v70 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PhotoEntryView(0);
  v64 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100007D50(&qword_10015E9A8);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015E9B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100007D50(&qword_10015E9B8);
  __chkstk_darwin(v63);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100007D50(&qword_10015E9C0);
  __chkstk_darwin(v67);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100007D50(&qword_10015E9C8);
  __chkstk_darwin(v69);
  v65 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v21 = sub_100007D50(&qword_10015E9D0);
  sub_1000CC1D4(v1, (uint64_t)&v14[*(int *)(v21 + 44)]);
  v22 = v1[1];
  v73 = *v1;
  v74 = v22;
  v23 = sub_100007D50(&qword_10015E9D8);
  State.wrappedValue.getter(&v75, v23);
  v24 = v75;
  sub_100007E78(v75 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL, (uint64_t)v9, &qword_100158658);
  swift_release(v24);
  v26 = static Animation.easeInOut.getter(v25);
  v27 = Transaction.init(animation:)(v26);
  sub_10001BFB8(v2, (uint64_t)v6, type metadata accessor for PhotoEntryView);
  v28 = *(unsigned __int8 *)(v64 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(&unk_10014EF40, v29 + v5, v28 | 7);
  sub_10003C9D4((uint64_t)v6, v30 + v29, type metadata accessor for PhotoEntryView);
  v31 = sub_100007D50(&qword_10015E9E0);
  v32 = sub_1000D0678();
  v33 = AsyncImage.init(url:scale:transaction:content:)(v9, v27, sub_1000D062C, v30, v31, v32, 1.0);
  v34 = static Alignment.center.getter(v33);
  v36 = v35;
  v37 = &v16[*(int *)(v63 + 36)];
  v38 = v66;
  v39 = v68;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v37, v11, v68);
  v40 = (uint64_t *)&v37[*(int *)(sub_100007D50(&qword_10015EA60) + 36)];
  *v40 = v34;
  v40[1] = v36;
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_10015E9B0);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
  sub_100007F38((uint64_t)v14, &qword_10015E9B0);
  v41 = v70;
  v42 = &v70[*(int *)(v71 + 20)];
  v43 = enum case for RoundedCornerStyle.continuous(_:);
  v44 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v42, v43, v44);
  __asm { FMOV            V0.2D, #14.0 }
  *v41 = _Q0;
  v50 = (uint64_t)&v18[*(int *)(v67 + 36)];
  sub_10001BFB8((uint64_t)v41, v50, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v50 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v16, (uint64_t)v18, &qword_10015E9B8);
  sub_10001E24C((uint64_t)v41, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v51 = sub_100007F38((uint64_t)v16, &qword_10015E9B8);
  v52 = static Color.black.getter(v51);
  v53 = Color.opacity(_:)(0.08);
  swift_release(v52);
  v54 = v65;
  sub_100007E78((uint64_t)v18, v65, &qword_10015E9C0);
  v55 = v54 + *(int *)(v69 + 36);
  *(_QWORD *)v55 = v53;
  *(_OWORD *)(v55 + 8) = xmmword_1001101D0;
  *(_QWORD *)(v55 + 24) = 0x4010000000000000;
  v56 = sub_100007F38((uint64_t)v18, &qword_10015E9C0);
  v57 = static Color.black.getter(v56);
  v58 = Color.opacity(_:)(0.05);
  swift_release(v57);
  v59 = v72;
  sub_100007E78(v54, v72, &qword_10015E9C8);
  v60 = v59 + *(int *)(sub_100007D50(&qword_10015EA68) + 36);
  *(_QWORD *)v60 = v58;
  *(_OWORD *)(v60 + 8) = xmmword_1001101E0;
  *(_QWORD *)(v60 + 24) = 0x4000000000000000;
  return sub_100007F38(v54, &qword_10015E9C8);
}

uint64_t sub_1000CC1D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v89 = a2;
  v90 = a1;
  v2 = type metadata accessor for PhotoEntryView(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64);
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v3;
  __chkstk_darwin(v2);
  v82 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v5);
  v81 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015EA80);
  v87 = *(_QWORD *)(v7 - 8);
  v88 = v7;
  __chkstk_darwin(v7);
  v86 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v83 = (char *)&v79 - v11;
  v12 = type metadata accessor for BlendMode(0, v10);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015EA88);
  __chkstk_darwin(v16);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_10015A708);
  __chkstk_darwin(v19);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100007D50(&qword_10015A710);
  __chkstk_darwin(v22);
  v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100007D50(&qword_10015EA90);
  __chkstk_darwin(v25);
  v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100007D50(&qword_10015EA98);
  __chkstk_darwin(v80);
  v29 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v79 = (uint64_t)&v79 - v31;
  *(_QWORD *)v18 = static HorizontalAlignment.leading.getter(v32);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 0;
  v33 = sub_100007D50(&qword_10015EAA0);
  sub_1000CC7CC(v90, (uint64_t)&v18[*(int *)(v33 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for BlendMode.plusLighter(_:), v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(&v21[*(int *)(v19 + 36)], v15, v12);
  sub_100007E78((uint64_t)v18, (uint64_t)v21, &qword_10015EA88);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v34 = sub_100007F38((uint64_t)v18, &qword_10015EA88);
  v35 = static Alignment.leading.getter(v34);
  sub_100044364(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v24, 0.0, 1, 0.0, 1, v35, v36);
  v37 = sub_100007F38((uint64_t)v21, &qword_10015A708);
  LOBYTE(v21) = static Edge.Set.vertical.getter(v37);
  v38 = EdgeInsets.init(_all:)(23.0);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_100007E78((uint64_t)v24, (uint64_t)v27, &qword_10015A710);
  v45 = &v27[*(int *)(v25 + 36)];
  *v45 = (char)v21;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_100007F38((uint64_t)v24, &qword_10015A710);
  LOBYTE(v21) = static Edge.Set.leading.getter(v46);
  v47 = EdgeInsets.init(_all:)(14.0);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  sub_100007E78((uint64_t)v27, (uint64_t)v29, &qword_10015EA90);
  v54 = &v29[*(int *)(v80 + 36)];
  *v54 = (char)v21;
  *((double *)v54 + 1) = v47;
  *((_QWORD *)v54 + 2) = v49;
  *((_QWORD *)v54 + 3) = v51;
  *((_QWORD *)v54 + 4) = v53;
  v54[40] = 0;
  sub_100007F38((uint64_t)v27, &qword_10015EA90);
  v55 = v79;
  sub_100018EB4((uint64_t)v29, v79, &qword_10015EA98);
  v56 = v90;
  v57 = v90[1];
  v91 = *v90;
  v92 = v57;
  v58 = sub_100007D50(&qword_10015E9D8);
  State.wrappedValue.getter(&v93, v58);
  v59 = v93;
  v60 = v81;
  sub_100007E78(v93 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL, v81, &qword_100158658);
  swift_release(v59);
  v62 = static Animation.easeInOut.getter(v61);
  v63 = Transaction.init(animation:)(v62);
  v64 = v82;
  sub_10001BFB8((uint64_t)v56, v82, type metadata accessor for PhotoEntryView);
  v65 = *(unsigned __int8 *)(v84 + 80);
  v66 = (v65 + 16) & ~v65;
  v67 = swift_allocObject(&unk_10014EF68, v66 + v85, v65 | 7);
  sub_10003C9D4(v64, v67 + v66, type metadata accessor for PhotoEntryView);
  v68 = sub_100007D50(&qword_10015EAA8);
  v69 = sub_1000D0BDC();
  v70 = v83;
  AsyncImage.init(url:scale:transaction:content:)(v60, v63, sub_1000D0B90, v67, v68, v69, 1.0);
  sub_100007E78(v55, (uint64_t)v29, &qword_10015EA98);
  v71 = v86;
  v72 = v87;
  v73 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
  v74 = v88;
  v73(v86, v70, v88);
  v75 = v89;
  sub_100007E78((uint64_t)v29, v89, &qword_10015EA98);
  v76 = sub_100007D50(&qword_10015EAE8);
  v73((char *)(v75 + *(int *)(v76 + 48)), v71, v74);
  v77 = *(void (**)(char *, uint64_t))(v72 + 8);
  v77(v70, v74);
  sub_100007F38(v55, &qword_10015EA98);
  v77(v71, v74);
  return sub_100007F38((uint64_t)v29, &qword_10015EA98);
}

uint64_t sub_1000CC7CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  _BYTE v161[7];
  _BYTE v162[7];
  char v163;
  _BYTE v164[7];
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _BYTE v173[25];

  v158 = a2;
  v157 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v157);
  v155 = (uint64_t)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v153);
  v152 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100007D50(&qword_10015EAF8);
  __chkstk_darwin(v154);
  v6 = (_OWORD *)((char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v156 = (uint64_t)&v138 - v8;
  v9 = sub_100007D50(&qword_10015D4F8);
  __chkstk_darwin(v9);
  v11 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015DEE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v138 - v16;
  v150 = (uint64_t)&v138 - v16;
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v11 + 1) = 0x4010000000000000;
  v11[16] = 0;
  v19 = sub_100007D50(&qword_10015D510);
  v20 = sub_1000CD1A0(a1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.bottom.getter(v20);
  v22 = EdgeInsets.init(_all:)(4.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007E78((uint64_t)v11, (uint64_t)v14, &qword_10015D4F8);
  v29 = &v14[*(int *)(v12 + 36)];
  v151 = v14;
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_100007F38((uint64_t)v11, &qword_10015D4F8);
  sub_100018EB4((uint64_t)v14, (uint64_t)v17, &qword_10015DEE8);
  v140 = *a1;
  v139 = a1[1];
  *(_QWORD *)&v166 = v140;
  *((_QWORD *)&v166 + 1) = v139;
  v138 = sub_100007D50(&qword_10015E9D8);
  State.wrappedValue.getter(&v159, v138);
  v30 = v159;
  v31 = *(_QWORD *)(v159 + 48);
  v32 = *(_QWORD *)(v159 + 56);
  v33 = *(unsigned __int8 *)(v159 + 64);
  v34 = *(_QWORD *)(v159 + 72);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_release(v30);
  v35 = Text.init(_:tableName:bundle:comment:)(v31, v32, v33, v34, 0, 0, 0, 0, 0, 256);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v42 = static Font.footnote.getter(v35);
  static Font.Weight.regular.getter();
  v43 = Font.weight(_:)(v42);
  swift_release(v42);
  v44 = Text.font(_:)(v43, v35, v37, v41, v39);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_release(v43);
  sub_100007D90(v35, v37, v41);
  v51 = swift_bridgeObjectRelease();
  v52 = static Color.white.getter(v51);
  v53 = Color.opacity(_:)(0.6);
  swift_release(v52);
  *(_QWORD *)&v166 = v53;
  v149 = Text.foregroundStyle<A>(_:)(&v166, v44, v46, v48 & 1, v50, &type metadata for Color, &protocol witness table for Color);
  v147 = v54;
  v148 = v55;
  v146 = v56 & 1;
  sub_100007D90(v44, v46, v48 & 1);
  swift_release(v53);
  v57 = swift_bridgeObjectRelease();
  v145 = static Edge.Set.bottom.getter(v57);
  v144 = EdgeInsets.init(_all:)(12.0);
  v143 = v58;
  v142 = v59;
  v141 = v60;
  *(_QWORD *)&v166 = v140;
  *((_QWORD *)&v166 + 1) = v139;
  State.wrappedValue.getter(&v159, v138);
  v61 = v159;
  v62 = *(_QWORD *)(v159 + 80);
  v63 = *(_QWORD *)(v159 + 88);
  v64 = *(unsigned __int8 *)(v159 + 96);
  v65 = *(_QWORD *)(v159 + 104);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v65);
  swift_release(v61);
  LOWORD(v137) = 256;
  v66 = Text.init(_:tableName:bundle:comment:)(v62, v63, v64, v65, 0, 0, 0, 0, 0, v137);
  v68 = v67;
  v70 = v69;
  v72 = v71 & 1;
  v73 = static Font.subheadline.getter(v66);
  static Font.Weight.regular.getter();
  v74 = Font.weight(_:)(v73);
  swift_release(v73);
  v75 = Text.font(_:)(v74, v66, v68, v72, v70);
  v77 = v76;
  LOBYTE(v39) = v78;
  v80 = v79;
  swift_release(v74);
  v81 = v39 & 1;
  sub_100007D90(v66, v68, v72);
  v82 = swift_bridgeObjectRelease();
  v83 = static Color.white.getter(v82);
  *(_QWORD *)&v166 = v83;
  v84 = Text.foregroundStyle<A>(_:)(&v166, v75, v77, v81, v80, &type metadata for Color, &protocol witness table for Color);
  v86 = v85;
  LOBYTE(v72) = v87;
  v89 = v88;
  sub_100007D90(v75, v77, v81);
  swift_release(v83);
  v90 = swift_bridgeObjectRelease();
  LOBYTE(v77) = static Edge.Set.horizontal.getter(v90);
  v91 = EdgeInsets.init(_all:)(12.0);
  v93 = v92;
  v95 = v94;
  v97 = v96;
  LOBYTE(v81) = static Edge.Set.vertical.getter(v98);
  v99 = EdgeInsets.init(_all:)(4.0);
  v101 = v100;
  v103 = v102;
  v105 = v104;
  v165 = v72 & 1;
  v163 = 0;
  v160 = 0;
  v107 = static Color.white.getter(v106);
  v108 = Color.opacity(_:)(0.09);
  swift_release(v107);
  v110 = static Edge.Set.all.getter(v109);
  *(_QWORD *)&v166 = v84;
  *((_QWORD *)&v166 + 1) = v86;
  LOBYTE(v167) = v165;
  *(_DWORD *)((char *)&v167 + 1) = v159;
  DWORD1(v167) = *(_DWORD *)((char *)&v159 + 3);
  *((_QWORD *)&v167 + 1) = v89;
  LOBYTE(v168) = v77;
  *(_DWORD *)((char *)&v168 + 1) = *(_DWORD *)v164;
  DWORD1(v168) = *(_DWORD *)&v164[3];
  *((double *)&v168 + 1) = v91;
  *(_QWORD *)&v169 = v93;
  *((_QWORD *)&v169 + 1) = v95;
  *(_QWORD *)&v170 = v97;
  BYTE8(v170) = v163;
  HIDWORD(v170) = *(_DWORD *)&v162[3];
  *(_DWORD *)((char *)&v170 + 9) = *(_DWORD *)v162;
  LOBYTE(v171) = v81;
  DWORD1(v171) = *(_DWORD *)&v161[3];
  *(_DWORD *)((char *)&v171 + 1) = *(_DWORD *)v161;
  *((double *)&v171 + 1) = v99;
  *(_QWORD *)&v172 = v101;
  *((_QWORD *)&v172 + 1) = v103;
  *(_QWORD *)v173 = v105;
  v173[8] = v160;
  *(_QWORD *)&v173[16] = v108;
  v173[24] = v110;
  v111 = v152;
  v112 = &v152[*(int *)(v153 + 20)];
  v113 = enum case for RoundedCornerStyle.continuous(_:);
  v114 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 104))(v112, v113, v114);
  __asm { FMOV            V0.2D, #16.0 }
  *v111 = _Q0;
  v120 = v155;
  sub_10001BFB8((uint64_t)v111, v155, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v120 + *(int *)(v157 + 36)) = 256;
  sub_100007E78(v120, (uint64_t)v6 + *(int *)(v154 + 36), &qword_100158640);
  v121 = *(_OWORD *)v173;
  v6[6] = v172;
  v6[7] = v121;
  *(_OWORD *)((char *)v6 + 121) = *(_OWORD *)&v173[9];
  v122 = v169;
  v6[2] = v168;
  v6[3] = v122;
  v123 = v171;
  v6[4] = v170;
  v6[5] = v123;
  v124 = v167;
  *v6 = v166;
  v6[1] = v124;
  sub_1000D0DB8((uint64_t)&v166);
  sub_100007F38(v120, &qword_100158640);
  sub_10001E24C((uint64_t)v111, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_1000D0E08((uint64_t)&v166);
  v125 = v156;
  sub_100018EB4((uint64_t)v6, v156, &qword_10015EAF8);
  v126 = v150;
  v127 = (uint64_t)v151;
  sub_100007E78(v150, (uint64_t)v151, &qword_10015DEE8);
  sub_100007E78(v125, (uint64_t)v6, &qword_10015EAF8);
  v128 = v158;
  sub_100007E78(v127, v158, &qword_10015DEE8);
  v129 = sub_100007D50(&qword_10015EB00);
  v130 = v128 + *(int *)(v129 + 48);
  v131 = v149;
  v132 = v147;
  *(_QWORD *)v130 = v149;
  *(_QWORD *)(v130 + 8) = v132;
  LOBYTE(v86) = v146;
  *(_BYTE *)(v130 + 16) = v146;
  v133 = v148;
  *(_QWORD *)(v130 + 24) = v148;
  *(_BYTE *)(v130 + 32) = v145;
  v134 = v143;
  *(double *)(v130 + 40) = v144;
  *(_QWORD *)(v130 + 48) = v134;
  v135 = v141;
  *(_QWORD *)(v130 + 56) = v142;
  *(_QWORD *)(v130 + 64) = v135;
  *(_BYTE *)(v130 + 72) = 0;
  sub_100007E78((uint64_t)v6, v128 + *(int *)(v129 + 64), &qword_10015EAF8);
  sub_10000F844(v131, v132, v86);
  swift_bridgeObjectRetain(v133);
  sub_100007F38(v125, &qword_10015EAF8);
  sub_100007F38(v126, &qword_10015DEE8);
  sub_100007F38((uint64_t)v6, &qword_10015EAF8);
  sub_100007D90(v131, v132, v86);
  swift_bridgeObjectRelease();
  return sub_100007F38(v127, &qword_10015DEE8);
}

uint64_t sub_1000CD1A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  __int128 v62;

  v50 = a2;
  v3 = sub_100007D50(&qword_10015D528);
  __chkstk_darwin(v3);
  v49 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - v6;
  v8 = Image.init(_:bundle:)(0xD000000000000020, 0x8000000100114FA0, 0);
  v9 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v58, 0x4032000000000000, 0, 0x4031000000000000, 0, v9, v10);
  v52 = v8;
  v53 = v58;
  v54 = v59;
  v55 = v60;
  v56 = v61;
  v57 = v62;
  v11 = sub_100007D50(&qword_10015D530);
  v12 = sub_1000D0E58((unint64_t *)&qword_10015D538, &qword_10015D530);
  View.accessibilityHidden(_:)(1, v11, v12);
  swift_release(v8);
  v13 = a1[1];
  v52 = *a1;
  v53 = v13;
  v14 = sub_100007D50(&qword_10015E9D8);
  State.wrappedValue.getter(&v51, v14);
  v15 = v51;
  v16 = *(_QWORD *)(v51 + 16);
  v17 = *(_QWORD *)(v51 + 24);
  v18 = *(unsigned __int8 *)(v51 + 32);
  v19 = *(_QWORD *)(v51 + 40);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_release(v15);
  v20 = Text.init(_:tableName:bundle:comment:)(v16, v17, v18, v19, 0, 0, 0, 0, 0, 256);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Font.subheadline.getter(v20);
  static Font.Weight.semibold.getter();
  v28 = Font.weight(_:)(v27);
  swift_release(v27);
  v29 = Text.font(_:)(v28, v20, v22, v26, v24);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v28);
  v36 = v33 & 1;
  sub_100007D90(v20, v22, v26);
  v37 = swift_bridgeObjectRelease();
  v38 = static Color.white.getter(v37);
  v52 = v38;
  v39 = Text.foregroundStyle<A>(_:)(&v52, v29, v31, v36, v35, &type metadata for Color, &protocol witness table for Color);
  v41 = v40;
  v43 = v42;
  LOBYTE(v28) = v44 & 1;
  sub_100007D90(v29, v31, v36);
  swift_release(v38);
  swift_bridgeObjectRelease();
  v45 = v49;
  sub_100007E78((uint64_t)v7, v49, &qword_10015D528);
  v46 = v50;
  sub_100007E78(v45, v50, &qword_10015D528);
  v47 = v46 + *(int *)(sub_100007D50(&qword_10015D540) + 48);
  *(_QWORD *)v47 = v39;
  *(_QWORD *)(v47 + 8) = v41;
  *(_BYTE *)(v47 + 16) = v28;
  *(_QWORD *)(v47 + 24) = v43;
  sub_10000F844(v39, v41, v28);
  swift_bridgeObjectRetain(v43);
  sub_100007F38((uint64_t)v7, &qword_10015D528);
  sub_100007D90(v39, v41, v28);
  swift_bridgeObjectRelease();
  return sub_100007F38(v45, &qword_10015D528);
}

double sub_1000CD4F0@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  double result;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  _BYTE v68[7];
  char v69;
  _BYTE v70[7];
  char v71;
  _BYTE v72[7];
  char v73;
  _BYTE v74[7];
  char v75;
  int v76;
  __int16 v77;
  char v78;
  uint64_t v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[40];
  _OWORD v88[9];
  _OWORD v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[2];
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[3];

  v67 = a3;
  v5 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AsyncImagePhase(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v11);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v10 + 88))(v13, v9) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
    v66 = *v13;
    v14 = v66;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
    v65 = Image.resizable(capInsets:resizingMode:)(v8, v14, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = a2[1];
    *(_QWORD *)&v115 = *a2;
    *((_QWORD *)&v115 + 1) = v15;
    v16 = v115;
    v58 = v115;
    v17 = sub_100007D50(&qword_10015E9D8);
    State.wrappedValue.getter(&v90, v17);
    v18 = v90;
    KeyPath = swift_getKeyPath(&unk_1001102C8);
    *(_QWORD *)&v115 = v18;
    v20 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, KeyPath, v20);
    swift_release(KeyPath);
    v21 = *(double *)(v18 + 120);
    swift_release(v18);
    v22 = v21 * 1.5;
    *(_QWORD *)&v115 = v16;
    *((_QWORD *)&v115 + 1) = v15;
    State.wrappedValue.getter(&v90, v17);
    v23 = v90;
    v24 = swift_getKeyPath(&unk_1001102C8);
    *(_QWORD *)&v115 = v23;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, v24, v20);
    swift_release(v24);
    v25 = *(double *)(v23 + 120);
    swift_release(v23);
    v27 = static Alignment.center.getter(v26);
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v100, *(_QWORD *)&v22, 0, v25 * 1.5, 0, v27, v28);
    v61 = v100;
    v62 = v102;
    v59 = v103;
    v60 = v101;
    v63 = v105;
    v64 = v104;
    v29 = v58;
    *(_QWORD *)&v115 = v58;
    *((_QWORD *)&v115 + 1) = v15;
    State.wrappedValue.getter(&v90, v17);
    v30 = v90;
    v31 = swift_getKeyPath(&unk_1001102C8);
    *(_QWORD *)&v115 = v30;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, v31, v20);
    swift_release(v31);
    v32 = *(_QWORD *)(v30 + 120);
    swift_release(v30);
    *(_QWORD *)&v115 = v29;
    *((_QWORD *)&v115 + 1) = v15;
    State.wrappedValue.getter(&v90, v17);
    v33 = v90;
    v34 = swift_getKeyPath(&unk_1001102C8);
    *(_QWORD *)&v115 = v33;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v115, v34, v20);
    swift_release(v34);
    v35 = *(_QWORD *)(v33 + 120);
    swift_release(v33);
    v37 = static Alignment.center.getter(v36);
    _FrameLayout.init(width:height:alignment:)(&v106, v32, 0, v35, 0, v37, v38);
    v39 = v106;
    v40 = v108;
    v42 = v110;
    v41 = v111;
    v78 = 1;
    v75 = v60;
    v73 = v59;
    v71 = v107;
    v69 = v109;
    v43 = sub_100007D50(&qword_100159140);
    v44 = swift_allocObject(v43, 48, 7);
    *(_OWORD *)(v44 + 16) = xmmword_100108810;
    v45 = static Color.clear.getter(v44);
    *(_QWORD *)(v44 + 32) = v45;
    *(_QWORD *)(v44 + 40) = static Color.black.getter(v45);
    *(_QWORD *)&v115 = v44;
    specialized Array._endMutation()(v46);
    Gradient.init(colors:)(v115);
    LinearGradient.init(gradient:startPoint:endPoint:)(&v112, 0.0, 0.0, 0.75, 0.0);
    v79[0] = v65;
    v79[1] = 0;
    LOBYTE(v80) = v78;
    BYTE1(v80) = 1;
    *(_DWORD *)((char *)&v80 + 2) = v76;
    WORD3(v80) = v77;
    *((_QWORD *)&v80 + 1) = v61;
    LOBYTE(v81) = v75;
    *(_DWORD *)((char *)&v81 + 1) = *(_DWORD *)v74;
    DWORD1(v81) = *(_DWORD *)&v74[3];
    *((_QWORD *)&v81 + 1) = v62;
    LOBYTE(v82) = v73;
    *(_DWORD *)((char *)&v82 + 1) = *(_DWORD *)v72;
    DWORD1(v82) = *(_DWORD *)&v72[3];
    *((_QWORD *)&v82 + 1) = v64;
    *(_QWORD *)&v83 = v63;
    *((_QWORD *)&v83 + 1) = v39;
    LOBYTE(v84) = v71;
    *(_DWORD *)((char *)&v84 + 1) = *(_DWORD *)v70;
    DWORD1(v84) = *(_DWORD *)&v70[3];
    *((_QWORD *)&v84 + 1) = v40;
    LOBYTE(v85) = v69;
    DWORD1(v85) = *(_DWORD *)&v68[3];
    *(_DWORD *)((char *)&v85 + 1) = *(_DWORD *)v68;
    *((_QWORD *)&v85 + 1) = v42;
    *(_QWORD *)&v86 = v41;
    WORD4(v86) = 0;
    *(_QWORD *)v87 = v112;
    *(_OWORD *)&v87[8] = v113;
    *(_OWORD *)&v87[24] = v114;
    v90 = (unint64_t)v65;
    v91 = v80;
    v94 = v83;
    v95 = v84;
    v92 = v81;
    v93 = v82;
    *(_QWORD *)&v99[1] = *((_QWORD *)&v114 + 1);
    v98 = *(_OWORD *)v87;
    v99[0] = *(_OWORD *)&v87[16];
    v96 = v85;
    v97 = v86;
    sub_10005F5A4((uint64_t)&v90);
    sub_100018EB4((uint64_t)&v90, (uint64_t)&v115, &qword_10015EAF0);
    sub_1000D0D50(v79);
    sub_1000D0D50(v79);
    v47 = sub_100007D50(&qword_10015EAC0);
    v48 = sub_1000D0C48();
    _ConditionalContent<>.init(storage:)(&v115, v47, &type metadata for EmptyView, v48, &protocol witness table for EmptyView);
    swift_release(v66);
    sub_1000D0D84(v79);
    sub_1000D0D84(v79);
    v122 = v88[7];
    v123 = v88[8];
    v124[0] = v89[0];
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v89 + 9);
    v118 = v88[3];
    v119 = v88[4];
    v120 = v88[5];
    v121 = v88[6];
    v115 = v88[0];
    v116 = v88[1];
    v117 = v88[2];
  }
  else
  {
    sub_10005F458((uint64_t)v88);
    sub_100018EB4((uint64_t)v88, (uint64_t)&v115, &qword_10015EAF0);
    v49 = sub_100007D50(&qword_10015EAC0);
    v50 = sub_1000D0C48();
    _ConditionalContent<>.init(storage:)(&v115, v49, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v13, v9);
    v122 = v97;
    v123 = v98;
    v124[0] = v99[0];
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)((char *)v99 + 9);
    v118 = v93;
    v119 = v94;
    v120 = v95;
    v121 = v96;
    v115 = v90;
    v116 = v91;
    v117 = v92;
  }
  v51 = v122;
  v52 = v124[0];
  v53 = v67;
  v67[8] = v123;
  v53[9] = v52;
  *(_OWORD *)((char *)v53 + 153) = *(_OWORD *)((char *)v124 + 9);
  v54 = v118;
  v55 = v120;
  v53[4] = v119;
  v53[5] = v55;
  v53[6] = v121;
  v53[7] = v51;
  v56 = v116;
  *v53 = v115;
  v53[1] = v56;
  result = *(double *)&v117;
  v53[2] = v117;
  v53[3] = v54;
  return result;
}

double sub_1000CDBF8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  double result;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  _OWORD v106[14];
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD v122[2];
  __int128 v123;
  __int128 v124;
  _OWORD v125[12];
  _OWORD v126[2];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  char v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _OWORD v196[3];

  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AsyncImagePhase(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 88))(v14, v10);
  if (v15 != enum case for AsyncImagePhase.success(_:))
  {
    if (v15 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v14, v10);
      swift_errorRelease(*v14);
    }
    else if (v15 != enum case for AsyncImagePhase.empty(_:))
    {
      sub_1000D09F0((uint64_t)&v127);
      sub_100018EB4((uint64_t)&v127, (uint64_t)&v182, &qword_10015EA70);
      v74 = sub_100007D50(&qword_10015E9F8);
      v75 = sub_1000D06E4();
      _ConditionalContent<>.init(storage:)(&v182, v74, &type metadata for EmptyView, v75, &protocol witness table for EmptyView);
      (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
      v194 = v154;
      v195 = v155;
      v196[0] = v156[0];
      *(_OWORD *)((char *)v196 + 11) = *(_OWORD *)((char *)v156 + 11);
      v190 = v150;
      v191 = v151;
      v192 = v152;
      v193 = v153;
      v186 = v146;
      v187 = v147;
      v188 = v148;
      v189 = v149;
      v182 = v142;
      v183 = v143;
      v72 = v144;
      v73 = v145;
      goto LABEL_8;
    }
    v51 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray2Color");
    *(_QWORD *)v91 = Color.init(uiColor:)(v51);
    v53 = a2[1];
    *(_QWORD *)&v182 = *a2;
    v52 = v182;
    *((_QWORD *)&v182 + 1) = v53;
    v54 = sub_100007D50(&qword_10015E9D8);
    State.wrappedValue.getter(&v142, v54);
    v55 = v142;
    KeyPath = swift_getKeyPath(&unk_1001102A0);
    *(_QWORD *)&v182 = v55;
    v57 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, KeyPath, v57);
    swift_release(KeyPath);
    v58 = *(_QWORD *)(v55 + 112);
    swift_release(v55);
    *(_QWORD *)&v182 = v52;
    *((_QWORD *)&v182 + 1) = v53;
    State.wrappedValue.getter(&v142, v54);
    v59 = v142;
    v60 = swift_getKeyPath(&unk_1001102C8);
    *(_QWORD *)&v182 = v59;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v60, v57);
    swift_release(v60);
    v61 = *(_QWORD *)(v59 + 120);
    swift_release(v59);
    v63 = static Alignment.center.getter(v62);
    _FrameLayout.init(width:height:alignment:)(&v91[8], v58, 0, v61, 0, v63, v64);
    v65 = *(_QWORD *)v91;
    v123 = *(_OWORD *)v91;
    LOBYTE(v124) = v91[16];
    *((_QWORD *)&v124 + 1) = v92;
    LOBYTE(v125[0]) = BYTE8(v92);
    *(_OWORD *)((char *)v125 + 8) = v93;
    sub_1000D09FC((uint64_t)&v123);
    sub_100018EB4((uint64_t)&v123, (uint64_t)&v182, &qword_10015EA78);
    swift_retain(v65);
    v66 = sub_100007D50(&qword_10015EA08);
    v67 = sub_100007D50(&qword_10015EA58);
    v68 = sub_1000D0750();
    v69 = sub_1000D0984();
    _ConditionalContent<>.init(storage:)(&v182, v66, v67, v68, v69);
    v154 = v120;
    v155 = v121;
    v156[0] = v122[0];
    *(_OWORD *)((char *)v156 + 10) = *(_OWORD *)((char *)v122 + 10);
    v150 = v116;
    v151 = v117;
    v152 = v118;
    v153 = v119;
    v146 = v112;
    v147 = v113;
    v148 = v114;
    v149 = v115;
    v142 = v108;
    v143 = v109;
    v144 = v110;
    v145 = v111;
    sub_1000D0A08((uint64_t)&v142);
    sub_100018EB4((uint64_t)&v142, (uint64_t)&v182, &qword_10015EA70);
    v70 = sub_100007D50(&qword_10015E9F8);
    v71 = sub_1000D06E4();
    _ConditionalContent<>.init(storage:)(&v182, v70, &type metadata for EmptyView, v71, &protocol witness table for EmptyView);
    swift_release(v65);
    v194 = v139;
    v195 = v140;
    v196[0] = v141[0];
    *(_OWORD *)((char *)v196 + 11) = *(_OWORD *)((char *)v141 + 11);
    v190 = v135;
    v191 = v136;
    v192 = v137;
    v193 = v138;
    v186 = v131;
    v187 = v132;
    v188 = v133;
    v189 = v134;
    v182 = v127;
    v183 = v128;
    v72 = v129;
    v73 = v130;
LABEL_8:
    v184 = v72;
    v185 = v73;
    goto LABEL_9;
  }
  (*(void (**)(_QWORD *, uint64_t))(v11 + 96))(v14, v10);
  *(_QWORD *)v91 = *v14;
  v16 = *(_QWORD *)v91;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
  v90 = Image.resizable(capInsets:resizingMode:)(v9, v16, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v17 = a2[1];
  *(_QWORD *)&v182 = *a2;
  v18 = v182;
  *((_QWORD *)&v182 + 1) = v17;
  v19 = v17;
  v20 = sub_100007D50(&qword_10015E9D8);
  State.wrappedValue.getter(&v142, v20);
  v21 = v142;
  v22 = swift_getKeyPath(&unk_1001102A0);
  *(_QWORD *)&v182 = v21;
  v23 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v22, v23);
  swift_release(v22);
  v24 = *(double *)(v21 + 112);
  swift_release(v21);
  *(_QWORD *)&v182 = v18;
  *((_QWORD *)&v182 + 1) = v19;
  v25 = v19;
  State.wrappedValue.getter(&v142, v20);
  v26 = v142;
  v27 = swift_getKeyPath(&unk_1001102C8);
  *(_QWORD *)&v182 = v26;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v27, v23);
  swift_release(v27);
  v28 = *(_QWORD *)(v26 + 120);
  swift_release(v26);
  v30 = static Alignment.center.getter(v29);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v157, v24 * 3.0, 0, v28, 0, v30, v31);
  v89 = v157;
  v88 = v158;
  v87 = v159;
  v86 = v160;
  v84 = v162;
  v85 = v161;
  *(_QWORD *)&v182 = v18;
  *((_QWORD *)&v182 + 1) = v25;
  State.wrappedValue.getter(&v142, v20);
  v32 = v142;
  v33 = swift_getKeyPath(&unk_1001102A0);
  *(_QWORD *)&v182 = v32;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v33, v23);
  swift_release(v33);
  v34 = *(_QWORD *)(v32 + 112);
  swift_release(v32);
  *(_QWORD *)&v182 = v18;
  *((_QWORD *)&v182 + 1) = v25;
  State.wrappedValue.getter(&v142, v20);
  v35 = v142;
  v36 = swift_getKeyPath(&unk_1001102C8);
  *(_QWORD *)&v182 = v35;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v182, v36, v23);
  swift_release(v36);
  v37 = *(_QWORD *)(v35 + 120);
  swift_release(v35);
  v39 = static Alignment.leading.getter(v38);
  v41 = _FrameLayout.init(width:height:alignment:)(&v163, v34, 0, v37, 0, v39, v40);
  v42 = v90;
  v168 = v90;
  v169 = 0;
  v170 = 257;
  v171 = v89;
  v172 = v88;
  v173 = v87;
  v174 = v86;
  v175 = v85;
  v176 = v84;
  v177 = v163;
  v178 = v164;
  v179 = v165;
  v180 = v166;
  v181 = v167;
  v43 = static Alignment.leading.getter(v41);
  sub_1000443BC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v182, 0.0, 1, 0.0, 1, v43, v44);
  swift_release(v42);
  v106[12] = v194;
  v106[13] = v195;
  v107 = *(_QWORD *)&v196[0];
  v106[8] = v190;
  v106[9] = v191;
  v106[10] = v192;
  v106[11] = v193;
  v106[4] = v186;
  v106[5] = v187;
  v106[6] = v188;
  v106[7] = v189;
  v106[0] = v182;
  v106[1] = v183;
  v106[2] = v184;
  v106[3] = v185;
  v120 = v194;
  v121 = v195;
  *(_QWORD *)&v122[0] = *(_QWORD *)&v196[0];
  v116 = v190;
  v117 = v191;
  v118 = v192;
  v119 = v193;
  v112 = v186;
  v113 = v187;
  v114 = v188;
  v115 = v189;
  v108 = v182;
  v109 = v183;
  v110 = v184;
  v111 = v185;
  *(_OWORD *)((char *)v122 + 8) = xmmword_1001101F0;
  BYTE8(v122[1]) = 1;
  sub_1000D0A10((uint64_t)&v108);
  sub_100018EB4((uint64_t)&v108, (uint64_t)&v182, &qword_10015EA78);
  sub_10005120C(v106);
  v45 = sub_100007D50(&qword_10015EA08);
  v46 = sub_100007D50(&qword_10015EA58);
  v47 = sub_1000D0750();
  v48 = sub_1000D0984();
  _ConditionalContent<>.init(storage:)(&v182, v45, v46, v47, v48);
  v125[10] = v103;
  v125[11] = v104;
  v126[0] = v105[0];
  *(_OWORD *)((char *)v126 + 10) = *(_OWORD *)((char *)v105 + 10);
  v125[6] = v99;
  v125[7] = v100;
  v125[8] = v101;
  v125[9] = v102;
  v125[2] = v95;
  v125[3] = v96;
  v125[4] = v97;
  v125[5] = v98;
  v123 = *(_OWORD *)&v91[8];
  v124 = v92;
  v125[0] = v93;
  v125[1] = v94;
  v154 = v103;
  v155 = v104;
  v156[0] = v105[0];
  *(_OWORD *)((char *)v156 + 10) = *(_OWORD *)((char *)v105 + 10);
  v150 = v99;
  v151 = v100;
  v152 = v101;
  v153 = v102;
  v146 = v95;
  v147 = v96;
  v148 = v97;
  v149 = v98;
  v142 = *(_OWORD *)&v91[8];
  v143 = v92;
  v144 = v93;
  v145 = v94;
  sub_1000D0A08((uint64_t)&v142);
  sub_100018EB4((uint64_t)&v142, (uint64_t)&v182, &qword_10015EA70);
  sub_1000D0A1C((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))j__swift_retain_0);
  v49 = sub_100007D50(&qword_10015E9F8);
  v50 = sub_1000D06E4();
  _ConditionalContent<>.init(storage:)(&v182, v49, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
  swift_release(*(_QWORD *)v91);
  sub_1000D0A1C((uint64_t)&v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))j__swift_release_0);
  sub_1000D0AAC(v106);
  v194 = v139;
  v195 = v140;
  v196[0] = v141[0];
  *(_OWORD *)((char *)v196 + 11) = *(_OWORD *)((char *)v141 + 11);
  v190 = v135;
  v191 = v136;
  v192 = v137;
  v193 = v138;
  v186 = v131;
  v187 = v132;
  v188 = v133;
  v189 = v134;
  v182 = v127;
  v183 = v128;
  v184 = v129;
  v185 = v130;
LABEL_9:
  v76 = v195;
  a3[12] = v194;
  a3[13] = v76;
  a3[14] = v196[0];
  *(_OWORD *)((char *)a3 + 235) = *(_OWORD *)((char *)v196 + 11);
  v77 = v191;
  a3[8] = v190;
  a3[9] = v77;
  v78 = v193;
  a3[10] = v192;
  a3[11] = v78;
  v79 = v187;
  a3[4] = v186;
  a3[5] = v79;
  v80 = v189;
  a3[6] = v188;
  a3[7] = v80;
  v81 = v183;
  *a3 = v182;
  a3[1] = v81;
  result = *(double *)&v184;
  v83 = v185;
  a3[2] = v184;
  a3[3] = v83;
  return result;
}

uint64_t sub_1000CE7F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(_BYTE *, uint64_t);
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE v53[12];
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  char v65;
  _QWORD v66[53];
  _BYTE v67[288];
  _BYTE v68[304];
  char v69;
  _BYTE v70[7];
  _BYTE v71[291];

  v64 = a1;
  v62 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v62);
  v3 = &v53[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v59);
  v5 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v53[-v11];
  v58 = sub_100007D50(&qword_10015EB08);
  __chkstk_darwin(v58);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v60 = sub_100007D50(&qword_10015EB10);
  __chkstk_darwin(v60);
  v16 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v61 = sub_100007D50(&qword_10015EB18);
  __chkstk_darwin(v61);
  v63 = &v53[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = static VerticalAlignment.center.getter(v18);
  sub_1000CED38(v1, (uint64_t)v67);
  v68[296] = 0;
  memcpy(&v68[7], v67, 0x11CuLL);
  v56 = 0;
  v19 = memcpy(v71, v68, sizeof(v71));
  v55 = static Edge.Set.vertical.getter(v19);
  v20 = EdgeInsets.init(_all:)(19.0);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v69 = 0;
  v54 = static Edge.Set.horizontal.getter(v27);
  sub_100018C18((uint64_t)v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v28 = static ColorScheme.== infix(_:_:)(v12, v9);
  v29 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v29(v9, v6);
  v29(v12, v6);
  if ((v28 & 1) != 0)
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v30 = &qword_10016A4B0;
  }
  else
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v30 = &qword_10016A4A8;
  }
  v31 = *v30;
  swift_retain(*v30);
  v32 = v69;
  v65 = 1;
  v34 = static Edge.Set.all.getter(v33);
  v66[0] = v57;
  v66[1] = 0x4028000000000000;
  LOBYTE(v66[2]) = v56;
  memcpy((char *)&v66[2] + 1, v71, 0x123uLL);
  LOBYTE(v66[39]) = v55;
  *(_DWORD *)((char *)&v66[39] + 1) = *(_DWORD *)v70;
  HIDWORD(v66[39]) = *(_DWORD *)&v70[3];
  *(double *)&v66[40] = v20;
  v66[41] = v22;
  v66[42] = v24;
  v66[43] = v26;
  LOBYTE(v66[44]) = v32;
  LOBYTE(v66[45]) = v54;
  memset(&v66[46], 0, 32);
  LOBYTE(v66[50]) = v65;
  v66[51] = v31;
  LOBYTE(v66[52]) = v34;
  v35 = (char *)v5 + *(int *)(v59 + 20);
  v36 = enum case for RoundedCornerStyle.continuous(_:);
  v37 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
  __asm { FMOV            V0.2D, #16.0 }
  *v5 = _Q0;
  sub_10001BFB8((uint64_t)v5, (uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v3[*(int *)(v62 + 36)] = 256;
  sub_100007E78((uint64_t)v3, (uint64_t)&v14[*(int *)(v58 + 36)], &qword_100158640);
  memcpy(v14, v66, 0x1A1uLL);
  sub_1000D0EB4((uint64_t)v66);
  sub_100007F38((uint64_t)v3, &qword_100158640);
  sub_10001E24C((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v43 = sub_1000D0F80((uint64_t)v66);
  v44 = static Color.black.getter(v43);
  v45 = Color.opacity(_:)(0.08);
  swift_release(v44);
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_10015EB08);
  v46 = &v16[*(int *)(v60 + 36)];
  *(_QWORD *)v46 = v45;
  *(_OWORD *)(v46 + 8) = xmmword_1001101D0;
  *((_QWORD *)v46 + 3) = 0x4010000000000000;
  v47 = sub_100007F38((uint64_t)v14, &qword_10015EB08);
  v48 = static Color.black.getter(v47);
  v49 = Color.opacity(_:)(0.05);
  swift_release(v48);
  v50 = v63;
  sub_100007E78((uint64_t)v16, (uint64_t)v63, &qword_10015EB10);
  v51 = &v50[*(int *)(v61 + 36)];
  *(_QWORD *)v51 = v49;
  *(_OWORD *)(v51 + 8) = xmmword_1001101E0;
  *((_QWORD *)v51 + 3) = 0x4000000000000000;
  sub_100007F38((uint64_t)v16, &qword_10015EB10);
  return sub_100018EB4((uint64_t)v50, v64, &qword_10015EB18);
}

double sub_1000CED38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  double result;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[12];
  uint64_t v57;
  char v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  uint64_t v87;

  v42 = Image.init(_:bundle:)(0xD00000000000001FLL, 0x8000000100114B60, 0);
  v4 = static Alignment.center.getter(v42);
  v6 = _FrameLayout.init(width:height:alignment:)(&v73, 0x4041000000000000, 0, 0x4040000000000000, 0, v4, v5);
  v40 = v75;
  v41 = v73;
  v36 = v76;
  v37 = v74;
  v38 = v78;
  v39 = v77;
  v7 = static HorizontalAlignment.leading.getter(v6);
  v8 = sub_1000CF0A4(a1, (uint64_t)&v60);
  v9 = v60;
  v10 = v61;
  v11 = *((_QWORD *)&v62 + 1);
  v12 = v63;
  v79 = v7;
  v80 = 0;
  v81 = 0;
  v82 = v60;
  v83 = v61;
  v84 = *((_QWORD *)&v61 + 1);
  v85 = v62;
  v13 = v62;
  v86 = v63;
  v87 = *((_QWORD *)&v63 + 1);
  v14 = static Alignment.leading.getter(v8);
  sub_100043B00(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v43, 0.0, 1, 0.0, 1, v14, v15);
  sub_100007D90(v9, *((uint64_t *)&v9 + 1), v10);
  swift_bridgeObjectRelease();
  sub_100007D90(v13, v11, v12);
  swift_bridgeObjectRelease();
  v16 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v17 = static Font.subheadline.getter(v16);
  static Font.Weight.semibold.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  KeyPath = swift_getKeyPath(&unk_100110470);
  v20 = static HierarchicalShapeStyle.tertiary.getter();
  v21 = v53;
  v22 = v54;
  v56[10] = v53;
  v56[11] = v54;
  v23 = v49;
  v24 = v50;
  v56[6] = v49;
  v56[7] = v50;
  v25 = v51;
  v56[8] = v51;
  v56[9] = v52;
  v26 = v45;
  v27 = v46;
  v56[2] = v45;
  v56[3] = v46;
  v28 = v48;
  v29 = v47;
  v56[4] = v47;
  v56[5] = v48;
  v30 = v44;
  v31 = v43;
  v56[0] = v43;
  v56[1] = v44;
  *(_OWORD *)(a2 + 200) = v52;
  *(_OWORD *)(a2 + 216) = v21;
  *(_OWORD *)(a2 + 232) = v22;
  *(_OWORD *)(a2 + 136) = v28;
  *(_OWORD *)(a2 + 152) = v23;
  *(_OWORD *)(a2 + 168) = v24;
  *(_OWORD *)(a2 + 184) = v25;
  *(_OWORD *)(a2 + 72) = v30;
  *(_OWORD *)(a2 + 88) = v26;
  *(_OWORD *)(a2 + 104) = v27;
  *(_OWORD *)(a2 + 120) = v29;
  v32 = v55;
  v57 = v55;
  v59 = v37;
  v58 = v36;
  *(_OWORD *)(a2 + 56) = v31;
  v33 = v59;
  v34 = v58;
  *(_QWORD *)a2 = v42;
  *(_QWORD *)(a2 + 8) = v41;
  *(_BYTE *)(a2 + 16) = v33;
  *(_QWORD *)(a2 + 24) = v40;
  *(_BYTE *)(a2 + 32) = v34;
  *(_QWORD *)(a2 + 40) = v39;
  *(_QWORD *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 248) = v32;
  *(_QWORD *)(a2 + 256) = v16;
  *(_QWORD *)(a2 + 264) = KeyPath;
  *(_QWORD *)(a2 + 272) = v18;
  *(_DWORD *)(a2 + 280) = v20;
  swift_retain(v42);
  sub_100051234((uint64_t)v56);
  v70 = v53;
  v71 = v54;
  v72 = v55;
  v66 = v49;
  v67 = v50;
  v68 = v51;
  v69 = v52;
  v62 = v45;
  v63 = v46;
  v64 = v47;
  v65 = v48;
  v60 = v43;
  v61 = v44;
  sub_1000D1054((uint64_t)&v60);
  *(_QWORD *)&result = swift_release(v42).n128_u64[0];
  return result;
}

uint64_t sub_1000CF0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];

  v4 = type metadata accessor for DefaultEntryView(0);
  v5 = (uint64_t *)(a1 + *(int *)(v4 + 20));
  v6 = *v5;
  v7 = v5[1];
  v8 = *((unsigned __int8 *)v5 + 16);
  v9 = v5[3];
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter(v10);
  static Font.Weight.semibold.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v55 = v20;
  v56 = v19;
  v57 = v21;
  swift_release(v18);
  sub_100007D90(v10, v12, v16);
  swift_bridgeObjectRelease();
  v22 = (uint64_t *)(a1 + *(int *)(v4 + 24));
  v23 = *v22;
  v24 = v22[1];
  v25 = *((unsigned __int8 *)v22 + 16);
  v26 = v22[3];
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  LOWORD(v53) = 256;
  v27 = Text.init(_:tableName:bundle:comment:)(v23, v24, v25, v26, 0, 0, 0, 0, 0, v53);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.footnote.getter(v27);
  static Font.Weight.regular.getter();
  v35 = Font.weight(_:)(v34);
  swift_release(v34);
  v36 = Text.font(_:)(v35, v27, v29, v33, v31);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  swift_release(v35);
  sub_100007D90(v27, v29, v33);
  swift_bridgeObjectRelease();
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v43 = v40 & 1;
  v44 = qword_10016A4B8;
  v58[0] = qword_10016A4B8;
  swift_retain(qword_10016A4B8);
  v45 = Text.foregroundStyle<A>(_:)(v58, v36, v38, v40 & 1, v42, &type metadata for Color, &protocol witness table for Color);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  sub_100007D90(v36, v38, v43);
  swift_release(v44);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = v55;
  *(_BYTE *)(a2 + 16) = v54 & 1;
  *(_QWORD *)(a2 + 24) = v57;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v47;
  *(_BYTE *)(a2 + 48) = v51;
  *(_QWORD *)(a2 + 56) = v49;
  sub_10000F844(v56, v55, v54 & 1);
  swift_bridgeObjectRetain(v57);
  sub_10000F844(v45, v47, v51);
  swift_bridgeObjectRetain(v49);
  sub_100007D90(v45, v47, v51);
  swift_bridgeObjectRelease();
  sub_100007D90(v56, v55, v54 & 1);
  return swift_bridgeObjectRelease();
}

double sub_1000CF3B8@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001102A0);
  v7 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 112);
  *a2 = result;
  return result;
}

void sub_1000CF444(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001102A0);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000D15A8, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_1000CF4F4@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1001102C8);
  v7 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 120);
  *a2 = result;
  return result;
}

void sub_1000CF580(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1001102C8);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015E848, type metadata accessor for PromotionalAssetsPhotoEntryViewModel, (uint64_t)&unk_100111E50);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000D1594, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

void sub_1000CF630(uint64_t *a1)
{
  uint64_t v1;

  sub_1000CB8E8(a1, v1);
}

uint64_t sub_1000CF640()
{
  uint64_t v0;

  return sub_1000EDA74(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000CF664()
{
  uint64_t v0;

  return sub_1000EDA7C(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t *sub_1000CF680(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v16[16] = v17[16];
    v19 = *((_QWORD *)v17 + 3);
    *((_QWORD *)v16 + 3) = v19;
    v20 = (char *)a1 + v15;
    v21 = (char *)a2 + v15;
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v20[16] = v21[16];
    v23 = *((_QWORD *)v21 + 3);
    *((_QWORD *)v20 + 3) = v23;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_1000CF7AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1000CF848(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v14[16] = v15[16];
  v17 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v14 + 3) = v17;
  v18 = (char *)a1 + v13;
  v19 = (char *)a2 + v13;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v18[16] = v19[16];
  v21 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v18 + 3) = v21;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t *sub_1000CF948(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_100007F38((uint64_t)a1, &qword_100158AC0);
    v6 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a2 + v12 + 8);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v13[16] = v14[16];
  v16 = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 3) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = *(int *)(a3 + 24);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(uint64_t *)((char *)a2 + v17);
  v20 = *(uint64_t *)((char *)a2 + v17 + 8);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v18[16] = v19[16];
  v21 = *((_QWORD *)v19 + 3);
  *((_QWORD *)v18 + 3) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1000CFAA0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;

  v6 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  v13 = &a1[v9];
  v14 = &a2[v9];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  return a1;
}

char *sub_1000CFB60(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_100007F38((uint64_t)a1, &qword_100158AC0);
    v6 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v9[16] = v10[16];
  *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v13[16] = v14[16];
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CFC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CFC90);
}

uint64_t sub_1000CFC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100007D50(qword_100158F60);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000CFD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CFD20);
}

uint64_t sub_1000CFD20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100007D50(qword_100158F60);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_1000CFDA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10002023C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = " ";
    v4[2] = " ";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for PhotoEntryViewSizePreferenceKey()
{
  return &type metadata for PhotoEntryViewSizePreferenceKey;
}

uint64_t *sub_1000CFE24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain(v5);
    swift_retain(v6);
    v10 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_1000CFF08(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000CFF88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_1000D0038(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_100007F38((uint64_t)a1 + v10, &qword_100158AC0);
    v13 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

_OWORD *sub_1000D0124(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000D01CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_100007F38((uint64_t)a1 + v8, &qword_100158AC0);
    v11 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000D02AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D02B8);
}

uint64_t sub_1000D02B8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(qword_100158F60);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000D0338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D0344);
}

char *sub_1000D0344(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(qword_100158F60);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1000D03BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100110350;
  sub_10002023C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

unint64_t sub_1000D0434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E978;
  if (!qword_10015E978)
  {
    v1 = sub_100007D00(&qword_10015E7D8);
    sub_1000D04B8();
    sub_10000F4E0(&qword_10015E998, &qword_10015E7E0, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E978);
  }
  return result;
}

unint64_t sub_1000D04B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E980;
  if (!qword_10015E980)
  {
    v1 = sub_100007D00(&qword_10015E7D0);
    sub_1000D051C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E980);
  }
  return result;
}

unint64_t sub_1000D051C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E988;
  if (!qword_10015E988)
  {
    v1 = sub_100007D00(&qword_10015E990);
    sub_1000CBB78();
    sub_100007428(&qword_10015E840, type metadata accessor for DefaultEntryView, (uint64_t)&unk_1001103CC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E988);
  }
  return result;
}

unint64_t sub_1000D05A0(uint64_t a1)
{
  unint64_t result;

  result = sub_1000D05C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D05C4()
{
  unint64_t result;

  result = qword_10015E9A0;
  if (!qword_10015E9A0)
  {
    result = swift_getWitnessTable(&unk_100110368, &type metadata for PhotoEntryViewSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015E9A0);
  }
  return result;
}

uint64_t sub_1000D0608(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119244, 1);
}

uint64_t sub_1000D0618(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011921C, 1);
}

double sub_1000D062C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotoEntryView(0) - 8) + 80);
  return sub_1000CDBF8(a1, (_QWORD *)(v2 + ((v5 + 16) & ~v5)), a2);
}

unint64_t sub_1000D0678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E9E8;
  if (!qword_10015E9E8)
  {
    v1 = sub_100007D00(&qword_10015E9E0);
    sub_1000D06E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E9E8);
  }
  return result;
}

unint64_t sub_1000D06E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E9F0;
  if (!qword_10015E9F0)
  {
    v1 = sub_100007D00(&qword_10015E9F8);
    sub_1000D0750();
    sub_1000D0984();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015E9F0);
  }
  return result;
}

unint64_t sub_1000D0750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA00;
  if (!qword_10015EA00)
  {
    v1 = sub_100007D00(&qword_10015EA08);
    sub_1000D07BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA00);
  }
  return result;
}

unint64_t sub_1000D07BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA10;
  if (!qword_10015EA10)
  {
    v1 = sub_100007D00(&qword_10015EA18);
    sub_1000D0828();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA10);
  }
  return result;
}

unint64_t sub_1000D0828()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA20;
  if (!qword_10015EA20)
  {
    v1 = sub_100007D00(&qword_10015EA28);
    sub_1000D0894();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA20);
  }
  return result;
}

unint64_t sub_1000D0894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA30;
  if (!qword_10015EA30)
  {
    v1 = sub_100007D00(&qword_10015EA38);
    sub_1000D0900();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA30);
  }
  return result;
}

unint64_t sub_1000D0900()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA40;
  if (!qword_10015EA40)
  {
    v1 = sub_100007D00(&qword_10015EA48);
    sub_1000D0E58((unint64_t *)&qword_1001590C8, &qword_1001590D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA40);
  }
  return result;
}

unint64_t sub_1000D0984()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EA50;
  if (!qword_10015EA50)
  {
    v1 = sub_100007D00(&qword_10015EA58);
    sub_10003CE14();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EA50);
  }
  return result;
}

uint64_t sub_1000D09F0(uint64_t result)
{
  *(_BYTE *)(result + 250) = 1;
  return result;
}

uint64_t sub_1000D09FC(uint64_t result)
{
  *(_BYTE *)(result + 249) = 1;
  return result;
}

uint64_t sub_1000D0A08(uint64_t result)
{
  *(_BYTE *)(result + 250) = 0;
  return result;
}

uint64_t sub_1000D0A10(uint64_t result)
{
  *(_BYTE *)(result + 249) = 0;
  return result;
}

uint64_t sub_1000D0A1C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_WORD *)(a1 + 248));
  return a1;
}

_QWORD *sub_1000D0AAC(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

uint64_t sub_1000D0AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for PhotoEntryView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1000D0B90@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PhotoEntryView(0) - 8) + 80);
  return sub_1000CD4F0(a1, (_QWORD *)(v2 + ((v5 + 16) & ~v5)), a2);
}

unint64_t sub_1000D0BDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAB0;
  if (!qword_10015EAB0)
  {
    v1 = sub_100007D00(&qword_10015EAA8);
    sub_1000D0C48();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EAB0);
  }
  return result;
}

unint64_t sub_1000D0C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAB8;
  if (!qword_10015EAB8)
  {
    v1 = sub_100007D00(&qword_10015EAC0);
    sub_1000D0CCC();
    sub_10000F4E0(&qword_10015EAD8, &qword_10015EAE0, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EAB8);
  }
  return result;
}

unint64_t sub_1000D0CCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EAC8;
  if (!qword_10015EAC8)
  {
    v1 = sub_100007D00(&qword_10015EAD0);
    sub_1000D0894();
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EAC8);
  }
  return result;
}

_QWORD *sub_1000D0D50(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[16];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t *sub_1000D0D84(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease(a1[16]);
  swift_release(v2);
  return a1;
}

uint64_t sub_1000D0DB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_1000D0E08(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 128);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D0E58(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007D00(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D0EB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_BYTE *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_BYTE *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 280);
  v9 = *(_QWORD *)(a1 + 296);
  v14 = *(_QWORD *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 408);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10000F844(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  sub_10000F844(v6, v7, v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  swift_retain(v14);
  return a1;
}

uint64_t sub_1000D0F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_BYTE *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_BYTE *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 288);
  v11 = *(_QWORD *)(a1 + 280);
  v12 = *(_QWORD *)(a1 + 296);
  v9 = *(_QWORD *)(a1 + 408);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_100007D90(v2, v3, v4);
  swift_bridgeObjectRelease();
  sub_100007D90(v5, v6, v7);
  swift_release(v9);
  swift_release(v8);
  swift_release(v11);
  swift_bridgeObjectRelease();
  swift_release(v12);
  return a1;
}

uint64_t sub_1000D1054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  sub_100007D90(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_100007D90(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000D10C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB20;
  if (!qword_10015EB20)
  {
    v1 = sub_100007D00(&qword_10015EA68);
    sub_1000D1134();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB20);
  }
  return result;
}

unint64_t sub_1000D1134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB28;
  if (!qword_10015EB28)
  {
    v1 = sub_100007D00(&qword_10015E9C8);
    sub_1000D11A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB28);
  }
  return result;
}

unint64_t sub_1000D11A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB30;
  if (!qword_10015EB30)
  {
    v1 = sub_100007D00(&qword_10015E9C0);
    sub_1000D1224();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB30);
  }
  return result;
}

unint64_t sub_1000D1224()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB38;
  if (!qword_10015EB38)
  {
    v1 = sub_100007D00(&qword_10015E9B8);
    sub_10000F4E0(&qword_10015EB40, &qword_10015E9B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000F4E0(&qword_10015EB48, &qword_10015EA60, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB38);
  }
  return result;
}

unint64_t sub_1000D12C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB50;
  if (!qword_10015EB50)
  {
    v1 = sub_100007D00(&qword_10015EB18);
    sub_1000D1330();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB50);
  }
  return result;
}

unint64_t sub_1000D1330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB58;
  if (!qword_10015EB58)
  {
    v1 = sub_100007D00(&qword_10015EB10);
    sub_1000D139C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB58);
  }
  return result;
}

unint64_t sub_1000D139C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB60;
  if (!qword_10015EB60)
  {
    v1 = sub_100007D00(&qword_10015EB08);
    sub_1000D1420();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB60);
  }
  return result;
}

unint64_t sub_1000D1420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB68;
  if (!qword_10015EB68)
  {
    v1 = sub_100007D00(&qword_10015EB70);
    sub_1000D14A4();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB68);
  }
  return result;
}

unint64_t sub_1000D14A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB78;
  if (!qword_10015EB78)
  {
    v1 = sub_100007D00(&qword_10015EB80);
    sub_1000D1510();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB78);
  }
  return result;
}

unint64_t sub_1000D1510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EB88;
  if (!qword_10015EB88)
  {
    v1 = sub_100007D00(&qword_10015EB90);
    sub_10000F4E0(&qword_10015EB98, &qword_10015EBA0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EB88);
  }
  return result;
}

uint64_t sub_1000D1594()
{
  return sub_1000CF664();
}

uint64_t sub_1000D15A8()
{
  return sub_1000CF640();
}

_QWORD *initializeWithCopy for CalendarIcon(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for CalendarIcon(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for CalendarIcon(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for CalendarIcon()
{
  return &type metadata for CalendarIcon;
}

uint64_t sub_1000D16B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119288, 1);
}

uint64_t sub_1000D16C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[3];
  _OWORD v82[2];
  uint64_t v83;

  v73 = a2;
  *(_QWORD *)&v74 = a3;
  v72 = a1;
  v80 = a5;
  v6 = sub_100007D50(&qword_10015A250);
  __chkstk_darwin(v6);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v76);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RoundedRectangle(0);
  v71 = v11;
  __chkstk_darwin(v11);
  v13 = (_OWORD *)((char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = sub_100007D50(&qword_10015BC00);
  __chkstk_darwin(v75);
  v15 = (uint64_t *)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_100007D50(&qword_10015BC08);
  __chkstk_darwin(v79);
  v78 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_10015EBA8);
  __chkstk_darwin(v17);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100007D50(&qword_10015EBB0);
  __chkstk_darwin(v20);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v22;
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  v24 = sub_100007D50(&qword_10015EBB8);
  v25 = sub_1000D1C00(v72, v73, v74, a4, (uint64_t)&v19[*(int *)(v24 + 44)]);
  v26 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(v81, 0x4044000000000000, 0, 0x4044000000000000, 0, v26, v27);
  sub_100007E78((uint64_t)v19, (uint64_t)v22, &qword_10015EBA8);
  v28 = &v22[*(int *)(v20 + 36)];
  v29 = v81[1];
  *(_OWORD *)v28 = v81[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v81[2];
  v30 = sub_100007F38((uint64_t)v19, &qword_10015EBA8);
  v31 = static Color.white.getter(v30);
  KeyPath = swift_getKeyPath(&unk_100110500);
  v33 = (char *)v13 + *(int *)(v11 + 20);
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104);
  v36(v33, v34, v35);
  __asm { FMOV            V0.2D, #9.0 }
  v74 = _Q0;
  *v13 = _Q0;
  sub_10000F760((uint64_t)v13, (uint64_t)v10);
  *(_WORD *)&v10[*(int *)(v76 + 36)] = 256;
  sub_100007E78((uint64_t)v10, (uint64_t)v15 + *(int *)(v75 + 36), &qword_100158640);
  *v15 = KeyPath;
  v15[1] = v31;
  swift_retain(KeyPath);
  swift_retain(v31);
  sub_100007F38((uint64_t)v10, &qword_100158640);
  sub_10000F854((uint64_t)v13);
  swift_release(v31);
  v42 = swift_release(KeyPath);
  v43 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v36)((char *)v13 + *(int *)(v71 + 20), v34, v35, v42);
  *v13 = v74;
  v44 = static Color.primary.getter(v43);
  v45 = Color.opacity(_:)(0.1);
  swift_release(v44);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v82, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  sub_10000F760((uint64_t)v13, (uint64_t)v8);
  v46 = &v8[*(int *)(sub_100007D50(&qword_10015A258) + 36)];
  v47 = v82[1];
  *(_OWORD *)v46 = v82[0];
  *((_OWORD *)v46 + 1) = v47;
  *((_QWORD *)v46 + 4) = v83;
  v48 = sub_100007D50(&qword_10015A260);
  *(_QWORD *)&v8[*(int *)(v48 + 52)] = v45;
  *(_WORD *)&v8[*(int *)(v48 + 56)] = 256;
  v49 = static Alignment.center.getter(v48);
  v51 = v50;
  v52 = (uint64_t *)&v8[*(int *)(sub_100007D50(&qword_10015A268) + 36)];
  *v52 = v49;
  v52[1] = v51;
  v53 = sub_10000F854((uint64_t)v13);
  v54 = static Alignment.center.getter(v53);
  v56 = v55;
  v57 = (uint64_t)v78;
  v58 = (uint64_t)&v78[*(int *)(v79 + 36)];
  sub_100007E78((uint64_t)v8, v58, &qword_10015A250);
  v59 = (uint64_t *)(v58 + *(int *)(sub_100007D50(&qword_10015A248) + 36));
  *v59 = v54;
  v59[1] = v56;
  sub_100007E78((uint64_t)v15, v57, &qword_10015BC00);
  sub_100007F38((uint64_t)v8, &qword_10015A250);
  v60 = sub_100007F38((uint64_t)v15, &qword_10015BC00);
  v61 = static Alignment.center.getter(v60);
  v63 = v62;
  v64 = sub_100007D50(&qword_10015EBC0);
  v65 = v80;
  v66 = v80 + *(int *)(v64 + 36);
  sub_100007E78(v57, v66, &qword_10015BC08);
  v67 = (uint64_t *)(v66 + *(int *)(sub_100007D50(&qword_10015BC30) + 36));
  *v67 = v61;
  v67[1] = v63;
  v68 = (uint64_t)v77;
  sub_100007E78((uint64_t)v77, v65, &qword_10015EBB0);
  sub_100007F38(v57, &qword_10015BC08);
  return sub_100007F38(v68, &qword_10015EBB0);
}

uint64_t sub_1000D1C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v91 = a3;
  v92 = a4;
  v94 = a5;
  v84 = sub_100007D50(&qword_100159638);
  __chkstk_darwin(v84);
  v8 = (uint64_t *)((char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v9);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100007D50(&qword_100159648);
  __chkstk_darwin(v83);
  v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100007D50(&qword_10015BCB8);
  __chkstk_darwin(v85);
  v86 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100007D50(&qword_10015C318);
  __chkstk_darwin(v87);
  v90 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100007D50(&qword_10015EBC8);
  __chkstk_darwin(v88);
  v93 = (uint64_t)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v95 = (uint64_t)&v83 - v18;
  v96 = a1;
  v97 = a2;
  v19 = sub_10001DB0C();
  swift_bridgeObjectRetain(a2);
  v89 = v19;
  v20 = Text.init<A>(_:)(&v96, &type metadata for String);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = enum case for Text.Case.uppercase(_:);
  v28 = type metadata accessor for Text.Case(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v11, v27, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v11, 0, 1, v28);
  KeyPath = swift_getKeyPath(&unk_100110530);
  sub_100007E78((uint64_t)v11, (uint64_t)v8 + *(int *)(v84 + 28), &qword_100159640);
  *v8 = KeyPath;
  sub_100007E78((uint64_t)v8, (uint64_t)&v13[*(int *)(v83 + 36)], &qword_100159638);
  *(_QWORD *)v13 = v20;
  *((_QWORD *)v13 + 1) = v22;
  v13[16] = v26;
  *((_QWORD *)v13 + 3) = v24;
  sub_10000F844(v20, v22, v26);
  swift_bridgeObjectRetain(v24);
  sub_100007F38((uint64_t)v8, &qword_100159638);
  sub_100007F38((uint64_t)v11, &qword_100159640);
  sub_100007D90(v20, v22, v26);
  v31 = swift_bridgeObjectRelease();
  if (qword_100158050 != -1)
    v31 = swift_once(&qword_100158050, sub_100019144);
  v32 = qword_10016A490;
  static Font.Weight.bold.getter(v31);
  v33 = Font.weight(_:)(v32);
  v34 = swift_getKeyPath(&unk_100110560);
  v35 = v86;
  sub_100007E78((uint64_t)v13, v86, &qword_100159648);
  v36 = (uint64_t *)(v35 + *(int *)(v85 + 36));
  *v36 = v34;
  v36[1] = v33;
  sub_100007F38((uint64_t)v13, &qword_100159648);
  v37 = v35;
  if (qword_100158088 != -1)
    swift_once(&qword_100158088, sub_100051364);
  v38 = qword_10016A4A0;
  v39 = swift_getKeyPath(&unk_100110500);
  v40 = v35;
  v41 = v90;
  sub_100007E78(v40, v90, &qword_10015BCB8);
  v42 = (uint64_t *)(v41 + *(int *)(v87 + 36));
  *v42 = v39;
  v42[1] = v38;
  swift_retain(v38);
  v43 = sub_100007F38(v37, &qword_10015BCB8);
  LOBYTE(v38) = static Edge.Set.top.getter(v43);
  v44 = EdgeInsets.init(_all:)(2.0);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v93;
  sub_100007E78(v41, v93, &qword_10015C318);
  v52 = v51 + *(int *)(v88 + 36);
  *(_BYTE *)v52 = v38;
  *(double *)(v52 + 8) = v44;
  *(_QWORD *)(v52 + 16) = v46;
  *(_QWORD *)(v52 + 24) = v48;
  *(_QWORD *)(v52 + 32) = v50;
  *(_BYTE *)(v52 + 40) = 0;
  sub_100007F38(v41, &qword_10015C318);
  sub_1000D2260(v51, v95);
  v96 = v91;
  v97 = v92;
  swift_bridgeObjectRetain(v92);
  v53 = Text.init<A>(_:)(&v96, &type metadata for String);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  if (qword_100158058 != -1)
    swift_once(&qword_100158058, sub_100019154);
  v60 = v57 & 1;
  v61 = qword_10016A498;
  static Font.Weight.light.getter();
  v62 = Font.weight(_:)(v61);
  v63 = Text.font(_:)(v62, v53, v55, v60, v59);
  v65 = v64;
  v67 = v66;
  v69 = v68;
  swift_release(v62);
  LOBYTE(v62) = v67 & 1;
  sub_100007D90(v53, v55, v60);
  v70 = swift_bridgeObjectRelease();
  v71 = static Color.black.getter(v70);
  v72 = Text.foregroundColor(_:)(v71, v63, v65, v67 & 1, v69);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  swift_release(v71);
  sub_100007D90(v63, v65, v62);
  swift_bridgeObjectRelease();
  v79 = v95;
  sub_100007E78(v95, v51, &qword_10015EBC8);
  v80 = v94;
  sub_100007E78(v51, v94, &qword_10015EBC8);
  v81 = v80 + *(int *)(sub_100007D50(&qword_10015EBD0) + 48);
  *(_QWORD *)v81 = v72;
  *(_QWORD *)(v81 + 8) = v74;
  *(_BYTE *)(v81 + 16) = v76 & 1;
  *(_QWORD *)(v81 + 24) = v78;
  sub_10000F844(v72, v74, v76 & 1);
  swift_bridgeObjectRetain(v78);
  sub_100007F38(v79, &qword_10015EBC8);
  sub_100007D90(v72, v74, v76 & 1);
  swift_bridgeObjectRelease();
  return sub_100007F38(v51, &qword_10015EBC8);
}

uint64_t sub_1000D223C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000D16C8(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_1000D2260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015EBC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D22AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EBD8;
  if (!qword_10015EBD8)
  {
    v1 = sub_100007D00(&qword_10015EBC0);
    sub_1000D2330();
    sub_10000F4E0(&qword_10015BD20, &qword_10015BC30, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EBD8);
  }
  return result;
}

unint64_t sub_1000D2330()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EBE0;
  if (!qword_10015EBE0)
  {
    v1 = sub_100007D00(&qword_10015EBB0);
    sub_10000F4E0(qword_10015EBE8, &qword_10015EBA8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EBE0);
  }
  return result;
}

uint64_t sub_1000D23B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001105C0;
  v4[1] = &unk_1001105C0;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Optional(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000D2440@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for Optional(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - v7, (uint64_t)v1 + *(_QWORD *)(v3 + 120), v5);
  v9 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    if (qword_100158148 != -1)
      swift_once(&qword_100158148, sub_1000B75C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 88) + 40))(qword_10016A598, qword_10016A598, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v8, v4);
  }
}

double sub_1000D2584()
{
  double v0;
  double result;

  v0 = sub_1000D287C();
  result = 0.0;
  if (v0 <= 0.0)
    return sub_1000D287C() * 0.125;
  return result;
}

id sub_1000D25B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  id v11;
  uint64_t v12;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = type metadata accessor for Optional(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v12 - v5, (uint64_t)v0 + *(_QWORD *)(v1 + 120), v3);
  v7 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 88) + 16))(v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v2);
    if (v8)
      return (id)v8;
  }
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v11 = objc_msgSend(v10, "CGColor");

  return v11;
}

double sub_1000D26EC()
{
  if (sub_1000D287C() <= 0.0)
    return sub_1000D287C();
  else
    return 0.0;
}

double sub_1000D2714()
{
  uint64_t v0;
  double v2;

  v0 = sub_100007D50(&qword_10015C490);
  Binding.wrappedValue.getter(v0);
  return v2;
}

double sub_1000D2760()
{
  double v0;
  double result;

  v0 = sub_1000D287C();
  result = 1.0;
  if (v0 > 0.0)
    return sub_1000D287C() * 0.002 + 1.0;
  return result;
}

BOOL sub_1000D279C()
{
  double v0;

  v0 = -sub_1000D287C();
  return sub_1000D2714() >= v0;
}

uint64_t sub_1000D27C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v18 = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 64) = a1;
  v19 = v17 + *(_QWORD *)(v18 + 120);
  v20 = type metadata accessor for Optional(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  *(double *)(v17 + 32) = a7;
  *(_QWORD *)(v17 + 40) = a5;
  *(_QWORD *)(v17 + 48) = a6;
  *(double *)(v17 + 56) = a8;
  return v17;
}

double sub_1000D287C()
{
  uint64_t v0;
  double v2;

  v0 = sub_100007D50(&qword_10015C490);
  Binding.wrappedValue.getter(v0);
  return v2;
}

_QWORD *sub_1000D28C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = v0[2];
  swift_release(v0[3]);
  swift_release(v1);
  v2 = v0[5];
  swift_release(v0[6]);
  swift_release(v2);
  v3 = (char *)v0 + *(_QWORD *)(*v0 + 120);
  v4 = type metadata accessor for Optional(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_1000D293C()
{
  uint64_t v0;

  sub_1000D28C8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for HeroImageModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImageModel);
}

uint64_t sub_1000D296C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_100110680);
  v2 = swift_getKeyPath(&unk_1001106A8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1000D29D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1001106C8);
  v2 = swift_getKeyPath(&unk_1001106F0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000D2A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100007D50(&qword_10015ADE0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v4);
  v3[8] = swift_task_alloc(v4);
  v3[9] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[11] = v7;
  v3[12] = v8;
  return swift_task_switch(sub_1000D2AF0, v7, v8);
}

uint64_t sub_1000D2AF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0[8];
  v1 = v0[9];
  v4 = v0[5];
  v3 = v0[6];
  v5 = sub_100007D50(&qword_10015A6A0);
  v0[13] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[14] = v6;
  v6(v1, 1, 1, v5);
  KeyPath = swift_getKeyPath(&unk_100110680);
  v8 = swift_getKeyPath(&unk_1001106A8);
  sub_1000D3128(v1, v2);
  swift_retain(v3);
  static Published.subscript.setter(v2, v3, KeyPath, v8);
  sub_1000D3170(v1);
  v9 = swift_getKeyPath(&unk_1001106C8);
  v10 = swift_getKeyPath(&unk_1001106F0);
  v0[2] = 0;
  swift_retain(v3);
  static Published.subscript.setter(v0 + 2, v3, v9, v10);
  v11 = async function pointer to Event<>.init(id:)[1];
  swift_bridgeObjectRetain(v4);
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[15] = v12;
  *v12 = v0;
  v12[1] = sub_1000D2C2C;
  return Event<>.init(id:)(v0[7], v0[4], v0[5]);
}

uint64_t sub_1000D2C2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000D2D54;
  else
    v4 = sub_1000D2C8C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_1000D2C8C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = swift_release(*(_QWORD *)(v0 + 80));
  v2(v4, 0, 1, v1, v6);
  KeyPath = swift_getKeyPath(&unk_100110680);
  v8 = swift_getKeyPath(&unk_1001106A8);
  sub_1000D3128(v4, v3);
  swift_retain(v5);
  static Published.subscript.setter(v3, v5, KeyPath, v8);
  sub_1000D3170(v4);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  KeyPath = swift_getKeyPath(&unk_1001106C8);
  v4 = swift_getKeyPath(&unk_1001106F0);
  *(_QWORD *)(v0 + 24) = v1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 24, v2, KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__event;
  v2 = sub_100007D50(&qword_10015ADD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__error;
  v4 = sub_100007D50(&qword_10015B830);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D2E7C()
{
  return type metadata accessor for EventController(0);
}

uint64_t type metadata accessor for EventController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015ECA8;
  if (!qword_10015ECA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventController);
  return result;
}

void sub_1000D2EC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10006A594(319, (unint64_t *)&unk_10015ECB8, &qword_10015ADE0);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006A594(319, &qword_10015B798, (uint64_t *)&unk_10015B7A0);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_1000D2F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = sub_100007D50(&qword_10015B830);
  v1 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015ADD8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015ADE0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__event;
  v15 = sub_100007D50(&qword_10015A6A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_1000D3128((uint64_t)v13, (uint64_t)v11);
  Published.init(initialValue:)(v11, v8);
  sub_1000D3170((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  v16 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15EventController__error;
  v20 = 0;
  v17 = sub_100007D50((uint64_t *)&unk_10015B7A0);
  Published.init(initialValue:)(&v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v16, v3, v19);
  return v0;
}

uint64_t sub_1000D3128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015ADE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D3170(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015ADE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D31C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_100110790);
  v6[0] = v1;
  v4 = sub_1000D36D4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 56, v6, 0, 0);
  return sub_1000345D4(v1 + 56, a1);
}

uint64_t sub_1000D3250(uint64_t a1)
{
  _QWORD *v1;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  _QWORD *v11;
  _BYTE v12[40];

  sub_10003BC30(a1, (uint64_t)v12);
  KeyPath = swift_getKeyPath(&unk_100110790);
  v9 = v1;
  v10 = v12;
  v11 = v1;
  v4 = sub_1000D36D4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_10002BACC, &v8, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  sub_100007F38((uint64_t)v12, &qword_1001597E0);
  v5 = v1[5];
  v6 = v1[6];
  sub_10001BF94(v1 + 2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
}

uint64_t sub_1000D3328()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for SetlistSongPlaybackController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_1000D33C4();
  qword_10016A5A0 = result;
  return result;
}

uint64_t sub_1000D3364(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 56;
  swift_beginAccess(a1 + 56, v5, 33, 0);
  sub_1000CAD54(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000D33C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  _UNKNOWN **v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v1 = v0;
  v2 = sub_100007D50(&qword_10015AC78);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  ObservationRegistrar.init()(v5);
  if (qword_1001580C8 != -1)
    swift_once(&qword_1001580C8, sub_10005592C);
  v6 = *(os_unfair_lock_s **)(qword_10016A4D8 + 16);
  v7 = (uint64_t *)&v6[4];
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_100055968(v7, (uint64_t)v4);
  os_unfair_lock_unlock(v8);
  v9 = type metadata accessor for MusicSubscription(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100007F38((uint64_t)v4, &qword_10015AC78);
  }
  else
  {
    v12 = MusicSubscription.canBecomeSubscriber.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
    if ((v12 & 1) == 0)
    {
      v13 = type metadata accessor for AppleMusicPlayer(0);
      v14 = (char *)swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
      v14[16] = 0;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 56) = 0u;
      *((_QWORD *)v14 + 9) = 0;
      ObservationRegistrar.init()(v14);
      v15 = &off_10014ED48;
      goto LABEL_8;
    }
  }
  v13 = type metadata accessor for MusicPreviewPlayer(0);
  v14 = (char *)objc_msgSend(objc_allocWithZone((Class)v13), "init");
  v15 = &off_100149920;
LABEL_8:
  v19 = v13;
  v20 = v15;
  *(_QWORD *)&v18 = v14;
  sub_10002BAA4(&v18, v1 + 16);
  return v1;
}

uint64_t sub_1000D35A0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_1000228FC(v0 + 2);
  sub_100007F38((uint64_t)(v0 + 7), &qword_1001597E0);
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp29SetlistSongPlaybackController___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000D3608()
{
  return type metadata accessor for SetlistSongPlaybackController(0);
}

uint64_t type metadata accessor for SetlistSongPlaybackController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015ED78;
  if (!qword_10015ED78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistSongPlaybackController);
  return result;
}

uint64_t sub_1000D364C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = &unk_100110758;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000D36D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001597D8;
  if (!qword_1001597D8)
  {
    v1 = type metadata accessor for SetlistSongPlaybackController(255);
    result = swift_getWitnessTable(&unk_100110770, v1);
    atomic_store(result, (unint64_t *)&qword_1001597D8);
  }
  return result;
}

__n128 sub_1000D371C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;

  result = *a1;
  v3 = a1[1].n128_u64[0];
  v4 = a1[2].n128_u64[0];
  v5 = a1[1].n128_u8[8] & 1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u8[8] = v5;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t type metadata accessor for LineupModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LineupModule);
}

uint64_t sub_1000D3750(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001193FC, 1);
}

uint64_t sub_1000D3784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v49;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v37 = a2;
  v3 = sub_100007D00(&qword_10015EE90);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array(255, v4);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  v47 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v4, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v49 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v4, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v8 = type metadata accessor for ForEach(255, &v47);
  v46 = sub_1000D4554();
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v10 = type metadata accessor for HStack(255, v8, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _PaddingLayout);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  v45 = &protocol witness table for _PaddingLayout;
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for ScrollView(255, v11, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for VStack(0, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v34 - v19;
  v21 = type metadata accessor for ModifiedContent(0, v17, &type metadata for _PaddingLayout);
  v35 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v34 - v25;
  v28 = static HorizontalAlignment.leading.getter(v27);
  v39 = v4;
  v40 = v6;
  v41 = v36;
  v29 = VStack.init(alignment:spacing:content:)(v28, 0x4024000000000000, 0, sub_1000D4598, v38, v15, v16);
  v30 = static Edge.Set.vertical.getter(v29);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v17);
  View.padding(_:_:)(v30, 0, 1, v17, v31);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v42 = v31;
  v43 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
  sub_10005135C((uint64_t)v23, v21, (uint64_t)v26);
  v32 = *(void (**)(char *, uint64_t))(v35 + 8);
  v32(v23, v21);
  sub_1000424BC((uint64_t)v26, v21, v37);
  return ((uint64_t (*)(char *, uint64_t))v32)(v26, v21);
}

uint64_t sub_1000D3AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84[16];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v93;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  __int128 v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  void *v100;
  unint64_t v101;

  v82 = a3;
  v83 = a4;
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v81 = a2;
  v91 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v93 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v9 = type metadata accessor for ForEach(255, &v91);
  v101 = sub_1000D4554();
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v9);
  v11 = type metadata accessor for HStack(255, v9, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  v99 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v11);
  v100 = &protocol witness table for _PaddingLayout;
  v79 = v12;
  v78 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v13 = type metadata accessor for ScrollView(0, v12, v78);
  v80 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v76 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v77 = (uint64_t)&v68 - v16;
  v75 = type metadata accessor for AccessibilityTraits(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v73 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100007D50(&qword_10015EE90);
  __chkstk_darwin(v72);
  v68 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v69 = (char *)&v68 - v20;
  __chkstk_darwin(v21);
  v70 = (uint64_t)&v68 - v22;
  v71 = a1;
  v24 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_BYTE *)(a1 + 24) & 1;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  v27 = Text.init(_:tableName:bundle:comment:)(v24, v23, v26, v25, 0, 0, 0, 0, 0, 256);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.Weight.bold.getter(v27);
  v35 = Text.fontWeight(_:)(*(_QWORD *)&v34, 0, v27, v29, v33, v31);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  sub_100007D90(v27, v29, v33);
  v42 = swift_bridgeObjectRelease();
  v43 = static Font.title2.getter(v42);
  v44 = Text.font(_:)(v43, v35, v37, v41, v39);
  v46 = v45;
  LOBYTE(v29) = v47;
  v49 = v48;
  swift_release(v43);
  sub_100007D90(v35, v37, v41);
  v50 = swift_bridgeObjectRelease();
  v51 = static Edge.Set.leading.getter(v50);
  v91 = v44;
  AssociatedTypeWitness = v46;
  LOBYTE(v93) = v29 & 1;
  WitnessTable = v49;
  LOBYTE(AssociatedConformanceWitness) = v51;
  v96 = 0u;
  v97 = 0u;
  v98 = 1;
  v52 = sub_100007D50(&qword_10015CCA0);
  v53 = sub_10008F930();
  v54 = (uint64_t)v68;
  View.accessibilityHeading(_:)(1, v52, v53);
  sub_100007D90(v44, v46, v29 & 1);
  v55 = swift_bridgeObjectRelease();
  v56 = v73;
  static AccessibilityTraits.isHeader.getter(v55);
  v57 = (uint64_t)v69;
  v58 = v72;
  ModifiedContent<>.accessibility(addTraits:)(v56, v72);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v75);
  sub_1000D45A4(v54);
  v59 = v70;
  v60 = sub_1000D45E4(v57, v70);
  v61 = static Axis.Set.horizontal.getter(v60);
  v85 = v81;
  v86 = v82;
  v87 = v71;
  v62 = (uint64_t)v76;
  ScrollView.init(_:showsIndicators:content:)(v61, 0, sub_1000D462C, v84, v79, v78);
  v63 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v13);
  v64 = v77;
  sub_10005135C(v62, v13, v77);
  v65 = v80;
  v66 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  v66(v62, v13);
  sub_1000D4638(v59, v57);
  v91 = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v62, v64, v13);
  AssociatedTypeWitness = v62;
  v90[0] = v58;
  v90[1] = v13;
  v88 = sub_1000D4680();
  v89 = v63;
  sub_100042510(&v91, 2uLL, (uint64_t)v90);
  v66(v64, v13);
  sub_1000D45A4(v59);
  v66(v62, v13);
  return sub_1000D45A4(v57);
}

uint64_t sub_1000D4098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v40;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v30 = a4;
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v38 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v40 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v9 = type metadata accessor for ForEach(255, &v38);
  v37 = sub_1000D4554();
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v9);
  v11 = type metadata accessor for HStack(0, v9, v10);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _PaddingLayout);
  v29 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v27 - v18;
  v32 = a2;
  v33 = a3;
  v34 = a1;
  v21 = static VerticalAlignment.center.getter(v20);
  v22 = HStack.init(alignment:spacing:content:)(v21, 0x4034000000000000, 0, sub_1000D4734, v31, v9, v10);
  v23 = static Edge.Set.horizontal.getter(v22);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v11);
  View.padding(_:_:)(v23, 0, 1, v11, v24);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
  v35 = v24;
  v36 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_10005135C((uint64_t)v16, v14, (uint64_t)v19);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v16, v14);
  sub_1000424BC((uint64_t)v19, v14, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v19, v14);
}

uint64_t sub_1000D4324@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[5];

  v25 = a3;
  v26 = a4;
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v28[0] = v7;
  v28[1] = AssociatedTypeWitness;
  v28[2] = &type metadata for ArtistItem;
  v28[3] = WitnessTable;
  v28[4] = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v10 = type metadata accessor for ForEach(0, v28);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v23 - v15;
  v17 = *a1;
  v28[0] = v17;
  v18 = swift_allocObject(&unk_10014F240, 32, 7);
  v19 = v25;
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = sub_1000D4554();
  swift_bridgeObjectRetain(v17);
  ForEach<>.init(_:content:)(v28, sub_1000D4750, v18, v7, AssociatedTypeWitness, &type metadata for ArtistItem, WitnessTable, v20, v8);
  v27 = v20;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  sub_10005135C((uint64_t)v13, v10, (uint64_t)v16);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v13, v10);
  sub_1000424BC((uint64_t)v16, v10, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v10);
}

uint64_t sub_1000D451C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D3784(a1, a2);
}

unint64_t sub_1000D4554()
{
  unint64_t result;

  result = qword_10015EE98;
  if (!qword_10015EE98)
  {
    result = swift_getWitnessTable(&unk_100110844, &type metadata for ArtistItem);
    atomic_store(result, (unint64_t *)&qword_10015EE98);
  }
  return result;
}

uint64_t sub_1000D4598@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000D3AC8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D45A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015EE90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D45E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015EE90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D462C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000D4098(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000D4638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015EE90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D4680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EEA0;
  if (!qword_10015EEA0)
  {
    v1 = sub_100007D00(&qword_10015EE90);
    sub_10008F930();
    sub_1000D46EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EEA0);
  }
  return result;
}

unint64_t sub_1000D46EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001582C8;
  if (!qword_1001582C8)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_1001582C8);
  }
  return result;
}

uint64_t sub_1000D4734@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000D4324(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000D4740()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D4750@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 24) + 48))(*(_QWORD *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

ValueMetadata *type metadata accessor for ArtistItem()
{
  return &type metadata for ArtistItem;
}

uint64_t sub_1000D4794(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  ValueMetadata *v20;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_10015EE90);
  v4 = type metadata accessor for Array(255, v1);
  v5 = *(_QWORD *)(v2 + 16);
  v18 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v1, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v20 = &type metadata for ArtistItem;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v6 = type metadata accessor for ForEach(255, &v18);
  sub_1000D4554();
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
  v8 = type metadata accessor for HStack(255, v6, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v11 = type metadata accessor for ScrollView(255, v9, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_1000D4984(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119430, 1);
}

uint64_t sub_1000D4994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  _QWORD v42[2];
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  if (qword_1001580B8 != -1)
    swift_once(&qword_1001580B8, sub_100051460);
  v6 = qword_10016A4D0;
  v40 = qword_10016A4D0;
  KeyPath = swift_getKeyPath(&unk_100110898);
  swift_retain(v6);
  v8 = static Alignment.center.getter(v7);
  _FrameLayout.init(width:height:alignment:)(&v43, 0x4058000000000000, 0, 0x4058000000000000, 0, v8, v9);
  v39 = v43;
  v38 = v44;
  v37 = v45;
  v36 = v46;
  v34 = v48;
  v35 = v47;
  v42[0] = a1;
  v42[1] = a2;
  sub_10001DB0C();
  swift_bridgeObjectRetain(a2);
  v10 = Text.init<A>(_:)(v42, &type metadata for String);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.Weight.medium.getter(v10);
  v18 = Text.fontWeight(_:)(*(_QWORD *)&v17, 0, v10, v12, v16, v14);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  sub_100007D90(v10, v12, v16);
  v25 = swift_bridgeObjectRelease();
  v26 = static Font.subheadline.getter(v25);
  v27 = Text.font(_:)(v26, v18, v20, v24, v22);
  v29 = v28;
  LOBYTE(v6) = v30;
  v32 = v31;
  swift_release(v26);
  LOBYTE(v6) = v6 & 1;
  sub_100007D90(v18, v20, v24);
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = KeyPath;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v39;
  *(_BYTE *)(a3 + 24) = v38;
  *(_QWORD *)(a3 + 32) = v37;
  *(_BYTE *)(a3 + 40) = v36;
  *(_QWORD *)(a3 + 48) = v35;
  *(_QWORD *)(a3 + 56) = v34;
  *(_QWORD *)(a3 + 64) = v27;
  *(_QWORD *)(a3 + 72) = v29;
  *(_BYTE *)(a3 + 80) = v6;
  *(_QWORD *)(a3 + 88) = v32;
  swift_retain(KeyPath);
  swift_retain(v40);
  sub_10000F844(v27, v29, v6);
  swift_bridgeObjectRetain(v32);
  sub_100007D90(v27, v29, v6);
  swift_release(v40);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

__n128 sub_1000D4BDC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __n128 v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v5 = *v2;
  v4 = v2[1];
  v6 = static HorizontalAlignment.center.getter(a1);
  sub_1000D4994(v5, v4, (uint64_t)&v16);
  v7 = v16;
  v8 = v18;
  v9 = v19;
  v10 = v20;
  v11 = v23;
  v12 = v24;
  result = v17;
  v14 = v21;
  v15 = v22;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v7;
  *(__n128 *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  *(_OWORD *)(a2 + 72) = v14;
  *(_OWORD *)(a2 + 88) = v15;
  *(_BYTE *)(a2 + 104) = v11;
  *(_QWORD *)(a2 + 112) = v12;
  return result;
}

unint64_t sub_1000D4C80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015EEA8;
  if (!qword_10015EEA8)
  {
    v1 = sub_100007D00(qword_10015EEB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015EEA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRowViewModel()
{
  return &type metadata for SongRowViewModel;
}

void sub_1000D4CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  char *v49;

  v33[0] = &unk_100110928;
  v33[1] = &unk_100110928;
  v33[2] = &unk_100110928;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = type metadata accessor for FilterViewModel.FilterState(255, v5, v6, a4);
  v8 = type metadata accessor for Published(319, v7);
  if (v9 <= 0x3F)
  {
    v33[3] = *(_QWORD *)(v8 - 8) + 64;
    v10 = type metadata accessor for Array(255, v5);
    v11 = type metadata accessor for Published(319, v10);
    if (v12 <= 0x3F)
    {
      v33[4] = *(_QWORD *)(v11 - 8) + 64;
      sub_1000D853C(319);
      if (v14 <= 0x3F)
      {
        v34 = *(_QWORD *)(v13 - 8) + 64;
        v35 = v34;
        sub_1000D8590(319);
        if (v16 <= 0x3F)
        {
          v36 = *(_QWORD *)(v15 - 8) + 64;
          AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v5, &unk_10011790C, &unk_10011799C);
          v18 = type metadata accessor for Array(255, AssociatedTypeWitness);
          v19 = type metadata accessor for Published(319, v18);
          if (v20 <= 0x3F)
          {
            v37 = *(_QWORD *)(v19 - 8) + 64;
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
            v22 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
            v23 = type metadata accessor for Published(319, v22);
            if (v24 <= 0x3F)
            {
              v38 = *(_QWORD *)(v23 - 8) + 64;
              sub_100022780(319, &qword_10015C200, (uint64_t)&type metadata for EdgeInsets);
              if (v26 <= 0x3F)
              {
                v39 = *(_QWORD *)(v25 - 8) + 64;
                sub_100022780(319, &qword_100159240, (uint64_t)&type metadata for CGFloat);
                if (v29 <= 0x3F)
                {
                  v40 = *(_QWORD *)(v27 - 8) + 64;
                  v41 = v40;
                  v30 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v5, v6, v28);
                  v31 = type metadata accessor for Binding(319, v30);
                  if (v32 <= 0x3F)
                  {
                    v42 = *(_QWORD *)(v31 - 8) + 64;
                    v43 = &unk_100110940;
                    v44 = &unk_100110928;
                    v45 = &unk_100110940;
                    v46 = &unk_100110940;
                    v47 = &unk_100110940;
                    v48 = &unk_100110940;
                    v49 = (char *)&value witness table for Builtin.BridgeObject + 64;
                    swift_initClassMetadata2(a1, 0, 21, v33, a1 + 96);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000D4F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  v15 = (int *)type metadata accessor for FilterViewModel.FilterConfiguration(0, a8, a10, a4);
  v16 = (char *)a9 + v15[11];
  v17 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a4, v17);
  result = sub_1000DA3B0(a5, (uint64_t)a9 + v15[12]);
  *(_QWORD *)((char *)a9 + v15[13]) = a6;
  *(_QWORD *)((char *)a9 + v15[14]) = a7;
  return result;
}

double sub_1000D4FD4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100110A68);
  v2 = swift_getKeyPath(&unk_100110AA0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000D5060()
{
  return sub_1000D50BC((uint64_t)&unk_100110BC8, (uint64_t)&unk_100110C00);
}

uint64_t sub_1000D5074()
{
  return sub_1000D5060();
}

uint64_t sub_1000D5094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D5178(a1, a2, a3, a4, (uint64_t)&unk_100110BC8, (uint64_t)&unk_100110C00);
}

uint64_t sub_1000D50A8()
{
  return sub_1000D50BC((uint64_t)&unk_100110C20, (uint64_t)&unk_100110C58);
}

uint64_t sub_1000D50BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_1000D5144()
{
  return sub_1000D50A8();
}

uint64_t sub_1000D5164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D5178(a1, a2, a3, a4, (uint64_t)&unk_100110C20, (uint64_t)&unk_100110C58);
}

uint64_t sub_1000D5178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D9C7C(a1, (uint64_t)v11);
  return sub_1000D5208((uint64_t)v11, a5, a6);
}

uint64_t sub_1000D5208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  _QWORD v16[4];

  v7 = *v3;
  v8 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v7 + 80);
  v11 = *(_QWORD *)(v7 + 88);
  v16[2] = v12;
  v16[3] = v11;
  KeyPath = swift_getKeyPath(a2);
  v16[0] = v12;
  v16[1] = v11;
  v14 = swift_getKeyPath(a3);
  sub_1000D9C7C(a1, (uint64_t)v10);
  swift_retain(v3);
  static Published.subscript.setter(v10, v3, KeyPath, v14);
  return sub_1000D9CC0(a1);
}

double sub_1000D52E0()
{
  return sub_100072FC4((uint64_t)&unk_100110D80, (uint64_t)&unk_100110DB8);
}

uint64_t sub_1000D52F4(double a1)
{
  return sub_100073060((uint64_t)&unk_100110D80, (uint64_t)&unk_100110DB8, a1);
}

uint64_t sub_1000D5308@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a1;
  v2 = *v1;
  v23 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v23);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - v10;
  v12 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 88);
  v27 = v16;
  v28 = v15;
  KeyPath = swift_getKeyPath(&unk_100110B70);
  v25 = v16;
  v26 = v15;
  v18 = swift_getKeyPath(&unk_100110BA8);
  static Published.subscript.getter(v1, KeyPath, v18);
  swift_release(KeyPath);
  v19 = swift_release(v18);
  v20 = *(void (**)(char *, char *, uint64_t, __n128))(v6 + 16);
  v20(v11, v14, v5, v19);
  sub_100007F38((uint64_t)v14, &qword_10015D2A0);
  sub_1000D50A8();
  ((void (*)(char *, char *, uint64_t))v20)(v8, &v4[*(int *)(v23 + 20)], v5);
  sub_1000D9CC0((uint64_t)v4);
  sub_10009822C((uint64_t)v11, (uint64_t)v8, v24);
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v11, v5);
}

double sub_1000D54E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  double result;
  uint64_t v4;

  v0 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D5060();
  LOBYTE(v0) = v2[*(int *)(v0 + 24)];
  sub_1000D9CC0((uint64_t)v2);
  result = 0.0;
  if ((v0 & 1) == 0)
    return sub_1000D52E0() * -0.5;
  return result;
}

BOOL sub_1000D556C()
{
  return sub_1000D5844((void (*)(uint64_t))&DateInterval.start.getter);
}

double sub_1000D5578()
{
  return sub_100072FC4((uint64_t)&unk_100110D28, (uint64_t)&unk_100110D60);
}

uint64_t sub_1000D558C(double a1)
{
  return sub_100073060((uint64_t)&unk_100110D28, (uint64_t)&unk_100110D60, a1);
}

uint64_t sub_1000D55A0@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  __n128 v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a1;
  v2 = *v1;
  v23 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v23);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - v10;
  v12 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D5060();
  v15 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v15(v11, &v14[*(int *)(v12 + 20)], v5);
  sub_1000D9CC0((uint64_t)v14);
  v17 = *(_QWORD *)(v2 + 80);
  v16 = *(_QWORD *)(v2 + 88);
  v27 = v17;
  v28 = v16;
  KeyPath = swift_getKeyPath(&unk_100110B70);
  v25 = v17;
  v26 = v16;
  v19 = swift_getKeyPath(&unk_100110BA8);
  static Published.subscript.getter(v1, KeyPath, v19);
  swift_release(KeyPath);
  v20 = swift_release(v19);
  ((void (*)(char *, char *, uint64_t, __n128))v15)(v8, &v4[*(int *)(v23 + 36)], v5, v20);
  sub_100007F38((uint64_t)v4, &qword_10015D2A0);
  sub_10009822C((uint64_t)v11, (uint64_t)v8, v24);
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v11, v5);
}

void sub_1000D5784()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v0 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D5060();
  sub_1000D9CC0((uint64_t)v2);
  sub_1000D50A8();
  LOBYTE(v0) = v2[*(int *)(v0 + 24)];
  sub_1000D9CC0((uint64_t)v2);
  if ((v0 & 1) == 0)
    sub_1000D5578();
}

BOOL sub_1000D5838()
{
  return sub_1000D5844((void (*)(uint64_t))&DateInterval.end.getter);
}

BOOL sub_1000D5844(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - v13;
  v15 = sub_1000D77D0();
  a1(v15);
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v14, v8);
  v17 = sub_1000D75CC((uint64_t)v11);
  a1(v17);
  v16(v11, v8);
  v18 = sub_100007428(&qword_10015F060, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v4, v2, v18);
  v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v4, v2);
  v20(v7, v2);
  return (v19 & 1) == 0;
}

BOOL sub_1000D59E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t WitnessTable;
  char v5;

  v1 = *v0;
  sub_1000D5A78();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 80), &unk_10011790C, &unk_10011799C);
  v3 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  v5 = Collection.isEmpty.getter(v3, WitnessTable);
  swift_bridgeObjectRelease();
  return (v5 & 1) == 0;
}

uint64_t sub_1000D5A78()
{
  return sub_1000D7074((uint64_t)&unk_100110CD0, (uint64_t)&unk_100110D08);
}

uint64_t sub_1000D5A8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3, v4, &unk_10011790C, &unk_10011799C);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - v10;
  v33 = type metadata accessor for Optional(0);
  v12 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v14 = (char *)&v33 - v13;
  v34 = v1;
  v15 = sub_1000D6034(a1);
  if ((v15 & 1) != 0)
  {
    __chkstk_darwin(v15);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    KeyPath = swift_getKeyPath(&unk_100110B18);
    __chkstk_darwin(KeyPath);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    v17 = a1;
    v18 = swift_getKeyPath(&unk_100110B50);
    v19 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v35, v34, KeyPath, v18);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
    v21 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
    Set.remove(_:)(v17, v21);
    v22 = v14;
    v23 = KeyPath;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v33);
    v19(v35, 0);
  }
  else
  {
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
    __chkstk_darwin(v24);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    v23 = swift_getKeyPath(&unk_100110B18);
    __chkstk_darwin(v23);
    *(&v33 - 2) = v4;
    *(&v33 - 1) = v3;
    v18 = swift_getKeyPath(&unk_100110B50);
    v25 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v35, v34, v23, v18);
    v26 = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
    v27 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(v26 + 8));
    Set.insert(_:)(v11, v8, v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, AssociatedTypeWitness);
    v25(v35, 0);
  }
  swift_release(v23);
  swift_release(v18);
  return sub_1000D655C(v28, v29, v30, v31);
}

void sub_1000D5D98(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  ValueWitnessTable *v25;
  uint64_t v26;
  char *v27;
  NSString v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void **aBlock;
  uint64_t v34;
  Class (*v35)(uint64_t);
  ValueMetadata *v36;
  _QWORD *(*v37)();
  _QWORD *v38;
  char *v39;

  v10 = sub_100007D50(&qword_100159260);
  v11 = swift_allocObject(v10, 192, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100109440;
  v15 = sub_1000D6C84(v11, v12, v13, v14);
  *(_QWORD *)(v11 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v11 + 64) = &off_10015BAD8;
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 48) = v16;
  *(_QWORD *)(v11 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v11 + 104) = &off_10015BAB0;
  *(_BYTE *)(v11 + 72) = 7;
  *(_QWORD *)(v11 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v11 + 144) = &off_10015BB38;
  *(_BYTE *)(v11 + 112) = a1;
  *(_QWORD *)(v11 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v11 + 184) = &off_10015BB10;
  *(_QWORD *)(v11 + 152) = a2;
  *(_QWORD *)(v11 + 160) = a3;
  *(_BYTE *)(v11 + 168) = a4;
  v17 = *(_QWORD *)(a5 + 72);
  if (v17)
  {
    v18 = *(_QWORD *)(a5 + 64);
    v19 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v18 = 0;
    v19 = 0xE000000000000000;
  }
  v36 = &type metadata for AnalyticsString;
  v37 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v34 = v18;
  v35 = (Class (*)(uint64_t))v19;
  sub_1000227F8(a2, a3, a4);
  v39 = (char *)v11;
  v20 = *(_QWORD *)(v11 + 16);
  v21 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v17);
  if (v20 >= v21 >> 1)
    v39 = sub_100089D00((char *)(v21 > 1), v20 + 1, 1, (char *)v11);
  v22 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v22);
  v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v25->initializeWithCopy)((uint64_t)v24, v26);
  sub_10008A6F0(v20, (uint64_t)v24, (uint64_t *)&v39, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v27 = v39;
  v28 = String._bridgeToObjectiveC()();
  v29 = (_QWORD *)swift_allocObject(&unk_10014F538, 40, 7);
  v29[2] = 0xD00000000000001ELL;
  v29[3] = 0x80000001001131B0;
  v29[4] = v27;
  v37 = sub_100022948;
  v38 = v29;
  aBlock = _NSConcreteStackBlock;
  v34 = 1107296256;
  v35 = sub_100089C8C;
  v36 = (ValueMetadata *)&unk_10014F550;
  v30 = _Block_copy(&aBlock);
  v31 = v38;
  swift_bridgeObjectRetain(v27);
  swift_release(v31);
  AnalyticsSendEventLazy(v28, v30);
  _Block_release(v30);
  swift_bridgeObjectRelease();

}

uint64_t sub_1000D6034(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v3 = *v1;
  v4 = sub_1000D60D8();
  v7 = v3 + 80;
  v6 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, &unk_10011790C, &unk_10011799C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  LOBYTE(a1) = Set.contains(_:)(a1, v4, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t sub_1000D60D8()
{
  return sub_1000D7074((uint64_t)&unk_100110B18, (uint64_t)&unk_100110B50);
}

uint64_t sub_1000D60EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  void (*v34)(char *, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *v0;
  v2 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v2);
  v66 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v61 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v5, v4, v6);
  v7 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v62 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - v13;
  __chkstk_darwin(v15);
  v64 = (char **)((char *)&v56 - v16);
  v63 = type metadata accessor for DateInterval(0);
  v60 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v56 - v20;
  if (sub_1000D7914())
  {
    sub_1000D77D0();
    if (!sub_1000D7914())
      goto LABEL_3;
LABEL_6:
    v59 = sub_1000D7B34();
    if (!sub_1000D7914())
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_1000D75CC((uint64_t)v21);
  if (sub_1000D7914())
    goto LABEL_6;
LABEL_3:
  v59 = 0;
  if (!sub_1000D7914())
  {
LABEL_4:
    v22 = static Array._allocateUninitialized(_:)(0, v5);
    goto LABEL_8;
  }
LABEL_7:
  v22 = sub_1000D7060();
LABEL_8:
  v58 = v22;
  v23 = sub_1000D7914();
  v67 = v5;
  v65 = v4;
  if (v23)
  {
    v24 = (void *)sub_1000D60D8();
    v57 = v24;
  }
  else
  {
    v28 = v21;
    v29 = v4;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v5, &unk_10011790C, &unk_10011799C);
    v31 = static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
    if (Array._getCount()())
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v5, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
      v57 = (void *)sub_1000D9F6C(v31, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
      v24 = (void *)swift_bridgeObjectRelease();
    }
    else
    {
      v24 = (void *)swift_bridgeObjectRelease();
      v57 = &_swiftEmptySetSingleton;
    }
    v21 = v28;
  }
  v56 = v21;
  sub_1000D6F28((uint64_t)v24, v25, v26, v27);
  v33 = *((_QWORD *)v14 + 1);
  v34 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
  v35 = swift_bridgeObjectRetain(v33);
  v36 = v61;
  v34(v14, v61, v35);
  v37 = v60;
  v38 = v63;
  v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v60 + 16))(v18, v21, v63);
  sub_1000D6F28(v39, v40, v41, v42);
  v43 = v66;
  sub_1000D9C34((uint64_t)&v11[*(int *)(v36 + 48)], v66);
  v44 = ((uint64_t (*)(char *, uint64_t))v34)(v11, v36);
  v45 = v62;
  sub_1000D6F28(v44, v46, v47, v48);
  v49 = *(_QWORD *)&v45[*(int *)(v36 + 52)];
  v50 = swift_bridgeObjectRetain(v49);
  v34(v45, v36, v50);
  v51 = v64;
  sub_1000D4F28(v59, v33, v58, (uint64_t)v18, v43, v49, (uint64_t)v57, v67, v64, v65);
  sub_1000DA2B0((uint64_t)v51, v52, v53, v54);
  ((void (*)(_QWORD *, uint64_t))v34)(v51, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v56, v38);
}

uint64_t sub_1000D646C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  if (sub_1000D7448())
  {
    v2 = v0[6];
    v3 = v0[7];
    v4 = sub_100007D50(qword_100159268);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100109020;
    v6 = sub_1000D7060();
    v7 = Array.count.getter(v6, *(_QWORD *)(v1 + 80));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 56) = &type metadata for Int;
    *(_QWORD *)(v5 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v5 + 32) = v7;
    return String.init(format:_:)(v2, v3, v5);
  }
  else
  {
    if ((sub_1000D74C4() & 1) != 0)
    {
      v8 = v0[4];
      v9 = v0[5];
    }
    else
    {
      v8 = v0[2];
      v9 = v0[3];
    }
    swift_bridgeObjectRetain(v9);
  }
  return v8;
}

BOOL sub_1000D6540()
{
  return (sub_1000D74C4() & 1) == 0;
}

uint64_t sub_1000D655C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  _QWORD v26[5];
  uint64_t v27;

  v5 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v8 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v7, v6, a4);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v26 - v10;
  v26[2] = v7;
  v26[3] = v6;
  KeyPath = swift_getKeyPath(&unk_100110C78);
  v26[0] = v7;
  v26[1] = v6;
  v13 = swift_getKeyPath(&unk_100110CB0);
  LOBYTE(v27) = 0;
  swift_retain(v5);
  static Published.subscript.setter(&v27, v5, KeyPath, v13);
  v14 = static Array._allocateUninitialized(_:)(0, v7);
  v15 = sub_1000D73BC(v14, (uint64_t)&unk_100110AC0, (uint64_t)&unk_100110AF8);
  sub_1000D6F28(v15, v16, v17, v18);
  v19 = *((_QWORD *)v11 + 1);
  v20 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
  v21 = swift_bridgeObjectRetain(v19);
  v20(v11, v8, v21);
  v27 = v19;
  v22 = type metadata accessor for Array(0, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v22);
  v24 = _ArrayProtocol.filter(_:)(sub_1000DA294, v5, v22, WitnessTable);
  return sub_1000D73BC(v24, (uint64_t)&unk_100110AC0, (uint64_t)&unk_100110AF8);
}

uint64_t sub_1000D66D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  void *v36;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  void (*v41)(char *, char *, uint64_t, __n128);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[40];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v6;
  v42 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v42);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 88);
  v58 = v9;
  v59 = v10;
  KeyPath = swift_getKeyPath(&unk_100110B70);
  v56 = v9;
  v57 = v10;
  v12 = swift_getKeyPath(&unk_100110BA8);
  v39 = v1;
  static Published.subscript.getter(v1, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_release(v12);
  v41 = *(void (**)(char *, char *, uint64_t, __n128))(v4 + 16);
  v14 = v6;
  v15 = v3;
  v41(v14, v8, v3, v13);
  sub_100007F38((uint64_t)v8, &qword_10015D2A0);
  v54 = v9;
  v55 = v10;
  v16 = swift_getKeyPath(&unk_100110BC8);
  v52 = v9;
  v53 = v10;
  v17 = swift_getKeyPath(&unk_100110C00);
  v18 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v60, v1, v16, v17);
  v20 = v19;
  v21 = type metadata accessor for CompactDatePickerConfiguration(0);
  v22 = v20 + *(int *)(v21 + 20);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 40);
  v40(v22, v43, v15);
  v18(v60, 0);
  swift_release(v16);
  swift_release(v17);
  v50 = v9;
  v51 = v10;
  v23 = swift_getKeyPath(&unk_100110B70);
  v48 = v9;
  v49 = v10;
  v24 = swift_getKeyPath(&unk_100110BA8);
  v25 = v39;
  static Published.subscript.getter(v39, v23, v24);
  swift_release(v23);
  v26 = swift_release(v24);
  v27 = v43;
  v41(v43, &v8[*(int *)(v42 + 36)], v15, v26);
  sub_100007F38((uint64_t)v8, &qword_10015D2A0);
  v46 = v9;
  v47 = v10;
  v28 = swift_getKeyPath(&unk_100110C20);
  v44 = v9;
  v45 = v10;
  v29 = swift_getKeyPath(&unk_100110C58);
  v30 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v60, v25, v28, v29);
  v40(v31 + *(int *)(v21 + 20), v27, v15);
  v30(v60, 0);
  swift_release(v28);
  swift_release(v29);
  v32 = static Array._allocateUninitialized(_:)(0, v9);
  sub_1000D73BC(v32, (uint64_t)&unk_100110AC0, (uint64_t)&unk_100110AF8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, v9, &unk_10011790C, &unk_10011799C);
  v34 = static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
  if (Array._getCount()())
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v9, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
    v36 = (void *)sub_1000D9F6C(v34, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  }
  else
  {
    v36 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease();
  return sub_1000D73BC((uint64_t)v36, (uint64_t)&unk_100110B18, (uint64_t)&unk_100110B50);
}

uint64_t sub_1000D6A98()
{
  if (sub_1000D7448())
    return 1;
  else
    return sub_1000D74C4();
}

uint64_t sub_1000D6ABC(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[4];

  KeyPath = swift_getKeyPath(&unk_100110A68);
  v10 = swift_getKeyPath(&unk_100110AA0);
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v10);
}

uint64_t sub_1000D6B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1000D6C84(a1, a2, a3, a4);
  sub_10008AB1C(v5, v6, 7, a1);
  return swift_bridgeObjectRelease();
}

BOOL sub_1000D6B94(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1000D6BA4(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_1000D6BC8(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_1000D6C0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000D6B94(*a1, *a2);
}

Swift::Int sub_1000D6C20()
{
  char *v0;

  return sub_1000D6BC8(*v0);
}

void sub_1000D6C30(uint64_t a1)
{
  char *v1;

  sub_1000D6BA4(a1, *v1);
}

Swift::Int sub_1000D6C40(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_1000D6BA4((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_1000D6C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v7 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - v9;
  v11 = type metadata accessor for Optional(0);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v5, &unk_10011790C, &unk_10011797C);
  v15 = type metadata accessor for Optional(0);
  v36 = *(_QWORD *)(v15 - 8);
  v37 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - v16;
  sub_1000D6F28(v18, v19, v20, v21);
  v22 = *((_QWORD *)v10 + 1);
  v23 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
  v24 = swift_bridgeObjectRetain(v22);
  v23(v10, v7, v24);
  v40 = v22;
  v25 = type metadata accessor for Array(0, v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v25);
  Collection.first.getter(v25, WitnessTable);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v13, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  }
  else
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 216))(v5, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v5);
    v40 = v28;
    v29 = type metadata accessor for Array(0, AssociatedTypeWitness);
    v30 = swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
    Collection.first.getter(v29, v30);
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v17, 1, AssociatedTypeWitness) != 1)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, &unk_10011790C, &unk_10011795C);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v17, AssociatedTypeWitness);
      return v32;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v37);
  }
  return 0;
}

uint64_t sub_1000D6F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = *v4;
  v6 = type metadata accessor for FilterViewModel.FilterConfiguration(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v7 = type metadata accessor for Binding(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v13 - v10, (uint64_t)v4 + *(_QWORD *)(v5 + 200), v7, v9);
  Binding.wrappedValue.getter(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1000D6FD8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unsigned __int8 v4;

  KeyPath = swift_getKeyPath(&unk_100110C78);
  v2 = swift_getKeyPath(&unk_100110CB0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000D7060()
{
  return sub_1000D7074((uint64_t)&unk_100110AC0, (uint64_t)&unk_100110AF8);
}

uint64_t sub_1000D7074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000D70FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D9C7C(a1, (uint64_t)v4);
  Published.init(initialValue:)(v4, v2);
  return sub_1000D9CC0(a1);
}

uint64_t sub_1000D7184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D9C34(a1, (uint64_t)v4);
  Published.init(initialValue:)(v4, v2);
  return sub_100007F38(a1, &qword_10015D2A0);
}

uint64_t sub_1000D7220()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_100110B70);
  v2 = swift_getKeyPath(&unk_100110BA8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1000D72B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v6;

  v6 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  v4 = type metadata accessor for Array(0, AssociatedTypeWitness);
  return sub_1000D8ED0((uint64_t)&v6, v4);
}

uint64_t sub_1000D7318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v9;

  v9 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011799C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v7 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  return sub_1000D8ED0((uint64_t)&v9, v7);
}

uint64_t sub_1000D73BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

BOOL sub_1000D7448()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  char v4;

  v1 = *v0;
  sub_1000D7060();
  v2 = type metadata accessor for Array(0, *(_QWORD *)(v1 + 80));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v2);
  v4 = Collection.isEmpty.getter(v2, WitnessTable);
  swift_bridgeObjectRelease();
  return (v4 & 1) == 0;
}

uint64_t sub_1000D74C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t WitnessTable;

  v1 = *v0;
  if (sub_1000D79A4()
    && (sub_1000D7060(),
        v2 = type metadata accessor for Array(0, *(_QWORD *)(v1 + 80)),
        v3 = swift_getWitnessTable(&protocol conformance descriptor for [A], v2),
        v4 = Collection.isEmpty.getter(v2, v3),
        swift_bridgeObjectRelease(),
        (v4 & 1) != 0))
  {
    v5 = 1;
  }
  else if (sub_1000D79A4() && sub_1000D7A94())
  {
    sub_1000D7060();
    v6 = type metadata accessor for Array(0, *(_QWORD *)(v1 + 80));
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
    v5 = Collection.isEmpty.getter(v6, WitnessTable);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1000D75CC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v29 = a1;
  v3 = *v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v28 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - v8;
  v27 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v27);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(v3 + 88);
  v36 = *(_QWORD *)(v3 + 80);
  v16 = v36;
  v37 = v15;
  KeyPath = swift_getKeyPath(&unk_100110B70);
  v34 = v16;
  v35 = v15;
  v18 = swift_getKeyPath(&unk_100110BA8);
  static Published.subscript.getter(v2, KeyPath, v18);
  swift_release(KeyPath);
  v19 = swift_release(v18);
  v20 = *(void (**)(char *, char *, uint64_t, __n128))(v5 + 16);
  v20(v9, v14, v4, v19);
  sub_100007F38((uint64_t)v14, &qword_10015D2A0);
  v32 = v16;
  v33 = v15;
  v21 = swift_getKeyPath(&unk_100110B70);
  v30 = v16;
  v31 = v15;
  v22 = swift_getKeyPath(&unk_100110BA8);
  static Published.subscript.getter(v2, v21, v22);
  swift_release(v21);
  v23 = swift_release(v22);
  v24 = v28;
  v20(v28, &v11[*(int *)(v27 + 36)], v4, v23);
  sub_100007F38((uint64_t)v11, &qword_10015D2A0);
  return DateInterval.init(start:end:)(v9, v24);
}

uint64_t sub_1000D77D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v15;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - v5;
  v7 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v15 - v11;
  sub_1000D5060();
  v13 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v13(v6, &v12[*(int *)(v7 + 20)], v0);
  sub_1000D9CC0((uint64_t)v12);
  sub_1000D50A8();
  v13(v3, &v9[*(int *)(v7 + 20)], v0);
  sub_1000D9CC0((uint64_t)v9);
  return DateInterval.init(start:end:)(v6, v3);
}

BOOL sub_1000D7914()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  char v4;

  KeyPath = swift_getKeyPath(&unk_100110C78);
  v2 = swift_getKeyPath(&unk_100110CB0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return (v4 & 1) == 0;
}

BOOL sub_1000D79A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v0 = type metadata accessor for DateInterval(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - v5;
  sub_1000D77D0();
  sub_1000D75CC((uint64_t)v3);
  v7 = sub_100007428(&qword_10015F058, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v8 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v3, v0, v7);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v9(v6, v0);
  return (v8 & 1) == 0;
}

BOOL sub_1000D7A94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = *v0;
  v2 = sub_1000D60D8();
  v5 = v1 + 80;
  v4 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3, v4, &unk_10011790C, &unk_10011799C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  LOBYTE(v3) = Set.isEmpty.getter(v2, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_bridgeObjectRelease();
  return (v3 & 1) == 0;
}

uint64_t sub_1000D7B34()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t result;

  v1 = *v0;
  v2 = sub_1000D5844((void (*)(uint64_t))&DateInterval.start.getter);
  v3 = sub_1000D5844((void (*)(uint64_t))&DateInterval.end.getter);
  v4 = 1;
  if (v2)
    v4 = 2;
  if (v3)
    v5 = v4;
  else
    v5 = v2;
  v6 = sub_1000D60D8();
  v9 = v1 + 80;
  v8 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, v8, &unk_10011790C, &unk_10011799C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v12 = Set.count.getter(v6, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  swift_bridgeObjectRelease();
  result = v12 + v5;
  if (__OFADD__(v12, v5))
    __break(1u);
  return result;
}

uint64_t sub_1000D7C0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *);
  unsigned int v65;
  void (*v66)(char *, uint64_t, uint64_t);
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  v86 = a2;
  v87 = a1;
  v2 = *a2;
  v81 = type metadata accessor for Calendar.Component(0);
  v77 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v80 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v85);
  v79 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v69 = (char *)&v61 - v7;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 80);
  v13 = *(_QWORD *)(v2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, v12, &unk_10011790C, &unk_100117964);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v61 - v16;
  v84 = type metadata accessor for Calendar(0);
  v73 = *(_QWORD *)(v84 - 8);
  v18 = __chkstk_darwin(v84);
  v62 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v18);
  v72 = *(void (**)(uint64_t, uint64_t))(v13 + 200);
  v82 = v13;
  v83 = v12;
  v72(v12, v13);
  v63 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, v12, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  sub_100093160(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v11);
  v70 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v20 = v70(v17, AssociatedTypeWitness);
  v21 = v69;
  DateInterval.start.getter(v20);
  v67 = *(void (**)(char *, uint64_t))(v9 + 8);
  v67(v11, v8);
  v22 = (uint64_t)v79;
  sub_1000D5060();
  v23 = v22 + *(int *)(v85 + 20);
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  v24 = v75;
  v25 = v76;
  v66(v75, v23, v76);
  sub_1000D9CC0(v22);
  v65 = enum case for Calendar.Component.day(_:);
  v26 = v77;
  v64 = *(void (**)(char *))(v77 + 104);
  v27 = v80;
  v28 = v81;
  v64(v80);
  v29 = v24;
  v30 = v24;
  v31 = v27;
  v32 = v27;
  v33 = v62;
  v74 = Calendar.compare(_:to:toGranularity:)(v21, v29, v31);
  v77 = *(_QWORD *)(v26 + 8);
  ((void (*)(char *, uint64_t))v77)(v32, v28);
  v34 = *(void (**)(char *, uint64_t))(v78 + 8);
  v34(v30, v25);
  v35 = v21;
  v34(v21, v25);
  v78 = *(_QWORD *)(v73 + 8);
  v36.n128_f64[0] = ((double (*)(char *, uint64_t))v78)(v33, v84);
  static Calendar.current.getter(v36);
  v72(v83, v82);
  v37 = v11;
  v38 = (uint64_t)v11;
  v39 = v63;
  sub_100093160(v63, AssociatedConformanceWitness, v38);
  v40 = v70(v17, v39);
  DateInterval.start.getter(v40);
  v67(v37, v68);
  v41 = (uint64_t)v79;
  sub_1000D50A8();
  v42 = v30;
  v66(v30, v41 + *(int *)(v85 + 20), v25);
  sub_1000D9CC0(v41);
  v43 = v80;
  v44 = v81;
  ((void (*)(char *, _QWORD, uint64_t))v64)(v80, v65, v81);
  v45 = v35;
  v46 = v35;
  v47 = v43;
  v48 = Calendar.compare(_:to:toGranularity:)(v45, v42, v43);
  ((void (*)(char *, uint64_t))v77)(v47, v44);
  v34(v42, v25);
  v34(v46, v25);
  ((void (*)(char *, uint64_t))v78)(v33, v84);
  v50 = v74 < 2 && (unint64_t)(v48 + 1) < 2;
  v52 = v82;
  v51 = v83;
  v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 248))(v83, v82);
  v54 = sub_1000D60D8();
  v55 = swift_getAssociatedTypeWitness(0, v52, v51, &unk_10011790C, &unk_10011799C);
  v56 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v52, v51, v55, &unk_10011790C, &unk_100117924) + 8);
  v57 = Set.intersection(_:)(v54, v53, v55, v56);
  swift_bridgeObjectRelease();
  v58 = Set.isEmpty.getter(v57, v55, v56);
  swift_bridgeObjectRelease();
  if (!sub_1000D79A4() || (v59 = v50, sub_1000D7A94()))
  {
    v59 = v58 ^ 1;
    if (sub_1000D79A4() || !sub_1000D7A94())
      v59 &= v50;
  }
  return v59 & 1;
}

uint64_t *sub_1000D81A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 120);
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 88);
  v6 = type metadata accessor for FilterViewModel.FilterState(255, v3, v4, v5);
  v7 = type metadata accessor for Published(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
  v8 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  v9 = type metadata accessor for Array(255, v3);
  v10 = type metadata accessor for Published(0, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  v11 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v12 = sub_100007D50(&qword_10015F048);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13((uint64_t)v0 + *(_QWORD *)(*v0 + 144), v12);
  v14 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  v15 = sub_100007D50(&qword_10015F050);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v3, &unk_10011790C, &unk_10011799C);
  v18 = type metadata accessor for Array(255, AssociatedTypeWitness);
  v19 = type metadata accessor for Published(0, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
  v20 = (uint64_t)v0 + *(_QWORD *)(*v0 + 168);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_10011790C, &unk_100117924);
  v22 = type metadata accessor for Set(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v23 = type metadata accessor for Published(0, v22);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v20, v23);
  v24 = (uint64_t)v0 + *(_QWORD *)(*v0 + 176);
  v25 = sub_100007D50(&qword_10015C210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  v26 = (uint64_t)v0 + *(_QWORD *)(*v0 + 184);
  v27 = sub_100007D50(&qword_100159258);
  v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
  v28(v26, v27);
  v28((uint64_t)v0 + *(_QWORD *)(*v0 + 192), v27);
  v29 = (uint64_t)v0 + *(_QWORD *)(*v0 + 200);
  v31 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v3, v4, v30);
  v32 = type metadata accessor for Binding(0, v31);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v29, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000D8500()
{
  uint64_t v0;

  sub_1000D81A8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for FilterViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterViewModel);
}

uint64_t type metadata accessor for FilterViewModel.FilterState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterViewModel.FilterState);
}

void sub_1000D853C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015EF38)
  {
    v2 = type metadata accessor for CompactDatePickerConfiguration(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015EF38);
  }
}

void sub_1000D8590(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015EF40[0])
  {
    v2 = sub_100007D00(&qword_10015D2A0);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, qword_10015EF40);
  }
}

uint64_t type metadata accessor for FilterViewModel.FilterConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterViewModel.FilterConfiguration);
}

uint64_t sub_1000D85F4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D8640 + 4 * byte_1001108F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D8674 + 4 * asc_1001108F0[v4]))();
}

uint64_t sub_1000D8674(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D867C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D8684);
  return result;
}

uint64_t sub_1000D8690(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D8698);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D869C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D86A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1000D86B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000ABB00(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 0, 7, v6, a1 + 32);
    }
  }
}

uint64_t *sub_1000D875C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[11];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for DateInterval(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = a3[12];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Date(0);
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v16, v17, v18);
    v20 = sub_100007D50(&qword_10015D2A0);
    v19(&v16[*(int *)(v20 + 36)], &v17[*(int *)(v20 + 36)], v18);
    v21 = a3[13];
    v22 = a3[14];
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)v4 + v21) = v23;
    v24 = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)v4 + v22) = v24;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

uint64_t sub_1000D8890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 48);
  v7 = type metadata accessor for Date(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = sub_100007D50(&qword_10015D2A0);
  v8(v6 + *(int *)(v9 + 36), v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1000D894C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = a3[11];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DateInterval(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  v14 = a3[12];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v18(v15, v16, v17);
  v19 = sub_100007D50(&qword_10015D2A0);
  v18(&v15[*(int *)(v19 + 36)], &v16[*(int *)(v19 + 36)], v17);
  v20 = a3[13];
  v21 = a3[14];
  v22 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  v23 = *(_QWORD *)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v23;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  return a1;
}

_QWORD *sub_1000D8A54(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a3[11];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[12];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v17 = sub_100007D50(&qword_10015D2A0);
  v16(&v13[*(int *)(v17 + 36)], &v14[*(int *)(v17 + 36)], v15);
  v18 = a3[13];
  v19 = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  v20 = a3[14];
  v21 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D8B80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[11];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[12];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v15 = sub_100007D50(&qword_10015D2A0);
  v14(v11 + *(int *)(v15 + 36), v12 + *(int *)(v15 + 36), v13);
  v16 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  return a1;
}

_QWORD *sub_1000D8C60(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a3[11];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[12];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v16 = sub_100007D50(&qword_10015D2A0);
  v15(&v12[*(int *)(v16 + 36)], &v13[*(int *)(v16 + 36)], v14);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D8D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8D70);
}

uint64_t sub_1000D8D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DateInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      v10 = sub_100007D50(&qword_10015D2A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000D8E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D8E20);
}

uint64_t sub_1000D8E20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for DateInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_100007D50(&qword_10015D2A0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000D8EC0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100110A08, a1);
}

uint64_t sub_1000D8ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  Published.init(initialValue:)(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t sub_1000D8F68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110B70);
  v3 = swift_getKeyPath(&unk_100110BA8);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_1000D8FFC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  _QWORD v18[4];

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v18 - v12;
  sub_1000D9C34(a1, (uint64_t)v18 - v12);
  v14 = *a2;
  v18[2] = v6;
  v18[3] = v7;
  KeyPath = swift_getKeyPath(&unk_100110B70);
  v18[0] = v6;
  v18[1] = v7;
  v16 = swift_getKeyPath(&unk_100110BA8);
  sub_1000D9C34((uint64_t)v13, (uint64_t)v10);
  swift_retain(v14);
  static Published.subscript.setter(v10, v14, KeyPath, v16);
  return sub_100007F38((uint64_t)v13, &qword_10015D2A0);
}

uint64_t sub_1000D9110@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  char v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110C78);
  v5 = swift_getKeyPath(&unk_100110CB0);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000D91AC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110C78);
  v5 = swift_getKeyPath(&unk_100110CB0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

Swift::String *sub_1000D923C(uint64_t a1)
{
  Swift::String *v1;
  Swift::String *v2;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  id v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  uint64_t v83;
  Swift::String *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  _OWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  Swift::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD v118[2];
  _QWORD v119[2];
  Swift::String v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;

  v2 = v1;
  v111 = a1;
  countAndFlagsBits = v1->_countAndFlagsBits;
  v4 = sub_100007D50(&qword_10015D2A0);
  __chkstk_darwin(v4);
  v114 = (uint64_t)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for CompactDatePickerConfiguration(0);
  __chkstk_darwin(v113);
  v112 = (Swift::String *)((char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(countAndFlagsBits + 88);
  v116 = *(_QWORD *)(countAndFlagsBits + 80);
  v117 = v7;
  v109 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v116, v7, v8);
  v115 = *(_QWORD *)(v109 - 8);
  v9 = __chkstk_darwin(v109);
  v110 = (char *)&v100 - v10;
  v11 = type metadata accessor for GridItem.Size(0, v9);
  v107 = *(_QWORD *)(v11 - 8);
  v108 = v11;
  __chkstk_darwin(v11);
  v105 = (_OWORD *)((char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = sub_100007D50(&qword_10015E0C8);
  __chkstk_darwin(v106);
  v104 = (uint64_t *)((char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100007D50(&qword_100159258);
  v102 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100007D50(&qword_10015C210);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(NSBundle);
  v20 = objc_msgSend(v19, "mainBundle");
  v21._countAndFlagsBits = 0xD000000000000024;
  v103 = 0xD000000000000024;
  v120._object = (void *)0xE000000000000000;
  v21._object = (void *)0x8000000100115260;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v120._countAndFlagsBits = 0;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v120);

  v2[1] = v23;
  v24 = objc_msgSend(v19, "mainBundle");
  v121._object = (void *)0xE000000000000000;
  v25._object = (void *)0x8000000100115290;
  v25._countAndFlagsBits = 0xD000000000000025;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v121._countAndFlagsBits = 0;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v24, v26, v121);

  v2[2] = v27;
  v28 = objc_msgSend(v19, "mainBundle");
  v29._countAndFlagsBits = 0xD00000000000002CLL;
  v122._object = (void *)0xE000000000000000;
  v29._object = (void *)0x80000001001152C0;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v122._countAndFlagsBits = 0;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v122);

  v2[3] = v31;
  v32 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 176);
  memset(v118, 0, sizeof(v118));
  Published.init(initialValue:)(v118, &type metadata for EdgeInsets);
  (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v32, v18, v101);
  v33 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 184);
  *(_QWORD *)&v118[0] = 0;
  Published.init(initialValue:)(v118, &type metadata for CGFloat);
  v34 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
  v34(v33, v16, v14);
  v35 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 192);
  *(_QWORD *)&v118[0] = 0;
  Published.init(initialValue:)(v118, &type metadata for CGFloat);
  v34(v35, v16, v14);
  v36 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 208);
  *(_QWORD *)v36 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001001152F0);
  *((_QWORD *)v36 + 1) = v37;
  v36[16] = v38 & 1;
  *((_QWORD *)v36 + 3) = v39;
  v40 = (uint64_t *)((char *)&v2->_countAndFlagsBits + *(_QWORD *)(v2->_countAndFlagsBits + 216));
  v41 = objc_msgSend(v19, "mainBundle");
  v42._countAndFlagsBits = 0xD000000000000030;
  v123._object = (void *)0xE000000000000000;
  v42._object = (void *)0x8000000100115320;
  v43._countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  v123._countAndFlagsBits = 0;
  v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v42, (Swift::String_optional)0, (NSBundle)v41, v43, v123);

  v118[0] = v44;
  v45 = sub_10001DB0C();
  v46 = StringProtocol.localizedUppercase.getter(&type metadata for String, v45);
  v48 = v47;
  swift_bridgeObjectRelease(v44._object);
  *v40 = v46;
  v40[1] = v48;
  v49 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 224);
  *(_QWORD *)v49 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100115360);
  *((_QWORD *)v49 + 1) = v50;
  v49[16] = v51 & 1;
  *((_QWORD *)v49 + 3) = v52;
  v53 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 232);
  *(_QWORD *)v53 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100113220);
  *((_QWORD *)v53 + 1) = v54;
  v53[16] = v55 & 1;
  *((_QWORD *)v53 + 3) = v56;
  v57 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 240);
  *(_QWORD *)v57 = LocalizedStringKey.init(stringLiteral:)(v103, 0x8000000100115390);
  *((_QWORD *)v57 + 1) = v58;
  v57[16] = v59 & 1;
  *((_QWORD *)v57 + 3) = v60;
  v61 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 248);
  *(_QWORD *)v61 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100114CC0);
  *((_QWORD *)v61 + 1) = v62;
  v61[16] = v63 & 1;
  *((_QWORD *)v61 + 3) = v64;
  v65 = *(_QWORD *)(v2->_countAndFlagsBits + 256);
  v66 = v105;
  *v105 = xmmword_100109D50;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v107 + 104))(v66, enum case for GridItem.Size.flexible(_:), v108);
  v67 = v104;
  GridItem.init(_:spacing:alignment:)(v66, 0x4028000000000000, 0, 0, 0, 1);
  *v67 = 2;
  v68 = sub_1000B9D40(v67);
  sub_100007F38((uint64_t)v67, &qword_10015E0C8);
  *(uint64_t *)((char *)&v2->_countAndFlagsBits + v65) = (uint64_t)v68;
  v69 = (char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 200);
  v70 = v109;
  v71 = type metadata accessor for Binding(0, v109);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v111, v71);
  v72 = v110;
  Binding.wrappedValue.getter(v71);
  LOBYTE(v71) = *v72 < 1;
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 120), v118, 33, 0);
  LOBYTE(v119[0]) = v71;
  v73 = v116;
  v75 = type metadata accessor for FilterViewModel.FilterState(0, v116, v117, v74);
  sub_1000D8ED0((uint64_t)v119, v75);
  swift_endAccess(v118);
  v76 = v72[2];
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 128), v118, 33, 0);
  swift_bridgeObjectRetain(v76);
  v119[0] = v76;
  v77 = type metadata accessor for Array(0, v73);
  sub_1000D8ED0((uint64_t)v119, v77);
  swift_endAccess(v118);
  v78 = v19;
  v79 = objc_msgSend(v19, "mainBundle");
  v124._object = (void *)0xE000000000000000;
  v80._object = (void *)0x80000001001153C0;
  v80._countAndFlagsBits = 0xD000000000000025;
  v81._countAndFlagsBits = 0;
  v81._object = (void *)0xE000000000000000;
  v124._countAndFlagsBits = 0;
  v82 = NSLocalizedString(_:tableName:bundle:value:comment:)(v80, (Swift::String_optional)0, (NSBundle)v79, v81, v124);

  v83 = v70;
  v84 = v112;
  v85 = v113;
  DateInterval.start.getter(v86);
  *v84 = v82;
  *((_BYTE *)&v84->_countAndFlagsBits + *(int *)(v85 + 24)) = 0;
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 136), v118, 33, 0);
  sub_1000D70FC((uint64_t)v84);
  swift_endAccess(v118);
  v87 = objc_msgSend(v78, "mainBundle");
  v88._countAndFlagsBits = 0xD000000000000023;
  v125._object = (void *)0xE000000000000000;
  v88._object = (void *)0x80000001001153F0;
  v89._countAndFlagsBits = 0;
  v89._object = (void *)0xE000000000000000;
  v125._countAndFlagsBits = 0;
  v90 = NSLocalizedString(_:tableName:bundle:value:comment:)(v88, (Swift::String_optional)0, (NSBundle)v87, v89, v125);

  DateInterval.end.getter(v91);
  *v84 = v90;
  *((_BYTE *)&v84->_countAndFlagsBits + *(int *)(v85 + 24)) = 0;
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 144), v118, 33, 0);
  sub_1000D70FC((uint64_t)v84);
  swift_endAccess(v118);
  v92 = v114;
  sub_1000D9C34((uint64_t)v72 + *(int *)(v70 + 48), v114);
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 152), v118, 33, 0);
  sub_1000D7184(v92);
  swift_endAccess(v118);
  v93 = *(_QWORD *)((char *)v72 + *(int *)(v70 + 52));
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 160), v118, 33, 0);
  v94 = swift_bridgeObjectRetain(v93);
  v96 = v116;
  v95 = v117;
  sub_1000D72B0(v94, v116, v117);
  swift_endAccess(v118);
  v97 = *(_QWORD *)((char *)v72 + *(int *)(v83 + 56));
  swift_beginAccess((char *)v2 + *(_QWORD *)(v2->_countAndFlagsBits + 168), v118, 33, 0);
  v98 = swift_bridgeObjectRetain(v97);
  sub_1000D7318(v98, v96, v95);
  swift_endAccess(v118);
  (*(void (**)(_QWORD *, uint64_t))(v115 + 8))(v72, v83);
  return v2;
}

Swift::String *sub_1000D9BFC(uint64_t a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_1000D923C(a1);
}

uint64_t sub_1000D9C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015D2A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D9C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CompactDatePickerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D9CC0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CompactDatePickerConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D9CFC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D9D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D9D38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000D9D40(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_1000D4FD4();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_1000D9D6C(double *a1)
{
  return sub_1000D6ABC(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000D9D94()
{
  return 16;
}

__n128 sub_1000D9DA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D9DAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000D7060();
  *a1 = result;
  return result;
}

uint64_t sub_1000D9DD4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D9E3C(a1, a2, a3, a4, (uint64_t)&unk_100110AC0, (uint64_t)&unk_100110AF8);
}

uint64_t sub_1000D9DE8()
{
  return 16;
}

__n128 sub_1000D9DF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D9E00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000D60D8();
  *a1 = result;
  return result;
}

uint64_t sub_1000D9E28(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D9E3C(a1, a2, a3, a4, (uint64_t)&unk_100110B18, (uint64_t)&unk_100110B50);
}

uint64_t sub_1000D9E3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  swift_bridgeObjectRetain(*a1);
  return sub_1000D73BC(v8, a5, a6);
}

uint64_t sub_1000D9E7C()
{
  return 16;
}

__n128 sub_1000D9E88(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D9E9C()
{
  return 16;
}

__n128 sub_1000D9EA8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D9EB4()
{
  return sub_1000D5060();
}

uint64_t sub_1000D9ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D5178(a1, a2, a3, a4, (uint64_t)&unk_100110BC8, (uint64_t)&unk_100110C00);
}

uint64_t sub_1000D9EF8()
{
  return 16;
}

__n128 sub_1000D9F04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D9F10()
{
  return sub_1000D50A8();
}

uint64_t sub_1000D9F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D5178(a1, a2, a3, a4, (uint64_t)&unk_100110C20, (uint64_t)&unk_100110C58);
}

uint64_t sub_1000D9F54()
{
  return 16;
}

__n128 sub_1000D9F60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000D9F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Swift::Bool IsNativeType;
  void (*v21)(char *, unint64_t, uint64_t);
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  Swift::Int v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1;
  v49 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v48 = (char *)&v41 - v10;
  v41 = v11;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v41 - v13;
  v16 = Array.count.getter(v12, v15);
  if (v16)
  {
    v17 = v16;
    type metadata accessor for _SetStorage(0, a2, a3);
    v18 = (_QWORD *)static _SetStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v44 = Array._getCount()();
  if (!v44)
    return (uint64_t)v18;
  v19 = 0;
  v47 = (char *)(v18 + 7);
  v42 = v14;
  v43 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v19, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
      v21(v14, v5+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v19, a2);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)(v19, v5, a2);
      if (v41 != 8)
        goto LABEL_23;
      v40 = result;
      v50 = result;
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
      v21(v14, (unint64_t)&v50, a2);
      swift_unknownObjectRelease(v40);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v18;
      }
    }
    v24 = v49;
    v45 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v46 = v23;
    v45(v48, v14, a2);
    v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v18[5], a2, a3);
    v26 = -1 << *((_BYTE *)v18 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    v29 = *(_QWORD *)&v47[8 * (v27 >> 6)];
    v30 = 1 << v27;
    v31 = *(_QWORD *)(v24 + 72);
    if (((1 << v27) & v29) != 0)
    {
      v32 = ~v26;
      do
      {
        v21(v8, v18[6] + v31 * v27, a2);
        v33 = a3;
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v48, a2, *(_QWORD *)(a3 + 8));
        v35 = *(void (**)(char *, uint64_t))(v49 + 8);
        v35(v8, a2);
        if ((v34 & 1) != 0)
        {
          v35(v48, a2);
          a3 = v33;
          v14 = v42;
          v5 = v43;
          goto LABEL_7;
        }
        v27 = (v27 + 1) & v32;
        v28 = v27 >> 6;
        v29 = *(_QWORD *)&v47[8 * (v27 >> 6)];
        v30 = 1 << v27;
        a3 = v33;
      }
      while ((v29 & (1 << v27)) != 0);
      v14 = v42;
      v5 = v43;
    }
    v36 = v48;
    *(_QWORD *)&v47[8 * v28] = v30 | v29;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v18[6] + v31 * v27, v36, a2);
    v38 = v18[2];
    v22 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v22)
      break;
    v18[2] = v39;
LABEL_7:
    v19 = v46;
    if (v46 == v44)
      return (uint64_t)v18;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000DA27C()
{
  return 16;
}

__n128 sub_1000DA288(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000DA294(uint64_t a1)
{
  _QWORD *v1;

  return sub_1000D7C0C(a1, v1) & 1;
}

uint64_t sub_1000DA2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v6 = *v4;
  v7 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - v9;
  v11 = type metadata accessor for Binding(0, v7);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v17 - v14, (uint64_t)v4 + *(_QWORD *)(v6 + 200), v11, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  Binding.wrappedValue.setter(v10, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_1000DA3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015D2A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DA3F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000D5A78();
  *a1 = result;
  return result;
}

uint64_t sub_1000DA420(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D9E3C(a1, a2, a3, a4, (uint64_t)&unk_100110CD0, (uint64_t)&unk_100110D08);
}

uint64_t sub_1000DA434()
{
  return 16;
}

__n128 sub_1000DA440(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000DA454()
{
  return 16;
}

__n128 sub_1000DA460(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000DA474()
{
  return 16;
}

__n128 sub_1000DA480(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_1000DA48C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10002BE30(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    swift_retain(v10);
    v15 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v21 = *v14;
      *v13 = *v14;
      swift_retain(v21);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

double sub_1000DA598(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_1000189BC(*a1, a1[1]);
  swift_release(a1[3]);
  v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000DA620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  swift_retain(v9);
  v14 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  return a1;
}

uint64_t sub_1000DA6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_1000189BC(v9, v10);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)(a2 + v13);
    sub_100007F38(a1 + v13, &qword_1001582E8);
    v16 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v19 = *v15;
      *v14 = *v15;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
  }
  return a1;
}

uint64_t sub_1000DA808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000DA8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000189BC(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_100007F38(a1 + v10, &qword_1001582E8);
    v13 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000DA9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DA9C4);
}

uint64_t sub_1000DA9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100007D50(&qword_100158B78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t sub_1000DAA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DAA5C);
}

uint64_t sub_1000DAA5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    v7 = sub_100007D50(&qword_100158B78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AppModule(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F0C0;
  if (!qword_10015F0C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppModule);
  return result;
}

void sub_1000DAB10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100110DE8;
  v4[1] = &unk_100110E00;
  sub_1000198CC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000DAB8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119590, 1);
}

uint64_t sub_1000DAB9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v2 = v1;
  v95 = a1;
  v3 = type metadata accessor for TaskPriority(0);
  v93 = *(_QWORD *)(v3 - 8);
  v94 = v3;
  __chkstk_darwin(v3);
  v92 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppModule(0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v90 = *(_QWORD *)(v5 - 8);
  v91 = v6;
  __chkstk_darwin(v5);
  v89 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015F100);
  __chkstk_darwin(v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100007D50(&qword_10015F108);
  __chkstk_darwin(v81);
  v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100007D50(&qword_10015F110);
  __chkstk_darwin(v82);
  v80 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100007D50(&qword_10015F118);
  __chkstk_darwin(v84);
  v83 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100007D50(&qword_10015F120);
  __chkstk_darwin(v86);
  v85 = (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100007D50(&qword_10015F128);
  __chkstk_darwin(v88);
  v87 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static HorizontalAlignment.leading.getter(v17);
  v19 = *v1;
  v20 = v1[1];
  v21 = *((unsigned __int8 *)v1 + 16);
  v22 = type metadata accessor for AppViewModel(0);
  v23 = sub_100007428(&qword_10015F130, type metadata accessor for AppViewModel, (uint64_t)&unk_10010C068);
  v24 = StateObject.wrappedValue.getter(v19, v20, v21, v22, v23);
  v25 = *(unsigned __int8 *)(v24 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v24);
  v26 = 0x4028000000000000;
  if (v25)
    v26 = 0;
  *(_QWORD *)v10 = v18;
  *((_QWORD *)v10 + 1) = v26;
  v10[16] = 0;
  v27 = sub_100007D50(&qword_10015F138);
  v28 = sub_1000DB144(v2, (double *)&v10[*(int *)(v27 + 44)]);
  v29 = static Edge.Set.top.getter(v28);
  v30 = StateObject.wrappedValue.getter(v19, v20, v21, v22, v23);
  v31 = *(unsigned __int8 *)(v30 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v30);
  v32 = 0.0;
  if (v31)
    v32 = 24.0;
  v33 = EdgeInsets.init(_all:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_100007E78((uint64_t)v10, (uint64_t)v12, &qword_10015F100);
  v40 = &v12[*(int *)(v81 + 36)];
  *v40 = v29;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  v41 = sub_100007F38((uint64_t)v10, &qword_10015F100);
  v42 = static Edge.Set.horizontal.getter(v41);
  v43 = v80;
  sub_100007E78((uint64_t)v12, v80, &qword_10015F108);
  v44 = v43 + *(int *)(v82 + 36);
  *(_BYTE *)v44 = v42;
  *(_OWORD *)(v44 + 8) = 0u;
  *(_OWORD *)(v44 + 24) = 0u;
  *(_BYTE *)(v44 + 40) = 1;
  v45 = sub_100007F38((uint64_t)v12, &qword_10015F108);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v22, v23);
  v48 = *(unsigned __int8 *)(v47 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v47);
  v49 = 52.0;
  if (!v48)
    v49 = 16.0;
  v50 = EdgeInsets.init(_all:)(v49);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v57 = v83;
  sub_100007E78(v43, v83, &qword_10015F110);
  v58 = v57 + *(int *)(v84 + 36);
  *(_BYTE *)v58 = v46;
  *(double *)(v58 + 8) = v50;
  *(_QWORD *)(v58 + 16) = v52;
  *(_QWORD *)(v58 + 24) = v54;
  *(_QWORD *)(v58 + 32) = v56;
  *(_BYTE *)(v58 + 40) = 0;
  sub_100007F38(v43, &qword_10015F110);
  v59 = StateObject.wrappedValue.getter(*v2, v2[1], *((unsigned __int8 *)v2 + 16), v22, v23);
  v60 = *(_BYTE *)(v59 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v59);
  v62 = static Alignment.center.getter(v61);
  v64 = v63;
  v65 = v85;
  sub_100007E78(v57, v85, &qword_10015F118);
  v66 = v65 + *(int *)(v86 + 36);
  *(_BYTE *)v66 = (v60 & 1) == 0;
  *(_QWORD *)(v66 + 8) = v62;
  *(_QWORD *)(v66 + 16) = v64;
  sub_100007F38(v57, &qword_10015F118);
  v67 = v89;
  sub_1000DC870((uint64_t)v2, v89);
  v68 = *(unsigned __int8 *)(v90 + 80);
  v69 = (v68 + 16) & ~v68;
  v70 = swift_allocObject(&unk_10014F5E8, v69 + v91, v68 | 7);
  v71 = sub_100083584(v67, v70 + v69);
  v72 = v92;
  static TaskPriority.userInitiated.getter(v71);
  v73 = (uint64_t)v87;
  v74 = &v87[*(int *)(v88 + 36)];
  v75 = type metadata accessor for _TaskModifier(0);
  v77 = v93;
  v76 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v74[*(int *)(v75 + 20)], v72, v94);
  *(_QWORD *)v74 = &unk_10015F148;
  *((_QWORD *)v74 + 1) = v70;
  sub_100007E78(v65, v73, &qword_10015F120);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v76);
  sub_100007F38(v65, &qword_10015F120);
  return sub_100018EB4(v73, v95, &qword_10015F128);
}

uint64_t sub_1000DB144@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)();
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  double v149;
  char *v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  double *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  uint64_t *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  void (*v224)();
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double *v231;
  char *v232;
  uint64_t v233;
  uint64_t KeyPath;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;

  v231 = a2;
  v3 = type metadata accessor for AppModule(0);
  v220 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v221 = (uint64_t)&v213 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = v4;
  __chkstk_darwin(v5);
  v229 = (uint64_t)&v213 - v6;
  v217 = type metadata accessor for Divider(0);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v215 = (char *)&v213 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_100007D50(&qword_100158C80);
  __chkstk_darwin(v214);
  v219 = (char *)&v213 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v218 = (uint64_t)&v213 - v10;
  v11 = sub_100007D50(&qword_10015F150);
  __chkstk_darwin(v11);
  v239 = (uint64_t *)((char *)&v213 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v249 = (uint64_t)&v213 - v14;
  v226 = type metadata accessor for AccessibilityTraits(0);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v224 = (void (*)())((char *)&v213 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v222 = sub_100007D50(&qword_10015F158);
  __chkstk_darwin(v222);
  v223 = (char *)&v213 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v232 = (char *)&v213 - v18;
  v228 = sub_100007D50(&qword_10015F160);
  __chkstk_darwin(v228);
  v236 = (uint64_t)&v213 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v227 = (uint64_t)&v213 - v21;
  __chkstk_darwin(v22);
  v248 = (uint64_t)&v213 - v23;
  v24 = *a1;
  v25 = a1[1];
  v26 = *((unsigned __int8 *)a1 + 16);
  v27 = type metadata accessor for AppViewModel(0);
  v28 = sub_100007428(&qword_10015F130, type metadata accessor for AppViewModel, (uint64_t)&unk_10010C068);
  v29 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
  v30 = *(unsigned __int8 *)(v29 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v29);
  v238 = v27;
  v237 = v28;
  if (v30 == 1)
  {
    v31 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
    v32 = *(_QWORD *)(v31 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle);
    v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle + 8);
    v34 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle + 16);
    v35 = *(_QWORD *)(v31 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle + 24);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
    swift_release(v31);
    v36 = Text.init(_:tableName:bundle:comment:)(v32, v33, v34, v35, 0, 0, 0, 0, 0, 256);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    v43 = static Font.footnote.getter(v36);
    static Font.Weight.semibold.getter();
    v44 = Font.weight(_:)(v43);
    swift_release(v43);
    v45 = Text.font(_:)(v44, v36, v38, v42, v40);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    swift_release(v44);
    sub_100007D90(v36, v38, v42);
    swift_bridgeObjectRelease();
    if (qword_1001580A0 != -1)
      swift_once(&qword_1001580A0, sub_100051424);
    v52 = qword_10016A4B8;
    v250 = qword_10016A4B8;
    swift_retain(qword_10016A4B8);
    v53 = v49 & 1;
    v54 = Text.foregroundStyle<A>(_:)(&v250, v45, v47, v53, v51, &type metadata for Color, &protocol witness table for Color);
    v246 = v55;
    v247 = v54;
    v235 = v56;
    v245 = v57 & 1;
    sub_100007D90(v45, v47, v53);
    swift_release(v52);
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath(&unk_100110E68);
    v58 = static Edge.Set.bottom.getter(KeyPath);
    v24 = *a1;
    v25 = a1[1];
    v26 = *((unsigned __int8 *)a1 + 16);
    v27 = v238;
    v28 = v237;
    v59 = StateObject.wrappedValue.getter(*a1, v25, v26, v238, v237);
    LODWORD(v52) = *(unsigned __int8 *)(v59 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
    swift_release(v59);
    v60 = 0.0;
    if ((_DWORD)v52)
      v60 = 3.0;
    v244 = EdgeInsets.init(_all:)(v60);
    v243 = v61;
    v241 = v62;
    v240 = v63;
    v233 = v58;
    v64 = 1;
    v65 = &v258;
  }
  else
  {
    v64 = 0;
    v245 = 0;
    v246 = 0;
    v235 = 0;
    KeyPath = 0;
    v242 = 0;
    v233 = 0;
    v244 = 0.0;
    v243 = 0;
    v241 = 0;
    v247 = 0;
    v65 = &v257;
  }
  *(v65 - 32) = v64;
  v66 = StateObject.wrappedValue.getter(v24, v25, v26, v27, v28);
  if (*(_BYTE *)(v66 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail) == 1)
  {
    v67 = 0xD00000000000002BLL;
    v68 = 0x8000000100115450;
  }
  else
  {
    v68 = 0x8000000100115420;
    v67 = 0xD000000000000021;
  }
  v69 = LocalizedStringKey.init(stringLiteral:)(v67, v68);
  v71 = v70;
  v73 = v72;
  v75 = v74;
  swift_release(v66);
  LOWORD(v211) = 256;
  v76 = Text.init(_:tableName:bundle:comment:)(v69, v71, v73 & 1, v75, 0, 0, 0, 0, 0, v211);
  v78 = v77;
  v80 = v79;
  v82 = v81 & 1;
  v83 = static Font.title2.getter(v76);
  static Font.Weight.bold.getter(v83);
  v84 = Font.weight(_:)(v83);
  swift_release(v83);
  v85 = Text.font(_:)(v84, v76, v78, v82, v80);
  v87 = v86;
  v89 = v88;
  v91 = v90;
  swift_release(v84);
  sub_100007D90(v76, v78, v82);
  swift_bridgeObjectRelease();
  v92 = swift_getKeyPath(&unk_100110E68);
  v250 = v85;
  v251 = v87;
  v252 = v89 & 1;
  v253 = v91;
  v254 = v92;
  v255 = 2;
  v256 = 0;
  v93 = sub_100007D50(&qword_100159D08);
  v94 = sub_10003B9E0();
  v95 = (uint64_t)v223;
  View.accessibilityHeading(_:)(1, v93, v94);
  sub_100007D90(v85, v87, v89 & 1);
  swift_release(v92);
  v96 = swift_bridgeObjectRelease();
  v97 = v224;
  static AccessibilityTraits.isHeader.getter(v96);
  v98 = (uint64_t)v232;
  ModifiedContent<>.accessibility(addTraits:)(v97, v222);
  (*(void (**)(void (*)(), uint64_t))(v225 + 8))(v97, v226);
  v99 = sub_100007F38(v95, &qword_10015F158);
  v100 = static Edge.Set.bottom.getter(v99);
  v101 = v238;
  v102 = v237;
  v103 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v238, v237);
  LODWORD(v92) = *(unsigned __int8 *)(v103 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v103);
  v104 = 0.0;
  if ((_DWORD)v92)
    v104 = 7.0;
  v105 = EdgeInsets.init(_all:)(v104);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  v112 = v227;
  sub_100007E78(v98, v227, &qword_10015F158);
  v113 = v112 + *(int *)(v228 + 36);
  *(_BYTE *)v113 = v100;
  *(double *)(v113 + 8) = v105;
  *(_QWORD *)(v113 + 16) = v107;
  *(_QWORD *)(v113 + 24) = v109;
  *(_QWORD *)(v113 + 32) = v111;
  *(_BYTE *)(v113 + 40) = 0;
  sub_100007F38(v98, &qword_10015F158);
  sub_100018EB4(v112, v248, &qword_10015F160);
  v114 = *a1;
  v115 = a1[1];
  v116 = *((unsigned __int8 *)a1 + 16);
  v117 = StateObject.wrappedValue.getter(*a1, v115, v116, v101, v102);
  LODWORD(v112) = *(unsigned __int8 *)(v117 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
  swift_release(v117);
  if ((_DWORD)v112 == 1)
  {
    v118 = StateObject.wrappedValue.getter(v114, v115, v116, v101, v102);
    v119 = *(_QWORD *)(v118 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle);
    v120 = *(_QWORD *)(v118 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle + 8);
    v121 = *(unsigned __int8 *)(v118 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle + 16);
    v122 = *(_QWORD *)(v118 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle + 24);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v122);
    swift_release(v118);
    LOWORD(v212) = 256;
    v123 = Text.init(_:tableName:bundle:comment:)(v119, v120, v121, v122, 0, 0, 0, 0, 0, v212);
    v125 = v124;
    v127 = v126;
    v129 = v128 & 1;
    v130 = static Font.subheadline.getter(v123);
    static Font.Weight.regular.getter();
    v131 = Font.weight(_:)(v130);
    swift_release(v130);
    v132 = Text.font(_:)(v131, v123, v125, v129, v127);
    v134 = v133;
    v136 = v135;
    v138 = v137;
    swift_release(v131);
    sub_100007D90(v123, v125, v129);
    swift_bridgeObjectRelease();
    if (qword_1001580A0 != -1)
      swift_once(&qword_1001580A0, sub_100051424);
    v139 = qword_10016A4B8;
    v250 = qword_10016A4B8;
    swift_retain(qword_10016A4B8);
    v140 = Text.foregroundStyle<A>(_:)(&v250, v132, v134, v136 & 1, v138, &type metadata for Color, &protocol witness table for Color);
    v142 = v141;
    v232 = v143;
    LODWORD(v228) = v144 & 1;
    sub_100007D90(v132, v134, v136 & 1);
    swift_release(v139);
    swift_bridgeObjectRelease();
    v145 = swift_getKeyPath(&unk_100110E68);
    LODWORD(v227) = static Edge.Set.bottom.getter(v145);
    v146 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v238, v237);
    v147 = *(unsigned __int8 *)(v146 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail);
    swift_release(v146);
    if (v147)
      v149 = 1.0;
    else
      v149 = 0.0;
    v150 = v215;
    v151 = Divider.init()(v148);
    v152 = static Edge.Set.bottom.getter(v151);
    v153 = v216;
    v154 = (uint64_t)v219;
    v155 = v217;
    (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v219, v150, v217);
    v156 = v154 + *(int *)(v214 + 36);
    *(_BYTE *)v156 = v152;
    *(_OWORD *)(v156 + 8) = 0u;
    *(_OWORD *)(v156 + 24) = 0u;
    *(_BYTE *)(v156 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v153 + 8))(v150, v155);
    v157 = v218;
    sub_100018EB4(v154, v218, &qword_100158C80);
    sub_100007E78(v157, v154, &qword_100158C80);
    v158 = v239;
    *v239 = v140;
    v158[1] = v142;
    v159 = v228;
    *((_BYTE *)v158 + 16) = v228;
    v160 = v232;
    v158[3] = (uint64_t)v232;
    v158[4] = v145;
    v158[5] = 4;
    *((_BYTE *)v158 + 48) = 0;
    *((_BYTE *)v158 + 56) = v227;
    *((_OWORD *)v158 + 4) = 0u;
    *((_OWORD *)v158 + 5) = 0u;
    *((_BYTE *)v158 + 96) = 1;
    *((double *)v158 + 13) = v149;
    v161 = sub_100007D50(&qword_10015F178);
    sub_100007E78(v154, (uint64_t)v158 + *(int *)(v161 + 48), &qword_100158C80);
    sub_10000F844(v140, v142, v159);
    swift_bridgeObjectRetain(v160);
    swift_retain(v145);
    sub_100007F38(v157, &qword_100158C80);
    sub_100007F38(v154, &qword_100158C80);
    sub_100007D90(v140, v142, v159);
    swift_release(v145);
    swift_bridgeObjectRelease();
    v162 = sub_100007D50(&qword_10015F168);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 56))(v158, 0, 1, v162);
    sub_100018EB4((uint64_t)v158, v249, &qword_10015F150);
    v101 = v238;
    v102 = v237;
  }
  else
  {
    v163 = sub_100007D50(&qword_10015F168);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v249, 1, 1, v163);
  }
  v164 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v101, v102);
  v166 = *(_QWORD *)(v164 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID);
  v165 = *(char **)(v164 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID + 8);
  swift_bridgeObjectRetain(v165);
  swift_release(v164);
  v167 = v229;
  sub_1000DC870((uint64_t)a1, v229);
  v168 = v230;
  v232 = v165;
  if (v165)
  {
    v228 = v166;
    sub_1000DC9D4(v167);
  }
  else
  {
    v169 = StateObject.wrappedValue.getter(*(_QWORD *)v167, *(_QWORD *)(v167 + 8), *(unsigned __int8 *)(v167 + 16), v101, v102);
    sub_1000DC9D4(v167);
    v170 = *(char **)(v169 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID + 8);
    v228 = *(_QWORD *)(v169 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID);
    v232 = v170;
    swift_bridgeObjectRetain(v170);
    swift_release(v169);
  }
  v171 = *a1;
  v172 = a1[1];
  v173 = *((unsigned __int8 *)a1 + 16);
  v174 = v102;
  v175 = StateObject.wrappedValue.getter(*a1, v172, v173, v101, v102);
  v176 = *(_QWORD *)(v175 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID + 8);
  v226 = *(_QWORD *)(v175 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID);
  v229 = v176;
  swift_bridgeObjectRetain(v176);
  swift_release(v175);
  v177 = StateObject.wrappedValue.getter(v171, v172, v173, v101, v174);
  v178 = swift_getKeyPath(&unk_100110E98);
  v179 = swift_getKeyPath(&unk_100110EC0);
  static Published.subscript.getter(v177, v178, v179);
  swift_release(v177);
  swift_release(v178);
  swift_release(v179);
  v225 = v250;
  v227 = v251;
  v180 = StateObject.wrappedValue.getter(*a1, a1[1], *((unsigned __int8 *)a1 + 16), v101, v174);
  v181 = (_QWORD *)(v180 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID);
  v182 = *(_QWORD *)(v180 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID + 8);
  if (!v182
    || (v183 = *(_QWORD *)(v180 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID + 8),
        *v181 == *(_QWORD *)(v180 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID))
    && v182 == v183)
  {
    swift_release(v180);
  }
  else
  {
    v210 = _stringCompareWithSmolCheck(_:_:expecting:)(*v181, v182, *(_QWORD *)(v180 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID), v183, 0);
    swift_release(v180);
    if ((v210 & 1) == 0)
    {
      v224 = 0;
      v237 = 0;
      v184 = v221;
      v185 = v220;
      goto LABEL_29;
    }
  }
  v184 = v221;
  sub_1000DC870((uint64_t)a1, v221);
  v185 = v220;
  v186 = *(unsigned __int8 *)(v220 + 80);
  v187 = (v186 + 16) & ~v186;
  v237 = swift_allocObject(&unk_10014F638, v187 + v168, v186 | 7);
  sub_100083584(v184, v237 + v187);
  v224 = sub_1000DCB90;
LABEL_29:
  sub_1000DC870((uint64_t)a1, v184);
  v188 = *(unsigned __int8 *)(v185 + 80);
  v189 = (v188 + 16) & ~v188;
  v238 = swift_allocObject(&unk_10014F610, v189 + v168, v188 | 7);
  sub_100083584(v184, v238 + v189);
  v190 = v236;
  sub_100007E78(v248, v236, &qword_10015F160);
  v191 = v239;
  sub_100007E78(v249, (uint64_t)v239, &qword_10015F150);
  v192 = v231;
  v193 = v246;
  *(_QWORD *)v231 = v247;
  *((_QWORD *)v192 + 1) = v193;
  v194 = v235;
  *((_QWORD *)v192 + 2) = v245;
  *((_QWORD *)v192 + 3) = v194;
  v195 = v242;
  *((_QWORD *)v192 + 4) = KeyPath;
  *((_QWORD *)v192 + 5) = v195;
  v196 = v233;
  v192[6] = 0.0;
  *((_QWORD *)v192 + 7) = v196;
  v197 = v243;
  v192[8] = v244;
  *((_QWORD *)v192 + 9) = v197;
  v243 = v197;
  v198 = v240;
  *((_QWORD *)v192 + 10) = v241;
  *((_QWORD *)v192 + 11) = v198;
  v240 = v198;
  *((_BYTE *)v192 + 96) = 0;
  v199 = (int *)sub_100007D50(&qword_10015F170);
  sub_100007E78(v190, (uint64_t)v192 + v199[12], &qword_10015F160);
  sub_100007E78((uint64_t)v191, (uint64_t)v192 + v199[16], &qword_10015F150);
  v200 = (uint64_t *)((char *)v192 + v199[20]);
  v201 = v232;
  *v200 = v228;
  v200[1] = (uint64_t)v201;
  v202 = v229;
  v200[2] = v226;
  v200[3] = v202;
  v203 = v227;
  v200[4] = v225;
  v200[5] = v203;
  v204 = (uint64_t)v224;
  v205 = v237;
  v200[6] = (uint64_t)v224;
  v200[7] = v205;
  v206 = v238;
  v200[8] = (uint64_t)sub_1000DCA1C;
  v200[9] = v206;
  v207 = v235;
  v208 = KeyPath;
  sub_1000DCA58(v247, v246, v245, v235, KeyPath);
  swift_bridgeObjectRetain(v203);
  swift_bridgeObjectRetain(v201);
  swift_bridgeObjectRetain(v202);
  sub_100020C7C(v204, v205);
  sub_100020C7C((uint64_t)sub_1000DCA1C, v206);
  sub_100007F38(v249, &qword_10015F150);
  sub_100007F38(v248, &qword_10015F160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100020BA0(v204, v205);
  sub_100020BA0((uint64_t)sub_1000DCA1C, v206);
  sub_100007F38((uint64_t)v239, &qword_10015F150);
  sub_100007F38(v236, &qword_10015F160);
  return sub_1000DCA94(v247, v246, v245, v207, v208);
}

void sub_1000DC3F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OpenURLAction(0);
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AppModule(0);
  sub_100018A2C((uint64_t)v8);
  v9 = *v0;
  v10 = v1[1];
  v11 = *((unsigned __int8 *)v1 + 16);
  v12 = type metadata accessor for AppViewModel(0);
  v13 = sub_100007428(&qword_10015F130, type metadata accessor for AppViewModel, (uint64_t)&unk_10010C068);
  v14 = StateObject.wrappedValue.getter(v9, v10, v11, v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_eventURL, v2);
  swift_release(v14);
  OpenURLAction.callAsFunction(_:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  v15 = StateObject.wrappedValue.getter(*v1, v1[1], *((unsigned __int8 *)v1 + 16), v12, v13);
  v16 = v1[3];
  if (v16)
  {
    v17 = v15;
    swift_retain(v1[3]);
    sub_100067EE8(8, 0, 3u, v16);
    swift_release(v17);
    swift_release(v16);
  }
  else
  {
    v18 = v1[4];
    v19 = type metadata accessor for RemoteViewConfiguration();
    v20 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v18, v19, v20);
    __break(1u);
  }
}

void sub_1000DC5F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = ASCAppStateInstalling;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return;
  }
  v11 = *a2;
  v12 = a2[1];
  v13 = *((unsigned __int8 *)a2 + 16);
  v14 = type metadata accessor for AppViewModel(0);
  v15 = sub_100007428(&qword_10015F130, type metadata accessor for AppViewModel, (uint64_t)&unk_10010C068);
  v16 = StateObject.wrappedValue.getter(v11, v12, v13, v14, v15);
  v17 = a2[3];
  if (v17)
  {
    v18 = v16;
    swift_retain(a2[3]);
    sub_100067EE8(6, 0, 3u, v17);
    swift_release(v18);
    swift_release(v17);
  }
  else
  {
    v19 = a2[4];
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

uint64_t sub_1000DC760(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch(sub_1000DC7CC, v4, v5);
}

uint64_t sub_1000DC7CC()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (uint64_t *)v0[2];
  v3 = *v1;
  v2 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  v5 = type metadata accessor for AppViewModel(0);
  v6 = sub_100007428(&qword_10015F130, type metadata accessor for AppViewModel, (uint64_t)&unk_10010C068);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = (_QWORD *)swift_task_alloc(dword_10015B544);
  v0[7] = v7;
  *v7 = v0;
  v7[1] = sub_100058F50;
  return sub_10006797C();
}

uint64_t sub_1000DC870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DC8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AppModule(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015F144);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000FAC0;
  return sub_1000DC760(v3);
}

uint64_t sub_1000DC91C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000DC94C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000DC97C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000DC9A8(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000DC9D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppModule(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000DCA1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AppModule(0) - 8) + 80);
  sub_1000DC5F4(a1, (uint64_t *)(v1 + ((v3 + 16) & ~v3)));
}

double sub_1000DCA58(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_10000F844(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000DCA94(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_100007D90(result, a2, a3 & 1);
    swift_release(a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DCAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AppModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_1000189BC(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1000DCB90()
{
  type metadata accessor for AppModule(0);
  sub_1000DC3F4();
}

unint64_t sub_1000DCBCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F180;
  if (!qword_10015F180)
  {
    v1 = sub_100007D00(&qword_10015F128);
    sub_1000DCC50();
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F180);
  }
  return result;
}

unint64_t sub_1000DCC50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F188;
  if (!qword_10015F188)
  {
    v1 = sub_100007D00(&qword_10015F120);
    sub_10000F31C(&qword_10015F190, &qword_10015F118, (void (*)(void))sub_1000DCCEC);
    sub_10000F4E0(&qword_100158458, &qword_100158438, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F188);
  }
  return result;
}

uint64_t sub_1000DCCEC()
{
  return sub_10000F31C(&qword_10015F198, &qword_10015F110, (void (*)(void))sub_1000DCD08);
}

unint64_t sub_1000DCD08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F1A0;
  if (!qword_10015F1A0)
  {
    v1 = sub_100007D00(&qword_10015F108);
    sub_10000F4E0(&qword_10015F1A8, &qword_10015F100, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F1A0);
  }
  return result;
}

uint64_t sub_1000DCD8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v6[3];

  KeyPath = swift_getKeyPath(&unk_100110FD0);
  v6[0] = v1;
  v4 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 72, v6, 0, 0);
  return sub_1000DE340(v1 + 72, a1);
}

uint64_t sub_1000DCE34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110FD0);
  v7[0] = v3;
  v5 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 72, v7, 0, 0);
  return sub_1000DE340(v3 + 72, a2);
}

uint64_t sub_1000DCEDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_1000DE340(a1, (uint64_t)v9);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110FD0);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000DE39C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v9, &qword_10015C6A0);
}

uint64_t sub_1000DCF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 72;
  swift_beginAccess(a1 + 72, v5, 33, 0);
  sub_1000DE2F8(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000DCFFC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100110FA8);
  v4 = v0;
  v2 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 112);
}

void sub_1000DD080(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100110FA8);
  v6 = v3;
  v5 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 112);
}

double sub_1000DD10C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100110FA8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000DE388, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000DD1B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v1[27] = v0;
  v2 = sub_100007D50(&qword_10015F2A0);
  v1[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AppleMusicSetlist(0);
  v1[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[30] = v4;
  v1[31] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v1[32] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[33] = v7;
  v1[34] = v8;
  return swift_task_switch(sub_1000DD26C, v7, v8);
}

uint64_t sub_1000DD26C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  _QWORD *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;

  v1 = *(_QWORD **)(v0 + 216);
  KeyPath = swift_getKeyPath(&unk_100110FA8);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v0 + 200) = v1;
  *(_QWORD *)(v0 + 280) = OBJC_IVAR____TtC15ShazamEventsApp17SetlistController___observationRegistrar;
  v4 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  *(_QWORD *)(v0 + 288) = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 200, KeyPath, sub_1000DE204, v3, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)(v0 + 296) = 0;
  swift_release(KeyPath);
  swift_task_dealloc(v3);
  v5 = v1[5];
  v6 = v1[6];
  sub_10001BF94(v1 + 2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 240))(v5, v6);
  if (v7)
  {
    v8 = v7;
    v9 = (_QWORD *)(v0 + 56);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v5, &unk_10011790C, &unk_100117994);
    v11 = sub_100007D50(&qword_10015F2C0);
    v12 = _arrayForceCast<A, B>(_:)(v8, AssociatedTypeWitness, v11);
    swift_bridgeObjectRelease(v8);
    if (*(_QWORD *)(v12 + 16))
    {
      sub_10003BC30(v12 + 32, v0 + 56);
    }
    else
    {
      *(_QWORD *)(v0 + 88) = 0;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v0 + 72) = 0u;
    }
    swift_bridgeObjectRelease(v12);
    v13 = *(_QWORD *)(v0 + 80);
    if (v13)
    {
      v14 = *(_QWORD *)(v0 + 216);
      v15 = *(_QWORD *)(v0 + 88);
      sub_10001BF94(v9, *(_QWORD *)(v0 + 80));
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v13, v15);
      v18 = v17;
      *(_QWORD *)(v0 + 304) = v17;
      sub_1000228FC(v9);
      v19 = *(_QWORD *)(v14 + 56);
      v20 = *(_QWORD *)(v14 + 64);
      v21 = (_QWORD *)swift_task_alloc(dword_10015FC44);
      *(_QWORD *)(v0 + 312) = v21;
      *v21 = v0;
      v21[1] = sub_1000DD8A4;
      return sub_1000EE558(*(_QWORD *)(v0 + 224), v16, v18, v19, v20);
    }
    sub_100007F38(v0 + 56, &qword_10015F2C8);
  }
  v23 = *(_QWORD **)(v0 + 216);
  v24 = v23[5];
  v25 = v23[6];
  sub_10001BF94(v23 + 2, v24);
  v26 = *(void (**)(uint64_t, uint64_t))(v25 + 232);
  v27 = swift_getAssociatedTypeWitness(255, v25, v24, &unk_10011790C, &unk_10011798C);
  v28 = type metadata accessor for Optional(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26(v24, v25);
  v31 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v27) == 1)
  {
    v32 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
    swift_release(v32);
    swift_task_dealloc(v30);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v33 = *(_QWORD *)(v0 + 216);
    v34 = type metadata accessor for Logger(0);
    sub_100029E7C(v34, (uint64_t)qword_10016A5B0);
    v35 = swift_retain_n(v33, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD **)(v0 + 216);
    if (v38)
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v63 = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = v39[5];
      v43 = v39[6];
      sub_10001BF94(v39 + 2, v42);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 152))(v42, v43);
      v46 = v45;
      *(_QWORD *)(v0 + 176) = sub_10003FCB4(v44, v45, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v46);
      swift_release_n(v39, 2);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No set list items with eventID: %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 216), 2);
    }

    v56 = *(_QWORD *)(v0 + 288);
    v57 = *(_QWORD *)(v0 + 248);
    v59 = *(_QWORD *)(v0 + 216);
    v58 = *(_QWORD *)(v0 + 224);
    v60 = swift_getKeyPath(&unk_100110FA8);
    v61 = swift_task_alloc(32);
    *(_QWORD *)(v61 + 16) = v59;
    *(_BYTE *)(v61 + 24) = 0;
    *(_QWORD *)(v0 + 184) = v59;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 184, v60, sub_1000DE388, v61, (char *)&type metadata for () + 8, v56);
    swift_release(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 120) = v27;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, v24, v27, &unk_10011790C, &unk_100117944);
    *(_QWORD *)(v0 + 128) = AssociatedConformanceWitness;
    v48 = sub_10002BA68((_QWORD *)(v0 + 96));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v31 + 32))(v48, v30, v27);
    swift_task_dealloc(v30);
    v49 = *(_QWORD *)(v0 + 120);
    v50 = *(_QWORD *)(v0 + 128);
    sub_10001BF94((_QWORD *)(v0 + 96), v49);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v49, v50);
    v52 = swift_getAssociatedTypeWitness(0, v50, v49, &unk_100117D74, &unk_100117D94);
    v53 = sub_100007D50(&qword_10015F2B0);
    v54 = _arrayForceCast<A, B>(_:)(v51, v52, v53);
    *(_QWORD *)(v0 + 320) = v54;
    swift_bridgeObjectRelease(v51);
    sub_1000228FC((_QWORD *)(v0 + 96));
    v62 = (uint64_t (*)(uint64_t))((char *)&dword_10015FCA0 + dword_10015FCA0);
    v55 = (_QWORD *)swift_task_alloc(unk_10015FCA4);
    *(_QWORD *)(v0 + 328) = v55;
    *v55 = v0;
    v55[1] = sub_1000DDE40;
    return v62(v54);
  }
}

uint64_t sub_1000DD8A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_1000DD8F8, *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 272));
}

uint64_t sub_1000DD8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 48))(v2, 1, v1) == 1)
  {
    sub_100007F38(v2, &qword_10015F2A0);
    v3 = *(_QWORD **)(v0 + 216);
    v4 = v3[5];
    v5 = v3[6];
    sub_10001BF94(v3 + 2, v4);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 232);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, &unk_10011790C, &unk_10011798C);
    v8 = type metadata accessor for Optional(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    v6(v4, v5);
    v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) != 1)
    {
      *(_QWORD *)(v0 + 120) = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &unk_10011790C, &unk_100117944);
      *(_QWORD *)(v0 + 128) = AssociatedConformanceWitness;
      v34 = sub_10002BA68((_QWORD *)(v0 + 96));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 32))(v34, v10, AssociatedTypeWitness);
      swift_task_dealloc(v10);
      v35 = *(_QWORD *)(v0 + 120);
      v36 = *(_QWORD *)(v0 + 128);
      sub_10001BF94((_QWORD *)(v0 + 96), v35);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v35, v36);
      v38 = swift_getAssociatedTypeWitness(0, v36, v35, &unk_100117D74, &unk_100117D94);
      v39 = sub_100007D50(&qword_10015F2B0);
      v40 = _arrayForceCast<A, B>(_:)(v37, v38, v39);
      *(_QWORD *)(v0 + 320) = v40;
      swift_bridgeObjectRelease(v37);
      sub_1000228FC((_QWORD *)(v0 + 96));
      v49 = (uint64_t (*)(uint64_t))((char *)&dword_10015FCA0 + dword_10015FCA0);
      v41 = (_QWORD *)swift_task_alloc(unk_10015FCA4);
      *(_QWORD *)(v0 + 328) = v41;
      *v41 = v0;
      v41[1] = sub_1000DDE40;
      return v49(v40);
    }
    v12 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    swift_release(v12);
    swift_task_dealloc(v10);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v13 = *(_QWORD *)(v0 + 216);
    v14 = type metadata accessor for Logger(0);
    sub_100029E7C(v14, (uint64_t)qword_10016A5B0);
    v15 = swift_retain_n(v13, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD **)(v0 + 216);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v50 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = v19[5];
      v23 = v19[6];
      sub_10001BF94(v19 + 2, v22);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 152))(v22, v23);
      v26 = v25;
      *(_QWORD *)(v0 + 176) = sub_10003FCB4(v24, v25, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v26);
      swift_release_n(v19, 2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No set list items with eventID: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 216), 2);
    }

  }
  else
  {
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 216);
    swift_release(*(_QWORD *)(v0 + 256));
    sub_1000DE234(v2, v28);
    *(_QWORD *)(v0 + 40) = v1;
    *(_QWORD *)(v0 + 48) = sub_100007428(&qword_10015F2B8, type metadata accessor for AppleMusicSetlist, (uint64_t)&unk_10010C6E0);
    v30 = sub_10002BA68((_QWORD *)(v0 + 16));
    sub_1000DE278(v28, (uint64_t)v30);
    KeyPath = swift_getKeyPath(&unk_100110FD0);
    v32 = swift_task_alloc(32);
    *(_QWORD *)(v32 + 16) = v29;
    *(_QWORD *)(v32 + 24) = v0 + 16;
    *(_QWORD *)(v0 + 208) = v29;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 208, KeyPath, sub_1000DE39C, v32, (char *)&type metadata for () + 8, v27);
    swift_release(KeyPath);
    swift_task_dealloc(v32);
    sub_100007F38(v0 + 16, &qword_10015C6A0);
    sub_1000DE2BC(v28);
  }
  v43 = *(_QWORD *)(v0 + 288);
  v44 = *(_QWORD *)(v0 + 248);
  v46 = *(_QWORD *)(v0 + 216);
  v45 = *(_QWORD *)(v0 + 224);
  v47 = swift_getKeyPath(&unk_100110FA8);
  v48 = swift_task_alloc(32);
  *(_QWORD *)(v48 + 16) = v46;
  *(_BYTE *)(v48 + 24) = 0;
  *(_QWORD *)(v0 + 184) = v46;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 184, v47, sub_1000DE388, v48, (char *)&type metadata for () + 8, v43);
  swift_release(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DDE40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 320);
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  return swift_task_switch(sub_1000DDEA0, *(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272));
}

uint64_t sub_1000DDEA0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 288);
  v2 = *(int **)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  swift_release(*(_QWORD *)(v0 + 256));
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v0 + 160) = v2;
  *(_QWORD *)(v0 + 168) = sub_100007428(&qword_10015F2B8, type metadata accessor for AppleMusicSetlist, (uint64_t)&unk_10010C6E0);
  v6 = sub_10002BA68((_QWORD *)(v0 + 136));
  v7 = (char *)v6 + v2[6];
  v8 = type metadata accessor for Artwork(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (char *)v6 + v2[7];
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *v6 = v4;
  v6[1] = v5;
  v6[2] = v1;
  v11 = (_QWORD *)((char *)v6 + v2[8]);
  *v11 = 0;
  v11[1] = 0;
  KeyPath = swift_getKeyPath(&unk_100110FD0);
  v13 = swift_task_alloc(32);
  *(_QWORD *)(v13 + 16) = v3;
  *(_QWORD *)(v13 + 24) = v0 + 136;
  *(_QWORD *)(v0 + 192) = v3;
  swift_bridgeObjectRetain(v5);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 192, KeyPath, sub_1000DE21C, v13, (char *)&type metadata for () + 8, v21);
  swift_release(KeyPath);
  swift_task_dealloc(v13);
  sub_100007F38(v0 + 136, &qword_10015C6A0);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 224);
  v18 = swift_getKeyPath(&unk_100110FA8);
  v19 = swift_task_alloc(32);
  *(_QWORD *)(v19 + 16) = v17;
  *(_BYTE *)(v19 + 24) = 0;
  *(_QWORD *)(v0 + 184) = v17;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 184, v18, sub_1000DE388, v19, (char *)&type metadata for () + 8, v14);
  swift_release(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DE0A4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_1000228FC(v0 + 2);
  swift_bridgeObjectRelease();
  sub_100007F38((uint64_t)(v0 + 9), &qword_10015C6A0);
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp17SetlistController___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000DE114()
{
  return type metadata accessor for SetlistController(0);
}

uint64_t type metadata accessor for SetlistController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F1E0;
  if (!qword_10015F1E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistController);
  return result;
}

uint64_t sub_1000DE158(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = "(";
  v4[2] = &unk_100110F40;
  v4[3] = &unk_100110F58;
  v4[4] = &unk_100110F70;
  v4[5] = &unk_100110F70;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000DE204()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 112) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000DE21C()
{
  uint64_t v0;

  return sub_1000DCF9C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000DE234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DE278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DE2BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DE2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015C6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DE340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015C6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000DE388()
{
  sub_1000DE204();
}

uint64_t sub_1000DE39C()
{
  return sub_1000DE21C();
}

uint64_t destroy for ShareSheet(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  result = swift_bridgeObjectRelease(a1[2]);
  if (a1[3])
    return swift_release(a1[4]);
  return result;
}

_QWORD *initializeWithCopy for ShareSheet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  a1[2] = v6;
  v8 = a2 + 3;
  v7 = a2[3];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = a2[4];
    a1[3] = v7;
    a1[4] = v9;
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *v8;
  }
  return a1;
}

_QWORD *assignWithCopy for ShareSheet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a2[3];
  if (!a1[3])
  {
    if (v10)
    {
      v13 = a2[4];
      a1[3] = v10;
      a1[4] = v13;
      swift_retain(v13);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    return a1;
  }
  if (!v10)
  {
    swift_release(a1[4]);
    goto LABEL_7;
  }
  v11 = a2[4];
  v12 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

_QWORD *assignWithTake for ShareSheet(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  if (!a1[3])
  {
    if (v6)
    {
      v9 = *(_QWORD *)(a2 + 32);
      a1[3] = v6;
      a1[4] = v9;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v6)
  {
    swift_release(a1[4]);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v8 = a1[4];
  a1[3] = v6;
  a1[4] = v7;
  swift_release(v8);
  return a1;
}

ValueMetadata *type metadata accessor for ShareSheet()
{
  return &type metadata for ShareSheet;
}

id sub_1000DE5FC()
{
  uint64_t *v0;
  uint64_t v1;
  NSArray v2;
  NSArray v3;
  id v4;
  Class isa;
  double v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;

  v1 = *v0;
  sub_100018EB4((uint64_t)(v0 + 1), (uint64_t)&v14, &qword_10015F2D8);
  swift_bridgeObjectRetain(v1);
  sub_100027640(&v14);
  v2.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100018EB4((uint64_t)&v14, (uint64_t)&v15, &qword_10015F2D8);
  if (v15)
  {
    sub_1000DE9C0();
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    sub_100050310(&v14);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone((Class)UIActivityViewController), "initWithActivityItems:applicationActivities:", v2.super.isa, v3.super.isa);

  sub_100018EB4((uint64_t)(v0 + 2), (uint64_t)v13, &qword_10015F2E0);
  sub_100018EB4((uint64_t)v13, (uint64_t)&v16, &qword_10015F2E0);
  isa = v16;
  if (v16)
  {
    type metadata accessor for ActivityType(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v4, "setExcludedActivityTypes:", isa);

  if (v0[3])
  {
    v7 = v0[4];
    v11[4] = v0[3];
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1000DE7C0;
    v11[3] = &unk_10014F728;
    v8 = _Block_copy(v11);
    v9 = v12;
    swift_retain(v7);
    *(_QWORD *)&v6 = swift_release(v9).n128_u64[0];
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v4, "setCompletionWithItemsHandler:", v8, v6);
  _Block_release(v8);
  return v4;
}

uint64_t sub_1000DE7C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  void (*v9)(void *, uint64_t, uint64_t, void *);
  uint64_t v10;
  id v11;
  id v12;

  v9 = *(void (**)(void *, uint64_t, uint64_t, void *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (a4)
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, (char *)&type metadata for Any + 8);
  else
    v10 = 0;
  swift_retain(v8);
  v11 = a2;
  v12 = a5;
  v9(a2, a3, v10, a5);
  swift_release(v8);

  return swift_bridgeObjectRelease(v10);
}

id sub_1000DE864()
{
  return sub_1000DE5FC();
}

uint64_t sub_1000DE8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000DE964();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DE8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000DE964();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000DE940(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000DE964();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000DE964()
{
  unint64_t result;

  result = qword_10015F2D0;
  if (!qword_10015F2D0)
  {
    result = swift_getWitnessTable(&unk_100111004, &type metadata for ShareSheet);
    atomic_store(result, (unint64_t *)&qword_10015F2D0);
  }
  return result;
}

uint64_t sub_1000DE9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DE9B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000DE9C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F2E8;
  if (!qword_10015F2E8)
  {
    v1 = objc_opt_self(UIActivity);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015F2E8);
  }
  return result;
}

uint64_t sub_1000DE9FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000DEA34 + 4 * byte_1001110D0[a1]))(0xD000000000000011, 0x8000000100112ED0);
}

uint64_t sub_1000DEA34()
{
  return 0x746E657665;
}

uint64_t sub_1000DEA48()
{
  return 0x747369747261;
}

uint64_t sub_1000DEA5C()
{
  return 0x65756E6576;
}

uint64_t sub_1000DEA70(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_1000DEA88(char a1)
{
  if ((a1 & 1) != 0)
    return 1701667182;
  else
    return 25705;
}

uint64_t sub_1000DEAAC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6449707061;
  else
    return 0x7972746E756F63;
}

uint64_t sub_1000DEAE0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x6574656D61726170;
}

void sub_1000DEB18(char *a1)
{
  sub_10005FC00(*a1);
}

void sub_1000DEB24()
{
  char *v0;

  sub_10005FE60(*v0);
}

void sub_1000DEB2C(uint64_t a1)
{
  char *v1;

  sub_1000602FC(a1, *v1);
}

void sub_1000DEB34(uint64_t a1)
{
  char *v1;

  sub_10006044C(a1, *v1);
}

unint64_t sub_1000DEB3C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000DFB50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000DEB68@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000DE9FC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_1000DEB90(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000DEBA8()
{
  char *v0;

  return sub_1000DEA88(*v0);
}

uint64_t sub_1000DEBB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000DFB98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000DEBD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E00A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEBFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E00A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEC24(char *a1, char *a2)
{
  return sub_10005FB64(*a1, *a2);
}

Swift::Int sub_1000DEC30()
{
  char *v0;

  return sub_10005FF3C(*v0);
}

uint64_t sub_1000DEC38(uint64_t a1)
{
  char *v1;

  return sub_1000602A8(a1, *v1);
}

Swift::Int sub_1000DEC40(uint64_t a1)
{
  char *v1;

  return sub_100060524(a1, *v1);
}

uint64_t sub_1000DEC48@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147E08, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1000DECA4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000DEAAC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000DECCC()
{
  char *v0;

  return sub_1000DEAE0(*v0);
}

uint64_t sub_1000DECD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000DFC58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000DECF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E031C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DED20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E031C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DED48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[10];
  v2 = v0[11];
  v3 = v1;
  if (v2 == 1)
  {
    v4 = v0[8];
    v5 = v0[9];
    swift_bridgeObjectRetain(v5);
    v3 = sub_1000611DC(v4, v5);
    v7 = v6;
    swift_bridgeObjectRelease(v5);
    v8 = v0[10];
    v9 = v0[11];
    v0[10] = v3;
    v0[11] = v7;
    swift_bridgeObjectRetain(v7);
    sub_1000DF9C4(v8, v9);
  }
  sub_1000E09CC(v1, v2);
  return v3;
}

uint64_t sub_1000DEDE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000DEE1C + 4 * byte_1001110D5[a1]))(0xD000000000000019, 0x8000000100115580);
}

uint64_t sub_1000DEE1C()
{
  return 0x65636976726573;
}

uint64_t sub_1000DEE34()
{
  return 0x7470697263736564;
}

uint64_t sub_1000DEE54()
{
  return 0x6574497972657571;
}

uint64_t sub_1000DEE70()
{
  unsigned __int8 *v0;

  return sub_1000DEDE4(*v0);
}

uint64_t sub_1000DEE78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000DFD40(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000DEE9C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000DEEA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000DF980();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEED0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000DF980();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEEF8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000DF9C4(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for RemoteViewConfiguration()
{
  return objc_opt_self(_TtC15ShazamEventsApp23RemoteViewConfiguration);
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem()
{
  return &type metadata for RemoteViewConfiguration.QueryItem;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.Service(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service()
{
  return &type metadata for RemoteViewConfiguration.Service;
}

uint64_t sub_1000DF004(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[2];
  char v24;

  v3 = v1;
  v5 = sub_100007D50(&qword_10015F3E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001BF94(a1, v9);
  v11 = sub_1000DF980();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.CodingKeys, &type metadata for RemoteViewConfiguration.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 24);
  v13 = *(_BYTE *)(v3 + 32);
  v23[0] = *(_QWORD *)(v3 + 16);
  v23[1] = v12;
  v24 = v13;
  HIBYTE(v22) = 0;
  v14 = sub_1000DFA60();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, &type metadata for RemoteViewConfiguration.Service, v14);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23[0] = *(_QWORD *)(v3 + 40);
  HIBYTE(v22) = 1;
  v15 = sub_100007D50(&qword_10015F3C8);
  v16 = sub_1000DFAA4(&qword_10015F3F0, (void (*)(void))sub_1000DFB0C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, (char *)&v22 + 7, v5, v15, v16);
  v17 = *(_QWORD *)(v3 + 48);
  v18 = *(_QWORD *)(v3 + 56);
  LOBYTE(v23[0]) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v23, v5);
  v19 = *(_QWORD *)(v3 + 64);
  v20 = *(_QWORD *)(v3 + 72);
  LOBYTE(v23[0]) = 3;
  swift_bridgeObjectRetain(v20);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v23, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1000DF1F0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  char v26;

  v3 = v1;
  v23 = *v1;
  v5 = sub_100007D50(&qword_10015F3B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[8] = 0;
  v1[9] = 0;
  v1[10] = 0;
  v1[11] = 1;
  v9 = a1[3];
  v10 = a1[4];
  sub_10001BF94(a1, v9);
  v11 = sub_1000DF980();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.CodingKeys, &type metadata for RemoteViewConfiguration.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v17 = v23;
    swift_bridgeObjectRelease();
    sub_1000DF9C4(v3[10], v3[11]);
    swift_deallocPartialClassInstance(v3, v17, 96, 7);
  }
  else
  {
    v26 = 0;
    v12 = sub_1000DF9D8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for RemoteViewConfiguration.Service, &v26, v5, &type metadata for RemoteViewConfiguration.Service, v12);
    v13 = v24[1];
    v14 = v25;
    v1[2] = v24[0];
    v1[3] = v13;
    *((_BYTE *)v1 + 32) = v14;
    v15 = sub_100007D50(&qword_10015F3C8);
    v26 = 1;
    v16 = sub_1000DFAA4(&qword_10015F3D0, (void (*)(void))sub_1000DFA1C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v24, v15, &v26, v5, v15, v16);
    v3[5] = v24[0];
    LOBYTE(v24[0]) = 2;
    v3[6] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v24, v5);
    v3[7] = v19;
    LOBYTE(v24[0]) = 3;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v24, v5);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v3[8] = v20;
    v3[9] = v22;
    swift_bridgeObjectRelease();
  }
  sub_1000228FC(a1);
  return v3;
}

uint64_t sub_1000DF494(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_100007D50(&qword_10015F418);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001BF94(a1, v12);
  v14 = sub_1000E00A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.Service.CodingKeys, &type metadata for RemoteViewConfiguration.Service.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v20 = v18;
    v19 = 1;
    v15 = sub_1000E0128();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v8, &type metadata for RemoteViewConfiguration.Service.Name, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000DF5D0(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v7 = a2 & 1;
  v8 = sub_100007D50(&qword_10015F448);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001BF94(a1, v12);
  v14 = sub_1000E031C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, v14, v12, v13);
  v21 = v7;
  v20 = 0;
  v15 = sub_1000E03A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v8, &type metadata for RemoteViewConfiguration.QueryItem.Parameter, v15);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

_QWORD *sub_1000DF70C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *result;

  v6 = swift_allocObject(v2, 96, 7);
  result = sub_1000DF1F0(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_1000DF760(_QWORD *a1)
{
  return sub_1000DF004(a1);
}

uint64_t sub_1000DF780@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000DF790@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1000DFEF4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000DF7BC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000DF494(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1000DF7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000E016C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000DF834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000E016C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000DF880@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000E01B0(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1000DF8B0(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000DF5D0(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000DF8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000E03E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000DF928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000E03E8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *sub_1000DF974()
{
  return &protocol witness table for String;
}

unint64_t sub_1000DF980()
{
  unint64_t result;

  result = qword_10015F3B8;
  if (!qword_10015F3B8)
  {
    result = swift_getWitnessTable(&unk_100111770, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F3B8);
  }
  return result;
}

uint64_t sub_1000DF9C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1000DF9D8()
{
  unint64_t result;

  result = qword_10015F3C0;
  if (!qword_10015F3C0)
  {
    result = swift_getWitnessTable(&unk_100111264, &type metadata for RemoteViewConfiguration.Service);
    atomic_store(result, (unint64_t *)&qword_10015F3C0);
  }
  return result;
}

unint64_t sub_1000DFA1C()
{
  unint64_t result;

  result = qword_10015F3D8;
  if (!qword_10015F3D8)
  {
    result = swift_getWitnessTable(&unk_1001111C4, &type metadata for RemoteViewConfiguration.QueryItem);
    atomic_store(result, (unint64_t *)&qword_10015F3D8);
  }
  return result;
}

unint64_t sub_1000DFA60()
{
  unint64_t result;

  result = qword_10015F3E8;
  if (!qword_10015F3E8)
  {
    result = swift_getWitnessTable(&unk_10011123C, &type metadata for RemoteViewConfiguration.Service);
    atomic_store(result, (unint64_t *)&qword_10015F3E8);
  }
  return result;
}

uint64_t sub_1000DFAA4(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100007D00(&qword_10015F3C8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000DFB0C()
{
  unint64_t result;

  result = qword_10015F3F8;
  if (!qword_10015F3F8)
  {
    result = swift_getWitnessTable(&unk_10011119C, &type metadata for RemoteViewConfiguration.QueryItem);
    atomic_store(result, (unint64_t *)&qword_10015F3F8);
  }
  return result;
}

unint64_t sub_1000DFB50(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147D70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1000DFB98(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000DFC58(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6574656D61726170 && a2 == 0xE900000000000072;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574656D61726170, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000DFD40(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x65636976726573 && a2 == 0xE700000000000000;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65636976726573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0x6574497972657571 && a2 == 0xEA0000000000736DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574497972657571, 0xEA0000000000736DLL, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100115580)
  {
    swift_bridgeObjectRelease(0x8000000100115580);
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100115580, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000DFEF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = sub_100007D50(&qword_10015F400);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001BF94(a1, v7);
  v9 = sub_1000E00A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.Service.CodingKeys, &type metadata for RemoteViewConfiguration.Service.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_1000228FC(a1);
  }
  else
  {
    BYTE1(v16) = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v16 + 1, v3);
    v12 = v11;
    v15 = 1;
    v13 = sub_1000E00E4();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for RemoteViewConfiguration.Service.Name, &v15, v3, &type metadata for RemoteViewConfiguration.Service.Name, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000228FC(a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1000E00A0()
{
  unint64_t result;

  result = qword_10015F408;
  if (!qword_10015F408)
  {
    result = swift_getWitnessTable(&unk_100111720, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F408);
  }
  return result;
}

unint64_t sub_1000E00E4()
{
  unint64_t result;

  result = qword_10015F410;
  if (!qword_10015F410)
  {
    result = swift_getWitnessTable(&unk_100111214, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_10015F410);
  }
  return result;
}

unint64_t sub_1000E0128()
{
  unint64_t result;

  result = qword_10015F420;
  if (!qword_10015F420)
  {
    result = swift_getWitnessTable(&unk_1001111EC, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_10015F420);
  }
  return result;
}

unint64_t sub_1000E016C()
{
  unint64_t result;

  result = qword_10015F428;
  if (!qword_10015F428)
  {
    result = swift_getWitnessTable(&unk_1001116E8, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_10015F428);
  }
  return result;
}

uint64_t sub_1000E01B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v3 = sub_100007D50(&qword_10015F430);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001BF94(a1, v7);
  v9 = sub_1000E031C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v14 = 0;
    v10 = sub_1000E0360();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for RemoteViewConfiguration.QueryItem.Parameter, &v14, v3, &type metadata for RemoteViewConfiguration.QueryItem.Parameter, v10);
    v7 = v15;
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_1000228FC(a1);
  return v7;
}

unint64_t sub_1000E031C()
{
  unint64_t result;

  result = qword_10015F438;
  if (!qword_10015F438)
  {
    result = swift_getWitnessTable(&unk_100111698, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F438);
  }
  return result;
}

unint64_t sub_1000E0360()
{
  unint64_t result;

  result = qword_10015F440;
  if (!qword_10015F440)
  {
    result = swift_getWitnessTable(&unk_100111174, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_10015F440);
  }
  return result;
}

unint64_t sub_1000E03A4()
{
  unint64_t result;

  result = qword_10015F450;
  if (!qword_10015F450)
  {
    result = swift_getWitnessTable(&unk_10011114C, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_10015F450);
  }
  return result;
}

unint64_t sub_1000E03E8()
{
  unint64_t result;

  result = qword_10015F458;
  if (!qword_10015F458)
  {
    result = swift_getWitnessTable(&unk_100111660, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_10015F458);
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.Service.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000E049C + 4 * byte_1001110DE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000E04D0 + 4 * byte_1001110D9[v4]))();
}

uint64_t sub_1000E04D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E04D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E04E0);
  return result;
}

uint64_t sub_1000E04EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E04F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000E04F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.CodingKeys()
{
  return &type metadata for RemoteViewConfiguration.CodingKeys;
}

uint64_t _s15ShazamEventsApp23RemoteViewConfigurationC9QueryItemV9ParameterOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000E0568 + 4 * byte_1001110E8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E059C + 4 * byte_1001110E3[v4]))();
}

uint64_t sub_1000E059C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E05A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E05ACLL);
  return result;
}

uint64_t sub_1000E05B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E05C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000E05C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E05CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.QueryItem.Parameter()
{
  return &type metadata for RemoteViewConfiguration.QueryItem.Parameter;
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000E0634 + 4 * byte_1001110F2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000E0668 + 4 * byte_1001110ED[v4]))();
}

uint64_t sub_1000E0668(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0670(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E0678);
  return result;
}

uint64_t sub_1000E0684(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E068CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000E0690(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0698(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteViewConfiguration.Service.Name()
{
  return &type metadata for RemoteViewConfiguration.Service.Name;
}

unint64_t sub_1000E06B8()
{
  unint64_t result;

  result = qword_10015F460;
  if (!qword_10015F460)
  {
    result = swift_getWitnessTable(&unk_1001113A8, &type metadata for RemoteViewConfiguration.Service.Name);
    atomic_store(result, (unint64_t *)&qword_10015F460);
  }
  return result;
}

unint64_t sub_1000E0700()
{
  unint64_t result;

  result = qword_10015F468;
  if (!qword_10015F468)
  {
    result = swift_getWitnessTable(&unk_100111410, &type metadata for RemoteViewConfiguration.QueryItem.Parameter);
    atomic_store(result, (unint64_t *)&qword_10015F468);
  }
  return result;
}

unint64_t sub_1000E0748()
{
  unint64_t result;

  result = qword_10015F470;
  if (!qword_10015F470)
  {
    result = swift_getWitnessTable(&unk_1001114C8, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F470);
  }
  return result;
}

unint64_t sub_1000E0790()
{
  unint64_t result;

  result = qword_10015F478;
  if (!qword_10015F478)
  {
    result = swift_getWitnessTable(&unk_100111580, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F478);
  }
  return result;
}

unint64_t sub_1000E07D8()
{
  unint64_t result;

  result = qword_10015F480;
  if (!qword_10015F480)
  {
    result = swift_getWitnessTable(&unk_100111638, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F480);
  }
  return result;
}

unint64_t sub_1000E0820()
{
  unint64_t result;

  result = qword_10015F488;
  if (!qword_10015F488)
  {
    result = swift_getWitnessTable(&unk_1001115A8, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F488);
  }
  return result;
}

unint64_t sub_1000E0868()
{
  unint64_t result;

  result = qword_10015F490;
  if (!qword_10015F490)
  {
    result = swift_getWitnessTable(&unk_1001115D0, &type metadata for RemoteViewConfiguration.QueryItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F490);
  }
  return result;
}

unint64_t sub_1000E08B0()
{
  unint64_t result;

  result = qword_10015F498;
  if (!qword_10015F498)
  {
    result = swift_getWitnessTable(&unk_1001114F0, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F498);
  }
  return result;
}

unint64_t sub_1000E08F8()
{
  unint64_t result;

  result = qword_10015F4A0;
  if (!qword_10015F4A0)
  {
    result = swift_getWitnessTable(&unk_100111518, &type metadata for RemoteViewConfiguration.Service.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4A0);
  }
  return result;
}

unint64_t sub_1000E0940()
{
  unint64_t result;

  result = qword_10015F4A8;
  if (!qword_10015F4A8)
  {
    result = swift_getWitnessTable(&unk_100111438, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015F4A8);
  }
  return result;
}

unint64_t sub_1000E0988()
{
  unint64_t result;

  result = qword_10015F4B0[0];
  if (!qword_10015F4B0[0])
  {
    result = swift_getWitnessTable(&unk_100111460, &type metadata for RemoteViewConfiguration.CodingKeys);
    atomic_store(result, qword_10015F4B0);
  }
  return result;
}

uint64_t sub_1000E09CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

void sub_1000E09E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001117D0;
  v4[1] = &unk_1001117E8;
  v4[2] = &unk_100111800;
  sub_10002C488(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 48);
  }
}

unint64_t sub_1000E0A6C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v21);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10002BE30(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    v12 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    v13 = *(int *)(a3 + 60);
    v14 = (uint64_t *)(a1 + v13);
    v15 = (uint64_t *)(a2 + v13);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    swift_retain(v10);
    swift_retain(v12);
    v16 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = v14;
      v19 = v16;
      v20 = 1;
    }
    else
    {
      v22 = *v15;
      *v14 = *v15;
      swift_retain(v22);
      v18 = v14;
      v19 = v16;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  return a1;
}

double sub_1000E0B88(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_1000189BC(*a1, a1[1]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 60));
  v5 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E0C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = *(int *)(a3 + 60);
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v9);
  swift_retain(v11);
  v15 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  return a1;
}

uint64_t sub_1000E0D00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_1000189BC(v9, v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain(v14);
  swift_release(v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 60);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_100007F38(a1 + v15, qword_100158AC8);
    v18 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  return a1;
}

uint64_t sub_1000E0E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 60);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000E0EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000189BC(v7, v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 60);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_100007F38(a1 + v12, qword_100158AC8);
    v15 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000E0FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E1004);
}

uint64_t sub_1000E1004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_1000E1084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E1090);
}

uint64_t sub_1000E1090(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158670);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ArtistEventView);
}

uint64_t sub_1000E1114(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_10011977C, 1);
}

uint64_t sub_1000E1148(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t WitnessTable;
  _OWORD v11[2];

  v4 = *v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v11[0] = *(_OWORD *)(a1 + 16);
  v11[1] = v7;
  v8 = type metadata accessor for ArtistEventViewModel(0, (uint64_t)v11);
  WitnessTable = swift_getWitnessTable(&unk_100112B18, v8);
  return a2(v4, v5, v6, v8, WitnessTable);
}

uint64_t sub_1000E11C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t KeyPath;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  ValueMetadata *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  char *v114;
  __n128 v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  char *v126;
  __n128 v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200[8];
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  ValueMetadata *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;

  v174 = a2;
  v173 = type metadata accessor for TaskPriority(0);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v171 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = *(_QWORD *)(a1 - 8);
  v188 = *(_QWORD *)(v170 + 64);
  __chkstk_darwin(v4);
  v185 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  v190 = a1;
  v7 = type metadata accessor for Optional(255);
  v186 = type metadata accessor for Binding(0, v7);
  v178 = *(_QWORD *)(v186 - 8);
  v8 = __chkstk_darwin(v186);
  v176 = (char **)((char *)&v148 - v9);
  v187 = type metadata accessor for NavigationPath(255, v8);
  v10 = sub_100007D00(&qword_10015F538);
  sub_100007D00(&qword_100159898);
  v11 = type metadata accessor for Array(255, v6);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(v12 + 16);
  v189 = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v6, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v15 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, v6, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v214 = v11;
  v215 = (ValueMetadata *)AssociatedTypeWitness;
  v216 = v15;
  v217 = WitnessTable;
  v218 = AssociatedConformanceWitness;
  type metadata accessor for ForEach(255, &v214);
  v18 = type metadata accessor for _ConditionalContent(255);
  v19 = type metadata accessor for Group(255, v18);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  v21 = type metadata accessor for ModifiedContent(255, v20, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, v21, 0, 0);
  v23 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v23);
  v25 = type metadata accessor for VStack(255, v23, v24);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v25);
  v27 = type metadata accessor for LazyVGrid(255, v25, v26);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v27);
  v30 = type metadata accessor for ObservableScrollView(255, v27, v28, v29);
  v31 = swift_getWitnessTable(&unk_10010F020, v30);
  v214 = v30;
  v215 = (ValueMetadata *)v31;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v214, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v33 = sub_100007D00(&qword_10015F548);
  v214 = v30;
  v215 = (ValueMetadata *)v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v35 = sub_10000F4E0(&qword_10015F550, &qword_10015F548, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v214 = OpaqueTypeMetadata2;
  v215 = (ValueMetadata *)v33;
  v216 = OpaqueTypeConformance2;
  v217 = v35;
  v36 = swift_getOpaqueTypeMetadata2(255, &v214, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v149 = v36;
  v214 = OpaqueTypeMetadata2;
  v215 = (ValueMetadata *)v33;
  v216 = OpaqueTypeConformance2;
  v217 = v35;
  v37 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v38 = type metadata accessor for NavigationStack(0, v187, v36, v37);
  v154 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v148 = (char *)&v148 - v39;
  v41 = type metadata accessor for EventView(255, v6, v12, v40);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v38);
  v43 = swift_getWitnessTable(&unk_10010A868, v41);
  v214 = v38;
  v215 = (ValueMetadata *)v6;
  v216 = v41;
  v217 = v42;
  v44 = v41;
  v150 = v41;
  v45 = v42;
  v153 = v42;
  v152 = v13;
  v218 = v13;
  v219 = v43;
  v46 = v43;
  v151 = v43;
  v47 = swift_getOpaqueTypeMetadata2(0, &v214, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v158 = *(_QWORD *)(v47 - 8);
  v48 = v47;
  v155 = v47;
  __chkstk_darwin(v47);
  v183 = (char *)&v148 - v49;
  v214 = v38;
  v215 = (ValueMetadata *)v6;
  v216 = v44;
  v217 = v45;
  v218 = v13;
  v219 = v46;
  v50 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v181 = v50;
  v180 = sub_1000188D0();
  v214 = v48;
  v215 = &type metadata for PromotionalAssetsContentView;
  v216 = v50;
  v217 = v180;
  v51 = swift_getOpaqueTypeMetadata2(0, &v214, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v159 = *(_QWORD *)(v51 - 8);
  v156 = v51;
  __chkstk_darwin(v51);
  v179 = (char *)&v148 - v52;
  v54 = type metadata accessor for ModifiedContent(0, v53, &type metadata for _AppearanceActionModifier);
  v161 = *(_QWORD *)(v54 - 8);
  v160 = v54;
  __chkstk_darwin(v54);
  v182 = (char *)&v148 - v55;
  v57 = type metadata accessor for ModifiedContent(0, v56, &type metadata for _AppearanceActionModifier);
  v58 = *(_QWORD *)(v57 - 8);
  v162 = v57;
  v163 = v58;
  __chkstk_darwin(v57);
  v184 = (char *)&v148 - v59;
  v60 = type metadata accessor for _TaskModifier(255);
  v61 = type metadata accessor for ModifiedContent(0, v57, v60);
  v165 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v157 = (char *)&v148 - v62;
  v63 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v167 = v61;
  v169 = type metadata accessor for ModifiedContent(0, v61, v63);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v164 = (char *)&v148 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __chkstk_darwin(v65);
  v166 = (uint64_t)&v148 - v67;
  v68 = v190;
  v201 = *(_QWORD *)(v190 + 16);
  v202 = v6;
  v69 = v201;
  v71 = v189;
  v203 = *(_QWORD *)(v190 + 32);
  v70 = v203;
  v204 = v189;
  v205 = v191;
  NavigationStack.init<>(root:)(sub_1000E635C, v200, v149, v37, v66);
  v72 = sub_1000E1148(v68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v196 = v69;
  v197 = v6;
  v198 = v70;
  v199 = v71;
  KeyPath = swift_getKeyPath(&unk_100111878);
  v214 = v69;
  v215 = (ValueMetadata *)v6;
  v74 = v69;
  v75 = v70;
  v216 = v70;
  v217 = v71;
  v76 = v71;
  v77 = type metadata accessor for ArtistEventViewModel(255, (uint64_t)&v214);
  v149 = swift_getWitnessTable(&unk_100112B18, v77);
  v78 = v176;
  ObservedObject.Wrapper.subscript.getter(v176, KeyPath, v72, v149);
  swift_release(v72);
  swift_release(KeyPath);
  v79 = (_QWORD *)swift_allocObject(&unk_10014FD30, 48, 7);
  v79[2] = v74;
  v79[3] = v6;
  v79[4] = v70;
  v79[5] = v76;
  v80 = swift_checkMetadataState(0, v150);
  v81 = v6;
  v175 = v6;
  v82 = v148;
  View.sheet<A, B>(item:onDismiss:content:)(v78, 0, 0, sub_1000E63D0, v79, v38, v6, v80, v153, v152, v151);
  v83 = swift_release(v79);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v178 + 8))(v78, v186, v83);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v82, v38);
  v84 = v190;
  v85 = v191;
  v86 = sub_1000E1148(v190, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v87 = v74;
  v177 = v74;
  v192 = v74;
  v193 = v81;
  v187 = v75;
  v194 = v75;
  v195 = v76;
  v88 = swift_getKeyPath(&unk_1001118B0);
  ObservedObject.Wrapper.subscript.getter(&v214, v88, v86, v149);
  swift_release(v88);
  v89 = swift_release(v86);
  v90 = v215;
  v153 = v214;
  LODWORD(v154) = v216;
  v91 = v170;
  v178 = *(_QWORD *)(v170 + 16);
  v92 = v185;
  v93 = v85;
  v94 = v84;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v178)(v185, v93, v84, v89);
  v95 = *(unsigned __int8 *)(v91 + 80);
  v96 = (_QWORD *)((v95 + 48) & ~v95);
  v186 = (uint64_t)v96 + v188;
  v176 = v96;
  v188 = v95 | 7;
  v97 = (_QWORD *)swift_allocObject(&unk_10014FD58, v186, v95 | 7);
  v98 = v175;
  v97[2] = v87;
  v97[3] = v98;
  v97[4] = v75;
  v97[5] = v76;
  v170 = *(_QWORD *)(v91 + 32);
  v99 = v94;
  ((void (*)(char *, char *, uint64_t))v170)((char *)v96 + (_QWORD)v97, v92, v94);
  v100 = v153;
  v101 = v155;
  v102 = v183;
  View.sheet<A>(isPresented:onDismiss:content:)(v153, v90, v154, 0, 0, sub_1000E6448, v97, v155, &type metadata for PromotionalAssetsContentView, v181, v180);
  swift_release(v90);
  swift_release(v97);
  v103 = swift_release(v100);
  (*(void (**)(char *, uint64_t, __n128))(v158 + 8))(v102, v101, v103);
  v104 = v191;
  v105 = v99;
  v106 = (void (*)(char *, uint64_t, uint64_t))v178;
  ((void (*)(char *, uint64_t, uint64_t))v178)(v92, v191, v99);
  v107 = (_QWORD *)swift_allocObject(&unk_10014FD80, v186, v188);
  v108 = v177;
  v107[2] = v177;
  v107[3] = v98;
  v109 = v189;
  v107[4] = v187;
  v107[5] = v109;
  v110 = (char *)v176;
  v111 = (void (*)(char *, char *, uint64_t))v170;
  ((void (*)(char *, char *, uint64_t))v170)((char *)v176 + (_QWORD)v107, v92, v105);
  v214 = v101;
  v215 = &type metadata for PromotionalAssetsContentView;
  v216 = v181;
  v217 = v180;
  v112 = swift_getOpaqueTypeConformance2(&v214, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v113 = v156;
  v114 = v179;
  View.onAppear(perform:)(sub_1000E64C4, v107, v156, v112);
  v115 = swift_release(v107);
  (*(void (**)(char *, uint64_t, __n128))(v159 + 8))(v114, v113, v115);
  v116 = v185;
  v117 = v190;
  v106(v185, v104, v190);
  v118 = swift_allocObject(&unk_10014FDA8, v186, v188);
  *(_QWORD *)(v118 + 16) = v108;
  v119 = v175;
  v120 = v187;
  *(_QWORD *)(v118 + 24) = v175;
  *(_QWORD *)(v118 + 32) = v120;
  *(_QWORD *)(v118 + 40) = v109;
  v121 = v117;
  v111(&v110[v118], v116, v117);
  v212 = v112;
  v213 = &protocol witness table for _AppearanceActionModifier;
  v122 = v160;
  v123 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v160);
  v124 = v182;
  View.onDisappear(perform:)(sub_1000E64D4, v118, v122, v123);
  v125 = (_QWORD *)v118;
  v126 = v157;
  v127 = swift_release(v125);
  (*(void (**)(char *, uint64_t, __n128))(v161 + 8))(v124, v122, v127);
  ((void (*)(char *, uint64_t, uint64_t))v178)(v116, v191, v121);
  v128 = (_QWORD *)swift_allocObject(&unk_10014FDD0, v186, v188);
  v128[2] = v177;
  v128[3] = v119;
  v129 = v189;
  v128[4] = v187;
  v128[5] = v129;
  v111((char *)v176 + (_QWORD)v128, v116, v121);
  v210 = v123;
  v211 = &protocol witness table for _AppearanceActionModifier;
  v130 = v162;
  v131 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v162);
  v132 = v171;
  j___sScP13userInitiatedScPvgZ(v130);
  v133 = v132;
  v134 = v132;
  v135 = v184;
  View.task(priority:_:)(v133, &unk_10015F560, v128, v130, v131);
  v136 = swift_release(v128);
  (*(void (**)(char *, uint64_t, __n128))(v172 + 8))(v134, v173, v136);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v135, v130);
  if (qword_1001580E8 != -1)
    swift_once(&qword_1001580E8, sub_100075340);
  v137 = qword_10016A530;
  v138 = *(_QWORD *)algn_10016A538;
  v139 = sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v208 = v131;
  v209 = v139;
  v140 = v167;
  v141 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v167);
  v142 = (uint64_t)v164;
  View.accessibilityIdentifier(_:)(v137, v138, v140, v141);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v126, v140);
  v143 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v206 = v141;
  v207 = v143;
  v144 = v169;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v169);
  v145 = v166;
  sub_10005135C(v142, v144, v166);
  v146 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
  v146(v142, v144);
  sub_1000424BC(v145, v144, v174);
  return ((uint64_t (*)(uint64_t, uint64_t))v146)(v145, v144);
}

uint64_t sub_1000E2100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99[16];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105[8];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v92 = a4;
  v98 = a1;
  v97 = a6;
  v96 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = a2;
  v112 = a3;
  v11 = a2;
  v113 = a4;
  v114 = a5;
  v12 = a5;
  v88 = a5;
  v91 = type metadata accessor for ArtistEventView(0, (uint64_t)&v111);
  v90 = *(_QWORD *)(v91 - 8);
  v93 = *(_QWORD *)(v90 + 64);
  __chkstk_darwin(v91);
  v89 = (char *)&v71 - v13;
  v14 = sub_100007D00(&qword_10015F538);
  sub_100007D00(&qword_100159898);
  v15 = type metadata accessor for Array(255, a3);
  v16 = *(_QWORD *)(v12 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v16, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v18 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v111 = v15;
  v112 = AssociatedTypeWitness;
  v113 = v18;
  v114 = WitnessTable;
  v115 = AssociatedConformanceWitness;
  type metadata accessor for ForEach(255, &v111);
  v21 = type metadata accessor for _ConditionalContent(255);
  v22 = type metadata accessor for Group(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v28 = type metadata accessor for VStack(255, v26, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v28);
  v30 = type metadata accessor for LazyVGrid(255, v28, v29);
  v85 = v30;
  v84 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v30);
  v32 = type metadata accessor for ObservableScrollView(0, v30, v84, v31);
  v87 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v81 = (uint64_t)&v71 - v33;
  v34 = swift_getWitnessTable(&unk_10010F020, v32);
  v111 = v32;
  v112 = v34;
  v35 = v34;
  v74 = v34;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v111, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v86 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v37 = OpaqueTypeMetadata2;
  v80 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v76 = (char *)&v71 - v38;
  v39 = sub_100007D00(&qword_10015F548);
  v79 = v39;
  v111 = v32;
  v112 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v78 = OpaqueTypeConformance2;
  v77 = sub_10000F4E0(&qword_10015F550, &qword_10015F548, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v111 = v37;
  v112 = v39;
  v113 = OpaqueTypeConformance2;
  v114 = v77;
  v82 = swift_getOpaqueTypeMetadata2(0, &v111, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v83 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v73 = (char *)&v71 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v42);
  v75 = (uint64_t)&v71 - v44;
  v45 = v11;
  v72 = v11;
  v106 = v11;
  v107 = a3;
  v46 = a3;
  v71 = a3;
  v47 = v92;
  v48 = v88;
  v108 = v92;
  v109 = v88;
  v110 = v98;
  v49 = v90;
  v50 = v89;
  v51 = v91;
  (*(void (**)(char *, __n128))(v90 + 16))(v89, v43);
  v52 = *(unsigned __int8 *)(v49 + 80);
  v53 = (v52 + 48) & ~v52;
  v54 = (char *)swift_allocObject(&unk_10014FE20, v53 + v93, v52 | 7);
  *((_QWORD *)v54 + 2) = v45;
  *((_QWORD *)v54 + 3) = v46;
  *((_QWORD *)v54 + 4) = v47;
  *((_QWORD *)v54 + 5) = v48;
  v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(&v54[v53], v50, v51);
  v56 = static Axis.Set.vertical.getter(v55);
  v57 = v81;
  sub_10009D510(v56, 0, (void (*)(uint64_t))sub_1000E6650, (uint64_t)v105, (uint64_t)sub_1000E6660, (uint64_t)v54, v85, v84, v81);
  v58 = v95;
  v59 = v94;
  v60 = v96;
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v96);
  v61 = v76;
  View.navigationBarTitleDisplayMode(_:)(v59, v32, v74);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v57, v32);
  v100 = v72;
  v101 = v71;
  v102 = v47;
  v103 = v48;
  v104 = v98;
  v62 = (uint64_t)v73;
  v63 = v80;
  v64 = v79;
  v65 = v78;
  v66 = v77;
  View.toolbar<A>(content:)(sub_1000E66E0, v99, v80, v79, v78, v77);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v61, v63);
  v111 = v63;
  v112 = v64;
  v113 = v65;
  v114 = v66;
  swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v67 = v75;
  v68 = v82;
  sub_10005135C(v62, v82, v75);
  v69 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
  v69(v62, v68);
  sub_1000424BC(v67, v68, v97);
  return ((uint64_t (*)(uint64_t, uint64_t))v69)(v67, v68);
}

uint64_t sub_1000E27D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[6];

  v45 = a5;
  v50 = a1;
  v51 = a4;
  v49 = a2;
  v52 = a6;
  v8 = type metadata accessor for PinnedScrollableViews(0);
  v9 = __chkstk_darwin(v8);
  v48 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GridItem.Size(0, v9);
  v46 = *(_QWORD *)(v11 - 8);
  v47 = v11;
  __chkstk_darwin(v11);
  v13 = (_OWORD *)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100007D00(&qword_10015F538);
  sub_100007D00(&qword_100159898);
  v15 = type metadata accessor for Array(255, a3);
  v16 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v16, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v18 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v59[0] = v15;
  v59[1] = AssociatedTypeWitness;
  v59[2] = v18;
  v59[3] = WitnessTable;
  v59[4] = AssociatedConformanceWitness;
  type metadata accessor for ForEach(255, v59);
  v21 = type metadata accessor for _ConditionalContent(255);
  v22 = type metadata accessor for Group(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v14, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v28 = type metadata accessor for VStack(255, v26, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v28);
  v30 = type metadata accessor for LazyVGrid(0, v28, v29);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v45 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v45 - v35;
  v37 = sub_100007D50(&qword_100159A28);
  v38 = type metadata accessor for GridItem(0);
  v39 = swift_allocObject(v37, ((*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v38 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) | 7);
  *(_OWORD *)(v39 + 16) = xmmword_100109020;
  *v13 = xmmword_100109D50;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v46 + 104))(v13, enum case for GridItem.Size.flexible(_:), v47);
  v40 = GridItem.init(_:spacing:alignment:)(v13, 0, 0, 0, 0, 1);
  v54 = v49;
  v55 = a3;
  v56 = v51;
  v57 = v45;
  v58 = v50;
  v41 = static HorizontalAlignment.center.getter(v40);
  v42 = v48;
  sub_1000B07DC();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v39, v41, 0, 0, v42, sub_1000E67FC, v53, v28, v29);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v30);
  sub_10005135C((uint64_t)v33, v30, (uint64_t)v36);
  v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  v43(v33, v30);
  sub_1000424BC((uint64_t)v36, v30, v52);
  return ((uint64_t (*)(char *, uint64_t))v43)(v36, v30);
}

uint64_t sub_1000E2BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v30 = a1;
  v31 = a4;
  v29 = a2;
  v32 = a6;
  v8 = sub_100007D00(&qword_10015F538);
  sub_100007D00(&qword_100159898);
  v9 = type metadata accessor for Array(255, a3);
  v10 = *(_QWORD *)(a5 + 16);
  v39 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v41 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  type metadata accessor for ForEach(255, &v39);
  v11 = type metadata accessor for _ConditionalContent(255);
  v12 = type metadata accessor for Group(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for VStack(0, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v29 - v23;
  v34 = v29;
  v35 = a3;
  v36 = v31;
  v37 = a5;
  v38 = v30;
  v26 = static HorizontalAlignment.center.getter(v25);
  VStack.init(alignment:spacing:content:)(v26, 0, 0, sub_1000E6808, v33, v16, v17);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v18);
  sub_10005135C((uint64_t)v21, v18, (uint64_t)v24);
  v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v21, v18);
  sub_1000424BC((uint64_t)v24, v18, v32);
  return ((uint64_t (*)(char *, uint64_t))v27)(v24, v18);
}

uint64_t sub_1000E2E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[10];
  uint64_t v72;
  uint64_t AssociatedTypeWitness;
  uint64_t v74;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v52 = a5;
  v58 = a4;
  v56 = a2;
  v54 = a1;
  v62 = a6;
  sub_100007D00(&qword_100159898);
  v8 = type metadata accessor for Array(255, a3);
  v9 = *(_QWORD *)(a5 + 16);
  v72 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v74 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v48 = type metadata accessor for ForEach(255, &v72);
  v51 = type metadata accessor for _ConditionalContent(255);
  v10 = type metadata accessor for Group(0, v51);
  v57 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v49 = (char *)&v47 - v11;
  v12 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v59 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v50 = (char *)&v47 - v13;
  v14 = type metadata accessor for ModifiedContent(0, v12, &type metadata for _PaddingLayout);
  v61 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v55 = (uint64_t)&v47 - v18;
  v60 = sub_100007D50(&qword_10015F538);
  __chkstk_darwin(v60);
  v53 = (uint64_t)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v47 - v21;
  *(_QWORD *)v22 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = 0;
  v24 = sub_100007D50(&qword_10015F5B0);
  v25 = v54;
  v26 = v56;
  v27 = v58;
  v28 = v52;
  sub_1000E3384(v54, v56, a3, v58, v52, (uint64_t)&v22[*(int *)(v24 + 44)]);
  v64 = v26;
  v65 = a3;
  v66 = v27;
  v67 = v28;
  v68 = v25;
  v29 = sub_10000F31C(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v71[9] = sub_1000E6820();
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v48);
  v71[7] = v29;
  v71[8] = v30;
  v31 = v51;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v51);
  v33 = v49;
  v34 = Group<A>.init(content:)(sub_1000E6814, v63, v31, v32);
  v35 = static Edge.Set.leading.getter(v34);
  v71[6] = v32;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v10);
  v37 = v50;
  View.padding(_:_:)(v35, 0, 1, v10, v36);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v33, v10);
  v39 = static Edge.Set.trailing.getter(v38);
  v71[4] = v36;
  v71[5] = &protocol witness table for _PaddingLayout;
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  View.padding(_:_:)(v39, 0x4034000000000000, 0, v12, v40);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v12);
  v71[2] = v40;
  v71[3] = &protocol witness table for _PaddingLayout;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v42 = v55;
  sub_10005135C((uint64_t)v16, v14, v55);
  v43 = v61;
  v44 = *(void (**)(char *, uint64_t))(v61 + 8);
  v44(v16, v14);
  v45 = v53;
  sub_100007E78((uint64_t)v22, v53, &qword_10015F538);
  v72 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v16, v42, v14);
  AssociatedTypeWitness = (uint64_t)v16;
  v71[0] = v60;
  v71[1] = v14;
  v69 = sub_10000F4E0(&qword_10015F5C0, &qword_10015F538, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v70 = v41;
  sub_100042510(&v72, 2uLL, (uint64_t)v71);
  v44((char *)v42, v14);
  sub_100007F38((uint64_t)v22, &qword_10015F538);
  v44(v16, v14);
  return sub_100007F38(v45, &qword_10015F538);
}

uint64_t sub_1000E3384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  void (*v149)(char *, uint64_t, uint64_t);
  void (*v150)(char *, uint64_t, uint64_t);
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  _BYTE v171[7];
  char v172;
  _BYTE v173[147];
  _BYTE v174[147];
  _QWORD v175[7];
  char v176;
  _BYTE v177[7];
  __int128 v178;
  __int128 v179;
  char v180;
  _BYTE v181[7];
  char v182;
  _BYTE v183[7];
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  char v194;
  char v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201[32];

  v163 = a6;
  v159 = a2;
  v160 = a3;
  v189 = a2;
  v190 = a3;
  v161 = a4;
  v191 = a4;
  v155 = a5;
  *(_QWORD *)&v192 = a5;
  v7 = type metadata accessor for ArtistEventView(0, (uint64_t)&v189);
  v158 = *(_QWORD *)(v7 - 8);
  v156 = *(_QWORD *)(v158 + 64);
  __chkstk_darwin(v7);
  v157 = (char *)&v146 - v8;
  v9 = sub_100007D50(&qword_10015A608);
  v153 = *(_QWORD *)(v9 - 8);
  v154 = v9;
  __chkstk_darwin(v9);
  v148 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v11);
  v151 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ArtistPromotionalAssets(0);
  v164 = *(_QWORD *)(v13 - 8);
  v165 = v13;
  __chkstk_darwin(v13);
  v146 = v14;
  v147 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v152 = (char *)&v146 - v16;
  v17 = sub_100007D50(&qword_10015A470);
  __chkstk_darwin(v17);
  v162 = (uint64_t)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v167 = (char *)&v146 - v20;
  v21 = (int *)type metadata accessor for ArtistEventListHeader(0);
  __chkstk_darwin(v21);
  v23 = (void (**)(char *, uint64_t, uint64_t))((char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = sub_100007D50(&qword_10015F5C8);
  __chkstk_darwin(v166);
  v169 = (uint64_t)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v168 = (uint64_t)&v146 - v26;
  v27 = sub_1000E1148(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v28 = sub_1001020EC();
  v149 = v29;
  v150 = (void (*)(char *, uint64_t, uint64_t))v28;
  swift_release(v27);
  v30 = sub_1000E1148(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100102120((uint64_t)v23 + v21[5]);
  swift_release(v30);
  v31 = sub_1000E1148(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v32 = v31 + *(_QWORD *)(*(_QWORD *)v31 + 184);
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_BYTE *)(v32 + 16);
  v36 = *(_QWORD *)(v32 + 24);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  swift_release(v31);
  v37 = v149;
  *v23 = v150;
  v23[1] = v37;
  v38 = (char *)v23 + v21[6];
  *(_QWORD *)v38 = v33;
  *((_QWORD *)v38 + 1) = v34;
  v39 = v169;
  v38[16] = v35;
  v40 = v7;
  *((_QWORD *)v38 + 3) = v36;
  *((_BYTE *)v23 + v21[7]) = 0;
  v41 = (void (**)(char *, uint64_t, uint64_t))((char *)v23 + v21[8]);
  *v41 = swift_getKeyPath(&unk_100111918);
  v42 = sub_100007D50(&qword_100158968);
  v43 = swift_storeEnumTagMultiPayload(v41, v42, 0);
  LOBYTE(v41) = static Edge.Set.horizontal.getter(v43);
  sub_10001BFB8((uint64_t)v23, v39, type metadata accessor for ArtistEventListHeader);
  v44 = v39 + *(int *)(v166 + 36);
  *(_BYTE *)v44 = (_BYTE)v41;
  *(_OWORD *)(v44 + 8) = 0u;
  *(_OWORD *)(v44 + 24) = 0u;
  *(_BYTE *)(v44 + 40) = 1;
  sub_10001E24C((uint64_t)v23, type metadata accessor for ArtistEventListHeader);
  sub_100018EB4(v39, v168, &qword_10015F5C8);
  v45 = sub_1000E1148(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v46 = *(_QWORD *)(v45 + *(_QWORD *)(*(_QWORD *)v45 + 168));
  swift_retain(v46);
  swift_release(v45);
  KeyPath = swift_getKeyPath(&unk_100111978);
  v189 = v46;
  v48 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v189, KeyPath, v48);
  v49 = KeyPath;
  v50 = (uint64_t)v151;
  swift_release(v49);
  v51 = v46 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v46 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v201, 0, 0);
  sub_100007E78(v51, v50, &qword_10015A610);
  v52 = swift_release(v46);
  v53 = v164;
  v54 = v165;
  if ((*(unsigned int (**)(uint64_t, uint64_t, __n128))(v164 + 48))(v50, 1, v52) == 1)
  {
    sub_100007F38(v50, &qword_10015A610);
    v55 = 1;
    v56 = (uint64_t)v167;
    v57 = v154;
    v58 = v155;
    v59 = a1;
    v60 = v153;
  }
  else
  {
    v166 = v7;
    v150 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
    v61 = v53;
    v62 = v152;
    v150(v152, v50, v54);
    v63 = sub_1000E1148(v166, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v64 = *(_QWORD *)(v63 + *(_QWORD *)(*(_QWORD *)v63 + 168));
    swift_retain(v64);
    swift_release(v63);
    v65 = type metadata accessor for PromotionalAssetsEntryViewModel(0);
    v66 = swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    ObservationRegistrar.init()(v66);
    *(_QWORD *)(v66 + 16) = v64;
    v175[0] = v66;
    v67 = State.init(wrappedValue:)(v175, v65);
    v68 = v189;
    v59 = a1;
    v69 = v190;
    v70 = static Edge.Set.horizontal.getter(v67);
    LOBYTE(v65) = v70;
    LOBYTE(v64) = static Edge.Set.top.getter(v70);
    v71 = EdgeInsets.init(_all:)(25.0);
    v189 = v68;
    v190 = v69;
    LOBYTE(v191) = v65;
    v192 = 0u;
    v193 = 0u;
    v194 = 1;
    v195 = v64;
    v196 = v71;
    v197 = v72;
    v198 = v73;
    v199 = v74;
    v200 = 0;
    v75 = v157;
    v76 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v157, v59, v166);
    v77 = v61;
    v78 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    v79 = v147;
    v80 = v62;
    v81 = v165;
    v78(v147, v80, v165);
    v82 = *(unsigned __int8 *)(v76 + 80);
    v83 = (v82 + 48) & ~v82;
    v84 = *(unsigned __int8 *)(v77 + 80);
    v85 = (v156 + v84 + v83) & ~v84;
    v86 = (char *)swift_allocObject(&unk_10014FEE8, v85 + v146, v82 | v84 | 7);
    v87 = v160;
    *((_QWORD *)v86 + 2) = v159;
    *((_QWORD *)v86 + 3) = v87;
    v88 = v155;
    *((_QWORD *)v86 + 4) = v161;
    *((_QWORD *)v86 + 5) = v88;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v86[v83], v75, v166);
    v150(&v86[v85], (uint64_t)v79, v81);
    v40 = v166;
    v89 = sub_100007D50(&qword_10015A640);
    v90 = sub_10000F31C(&qword_10015A648, &qword_10015A640, (void (*)(void))sub_1000500EC);
    v91 = v148;
    View.onTapGesture(count:perform:)(1, sub_1000E6EA8, v86, v89, v90);
    swift_release(v86);
    v92 = v190;
    swift_release(v189);
    v93 = swift_release(v92);
    (*(void (**)(char *, uint64_t, __n128))(v164 + 8))(v152, v81, v93);
    v95 = v153;
    v94 = v154;
    v96 = v167;
    (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v167, v91, v154);
    v55 = 0;
    v56 = (uint64_t)v96;
    v58 = v88;
    v57 = v94;
    v60 = v95;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v56, v55, 1, v57);
  v97 = sub_1000E1148(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v98 = sub_1001022CC();
  swift_release(v97);
  if (!v98)
  {
    sub_1000E6AE8((uint64_t)v175);
    sub_100018EB4((uint64_t)v175, (uint64_t)&v189, &qword_10015F5D0);
LABEL_13:
    v137 = v168;
    v136 = v169;
    sub_100007E78(v168, v169, &qword_10015F5C8);
    v138 = v162;
    sub_100007E78(v56, v162, &qword_10015A470);
    sub_100018EB4((uint64_t)&v189, (uint64_t)v173, &qword_10015F5D0);
    v139 = v163;
    sub_100007E78(v136, v163, &qword_10015F5C8);
    v140 = sub_100007D50(&qword_10015F5D8);
    sub_100007E78(v138, v139 + *(int *)(v140 + 48), &qword_10015A470);
    v141 = v139 + *(int *)(v140 + 64);
    sub_100018EB4((uint64_t)v173, (uint64_t)v174, &qword_10015F5D0);
    sub_100018EB4((uint64_t)v174, v141, &qword_10015F5D0);
    sub_1000E6B5C((uint64_t)v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000E6B08);
    sub_100007F38(v56, &qword_10015A470);
    sub_100007F38(v137, &qword_10015F5C8);
    sub_100018EB4((uint64_t)v173, (uint64_t)v175, &qword_10015F5D0);
    sub_1000E6B5C((uint64_t)v175, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000E6BC0);
    sub_100007F38(v138, &qword_10015A470);
    return sub_100007F38(v136, &qword_10015F5C8);
  }
  v99 = sub_1000E1148(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v100 = v59;
  v101 = *(_QWORD *)(v59 + 40);
  if (v101)
  {
    v102 = v99;
    swift_retain(*(_QWORD *)(v59 + 40));
    v103 = sub_1000DED48();
    v105 = v104;
    swift_release(v101);
    if (v105)
    {
      swift_bridgeObjectRelease();
      v106 = v58;
      if ((v103 & 1) != 0)
        v107 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      else
        v107 = 1;
    }
    else
    {
      v106 = v58;
      v107 = 1;
    }
    v108 = v100;
    swift_bridgeObjectRelease();
    v109 = sub_100102334(v107 & 1);
    swift_release(v102);
    v110 = sub_1000E1148(v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v111 = sub_100102558();
    v113 = v112;
    v114 = swift_release(v110);
    v115 = v157;
    v116 = v158;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v158 + 16))(v157, v108, v40, v114);
    v117 = *(unsigned __int8 *)(v116 + 80);
    v118 = v40;
    v119 = (v117 + 48) & ~v117;
    v120 = (char *)swift_allocObject(&unk_10014FEC0, v119 + v156, v117 | 7);
    v121 = v160;
    *((_QWORD *)v120 + 2) = v159;
    *((_QWORD *)v120 + 3) = v121;
    *((_QWORD *)v120 + 4) = v161;
    *((_QWORD *)v120 + 5) = v106;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(&v120[v119], v115, v118);
    v122 = type metadata accessor for RemoteViewConfiguration();
    v123 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    v124 = EnvironmentObject.init()(v122, v123);
    v126 = v125;
    v127 = static Edge.Set.bottom.getter(v124);
    LOBYTE(v118) = v127;
    LOBYTE(v116) = static Edge.Set.top.getter(v127);
    v128 = EdgeInsets.init(_all:)(32.0);
    v172 = 1;
    v170 = 0;
    v175[0] = v109;
    v175[1] = v111;
    v175[2] = v113;
    v175[3] = sub_1000E6CF4;
    v175[4] = v120;
    v175[5] = v124;
    v175[6] = v126;
    v176 = v118;
    *(_DWORD *)v177 = *(_DWORD *)v174;
    *(_DWORD *)&v177[3] = *(_DWORD *)&v174[3];
    v178 = 0u;
    v179 = 0u;
    v180 = 1;
    *(_DWORD *)v181 = *(_DWORD *)v173;
    *(_DWORD *)&v181[3] = *(_DWORD *)&v173[3];
    v182 = v116;
    *(_DWORD *)v183 = *(_DWORD *)v171;
    *(_DWORD *)&v183[3] = *(_DWORD *)&v171[3];
    v184 = v128;
    v185 = v129;
    v186 = v130;
    v187 = v131;
    v188 = 0;
    nullsub_1(v175, v132, v133, v134, v135);
    sub_100018EB4((uint64_t)v175, (uint64_t)&v189, &qword_10015F5D0);
    v56 = (uint64_t)v167;
    goto LABEL_13;
  }
  v143 = *(_QWORD *)(v59 + 48);
  v144 = type metadata accessor for RemoteViewConfiguration();
  v145 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.error()(0, v143, v144, v145);
  __break(1u);
  return result;
}

void sub_1000E3EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v11 = sub_100007D50(&qword_10015A6A0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = a3;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a6;
  v15 = type metadata accessor for ArtistEventView(0, (uint64_t)v26);
  v16 = sub_1000E1148(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_1001022C4();
  v17 = swift_release(v16);
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v17);
  v18 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 152))(v11, v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v22 = *(_QWORD *)(a1 + 40);
  if (v22)
  {
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_10008A874(v19, v21, 2, 3, 9, 0, 3u, v22);
    swift_bridgeObjectRelease();
    swift_release(v22);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 48);
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
}

double sub_1000E4090(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a5;
  v34[0] = a4;
  v34[1] = a5;
  v34[2] = a6;
  v34[3] = a7;
  v10 = type metadata accessor for ArtistEventView(0, (uint64_t)v34);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v15 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3, v10);
  type metadata accessor for MainActor(0);
  sub_10008DDF8(a1, a2);
  v20 = static MainActor.shared.getter(v19);
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v21 + 64) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (char *)swift_allocObject(&unk_10014FF10, v23 + 16, v21 | 7);
  *((_QWORD *)v24 + 2) = v20;
  *((_QWORD *)v24 + 3) = &protocol witness table for MainActor;
  v25 = v31;
  *((_QWORD *)v24 + 4) = v30;
  *((_QWORD *)v24 + 5) = v25;
  v26 = v33;
  *((_QWORD *)v24 + 6) = v32;
  *((_QWORD *)v24 + 7) = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v24[v22], v14, v10);
  v27 = (uint64_t *)&v24[v23];
  *v27 = a1;
  v27[1] = a2;
  v28 = sub_1000C8730((uint64_t)v17, (uint64_t)&unk_10015F5E8, (uint64_t)v24);
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

uint64_t sub_1000E4240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v8[11] = v14;
  v8[12] = v15;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[13] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[14] = v11;
  v8[15] = v12;
  return swift_task_switch(sub_1000E42C0, v11, v12);
}

uint64_t sub_1000E42C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 88);
  v1 = type metadata accessor for ArtistEventView(0, v0 + 16);
  *(_QWORD *)(v0 + 128) = v1;
  *(_QWORD *)(v0 + 136) = sub_1000E1148(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v2 = (_QWORD *)swift_task_alloc(dword_10016047C);
  *(_QWORD *)(v0 + 144) = v2;
  *v2 = v0;
  v2[1] = sub_1000E4344;
  return sub_1001025F4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1000E4344()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 144));
  swift_release(v2);
  return swift_task_switch(sub_1000E4398, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_1000E4398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 104));
  v3 = sub_1000E1148(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  if (v2)
  {
    if (v2 == 1)
    {
      v4 = 0xEF6E6F697461636FLL;
      v5 = 0x4C746E6572727563;
    }
    else
    {
      v5 = *(_QWORD *)(v0 + 56);
      v4 = *(_QWORD *)(v0 + 64);
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v5 = 7105633;
  }
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(_QWORD *)(v0 + 64);
  if (v8)
  {
    sub_10008DDF8(v6, v9);
    swift_retain(v8);
    sub_100102910(7, v5, v4, 2u, v8);
    swift_release(v8);
    swift_bridgeObjectRelease();
    v10 = swift_release(v3);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v10);
  }
  else
  {
    v12 = *(_QWORD *)(v7 + 48);
    sub_10008DDF8(v6, v9);
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    return EnvironmentObject.error()(0, v12, v13, v14);
  }
}

uint64_t sub_1000E44D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;

  v68 = a1;
  v73 = a6;
  v65 = a2;
  v75 = a2;
  v76 = a3;
  v66 = a4;
  v77 = a4;
  v78 = a5;
  v8 = type metadata accessor for ArtistEventView(0, (uint64_t)&v75);
  v64 = *(_QWORD *)(v8 - 8);
  v58 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v8);
  v62 = (char *)&v56 - v9;
  v10 = type metadata accessor for Array(255, a3);
  v67 = a5;
  v11 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v13 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v61 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v75 = v10;
  v76 = AssociatedTypeWitness;
  v60 = AssociatedTypeWitness;
  v59 = v13;
  v77 = v13;
  v78 = WitnessTable;
  v57 = WitnessTable;
  v79 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(0, &v75);
  v56 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v63 = (uint64_t)&v56 - v20;
  v69 = sub_100007D00(&qword_100159898);
  v21 = type metadata accessor for _ConditionalContent(0);
  v71 = *(_QWORD *)(v21 - 8);
  v72 = v21;
  __chkstk_darwin(v21);
  v70 = (char *)&v56 - v22;
  v23 = v68;
  v24 = sub_1000E1148(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v25 = sub_100102BBC();
  swift_release(v24);
  v75 = v25;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  LOBYTE(WitnessTable) = Collection.isEmpty.getter(v10, v26);
  swift_bridgeObjectRelease();
  v27 = sub_1000E1148(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v28 = v27;
  if ((WitnessTable & 1) != 0)
  {
    v29 = v27 + *(_QWORD *)(*(_QWORD *)v27 + 200);
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    swift_release(v28);
    v35 = static Edge.Set.top.getter(v34);
    v75 = v31;
    v76 = v30;
    LOBYTE(v77) = v32;
    v78 = v33;
    LOBYTE(v79) = v35;
    v80 = 0u;
    v81 = 0u;
    v82 = 1;
    v36 = sub_10000F31C(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
    v74 = sub_1000E6820();
    v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v38 = (uint64_t)v70;
    sub_1000426C4((uint64_t)&v75, v69, v16, v36, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = sub_100102BBC();
    v40 = swift_release(v28);
    v75 = v39;
    v41 = v64;
    v42 = v62;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v64 + 16))(v62, v23, v8, v40);
    v43 = *(unsigned __int8 *)(v41 + 80);
    v44 = (v43 + 48) & ~v43;
    v45 = (char *)swift_allocObject(&unk_10014FE70, v44 + v58, v43 | 7);
    *((_QWORD *)v45 + 2) = v65;
    *((_QWORD *)v45 + 3) = a3;
    v46 = v67;
    *((_QWORD *)v45 + 4) = v66;
    *((_QWORD *)v45 + 5) = v46;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v45[v44], v42, v8);
    v47 = sub_1000E6820();
    ForEach<>.init(_:content:)(&v75, sub_1000E6888, v45, v10, v60, v59, v57, v47, v61);
    v86 = v47;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v49 = v63;
    sub_10005135C((uint64_t)v18, v16, v63);
    v50 = *(void (**)(char *, uint64_t))(v56 + 8);
    v50(v18, v16);
    sub_1000424BC(v49, v16, (uint64_t)v18);
    v51 = sub_10000F31C(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
    v38 = (uint64_t)v70;
    sub_100042788((uint64_t)v18, v69, v16, v51, v48);
    v50(v18, v16);
    v50((char *)v49, v16);
  }
  v52 = sub_10000F31C(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v85 = sub_1000E6820();
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  v83 = v52;
  v84 = v53;
  v54 = v72;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v72);
  sub_1000424BC(v38, v54, v73);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v38, v54);
}

uint64_t sub_1000E4A48@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(uint64_t, uint64_t, __n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t WitnessTable;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t KeyPath;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t AssociatedTypeWitness;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[4];

  v118 = a2;
  v133 = a5;
  v126 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v122 = v9;
  v123 = v8;
  v124 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v10;
  v134[0] = v8;
  v134[1] = v11;
  v134[2] = v10;
  v134[3] = v12;
  v13 = type metadata accessor for ArtistEventView(0, (uint64_t)v134);
  v120 = *(_QWORD *)(v13 - 8);
  v121 = v13;
  v117 = *(_QWORD *)(v120 + 64);
  __chkstk_darwin(v13);
  v119 = (char *)&v97 - v14;
  v112 = type metadata accessor for Date(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for DateInterval(0);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v106 = (uint64_t)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &unk_10011790C, &unk_100117964);
  v101 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v100 = (char *)&v97 - v17;
  v108 = type metadata accessor for EventRowViewModel(0);
  __chkstk_darwin(v108);
  v105 = (uint64_t)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v104 = (uint64_t *)((char *)&v97 - v20);
  v21 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v21);
  v103 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100007D50(&qword_1001598E0);
  __chkstk_darwin(v128);
  v129 = (uint64_t)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100007D50(&qword_100159A30);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v114 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100007D50(&qword_1001598A0);
  v131 = *(_QWORD *)(v25 - 8);
  v132 = v25;
  __chkstk_darwin(v25);
  v113 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = swift_getAssociatedTypeWitness(255, a4, a3, &unk_10011790C, &unk_10011797C);
  v28 = type metadata accessor for Optional(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v97 - v30;
  v32 = *(_QWORD *)(v27 - 8);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v97 - v35;
  v37 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a4 + 216);
  v130 = a1;
  v127 = a3;
  v38 = a3;
  v39 = a4;
  v134[0] = v37(v38, a4, v34);
  v40 = type metadata accessor for Array(0, v27);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v40);
  v42 = v40;
  v43 = v27;
  Collection.first.getter(v42, WitnessTable);
  v44 = v32;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v27) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
LABEL_6:
    v95 = 1;
    v92 = v132;
    v94 = v133;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v94, v95, 1, v92);
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v46 = v36;
  v45(v36, v31, v27);
  v47 = v39;
  v48 = v39;
  v49 = v127;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v48, v127, v27, &unk_10011790C, &unk_10011795C);
  v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v27, AssociatedConformanceWitness);
  if (!v51)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v27);
    goto LABEL_6;
  }
  v52 = v51;
  v53 = objc_msgSend(v51, "city");
  v99 = v44;
  v54 = v53;

  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v97 = v55;

  v56 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v27, AssociatedConformanceWitness);
  v58 = v57;
  v59 = v100;
  (*(void (**)(uint64_t, uint64_t))(v47 + 200))(v49, v47);
  v60 = AssociatedTypeWitness;
  v61 = swift_getAssociatedConformanceWitness(v47, v49, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  v62 = v106;
  sub_100093160(v60, v61, v106);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v59, v60);
  v64 = v110;
  DateInterval.start.getter(v63);
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v62, v109);
  v65 = (int *)v108;
  v66 = v104;
  v67 = (char *)v104 + *(int *)(v108 + 28);
  *((_QWORD *)v67 + 4) = 0;
  *(_OWORD *)v67 = 0u;
  *((_OWORD *)v67 + 1) = 0u;
  v68 = v97;
  *v66 = v98;
  v66[1] = v68;
  v66[2] = v56;
  v66[3] = v58;
  (*(void (**)(char *, char *, uint64_t))(v111 + 32))((char *)v66 + v65[6], v64, v112);
  *((_BYTE *)v66 + v65[8]) = 0;
  *(uint64_t *)((char *)v66 + v65[9]) = 0;
  v69 = v105;
  sub_10001BFB8((uint64_t)v66, v105, type metadata accessor for EventRowViewModel);
  v70 = (uint64_t)v103;
  State.init(wrappedValue:)(v69, v65);
  sub_10001E24C((uint64_t)v66, type metadata accessor for EventRowViewModel);
  v71 = v129;
  sub_10001BFB8(v70, v129, type metadata accessor for EventRow);
  *(_BYTE *)(v71 + *(int *)(v128 + 36)) = 0;
  sub_10001E24C(v70, type metadata accessor for EventRow);
  v72 = v119;
  v73 = v120;
  v74 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
  v112 = v43;
  v75 = v121;
  v74(v119, v118, v121);
  v118 = v46;
  v76 = v126;
  v77 = v124;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v124, v130, v49);
  v78 = *(unsigned __int8 *)(v73 + 80);
  v79 = (v78 + 48) & ~v78;
  v80 = *(unsigned __int8 *)(v76 + 80);
  v81 = (v117 + v80 + v79) & ~v80;
  v82 = (char *)swift_allocObject(&unk_10014FE98, v81 + v122, v78 | v80 | 7);
  *((_QWORD *)v82 + 2) = v123;
  *((_QWORD *)v82 + 3) = v49;
  *((_QWORD *)v82 + 4) = v125;
  *((_QWORD *)v82 + 5) = v47;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v82[v79], v72, v75);
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v82[v81], v77, v49);
  v83 = sub_10003251C();
  v84 = v114;
  v85 = v129;
  View.onTapGesture(count:perform:)(1, sub_1000E6A4C, v82, v128, v83);
  swift_release(v82);
  v86 = sub_100007F38(v85, &qword_1001598E0);
  v87 = static Color.primary.getter(v86);
  KeyPath = swift_getKeyPath(&unk_100111948);
  v89 = v115;
  v90 = (uint64_t)v113;
  v91 = v116;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v113, v84, v116);
  v92 = v132;
  v93 = (uint64_t *)(v90 + *(int *)(v132 + 36));
  *v93 = KeyPath;
  v93[1] = v87;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v84, v91);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v118, v112);
  v94 = v133;
  sub_100018EB4(v90, v133, &qword_1001598A0);
  v95 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v94, v95, 1, v92);
}

void sub_1000E52CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v12 = type metadata accessor for Optional(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v25 - v14;
  v25[0] = a3;
  v25[1] = a4;
  v25[2] = a5;
  v25[3] = a6;
  v16 = type metadata accessor for ArtistEventView(0, (uint64_t)v25);
  v17 = sub_1000E1148(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, a2, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, a4);
  sub_100104468((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release(v17);
  v19 = sub_1000E1148(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
  {
    v21 = v19;
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_100102910(8, 10, 0, 3u, v20);
    swift_release(v21);
    swift_release(v20);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 48);
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
}

uint64_t sub_1000E546C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t result;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t OpaqueTypeConformance2;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76[16];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v69 = a1;
  v75 = a6;
  v74 = sub_100007D50(&qword_10015F568);
  __chkstk_darwin(v74);
  v73 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100007D50(&qword_10015F570);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v65 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015F578);
  __chkstk_darwin(v12);
  v70 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v72 = (char *)&v62 - v15;
  v16 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v62 - v20;
  v22 = sub_100007D50(&qword_10015F580);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v62 - v28;
  static ToolbarItemPlacement.navigationBarLeading.getter(v27);
  v63 = a2;
  v77 = a2;
  v78 = a3;
  v64 = a3;
  v30 = v69;
  v66 = a4;
  v67 = a5;
  v79 = a4;
  v80 = a5;
  v81 = v69;
  v31 = sub_100007D50(&qword_10015F588);
  v32 = sub_1000E66F8();
  ToolbarItem<>.init(placement:content:)(v21, sub_1000E66EC, v76, v31, v32);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v25, v22);
  v33 = *(_QWORD *)(v30 + 40);
  if (v33)
  {
    swift_retain(*(_QWORD *)(v30 + 40));
    v34 = sub_1000DED48();
    v36 = v35;
    swift_release(v33);
    if (v36 && (swift_bridgeObjectRelease(), (v34 & 1) != 0))
    {
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0)
      {
        v55 = sub_100007D50(&qword_10015F5A0);
        v56 = (uint64_t)v70;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v70, 1, 1, v55);
        v57 = sub_10000F4E0(&qword_10015F5A8, &qword_10015F570, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
        v82 = v71;
        v83 = v57;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
        v49 = (uint64_t)v72;
        static ToolbarContentBuilder.buildIf<A>(_:)(v56, v55, OpaqueTypeConformance2);
        sub_100007F38(v56, &qword_10015F578);
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v38 = static ToolbarItemPlacement.navigationBarTrailing.getter(v37);
    __chkstk_darwin(v38);
    v39 = v64;
    *(&v62 - 6) = v63;
    *(&v62 - 5) = v39;
    v40 = v67;
    *(&v62 - 4) = v66;
    *(&v62 - 3) = v40;
    *(&v62 - 2) = v30;
    v41 = sub_100007D50(&qword_10015A590);
    v42 = sub_10004F888();
    v43 = v65;
    ToolbarItem<>.init(placement:content:)(v18, sub_1000E677C, &v62 - 8, v41, v42);
    v44 = sub_10000F4E0(&qword_10015F5A8, &qword_10015F570, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v46 = (uint64_t)v70;
    v45 = v71;
    static ToolbarContentBuilder.buildBlock<A>(_:)(v43, v71, v44);
    v47 = sub_100007D50(&qword_10015F5A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 0, 1, v47);
    v82 = v45;
    v83 = v44;
    v48 = swift_getOpaqueTypeConformance2(&v82, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v49 = (uint64_t)v72;
    static ToolbarContentBuilder.buildIf<A>(_:)(v46, v47, v48);
    sub_100007F38(v46, &qword_10015F578);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v45);
LABEL_6:
    v50 = v74;
    v51 = v73;
    v52 = (uint64_t)&v73[*(int *)(v74 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v73, v29, v22);
    sub_100007E78(v49, v52, &qword_10015F578);
    TupleToolbarContent.init(_:)(v51, v50);
    sub_100007F38(v49, &qword_10015F578);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v29, v22);
  }
  v59 = *(_QWORD *)(v30 + 48);
  v60 = type metadata accessor for RemoteViewConfiguration();
  v61 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.error()(0, v59, v60, v61);
  __break(1u);
  return result;
}

uint64_t sub_1000E59A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];

  v36 = a6;
  v11 = (int *)type metadata accessor for ArtistEventListHeader(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = sub_100007D50(&qword_10015F588);
  __chkstk_darwin(v35);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[0] = a2;
  v37[1] = a3;
  v37[2] = a4;
  v37[3] = a5;
  v16 = type metadata accessor for ArtistEventView(0, (uint64_t)v37);
  v17 = sub_1000E1148(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v18 = sub_1001020EC();
  v34 = v19;
  swift_release(v17);
  v20 = sub_1000E1148(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100102120((uint64_t)v13 + v11[5]);
  swift_release(v20);
  v21 = sub_1000E1148(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v22 = v21 + *(_QWORD *)(*(_QWORD *)v21 + 184);
  v24 = *(_QWORD *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  v25 = *(_BYTE *)(v22 + 16);
  v26 = *(_QWORD *)(v22 + 24);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  swift_release(v21);
  v27 = v34;
  *v13 = v18;
  v13[1] = v27;
  v28 = (char *)v13 + v11[6];
  *(_QWORD *)v28 = v24;
  *((_QWORD *)v28 + 1) = v23;
  v28[16] = v25;
  *((_QWORD *)v28 + 3) = v26;
  *((_BYTE *)v13 + v11[7]) = 1;
  v29 = (uint64_t *)((char *)v13 + v11[8]);
  *v29 = swift_getKeyPath(&unk_100111918);
  v30 = sub_100007D50(&qword_100158968);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
    v31 = 1.0;
  else
    v31 = 0.0;
  sub_10001BFB8((uint64_t)v13, (uint64_t)v15, type metadata accessor for ArtistEventListHeader);
  *(double *)&v15[*(int *)(v35 + 36)] = v31;
  sub_10001E24C((uint64_t)v13, type metadata accessor for ArtistEventListHeader);
  return sub_100018EB4((uint64_t)v15, v36, &qword_10015F588);
}

uint64_t sub_1000E5BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[2];
  _QWORD v25[4];

  v24[1] = a1;
  v11 = type metadata accessor for DismissAction(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v24 - v16;
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  type metadata accessor for ArtistEventView(0, (uint64_t)v25);
  sub_100018E80((uint64_t)v17);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  v18 = *(unsigned __int8 *)(v12 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_10014FE48, v19 + v13, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v20 + v19, v14, v11);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  v22 = static Font.title2.getter(v21);
  result = swift_getKeyPath(&unk_1001118E8);
  *(_WORD *)a6 = 1;
  *(_QWORD *)(a6 + 8) = sub_100032FDC;
  *(_QWORD *)(a6 + 16) = v20;
  *(_QWORD *)(a6 + 24) = result;
  *(_QWORD *)(a6 + 32) = v22;
  return result;
}

uint64_t sub_1000E5D40()
{
  return sub_100102C58();
}

uint64_t sub_1000E5D60(uint64_t a1)
{
  return sub_100104468(a1);
}

uint64_t sub_1000E5D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a2;
  v27 = a4;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(a1);
  v14 = type metadata accessor for EventView(0, v11, v13, v12);
  v28 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v26 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3, v18);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = (char *)swift_allocObject(&unk_10014FDF8, v22 + v10, v21 | 7);
  *((_QWORD *)v23 + 2) = v26;
  *((_QWORD *)v23 + 3) = a3;
  *((_QWORD *)v23 + 4) = v27;
  *((_QWORD *)v23 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_1000447C8((uint64_t)sub_100032994, (uint64_t)v23, (uint64_t)sub_100044A64, 0, a3, a5, (uint64_t)v16);
  swift_getWitnessTable(&unk_10010A868, v14);
  sub_10005135C((uint64_t)v16, v14, (uint64_t)v20);
  v24 = *(void (**)(char *, uint64_t))(v28 + 8);
  v24(v16, v14);
  sub_1000424BC((uint64_t)v20, v14, v29);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v14);
}

uint64_t sub_1000E5F40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100102CFC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000E5F6C(char *a1)
{
  return sub_100102D98(*a1);
}

uint64_t sub_1000E5F90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[4];

  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  v13[3] = a4;
  v6 = type metadata accessor for ArtistEventView(0, (uint64_t)v13);
  v7 = sub_1000E1148(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = *(_QWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 168));
  swift_retain(v8);
  swift_release(v7);
  v9 = type metadata accessor for RemoteViewConfiguration();
  v10 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v9, v10);
  *a5 = v8;
  a5[1] = result;
  a5[2] = v12;
  return result;
}

void sub_1000E603C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v6 = type metadata accessor for ArtistEventView(0, (uint64_t)v14);
  v7 = sub_1000E1148(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_100102E38(v10);
    swift_release(v9);
    swift_release(v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
}

void sub_1000E60F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v6 = type metadata accessor for ArtistEventView(0, (uint64_t)v13);
  v7 = sub_1000E1148(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    swift_retain(*(_QWORD *)(a1 + 40));
    sub_100102910(0, 2, 0, 3u, v8);
    swift_release(v9);
    swift_release(v8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = type metadata accessor for RemoteViewConfiguration();
    v12 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v10, v11, v12);
    __break(1u);
  }
}

uint64_t sub_1000E61C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[12] = v8;
  v5[13] = v9;
  return swift_task_switch(sub_1000E623C, v8, v9);
}

uint64_t sub_1000E623C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 72);
  v1 = type metadata accessor for ArtistEventView(0, v0 + 16);
  v2 = sub_1000E1148(v1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v3 = *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 168));
  *(_QWORD *)(v0 + 112) = v3;
  swift_retain(v3);
  swift_release(v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10015F784);
  *(_QWORD *)(v0 + 120) = v4;
  *v4 = v0;
  v4[1] = sub_1000E62D4;
  return sub_1000E96D8();
}

uint64_t sub_1000E62D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_release(v2);
  return swift_task_switch(sub_1000E6328, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_1000E6328()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E635C()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E2100);
}

uint64_t sub_1000E6368()
{
  return sub_100102C58();
}

uint64_t sub_1000E6388(uint64_t a1)
{
  return sub_100104468(a1);
}

uint64_t sub_1000E63A8()
{
  return 32;
}

__n128 sub_1000E63B4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000E63C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E63D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000E5D80(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1000E63DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100102CFC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000E6408(char *a1)
{
  return sub_100102D98(*a1);
}

uint64_t sub_1000E642C()
{
  return 32;
}

__n128 sub_1000E6438(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000E6448@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8[0] = v1[2];
  v3 = v8[0];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  type metadata accessor for ArtistEventView(0, (uint64_t)v8);
  return sub_1000E5F90(v3, v4, v5, v6, a1);
}

uint64_t sub_1000E64C4()
{
  return sub_1000E64E0((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E603C);
}

uint64_t sub_1000E64D4()
{
  return sub_1000E64E0((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E60F8);
}

uint64_t sub_1000E64E0(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];

  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v9[0] = *((_QWORD *)v1 + 2);
  v2 = v9[0];
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v9) - 8) + 80);
  return a1(&v1[(v6 + 48) & ~v6], v2, v3, v4, v5);
}

uint64_t sub_1000E655C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v1[2] = v2;
  v1[3] = v3;
  v1[4] = v4;
  v1[5] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)(v1 + 2)) - 8) + 80);
  v7 = (uint64_t)v0 + ((v6 + 48) & ~v6);
  v8 = (_QWORD *)swift_task_alloc(dword_10015F55C);
  v1[6] = v8;
  *v8 = v1;
  v8[1] = sub_1000E7608;
  return sub_1000E61C8(v7, v2, v3, v4, v5);
}

uint64_t sub_1000E65F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000E6650()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E27D4);
}

uint64_t sub_1000E6660(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_10002FF28((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_1000E66E0()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E546C);
}

uint64_t sub_1000E66EC()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E59A8);
}

unint64_t sub_1000E66F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F590;
  if (!qword_10015F590)
  {
    v1 = sub_100007D00(&qword_10015F588);
    sub_100007428(&qword_10015F598, type metadata accessor for ArtistEventListHeader, (uint64_t)&unk_100109968);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F590);
  }
  return result;
}

uint64_t sub_1000E677C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000E5BE4(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1000E678C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000E67FC()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E2BAC);
}

uint64_t sub_1000E6808()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E2E28);
}

uint64_t sub_1000E6814()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E44D4);
}

unint64_t sub_1000E6820()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F5B8;
  if (!qword_10015F5B8)
  {
    v1 = sub_100007D00(&qword_10015F540);
    sub_100032470();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015F5B8);
  }
  return result;
}

uint64_t sub_1000E6888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v5 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  v7 = *((_QWORD *)v2 + 5);
  v10[0] = *((_QWORD *)v2 + 2);
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v10) - 8) + 80);
  return sub_1000E4A48(a1, &v2[(v8 + 48) & ~v8], v5, v7, a2);
}

uint64_t sub_1000E6910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 16);
  v20 = *(_OWORD *)(v0 + 24);
  v18 = v20;
  v21 = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)&v19);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v18 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  sub_1000189BC(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 40));
  v10 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v11 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v4 | v8 | 7;
  v15 = (v5 + v6 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v18, v13);
  return swift_deallocObject(v0, v16, v14);
}

void sub_1000E6A4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v8[0] = v0[2];
  v1 = v8[0];
  v8[1] = v2;
  v8[2] = v3;
  v8[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v8) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  sub_1000E52CC((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + *(_QWORD *)(v5 + 64) + v7) & ~v7), v1, v2, v3, v4);
}

double sub_1000E6AE8(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double sub_1000E6B08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    sub_10008DDF8(a2, a3);
    swift_retain(a6);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E6B5C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

double sub_1000E6BC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRelease();
    sub_100097B2C(a2, a3);
    swift_release(a5);
    *(_QWORD *)&result = swift_release(a6).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E6C18()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];

  v1 = *(_OWORD *)(v0 + 32);
  v11[0] = *(_OWORD *)(v0 + 16);
  v11[1] = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)v11);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  sub_1000189BC(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 40));
  v7 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v8 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

double sub_1000E6CF4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v11) - 8) + 80);
  return sub_1000E4090(a1, a2, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8);
}

uint64_t sub_1000E6D7C()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[2];

  v1 = *(_OWORD *)(v0 + 32);
  v19[0] = *(_OWORD *)(v0 + 16);
  v19[1] = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)v19);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = type metadata accessor for ArtistPromotionalAssets(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  sub_1000189BC(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 40));
  v11 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v12 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    v14 = swift_release(*v11);
  }
  v15 = v4 | v9 | 7;
  v16 = (v5 + v6 + v9) & ~v9;
  v17 = v16 + v10;
  (*(void (**)(uint64_t, uint64_t, __n128))(v8 + 8))(v0 + v16, v7, v14);
  return swift_deallocObject(v0, v17, v15);
}

void sub_1000E6EA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v9[0] = v0[2];
  v1 = v9[0];
  v9[1] = v2;
  v9[2] = v3;
  v9[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)v9) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistPromotionalAssets(0) - 8) + 80);
  sub_1000E3EEC((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + v7 + v8) & ~v8), v1, v2, v3, v4);
}

uint64_t sub_1000E6F44()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];

  v1 = *(_OWORD *)(v0 + 48);
  v12[0] = *(_OWORD *)(v0 + 32);
  v12[1] = v1;
  v2 = type metadata accessor for ArtistEventView(0, (uint64_t)v12);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 64) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = (uint64_t *)(v0 + v5);
  sub_1000189BC(*v7, v7[1]);
  swift_release(v7[4]);
  swift_release(v7[5]);
  v8 = (uint64_t *)((char *)v7 + *(int *)(v2 + 60));
  v9 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  if (*(_QWORD *)(v0 + v6 + 8) >= 2uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6 + 16, v4 | 7);
}

uint64_t sub_1000E7048(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = v1[4];
  v4 = v1[5];
  v6 = v1[6];
  v5 = v1[7];
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = v6;
  v2[5] = v5;
  v7 = *(_QWORD *)(type metadata accessor for ArtistEventView(0, (uint64_t)(v2 + 2)) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + v8;
  v12 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = (_QWORD *)swift_task_alloc(dword_10015F5E4);
  v2[6] = v15;
  *v15 = v2;
  v15[1] = sub_1000E7128;
  return sub_1000E4240(a1, v9, v10, v11, v13, v14, v3, v4);
}

uint64_t sub_1000E7128()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000E7170(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  ValueMetadata *AssociatedTypeWitness;
  uint64_t v46;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v49;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v43 = type metadata accessor for NavigationPath(255, a2);
  v4 = sub_100007D00(&qword_10015F538);
  sub_100007D00(&qword_100159898);
  v5 = type metadata accessor for Array(255, v2);
  v6 = *(_QWORD *)(v3 + 16);
  v44 = v5;
  AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness(255, v6, v2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v46 = sub_100007D00(&qword_10015F540);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  type metadata accessor for ForEach(255, &v44);
  v7 = type metadata accessor for _ConditionalContent(255);
  v8 = type metadata accessor for Group(255, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(255, v12, v13);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v16 = type metadata accessor for LazyVGrid(255, v14, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v16);
  v19 = type metadata accessor for ObservableScrollView(255, v16, v17, v18);
  v20 = swift_getWitnessTable(&unk_10010F020, v19);
  v44 = v19;
  AssociatedTypeWitness = (ValueMetadata *)v20;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v22 = sub_100007D00(&qword_10015F548);
  v44 = v19;
  AssociatedTypeWitness = (ValueMetadata *)v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v24 = sub_10000F4E0(&qword_10015F550, &qword_10015F548, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v44 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (ValueMetadata *)v22;
  v46 = OpaqueTypeConformance2;
  WitnessTable = v24;
  v25 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v44 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (ValueMetadata *)v22;
  v46 = OpaqueTypeConformance2;
  WitnessTable = v24;
  v26 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v27 = type metadata accessor for NavigationStack(255, v43, v25, v26);
  v29 = type metadata accessor for EventView(255, v2, v3, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v27);
  v31 = swift_getWitnessTable(&unk_10010A868, v29);
  v44 = v27;
  AssociatedTypeWitness = (ValueMetadata *)v2;
  v46 = v29;
  WitnessTable = v30;
  AssociatedConformanceWitness = v6;
  v49 = v31;
  v32 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v44 = v27;
  AssociatedTypeWitness = (ValueMetadata *)v2;
  v46 = v29;
  WitnessTable = v30;
  AssociatedConformanceWitness = v6;
  v49 = v31;
  v33 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v34 = sub_1000188D0();
  v44 = v32;
  AssociatedTypeWitness = &type metadata for PromotionalAssetsContentView;
  v46 = v33;
  WitnessTable = v34;
  v35 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _AppearanceActionModifier);
  v37 = type metadata accessor for ModifiedContent(255, v36, &type metadata for _AppearanceActionModifier);
  v38 = type metadata accessor for _TaskModifier(255);
  v39 = type metadata accessor for ModifiedContent(255, v37, v38);
  v40 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v41 = type metadata accessor for ModifiedContent(255, v39, v40);
  v44 = v32;
  AssociatedTypeWitness = &type metadata for PromotionalAssetsContentView;
  v46 = v33;
  WitnessTable = v34;
  swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v36);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v39);
  sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v41);
}

uint64_t *sub_1000E7610(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for PromotionalAssetsContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for PromotionalAssetsContentView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PromotionalAssetsContentView()
{
  return &type metadata for PromotionalAssetsContentView;
}

uint64_t sub_1000E7704(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001197D8, 1);
}

uint64_t sub_1000E7714()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000E7734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E78(a1, (uint64_t)v4, &qword_100158970);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t sub_1000E77B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[4];

  v122 = a3;
  v124 = a2;
  v133 = a4;
  v120 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v120);
  v114 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for TaskPriority(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v119 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100007D50(&qword_10015F5F0);
  __chkstk_darwin(v132);
  v115 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v118 = (uint64_t)&v113 - v9;
  v129 = sub_100007D50(&qword_10015F5F8);
  __chkstk_darwin(v129);
  v131 = (uint64_t)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100007D50(&qword_10015F600);
  __chkstk_darwin(v126);
  v125 = (uint64_t *)((char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = sub_100007D50(&qword_10015F608);
  __chkstk_darwin(v130);
  v128 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100007D50(&qword_10015F610);
  __chkstk_darwin(v127);
  v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v123 = (uint64_t)&v113 - v16;
  v17 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v17);
  v19 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ArtistPromotionalAssets(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v121 = (char *)&v113 - v25;
  KeyPath = swift_getKeyPath(&unk_100111A10);
  v135[0] = a1;
  v27 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v135, KeyPath, v27);
  swift_release(KeyPath);
  v28 = a1;
  v29 = a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v135, 0, 0);
  v30 = v29;
  v31 = v20;
  sub_100007E78(v30, (uint64_t)v19, &qword_10015A610);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v33 = v119;
    v32 = v120;
    sub_100007F38((uint64_t)v19, &qword_10015A610);
    v34 = swift_getKeyPath(&unk_100111A38);
    v134 = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v134, v34, v27);
    swift_release(v34);
    if (*(_QWORD *)(v28 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error)
      || (v35 = swift_getKeyPath(&unk_100111A60),
          v134 = v28,
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v134, v35, v27),
          swift_release(v35),
          *(_QWORD *)(v28 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel)))
    {
      v36 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x8000000100115600);
      v38 = v37;
      v40 = v39;
      v121 = v41;
      v42 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100115630);
      v44 = v43;
      v46 = v45;
      v48 = v47;
      v49 = (_QWORD *)swift_allocObject(&unk_100150040, 40, 7);
      v50 = v124;
      v49[2] = v28;
      v49[3] = v50;
      v49[4] = v122;
      v123 = v28;
      v52 = v125;
      v51 = v126;
      *v125 = v36;
      v52[1] = v38;
      v53 = v38;
      *((_BYTE *)v52 + 16) = v40 & 1;
      v54 = v121;
      v52[3] = (uint64_t)v121;
      v52[4] = v42;
      v52[5] = v44;
      *((_BYTE *)v52 + 48) = v46 & 1;
      v52[7] = v48;
      v52[8] = (uint64_t)sub_1000E8B9C;
      v52[10] = 0;
      v52[11] = 0;
      v52[9] = (uint64_t)v49;
      swift_storeEnumTagMultiPayload(v52, v51, 1);
      swift_retain(v50);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v48);
      swift_retain(v123);
      sub_100020C7C((uint64_t)sub_1000E8B9C, (uint64_t)v49);
      sub_100020C7C(0, 0);
      v55 = sub_100007D50(&qword_10015F640);
      v56 = sub_10000F4E0(&qword_10015F630, &qword_10015F610, (uint64_t)&unk_10010D808);
      v57 = sub_1000E89F4();
      v58 = (uint64_t)v128;
      _ConditionalContent<>.init(storage:)(v52, v127, v55, v56, v57);
      v59 = v131;
      sub_100007E78(v58, v131, &qword_10015F608);
      swift_storeEnumTagMultiPayload(v59, v129, 0);
      v60 = sub_1000E8970();
      v61 = sub_1000E8AA4();
      _ConditionalContent<>.init(storage:)(v59, v130, v132, v60, v61);
      sub_100007F38(v58, &qword_10015F608);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100020BA0((uint64_t)sub_1000E8B9C, (uint64_t)v49);
      return sub_100020BA0(0, 0);
    }
    else
    {
      v128 = (char *)LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x80000001001155D0);
      v94 = v93;
      v96 = v95;
      v98 = v97;
      v99 = (_QWORD *)swift_allocObject(&unk_100150018, 40, 7);
      v99[2] = v28;
      v100 = v124;
      v101 = v122;
      v99[3] = v124;
      v99[4] = v101;
      swift_retain(v100);
      swift_retain(v28);
      v102 = v33;
      static TaskPriority.userInitiated.getter(v103);
      v104 = v114;
      v105 = v116;
      v106 = v117;
      (*(void (**)(char *, char *, uint64_t))(v116 + 16))(&v114[*(int *)(v32 + 20)], v102, v117);
      *v104 = &unk_10015F620;
      v104[1] = v99;
      v107 = v132;
      v108 = (uint64_t)v115;
      sub_1000E88F0((uint64_t)v104, (uint64_t)&v115[*(int *)(v132 + 36)]);
      *(_QWORD *)v108 = v128;
      *(_QWORD *)(v108 + 8) = v94;
      *(_BYTE *)(v108 + 16) = v96 & 1;
      *(_QWORD *)(v108 + 24) = v98;
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRetain(v98);
      sub_1000E8934((uint64_t)v104);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v109 = v118;
      sub_100018EB4(v108, v118, &qword_10015F5F0);
      v110 = v131;
      sub_100007E78(v109, v131, &qword_10015F5F0);
      swift_storeEnumTagMultiPayload(v110, v129, 1);
      v111 = sub_1000E8970();
      v112 = sub_1000E8AA4();
      _ConditionalContent<>.init(storage:)(v110, v130, v107, v111, v112);
      return sub_100007F38(v109, &qword_10015F5F0);
    }
  }
  else
  {
    v63 = v121;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v121, v19, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v23, v63, v20);
    v64 = sub_100007D50(&qword_10015F660);
    swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
    v65 = sub_1000E8BA8((uint64_t)v23);
    v66 = sub_10000F4E0(&qword_10015F668, &qword_10015F660, (uint64_t)&unk_100112470);
    Bindable<A>.init(wrappedValue:)(v65, v64, v66);
    v67 = (int *)v127;
    v68 = &v14[*(int *)(v127 + 36)];
    v69 = sub_100007D50(&qword_100159A18);
    v70 = swift_allocObject(v69, 17, 7);
    *(_BYTE *)(v70 + 16) = 0;
    v71 = sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    *(_QWORD *)v68 = ObservedObject.init(wrappedValue:)(v70, v69, v71);
    *((_QWORD *)v68 + 1) = v72;
    v73 = &v14[v67[10]];
    v74 = type metadata accessor for RemoteViewConfiguration();
    v75 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *(_QWORD *)v73 = EnvironmentObject.init()(v74, v75);
    *((_QWORD *)v73 + 1) = v76;
    v77 = &v14[v67[11]];
    *(_QWORD *)v77 = swift_getKeyPath(&unk_100111A88);
    v78 = sub_100007D50(qword_100158AC8);
    swift_storeEnumTagMultiPayload(v77, v78, 0);
    v79 = &v14[v67[12]];
    *(_QWORD *)v79 = swift_getKeyPath(&unk_100111AB8);
    v80 = sub_100007D50(&qword_100158AC0);
    swift_storeEnumTagMultiPayload(v79, v80, 0);
    v81 = &v14[v67[13]];
    *(_QWORD *)v81 = swift_getKeyPath(&unk_100111AE8);
    v82 = sub_100007D50(&qword_100158968);
    swift_storeEnumTagMultiPayload(v81, v82, 0);
    v83 = &v14[v67[14]];
    *(_QWORD *)v83 = swift_getKeyPath(&unk_100111B18);
    swift_storeEnumTagMultiPayload(v83, v82, 0);
    v84 = v123;
    sub_100018EB4((uint64_t)v14, v123, &qword_10015F610);
    v85 = v125;
    sub_100007E78(v84, (uint64_t)v125, &qword_10015F610);
    swift_storeEnumTagMultiPayload(v85, v126, 0);
    v86 = sub_100007D50(&qword_10015F640);
    v87 = sub_10000F4E0(&qword_10015F630, &qword_10015F610, (uint64_t)&unk_10010D808);
    v88 = sub_1000E89F4();
    v89 = (uint64_t)v128;
    _ConditionalContent<>.init(storage:)(v85, v67, v86, v87, v88);
    v90 = v131;
    sub_100007E78(v89, v131, &qword_10015F608);
    swift_storeEnumTagMultiPayload(v90, v129, 0);
    v91 = sub_1000E8970();
    v92 = sub_1000E8AA4();
    _ConditionalContent<>.init(storage:)(v90, v130, v132, v91, v92);
    sub_100007F38(v89, &qword_10015F608);
    sub_100007F38(v84, &qword_10015F610);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v63, v31);
  }
}

uint64_t sub_1000E825C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 32) == 1)
  {
    v4 = *(_QWORD *)(result + 24);
    if (a2)
    {
      v5 = *(_QWORD *)(result + 16);
      sub_1000E9560(v5, v4);
      swift_retain(a2);
      sub_10008AB1C(v5, v4, 9, a2);
      swift_release(a2);
      return sub_1000E9568(v5, v4);
    }
    else
    {
      v7 = type metadata accessor for RemoteViewConfiguration();
      v8 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
      swift_bridgeObjectRetain(v4);
      result = EnvironmentObject.error()(0, a3, v7, v8);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000E8338()
{
  _QWORD *v0;
  __n128 v1;
  _QWORD *v2;

  v0[2] = type metadata accessor for MainActor(0);
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10015F784);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_1000E839C;
  return sub_1000E96D8();
}

uint64_t sub_1000E839C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100058FA4, v2, v3);
}

uint64_t sub_1000E840C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000E77B4(*v1, v1[1], v1[2], a1);
}

uint64_t sub_1000E8418@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100111A10);
  v8[0] = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v8, 0, 0);
  return sub_100007E78(v6, a2, &qword_10015A610);
}

uint64_t sub_1000E84D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007E78(a1, (uint64_t)v6, &qword_10015A610);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_100111A10);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_1000E95A0, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v6, &qword_10015A610);
}

uint64_t sub_1000E85D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100111A38);
  v8 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error);
  *a2 = v6;
  return swift_errorRetain(v6);
}

double sub_1000E8670(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100111A38);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  swift_errorRetain(v2);
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000E9588, v7, (char *)&type metadata for () + 8, v5);
  swift_errorRelease(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000E8734@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100111A60);
  v8 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel);
  *a2 = v6;
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

double sub_1000E87D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100111A60);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000E9570, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000E8890()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015F61C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000FAC0;
  return sub_1000E8338();
}

uint64_t sub_1000E88F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E8934(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000E8970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F628;
  if (!qword_10015F628)
  {
    v1 = sub_100007D00(&qword_10015F608);
    sub_10000F4E0(&qword_10015F630, &qword_10015F610, (uint64_t)&unk_10010D808);
    sub_1000E89F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F628);
  }
  return result;
}

unint64_t sub_1000E89F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F638;
  if (!qword_10015F638)
  {
    v1 = sub_100007D00(&qword_10015F640);
    sub_1000E8A60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F638);
  }
  return result;
}

unint64_t sub_1000E8A60()
{
  unint64_t result;

  result = qword_10015F648;
  if (!qword_10015F648)
  {
    result = swift_getWitnessTable(&unk_10010DE04, &type metadata for GenericErrorView);
    atomic_store(result, (unint64_t *)&qword_10015F648);
  }
  return result;
}

unint64_t sub_1000E8AA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F650;
  if (!qword_10015F650)
  {
    v1 = sub_100007D00(&qword_10015F5F0);
    sub_1000E8B28();
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F650);
  }
  return result;
}

unint64_t sub_1000E8B28()
{
  unint64_t result;

  result = qword_10015F658;
  if (!qword_10015F658)
  {
    result = swift_getWitnessTable(&unk_10010E074, &type metadata for LoadingStateView);
    atomic_store(result, (unint64_t *)&qword_10015F658);
  }
  return result;
}

uint64_t sub_1000E8B70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E8B9C()
{
  uint64_t *v0;

  return sub_1000E825C(v0[2], v0[3], v0[4]);
}

_QWORD *sub_1000E8BA8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];

  v2 = v1;
  v4 = sub_100007D50(&qword_10015B990);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015AD50);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015A6A0);
  v42 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - v14;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 112)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 128)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 136)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 144)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 152)) = 0;
  v16 = (_OWORD *)((char *)v2 + *(_QWORD *)(*v2 + 160));
  *v16 = 0u;
  v16[1] = 0u;
  v17 = (char *)v2 + *(_QWORD *)(*v2 + 168);
  v18 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 176)) = 0;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 184)) = 0;
  v19 = (char *)v2 + *(_QWORD *)(*v2 + 192);
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 200)) = 0;
  v20 = (char *)v2 + *(_QWORD *)(*v2 + 208);
  v21 = type metadata accessor for PromotionalAssets.Video(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  ObservationRegistrar.init()(v22);
  v23 = (char *)v2 + *(_QWORD *)(*v2 + 104);
  v24 = type metadata accessor for ArtistPromotionalAssets(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, a1, v24);
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v26);
  v43 = a1;
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v27);
  v28 = sub_100007428(&qword_10015B998, (uint64_t (*)(uint64_t))&type metadata accessor for LiveMusic, (uint64_t)&protocol conformance descriptor for LiveMusic);
  Event<>.participants.getter(v10, v28);
  v29 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
  v42 = v10;
  v30 = v29(v12, v10);
  v31 = Participants<>.headliners.getter(v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  sub_10008B530(v31, (uint64_t)v9);
  swift_bridgeObjectRelease();
  v32 = type metadata accessor for Artist(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v9, 1, v32) == 1)
  {
    sub_100007F38((uint64_t)v9, &qword_10015AD50);
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v34 = Artist.name.getter();
    v35 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v32);
  }
  swift_beginAccess(&qword_10016A518, v44, 33, 0);
  v37 = sub_1000E8F8C((uint64_t)v15, v34, v35, &qword_10016A518);
  swift_endAccess(v44);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v43, v24);
  v29(v15, v42);
  v2[2] = v37;
  return v2;
}

uint64_t sub_1000E8F68()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

_QWORD *sub_1000E8F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];
  _QWORD v35[5];

  v8 = sub_100007D50(&qword_10015A6A0);
  v35[3] = v8;
  v9 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
  v35[4] = v9;
  v10 = sub_10002BA68(v35);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v10, a1, v8);
  v11 = (_QWORD *)*a4;
  if (!*a4)
    goto LABEL_8;
  v33 = a2;
  v12 = v11[5];
  v13 = v11[6];
  sub_10001BF94(v11 + 2, v12);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v13 + 152);
  v15 = swift_retain(v11);
  v16 = v14(v12, v13, v15);
  v18 = v17;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 152))(v8, v9);
  if (v16 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
    goto LABEL_10;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    swift_release(v11);
    a2 = v33;
LABEL_8:
    sub_10003BC30((uint64_t)v35, (uint64_t)v34);
    v23 = type metadata accessor for SetlistController(0);
    v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v25 = sub_1000228D4((uint64_t)v34, v34[3]);
    v26 = __chkstk_darwin(v25);
    v28 = (char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v29 + 16))(v28, v26);
    swift_bridgeObjectRetain(a3);
    v30 = sub_1000E91AC((uint64_t)v28, a2, a3, v24);
    sub_1000228FC(v34);
    swift_retain(v30);
    swift_release(v11);
    *a4 = v30;
    v11 = (_QWORD *)v30;
  }
LABEL_10:
  sub_1000228FC(v35);
  return v11;
}

uint64_t sub_1000E91AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v8 = sub_100007D50(&qword_10015A6A0);
  v45 = v8;
  v9 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
  v46 = v9;
  v10 = sub_10002BA68(v44);
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v10, a1, v8);
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_QWORD *)(a4 + 104) = 0;
  ObservationRegistrar.init()(v11);
  sub_10003BC30((uint64_t)v44, a4 + 16);
  *(_QWORD *)(a4 + 56) = a2;
  *(_QWORD *)(a4 + 64) = a3;
  v12 = v45;
  v13 = v46;
  sub_10001BF94(v44, v45);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v12, &unk_10011790C, &unk_10011798C);
  v15 = type metadata accessor for Optional(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  Event<>.setlist.getter(v17);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    goto LABEL_8;
  }
  *((_QWORD *)&v39 + 1) = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, v12, AssociatedTypeWitness, &unk_10011790C, &unk_100117944);
  v40 = AssociatedConformanceWitness;
  v22 = sub_10002BA68(&v38);
  (*(void (**)(_QWORD *, char *, uint64_t))(v20 + 32))(v22, v19, AssociatedTypeWitness);
  v23 = *((_QWORD *)&v39 + 1);
  v24 = v40;
  sub_10001BF94(&v38, *((uint64_t *)&v39 + 1));
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v23, v24);
  v26 = swift_getAssociatedTypeWitness(0, v24, v23, &unk_100117D74, &unk_100117D94);
  v27 = sub_100007D50(&qword_10015F2B0);
  v28 = _arrayForceCast<A, B>(_:)(v25, v26, v27);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v28 + 16))
  {
    sub_10003BC30(v28 + 32, (uint64_t)&v41);
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000228FC(&v38);
  if (!*((_QWORD *)&v42 + 1))
  {
LABEL_8:
    sub_100007F38((uint64_t)&v41, &qword_10015F670);
    sub_10003BC30((uint64_t)v44, (uint64_t)&v41);
    v30 = *((_QWORD *)&v42 + 1);
    v31 = v43;
    sub_10001BF94(&v41, *((uint64_t *)&v42 + 1));
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 240))(v30, v31);
    if (v32)
    {
      v33 = v32;
      v34 = swift_getAssociatedTypeWitness(0, v31, v30, &unk_10011790C, &unk_100117994);
      v35 = sub_100007D50(&qword_10015F2C0);
      v36 = _arrayForceCast<A, B>(_:)(v33, v34, v35);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v36 + 16))
      {
        sub_10003BC30(v36 + 32, (uint64_t)&v38);
      }
      else
      {
        v40 = 0;
        v38 = 0u;
        v39 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v39 + 1))
      {
        v29 = 1;
LABEL_16:
        sub_100007F38((uint64_t)&v38, &qword_10015F2C8);
        goto LABEL_17;
      }
    }
    else
    {
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
    }
    v29 = 0;
    goto LABEL_16;
  }
  sub_100007F38((uint64_t)&v41, &qword_10015F670);
  sub_10003BC30((uint64_t)v44, (uint64_t)&v41);
  v29 = 1;
LABEL_17:
  sub_1000228FC(&v41);
  *(_BYTE *)(a4 + 113) = v29;
  *(_BYTE *)(a4 + 112) = v29;
  sub_1000228FC(v44);
  return a4;
}

uint64_t sub_1000E9560(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000E9568(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000E9570()
{
  uint64_t v0;

  return sub_1000E9BB8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000E9588()
{
  uint64_t v0;

  return sub_1000E9AE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000E95A0()
{
  uint64_t v0;

  return sub_1000E99E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000E95BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F678;
  if (!qword_10015F678)
  {
    v1 = sub_100007D00(&qword_10015F680);
    sub_1000E8970();
    sub_1000E8AA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015F678);
  }
  return result;
}

uint64_t sub_1000E9628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_100111BE8);
  v7[0] = v1;
  v4 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v7, 0, 0);
  return sub_100062A50(v5, a1);
}

uint64_t sub_1000E96D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v1[6] = v0;
  v2 = sub_100007D50(&qword_10015A610);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[8] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[9] = v5;
  v1[10] = v6;
  return swift_task_switch(sub_1000E9768, v5, v6);
}

uint64_t sub_1000E9768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  KeyPath = swift_getKeyPath(&unk_100111BE8);
  *(_QWORD *)(v0 + 40) = v2;
  v4 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v0 + 16, 0, 0);
  sub_100062A50(v5, v1);
  v6 = type metadata accessor for ArtistPromotionalAssets(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v1, 1, v6) == 1)
  {
    v7 = *(_QWORD *)(v0 + 48);
    sub_100007F38(*(_QWORD *)(v0 + 56), &qword_10015A610);
    v9 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if ((*(_BYTE *)(v7 + 32) & 1) != 0)
    {
      v10 = (_QWORD *)swift_task_alloc(dword_10015F78C);
      *(_QWORD *)(v0 + 96) = v10;
      *v10 = v0;
      v10[1] = sub_1000E999C;
      return sub_1000E9FB0(v9, v8);
    }
    else
    {
      v13 = (_QWORD *)swift_task_alloc(dword_10015F794);
      *(_QWORD *)(v0 + 88) = v13;
      *v13 = v0;
      v13[1] = sub_1000E9918;
      return sub_1000E9BF8(v9, v8);
    }
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 56);
    swift_release(*(_QWORD *)(v0 + 64));
    sub_100007F38(v12, &qword_10015A610);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000E9918()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  return swift_task_switch(sub_1000E9964, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_1000E9964()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E999C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  return swift_task_switch(sub_1000EAF8C, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_1000E99E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v5, 33, 0);
  sub_1000EAE94(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1000E9A50()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100111C10);
  v5 = v0;
  v2 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error);
  swift_errorRetain(v3);
  return v3;
}

uint64_t sub_1000E9AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = a2;
  swift_errorRetain(a2);
  return swift_errorRelease(v2);
}

double sub_1000E9B28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100111C38);
  v4 = v0;
  v2 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0
                                              + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel)).n128_u64[0];
  return result;
}

uint64_t sub_1000E9BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = a2;
  swift_retain(a2);
  return swift_release(v2);
}

uint64_t sub_1000E9BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_100007D50(&qword_10015A610);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_10015A6A0);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v3[11] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v3[12] = v9;
  v3[13] = v10;
  return swift_task_switch(sub_1000E9CB8, v9, v10);
}

uint64_t sub_1000E9CB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[5];
  sub_1000EA9E8();
  v2 = async function pointer to Event<>.init(id:)[1];
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[14] = v3;
  *v3 = v0;
  v3[1] = sub_1000E9D20;
  return Event<>.init(id:)(v0[10], v0[4], v0[5]);
}

uint64_t sub_1000E9D20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000E9EA8;
  else
    v4 = sub_1000E9D80;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000E9D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = swift_release(*(_QWORD *)(v0 + 88));
  Event<>.artistPromotionalAssets.getter(v5);
  KeyPath = swift_getKeyPath(&unk_100111BE8);
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v0 + 24) = v3;
  v8 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, KeyPath, sub_1000E95A0, v7, (char *)&type metadata for () + 8, v8);
  swift_release(KeyPath);
  swift_task_dealloc(v7);
  sub_100007F38(v4, &qword_10015A610);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  v9 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E9EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 88));
  KeyPath = swift_getKeyPath(&unk_100111C10);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  swift_errorRetain(v1);
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_1000EAE80, v4, (char *)&type metadata for () + 8, v5);
  swift_errorRelease(v1);
  swift_release(KeyPath);
  swift_errorRelease(v1);
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E9FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_100007D50(&qword_10015A3C8);
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[12] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  v8 = type metadata accessor for EventsError(0);
  v3[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015A610);
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  v3[19] = v11;
  v3[20] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v3[21] = v13;
  v3[22] = v14;
  return swift_task_switch(sub_1000EA0CC, v13, v14);
}

uint64_t sub_1000EA0CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  sub_1000EA9E8();
  v2 = async function pointer to ArtistPromotionalAssets.init(artistID:)[1];
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[23] = v3;
  *v3 = v0;
  v3[1] = sub_1000EA134;
  return ArtistPromotionalAssets.init(artistID:)(v0[18], v0[7], v0[8]);
}

uint64_t sub_1000EA134()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000EA2B0;
  else
    v4 = sub_1000EA194;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_1000EA194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 160));
  KeyPath = swift_getKeyPath(&unk_100111BE8);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v0 + 48) = v2;
  v5 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 48, KeyPath, sub_1000EAF78, v4, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  swift_task_dealloc(v4);
  sub_100007F38(v1, &qword_10015A610);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __n128 v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  swift_errorRetain(v1);
  v4 = sub_100007D50(&qword_100159698);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 88))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    *(_DWORD *)(v0 + 224) = v5;
    if (v5 == enum case for EventsError.missingData(_:))
    {
      swift_errorRelease(*(_QWORD *)(v0 + 192));
      *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v6);
      v7 = (_QWORD *)swift_task_alloc(dword_10015FBE4);
      *(_QWORD *)(v0 + 208) = v7;
      *v7 = v0;
      v7[1] = sub_1000EA4C4;
      return sub_1000EDDAC(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    }
    v10 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 120);
    v12 = swift_release(*(_QWORD *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v9, v11, v12);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 160));
  }
  v13 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 72);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  KeyPath = swift_getKeyPath(&unk_100111C10);
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v14;
  *(_QWORD *)(v16 + 24) = v13;
  *(_QWORD *)(v0 + 24) = v14;
  swift_errorRetain(v13);
  v17 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, KeyPath, sub_1000EAE80, v16, (char *)&type metadata for () + 8, v17);
  swift_errorRelease(v13);
  swift_release(KeyPath);
  swift_errorRelease(v13);
  swift_task_dealloc(v16);
  v18 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA4C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 152), &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000EA810;
  else
    v6 = sub_1000EA54C;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000EA54C()
{
  _QWORD *v0;

  swift_release(v0[25]);
  return swift_task_switch(sub_1000EA584, v0[21], v0[22]);
}

uint64_t sub_1000EA584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = swift_release(*(_QWORD *)(v0 + 160));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v2 + 48))(v3, 1, v1, v4) == 1)
  {
    v5 = *(unsigned int *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 72);
    sub_100007F38(*(_QWORD *)(v0 + 80), &qword_10015A3C8);
    v9 = sub_100007428((unint64_t *)&qword_10015C130, (uint64_t (*)(uint64_t))&type metadata accessor for EventsError, (uint64_t)&protocol conformance descriptor for EventsError);
    v10 = swift_allocError(v6, v9, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v11, v5, v6);
    KeyPath = swift_getKeyPath(&unk_100111C10);
    v13 = swift_task_alloc(32);
    *(_QWORD *)(v13 + 16) = v8;
    *(_QWORD *)(v13 + 24) = v10;
    *(_QWORD *)(v0 + 32) = v8;
    v14 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 32, KeyPath, sub_1000EAE80, v13, (char *)&type metadata for () + 8, v14);
    swift_errorRelease(v10);
    swift_release(KeyPath);
    swift_task_dealloc(v13);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 72);
    sub_100072850(*(_QWORD *)(v0 + 80), v15);
    sub_100072894(v15, v16);
    v18 = sub_100007D50(&qword_10015C138);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = sub_100059980(v16, (uint64_t)&_swiftEmptyArrayStorage);
    v20 = swift_getKeyPath(&unk_100111C38);
    v21 = swift_task_alloc(32);
    *(_QWORD *)(v21 + 16) = v17;
    *(_QWORD *)(v21 + 24) = v19;
    *(_QWORD *)(v0 + 40) = v17;
    v22 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, v20, sub_1000EAEE4, v21, (char *)&type metadata for () + 8, v22);
    swift_release(v19);
    swift_release(v20);
    swift_task_dealloc(v21);
    sub_1000728E0(v15);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v23 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA810()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[27];
  swift_release(v0[25]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_1000EA854, v0[21], v0[22]);
}

uint64_t sub_1000EA854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v2 + 56))(v3, 1, 1, v1, v4);
  v5 = *(unsigned int *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 72);
  sub_100007F38(*(_QWORD *)(v0 + 80), &qword_10015A3C8);
  v9 = sub_100007428((unint64_t *)&qword_10015C130, (uint64_t (*)(uint64_t))&type metadata accessor for EventsError, (uint64_t)&protocol conformance descriptor for EventsError);
  v10 = swift_allocError(v6, v9, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v11, v5, v6);
  KeyPath = swift_getKeyPath(&unk_100111C10);
  v13 = swift_task_alloc(32);
  *(_QWORD *)(v13 + 16) = v8;
  *(_QWORD *)(v13 + 24) = v10;
  *(_QWORD *)(v0 + 32) = v8;
  v14 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 32, KeyPath, sub_1000EAE80, v13, (char *)&type metadata for () + 8, v14);
  swift_errorRelease(v10);
  swift_release(KeyPath);
  swift_task_dealloc(v13);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v15 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000EA9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v1 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for ArtistPromotionalAssets(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  KeyPath = swift_getKeyPath(&unk_100111BE8);
  v17 = v0;
  v18 = v3;
  v19 = v0;
  v6 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, KeyPath, sub_1000EAF78, v16, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  sub_100007F38((uint64_t)v3, &qword_10015A610);
  v7 = swift_getKeyPath(&unk_100111C38);
  v14 = v0;
  v15 = 0;
  v19 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v7, sub_1000EAEE4, v13, (char *)&type metadata for () + 8, v6);
  swift_release(v7);
  v8 = swift_getKeyPath(&unk_100111C10);
  v11 = v0;
  v12 = 0;
  v19 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v8, sub_1000EAE80, v10, (char *)&type metadata for () + 8, v6);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_1000EAB8C()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;

  sub_1000E9568(v0[2], v0[3]);
  sub_100007F38((uint64_t)v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, &qword_10015A610);
  swift_errorRelease(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error));
  swift_release(*(uint64_t *)((char *)v0
                           + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel));
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000EAC20()
{
  return type metadata accessor for PromotionalAssetsController(0);
}

uint64_t type metadata accessor for PromotionalAssetsController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F6D0;
  if (!qword_10015F6D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PromotionalAssetsController);
  return result;
}

void sub_1000EAC64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100111B80;
  sub_1000EAD04(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100111B98;
    v6[3] = &unk_100111B98;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_1000EAD04(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_10015F6E0)
  {
    type metadata accessor for ArtistPromotionalAssets(255);
    v2 = type metadata accessor for Optional(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_10015F6E0);
  }
}

uint64_t destroy for PromotionalAssetsController.PromotionalAssetsType(uint64_t *a1)
{
  return sub_1000E9568(*a1, a1[1]);
}

uint64_t _s15ShazamEventsApp27PromotionalAssetsControllerC21PromotionalAssetsTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000E9560(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000E9560(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000E9568(v6, v7);
  return a1;
}

uint64_t assignWithTake for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000E9568(v4, v5);
  return a1;
}

uint64_t sub_1000EAE4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000EAE54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsController.PromotionalAssetsType()
{
  return &type metadata for PromotionalAssetsController.PromotionalAssetsType;
}

uint64_t sub_1000EAE80()
{
  return sub_1000EAEF8();
}

uint64_t sub_1000EAE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015A610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EAEE4()
{
  return sub_1000EAF38();
}

uint64_t sub_1000EAEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = v1;
  swift_errorRetain(v1);
  return swift_errorRelease(v3);
}

uint64_t sub_1000EAF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_1000EAF78()
{
  return sub_1000E95A0();
}

void sub_1000EAF90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_1000EBB1C();
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[3] = " ";
      swift_initClassMetadata2(a1, 0, 4, v6, a1 + 96);
    }
  }
}

uint64_t sub_1000EB034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000EB914(a1);
  return v3;
}

uint64_t sub_1000EB070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &unk_10011790C, &unk_100117964);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 200))(v2, v1, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  v9 = sub_1000937A8(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_1000EB164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t, __n128);
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(char *, uint64_t);
  Swift::String v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  unint64_t v21;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &unk_10011790C, &unk_100117964);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v20 - v6;
  v20 = 0;
  v21 = 0xE000000000000000;
  v8 = *(void (**)(uint64_t, uint64_t, __n128))(v1 + 200);
  v8(v2, v1, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  v10 = sub_100093E08(AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  v20 = v10;
  v21 = v12;
  v14._countAndFlagsBits = 0x20A280E220;
  v14._object = (void *)0xA500000000000000;
  String.append(_:)(v14);
  ((void (*)(uint64_t, uint64_t))v8)(v2, v1);
  v15 = sub_10009409C(AssociatedTypeWitness, AssociatedConformanceWitness);
  v17 = v16;
  v13(v7, AssociatedTypeWitness);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1000EB2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  void *v11;
  void *v12;
  void (*v13)(char *, uint64_t);
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &unk_10011790C, &unk_100117964);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v21 - v5;
  v23 = sub_1000EB070();
  v24 = v7;
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v22 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
  v22(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  v10 = sub_100093E08(AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = v11;
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v6, AssociatedTypeWitness);
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8236;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v22(v2, v1);
  v16 = sub_10009409C(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = v17;
  v13(v6, AssociatedTypeWitness);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v23;
}

BOOL sub_1000EB484()
{
  uint64_t v0;

  return (sub_10006AA70(*(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88)) & 1) == 0;
}

uint64_t sub_1000EB4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000EB524, v4, v5);
}

uint64_t sub_1000EB524()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  if ((sub_10006AA70(*(_QWORD *)(*(_QWORD *)v1 + 80), *(_QWORD *)(*(_QWORD *)v1 + 88)) & 1) == 0)
    sub_1000EB868(1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000EB57C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  ValueWitnessTable *v14;
  uint64_t v15;
  char *v16;
  NSString v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  Class (*v24)(uint64_t);
  ValueMetadata *v25;
  _QWORD *(*v26)();
  _QWORD *v27;
  char *v28;

  v3 = *v1;
  v4 = sub_100007D50(&qword_100159260);
  v5 = swift_allocObject(v4, 192, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100109440;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 88) + 152))(*(_QWORD *)(v3 + 80));
  *(_QWORD *)(v5 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v5 + 64) = &off_10015BAD8;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v5 + 104) = &off_10015BAB0;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v5 + 144) = &off_10015BB38;
  *(_BYTE *)(v5 + 112) = 2;
  *(_QWORD *)(v5 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v5 + 184) = &off_10015BB10;
  *(_OWORD *)(v5 + 152) = xmmword_100111C60;
  *(_BYTE *)(v5 + 168) = 3;
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  v25 = &type metadata for AnalyticsString;
  v26 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v23 = v9;
  v24 = (Class (*)(uint64_t))v10;
  swift_bridgeObjectRetain(v8);
  v28 = sub_100089D00((char *)1, 5, 1, (char *)v5);
  v11 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v14->initializeWithCopy)((uint64_t)v13, v15);
  sub_10008A6F0(4, (uint64_t)v13, (uint64_t *)&v28, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v16 = v28;
  v17 = String._bridgeToObjectiveC()();
  v18 = (_QWORD *)swift_allocObject(&unk_100150210, 40, 7);
  v18[2] = 0xD00000000000001ELL;
  v18[3] = 0x80000001001131B0;
  v18[4] = v16;
  v26 = sub_100022948;
  v27 = v18;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_100089C8C;
  v25 = (ValueMetadata *)&unk_100150228;
  v19 = _Block_copy(&aBlock);
  v20 = v27;
  swift_bridgeObjectRetain(v16);
  swift_release(v20);
  AnalyticsSendEventLazy(v17, v19);
  _Block_release(v19);
  swift_bridgeObjectRelease();

}

uint64_t sub_1000EB7E0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unsigned __int8 v4;

  KeyPath = swift_getKeyPath(&unk_100111D00);
  v2 = swift_getKeyPath(&unk_100111D38);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000EB868(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  KeyPath = swift_getKeyPath(&unk_100111D00);
  v4 = swift_getKeyPath(&unk_100111D38);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

id sub_1000EB8F4()
{
  uint64_t v0;

  return sub_100090210(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), *(void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)), *(_QWORD *)(*(_QWORD *)v0 + 80), *(char **)(*(_QWORD *)v0 + 88));
}

uint64_t sub_1000EB90C()
{
  return sub_1000EB868(0);
}

uint64_t *sub_1000EB914(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v3 = *v1;
  v4 = sub_100007D50(&qword_100159248);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v1 + qword_10015F798;
  v9 = *(_QWORD *)(v3 + 80);
  v17 = 0;
  Published.init(initialValue:)(&v17, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v8, v7, v4);
  v10 = *(_QWORD *)(*v1 + 112);
  *(uint64_t *)((char *)v1 + v10) = (uint64_t)objc_msgSend(objc_allocWithZone((Class)EKEventStore), "init");
  v11 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  *(_QWORD *)v11 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100115720);
  *(_QWORD *)(v11 + 8) = v12;
  *(_BYTE *)(v11 + 16) = v13 & 1;
  *(_QWORD *)(v11 + 24) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 104), a1, v9);
  return v1;
}

uint64_t *sub_1000EBA4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (uint64_t)v0 + qword_10015F798;
  v3 = sub_100007D50(&qword_100159248);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000EBAEC()
{
  uint64_t v0;

  sub_1000EBA4C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for CalendarViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalendarViewModel);
}

void sub_1000EBB1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_100159230)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_100159230);
  }
}

uint64_t sub_1000EBB78()
{
  return 16;
}

__n128 sub_1000EBB84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000EBB90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000EBBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EBBCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EBBD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  int *v14;
  char *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  *(_QWORD *)a8 = a1;
  v14 = (int *)type metadata accessor for EventDetailViewModel(0, a6, a7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(&a8[v14[9]], a2, a6);
  v15 = &a8[v14[10]];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v15[16] = a5;
  v16 = &a8[v14[11]];
  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100115750);
  *(_QWORD *)v16 = result;
  *((_QWORD *)v16 + 1) = v18;
  v16[16] = v19 & 1;
  *((_QWORD *)v16 + 3) = v20;
  return result;
}

uint64_t type metadata accessor for EventDetailViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventDetailViewModel);
}

uint64_t sub_1000EBCA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100111D88;
    v4[3] = &unk_100111DA0;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1000EBD30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v10 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = v10 + v6;
    v13 = (v10 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = (v11 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v13 + 8) = v16;
    *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
    v17 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v11 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 8) = v19;
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 24) = v20;
    swift_retain(v15);
    swift_retain(v16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
  }
  return v3;
}

uint64_t sub_1000EBE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = (_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v5);
  swift_release(v5[1]);
  v6 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v6 + 24));
}

_QWORD *sub_1000EBEDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v15 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 8) = v17;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v15 + 24) = v18;
  swift_retain(v13);
  swift_retain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

_QWORD *sub_1000EBFBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v11;
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_retain(v14);
  swift_release(v13);
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v15;
  swift_retain(v15);
  swift_release(v16);
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v17 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = *(_QWORD *)(v18 + 8);
  v20 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  v21 = *(_QWORD *)(v18 + 24);
  v22 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v17 + 24) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

_QWORD *sub_1000EC0C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = v13;
  v14 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v10 + 31) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  return a1;
}

_QWORD *sub_1000EC16C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v11;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_release(v13);
  v14 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_release(v14);
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v15 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1000EC258(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 8) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(((v8 + v13 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000EC2E4 + 4 * byte_100111D60[v11]))();
  }
}

void sub_1000EC378(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1000EC480()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000EC504);
}

void sub_1000EC488(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1000EC490);
  JUMPOUT(0x1000EC504);
}

void sub_1000EC4DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000EC504);
}

void sub_1000EC4E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000EC504);
}

uint64_t sub_1000EC4EC@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 8) & a3;
  if (a2 < 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x1000EC4F8);
    *(_QWORD *)(((v6 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x1000EC504);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t sub_1000EC51C(uint64_t a1)
{
  char v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  v1 = sub_10006AA70(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((v1 & 1) != 0)
  {
    v9 = 0xE000000000000000;
    v3 = 0x80000001001157B0;
    v4 = 0xD00000000000001FLL;
  }
  else
  {
    v4 = 0xD000000000000023;
    v9 = 0xE000000000000000;
    v3 = 0x8000000100115780;
  }
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, (Swift::String_optional)0, (NSBundle)v2, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000EC5FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = *(_QWORD *)(a1 - 8);
  v2 = __chkstk_darwin(a1);
  v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v5, &unk_10011790C, &unk_10011796C);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v9 = (char *)&v27 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v12 = type metadata accessor for Optional(0);
  v28 = *(_QWORD *)(v12 - 8);
  v29 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = *(void (**)(uint64_t, uint64_t))(v4 + 208);
  v30 = v5;
  v15(v5, v4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  v34 = v16;
  v17 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_100119D18, &unk_100119D20);
  v18 = type metadata accessor for Set(0, v11, *(_QWORD *)(v17 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v18);
  Collection.first.getter(v18, WitnessTable);
  swift_bridgeObjectRelease(v16);
  v20 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
    v22 = v31;
    v21 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v33, a1);
LABEL_4:
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 160))(v30, v4);
    goto LABEL_5;
  }
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 48))(v11, v17);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v11);
  v22 = v31;
  v21 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v33, a1);
  if (!v25)
    goto LABEL_4;
LABEL_5:
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, a1);
  return v23;
}

uint64_t sub_1000EC8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45[64];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_10011797C);
  v4 = type metadata accessor for Optional(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)&v41 - v5;
  v6 = swift_getAssociatedTypeWitness(0, v1, v2, &unk_10011790C, &unk_100117964);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - v8;
  v10 = sub_100007D50(&qword_10015F8B8);
  inited = swift_initStackObject(v10, v45);
  *(_OWORD *)(inited + 16) = xmmword_100108810;
  (*(void (**)(uint64_t, uint64_t))(v1 + 200))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, v6, &unk_10011790C, &unk_100117954);
  v13 = sub_100093A58(v6, AssociatedConformanceWitness);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17 = v43;
  v16(v9, v6);
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v15;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(v2, v1);
  v44 = v18;
  v19 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  Collection.first.getter(v19, WitnessTable);
  swift_bridgeObjectRelease(v18);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v42);
  }
  else
  {
    v22 = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_10011795C);
    v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 48))(AssociatedTypeWitness, v22);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, AssociatedTypeWitness);
    if (v23)
    {
      v24 = objc_msgSend(v23, "city");

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      *(_QWORD *)(inited + 48) = v25;
      *(_QWORD *)(inited + 56) = v27;
      v28 = *(_QWORD *)(inited + 40);
      if (v28)
        goto LABEL_8;
LABEL_5:
      v29 = (char *)&_swiftEmptyArrayStorage;
      if (!v27)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  v27 = 0;
  v25 = 0;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = 0;
  v28 = *(_QWORD *)(inited + 40);
  if (!v28)
    goto LABEL_5;
LABEL_8:
  v30 = *(_QWORD *)(inited + 32);
  swift_bridgeObjectRetain(v28);
  v29 = sub_100089E20(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v32 = *((_QWORD *)v29 + 2);
  v31 = *((_QWORD *)v29 + 3);
  if (v32 >= v31 >> 1)
    v29 = sub_100089E20((char *)(v31 > 1), v32 + 1, 1, v29);
  *((_QWORD *)v29 + 2) = v32 + 1;
  v33 = &v29[16 * v32];
  *((_QWORD *)v33 + 4) = v30;
  *((_QWORD *)v33 + 5) = v28;
  v25 = *(_QWORD *)(inited + 48);
  v27 = *(_QWORD *)(inited + 56);
  if (v27)
  {
LABEL_11:
    swift_bridgeObjectRetain(v27);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      v29 = sub_100089E20(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    v35 = *((_QWORD *)v29 + 2);
    v34 = *((_QWORD *)v29 + 3);
    if (v35 >= v34 >> 1)
      v29 = sub_100089E20((char *)(v34 > 1), v35 + 1, 1, v29);
    *((_QWORD *)v29 + 2) = v35 + 1;
    v36 = &v29[16 * v35];
    *((_QWORD *)v36 + 4) = v25;
    *((_QWORD *)v36 + 5) = v27;
  }
LABEL_16:
  swift_bridgeObjectRelease(inited);
  v44 = (uint64_t)v29;
  v37 = sub_100007D50(&qword_10015F8A8);
  v38 = sub_1000ED948();
  v39 = BidirectionalCollection<>.joined(separator:)(0x20A280E220, 0xA500000000000000, v37, v38);
  swift_bridgeObjectRelease(v29);
  return v39;
}

uint64_t sub_1000ECCBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, v3, &unk_10011790C, &unk_10011797C);
  v5 = type metadata accessor for Optional(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v55 - v6;
  v8 = swift_getAssociatedTypeWitness(0, v2, v3, &unk_10011790C, &unk_100117964);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v55 - v10;
  v59 = xmmword_100109440;
  v60 = sub_1000EC51C(a1);
  v61 = v12;
  v62 = sub_1000EC5FC(a1);
  v63 = v13;
  (*(void (**)(uint64_t, uint64_t))(v2 + 200))(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, v8, &unk_10011790C, &unk_100117954);
  v15 = sub_100093E08(v8, AssociatedConformanceWitness);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v64 = v15;
  v65 = v17;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 216))(v3, v2);
  v58 = v18;
  v19 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  Collection.first.getter(v19, WitnessTable);
  swift_bridgeObjectRelease(v18);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v57);
  }
  else
  {
    v22 = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_10011790C, &unk_10011795C);
    v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 48))(AssociatedTypeWitness, v22);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v7, AssociatedTypeWitness);
    if (v23)
    {
      v24 = objc_msgSend(v23, "city");

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v66 = v25;
      v67 = v27;
      v28 = v61;
      if (v61)
        goto LABEL_8;
LABEL_5:
      v29 = (char *)&_swiftEmptyArrayStorage;
      v30 = v63;
      if (!v63)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  v66 = 0;
  v67 = 0;
  v28 = v61;
  if (!v61)
    goto LABEL_5;
LABEL_8:
  v31 = v60;
  swift_bridgeObjectRetain(v28);
  v29 = sub_100089E20(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v33 = *((_QWORD *)v29 + 2);
  v32 = *((_QWORD *)v29 + 3);
  if (v33 >= v32 >> 1)
    v29 = sub_100089E20((char *)(v32 > 1), v33 + 1, 1, v29);
  *((_QWORD *)v29 + 2) = v33 + 1;
  v34 = &v29[16 * v33];
  *((_QWORD *)v34 + 4) = v31;
  *((_QWORD *)v34 + 5) = v28;
  v30 = v63;
  if (v63)
  {
LABEL_11:
    v35 = v62;
    swift_bridgeObjectRetain(v30);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      v29 = sub_100089E20(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    v37 = *((_QWORD *)v29 + 2);
    v36 = *((_QWORD *)v29 + 3);
    if (v37 >= v36 >> 1)
      v29 = sub_100089E20((char *)(v36 > 1), v37 + 1, 1, v29);
    *((_QWORD *)v29 + 2) = v37 + 1;
    v38 = &v29[16 * v37];
    *((_QWORD *)v38 + 4) = v35;
    *((_QWORD *)v38 + 5) = v30;
  }
LABEL_16:
  v39 = v65;
  if (v65)
  {
    v40 = v64;
    swift_bridgeObjectRetain(v65);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      v29 = sub_100089E20(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    v42 = *((_QWORD *)v29 + 2);
    v41 = *((_QWORD *)v29 + 3);
    if (v42 >= v41 >> 1)
      v29 = sub_100089E20((char *)(v41 > 1), v42 + 1, 1, v29);
    *((_QWORD *)v29 + 2) = v42 + 1;
    v43 = &v29[16 * v42];
    *((_QWORD *)v43 + 4) = v40;
    *((_QWORD *)v43 + 5) = v39;
  }
  v44 = v67;
  if (v67)
  {
    v45 = v66;
    swift_bridgeObjectRetain(v67);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      v29 = sub_100089E20(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    v47 = *((_QWORD *)v29 + 2);
    v46 = *((_QWORD *)v29 + 3);
    if (v47 >= v46 >> 1)
      v29 = sub_100089E20((char *)(v46 > 1), v47 + 1, 1, v29);
    *((_QWORD *)v29 + 2) = v47 + 1;
    v48 = &v29[16 * v47];
    *((_QWORD *)v48 + 4) = v45;
    *((_QWORD *)v48 + 5) = v44;
  }
  v49 = v59;
  v50 = sub_100007D50((uint64_t *)&unk_10015CE10);
  swift_arrayDestroy(&v60, v49, v50);
  v58 = (uint64_t)v29;
  v51 = sub_100007D50(&qword_10015F8A8);
  v52 = sub_1000ED948();
  v53 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v51, v52);
  swift_bridgeObjectRelease(v29);
  return v53;
}

BOOL sub_1000ED1C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 192))(v2, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_100117974);
  v4 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  LOBYTE(v4) = Collection.isEmpty.getter(v4, WitnessTable);
  swift_bridgeObjectRelease(v7);
  return (v4 & 1) == 0;
}

BOOL sub_1000ED270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 192))(v2, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &unk_10011790C, &unk_100117974);
  v5 = Array.count.getter(v3, AssociatedTypeWitness);
  swift_bridgeObjectRelease(v3);
  return v5 == 1;
}

uint64_t sub_1000ED2F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 192))(v2, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_100117974);
  v4 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  Collection.first.getter(v4, WitnessTable);
  return swift_bridgeObjectRelease(v7);
}

void sub_1000ED3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  ValueWitnessTable *v18;
  uint64_t v19;
  char *v20;
  NSString v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void **aBlock;
  uint64_t v27;
  Class (*v28)(uint64_t);
  ValueMetadata *v29;
  _QWORD *(*v30)();
  _QWORD *v31;
  char *v32;

  v8 = sub_100007D50(&qword_100159260);
  v9 = swift_allocObject(v8, 192, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100109440;
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a4 + 24) + 152))(*(_QWORD *)(a4 + 16));
  *(_QWORD *)(v9 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v9 + 64) = &off_10015BAD8;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v9 + 104) = &off_10015BAB0;
  *(_BYTE *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v9 + 144) = &off_10015BB38;
  *(_BYTE *)(v9 + 112) = 1;
  *(_QWORD *)(v9 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v9 + 184) = &off_10015BB10;
  *(_QWORD *)(v9 + 152) = a1;
  *(_QWORD *)(v9 + 160) = a2;
  *(_BYTE *)(v9 + 168) = 1;
  v12 = *(_QWORD *)(a3 + 72);
  if (v12)
  {
    v13 = *(_QWORD *)(a3 + 64);
    v14 = *(_QWORD *)(a3 + 72);
  }
  else
  {
    v13 = 0;
    v14 = 0xE000000000000000;
  }
  v29 = &type metadata for AnalyticsString;
  v30 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v27 = v13;
  v28 = (Class (*)(uint64_t))v14;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v12);
  v32 = sub_100089D00((char *)1, 5, 1, (char *)v9);
  v15 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v18->initializeWithCopy)((uint64_t)v17, v19);
  sub_10008A6F0(4, (uint64_t)v17, (uint64_t *)&v32, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v20 = v32;
  v21 = String._bridgeToObjectiveC()();
  v22 = (_QWORD *)swift_allocObject(&unk_1001502E0, 40, 7);
  v22[2] = 0xD00000000000001ELL;
  v22[3] = 0x80000001001131B0;
  v22[4] = v20;
  v30 = sub_100022948;
  v31 = v22;
  aBlock = _NSConcreteStackBlock;
  v27 = 1107296256;
  v28 = sub_100089C8C;
  v29 = (ValueMetadata *)&unk_1001502F8;
  v23 = _Block_copy(&aBlock);
  v24 = v31;
  swift_bridgeObjectRetain(v20);
  swift_release(v24);
  AnalyticsSendEventLazy(v21, v23);
  _Block_release(v23);
  swift_bridgeObjectRelease(v20);

}

double sub_1000ED618(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  double result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *v2;
  v4 = v2[1];
  v5 = *((_BYTE *)v2 + 16);
  swift_retain(*v2);
  swift_retain(v4);
  v6 = sub_100007D50(&qword_10015CE00);
  Binding.wrappedValue.getter(v6);
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v8 = (v12 & 1) == 0;
  Binding.wrappedValue.setter(&v8, v6);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

void sub_1000ED6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  ValueWitnessTable *v14;
  uint64_t v15;
  char *v16;
  NSString v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void **aBlock;
  uint64_t v23;
  Class (*v24)(uint64_t);
  ValueMetadata *v25;
  _QWORD *(*v26)();
  _QWORD *v27;
  char *v28;

  v4 = sub_100007D50(&qword_100159260);
  v5 = swift_allocObject(v4, 192, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100109440;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + 24) + 152))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v5 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v5 + 64) = &off_10015BAD8;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 48) = v7;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v5 + 104) = &off_10015BAB0;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v5 + 144) = &off_10015BB38;
  *(_BYTE *)(v5 + 112) = 1;
  *(_QWORD *)(v5 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v5 + 184) = &off_10015BB10;
  *(_OWORD *)(v5 + 152) = xmmword_100111DD0;
  *(_BYTE *)(v5 + 168) = 3;
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  v25 = &type metadata for AnalyticsString;
  v26 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v23 = v9;
  v24 = (Class (*)(uint64_t))v10;
  swift_bridgeObjectRetain(v8);
  v28 = sub_100089D00((char *)1, 5, 1, (char *)v5);
  v11 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v14->initializeWithCopy)((uint64_t)v13, v15);
  sub_10008A6F0(4, (uint64_t)v13, (uint64_t *)&v28, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v16 = v28;
  v17 = String._bridgeToObjectiveC()();
  v18 = (_QWORD *)swift_allocObject(&unk_100150330, 40, 7);
  v18[2] = 0xD00000000000001ELL;
  v18[3] = 0x80000001001131B0;
  v18[4] = v16;
  v26 = sub_100067720;
  v27 = v18;
  aBlock = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_100089C8C;
  v25 = (ValueMetadata *)&unk_100150348;
  v19 = _Block_copy(&aBlock);
  v20 = v27;
  swift_bridgeObjectRetain(v16);
  swift_release(v20);
  AnalyticsSendEventLazy(v17, v19);
  _Block_release(v19);
  swift_bridgeObjectRelease(v16);

}

uint64_t sub_1000ED92C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ED93C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000ED948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015F8B0;
  if (!qword_10015F8B0)
  {
    v1 = sub_100007D00(&qword_10015F8A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10015F8B0);
  }
  return result;
}

double sub_1000ED99C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100111E70);
  v4 = v0;
  v2 = sub_1000EDCE8();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 120);
}

double sub_1000EDA08()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100111E98);
  v4 = v0;
  v2 = sub_1000EDCE8();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 112);
}

uint64_t sub_1000EDA74(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  return result;
}

uint64_t sub_1000EDA7C(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t sub_1000EDA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  *(_QWORD *)(v1 + 16) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100114370);
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4 & 1;
  *(_QWORD *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 48) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100114F70);
  *(_QWORD *)(v1 + 56) = v6;
  *(_BYTE *)(v1 + 64) = v7 & 1;
  *(_QWORD *)(v1 + 72) = v8;
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100115840);
  *(_QWORD *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 88) = v10;
  *(_BYTE *)(v1 + 96) = v11 & 1;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 104) = v12;
  ObservationRegistrar.init()(v9);
  sub_1000EDD38(a1, v1 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL);
  return v1;
}

uint64_t sub_1000EDB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000955A0(v0 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel_photoURL);
  v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp36PromotionalAssetsPhotoEntryViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000EDBF4()
{
  return type metadata accessor for PromotionalAssetsPhotoEntryViewModel(0);
}

uint64_t type metadata accessor for PromotionalAssetsPhotoEntryViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015F8F0;
  if (!qword_10015F8F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PromotionalAssetsPhotoEntryViewModel);
  return result;
}

void sub_1000EDC38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = " ";
  v6[1] = " ";
  v6[2] = " ";
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100024044(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

unint64_t sub_1000EDCE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015E848;
  if (!qword_10015E848)
  {
    v1 = type metadata accessor for PromotionalAssetsPhotoEntryViewModel(255);
    result = swift_getWitnessTable(&unk_100111E50, v1);
    atomic_store(result, (unint64_t *)&qword_10015E848);
  }
  return result;
}

uint64_t sub_1000EDD38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_100158658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EDD80()
{
  return sub_100007428(&qword_10015BA50, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&unk_100111EEC);
}

uint64_t sub_1000EDDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  v4 = sub_100007D50(&qword_10015CB18);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015FBE8);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015FBF0);
  v3[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[16] = v8;
  v3[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015FBF8);
  v3[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[19] = v10;
  v3[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MusicDataRequest.ExecutionMethod(0);
  v3[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[22] = v12;
  v3[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MusicAuthorization.Status(0);
  v3[24] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[25] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v15);
  v3[27] = swift_task_alloc(v15);
  return swift_task_switch(sub_1000EDEF0, 0, 0);
}

uint64_t sub_1000EDEF0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[23];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[22] + 104))(v1, enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static MusicAuthorization.request()[1]);
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_1000EDF68;
  return static MusicAuthorization.request()(v0[27]);
}

uint64_t sub_1000EDF68()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_1000EDFBC, 0, 0);
}

uint64_t sub_1000EDFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 200) + 104))(*(_QWORD *)(v0 + 208), enum case for MusicAuthorization.Status.authorized(_:), v1);
  v2 = sub_100007428(&qword_10015FC00, (uint64_t (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status, (uint64_t)&protocol conformance descriptor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    v11(v7, v9);
LABEL_5:
    v14 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 80);
    KeyPath = swift_getKeyPath(&unk_100112040);
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v0 + 48) = MusicItemID.init(_:)(v16, v15);
    *(_QWORD *)(v0 + 56) = v18;
    v19 = type metadata accessor for Artist(0);
    *(_QWORD *)(v0 + 232) = v19;
    v20 = sub_100007428(&qword_10015FC08, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 48, v19, &protocol witness table for Artist, v20);
    v21 = sub_100007D50(&qword_10015FC10);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100111EC0;
    sub_100007D50(&qword_10015FC18);
    *(_QWORD *)(v22 + 32) = static PartialMusicProperty<A>.topSongs.getter();
    specialized Array._endMutation()();
    MusicCatalogResourceRequest.properties.setter(v22, v14);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
    *(_QWORD *)(v0 + 240) = v23;
    *v23 = v0;
    v23[1] = sub_1000EE2B0;
    return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 24), v5, *(_QWORD *)(v0 + 40), 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v8, v9);
  v13(v7, v9);
  if ((v12 & 1) != 0)
    goto LABEL_5;
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 160);
  v29 = *(_QWORD *)(v0 + 136);
  v31 = *(_QWORD *)(v0 + 104);
  v30 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 64);
  v33 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  swift_task_dealloc(v26);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000EE4BC;
  else
    v3 = sub_1000EE314;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EE314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 120));
  sub_10008B364(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v1) == 1)
  {
    v8 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_100007F38(v10, &qword_10015FBE8);
    v11 = 1;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 112);
    sub_1000EFDA4(*(uint64_t **)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v12);
    v11 = 0;
  }
  v21 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 64);
  v28 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, v11, 1, v28);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE4BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(v4, *(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  v6 = sub_100007D50(&qword_100158658);
  v5[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015B9A0);
  v5[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015FC48);
  v5[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Song(0, v9);
  v5[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[24] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[25] = swift_task_alloc(v12);
  v5[26] = swift_task_alloc(v12);
  v5[27] = swift_task_alloc(v12);
  v13 = type metadata accessor for Track(0);
  v5[28] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[29] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v15);
  v5[31] = swift_task_alloc(v15);
  v5[32] = swift_task_alloc(v15);
  v16 = sub_100007D50(&qword_10015FC50);
  v5[33] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[34] = v17;
  v5[35] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100007D50(&qword_10015FC58);
  v5[36] = v18;
  v5[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_10015FC60);
  v5[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100007D50(&qword_10015FC68);
  v5[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100007D50(&qword_10015CB38);
  v5[40] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v5[41] = v22;
  v5[42] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Playlist(0);
  v5[43] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v5[44] = v24;
  v5[45] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100007D50(&qword_10015FC70);
  v5[46] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v5[47] = v26;
  v5[48] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100007D50(&qword_10015FC78);
  v5[49] = v27;
  v28 = *(_QWORD *)(v27 - 8);
  v5[50] = v28;
  v5[51] = swift_task_alloc((*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for MusicDataRequest.ExecutionMethod(0);
  v5[52] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v5[53] = v30;
  v5[54] = swift_task_alloc((*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for MusicAuthorization.Status(0);
  v5[55] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v5[56] = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[57] = swift_task_alloc(v33);
  v5[58] = swift_task_alloc(v33);
  return swift_task_switch(sub_1000EE834, 0, 0);
}

uint64_t sub_1000EE834()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[54];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[53] + 104))(v1, enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[52]);
  static MusicDataRequest.preferredExecutionMethod.setter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static MusicAuthorization.request()[1]);
  v0[59] = v2;
  *v2 = v0;
  v2[1] = sub_1000EE8AC;
  return static MusicAuthorization.request()(v0[58]);
}

uint64_t sub_1000EE8AC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  return swift_task_switch(sub_1000EE900, 0, 0);
}

uint64_t sub_1000EE900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 440);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 448) + 104))(*(_QWORD *)(v0 + 456), enum case for MusicAuthorization.Status.authorized(_:), v1);
  v2 = sub_100007428(&qword_10015FC00, (uint64_t (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status, (uint64_t)&protocol conformance descriptor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 456);
  v7 = *(_QWORD *)(v0 + 464);
  v9 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 88), 2);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    v11(v7, v9);
LABEL_5:
    v14 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    KeyPath = swift_getKeyPath(&unk_100112068);
    swift_bridgeObjectRetain(v16);
    *(_QWORD *)(v0 + 64) = MusicItemID.init(_:)(v17, v16);
    *(_QWORD *)(v0 + 72) = v19;
    v20 = sub_100007428(&qword_10015FC80, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&protocol conformance descriptor for Playlist);
    MusicCatalogResourceRequest.init<A>(matching:equalTo:)(KeyPath, v0 + 64, v15, &protocol witness table for Playlist, v20);
    v21 = sub_100007D50(&qword_10015FC10);
    v22 = swift_allocObject(v21, 40, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100111EC0;
    sub_100007D50(&qword_10015FC88);
    *(_QWORD *)(v22 + 32) = static PartialMusicProperty<A>.tracks.getter();
    specialized Array._endMutation()(v23);
    MusicCatalogResourceRequest.properties.setter(v22, v14);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
    *(_QWORD *)(v0 + 480) = v24;
    *v24 = v0;
    v24[1] = sub_1000EED3C;
    return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 88), v5, *(_QWORD *)(v0 + 56), 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v8, v9);
  v13(v7, v9);
  if ((v12 & 1) != 0)
    goto LABEL_5;
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100029E7C(v26, (uint64_t)qword_10016A5B0);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Authorization Error fetching playlist.", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }
  v31 = *(_QWORD *)(v0 + 120);

  v32 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = *(_QWORD *)(v0 + 456);
  v34 = *(_QWORD *)(v0 + 432);
  v35 = *(_QWORD *)(v0 + 408);
  v36 = *(_QWORD *)(v0 + 384);
  v37 = *(_QWORD *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 336);
  v40 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 296);
  v42 = *(_QWORD *)(v0 + 280);
  v43 = *(_QWORD *)(v0 + 256);
  v44 = *(_QWORD *)(v0 + 248);
  v45 = *(_QWORD *)(v0 + 240);
  v46 = *(_QWORD *)(v0 + 216);
  v47 = *(_QWORD *)(v0 + 208);
  v48 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 176);
  v50 = *(_QWORD *)(v0 + 168);
  v51 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EED3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000EF654;
  else
    v3 = sub_1000EEDA0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EEDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, _QWORD);
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  void (*v83)(_QWORD, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v109 = (_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  MusicCatalogResourceResponse.items.getter(*(_QWORD *)(v0 + 368));
  sub_10008B3FC(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v6, 1, v2) == 1)
  {
    sub_100007F38(*(_QWORD *)(v0 + 312), &qword_10015FC68);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = type metadata accessor for Logger(0);
    sub_100029E7C(v8, (uint64_t)qword_10016A5B0);
    v9 = swift_bridgeObjectRetain_n(v7, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    v12 = os_log_type_enabled(v10, v11);
    v14 = *(_QWORD *)(v0 + 400);
    v13 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 376);
    v19 = *(_QWORD *)(v0 + 136);
    if (v12)
    {
      v122 = *(_QWORD *)(v0 + 408);
      v20 = *(_QWORD *)(v0 + 128);
      v115 = *(_QWORD *)(v0 + 384);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = v14;
      v22 = swift_slowAlloc(32, -1);
      v129 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 96) = sub_10003FCB4(v20, v19, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v109, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not find playlist for id %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v115, v17);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v122, v15);
    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    v28 = *(_QWORD *)(v0 + 120);
    v29 = type metadata accessor for AppleMusicSetlist(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 272);
    v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 32))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 344));
    Playlist.tracks.getter(v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
    {
      v27 = sub_100007F38(*(_QWORD *)(v0 + 304), &qword_10015FC60);
      v113 = _swiftEmptyArrayStorage;
    }
    else
    {
      v30 = *(_QWORD *)(v0 + 288);
      v31 = *(_QWORD *)(v0 + 296);
      v32 = *(_QWORD *)(v0 + 264);
      v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 16);
      v106(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 304), v32);
      v33 = sub_10000F4E0(&qword_10015FC90, &qword_10015FC50, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
      dispatch thunk of Sequence.makeIterator()(v32, v33);
      v126 = (_QWORD *)(v31 + *(int *)(v30 + 36));
      v34 = *v126;
      v35 = sub_10000F4E0(&qword_10015FC98, &qword_10015FC50, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
      dispatch thunk of Collection.endIndex.getter(v109, v32, v35);
      if (v34 == *(_QWORD *)(v0 + 104))
      {
        v113 = _swiftEmptyArrayStorage;
      }
      else
      {
        v100 = *(_QWORD *)(v0 + 272);
        v102 = v0 + 16;
        v64 = *(_QWORD *)(v0 + 232);
        v97 = enum case for Track.song(_:);
        v113 = _swiftEmptyArrayStorage;
        v65 = v126;
        v105 = v35;
        v98 = *(_QWORD *)(v0 + 192);
        do
        {
          v67 = *(_QWORD *)(v0 + 296);
          v68 = *(_QWORD *)(v0 + 280);
          v70 = *(_QWORD *)(v0 + 256);
          v69 = *(_QWORD *)(v0 + 264);
          v121 = *(_QWORD *)(v0 + 248);
          v125 = *(_QWORD *)(v0 + 240);
          v71 = *(_QWORD *)(v0 + 224);
          v72 = dispatch thunk of Collection.subscript.read(v102, v65, v69, v35);
          v73 = v35;
          v74 = (void (*)(uint64_t, _QWORD))v72;
          v118 = *(void (**)(uint64_t))(v64 + 16);
          v118(v70);
          v74(v102, 0);
          v106(v68, v67, v69);
          dispatch thunk of Collection.formIndex(after:)(v126, v69, v73);
          (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v68, v69);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v121, v70, v71);
          ((void (*)(uint64_t, uint64_t, uint64_t))v118)(v125, v121, v71);
          v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 88))(v125, v71);
          v76 = *(_QWORD *)(v0 + 240);
          v77 = *(_QWORD *)(v0 + 224);
          if (v75 == v97)
          {
            v78 = *(_QWORD *)(v0 + 208);
            v80 = *(_QWORD *)(v0 + 176);
            v79 = *(_QWORD *)(v0 + 184);
            (*(void (**)(_QWORD, uint64_t))(v64 + 96))(*(_QWORD *)(v0 + 240), v77);
            v81 = v98;
            v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32);
            v82(v78, v76, v79);
            v82(v80, v78, v79);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v80, 0, 1, v79);
            v83 = *(void (**)(_QWORD, uint64_t))(v64 + 8);
          }
          else
          {
            v85 = *(_QWORD *)(v0 + 176);
            v84 = *(_QWORD *)(v0 + 184);
            v83 = *(void (**)(_QWORD, uint64_t))(v64 + 8);
            v83(*(_QWORD *)(v0 + 240), v77);
            v81 = v98;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v85, 1, 1, v84);
          }
          v86 = *(_QWORD *)(v0 + 176);
          v87 = *(_QWORD *)(v0 + 184);
          v83(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
          v65 = v126;
          v35 = v105;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v86, 1, v87) == 1)
          {
            sub_100007F38(*(_QWORD *)(v0 + 176), &qword_10015FC48);
          }
          else
          {
            v88 = *(_QWORD *)(v0 + 216);
            v89 = *(_QWORD *)(v0 + 200);
            v90 = *(_QWORD *)(v0 + 184);
            v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
            v91(v88, *(_QWORD *)(v0 + 176), v90);
            v91(v89, v88, v90);
            if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) != 0)
              v92 = (unint64_t)v113;
            else
              v92 = sub_100089F2C(0, v113[2] + 1, 1, (unint64_t)v113);
            v94 = *(_QWORD *)(v92 + 16);
            v93 = *(_QWORD *)(v92 + 24);
            if (v94 >= v93 >> 1)
              v92 = sub_100089F2C(v93 > 1, v94 + 1, 1, v92);
            v95 = *(_QWORD *)(v0 + 200);
            v96 = *(_QWORD *)(v0 + 184);
            *(_QWORD *)(v92 + 16) = v94 + 1;
            v113 = (_QWORD *)v92;
            v91(v92+ ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))+ *(_QWORD *)(v81 + 72) * v94, v95, v96);
            v35 = v105;
          }
          v66 = *v126;
          dispatch thunk of Collection.endIndex.getter(v109, *(_QWORD *)(v0 + 264), v35);
        }
        while (v66 != *(_QWORD *)(v0 + 104));
      }
      v36 = *(_QWORD *)(v0 + 304);
      v37 = *(_QWORD *)(v0 + 264);
      v38 = *(_QWORD *)(v0 + 272);
      sub_100007F38(*(_QWORD *)(v0 + 296), &qword_10015FC58);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    }
    v116 = *(_QWORD *)(v0 + 392);
    v119 = *(_QWORD *)(v0 + 408);
    v39 = *(_QWORD *)(v0 + 376);
    v103 = *(_QWORD *)(v0 + 384);
    v40 = *(_QWORD *)(v0 + 360);
    v41 = *(_QWORD *)(v0 + 368);
    v43 = *(_QWORD *)(v0 + 344);
    v42 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 160);
    v44 = *(_QWORD *)(v0 + 168);
    v46 = *(_QWORD *)(v0 + 152);
    v107 = *(_QWORD *)(v0 + 144);
    v110 = *(_QWORD *)(v0 + 400);
    v47 = *(_QWORD **)(v0 + 120);
    v48 = Playlist.artwork.getter(v27);
    v49 = Playlist.url.getter(v48);
    v50 = Playlist.standardDescription.getter(v49);
    v123 = v51;
    v127 = v50;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v43);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v103, v41);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v119, v116);
    *v47 = v107;
    v47[1] = v46;
    v47[2] = v113;
    v52 = (int *)type metadata accessor for AppleMusicSetlist(0);
    sub_100018EB4(v44, (uint64_t)v47 + v52[6], &qword_10015B9A0);
    sub_100018EB4(v45, (uint64_t)v47 + v52[7], &qword_100158658);
    v53 = (_QWORD *)((char *)v47 + v52[8]);
    *v53 = v127;
    v53[1] = v123;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v52 - 1) + 56))(v47, 0, 1, v52);
    swift_bridgeObjectRetain(v46);
  }
  v54 = *(_QWORD *)(v0 + 456);
  v55 = *(_QWORD *)(v0 + 432);
  v56 = *(_QWORD *)(v0 + 408);
  v57 = *(_QWORD *)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 360);
  v59 = *(_QWORD *)(v0 + 336);
  v61 = *(_QWORD *)(v0 + 304);
  v60 = *(_QWORD *)(v0 + 312);
  v62 = *(_QWORD *)(v0 + 296);
  v99 = *(_QWORD *)(v0 + 280);
  v101 = *(_QWORD *)(v0 + 256);
  v104 = *(_QWORD *)(v0 + 248);
  v108 = *(_QWORD *)(v0 + 240);
  v111 = *(_QWORD *)(v0 + 216);
  v114 = *(_QWORD *)(v0 + 208);
  v117 = *(_QWORD *)(v0 + 200);
  v120 = *(_QWORD *)(v0 + 176);
  v124 = *(_QWORD *)(v0 + 168);
  v128 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v104);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  swift_task_dealloc(v114);
  swift_task_dealloc(v117);
  swift_task_dealloc(v120);
  swift_task_dealloc(v124);
  swift_task_dealloc(v128);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EF654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v1 = *(_QWORD *)(v0 + 488);
  v2 = type metadata accessor for Logger(0);
  sub_100029E7C(v2, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 488);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 112) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching apple music setlist. Error: %@", v8, 0xCu);
    v11 = sub_100007D50(&qword_10015AC88);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 120);
  swift_errorRelease(*(_QWORD *)(v0 + 488));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v16 = type metadata accessor for AppleMusicSetlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  v21 = *(_QWORD *)(v0 + 360);
  v22 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 304);
  v23 = *(_QWORD *)(v0 + 312);
  v25 = *(_QWORD *)(v0 + 296);
  v27 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 240);
  v31 = *(_QWORD *)(v0 + 216);
  v32 = *(_QWORD *)(v0 + 208);
  v33 = *(_QWORD *)(v0 + 200);
  v34 = *(_QWORD *)(v0 + 176);
  v35 = *(_QWORD *)(v0 + 168);
  v36 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000EF950(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v36 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v7);
  v38 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Artwork(0);
  v37 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v35 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015B9A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v15 = v2[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease();
  v16 = v2[2];
  v17 = v2[3];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease();
  v18 = v2[4];
  v19 = *(_QWORD *)(v18 + 16);
  Hasher._combine(_:)(v19);
  if (v19)
  {
    v33 = v5;
    v34 = v4;
    v21 = type metadata accessor for Song(0, v20);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = v18 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v24 = *(_QWORD *)(v22 + 72);
    v25 = sub_100007428(&qword_10015FA20, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
    swift_bridgeObjectRetain(v18);
    do
    {
      dispatch thunk of Hashable.hash(into:)(a1, v21, v25);
      v23 += v24;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v5 = v33;
    v4 = v34;
  }
  v26 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  sub_100007E78((uint64_t)v2 + *(int *)(v26 + 28), (uint64_t)v13, &qword_10015B9A0);
  v27 = v37;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v13, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v35;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v35, v13, v9);
    Hasher._combine(_:)(1u);
    v29 = sub_100007428(&qword_10015FA30, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
    dispatch thunk of Hashable.hash(into:)(a1, v9, v29);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v9);
  }
  v30 = v38;
  sub_100007E78((uint64_t)v2 + *(int *)(v26 + 32), v38, &qword_100158658);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v30, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v31 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v36, v30, v4);
    Hasher._combine(_:)(1u);
    v32 = sub_100007428(&qword_10015FB90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v32);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
  }
}

uint64_t sub_1000EFCC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_1000EFCF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007E78(v2 + *(int *)(a1 + 28), a2, &qword_10015B9A0);
}

Swift::Int sub_1000EFD1C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000EF950((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000EFD5C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000EF950((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1000EFD94@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000EFDA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD);
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];
  char v54[8];
  unint64_t *v55;

  v2 = v1;
  v4 = sub_100007D50(&qword_10015B9A0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Song(0, v5);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015FC20);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Artist.id.getter(v10);
  v50 = v14;
  v15 = Artist.name.getter();
  v48 = v16;
  v49 = v15;
  Artist.topSongs.getter();
  v17 = sub_100007D50(&qword_10015FC28);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17);
  v51 = v13;
  if (v19 == 1)
  {
    sub_100007F38((uint64_t)v12, &qword_10015FC20);
    v20 = (unint64_t *)&_swiftEmptyArrayStorage;
LABEL_12:
    v36 = v49;
    v35 = v50;
    v37 = v48;
    v38 = sub_100007D50(&qword_10015FC30);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    v39 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
    Artist.subscript.getter();
    swift_release(v39);
    v40 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
    Artist.url.getter();
    *a1 = v51;
    a1[1] = v35;
    a1[2] = v36;
    a1[3] = v37;
    a1[4] = (uint64_t)v20;
    return sub_100018EB4((uint64_t)v7, (uint64_t)a1 + *(int *)(v40 + 28), &qword_10015B9A0);
  }
  v42 = v18;
  v43 = v7;
  v44 = v2;
  v21 = sub_10000F4E0(&qword_10015FC38, &qword_10015FC28, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v22 = dispatch thunk of Collection.count.getter(v17, v21);
  v20 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (!v22)
  {
    v24 = v12;
    v25 = v17;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v25);
    v7 = v43;
    goto LABEL_12;
  }
  v23 = v22;
  v55 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_1000F1530(0, v22 & ~(v22 >> 63), 0);
  v20 = v55;
  v24 = v12;
  v25 = v17;
  v52 = v21;
  result = dispatch thunk of Collection.startIndex.getter(v17, v21);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v27 = v23;
    v41 = a1;
    v28 = v46;
    v29 = v47;
    v30 = v52;
    v31 = v45;
    do
    {
      v32 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v54, v25, v30);
      (*(void (**)(char *))(v31 + 16))(v28);
      v32(v53, 0);
      v55 = v20;
      v34 = v20[2];
      v33 = v20[3];
      if (v34 >= v33 >> 1)
      {
        sub_1000F1530(v33 > 1, v34 + 1, 1);
        v20 = v55;
      }
      v20[2] = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v34, v28, v29);
      v30 = v52;
      dispatch thunk of Collection.formIndex(after:)(v54, v25, v52);
      --v27;
    }
    while (v27);
    a1 = v41;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F0164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = sub_100007D50(&qword_10015FBD8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Song.previewAssets.getter(v3);
  if (!v6)
    goto LABEL_7;
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  v9 = type metadata accessor for PreviewAsset(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (v8)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v5, v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, v11, 1, v9);
  swift_bridgeObjectRelease();
  type metadata accessor for PreviewAsset(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100007F38((uint64_t)v5, &qword_10015FBD8);
LABEL_7:
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  PreviewAsset.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t sub_1000F02B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v0 = type metadata accessor for ContentRating(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015FBC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015FBC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - v11;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v25 - v15;
  Song.contentRating.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v12, enum case for ContentRating.explicit(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v0);
  v17 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100007E78((uint64_t)v16, (uint64_t)v6, &qword_10015FBC8);
  sub_100007E78((uint64_t)v12, v17, &qword_10015FBC8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v6, 1, v0) == 1)
  {
    sub_100007F38((uint64_t)v12, &qword_10015FBC8);
    sub_100007F38((uint64_t)v16, &qword_10015FBC8);
    v19 = v18(v17, 1, v0);
    if (v19 == 1)
      v20 = &qword_10015FBC8;
    else
      v20 = &qword_10015FBC0;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_100007E78((uint64_t)v6, (uint64_t)v9, &qword_10015FBC8);
    if (v18(v17, 1, v0) == 1)
    {
      sub_100007F38((uint64_t)v12, &qword_10015FBC8);
      sub_100007F38((uint64_t)v16, &qword_10015FBC8);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
      v21 = 0;
      v20 = &qword_10015FBC0;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
      v22 = sub_100007428(&qword_10015FBD0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentRating, (uint64_t)&protocol conformance descriptor for ContentRating);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v3, v0, v22);
      v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      v20 = &qword_10015FBC8;
      sub_100007F38((uint64_t)v12, &qword_10015FBC8);
      sub_100007F38((uint64_t)v16, &qword_10015FBC8);
      v23(v9, v0);
    }
  }
  sub_100007F38((uint64_t)v6, v20);
  return v21 & 1;
}

uint64_t sub_1000F05B0()
{
  return Song.duration.getter();
}

uint64_t sub_1000F05D0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = sub_100007428(&qword_10015FA20, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
  result = sub_100007428(&qword_10015FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1000F0634(uint64_t a1)
{
  uint64_t result;

  result = sub_100007428(&qword_10015FA30, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AppleMusicFetcher()
{
  return &type metadata for AppleMusicFetcher;
}

uint64_t *sub_1000F0680(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    v10 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = v9;
    v12 = type metadata accessor for Artwork(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v15 = swift_bridgeObjectRetain(v9);
    if (v14(v11, 1, v12, v15))
    {
      v16 = sub_100007D50(&qword_10015B9A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = *(int *)(a3 + 32);
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100007D50(&qword_100158658);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return v4;
}

uint64_t sub_1000F083C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Artwork(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *sub_1000F0914(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Artwork(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v14 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11, v14))
  {
    v15 = sub_100007D50(&qword_10015B9A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = *(int *)(a3 + 32);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100007D50(&qword_100158658);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

_QWORD *sub_1000F0AA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a2[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Artwork(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100007D50(&qword_10015B9A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = *(int *)(a3 + 32);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = sub_100007D50(&qword_100158658);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t sub_1000F0CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Artwork(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100007D50(&qword_10015B9A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 32);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100007D50(&qword_100158658);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

_QWORD *sub_1000F0E28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Artwork(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100007D50(&qword_10015B9A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 32);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = sub_100007D50(&qword_100158658);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_1000F1030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F103C);
}

uint64_t sub_1000F103C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_10015B9A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158658);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000F10E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F10F0);
}

uint64_t sub_1000F10F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_10015B9A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158658);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicFetcher.MusicArtist(uint64_t a1)
{
  uint64_t result;

  result = qword_10015FA90;
  if (!qword_10015FA90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleMusicFetcher.MusicArtist);
  return result;
}

void sub_1000F11D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100111F30;
  v6[1] = &unk_100111F30;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10006B85C(319, (unint64_t *)&unk_10015BA10, (void (*)(uint64_t))&type metadata accessor for Artwork);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006B85C(319, (unint64_t *)&qword_1001593D8, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000F1290()
{
  return sub_100007428(&qword_10015FAD8, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_100111F48);
}

uint64_t sub_1000F12BC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007428(&qword_10015FB20, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_100111FA8);
  result = sub_100007428(&qword_10015FB28, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_100111F70);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000F1318()
{
  return sub_100007428(&qword_10015BA58, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&unk_100111ED0);
}

uint64_t sub_1000F1344(uint64_t a1)
{
  uint64_t result;

  result = sub_100007428(&qword_10015FB60, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_100111FE8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000F1380()
{
  return sub_100007428(&qword_10015FB68, type metadata accessor for AppleMusicFetcher.MusicArtist, (uint64_t)&unk_100112004);
}

uint64_t sub_1000F13AC(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t, __n128);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for Song(0, a3);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v20 = 1;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v25 = *(_QWORD *)(v9 + 72);
      v26 = v9;
      v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
      v16 = v13 - 1;
      do
      {
        v17 = a1;
        v15(v12, a1 + v14, v5, v10);
        v18 = a2;
        ((void (*)(char *, unint64_t, uint64_t))v15)(v7, a2 + v14, v5);
        v19 = sub_100007428(&qword_10015FBB8, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
        v20 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v7, v5, v19);
        v21 = *(void (**)(char *, uint64_t))(v26 + 8);
        v21(v7, v5);
        v21(v12, v5);
        v23 = v16-- != 0;
        if ((v20 & 1) == 0)
          break;
        v14 += v25;
        a2 = v18;
        a1 = v17;
      }
      while (v23);
    }
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_1000F1530(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000F1710(a1, a2, a3, (_QWORD *)*v3, &qword_10015CAC0, (uint64_t (*)(_QWORD))&type metadata accessor for Song);
  *v3 = result;
  return result;
}

uint64_t sub_1000F155C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000F1594(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000F1578(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000F18F0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000F1594(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007D50(qword_10015FCC8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F16FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000F1710(a1, a2, a3, a4, &qword_10015CAB0, (uint64_t (*)(_QWORD))&type metadata accessor for Genre);
}

uint64_t sub_1000F1710(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100007D50(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F18F0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007D50(&qword_10015CAB8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000F1A58(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007D50(&qword_10015CAA8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

BOOL sub_1000F1BC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BOOL8 result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  char v62;
  void (*v63)(_BYTE *, uint64_t);
  _BYTE v64[4];
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;

  v4 = type metadata accessor for URL(0);
  v75 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v69 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v72 = sub_100007D50(&qword_10015FB98);
  __chkstk_darwin(v72);
  v76 = &v64[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v7);
  v70 = &v64[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v73 = &v64[-v10];
  __chkstk_darwin(v11);
  v74 = &v64[-v12];
  v13 = type metadata accessor for Artwork(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v71 = &v64[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_100007D50(&qword_10015FBA0);
  __chkstk_darwin(v16);
  v18 = &v64[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100007D50(&qword_10015B9A0);
  __chkstk_darwin(v19);
  v21 = &v64[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v22);
  v24 = &v64[-v23];
  v26 = __chkstk_darwin(v25);
  v28 = &v64[-v27];
  v29 = a1[1];
  v30 = a2[1];
  if (*a1 == *a2 && v29 == v30
    || (v31 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v29, *a2, v30, 0), result = 0, (v31 & 1) != 0))
  {
    if ((v33 = a1[2], v34 = a1[3], v35 = a2[2], v36 = a2[3], v33 == v35) && v34 == v36
      || (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0), result = 0, (v37 & 1) != 0))
    {
      if ((sub_1000F13AC(a1[4], a2[4], v26) & 1) != 0)
      {
        v67 = v4;
        v68 = v21;
        v38 = v14;
        v39 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
        sub_100007E78((uint64_t)a1 + *(int *)(v39 + 28), (uint64_t)v28, &qword_10015B9A0);
        v66 = v39;
        v40 = *(int *)(v39 + 28);
        v41 = v38;
        sub_100007E78((uint64_t)a2 + v40, (uint64_t)v24, &qword_10015B9A0);
        v42 = (uint64_t)&v18[*(int *)(v16 + 48)];
        sub_100007E78((uint64_t)v28, (uint64_t)v18, &qword_10015B9A0);
        sub_100007E78((uint64_t)v24, v42, &qword_10015B9A0);
        v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
        if (v43((uint64_t)v18, 1, v13) == 1)
        {
          sub_100007F38((uint64_t)v24, &qword_10015B9A0);
          sub_100007F38((uint64_t)v28, &qword_10015B9A0);
          if (v43(v42, 1, v13) == 1)
          {
            sub_100007F38((uint64_t)v18, &qword_10015B9A0);
LABEL_15:
            v50 = v66;
            v51 = (uint64_t)a1 + *(int *)(v66 + 32);
            v52 = v74;
            sub_100007E78(v51, (uint64_t)v74, &qword_100158658);
            v53 = v73;
            sub_100007E78((uint64_t)a2 + *(int *)(v50 + 32), (uint64_t)v73, &qword_100158658);
            v54 = v76;
            v55 = (uint64_t)&v76[*(int *)(v72 + 48)];
            sub_100007E78((uint64_t)v52, (uint64_t)v76, &qword_100158658);
            sub_100007E78((uint64_t)v53, v55, &qword_100158658);
            v56 = v75;
            v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
            v58 = v67;
            if (v57((uint64_t)v54, 1, v67) == 1)
            {
              sub_100007F38((uint64_t)v53, &qword_100158658);
              sub_100007F38((uint64_t)v52, &qword_100158658);
              if (v57(v55, 1, v58) == 1)
              {
                sub_100007F38((uint64_t)v54, &qword_100158658);
                return 1;
              }
            }
            else
            {
              v59 = v70;
              sub_100007E78((uint64_t)v54, (uint64_t)v70, &qword_100158658);
              if (v57(v55, 1, v58) != 1)
              {
                v60 = v69;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32))(v69, v55, v58);
                v61 = sub_100007428(&qword_10015FBA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
                v62 = dispatch thunk of static Equatable.== infix(_:_:)(v59, v60, v58, v61);
                v63 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
                v63(v60, v58);
                sub_100007F38((uint64_t)v53, &qword_100158658);
                sub_100007F38((uint64_t)v52, &qword_100158658);
                v63(v59, v58);
                sub_100007F38((uint64_t)v54, &qword_100158658);
                return (v62 & 1) != 0;
              }
              sub_100007F38((uint64_t)v53, &qword_100158658);
              sub_100007F38((uint64_t)v52, &qword_100158658);
              (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v59, v58);
            }
            v45 = &qword_10015FB98;
            v46 = (uint64_t)v54;
            goto LABEL_21;
          }
LABEL_13:
          v45 = &qword_10015FBA0;
          v46 = (uint64_t)v18;
LABEL_21:
          sub_100007F38(v46, v45);
          return 0;
        }
        v44 = (uint64_t)v68;
        sub_100007E78((uint64_t)v18, (uint64_t)v68, &qword_10015B9A0);
        if (v43(v42, 1, v13) == 1)
        {
          sub_100007F38((uint64_t)v24, &qword_10015B9A0);
          sub_100007F38((uint64_t)v28, &qword_10015B9A0);
          (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v44, v13);
          goto LABEL_13;
        }
        v47 = v71;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v41 + 32))(v71, v42, v13);
        v48 = sub_100007428(&qword_10015FBB0, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
        v65 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v47, v13, v48);
        v49 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
        v49(v47, v13);
        sub_100007F38((uint64_t)v24, &qword_10015B9A0);
        sub_100007F38((uint64_t)v28, &qword_10015B9A0);
        v49((_BYTE *)v44, v13);
        sub_100007F38((uint64_t)v18, &qword_10015B9A0);
        if ((v65 & 1) != 0)
          goto LABEL_15;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F2228@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000F2C54(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of ArtistFilter.id.getter, a2);
}

uint64_t sub_1000F2234@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000F2C54(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of PlaylistFilter.id.getter, a2);
}

uint64_t sub_1000F2240(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1[12] = a1;
  v2 = sub_100007D50(&qword_10015FC28);
  v1[13] = v2;
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100007D50(&qword_10015FCA8);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v1[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_10015FCB0);
  v1[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[19] = v6;
  v1[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MusicDataRequest.ExecutionMethod(0);
  v1[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[22] = v8;
  v1[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MusicAuthorization.Status(0);
  v1[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[25] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[26] = swift_task_alloc(v11);
  v1[27] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000F2358, 0, 0);
}

uint64_t sub_1000F2358()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[23];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[22] + 104))(v1, enum case for MusicDataRequest.ExecutionMethod.firstParty(_:), v0[21]);
  static MusicDataRequest.preferredExecutionMethod.setter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static MusicAuthorization.request()[1]);
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_1000F23D0;
  return static MusicAuthorization.request()(v0[27]);
}

uint64_t sub_1000F23D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_1000F2424, 0, 0);
}

uint64_t sub_1000F2424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 200) + 104))(*(_QWORD *)(v0 + 208), enum case for MusicAuthorization.Status.authorized(_:), v1);
  v2 = sub_100007428(&qword_10015FC00, (uint64_t (*)(uint64_t))&type metadata accessor for MusicAuthorization.Status, (uint64_t)&protocol conformance descriptor for MusicAuthorization.Status);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  dispatch thunk of RawRepresentable.rawValue.getter(v1, v2);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 64), 2);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v11(v8, v9);
    v11(v7, v9);
    goto LABEL_5;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 64), v5, *(_QWORD *)(v0 + 80), 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v8, v9);
  v13(v7, v9);
  if ((v12 & 1) != 0)
  {
LABEL_5:
    v14 = *(_QWORD *)(v0 + 96);
    KeyPath = swift_getKeyPath(&unk_100112090);
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v17 = *(_QWORD *)(v0 + 96);
      v18 = v17 + 32;
      swift_bridgeObjectRetain(v17);
      v19 = (char *)_swiftEmptyArrayStorage;
      do
      {
        sub_10003BC30(v18, v0 + 16);
        v21 = *(_QWORD *)(v0 + 40);
        v22 = *(_QWORD *)(v0 + 48);
        sub_10001BF94((_QWORD *)(v0 + 16), v21);
        v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
        v25 = v24;
        sub_1000228FC((_QWORD *)(v0 + 16));
        if (v25)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = sub_100089E20(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
          v27 = *((_QWORD *)v19 + 2);
          v26 = *((_QWORD *)v19 + 3);
          if (v27 >= v26 >> 1)
            v19 = sub_100089E20((char *)(v26 > 1), v27 + 1, 1, v19);
          *((_QWORD *)v19 + 2) = v27 + 1;
          v20 = &v19[16 * v27];
          *((_QWORD *)v20 + 4) = v23;
          *((_QWORD *)v20 + 5) = v25;
        }
        v18 += 40;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
      v28 = *((_QWORD *)v19 + 2);
      if (!v28)
        goto LABEL_21;
    }
    else
    {
      v19 = (char *)_swiftEmptyArrayStorage;
      v28 = _swiftEmptyArrayStorage[2];
      if (!v28)
      {
LABEL_21:
        swift_bridgeObjectRelease(v19);
        v39 = type metadata accessor for Song(0, v38);
        v40 = sub_100007428(&qword_10015FCB8, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&protocol conformance descriptor for Song);
        MusicCatalogResourceRequest.init<A>(matching:memberOf:)(KeyPath, _swiftEmptyArrayStorage, v39, &protocol witness table for Song, v40);
        v41 = (_QWORD *)swift_task_alloc(async function pointer to MusicCatalogResourceRequest.response()[1]);
        *(_QWORD *)(v0 + 232) = v41;
        *v41 = v0;
        v41[1] = sub_1000F28C4;
        return MusicCatalogResourceRequest.response()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
      }
    }
    sub_1000F155C(0, v28, 0);
    v29 = v19 + 40;
    do
    {
      v30 = *(v29 - 1);
      v31 = *v29;
      swift_bridgeObjectRetain(*v29);
      v32 = MusicItemID.init(_:)(v30, v31);
      v34 = v33;
      v36 = _swiftEmptyArrayStorage[2];
      v35 = _swiftEmptyArrayStorage[3];
      if (v36 >= v35 >> 1)
        sub_1000F155C(v35 > 1, v36 + 1, 1);
      _swiftEmptyArrayStorage[2] = v36 + 1;
      v37 = (char *)&_swiftEmptyArrayStorage[2 * v36];
      *((_QWORD *)v37 + 4) = v32;
      *((_QWORD *)v37 + 5) = v34;
      v29 += 2;
      --v28;
    }
    while (v28);
    goto LABEL_21;
  }
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v43 = type metadata accessor for Logger(0);
  v44 = sub_100029E7C(v43, (uint64_t)qword_10016A5B0);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Authorization Error fetching songs.", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  v48 = *(_QWORD *)(v0 + 208);
  v49 = *(_QWORD *)(v0 + 184);
  v50 = *(_QWORD *)(v0 + 160);
  v51 = *(_QWORD *)(v0 + 136);
  v52 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_1000F28C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000F2A24;
  else
    v3 = sub_1000F2928;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000F2928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  MusicCatalogResourceResponse.items.getter(v5);
  v8 = sub_10000F4E0(&qword_10015FCC0, &qword_10015FC28, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v9 = dispatch thunk of Sequence._copyToContiguousArray()(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v10 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_1000F2A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v1 = *(_QWORD *)(v0 + 240);
  v2 = type metadata accessor for Logger(0);
  sub_100029E7C(v2, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 240);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 88) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching songs for setlists. Error: %@", v8, 0xCu);
    v11 = sub_100007D50(&qword_10015AC88);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 240));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);

  swift_errorRelease(v12);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyArrayStorage);
}

uint64_t sub_1000F2C48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000F2C54(a1, (uint64_t (*)(uint64_t, uint64_t))&dispatch thunk of SongFilter.id.getter, a2);
}

uint64_t sub_1000F2C54@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001BF94(a1, v5);
  result = a2(v5, v6);
  *a3 = result;
  a3[1] = v8;
  return result;
}

uint64_t sub_1000F2CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v10 = *a5;
  v11 = *a6;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  v12 = *(_QWORD *)(v10 + 80);
  v13 = *(_QWORD *)(v10 + 88);
  v14 = *(_QWORD *)(v11 + 80);
  v15 = *(_QWORD *)(v11 + 88);
  v26 = 0;
  State.init(wrappedValue:)(&v26, &type metadata for PhoneWallpapersWatchFacesConfiguration);
  v16 = v23;
  *(_BYTE *)(a7 + 32) = v22;
  *(_QWORD *)(a7 + 40) = v16;
  v22 = v12;
  v23 = v14;
  v24 = v13;
  v25 = v15;
  type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v22);
  v17 = *a5;
  WitnessTable = swift_getWitnessTable(&unk_10010C208, *a5);
  Bindable<A>.init(wrappedValue:)(a5, v17, WitnessTable);
  v19 = *a6;
  v20 = swift_getWitnessTable(&unk_10010E698, *a6);
  return Bindable<A>.init(wrappedValue:)(a6, v19, v20);
}

uint64_t type metadata accessor for PhoneWallpapersWatchFacesView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PhoneWallpapersWatchFacesView);
}

uint64_t sub_1000F2DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t storeEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000F2E48 + 4 * byte_1001120C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F2E7C + 4 * byte_1001120C0[v4]))();
}

uint64_t sub_1000F2E7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F2E84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F2E8CLL);
  return result;
}

uint64_t sub_1000F2E98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F2EA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000F2EA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F2EAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesConfiguration()
{
  return &type metadata for PhoneWallpapersWatchFacesConfiguration;
}

uint64_t sub_1000F2EC8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[5];

  v11[0] = &unk_100112120;
  v11[1] = &unk_100112138;
  v11[2] = &unk_100112138;
  v5 = type metadata accessor for PhoneWallpaperViewModel(255, a1[2], a1[4], a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v8 <= 0x3F)
  {
    v11[3] = *(_QWORD *)(result - 8) + 64;
    v9 = type metadata accessor for WatchFacesViewModel(255, a1[3], a1[5], v7);
    result = type metadata accessor for Bindable(319, v9);
    if (v10 <= 0x3F)
    {
      v11[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 5, v11, a1 + 6);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000F2F8C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (_QWORD *)a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v24 = *a2;
    *v5 = *a2;
    v5 = (_QWORD *)(v24 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v24);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *(int *)(a3 + 60);
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
    v15 = type metadata accessor for Bindable(0, v14);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v17 = swift_retain(v10);
    v16(v12, v13, v15, v17);
    v18 = *(int *)(a3 + 64);
    v19 = (char *)v5 + v18;
    v20 = (uint64_t)a2 + v18;
    v22 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v21);
    v23 = type metadata accessor for Bindable(0, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v19, v20, v23);
  }
  return v5;
}

uint64_t sub_1000F30BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 60);
  v6 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), v5);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  v8 = a1 + *(int *)(a2 + 64);
  v10 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), v9);
  v11 = type metadata accessor for Bindable(0, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
}

uint64_t sub_1000F3168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(int *)(a3 + 60);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  v14 = type metadata accessor for Bindable(0, v13);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v16 = swift_retain(v9);
  v15(v11, v12, v14, v16);
  v17 = *(int *)(a3 + 64);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v21 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v20);
  v22 = type metadata accessor for Bindable(0, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
  return a1;
}

uint64_t sub_1000F326C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = *(int *)(a3 + 60);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v14 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v11, v12, v15);
  v16 = *(int *)(a3 + 64);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v20 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v19);
  v21 = type metadata accessor for Bindable(0, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v17, v18, v21);
  return a1;
}

_OWORD *sub_1000F3384(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 60);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  v12 = type metadata accessor for Bindable(0, v11);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
  v13 = *(int *)(a3 + 64);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v17 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v16);
  v18 = type metadata accessor for Bindable(0, v17);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
  return a1;
}

uint64_t sub_1000F344C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v8);
  v9 = *(int *)(a3 + 60);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v13 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v10, v11, v14);
  v15 = *(int *)(a3 + 64);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v19 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v18);
  v20 = type metadata accessor for Bindable(0, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v16, v17, v20);
  return a1;
}

uint64_t sub_1000F353C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F3548);
}

uint64_t sub_1000F3548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v10;
      v14 = *(int *)(a3 + 60);
    }
    else
    {
      v15 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 40), v11);
      v13 = type metadata accessor for Bindable(0, v15);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = *(int *)(a3 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_1000F3610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F361C);
}

uint64_t sub_1000F361C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 32), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v9;
      v13 = *(int *)(a4 + 60);
    }
    else
    {
      v14 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 40), v10);
      v12 = type metadata accessor for Bindable(0, v14);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 64);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v5 + v13, a2, a2, v12);
  }
  return result;
}

unint64_t sub_1000F36E4()
{
  unint64_t result;

  result = qword_10015FD50;
  if (!qword_10015FD50)
  {
    result = swift_getWitnessTable(&unk_1001121A0, &type metadata for PhoneWallpapersWatchFacesConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015FD50);
  }
  return result;
}

uint64_t sub_1000F3728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000F3778@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v38 = a3;
  v4 = a1[2];
  v35 = a1[4];
  type metadata accessor for PhoneWallpaperView(255, v4, v35, a2);
  v5 = a1[3];
  v6 = a1[5];
  type metadata accessor for WatchFacesView(255, v5, v6, v7);
  v8 = type metadata accessor for _ConditionalContent(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for PhoneWallpapersWatchFacesHeader, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for VStack(0, v10, WitnessTable);
  v34 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - v13;
  v15 = sub_100007D00(&qword_10015FD58);
  v16 = type metadata accessor for ModifiedContent(0, v12, v15);
  v36 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v33 - v20;
  v40 = v4;
  v41 = v5;
  v42 = v35;
  v43 = v6;
  v44 = v37;
  v23 = static HorizontalAlignment.center.getter(v22);
  v24 = VStack.init(alignment:spacing:content:)(v23, 0, 1, sub_1000F5D3C, v39, v10, WitnessTable);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
  v29 = sub_10000C0FC();
  View.background<A>(_:alignment:)(v29, v25, v27, v12, &type metadata for LightGradientBackground, v28, v29);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v12);
  v30 = sub_10000F4E0(&qword_10015FD60, &qword_10015FD58, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v45 = v28;
  v46 = v30;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_10005135C((uint64_t)v18, v16, (uint64_t)v21);
  v31 = *(void (**)(char *, uint64_t))(v36 + 8);
  v31(v18, v16);
  sub_1000424BC((uint64_t)v21, v16, v38);
  return ((uint64_t (*)(char *, uint64_t))v31)(v21, v16);
}

double sub_1000F3A08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t WitnessTable;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  double result;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;

  v98 = a6;
  v11 = type metadata accessor for Optional(0);
  __chkstk_darwin(v11);
  v79 = (char *)&v76 - v12;
  v83 = a5;
  v14 = type metadata accessor for WatchFacesView(0, a3, a5, v13);
  v80 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v82 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v81 = (uint64_t)&v76 - v17;
  v18 = type metadata accessor for Optional(0);
  __chkstk_darwin(v18);
  v76 = (char *)&v76 - v19;
  v20 = a4;
  v22 = type metadata accessor for PhoneWallpaperView(0, a2, a4, v21);
  v77 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v78 = (uint64_t)&v76 - v26;
  v99 = v14;
  v97 = type metadata accessor for _ConditionalContent(0);
  v94 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v96 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v92 = (char *)&v76 - v29;
  v30 = *(_QWORD *)(a1 + 8);
  v88 = *(_QWORD *)a1;
  v31 = *(_QWORD *)(a1 + 24);
  v87 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 40);
  LOBYTE(v114) = *(_BYTE *)(a1 + 32);
  v32 = (char)v114;
  v115 = (char *)v33;
  v93 = v31;
  swift_bridgeObjectRetain(v31);
  v95 = v30;
  swift_bridgeObjectRetain(v30);
  v34 = sub_100007D50(&qword_10015FD68);
  State.projectedValue.getter(v34);
  v91 = v105;
  v85 = v106;
  v86 = v107;
  v35 = type metadata accessor for RemoteViewConfiguration();
  v36 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  v90 = EnvironmentObject.init()(v35, v36);
  v84 = v37;
  LOBYTE(v105) = v32;
  v106 = v33;
  State.wrappedValue.getter(&v114, v34);
  v89 = v22;
  v105 = a2;
  v106 = a3;
  v107 = v20;
  v108 = v83;
  if ((v114 & 1) != 0)
  {
    v38 = type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v105);
    v42 = (_QWORD *)sub_1000F3728(v38, v39, v40, v41);
    v43 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v79, 1, 1, a3);
    v44 = v82;
    sub_100012CA0(v42, v43, v82);
    v45 = v99;
    WitnessTable = swift_getWitnessTable(&unk_100108AC8, v99);
    v47 = v81;
    sub_10005135C(v44, v45, v81);
    v48 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v48(v44, v45);
    sub_1000424BC(v47, v45, v44);
    v49 = swift_getWitnessTable(&unk_100108860, v22);
    v50 = v92;
    sub_100042788(v44, v22, v45, v49, WitnessTable);
    v48(v44, v45);
    v48(v47, v45);
  }
  else
  {
    v51 = type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v105);
    v55 = (_QWORD *)sub_1000F2DAC(v51, v52, v53, v54);
    v56 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v76, 1, 1, a2);
    sub_10000B4F8(v55, v56, (uint64_t)v24);
    v57 = swift_getWitnessTable(&unk_100108860, v22);
    v58 = v78;
    sub_10005135C((uint64_t)v24, v22, v78);
    v59 = *(void (**)(char *, uint64_t))(v77 + 8);
    v59(v24, v22);
    sub_1000424BC(v58, v22, (uint64_t)v24);
    v60 = v99;
    v61 = swift_getWitnessTable(&unk_100108AC8, v99);
    v50 = v92;
    sub_1000426C4((uint64_t)v24, v22, v60, v57, v61);
    v59(v24, v22);
    v59((char *)v58, v22);
  }
  v62 = v95;
  v105 = v88;
  v106 = v95;
  v63 = v93;
  v107 = v87;
  v108 = v93;
  v64 = v91;
  v65 = v85;
  v109 = v91;
  v110 = v85;
  v111 = v86;
  v66 = v90;
  v112 = v90;
  v113 = v84;
  v114 = &v105;
  v67 = v94;
  v69 = v96;
  v68 = v97;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v96, v50, v97);
  v115 = v69;
  swift_retain(v66);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v63);
  swift_retain(v64);
  swift_retain(v65);
  v104[0] = &type metadata for PhoneWallpapersWatchFacesHeader;
  v104[1] = v68;
  v102 = sub_1000F5D4C();
  v70 = swift_getWitnessTable(&unk_100108860, v89);
  v71 = swift_getWitnessTable(&unk_100108AC8, v99);
  v100 = v70;
  v101 = v71;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v68);
  sub_100042510((uint64_t *)&v114, 2uLL, (uint64_t)v104);
  v72 = *(void (**)(char *, uint64_t))(v67 + 8);
  v72(v50, v68);
  swift_release(v66);
  swift_release(v65);
  swift_release(v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v72(v69, v68);
  v73 = v109;
  v74 = v112;
  swift_release(v110);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v73);
  *(_QWORD *)&result = swift_release(v74).n128_u64[0];
  return result;
}

uint64_t sub_1000F40E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;

  v2 = v1;
  v4 = sub_100007D50(&qword_10015A718);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015A720);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015FD78);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015FD80);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v17 = sub_100007D50(&qword_10015FD88);
  v18 = sub_1000F43C0(v2, (uint64_t)&v6[*(int *)(v17 + 44)]);
  v19 = static Alignment.leading.getter(v18);
  sub_100044584(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v19, v20);
  v21 = sub_100007F38((uint64_t)v6, &qword_10015A718);
  LOBYTE(v6) = static Edge.Set.horizontal.getter(v21);
  v22 = EdgeInsets.init(_all:)(20.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_100007E78((uint64_t)v9, (uint64_t)v12, &qword_10015A720);
  v29 = &v12[*(int *)(v10 + 36)];
  *v29 = (char)v6;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = sub_100007F38((uint64_t)v9, &qword_10015A720);
  LOBYTE(v6) = static Edge.Set.top.getter(v30);
  v31 = EdgeInsets.init(_all:)(36.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_100007E78((uint64_t)v12, (uint64_t)v15, &qword_10015FD78);
  v38 = &v15[*(int *)(v13 + 36)];
  *v38 = (char)v6;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_100007F38((uint64_t)v12, &qword_10015FD78);
  LOBYTE(v6) = static Edge.Set.bottom.getter(v39);
  v40 = EdgeInsets.init(_all:)(32.0);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  sub_100007E78((uint64_t)v15, a1, &qword_10015FD80);
  v47 = a1 + *(int *)(sub_100007D50(&qword_10015FD90) + 36);
  *(_BYTE *)v47 = (_BYTE)v6;
  *(double *)(v47 + 8) = v40;
  *(_QWORD *)(v47 + 16) = v42;
  *(_QWORD *)(v47 + 24) = v44;
  *(_QWORD *)(v47 + 32) = v46;
  *(_BYTE *)(v47 + 40) = 0;
  return sub_100007F38((uint64_t)v15, &qword_10015FD80);
}

uint64_t sub_1000F43C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t KeyPath;
  uint64_t v119;
  char v120;
  __int128 v121;
  char v122;
  _BYTE v123[16];
  __int128 v124;
  char v125;
  uint64_t v126;
  void *v127;

  v4 = sub_100007D50(&qword_10015FD98);
  __chkstk_darwin(v4);
  v102 = (uint64_t *)((char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = sub_100007D50(&qword_10015FDA0);
  __chkstk_darwin(v101);
  v103 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v115 = (uint64_t)&v97 - v8;
  v124 = *(_OWORD *)(a1 + 32);
  v125 = *(_BYTE *)(a1 + 48);
  v121 = *(_OWORD *)(a1 + 32);
  v122 = *(_BYTE *)(a1 + 48);
  v9 = sub_100007D50(&qword_10015FDA8);
  Binding.wrappedValue.getter(v9);
  if ((v126 & 1) != 0)
  {
    v10 = 0x8000000100114820;
    v11 = 0xD000000000000025;
  }
  else
  {
    v11 = 0xD000000000000029;
    v10 = 0x8000000100114110;
  }
  v12 = LocalizedStringKey.init(stringLiteral:)(v11, v10);
  v16 = Text.init(_:tableName:bundle:comment:)(v12, v14, v13 & 1, v15, 0, 0, 0, 0, 0, 256);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Font.title2.getter(v16);
  static Font.Weight.bold.getter(v23);
  v24 = Font.weight(_:)(v23);
  swift_release(v23);
  v113 = Text.font(_:)(v24, v16, v18, v22, v20);
  v119 = v25;
  v27 = v26;
  v114 = v28;
  swift_release(v24);
  sub_100007D90(v16, v18, v22);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100112290);
  v112 = swift_getKeyPath(&unk_1001122C0);
  sub_100018EB4(a1 + 16, (uint64_t)v123, (uint64_t *)&unk_10015CE10);
  v29 = sub_100018EB4((uint64_t)v123, (uint64_t)&v126, (uint64_t *)&unk_10015CE10);
  v30 = v127;
  if (v127)
  {
    LODWORD(v98) = v27;
    v104 = a1;
    v31 = v126;
    v121 = v124;
    v122 = v125;
    Binding.wrappedValue.getter(v9);
    v32 = sub_1000F4BB8(v31, v30, v120);
    LOWORD(v96) = 256;
    v36 = Text.init(_:tableName:bundle:comment:)(v32, v34, v33 & 1, v35, 0, 0, 0, 0, 0, v96);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    v43 = static Font.subheadline.getter(v36);
    static Font.Weight.regular.getter();
    v44 = Font.weight(_:)(v43);
    swift_release(v43);
    v45 = Text.font(_:)(v44, v36, v38, v42, v40);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    swift_release(v44);
    sub_100007D90(v36, v38, v42);
    swift_bridgeObjectRelease();
    if (qword_1001580A0 != -1)
      swift_once(&qword_1001580A0, sub_100051424);
    v52 = qword_10016A4B8;
    *(_QWORD *)&v121 = qword_10016A4B8;
    swift_retain(qword_10016A4B8);
    v111 = Text.foregroundStyle<A>(_:)(&v121, v45, v47, v49 & 1, v51, &type metadata for Color, &protocol witness table for Color);
    v110 = v53;
    v109 = v54;
    v108 = v55 & 1;
    sub_100007D90(v45, v47, v49 & 1);
    swift_release(v52);
    swift_bridgeObjectRelease();
    v107 = swift_getKeyPath(&unk_100112290);
    v106 = swift_getKeyPath(&unk_1001122C0);
    v56 = static Edge.Set.top.getter(v106);
    v105 = EdgeInsets.init(_all:)(3.0);
    v117 = v57;
    v100 = v58;
    v99 = v59;
    v116 = v56;
    v60 = 2;
    a1 = v104;
    LOBYTE(v27) = v98;
  }
  else
  {
    v111 = 0;
    v110 = 0;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v60 = 0;
    v106 = 0;
    v116 = 0;
    v105 = 0.0;
    v117 = 0;
    v100 = 0;
    v99 = 0;
  }
  v61 = v27 & 1;
  LODWORD(v104) = v27 & 1;
  v62 = static VerticalAlignment.center.getter(v29);
  v63 = (uint64_t)v102;
  *v102 = v62;
  *(_QWORD *)(v63 + 8) = 0x4020000000000000;
  *(_BYTE *)(v63 + 16) = 0;
  v64 = sub_100007D50(&qword_10015FDB0);
  v65 = sub_1000F4CA4(a1, (char *)(v63 + *(int *)(v64 + 44)));
  v66 = static Edge.Set.top.getter(v65);
  v67 = EdgeInsets.init(_all:)(16.0);
  v69 = v68;
  v71 = v70;
  v73 = v72;
  v74 = v103;
  sub_100007E78(v63, v103, &qword_10015FD98);
  v75 = v74 + *(int *)(v101 + 36);
  *(_BYTE *)v75 = v66;
  *(double *)(v75 + 8) = v67;
  *(_QWORD *)(v75 + 16) = v69;
  *(_QWORD *)(v75 + 24) = v71;
  *(_QWORD *)(v75 + 32) = v73;
  *(_BYTE *)(v75 + 40) = 0;
  sub_100007F38(v63, &qword_10015FD98);
  v76 = v115;
  sub_100018EB4(v74, v115, &qword_10015FDA0);
  sub_100007E78(v76, v74, &qword_10015FDA0);
  v77 = v113;
  v78 = v119;
  *(_QWORD *)a2 = v113;
  *(_QWORD *)(a2 + 8) = v78;
  *(_BYTE *)(a2 + 16) = v61;
  v79 = v114;
  v80 = KeyPath;
  *(_QWORD *)(a2 + 24) = v114;
  *(_QWORD *)(a2 + 32) = v80;
  *(_QWORD *)(a2 + 40) = 2;
  *(_BYTE *)(a2 + 48) = 0;
  v81 = v112;
  *(_QWORD *)(a2 + 56) = v112;
  *(_BYTE *)(a2 + 64) = 0;
  v82 = v110;
  *(_QWORD *)(a2 + 72) = v111;
  *(_QWORD *)(a2 + 80) = v82;
  v83 = v109;
  *(_QWORD *)(a2 + 88) = v108;
  *(_QWORD *)(a2 + 96) = v83;
  *(_QWORD *)(a2 + 104) = v107;
  *(_QWORD *)(a2 + 112) = v60;
  v84 = v106;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v84;
  v85 = v116;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = v85;
  v116 = v85;
  v98 = v60;
  v86 = v117;
  *(double *)(a2 + 152) = v105;
  *(_QWORD *)(a2 + 160) = v86;
  v117 = v86;
  v87 = v99;
  *(_QWORD *)(a2 + 168) = v100;
  *(_QWORD *)(a2 + 176) = v87;
  *(_BYTE *)(a2 + 184) = 0;
  v88 = sub_100007D50(&qword_10015FDB8);
  sub_100007E78(v74, a2 + *(int *)(v88 + 64), &qword_10015FDA0);
  sub_10000F844(v77, v119, v104);
  swift_bridgeObjectRetain(v79);
  swift_retain(KeyPath);
  swift_retain(v81);
  v89 = v111;
  v90 = v110;
  LOBYTE(v81) = v108;
  v91 = v109;
  v92 = v107;
  v93 = v60;
  v94 = v106;
  sub_10009D374(v111, v110, v108, v109, v107, v93, 0, v106);
  sub_100007F38(v115, &qword_10015FDA0);
  sub_100007F38(v74, &qword_10015FDA0);
  sub_10009D3C4(v89, v90, v81, v91, v92, v98, 0, v94);
  sub_100007D90(v113, v119, v104);
  swift_release(v112);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F4BB8(uint64_t a1, void *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v14;

  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(41, 1);
    v10 = 0x8000000100115880;
    v9 = 0xD000000000000029;
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(45, 1);
    v9 = 0xD00000000000002DLL;
    v10 = 0x80000001001158B0;
  }
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v9);
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v11);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
  return LocalizedStringKey.init(stringInterpolation:)(v8);
}

uint64_t sub_1000F4CA4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60[16];
  uint64_t v61;
  char v62[16];
  uint64_t v63;

  v58 = a2;
  v3 = type metadata accessor for PlainButtonStyle(0);
  v55 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015FDC0);
  v54 = *(_QWORD *)(v6 - 8);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015FDC8);
  v59 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v57 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v56 = (char *)&v48 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v48 - v18;
  v51 = (char *)&v48 - v18;
  v20 = swift_allocObject(&unk_1001505D8, 88, 7);
  v21 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v20 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v20 + 64) = v21;
  *(_QWORD *)(v20 + 80) = *(_QWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 32) = v22;
  v63 = a1;
  sub_1000F60EC((_QWORD *)a1);
  v23 = sub_100007D50(&qword_10015FDD0);
  v53 = v23;
  v52 = sub_1000F6150();
  v24 = Button.init(action:label:)(sub_1000F60DC, v20, sub_1000F60E4, v62, v23, v52);
  PlainButtonStyle.init()(v24);
  v25 = sub_10000F4E0(&qword_10015FE10, &qword_10015FDC0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v50 = v25;
  v26 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v48 = v16;
  v49 = v26;
  v27 = v16;
  v28 = v7;
  v29 = v7;
  v30 = v3;
  View.buttonStyle<A>(_:)(v5, v29, v3, v25, v26);
  v55 = *(_QWORD *)(v55 + 8);
  ((void (*)(char *, uint64_t))v55)(v5, v3);
  v31 = *(void (**)(char *, uint64_t))(v54 + 8);
  v31(v9, v28);
  v32 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  v32(v19, v27, v10);
  v33 = swift_allocObject(&unk_100150600, 88, 7);
  v34 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v33 + 64) = v34;
  *(_QWORD *)(v33 + 80) = *(_QWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v33 + 32) = v35;
  v61 = a1;
  sub_1000F60EC((_QWORD *)a1);
  v36 = Button.init(action:label:)(sub_1000F62D4, v33, sub_1000F62DC, v60, v53, v52);
  PlainButtonStyle.init()(v36);
  v37 = v56;
  View.buttonStyle<A>(_:)(v5, v28, v30, v50, v49);
  ((void (*)(char *, uint64_t))v55)(v5, v30);
  v31(v9, v28);
  v38 = v48;
  v39 = v37;
  v32(v48, v37, v10);
  v40 = v59;
  v41 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v42 = v51;
  v41(v39, v51, v10);
  v43 = v57;
  v41(v57, v38, v10);
  v44 = v58;
  v41(v58, v39, v10);
  v45 = sub_100007D50(&qword_10015FE18);
  v41(&v44[*(int *)(v45 + 48)], v43, v10);
  v46 = *(void (**)(char *, uint64_t))(v40 + 8);
  v46(v38, v10);
  v46(v42, v10);
  v46(v43, v10);
  return ((uint64_t (*)(char *, uint64_t))v46)(v39, v10);
}

void sub_1000F509C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;

  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  v9 = 0;
  v2 = sub_100007D50(&qword_10015FDA8);
  Binding.wrappedValue.setter(&v9, v2);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 8);
    swift_retain(v3);
    sub_10008A874(v4, v5, 8, 10, 19, 0, 3u, v3);
    swift_release(v3);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = type metadata accessor for RemoteViewConfiguration();
    v8 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
}

uint64_t sub_1000F517C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t KeyPath;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  char v111;
  __int128 v112;
  char v113;

  v92 = a2;
  v89 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v89);
  v91 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v87);
  v90 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100007D50(&qword_10015FDD0);
  __chkstk_darwin(v88);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100115910);
  v11 = Text.init(_:tableName:bundle:comment:)(v7, v9, v8 & 1, v10, 0, 0, 0, 0, 0, 256);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.footnote.getter(v11);
  static Font.Weight.semibold.getter();
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  v20 = Text.font(_:)(v19, v11, v13, v17, v15);
  v22 = v21;
  LODWORD(v86) = v23;
  v83 = v24;
  swift_release(v19);
  sub_100007D90(v11, v13, v17);
  swift_bridgeObjectRelease();
  v112 = *(_OWORD *)(a1 + 32);
  v113 = *(_BYTE *)(a1 + 48);
  v97 = *(_OWORD *)(a1 + 32);
  LOBYTE(v98) = *(_BYTE *)(a1 + 48);
  v25 = sub_100007D50(&qword_10015FDA8);
  v26 = Binding.wrappedValue.getter(v25);
  if ((v111 & 1) != 0)
  {
    v27 = static Color.primary.getter(v26);
  }
  else
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v27 = qword_10016A4A8;
    swift_retain(qword_10016A4A8);
  }
  *(_QWORD *)&v97 = v27;
  v28 = v86 & 1;
  v29 = Text.foregroundStyle<A>(_:)(&v97, v20, v22, v86 & 1, *(_QWORD *)&v83, &type metadata for Color, &protocol witness table for Color);
  v85 = v30;
  v86 = v29;
  v32 = v31;
  v84 = v33;
  sub_100007D90(v20, v22, v28);
  swift_release(v27);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100112290);
  v35 = static Edge.Set.horizontal.getter(KeyPath);
  v36 = EdgeInsets.init(_all:)(12.0);
  v82 = v37;
  v83 = v36;
  v80 = v39;
  v81 = v38;
  v41 = static Edge.Set.top.getter(v40);
  v42 = EdgeInsets.init(_all:)(6.5);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = static Edge.Set.bottom.getter(v49);
  v51 = EdgeInsets.init(_all:)(7.5);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v97 = v112;
  LOBYTE(v98) = v113;
  v58 = Binding.wrappedValue.getter(v25);
  if ((v111 & 1) != 0)
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v59 = qword_10016A4A8;
    swift_retain(qword_10016A4A8);
  }
  else
  {
    v60 = static Color.primary.getter(v58);
    v59 = v60;
  }
  v96 = v32 & 1;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v111 = 0;
  v61 = static Edge.Set.all.getter(v60);
  *(_QWORD *)&v97 = v86;
  *((_QWORD *)&v97 + 1) = v85;
  LOBYTE(v98) = v32 & 1;
  *((_QWORD *)&v98 + 1) = v84;
  *(_QWORD *)&v99 = KeyPath;
  *((_QWORD *)&v99 + 1) = 1;
  LOBYTE(v100) = 0;
  BYTE8(v100) = v35;
  *(double *)&v101 = v83;
  *((_QWORD *)&v101 + 1) = v82;
  *(_QWORD *)&v102 = v81;
  *((_QWORD *)&v102 + 1) = v80;
  LOBYTE(v103) = 0;
  BYTE8(v103) = v41;
  *(double *)&v104 = v42;
  *((_QWORD *)&v104 + 1) = v44;
  *(_QWORD *)&v105 = v46;
  *((_QWORD *)&v105 + 1) = v48;
  LOBYTE(v106) = 0;
  BYTE8(v106) = v50;
  *(double *)&v107 = v51;
  *((_QWORD *)&v107 + 1) = v53;
  *(_QWORD *)&v108 = v55;
  *((_QWORD *)&v108 + 1) = v57;
  LOBYTE(v109) = v111;
  *((_QWORD *)&v109 + 1) = v59;
  v110 = v61;
  v62 = v90;
  v63 = &v90[*(int *)(v87 + 20)];
  v64 = enum case for RoundedCornerStyle.continuous(_:);
  v65 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v63, v64, v65);
  __asm { FMOV            V0.2D, #16.0 }
  *v62 = _Q0;
  v71 = v91;
  sub_10000F760((uint64_t)v62, v91);
  *(_WORD *)(v71 + *(int *)(v89 + 36)) = 256;
  sub_100007E78(v71, (uint64_t)&v6[*(int *)(v88 + 36)], &qword_100158640);
  v72 = v108;
  *((_OWORD *)v6 + 10) = v107;
  *((_OWORD *)v6 + 11) = v72;
  *((_OWORD *)v6 + 12) = v109;
  v6[208] = v110;
  v73 = v104;
  *((_OWORD *)v6 + 6) = v103;
  *((_OWORD *)v6 + 7) = v73;
  v74 = v106;
  *((_OWORD *)v6 + 8) = v105;
  *((_OWORD *)v6 + 9) = v74;
  v75 = v100;
  *((_OWORD *)v6 + 2) = v99;
  *((_OWORD *)v6 + 3) = v75;
  v76 = v102;
  *((_OWORD *)v6 + 4) = v101;
  *((_OWORD *)v6 + 5) = v76;
  v77 = v98;
  *(_OWORD *)v6 = v97;
  *((_OWORD *)v6 + 1) = v77;
  sub_1000F62E4((uint64_t)&v97);
  sub_100007F38(v71, &qword_100158640);
  sub_10000F854((uint64_t)v62);
  sub_1000F633C((uint64_t)&v97);
  return sub_100018EB4((uint64_t)v6, v92, &qword_10015FDD0);
}

void sub_1000F56AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;

  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  v9 = 1;
  v2 = sub_100007D50(&qword_10015FDA8);
  Binding.wrappedValue.setter(&v9, v2);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 8);
    swift_retain(v3);
    sub_10008A874(v4, v5, 8, 10, 20, 0, 3u, v3);
    swift_release(v3);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = type metadata accessor for RemoteViewConfiguration();
    v8 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
}

uint64_t sub_1000F5790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t KeyPath;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  char v111;
  __int128 v112;
  char v113;

  v92 = a2;
  v89 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v89);
  v91 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v87);
  v90 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100007D50(&qword_10015FDD0);
  __chkstk_darwin(v88);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x80000001001158E0);
  v11 = Text.init(_:tableName:bundle:comment:)(v7, v9, v8 & 1, v10, 0, 0, 0, 0, 0, 256);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.footnote.getter(v11);
  static Font.Weight.semibold.getter();
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  v20 = Text.font(_:)(v19, v11, v13, v17, v15);
  v22 = v21;
  LODWORD(v86) = v23;
  v83 = v24;
  swift_release(v19);
  sub_100007D90(v11, v13, v17);
  swift_bridgeObjectRelease();
  v112 = *(_OWORD *)(a1 + 32);
  v113 = *(_BYTE *)(a1 + 48);
  v97 = *(_OWORD *)(a1 + 32);
  LOBYTE(v98) = *(_BYTE *)(a1 + 48);
  v25 = sub_100007D50(&qword_10015FDA8);
  v26 = Binding.wrappedValue.getter(v25);
  if (v111 == 1)
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v27 = qword_10016A4A8;
    swift_retain(qword_10016A4A8);
  }
  else
  {
    v27 = static Color.primary.getter(v26);
  }
  *(_QWORD *)&v97 = v27;
  v28 = v86 & 1;
  v29 = Text.foregroundStyle<A>(_:)(&v97, v20, v22, v86 & 1, *(_QWORD *)&v83, &type metadata for Color, &protocol witness table for Color);
  v85 = v30;
  v86 = v29;
  v32 = v31;
  v84 = v33;
  sub_100007D90(v20, v22, v28);
  swift_release(v27);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath(&unk_100112290);
  v35 = static Edge.Set.horizontal.getter(KeyPath);
  v36 = EdgeInsets.init(_all:)(12.0);
  v82 = v37;
  v83 = v36;
  v80 = v39;
  v81 = v38;
  v41 = static Edge.Set.top.getter(v40);
  v42 = EdgeInsets.init(_all:)(6.5);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v50 = static Edge.Set.bottom.getter(v49);
  v51 = EdgeInsets.init(_all:)(7.5);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v97 = v112;
  LOBYTE(v98) = v113;
  v58 = Binding.wrappedValue.getter(v25);
  if (v111 == 1)
  {
    v59 = static Color.primary.getter(v58);
    v60 = v59;
  }
  else
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v60 = qword_10016A4A8;
    swift_retain(qword_10016A4A8);
  }
  v96 = v32 & 1;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v111 = 0;
  v61 = static Edge.Set.all.getter(v59);
  *(_QWORD *)&v97 = v86;
  *((_QWORD *)&v97 + 1) = v85;
  LOBYTE(v98) = v32 & 1;
  *((_QWORD *)&v98 + 1) = v84;
  *(_QWORD *)&v99 = KeyPath;
  *((_QWORD *)&v99 + 1) = 1;
  LOBYTE(v100) = 0;
  BYTE8(v100) = v35;
  *(double *)&v101 = v83;
  *((_QWORD *)&v101 + 1) = v82;
  *(_QWORD *)&v102 = v81;
  *((_QWORD *)&v102 + 1) = v80;
  LOBYTE(v103) = 0;
  BYTE8(v103) = v41;
  *(double *)&v104 = v42;
  *((_QWORD *)&v104 + 1) = v44;
  *(_QWORD *)&v105 = v46;
  *((_QWORD *)&v105 + 1) = v48;
  LOBYTE(v106) = 0;
  BYTE8(v106) = v50;
  *(double *)&v107 = v51;
  *((_QWORD *)&v107 + 1) = v53;
  *(_QWORD *)&v108 = v55;
  *((_QWORD *)&v108 + 1) = v57;
  LOBYTE(v109) = v111;
  *((_QWORD *)&v109 + 1) = v60;
  v110 = v61;
  v62 = v90;
  v63 = &v90[*(int *)(v87 + 20)];
  v64 = enum case for RoundedCornerStyle.continuous(_:);
  v65 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v63, v64, v65);
  __asm { FMOV            V0.2D, #16.0 }
  *v62 = _Q0;
  v71 = v91;
  sub_10000F760((uint64_t)v62, v91);
  *(_WORD *)(v71 + *(int *)(v89 + 36)) = 256;
  sub_100007E78(v71, (uint64_t)&v6[*(int *)(v88 + 36)], &qword_100158640);
  v72 = v108;
  *((_OWORD *)v6 + 10) = v107;
  *((_OWORD *)v6 + 11) = v72;
  *((_OWORD *)v6 + 12) = v109;
  v6[208] = v110;
  v73 = v104;
  *((_OWORD *)v6 + 6) = v103;
  *((_OWORD *)v6 + 7) = v73;
  v74 = v106;
  *((_OWORD *)v6 + 8) = v105;
  *((_OWORD *)v6 + 9) = v74;
  v75 = v100;
  *((_OWORD *)v6 + 2) = v99;
  *((_OWORD *)v6 + 3) = v75;
  v76 = v102;
  *((_OWORD *)v6 + 4) = v101;
  *((_OWORD *)v6 + 5) = v76;
  v77 = v98;
  *(_OWORD *)v6 = v97;
  *((_OWORD *)v6 + 1) = v77;
  sub_1000F62E4((uint64_t)&v97);
  sub_100007F38(v71, &qword_100158640);
  sub_10000F854((uint64_t)v62);
  sub_1000F633C((uint64_t)&v97);
  return sub_100018EB4((uint64_t)v6, v92, &qword_10015FDD0);
}

uint64_t sub_1000F5CC8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F40E0(a1);
}

uint64_t sub_1000F5D08(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_100119A18, 1);
}

double sub_1000F5D3C@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000F3A08(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

unint64_t sub_1000F5D4C()
{
  unint64_t result;

  result = qword_10015FD70;
  if (!qword_10015FD70)
  {
    result = swift_getWitnessTable(&unk_100112240, &type metadata for PhoneWallpapersWatchFacesHeader);
    atomic_store(result, (unint64_t *)&qword_10015FD70);
  }
  return result;
}

uint64_t destroy for PhoneWallpapersWatchFacesHeader(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PhoneWallpapersWatchFacesHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for PhoneWallpapersWatchFacesHeader()
{
  return &type metadata for PhoneWallpapersWatchFacesHeader;
}

uint64_t sub_1000F5FA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[1];
  v5 = a1[3];
  type metadata accessor for PhoneWallpaperView(255, *a1, a1[2], a4);
  type metadata accessor for WatchFacesView(255, v4, v5, v6);
  v7 = type metadata accessor for _ConditionalContent(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for PhoneWallpapersWatchFacesHeader, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, WitnessTable);
  v12 = sub_100007D00(&qword_10015FD58);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v11);
  sub_10000F4E0(&qword_10015FD60, &qword_10015FD58, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
}

uint64_t sub_1000F60B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119A58, 1);
}

void sub_1000F60DC()
{
  uint64_t v0;

  sub_1000F509C(v0 + 16);
}

uint64_t sub_1000F60E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000F517C(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_1000F60EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_retain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

unint64_t sub_1000F6150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FDD8;
  if (!qword_10015FDD8)
  {
    v1 = sub_100007D00(&qword_10015FDD0);
    sub_1000F61D4();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FDD8);
  }
  return result;
}

unint64_t sub_1000F61D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FDE0;
  if (!qword_10015FDE0)
  {
    v1 = sub_100007D00(&qword_10015FDE8);
    sub_10000F31C(&qword_10015FDF0, &qword_10015FDF8, (void (*)(void))sub_1000F6270);
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FDE0);
  }
  return result;
}

uint64_t sub_1000F6270()
{
  return sub_10000F31C(&qword_10015FE00, &qword_10015FE08, (void (*)(void))sub_1000C70F8);
}

uint64_t sub_1000F6290()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_1000F62D4()
{
  uint64_t v0;

  sub_1000F56AC(v0 + 16);
}

uint64_t sub_1000F62DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000F5790(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000F62E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 200);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000F633C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 200);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F6394()
{
  return sub_10000F31C(&qword_10015FE20, &qword_10015FD90, (void (*)(void))sub_1000F63C0);
}

uint64_t sub_1000F63C0()
{
  return sub_10000F31C(&qword_10015FE28, &qword_10015FD80, (void (*)(void))sub_1000F63DC);
}

uint64_t sub_1000F63DC()
{
  return sub_10000F31C(&qword_10015FE30, &qword_10015FD78, (void (*)(void))sub_1000F63F8);
}

unint64_t sub_1000F63F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015FE38;
  if (!qword_10015FE38)
  {
    v1 = sub_100007D00(&qword_10015A720);
    sub_10000F4E0(&qword_10015FE40, &qword_10015A718, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015FE38);
  }
  return result;
}

uint64_t *sub_1000F647C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v12 = *v16;
    v17 = v16[1];
    *v15 = v12;
    v15[1] = v17;
  }
  swift_retain(v12);
  return a1;
}

double sub_1000F655C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20))).n128_u64[0];
  return result;
}

uint64_t *sub_1000F65CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  *v13 = v15;
  v13[1] = v16;
  swift_retain(v15);
  return a1;
}

uint64_t *sub_1000F6684(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_100007F38((uint64_t)a1, qword_100158AC8);
    v6 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a1 + v12);
  v16 = *v14;
  *(uint64_t *)((char *)a1 + v12) = *v14;
  swift_retain(v16);
  swift_release(v15);
  *((_QWORD *)v13 + 1) = v14[1];
  return a1;
}

char *sub_1000F6768(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000F6810(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100007F38((uint64_t)a1, qword_100158AC8);
    v6 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)v10;
  swift_release(v11);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  return a1;
}

uint64_t sub_1000F68E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F68F4);
}

uint64_t sub_1000F68F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100007D50(&qword_100158670);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000F6980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F698C);
}

uint64_t sub_1000F698C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100007D50(&qword_100158670);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for ErrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_10015FEE0;
  if (!qword_10015FEE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ErrorView);
  return result;
}

void sub_1000F6A44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10002C488(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100112300;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1000F6AB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119AA8, 1);
}

uint64_t sub_1000F6AC4()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100115960);
  qword_10015FE48 = result;
  unk_10015FE50 = v1;
  byte_10015FE58 = v2 & 1;
  qword_10015FE60 = v3;
  return result;
}

uint64_t sub_1000F6B08()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100113D10);
  qword_10015FE68 = result;
  unk_10015FE70 = v1;
  byte_10015FE78 = v2 & 1;
  qword_10015FE80 = v3;
  return result;
}

uint64_t sub_1000F6B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t OpaqueTypeConformance2;
  _QWORD v10[4];
  __int128 v11;
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[25];
  char v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  v2 = static HorizontalAlignment.center.getter(a1);
  sub_1000F6CE0((uint64_t)&v21);
  v20 = 0;
  v19 = v22;
  v18 = v23[0];
  v17 = BYTE8(v25);
  *(_QWORD *)&v11 = v2;
  *((_QWORD *)&v11 + 1) = 0x4034000000000000;
  v12[0] = 0;
  *(_OWORD *)&v12[8] = v21;
  v12[24] = v22;
  *(_QWORD *)&v13 = *((_QWORD *)&v22 + 1);
  BYTE8(v13) = v23[0];
  v14 = *(_OWORD *)&v23[8];
  *(_QWORD *)v15 = *(_QWORD *)&v23[24];
  *(_OWORD *)&v15[8] = v24;
  *(_QWORD *)&v15[24] = v25;
  v16[0] = BYTE8(v25);
  *(_OWORD *)&v16[8] = v26;
  v16[24] = v27[0];
  v10[2] = a1;
  v3 = sub_100007D50(&qword_10015FF20);
  v4 = sub_100007D50(&qword_10015FF28);
  v5 = sub_10000F4E0(&qword_10015FF30, &qword_10015FF20, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v6 = sub_100007D00(&qword_10015FF38);
  v7 = sub_1000F76BC();
  *(_QWORD *)&v21 = v6;
  *((_QWORD *)&v21 + 1) = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_1000F7768, v10, v3, v4, v5, OpaqueTypeConformance2);
  v26 = *(_OWORD *)&v15[16];
  v27[0] = *(_OWORD *)v16;
  *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)&v16[9];
  *(_OWORD *)v23 = *(_OWORD *)&v12[16];
  *(_OWORD *)&v23[16] = v13;
  v24 = v14;
  v25 = *(_OWORD *)v15;
  v21 = v11;
  v22 = *(_OWORD *)v12;
  return sub_1000F7770((uint64_t)&v21);
}

uint64_t sub_1000F6CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(systemName:)(0xD00000000000001BLL, 0x8000000100115940);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v56 = Image.resizable(capInsets:resizingMode:)(v5, v6, 0.0, 0.0, 0.0, 0.0);
  v7 = swift_release(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v7);
  v9 = static Alignment.center.getter(v8);
  v11 = _FrameLayout.init(width:height:alignment:)(&v57, 0x4048000000000000, 0, 0x4048000000000000, 0, v9, v10);
  v53 = v57;
  v52 = v58;
  v51 = v59;
  v50 = v60;
  v48 = v62;
  v49 = v61;
  v55 = static Color.secondary.getter(v11);
  KeyPath = swift_getKeyPath(&unk_100112368);
  if (qword_100158178 != -1)
    swift_once(&qword_100158178, sub_1000F6AC4);
  v12 = qword_10015FE48;
  v13 = unk_10015FE50;
  v14 = byte_10015FE58;
  v15 = qword_10015FE60;
  swift_bridgeObjectRetain(unk_10015FE50);
  swift_bridgeObjectRetain(v15);
  v16 = Text.init(_:tableName:bundle:comment:)(v12, v13, v14, v15, 0, 0, 0, 0, 0, 256);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v23 = v20 & 1;
  v24 = Text.foregroundColor(_:)(qword_10016A4B8, v16, v18, v23, v22);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_100007D90(v16, v18, v23);
  v31 = swift_bridgeObjectRelease();
  v32 = static Font.title2.getter(v31);
  v33 = Text.font(_:)(v32, v24, v26, v30, v28);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_release(v32);
  LOBYTE(v32) = v37 & 1;
  sub_100007D90(v24, v26, v30);
  swift_bridgeObjectRelease();
  v40 = swift_getKeyPath(&unk_100112398);
  v42 = v55;
  v41 = v56;
  v43 = v53;
  v44 = KeyPath;
  *(_QWORD *)a1 = v56;
  *(_QWORD *)(a1 + 8) = v43;
  *(_BYTE *)(a1 + 16) = v52;
  *(_QWORD *)(a1 + 24) = v51;
  *(_BYTE *)(a1 + 32) = v50;
  v45 = v48;
  *(_QWORD *)(a1 + 40) = v49;
  *(_QWORD *)(a1 + 48) = v45;
  *(_QWORD *)(a1 + 56) = v44;
  *(_QWORD *)(a1 + 64) = v42;
  *(_QWORD *)(a1 + 72) = v33;
  *(_QWORD *)(a1 + 80) = v35;
  *(_BYTE *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_BYTE *)(a1 + 112) = 1;
  swift_retain(v41);
  swift_retain(v44);
  swift_retain(v42);
  sub_10000F844(v33, v35, v32);
  swift_bridgeObjectRetain(v39);
  swift_retain(v40);
  sub_100007D90(v33, v35, v32);
  swift_release(v42);
  swift_release(v44);
  swift_release(v41);
  swift_release(v40);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F7054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v36[1] = a2;
  v3 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015B348);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = sub_100007D50(&qword_10015FF38);
  __chkstk_darwin(v36[0]);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v36 - v13;
  v15 = (_QWORD *)(a1 + *(int *)(type metadata accessor for ErrorView(0) + 20));
  v16 = *v15;
  if (*v15)
  {
    swift_retain(*v15);
    v17 = sub_1000DED48();
    v19 = v18;
    swift_release(v16);
    if (v19 && (swift_bridgeObjectRelease(), (v17 & 1) != 0))
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        v30 = sub_100007D50(&qword_10015B340);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v11, 1, 1, v30);
        v31 = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
        v37 = v6;
        v38 = v31;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
        static ToolbarContentBuilder.buildIf<A>(_:)(v11, v30, OpaqueTypeConformance2);
        sub_100007F38((uint64_t)v11, &qword_10015FF38);
        goto LABEL_6;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v21 = static ToolbarItemPlacement.navigationBarTrailing.getter(v20);
    __chkstk_darwin(v21);
    v36[-2] = a1;
    v22 = sub_100007D50(&qword_100158648);
    v23 = sub_10000F4E0(&qword_10015B358, &qword_100158648, (uint64_t)&protocol conformance descriptor for Button<A>);
    ToolbarItem<>.init(placement:content:)(v5, sub_1000F77F4, &v36[-4], v22, v23);
    v24 = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v6, v24);
    v25 = sub_100007D50(&qword_10015B340);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v11, 0, 1, v25);
    v37 = v6;
    v38 = v24;
    v26 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v11, v25, v26);
    sub_100007F38((uint64_t)v11, &qword_10015FF38);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    v27 = sub_1000F76BC();
    static ToolbarContentBuilder.buildBlock<A>(_:)(v14, v36[0], v27);
    return sub_100007F38((uint64_t)v14, &qword_10015FF38);
  }
  v33 = v15[1];
  v34 = type metadata accessor for RemoteViewConfiguration();
  v35 = sub_10001F9C0();
  result = EnvironmentObject.error()(0, v33, v34, v35);
  __break(1u);
  return result;
}

uint64_t sub_1000F73E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for DismissAction(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 64);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - v5;
  sub_100018E80((uint64_t)&v11 - v5);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v6, v0);
  v7 = *(unsigned __int8 *)(v1 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1001506B8, v8 + v2, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v9 + v8, v3, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return Button.init(action:label:)(sub_100032FDC, v9, sub_1000F7508, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_1000F7508@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (qword_100158180 != -1)
    swift_once(&qword_100158180, sub_1000F6B08);
  v2 = qword_10015FE68;
  v3 = unk_10015FE70;
  v4 = byte_10015FE78;
  v5 = qword_10015FE80;
  swift_bridgeObjectRetain(unk_10015FE70);
  swift_bridgeObjectRetain(v5);
  result = Text.init(_:tableName:bundle:comment:)(v2, v3, v4, v5, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  *(_QWORD *)(a1 + 24) = v9;
  return result;
}

uint64_t sub_1000F75C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  __n128 v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v0 = sub_100007D50(&qword_10015FF18);
  v1 = sub_100007D00(&qword_10015FF20);
  v2 = sub_100007D00(&qword_10015FF28);
  v3 = sub_10000F4E0(&qword_10015FF30, &qword_10015FF20, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v9 = sub_100007D00(&qword_10015FF38);
  v10 = sub_1000F76BC();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  return NavigationStack.init<>(root:)(sub_1000F76B4, &v8, v0, v5, v6);
}

uint64_t sub_1000F76B4()
{
  uint64_t v0;

  return sub_1000F6B4C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1000F76BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015FF40;
  if (!qword_10015FF40)
  {
    v1 = sub_100007D00(&qword_10015FF38);
    v2[0] = sub_100007D00(&qword_10015B348);
    v2[1] = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015FF40);
  }
  return result;
}

uint64_t sub_1000F7768@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000F7054(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000F7770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(v2);
  swift_release(v3);
  sub_100007D90(v4, v5, v6);
  swift_release(v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F77F4()
{
  return sub_1000F73E4();
}

uint64_t sub_1000F77FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F785C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F7884@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F78AC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000F78D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000F78FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F7924@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000F794C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000F7970(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000F7994()
{
  return sub_10000F4E0(&qword_10015FF48, qword_10015FF50, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t sub_1000F79C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[16];

  v15[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v15[1] = *(_QWORD *)(v2 - 8) + 64;
    v15[2] = &unk_100112400;
    v15[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v15[4] = &unk_100112400;
    v15[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v15[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v15[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v15[8] = &unk_100112418;
    sub_1000FA720(319);
    if (v6 > 0x3F)
    {
      return v5;
    }
    else
    {
      v15[9] = *(_QWORD *)(v5 - 8) + 64;
      v15[10] = (char *)&value witness table for Builtin.Int64 + 64;
      v15[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v15[12] = &unk_100112430;
      v15[13] = (char *)&value witness table for Builtin.Int64 + 64;
      v7 = *(_QWORD *)(a1 + 88);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v3, &unk_100117DE0, &unk_100117E00);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
      swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
      v10 = type metadata accessor for Optional(319);
      v3 = v10;
      if (v11 <= 0x3F)
      {
        v15[14] = *(_QWORD *)(v10 - 8) + 64;
        v12 = type metadata accessor for ObservationRegistrar(319);
        v3 = v12;
        if (v13 <= 0x3F)
        {
          v15[15] = *(_QWORD *)(v12 - 8) + 64;
          return swift_initClassMetadata2(a1, 0, 16, v15, a1 + 96);
        }
      }
    }
  }
  return v3;
}

BOOL sub_1000F7B64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v13;

  v1 = *v0;
  v13 = sub_1000F7D90();
  v4 = v1 + 80;
  v3 = *(_QWORD *)(v1 + 80);
  v2 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, v3, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v8 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_100116D14, &unk_100116D24);
  v9 = swift_getAssociatedTypeWitness(255, v8, v7, &unk_10011615C, &unk_10011617C);
  v10 = type metadata accessor for Array(0, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  LOBYTE(AssociatedConformanceWitness) = Collection.isEmpty.getter(v10, WitnessTable);
  swift_bridgeObjectRelease(v13);
  return (AssociatedConformanceWitness & 1) == 0;
}

uint64_t sub_1000F7C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &unk_100117DE0, &unk_100117E08);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)&v10 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DE8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  return v8;
}

uint64_t sub_1000F7D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, v1, &unk_100117DE0, &unk_100117E00);
  v4 = type metadata accessor for Optional(0);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v26 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v8 = type metadata accessor for Optional(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
    v13 = v26;
  }
  else
  {
    v14 = v8;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 88))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v6, AssociatedTypeWitness);
    v13 = v26;
    if (v15)
    {
      v27 = v15;
      v16 = type metadata accessor for Array(0, v26);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v16);
      Collection.first.getter(v16, WitnessTable);
      swift_bridgeObjectRelease(v15);
      v18 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v13) != 1)
      {
        v23 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_100116D14, &unk_100116D24);
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 40))(v13, v23);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v13);
        return v21;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v14);
    }
  }
  v19 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_100116D14, &unk_100116D24);
  v20 = swift_getAssociatedTypeWitness(0, v19, v13, &unk_10011615C, &unk_10011617C);
  return static Array._allocateUninitialized(_:)(0, v20);
}

uint64_t sub_1000F804C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_100117DE0, &unk_100117E08);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DE8);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_10011790C, &unk_10011796C);
  v6 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_10011790C, &unk_10011792C);
  v7 = swift_getAssociatedTypeWitness(255, v6, v5, &unk_100119D18, &unk_100119D30);
  v8 = type metadata accessor for Optional(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - v10;
  sub_1000FA074((uint64_t)&v16 - v10);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  else
  {
    v14 = swift_getAssociatedConformanceWitness(v6, v5, v7, &unk_100119D18, &unk_100119D20);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v7, v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
  }
  return v13;
}

double sub_1000F820C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112570);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
}

uint64_t sub_1000F8264()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;

  v0 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - v8;
  sub_1000F9C9C();
  sub_1000F9CF4();
  sub_1000F9D54((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_100007F38((uint64_t)v2, &qword_100158970);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UserInterfaceSizeClass.compact(_:), v3);
  v11 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v3, v11);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

uint64_t sub_1000F8420()
{
  uint64_t v0;
  char v1;
  char v2;

  if (sub_1000F7B64() || (sub_1000F93A8() & 1) != 0)
  {
    v1 = 1;
    if (sub_1000F85E8())
      goto LABEL_8;
  }
  else
  {
    v1 = sub_1000F9554();
    if (sub_1000F85E8())
    {
LABEL_8:
      v2 = 0;
      return v2 & 1;
    }
  }
  if ((v1 & 1) == 0)
    goto LABEL_8;
  v2 = *(_BYTE *)(*(_QWORD *)(v0 + 16) + 113) ^ 1;
  return v2 & 1;
}

uint64_t sub_1000F8484()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112748);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 192));
}

double sub_1000F84E4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)v2 + 80);
  KeyPath = swift_getKeyPath(&unk_100112748);
  v8 = v2;
  v9 = a1;
  v10 = a2 & 1;
  sub_1000F9B34(KeyPath, (uint64_t)sub_1000FADA4, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000F8568()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112710);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 200));
}

void sub_1000F85C0(double a1)
{
  sub_1000F9C20((uint64_t)&unk_100112710, (uint64_t)sub_1000FAD6C, a1);
}

void sub_1000F85D4(double a1)
{
  sub_1000F9C20((uint64_t)&unk_100112688, (uint64_t)sub_1000FAD24, a1);
}

BOOL sub_1000F85E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v11;

  v1 = *v0;
  v11 = sub_1000F86D4();
  v4 = v1 + 80;
  v3 = *(_QWORD *)(v1 + 80);
  v2 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, v3, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v8 = type metadata accessor for Array(0, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  LOBYTE(v2) = Collection.isEmpty.getter(v8, WitnessTable);
  swift_bridgeObjectRelease(v11);
  return (v2 & 1) == 0;
}

uint64_t sub_1000F86D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_100117DE0, &unk_100117E00);
  v4 = type metadata accessor for Optional(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
LABEL_4:
    v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
    v10 = static Array._allocateUninitialized(_:)(0, v11);
    swift_bridgeObjectRelease(0);
    return v10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_4;
  return v10;
}

BOOL sub_1000F886C()
{
  double v0;
  double v1;

  v0 = -sub_1000F9A80();
  v1 = sub_1000F9ECC();
  return v1 + sub_1000F9F24() <= v0;
}

uint64_t sub_1000F88A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  _BYTE v11[24];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  KeyPath = swift_getKeyPath(&unk_100112650);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 208);
  swift_beginAccess(v6, v11, 0, 0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v3, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v9 = type metadata accessor for Optional(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, v6, v9);
}

void sub_1000F89AC(double a1)
{
  sub_1000F9C20((uint64_t)&unk_100112618, (uint64_t)sub_1000FABE8, a1);
}

BOOL sub_1000F89C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_1000F8AB0((uint64_t)&v9);
  if (v10)
  {
    sub_10002BAA4(&v9, (uint64_t)v11);
    v0 = v12;
    v1 = v13;
    sub_10001BF94(v11, v12);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(v0, v1);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v0, &unk_1001166AC, &unk_1001166CC);
    v4 = sub_100007D50(&qword_1001597E8);
    v5 = _arrayForceCast<A, B>(_:)(v2, AssociatedTypeWitness, v4);
    swift_bridgeObjectRelease(v2);
    v6 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease(v5);
    v7 = v6 != 0;
    sub_1000228FC(v11);
  }
  else
  {
    sub_100007F38((uint64_t)&v9, &qword_10015C6A0);
    return 0;
  }
  return v7;
}

uint64_t sub_1000F8AB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *(_QWORD *)(v1 + 16);
  KeyPath = swift_getKeyPath(&unk_1001126C0);
  v7[0] = v3;
  v5 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 72, v7, 0, 0);
  return sub_100007E78(v3 + 72, a1, &qword_10015C6A0);
}

uint64_t sub_1000F8B60()
{
  int v0;

  if (sub_1000F7B64() || sub_1000F85E8() || (sub_1000F93A8() & 1) != 0)
    v0 = 0;
  else
    v0 = sub_1000F9554() ^ 1;
  return sub_1000F89C0() & v0 & 1;
}

uint64_t sub_1000F8BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  v1 = v0;
  sub_1000DED48();
  if (v2)
  {
    v3 = v2;
    if (*(_QWORD *)(v2 + 16))
    {
      v4 = sub_100086F64(2);
      if ((v5 & 1) != 0)
      {
        v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v4);
        swift_bridgeObjectRelease(v3);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease(v3);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 113);
}

void sub_1000F8C54()
{
  JUMPOUT(0x1000F8C68);
}

void sub_1000F8C9C()
{
  swift_bridgeObjectRelease(0xE600000000000000);
  JUMPOUT(0x1000F8C44);
}

uint64_t sub_1000F8CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_1001126E8);
  v5 = v1;
  v3 = sub_100007428(&qword_10015F2A8, type metadata accessor for SetlistController, (uint64_t)&unk_100110F88);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v1 + 112);
}

uint64_t sub_1000F8D30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch(sub_1000F8D9C, v4, v5);
}

uint64_t sub_1000F8D9C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015F29C);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000F8DE8;
  return sub_1000DD1B4();
}

uint64_t sub_1000F8DE8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return swift_task_switch(sub_100058FA4, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000F8E34()
{
  int v0;
  _BOOL4 v1;

  if ((sub_1000F93A8() & 1) != 0)
  {
    v0 = sub_1000F9554();
    if (sub_1000F7B64())
      goto LABEL_6;
  }
  else
  {
    v0 = 0;
    if (sub_1000F7B64())
      goto LABEL_6;
  }
  if (!sub_1000F85E8())
  {
    v1 = sub_1000F89C0();
    return v0 & v1 & 1;
  }
LABEL_6:
  v1 = 1;
  return v0 & v1 & 1;
}

uint64_t sub_1000F8E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_100117DE0, &unk_100117E00);
  v4 = type metadata accessor for Optional(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
LABEL_4:
    v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
    v10 = static Array._allocateUninitialized(_:)(0, v11);
    swift_bridgeObjectRelease(0);
    return v10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_4;
  return v10;
}

uint64_t sub_1000F9028()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;

  v0 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UserInterfaceSizeClass(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v13 - v8;
  sub_1000F9C9C();
  sub_1000F9CF4();
  sub_1000F9CF4();
  sub_1000F9D54((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_100007F38((uint64_t)v2, &qword_100158970);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UserInterfaceSizeClass.compact(_:), v3);
  v11 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v3, v11);
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

BOOL sub_1000F91F4()
{
  return (sub_1000F8E34() & 1) == 0;
}

uint64_t sub_1000F9210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_100117DE0, &unk_100117E00);
  v4 = type metadata accessor for Optional(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
LABEL_4:
    v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
    v10 = static Array._allocateUninitialized(_:)(0, v11);
    swift_bridgeObjectRelease(0);
    return v10;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_4;
  return v10;
}

uint64_t sub_1000F93A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  char v14;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_100117DE0, &unk_100117E00);
  v4 = type metadata accessor for Optional(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_5:
    v14 = 0;
    return v14 & 1;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_5;
  v16[1] = v10;
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
  v12 = type metadata accessor for Array(0, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  LOBYTE(v12) = Collection.isEmpty.getter(v12, WitnessTable);
  swift_bridgeObjectRelease(v10);
  v14 = v12 ^ 1;
  return v14 & 1;
}

uint64_t sub_1000F9554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  char v14;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_100117DE0, &unk_100117E00);
  v4 = type metadata accessor for Optional(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(v2, v1);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_5:
    v14 = 0;
    return v14 & 1;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 80))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, AssociatedTypeWitness);
  if (!v10)
    goto LABEL_5;
  v16[1] = v10;
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
  v12 = type metadata accessor for Array(0, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  LOBYTE(v12) = Collection.isEmpty.getter(v12, WitnessTable);
  swift_bridgeObjectRelease(v10);
  v14 = v12 ^ 1;
  return v14 & 1;
}

uint64_t sub_1000F9700()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 64))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

double sub_1000F9730()
{
  return sub_1000F98DC(1);
}

void sub_1000F9738(double a1)
{
  sub_1000F9C20((uint64_t)&unk_100112570, (uint64_t)sub_1000FAA5C, a1);
}

void sub_1000F974C(double a1)
{
  sub_1000F9C20((uint64_t)&unk_100112538, (uint64_t)sub_1000FA9D0, a1);
}

uint64_t sub_1000F9760(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_100112500);
  v6 = v1;
  v7 = a1;
  sub_1000F9B34(KeyPath, (uint64_t)sub_1000FA8FC, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  return sub_100007F38(a1, &qword_100158970);
}

void sub_1000F97E8(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __int128 v16;

  v16 = *(_OWORD *)(*(_QWORD *)v4 + 80);
  KeyPath = swift_getKeyPath(&unk_1001124C8);
  v11 = v4;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  sub_1000F9B34(KeyPath, (uint64_t)sub_1000FA8A0, (uint64_t)&v10, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

uint64_t sub_1000F9884()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112490);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

double sub_1000F98DC(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_100112490);
  v6 = v1;
  v7 = a1;
  sub_1000F9B34(KeyPath, (uint64_t)sub_1000FA81C, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_1000F9958()
{
  return sub_1000F98DC(0);
}

double sub_1000F9960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 16) + 113) & 1) != 0 || sub_1000F85E8())
  {
    v5 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
    type metadata accessor for MainActor(0);
    v7 = static MainActor.shared.getter(v6);
    v8 = swift_allocObject(&unk_1001507E0, 32, 7);
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = &protocol witness table for MainActor;
    v9 = sub_1000C8730((uint64_t)v3, (uint64_t)&unk_10015FFE0, v8);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

void sub_1000F9A38(double a1)
{
  sub_1000F9C20((uint64_t)&unk_1001125E0, (uint64_t)sub_100016C60, a1);
}

BOOL sub_1000F9A4C()
{
  double v0;

  v0 = -sub_1000F9A80();
  return sub_1000F9BC8() * 0.75 < v0;
}

double sub_1000F9A80()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1001125E0);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t sub_1000F9AD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_100112470, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_1000F9B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_100112470, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_1000F9BC8()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1001125A8);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
}

void sub_1000F9C20(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_1000F9B34(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

double sub_1000F9C9C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112538);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
}

double sub_1000F9CF4()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1001124C8);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
}

uint64_t sub_1000F9D54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  _BYTE v6[24];

  KeyPath = swift_getKeyPath(&unk_100112500);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_beginAccess(v4, v6, 0, 0);
  return sub_100007E78(v4, a1, &qword_100158970);
}

uint64_t sub_1000F9DE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E78(a1, (uint64_t)v4, &qword_100158970);
  return sub_1000F9760((uint64_t)v4);
}

uint64_t sub_1000F9E64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 168);
  swift_beginAccess(v3, v5, 33, 0);
  sub_1000FA914(a2, v3);
  return swift_endAccess(v5);
}

double sub_1000F9ECC()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112688);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 176));
}

double sub_1000F9F24()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100112618);
  sub_1000F9AD8(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 184));
}

uint64_t sub_1000F9F7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  _BYTE v12[24];

  v3 = *a1;
  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 + 208);
  swift_beginAccess(v4, v12, 33, 0);
  v7 = v3 + 80;
  v6 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v6, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v10 = type metadata accessor for Optional(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v4, a2, v10);
  return swift_endAccess(v12);
}

uint64_t sub_1000FA074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, v3, &unk_100117DE0, &unk_100117E08);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DE8);
  v6 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_10011790C, &unk_10011796C);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - v7;
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - v11;
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 208))(v9, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, v9, v6, &unk_10011790C, &unk_10011792C);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v6, v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  v23 = v14;
  v15 = swift_getAssociatedTypeWitness(255, v13, v6, &unk_100119D18, &unk_100119D30);
  v16 = swift_getAssociatedConformanceWitness(v13, v6, v15, &unk_100119D18, &unk_100119D20);
  v17 = type metadata accessor for Set(0, v15, *(_QWORD *)(v16 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v17);
  Collection.first.getter(v17, WitnessTable);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1000FA2AC()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000FA348, v3, v4);
}

uint64_t sub_1000FA348()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(AVAudioSession), "sharedInstance");
  *(_QWORD *)(v0 + 16) = 0;
  v2 = objc_msgSend(v1, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayback, 1, v0 + 16);

  v3 = *(void **)(v0 + 16);
  if (v2)
  {
    v4 = v3;
  }
  else
  {
    v5 = v3;
    v6 = _convertNSErrorToError(_:)(v3);

    swift_willThrow(v7);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v8 = type metadata accessor for Logger(0);
    sub_100029E7C(v8, (uint64_t)qword_10016A5B0);
    swift_errorRetain(v6);
    v9 = swift_errorRetain(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      swift_errorRetain(v6);
      v13 = _swift_stdlib_bridgeErrorToNSError(v6);
      *(_QWORD *)(v0 + 16) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
      *v16 = v13;
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received error setting playback category %@", v12, 0xCu);
      v14 = sub_100007D50(&qword_10015AC88);
      swift_arrayDestroy(v16, 1, v14);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_1000FA5C4()
{
  char *v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = *(_QWORD *)v0;
  v2 = swift_release(*((_QWORD *)v0 + 2));
  v3 = *(_QWORD *)(v1 + 80);
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v3 - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 104)], v3, v2);
  sub_100007F38((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 168)], &qword_100158970);
  v4 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 208)];
  v5 = *(_QWORD *)(v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v3, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v3, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v8 = type metadata accessor for Optional(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);
  v9 = &v0[*(_QWORD *)(*(_QWORD *)v0 + 216)];
  v10 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return v0;
}

uint64_t sub_1000FA6F0()
{
  uint64_t v0;

  sub_1000FA5C4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PromotionalAssetsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromotionalAssetsViewModel);
}

void sub_1000FA720(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_10015C208)
  {
    type metadata accessor for UserInterfaceSizeClass(255);
    v2 = type metadata accessor for Optional(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_10015C208);
  }
}

uint64_t sub_1000FA774()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FA798()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015FFDC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000FAC0;
  return sub_1000FA2AC();
}

uint64_t sub_1000FA804()
{
  return 16;
}

__n128 sub_1000FA810(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000FA81C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 128)) = *(_BYTE *)(v0 + 24);
}

void sub_1000FA834(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_1000F9CF4();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

void sub_1000FA860(double *a1)
{
  sub_1000F97E8(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000FA888()
{
  return 16;
}

__n128 sub_1000FA894(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1000FA8A0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 result;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 160);
  result = *(__n128 *)(v0 + 24);
  v3 = *(_OWORD *)(v0 + 40);
  *(__n128 *)v1 = result;
  *(_OWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t sub_1000FA8C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F9D54(a1);
}

uint64_t sub_1000FA8E4()
{
  return 16;
}

__n128 sub_1000FA8F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000FA8FC()
{
  uint64_t v0;

  return sub_1000F9E64(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000FA914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_100158970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_1000FA95C(double *a1@<X8>)
{
  *a1 = sub_1000F9C9C();
}

void sub_1000FA984(double *a1)
{
  sub_1000F9C20((uint64_t)&unk_100112538, (uint64_t)sub_1000FA9D0, *a1);
}

uint64_t sub_1000FA9B8()
{
  return 16;
}

__n128 sub_1000FA9C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000FA9D0()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 152)) = result;
  return result;
}

void sub_1000FA9E8(double *a1@<X8>)
{
  *a1 = sub_1000F820C();
}

void sub_1000FAA10(double *a1)
{
  sub_1000F9C20((uint64_t)&unk_100112570, (uint64_t)sub_1000FAA5C, *a1);
}

uint64_t sub_1000FAA44()
{
  return 16;
}

__n128 sub_1000FAA50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000FAA5C()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 144)) = result;
  return result;
}

void sub_1000FAA74(double *a1@<X8>)
{
  *a1 = sub_1000F9BC8();
}

void sub_1000FAA9C(double *a1)
{
  sub_1000F9C20((uint64_t)&unk_1001125A8, (uint64_t)sub_1000FAAE8, *a1);
}

uint64_t sub_1000FAAD0()
{
  return 16;
}

__n128 sub_1000FAADC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000FAAE8()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 136)) = result;
  return result;
}

void sub_1000FAB00(double *a1@<X8>)
{
  *a1 = sub_1000F9A80();
}

void sub_1000FAB28(double *a1)
{
  sub_1000F9C20((uint64_t)&unk_1001125E0, (uint64_t)sub_100016C60, *a1);
}

uint64_t sub_1000FAB5C()
{
  return 16;
}

__n128 sub_1000FAB68(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000FAB74(double *a1@<X8>)
{
  *a1 = sub_1000F9F24();
}

void sub_1000FAB9C(double *a1)
{
  sub_1000F9C20((uint64_t)&unk_100112618, (uint64_t)sub_1000FABE8, *a1);
}

uint64_t sub_1000FABD0()
{
  return 16;
}

__n128 sub_1000FABDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000FABE8()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 184)) = result;
  return result;
}

double sub_1000FAC00(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_100112650);
  v6 = v1;
  v7 = a1;
  sub_1000F9B34(KeyPath, (uint64_t)sub_1000FAC98, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000FAC80()
{
  return 16;
}

__n128 sub_1000FAC8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000FAC98()
{
  uint64_t v0;

  return sub_1000F9F7C(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000FACB0(double *a1@<X8>)
{
  *a1 = sub_1000F9ECC();
}

void sub_1000FACD8(double *a1)
{
  sub_1000F9C20((uint64_t)&unk_100112688, (uint64_t)sub_1000FAD24, *a1);
}

uint64_t sub_1000FAD0C()
{
  return 16;
}

__n128 sub_1000FAD18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000FAD24()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 176)) = result;
  return result;
}

uint64_t sub_1000FAD54()
{
  return 16;
}

__n128 sub_1000FAD60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1000FAD6C()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 200)) = result;
  return result;
}

uint64_t sub_1000FAD8C()
{
  return 16;
}

__n128 sub_1000FAD98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000FADA4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 192);
  *(_QWORD *)v2 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v2 + 8) = v1;
}

uint64_t sub_1000FADC4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

unint64_t sub_1000FADF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007D50(&qword_1001600C0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007E78(v7, (uint64_t)&v16, &qword_1001600C8);
    v8 = v16;
    v9 = v17;
    result = sub_100086E80(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100040554(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000FAF24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007D50(&qword_1001600F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007E78(v7, (uint64_t)&v14, &qword_1001600F8);
    v8 = v14;
    result = sub_100086EE4(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100040554(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000FB050(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007D50(&qword_1001600B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007E78(v7, (uint64_t)v16, &qword_1001600B8);
    result = sub_100086FE0((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100040554(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000FB190(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007D50(&qword_100160098);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100086E80(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1000FB2B0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = objc_allocWithZone((Class)ASCAdamID);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithStringValue:", v3);

  v5 = (void *)ASCLockupContextStandard;
  v6 = *(_QWORD *)(v0 + 24);
  v7 = ASCLockupKindApp;
  v8 = v5;
  swift_bridgeObjectRetain(v6);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v10 = objc_msgSend((id)objc_opt_self(ASCLockupRequest), "_requestWithID:kind:context:productVariantID:", v4, v7, v8, v9);

  return v10;
}

id sub_1000FB3BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  objc_super v13;
  _BYTE v14[16];

  sub_1000684E4((uint64_t)(v0 + 4), (uint64_t)v14);
  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[8];
  v4 = v0[9];
  v5 = (objc_class *)type metadata accessor for AppStoreComponent.AppStoreCoordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_1000684E4((uint64_t)v14, (uint64_t)v7);
  sub_100027618((uint64_t)v14);
  sub_100020C7C(v1, v2);
  sub_100020C7C(v3, v4);
  v8 = v6;
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)&v8[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onOpen];
  *v9 = v1;
  v9[1] = v2;
  v10 = (uint64_t *)&v8[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onStateChange];
  *v10 = v3;
  v10[1] = v4;
  sub_100020C7C(v1, v2);
  sub_100020C7C(v3, v4);

  v13.receiver = v8;
  v13.super_class = v5;
  v11 = objc_msgSendSuper2(&v13, "init");
  sub_100020BA0(v3, v4);
  sub_100020BA0(v1, v2);
  return v11;
}

id sub_1000FB4C8()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v8;

  v0 = objc_msgSend(objc_allocWithZone((Class)ASCLockupView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v1 = (void *)objc_opt_self(UIColor);
  v2 = v0;
  v3 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = sub_100007D50(&qword_1001600E0);
  UIViewRepresentableContext.coordinator.getter(&v8, v4);
  v5 = v8;
  objc_msgSend(v2, "setDelegate:", v8);

  v6 = sub_1000FB2B0();
  objc_msgSend(v2, "setRequest:", v6);

  return v2;
}

void sub_1000FB614(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t, __n128);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  void *v35;
  NSString v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  Swift::String aBlock;
  uint64_t (*v51)(uint64_t);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;

  v3 = v2;
  v6 = sub_100007D50(&qword_10015D460);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(uint64_t, __n128))(v2
                                               + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onStateChange);
  if (v10)
    v10(a2, v7);
  v11 = ASCAppStateOpenable;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  if (v12 != v15 || v14 != v16)
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
      goto LABEL_15;
    v19 = ASCAppStatePurchased;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v14 = v21;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    if (v20 != v22 || v14 != v23)
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v14, v22, v23, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        return;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n(v14, 2);
LABEL_15:
  v26 = v3 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onOpen;
  v27 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_onOpen);
  if (v27)
  {
    v28 = *(_QWORD *)(v26 + 8);
    v29 = (void *)objc_opt_self(NSBundle);
    v30 = objc_msgSend(v29, "mainBundle", swift_retain(v28).n128_f64[0]);
    v55._object = (void *)0xE000000000000000;
    v31._object = (void *)0x8000000100115B80;
    v31._countAndFlagsBits = 0xD000000000000026;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v55._countAndFlagsBits = 0;
    v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v55);

    aBlock = v33;
    v34 = sub_10001DB0C();
    StringProtocol.localizedUppercase.getter(&type metadata for String, v34);
    swift_bridgeObjectRelease();
    v35 = (void *)objc_opt_self(ASCOfferMetadata);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v37 = objc_msgSend(v35, "textMetadataWithTitle:subtitle:", v36, 0);

    v38 = objc_allocWithZone((Class)ASCLocalOffer);
    v53 = v27;
    v54 = v28;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v51 = sub_1000FADC4;
    v52 = &unk_100150808;
    v39 = _Block_copy(&aBlock);
    v40 = v54;
    sub_100020C7C(v27, v28);
    v41 = v37;
    v42 = objc_msgSend(v38, "initWithMetadata:action:", v41, v39, swift_release(v40).n128_f64[0]);

    _Block_release(v39);
    v43 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v9, 1, 1, v43);
    type metadata accessor for MainActor(0);
    v44 = a1;
    v45 = v42;
    v47 = static MainActor.shared.getter(v46);
    v48 = (_QWORD *)swift_allocObject(&unk_100150840, 48, 7);
    v48[2] = v47;
    v48[3] = &protocol witness table for MainActor;
    v48[4] = v44;
    v48[5] = v45;
    v49 = sub_1000C8730((uint64_t)v9, (uint64_t)&unk_1001600A8, (uint64_t)v48);

    sub_100020BA0(v27, v28);
    swift_release(v49);

  }
}

uint64_t sub_1000FB9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000FBA40, v8, v9);
}

uint64_t sub_1000FBA40()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = objc_msgSend(v1, "lockup");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "lockupWithOffer:", *(_QWORD *)(v0 + 24));

  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(*(id *)(v0 + 16), "setLockup:", v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AppStoreComponent.AppStoreCoordinator()
{
  return objc_opt_self(_TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator);
}

id sub_1000FBC38()
{
  return sub_1000FB4C8();
}

uint64_t sub_1000FBC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  char *v7;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = sub_100007D50(&qword_1001600E0);
  UIViewRepresentableContext.coordinator.getter(&v7, v3);
  v4 = v7;
  v5 = &v7[OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(_QWORD *)v5 = v2;
  *((_QWORD *)v5 + 1) = v1;
  swift_bridgeObjectRetain(v1);

  return swift_bridgeObjectRelease();
}

id sub_1000FBCEC@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1000FB3BC();
  *a1 = result;
  return result;
}

uint64_t sub_1000FBD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000FC360();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000FBD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000FC360();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000FBDD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000FC360();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_1000FBDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery + 8);
  if (!v1)
    return objc_msgSend(objc_allocWithZone((Class)ASCMetricsActivity), "init");
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV15ShazamEventsApp17AppStoreComponent19AppStoreCoordinator_metricsQuery);
  v3 = sub_100007D50(&qword_100160090);
  inited = swift_initStackObject(v3, &v10);
  *(_OWORD *)(inited + 16) = xmmword_100109020;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ASCMetricsActivityKeyRedirectURLParameters);
  *(_QWORD *)(inited + 40) = v5;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain(v1);
  sub_1000FB190(inited);
  v6 = objc_allocWithZone((Class)ASCMetricsActivity);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, "initWithFields:", isa);

  return v8;
}

uint64_t sub_1000FBF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FBF18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000FBF20()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000FBF54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1001600A4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10000FAC0;
  return sub_1000FB9D4(a1, v4, v5, v7, v6);
}

uint64_t destroy for AppStoreComponent(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[5]);
  if (a1[6])
    result = swift_release(a1[7]);
  if (a1[8])
    return swift_release(a1[9]);
  return result;
}

_QWORD *initializeWithCopy for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = a2 + 6;
  v7 = a2[6];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain(v9);
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  v10 = a2[8];
  if (v10)
  {
    v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    swift_retain(v11);
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  return a1;
}

_QWORD *assignWithCopy for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (a1[6])
  {
    if (v10)
    {
      v11 = a2[7];
      v12 = a1[7];
      a1[6] = v10;
      a1[7] = v11;
      swift_retain(v11);
      swift_release(v12);
      goto LABEL_8;
    }
    swift_release(a1[7]);
  }
  else if (v10)
  {
    v13 = a2[7];
    a1[6] = v10;
    a1[7] = v13;
    swift_retain(v13);
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  v14 = a2[8];
  if (!a1[8])
  {
    if (v14)
    {
      v17 = a2[9];
      a1[8] = v14;
      a1[9] = v17;
      swift_retain(v17);
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[9]);
    goto LABEL_14;
  }
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = v14;
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

_QWORD *assignWithTake for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (a1[6])
  {
    if (v10)
    {
      v11 = a2[7];
      v12 = a1[7];
      a1[6] = v10;
      a1[7] = v11;
      swift_release(v12);
      goto LABEL_8;
    }
    swift_release(a1[7]);
  }
  else if (v10)
  {
    v13 = a2[7];
    a1[6] = v10;
    a1[7] = v13;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  v14 = a2[8];
  if (!a1[8])
  {
    if (v14)
    {
      v17 = a2[9];
      a1[8] = v14;
      a1[9] = v17;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[9]);
    goto LABEL_14;
  }
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = v14;
  a1[9] = v15;
  swift_release(v16);
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreComponent()
{
  return &type metadata for AppStoreComponent;
}

unint64_t sub_1000FC31C()
{
  unint64_t result;

  result = qword_1001600D0;
  if (!qword_1001600D0)
  {
    result = swift_getWitnessTable(&unk_1001127B4, &type metadata for AppStoreComponent);
    atomic_store(result, (unint64_t *)&qword_1001600D0);
  }
  return result;
}

unint64_t sub_1000FC360()
{
  unint64_t result;

  result = qword_1001600E8;
  if (!qword_1001600E8)
  {
    result = swift_getWitnessTable(&unk_100112804, &type metadata for AppStoreComponent);
    atomic_store(result, (unint64_t *)&qword_1001600E8);
  }
  return result;
}

uint64_t *sub_1000FC3A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    v15 = *(int *)(a3 + 20);
    v16 = (uint64_t *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = *v17;
    v19 = v17[1];
    *v16 = v18;
    v16[1] = v19;
  }
  swift_retain(v18);
  return v4;
}

double sub_1000FC484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20))).n128_u64[0];
  return result;
}

_QWORD *sub_1000FC4F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  v14 = *(int *)(a3 + 20);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  *v15 = v17;
  v15[1] = v18;
  swift_retain(v17);
  return a1;
}

_QWORD *sub_1000FC5A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a1 + v12);
  v16 = *v14;
  *(_QWORD *)((char *)a1 + v12) = *v14;
  swift_retain(v16);
  swift_release(v15);
  *((_QWORD *)v13 + 1) = v14[1];
  return a1;
}

_OWORD *sub_1000FC680(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1000FC700(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *v14;
  swift_release(v15);
  *((_QWORD *)v13 + 1) = v14[1];
  return a1;
}

uint64_t sub_1000FC7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FC7BC);
}

uint64_t sub_1000FC7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for AttributionViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000FC844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FC850);
}

uint64_t sub_1000FC850(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AttributionViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for AttributionModule(uint64_t a1)
{
  uint64_t result;

  result = qword_1001601B8;
  if (!qword_1001601B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttributionModule);
  return result;
}

uint64_t sub_1000FC904(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for AttributionViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1001128B8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000FC974(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119BAC, 1);
}

uint64_t sub_1000FC984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v54[4];
  int v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;

  v60 = sub_100007D50(&qword_1001601F0);
  __chkstk_darwin(v60);
  v64 = (uint64_t *)&v54[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for AttributionModule(0);
  v56 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v57 = v5;
  v58 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OpenURLAction(0);
  v62 = *(_QWORD *)(v6 - 8);
  v63 = v6;
  __chkstk_darwin(v6);
  v61 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v8);
  v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = v1;
  sub_1000892B4((uint64_t)v10);
  v11 = Text.init(_:)(v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v18 = v15 & 1;
  v19 = Text.foregroundColor(_:)(qword_10016A4B8, v11, v13, v18, v17);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  sub_100007D90(v11, v13, v18);
  v26 = swift_bridgeObjectRelease();
  v27 = static Font.footnote.getter(v26);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  swift_release(v27);
  v32 &= 1u;
  sub_100007D90(v19, v21, v25);
  v35 = swift_bridgeObjectRelease();
  v55 = static Edge.Set.leading.getter(v35);
  v36 = EdgeInsets.init(_all:)(32.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  KeyPath = swift_getKeyPath(&unk_100112920);
  v44 = v58;
  sub_1000FCD74(v59, (uint64_t)v58);
  v45 = *(unsigned __int8 *)(v56 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = swift_allocObject(&unk_1001509A8, v46 + v57, v45 | 7);
  sub_1000FCE60((uint64_t)v44, v47 + v46);
  v48 = v61;
  OpenURLAction.init(handler:)(sub_1000FCEA4, v47);
  v50 = v63;
  v49 = v64;
  v51 = v62;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v62 + 16))((_BYTE *)v64 + *(int *)(v60 + 28), v48, v63);
  *v49 = KeyPath;
  v52 = sub_100007D50(&qword_1001601F8);
  sub_1000FCEF0((uint64_t)v49, a1 + *(int *)(v52 + 36));
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v32;
  *(_QWORD *)(a1 + 24) = v34;
  *(_BYTE *)(a1 + 32) = v55;
  *(double *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 48) = v38;
  *(_QWORD *)(a1 + 56) = v40;
  *(_QWORD *)(a1 + 64) = v42;
  *(_BYTE *)(a1 + 72) = 0;
  sub_10000F844(v28, v30, v32);
  swift_bridgeObjectRetain(v34);
  sub_1000FCF38((uint64_t)v49);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v48, v50);
  sub_100007D90(v28, v30, v32);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FCCE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AttributionModule(0) + 20));
  v3 = *v2;
  if (*v2)
  {
    swift_retain(*v2);
    sub_1000897C8(v4);
    v5 = swift_release(v3);
    return static OpenURLAction.Result.systemAction.getter(v5);
  }
  else
  {
    v7 = v2[1];
    v8 = type metadata accessor for RemoteViewConfiguration();
    v9 = sub_10001F9C0();
    result = EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FCD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributionModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FCDB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for AttributionModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for AttributionViewModel(0) + 24);
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000FCE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributionModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FCEA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttributionModule(0) - 8) + 80);
  return sub_1000FCCE4(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000FCEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_1001601F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FCF38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_1001601F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000FCF7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160200;
  if (!qword_100160200)
  {
    v1 = sub_100007D00(&qword_1001601F8);
    sub_10008F930();
    sub_1000FCFE8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160200);
  }
  return result;
}

unint64_t sub_1000FCFE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160208[0];
  if (!qword_100160208[0])
  {
    v1 = sub_100007D00(&qword_1001601F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, qword_100160208);
  }
  return result;
}

void sub_1000FD034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[4];

  v5 = type metadata accessor for MusicViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(v5 - 8) + 64;
    sub_10003C940(319, (unint64_t *)&qword_100158FE8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v8 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(v7 - 8) + 64;
      sub_10003C940(319, (unint64_t *)&qword_100158BE8, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
      if (v10 <= 0x3F)
      {
        v11[2] = *(_QWORD *)(v9 - 8) + 64;
        v11[3] = &unk_100112960;
        swift_initStructMetadata(a1, 0, 4, v11, a1 + 32);
      }
    }
  }
}

_QWORD *sub_1000FD100(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int (*v42)(char *, uint64_t, uint64_t, __n128);
  char *__dst;
  uint64_t v44;

  v5 = (_QWORD *)a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v20 = *a2;
    *v5 = *a2;
    v5 = (_QWORD *)(v20 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    v10 = a2[5];
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v12 = a2[7];
    v11 = a2[8];
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v11;
    v13 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v14 = *(int *)(v13 + 44);
    __dst = (char *)v5 + v14;
    v44 = v13;
    v15 = (char *)a2 + v14;
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    v18 = swift_bridgeObjectRetain(v11);
    if (v42(v15, 1, v16, v18))
    {
      v19 = sub_100007D50(&qword_100158658);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v21 = *(int *)(v44 + 48);
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)((char *)v5 + v21) = v22;
    v23 = *(int *)(a3 + 36);
    v24 = (_QWORD *)((char *)v5 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    swift_bridgeObjectRetain(v22);
    v26 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      v29 = *v25;
      *v24 = *v25;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
    v30 = *(int *)(a3 + 40);
    v31 = (_QWORD *)((char *)v5 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    v33 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      v36 = *v32;
      *v31 = *v32;
      swift_retain(v36);
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v37 = *(int *)(a3 + 44);
    v38 = (_QWORD *)((char *)v5 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    v20 = *v39;
    v40 = v39[1];
    *v38 = v20;
    v38[1] = v40;
  }
  swift_retain(v20);
  return v5;
}

double sub_1000FD384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1
     + *(int *)(type metadata accessor for MusicViewModel(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v4) + 44);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  v9 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  v12 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000FD4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v41)(const void *, uint64_t, uint64_t, __n128);
  void *__dst;
  uint64_t v43;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v13 = *(int *)(v12 + 44);
  __dst = (void *)(a1 + v13);
  v43 = v12;
  v14 = (const void *)(a2 + v13);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v41 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v16 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  v17 = swift_bridgeObjectRetain(v11);
  if (v41(v14, 1, v15, v17))
  {
    v18 = sub_100007D50(&qword_100158658);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v19 = *(int *)(v43 + 48);
  v20 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v21 = *(int *)(a3 + 36);
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  swift_bridgeObjectRetain(v20);
  v24 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = 1;
  }
  else
  {
    v27 = *v23;
    *v22 = *v23;
    swift_retain(v27);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v22, v24, v26);
  v28 = *(int *)(a3 + 40);
  v29 = (uint64_t *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v31 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    v33 = 1;
  }
  else
  {
    v34 = *v30;
    *v29 = *v30;
    swift_retain(v34);
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v31, v33);
  v35 = *(int *)(a3 + 44);
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  v39 = v37[1];
  *v36 = v38;
  v36[1] = v39;
  swift_retain(v38);
  return a1;
}

uint64_t sub_1000FD73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v11);
  v13 = *(int *)(v12 + 44);
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    v21 = sub_100007D50(&qword_100158658);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  v22 = *(int *)(v12 + 48);
  v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v24 = *(int *)(a3 + 36);
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    sub_100007F38(a1 + v24, &qword_100158AC0);
    v27 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
    v31 = *(int *)(a3 + 40);
    v32 = (uint64_t *)(a1 + v31);
    v33 = (uint64_t *)(a2 + v31);
    sub_100007F38(a1 + v31, &qword_1001582E8);
    v34 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
      v36 = 1;
    }
    else
    {
      v37 = *v33;
      *v32 = *v33;
      swift_retain(v37);
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v36);
  }
  v38 = *(int *)(a3 + 44);
  v39 = a1 + v38;
  v40 = (uint64_t *)(a2 + v38);
  v41 = *(_QWORD *)(a1 + v38);
  v42 = *v40;
  *(_QWORD *)(a1 + v38) = *v40;
  swift_retain(v42);
  swift_release(v41);
  *(_QWORD *)(v39 + 8) = v40[1];
  return a1;
}

uint64_t sub_1000FDA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;

  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v10 = *(int *)(v9 + 44);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100007D50(&qword_100158658);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_QWORD *)(a1 + *(int *)(v9 + 48)) = *(_QWORD *)(a2 + *(int *)(v9 + 48));
  v16 = *(int *)(a3 + 36);
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = *(int *)(a3 + 40);
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000FDC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8);
  v10 = *(int *)(v9 + 44);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100007D50(&qword_100158658);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(v9 + 48)) = *(_QWORD *)(a2 + *(int *)(v9 + 48));
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 36);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_100007F38(a1 + v19, &qword_100158AC0);
    v22 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    v24 = *(int *)(a3 + 40);
    v25 = (void *)(a1 + v24);
    v26 = (const void *)(a2 + v24);
    sub_100007F38(a1 + v24, &qword_1001582E8);
    v27 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
  }
  v29 = *(int *)(a3 + 44);
  v30 = a1 + v29;
  v31 = (_QWORD *)(a2 + v29);
  v32 = *(_QWORD *)(a1 + v29);
  *(_QWORD *)(a1 + v29) = *v31;
  swift_release(v32);
  *(_QWORD *)(v30 + 8) = v31[1];
  return a1;
}

uint64_t sub_1000FDF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FDF1C);
}

uint64_t sub_1000FDF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v7 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
    return v10(v11, a2, v9);
  }
  v12 = sub_100007D50(qword_100158F60);
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v9 = v12;
    v14 = *(int *)(a3 + 36);
LABEL_7:
    v11 = a1 + v14;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    return v10(v11, a2, v9);
  }
  v15 = sub_100007D50(&qword_100158B78);
  v13 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v9 = v15;
    v14 = *(int *)(a3 + 40);
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_1000FE000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FE00C);
}

uint64_t sub_1000FE00C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for MusicViewModel(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100007D50(qword_100158F60);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = *(int *)(a4 + 36);
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_100007D50(&qword_100158B78);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = *(int *)(a4 + 40);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = a2;
  return result;
}

uint64_t type metadata accessor for MusicModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MusicModule);
}

uint64_t sub_1000FE0EC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100119C10, 1);
}

uint64_t sub_1000FE120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v47 = a2;
  v3 = sub_100007D00(&qword_1001582B0);
  v4 = sub_100007D00(&qword_100160290);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Array(255, v5);
  v45 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v45 + 24);
  v56 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v5, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v58 = sub_100007D00(&qword_100160298);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v5, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v8 = type metadata accessor for ForEach(255, &v56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for VStack(255, v10, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  v15 = sub_100007D00(&qword_10015BC30);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = swift_getTupleTypeMetadata2(255, v3, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for VStack(0, v18, v19);
  v42 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v42 - v21;
  v23 = type metadata accessor for ModifiedContent(0, v20, &type metadata for _PaddingLayout);
  v43 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v25 = (char *)&v42 - v24;
  v26 = type metadata accessor for ModifiedContent(0, v23, &type metadata for _PaddingLayout);
  v44 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v42 - v30;
  v33 = static HorizontalAlignment.leading.getter(v32);
  v49 = v5;
  v50 = v45;
  v51 = v46;
  v34 = VStack.init(alignment:spacing:content:)(v33, 0x4030000000000000, 0, sub_1001004AC, v48, v18, v19);
  v35 = static Edge.Set.horizontal.getter(v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v20);
  View.padding(_:_:)(v35, 0, 1, v20, v36);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v22, v20);
  v38 = static Edge.Set.bottom.getter(v37);
  v54 = v36;
  v55 = &protocol witness table for _PaddingLayout;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  View.padding(_:_:)(v38, 0, 1, v23, v39);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v23);
  v52 = v39;
  v53 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  sub_10005135C((uint64_t)v28, v26, (uint64_t)v31);
  v40 = *(void (**)(char *, uint64_t))(v44 + 8);
  v40(v28, v26);
  sub_1000424BC((uint64_t)v31, v26, v47);
  return ((uint64_t (*)(char *, uint64_t))v40)(v31, v26);
}

uint64_t sub_1000FE520@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t *v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char v174[8];
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD v180[2];
  uint64_t v181[8];
  __int128 v182;
  __int128 v183;
  uint64_t v184;

  v153 = a3;
  v170 = a4;
  v7 = sub_100007D50(&qword_10015A250);
  __chkstk_darwin(v7);
  v169 = (uint64_t)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v156);
  v159 = (uint64_t)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v160);
  v165 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100007D50(&qword_10015BC00);
  __chkstk_darwin(v154);
  v166 = (uint64_t *)((char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v168 = sub_100007D50(&qword_10015BC08);
  __chkstk_darwin(v168);
  v167 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D00(&qword_100160290);
  v14 = type metadata accessor for Array(255, a2);
  v15 = *(_QWORD *)(a3 + 24);
  v151 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v17 = sub_100007D00(&qword_100160298);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  *(_QWORD *)&v182 = v14;
  *((_QWORD *)&v182 + 1) = AssociatedTypeWitness;
  *(_QWORD *)&v183 = v17;
  *((_QWORD *)&v183 + 1) = WitnessTable;
  v184 = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach(255, &v182);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v20, 0, 0);
  v22 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v148 = v22;
  v147 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v22);
  v23 = type metadata accessor for VStack(0, v22, v147);
  v150 = *(_QWORD *)(v23 - 8);
  v146 = v23;
  __chkstk_darwin(v23);
  v145 = (char *)&v140 - v24;
  v26 = type metadata accessor for ModifiedContent(0, v25, &type metadata for _PaddingLayout);
  *(_QWORD *)&v152 = *(_QWORD *)(v26 - 8);
  v149 = v26;
  __chkstk_darwin(v26);
  v144 = (char *)&v140 - v27;
  v29 = type metadata accessor for ModifiedContent(0, v28, &type metadata for _PaddingLayout);
  v157 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v171 = (char *)&v140 - v30;
  v31 = sub_100007D00(&qword_10015BC30);
  v158 = v29;
  v164 = type metadata accessor for ModifiedContent(0, v29, v31);
  v161 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v163 = (char *)&v140 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v162 = (uint64_t)&v140 - v34;
  v143 = type metadata accessor for AccessibilityTraits(0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v36 = (char *)&v140 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100007D50(&qword_1001582B0);
  __chkstk_darwin(v155);
  v173 = (uint64_t)&v140 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v172 = (uint64_t)&v140 - v39;
  v141 = a1;
  v40 = *a1;
  v41 = a1[1];
  v42 = *((unsigned __int8 *)a1 + 16);
  v43 = a1[3];
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v43);
  v44 = Text.init(_:tableName:bundle:comment:)(v40, v41, v42, v43, 0, 0, 0, 0, 0, 256);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v51 = static Font.Weight.bold.getter(v44);
  v52 = Text.fontWeight(_:)(*(_QWORD *)&v51, 0, v44, v46, v50, v48);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  sub_100007D90(v44, v46, v50);
  v59 = swift_bridgeObjectRelease();
  v60 = static Font.title2.getter(v59);
  v61 = Text.font(_:)(v60, v52, v54, v58, v56);
  v63 = v62;
  LOBYTE(v50) = v64;
  v66 = v65;
  swift_release(v60);
  sub_100007D90(v52, v54, v58);
  swift_bridgeObjectRelease();
  v67 = Text.accessibilityHeading(_:)(1, v61, v63, v50 & 1, v66);
  v69 = v68;
  LOBYTE(v52) = v70;
  v72 = v71;
  sub_100007D90(v61, v63, v50 & 1);
  v73 = swift_bridgeObjectRelease();
  *(_QWORD *)&v182 = v67;
  *((_QWORD *)&v182 + 1) = v69;
  LOBYTE(v183) = v52 & 1;
  *((_QWORD *)&v183 + 1) = v72;
  static AccessibilityTraits.isHeader.getter(v73);
  v74 = v173;
  View.accessibility(addTraits:)(v36, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v36, v143);
  sub_100007D90(v182, *((uint64_t *)&v182 + 1), v183);
  swift_bridgeObjectRelease();
  v75 = sub_100018EB4(v74, v172, &qword_1001582B0);
  v175 = v151;
  v176 = v153;
  v177 = v141;
  v76 = static HorizontalAlignment.center.getter(v75);
  v77 = v145;
  v78 = VStack.init(alignment:spacing:content:)(v76, 0, 1, sub_1001004B8, v174, v148, v147);
  v79 = static Edge.Set.horizontal.getter(v78);
  v80 = v146;
  v81 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v146);
  v82 = v144;
  View.padding(_:_:)(v79, 0, 1, v80, v81);
  v83 = (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v77, v80);
  v84 = static Edge.Set.top.getter(v83);
  v181[6] = v81;
  v181[7] = (uint64_t)&protocol witness table for _PaddingLayout;
  v85 = v149;
  v153 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v149);
  View.padding(_:_:)(v84, 0, 1, v85, v153);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v82, v85);
  if (qword_1001580B0 != -1)
    swift_once(&qword_1001580B0, sub_10005144C);
  v86 = qword_10016A4C8;
  KeyPath = swift_getKeyPath(&unk_1001129D8);
  v88 = v160;
  v89 = v165;
  v90 = &v165[*(int *)(v160 + 20)];
  v91 = enum case for RoundedCornerStyle.continuous(_:);
  v92 = type metadata accessor for RoundedCornerStyle(0);
  v93 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 104);
  v93(v90, v91, v92);
  __asm { FMOV            V0.2D, #12.0 }
  v152 = _Q0;
  *v89 = _Q0;
  v99 = v159;
  sub_10000F760((uint64_t)v89, v159);
  *(_WORD *)(v99 + *(int *)(v156 + 36)) = 256;
  v100 = v166;
  sub_100007E78(v99, (uint64_t)v166 + *(int *)(v154 + 36), &qword_100158640);
  *v100 = KeyPath;
  v100[1] = v86;
  swift_retain_n(v86, 2);
  swift_retain(KeyPath);
  sub_100007F38(v99, &qword_100158640);
  sub_10000F854((uint64_t)v89);
  swift_release(v86);
  v101 = swift_release(KeyPath);
  v102 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v93)((char *)v89 + *(int *)(v88 + 20), v91, v92, v101);
  *v89 = v152;
  v103 = static Color.black.getter(v102);
  v104 = Color.opacity(_:)(0.1);
  swift_release(v103);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v182, 0, 0, _swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v105 = v169;
  sub_10000F760((uint64_t)v89, v169);
  v106 = v105 + *(int *)(sub_100007D50(&qword_10015A258) + 36);
  v107 = v183;
  *(_OWORD *)v106 = v182;
  *(_OWORD *)(v106 + 16) = v107;
  *(_QWORD *)(v106 + 32) = v184;
  v108 = sub_100007D50(&qword_10015A260);
  *(_QWORD *)(v105 + *(int *)(v108 + 52)) = v104;
  *(_WORD *)(v105 + *(int *)(v108 + 56)) = 256;
  v109 = static Alignment.center.getter(v108);
  v111 = v110;
  v112 = (uint64_t *)(v105 + *(int *)(sub_100007D50(&qword_10015A268) + 36));
  *v112 = v109;
  v112[1] = v111;
  v113 = sub_10000F854((uint64_t)v89);
  v114 = static Alignment.center.getter(v113);
  v116 = v115;
  v117 = v168;
  v118 = (uint64_t)v167;
  v119 = (uint64_t)&v167[*(int *)(v168 + 36)];
  sub_100007E78(v105, v119, &qword_10015A250);
  v120 = (uint64_t *)(v119 + *(int *)(sub_100007D50(&qword_10015A248) + 36));
  *v120 = v114;
  v120[1] = v116;
  sub_100007E78((uint64_t)v100, v118, &qword_10015BC00);
  sub_100007F38(v105, &qword_10015A250);
  v121 = sub_100007F38((uint64_t)v100, &qword_10015BC00);
  v122 = static Alignment.center.getter(v121);
  v124 = v123;
  v181[4] = v153;
  v181[5] = (uint64_t)&protocol witness table for _PaddingLayout;
  v125 = v158;
  v126 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v127 = sub_1001004CC();
  v128 = (uint64_t)v163;
  v129 = v124;
  v130 = v171;
  View.background<A>(_:alignment:)(v118, v122, v129, v125, v117, v126, v127);
  sub_100007F38(v118, &qword_10015BC08);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v130, v125);
  v131 = sub_10000F4E0(&qword_10015BD20, &qword_10015BC30, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v181[2] = v126;
  v181[3] = v131;
  v132 = v164;
  v133 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v164);
  v134 = v162;
  sub_10005135C(v128, v132, v162);
  v135 = v161;
  v136 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
  v136(v128, v132);
  v137 = v172;
  v138 = v173;
  sub_100007E78(v172, v173, &qword_1001582B0);
  v181[0] = v138;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v128, v134, v132);
  v181[1] = v128;
  v180[0] = v155;
  v180[1] = v132;
  v178 = sub_100007DF4();
  v179 = v133;
  sub_100042510(v181, 2uLL, (uint64_t)v180);
  v136(v134, v132);
  sub_100007F38(v137, &qword_1001582B0);
  v136(v128, v132);
  return sub_100007F38(v138, &qword_1001582B0);
}

uint64_t sub_1000FF164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v56 = a5;
  v8 = type metadata accessor for MusicModule(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v54 = v8;
  v55 = v10;
  __chkstk_darwin(v8);
  v51 = (char *)&v44 - v11;
  v12 = type metadata accessor for Array(255, a2);
  v49 = v12;
  v50 = *(_QWORD *)(a3 + 24);
  v13 = v50;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v50, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v48 = AssociatedTypeWitness;
  v15 = sub_100007D00(&qword_100160298);
  v47 = v15;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v46 = WitnessTable;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v60 = v12;
  v61 = (char *)AssociatedTypeWitness;
  v62 = v15;
  v63 = WitnessTable;
  v64 = AssociatedConformanceWitness;
  v18 = type metadata accessor for ForEach(0, &v60);
  v53 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v45 = (uint64_t)&v44 - v22;
  v52 = sub_100007D50(&qword_100160290);
  __chkstk_darwin(v52);
  v44 = (uint64_t)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v44 - v25;
  *(_QWORD *)v26 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 1;
  v28 = sub_100007D50(&qword_1001602B0);
  sub_1000FF520(a1, a2, a3, v29, (uint64_t)&v26[*(int *)(v28 + 44)]);
  v31 = type metadata accessor for MusicViewModel(0, a2, a3, v30);
  v60 = sub_100094D94(v31);
  v32 = v51;
  v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v51, a1, v54);
  v34 = *(unsigned __int8 *)(v9 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(&unk_100150A68, v35 + v55, v34 | 7);
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v36 + v35, v32, v33);
  v37 = sub_1001007EC();
  ForEach<>.init(_:content:)(&v60, sub_100100784, v36, v49, v48, v47, v46, v37, v50);
  v59[2] = v37;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v18);
  v39 = v45;
  sub_10005135C((uint64_t)v20, v18, v45);
  v40 = v53;
  v41 = *(void (**)(char *, uint64_t))(v53 + 8);
  v41(v20, v18);
  v42 = v44;
  sub_100007E78((uint64_t)v26, v44, &qword_100160290);
  v60 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v20, v39, v18);
  v61 = v20;
  v59[0] = v52;
  v59[1] = v18;
  v57 = sub_10000F4E0(&qword_1001602D8, &qword_100160290, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v58 = v38;
  sub_100042510(&v60, 2uLL, (uint64_t)v59);
  v41((char *)v39, v18);
  sub_100007F38((uint64_t)v26, &qword_100160290);
  v41(v20, v18);
  return sub_100007F38(v42, &qword_100160290);
}

double sub_1000FF520@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double result;
  _QWORD v69[6];
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;

  v97 = a3;
  v103 = a2;
  v7 = type metadata accessor for MusicModule(0, a2, a3, a4);
  v81 = *(_QWORD *)(v7 - 8);
  v78 = *(_QWORD *)(v81 + 64);
  __chkstk_darwin(v7);
  v79 = (char *)&v70 - v8;
  v9 = sub_100007D50(&qword_100158648);
  v101 = *(_QWORD *)(v9 - 8);
  v102 = v9;
  __chkstk_darwin(v9);
  v82 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v77 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v16;
  __chkstk_darwin(v17);
  v99 = (char *)&v70 - v18;
  v19 = sub_100007D50(&qword_100159F68);
  __chkstk_darwin(v19);
  v100 = (uint64_t)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v98 = (char *)&v70 - v22;
  v23 = type metadata accessor for ColorScheme(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v70 - v28;
  v80 = v7;
  sub_100018C18((uint64_t)&v70 - v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for ColorScheme.light(_:), v23);
  LOBYTE(v7) = static ColorScheme.== infix(_:_:)(v29, v26);
  v30 = *(void (**)(char *, uint64_t))(v24 + 8);
  v30(v26, v23);
  v30(v29, v23);
  v31 = "appleMusicLogoWhite";
  if ((v7 & 1) != 0)
    v31 = "appleMusicLogoBlack";
  v32 = Image.init(_:bundle:)(0xD000000000000013, (unint64_t)(v31 - 32) | 0x8000000000000000, 0);
  v33 = static Alignment.leading.getter(v32);
  sub_1000445DC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v104, 0.0, 1, 0.0, 1, v33, v34, v32);
  swift_release(v32);
  v35 = v104[0];
  v96 = v104[1];
  v95 = v105;
  v94 = v106;
  v93 = v107;
  v92 = v108;
  v91 = v109;
  v90 = v110;
  v89 = v111;
  v88 = v112;
  v87 = v113;
  v86 = v114;
  v85 = v115;
  v84 = v116;
  v83 = v117;
  v36 = v97;
  v38 = type metadata accessor for MusicViewModel(0, v103, v97, v37);
  v39 = a1;
  sub_100094C74(v38, (uint64_t)v13);
  v40 = v15;
  v41 = v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100007F38((uint64_t)v13, &qword_100158658);
    v42 = 1;
    v44 = v101;
    v43 = v102;
    v45 = (uint64_t)v98;
  }
  else
  {
    v72 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v74 = v15;
    v46 = v99;
    v71 = v14;
    v72(v99, v13, v14);
    v75 = v35;
    v47 = v79;
    v48 = v81;
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
    v73 = v39;
    v50 = v80;
    v49(v79, v39, v80);
    v51 = v77;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v77, v46, v41);
    v52 = *(unsigned __int8 *)(v48 + 80);
    v53 = (v52 + 32) & ~v52;
    v54 = *(unsigned __int8 *)(v40 + 80);
    v55 = (v78 + v54 + v53) & ~v54;
    v56 = swift_allocObject(&unk_100150AB8, v55 + v76, v52 | v54 | 7);
    v57 = v103;
    *(_QWORD *)(v56 + 16) = v103;
    *(_QWORD *)(v56 + 24) = v36;
    v58 = v47;
    v35 = v75;
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v56 + v53, v58, v50);
    v59 = v71;
    v60 = ((uint64_t (*)(uint64_t, char *, uint64_t))v72)(v56 + v55, v51, v71);
    __chkstk_darwin(v60);
    v69[2] = v57;
    v69[3] = v36;
    v69[4] = v73;
    v61 = v82;
    Button.init(action:label:)(sub_100100BAC, v56, sub_100100C3C, v69, &type metadata for Text, &protocol witness table for Text);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v99, v59);
    v63 = v101;
    v62 = v102;
    v45 = (uint64_t)v98;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v98, v61, v102);
    v42 = 0;
    v43 = v62;
    v44 = v63;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, v42, 1, v43);
  v64 = v100;
  sub_100007E78(v45, v100, &qword_100159F68);
  v65 = v96;
  *(_QWORD *)a5 = v35;
  *(_QWORD *)(a5 + 8) = v65;
  *(_BYTE *)(a5 + 16) = v95;
  *(_QWORD *)(a5 + 24) = v94;
  *(_BYTE *)(a5 + 32) = v93;
  *(_QWORD *)(a5 + 40) = v92;
  *(_BYTE *)(a5 + 48) = v91;
  *(_QWORD *)(a5 + 56) = v90;
  *(_BYTE *)(a5 + 64) = v89;
  *(_QWORD *)(a5 + 72) = v88;
  *(_BYTE *)(a5 + 80) = v87;
  *(_QWORD *)(a5 + 88) = v86;
  *(_BYTE *)(a5 + 96) = v85;
  v66 = v83;
  *(_QWORD *)(a5 + 104) = v84;
  *(_QWORD *)(a5 + 112) = v66;
  v67 = sub_100007D50(&qword_1001602E8);
  sub_100007E78(v64, a5 + *(int *)(v67 + 48), &qword_100159F68);
  swift_retain(v35);
  sub_100007F38(v45, &qword_100159F68);
  sub_100007F38(v64, &qword_100159F68);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

uint64_t sub_1000FFC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  result = Text.init(_:tableName:bundle:comment:)(v3, v4, v5, v6, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  *(_QWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t sub_1000FFCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t AssociatedTypeWitness;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[25];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[25];
  char v104;

  v95 = a5;
  v92 = type metadata accessor for MusicModule(0, a3, a4, a4);
  v91 = *(_QWORD *)(v92 - 8);
  v81 = *(_QWORD *)(v91 + 64);
  __chkstk_darwin(v92);
  v88 = (char *)&v70 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &unk_100116E98, &unk_100116EC0);
  v79 = type metadata accessor for Optional(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v83 = (char *)&v70 - v10;
  v11 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100007D50(&qword_1001602E0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v90 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v89 = (char *)&v70 - v17;
  v18 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v18);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v85 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v70 - v25;
  v80 = type metadata accessor for MusicViewModel(0, a3, a4, v27);
  v86 = a2;
  sub_1000951A8(v80, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_100007F38((uint64_t)v20, &qword_100158658);
    v28 = 1;
    v29 = v95;
    v30 = v94;
    v31 = v93;
  }
  else
  {
    v87 = v22;
    v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v77 = v21;
    v32(v26, v20, v21);
    v72 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
    v71 = v33;
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
    v36 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, a3);
    v37 = a1;
    if (v36)
    {
      v74 = v36;
      v75 = v34;
    }
    else
    {
      v75 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
      v74 = v38;
    }
    v39 = AssociatedTypeWitness;
    v40 = v83;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
    v41 = *(_QWORD *)(v39 - 8);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, v39);
    v76 = (void (*)(uint64_t, char *, uint64_t))v32;
    v43 = v26;
    if (v42 == 1)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v40, v79);
      *(_QWORD *)&v98 = 0;
      v96 = 0u;
      v97 = 0u;
    }
    else
    {
      *((_QWORD *)&v97 + 1) = v39;
      *(_QWORD *)&v98 = swift_getAssociatedConformanceWitness(a4, a3, v39, &unk_100116E98, &unk_100116EB8);
      v44 = sub_10002BA68(&v96);
      (*(void (**)(_QWORD *, char *, uint64_t))(v41 + 32))(v44, v40, v39);
    }
    v45 = v81;
    v46 = v72;
    v47 = v71;
    v48 = v86;
    v49 = sub_100094E44(v37, v80);
    *(_QWORD *)&v100 = v46;
    *((_QWORD *)&v100 + 1) = v47;
    *(_QWORD *)&v101 = v75;
    *((_QWORD *)&v101 + 1) = v74;
    sub_100018EB4((uint64_t)&v96, (uint64_t)&v102, &qword_100159A38);
    v103[24] = v49 & 1;
    v98 = v102;
    *(_OWORD *)v99 = *(_OWORD *)v103;
    v96 = v100;
    v97 = v101;
    *(_OWORD *)&v99[9] = *(_OWORD *)&v103[9];
    sub_100100940((uint64_t)&v96, (uint64_t)&v100);
    v104 = 0;
    sub_10010097C((uint64_t)&v96);
    v50 = v91;
    v51 = v88;
    v52 = v48;
    v53 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v88, v52, v92);
    v54 = v87;
    v55 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
    v56 = v85;
    v73 = v43;
    v57 = v43;
    v58 = v77;
    v55(v85, v57, v77);
    v59 = *(unsigned __int8 *)(v50 + 80);
    v60 = (v59 + 32) & ~v59;
    v61 = *(unsigned __int8 *)(v54 + 80);
    v62 = (v45 + v61 + v60) & ~v61;
    v63 = swift_allocObject(&unk_100150A90, v62 + v82, v59 | v61 | 7);
    *(_QWORD *)(v63 + 16) = a3;
    *(_QWORD *)(v63 + 24) = a4;
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v63 + v60, v51, v53);
    v76(v63 + v62, v56, v58);
    v64 = sub_100007D50(&qword_1001602C0);
    v65 = sub_100100878();
    v66 = v90;
    View.onTapGesture(count:perform:)(1, sub_1001009B4, v63, v64, v65);
    swift_release(v63);
    sub_100007F38((uint64_t)&v100, &qword_1001602C0);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v73, v58);
    v31 = v93;
    v67 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
    v68 = v89;
    v30 = v94;
    v67(v89, v66, v94);
    v29 = v95;
    v67(v95, v68, v30);
    v28 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, v28, 1, v30);
}

void sub_100100360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = type metadata accessor for OpenURLAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MusicModule(0, a3, a4, v14);
  sub_100018A2C((uint64_t)v13);
  OpenURLAction.callAsFunction(_:)(a2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16 = (_QWORD *)(a1 + *(int *)(v15 + 44));
  v17 = (_QWORD *)*v16;
  if (*v16)
  {
    swift_retain(*v16);
    sub_1000952C8(a5, 0, 3u, v17);
    swift_release(v17);
  }
  else
  {
    v18 = v16[1];
    v19 = type metadata accessor for RemoteViewConfiguration();
    v20 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v18, v19, v20);
    __break(1u);
  }
}

uint64_t sub_1001004AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000FE520(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001004B8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000FF164(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_1001004CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001602A0;
  if (!qword_1001602A0)
  {
    v1 = sub_100007D00(&qword_10015BC08);
    sub_100100550();
    sub_10000F4E0(qword_10015A2B0, &qword_10015A248, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001602A0);
  }
  return result;
}

unint64_t sub_100100550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001602A8;
  if (!qword_1001602A8)
  {
    v1 = sub_100007D00(&qword_10015BC00);
    sub_100015DCC();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001602A8);
  }
  return result;
}

uint64_t sub_1001005D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for MusicModule(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v4 + v10 + *(int *)(type metadata accessor for MusicViewModel(0, v5, v6, v13) + 44);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)(v12 + v7[9]);
  v18 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v12 + v7[10]);
  v21 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  swift_release(*(_QWORD *)(v12 + v7[11]));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

uint64_t sub_100100784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MusicModule(0, v6, v7, a2) - 8) + 80);
  return sub_1000FFCB8(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_1001007EC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001602B8;
  if (!qword_1001602B8)
  {
    v1 = sub_100007D00(&qword_100160298);
    v2[0] = sub_100007D00(&qword_1001602C0);
    v2[1] = sub_100100878();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001602B8);
  }
  return result;
}

unint64_t sub_100100878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001602C8;
  if (!qword_1001602C8)
  {
    v1 = sub_100007D00(&qword_1001602C0);
    sub_1001008FC();
    sub_10000F4E0(&qword_100158D90, &qword_100158D98, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001602C8);
  }
  return result;
}

unint64_t sub_1001008FC()
{
  unint64_t result;

  result = qword_1001602D0;
  if (!qword_1001602D0)
  {
    result = swift_getWitnessTable(&unk_10010DC18, &type metadata for SongRow);
    atomic_store(result, (unint64_t *)&qword_1001602D0);
  }
  return result;
}

uint64_t sub_100100940(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SongRowViewModel(a2, a1);
  return a2;
}

uint64_t sub_10010097C(uint64_t a1)
{
  destroy for SongRowViewModel(a1);
  return a1;
}

void sub_1001009B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100100BB4(14, a2, a3, a4);
}

uint64_t sub_1001009C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for MusicModule(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v28 = *(_QWORD *)(v8 + 64);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v27 = *(_QWORD *)(v12 + 64);
  v14 = v4 + v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v4 + v10 + *(int *)(type metadata accessor for MusicViewModel(0, v5, v6, v15) + 44);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)(v14 + v7[9]);
  v18 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v14 + v7[10]);
  v21 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  v23 = v9 | v13 | 7;
  v24 = (v10 + v28 + v13) & ~v13;
  v25 = swift_release(*(_QWORD *)(v14 + v7[11]));
  (*(void (**)(uint64_t, uint64_t, __n128))(v12 + 8))(v4 + v24, v11, v25);
  return swift_deallocObject(v4, v24 + v27, v23);
}

void sub_100100BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100100BB4(12, a2, a3, a4);
}

void sub_100100BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for MusicModule(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_100100360(v4 + v9, v4 + ((v9 + v10 + v11) & ~v11), v6, v7, a1);
}

uint64_t sub_100100C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000FFC28(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100100C48(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_1001582B0);
  v4 = sub_100007D00(&qword_100160290);
  v5 = type metadata accessor for Array(255, v1);
  v6 = *(_QWORD *)(v2 + 24);
  v23 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v1, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v25 = sub_100007D00(&qword_100160298);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v7 = type metadata accessor for ForEach(255, &v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, v10);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _PaddingLayout);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = sub_100007D00(&qword_10015BC30);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = swift_getTupleTypeMetadata2(255, v3, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, v16);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for VStack(255, v17, v18);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  v21 = type metadata accessor for ModifiedContent(255, v20, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v19);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
}

uint64_t sub_100100E90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for SetlistLoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for SetlistLoadingView()
{
  return &type metadata for SetlistLoadingView;
}

uint64_t sub_100100F4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100119C60, 1);
}

uint64_t sub_100100F5C()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_1001602F0 = result;
  return result;
}

uint64_t sub_100100F78()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000033, 0x8000000100115C20);
  qword_1001602F8 = result;
  unk_100160300 = v1;
  byte_100160308 = v2 & 1;
  qword_100160310 = v3;
  return result;
}

uint64_t sub_100100FBC()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000037, 0x8000000100115C60);
  qword_100160318 = result;
  unk_100160320 = v1;
  byte_100160328 = v2 & 1;
  qword_100160330 = v3;
  return result;
}

uint64_t sub_100101000()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100115BF0);
  qword_100160338 = result;
  unk_100160340 = v1;
  byte_100160348 = v2 & 1;
  qword_100160350 = v3;
  return result;
}

uint64_t sub_100101044@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a3;
  v56 = a2;
  v57 = a1;
  v58 = a4;
  v4 = sub_100007D50(&qword_100160370);
  __chkstk_darwin(v4);
  v59 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - v7;
  v9 = sub_100007D50(&qword_100160378);
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - v13;
  v15 = type metadata accessor for Divider(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_100158C80);
  __chkstk_darwin(v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v54 - v23;
  v26 = Divider.init()(v25);
  v27 = static Edge.Set.horizontal.getter(v26);
  v28 = EdgeInsets.init(_all:)(40.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v18, v15);
  v35 = &v21[*(int *)(v19 + 36)];
  *v35 = v27;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  v36 = *(void (**)(char *, uint64_t))(v16 + 8);
  v37 = v18;
  v38 = v55;
  v39 = v56;
  v36(v37, v15);
  v40 = sub_100018EB4((uint64_t)v21, (uint64_t)v24, &qword_100158C80);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v40);
  *((_QWORD *)v14 + 1) = 0x4018000000000000;
  v14[16] = 0;
  v41 = sub_100007D50(&qword_100160380);
  LOBYTE(v19) = v57;
  sub_10010143C(v57, (uint64_t)&v14[*(int *)(v41 + 44)]);
  if ((v19 & 1) != 0)
  {
    v42 = sub_100007D50(&qword_1001603B8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v8, 1, 1, v42);
  }
  else
  {
    v43 = swift_allocObject(&unk_100150BA8, 40, 7);
    *(_BYTE *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = v39;
    *(_QWORD *)(v43 + 32) = v38;
    swift_retain(v38);
    v44 = sub_100007D50(&qword_100160388);
    v45 = sub_100101DB4();
    Button.init(action:label:)(sub_100101D94, v43, sub_100101840, 0, v44, v45);
    v46 = sub_100007D50(&qword_1001603B8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v8, 0, 1, v46);
  }
  sub_100007E78((uint64_t)v24, (uint64_t)v21, &qword_100158C80);
  sub_100007E78((uint64_t)v14, (uint64_t)v11, &qword_100160378);
  v47 = v59;
  sub_100007E78((uint64_t)v8, v59, &qword_100160370);
  v48 = (uint64_t)v24;
  v49 = (uint64_t)v8;
  v50 = (uint64_t)v11;
  v51 = v58;
  sub_100007E78((uint64_t)v21, v58, &qword_100158C80);
  v52 = sub_100007D50(&qword_1001603C0);
  sub_100007E78(v50, v51 + *(int *)(v52 + 48), &qword_100160378);
  sub_100007E78(v47, v51 + *(int *)(v52 + 64), &qword_100160370);
  sub_100007F38(v49, &qword_100160370);
  sub_100007F38((uint64_t)v14, &qword_100160378);
  sub_100007F38(v48, &qword_100158C80);
  sub_100007F38(v47, &qword_100160370);
  sub_100007F38(v50, &qword_100160378);
  return sub_100007F38((uint64_t)v21, &qword_100158C80);
}

uint64_t sub_10010143C@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];

  v51 = a2;
  v3 = sub_100007D50(&qword_100158EB8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_1001603C8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_1001603D0);
  __chkstk_darwin(v11);
  v50 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)&v49 - v15;
  v18 = &unk_100158000;
  if ((a1 & 1) != 0)
  {
    ProgressView<>.init<>()(v14);
    if (qword_100158188 != -1)
      swift_once(&qword_100158188, sub_100100F5C);
    v19 = qword_1001602F0;
    KeyPath = swift_getKeyPath(&unk_100112A78);
    v52[0] = v19;
    swift_retain_n(v19, 2);
    v21 = AnyShapeStyle.init<A>(_:)(v52, &type metadata for Color, &protocol witness table for Color);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v6, v3);
    v22 = swift_release(v19);
    v23 = (uint64_t *)&v10[*(int *)(v7 + 36)];
    *v23 = KeyPath;
    v23[1] = v21;
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v22);
    sub_100018EB4((uint64_t)v10, (uint64_t)v17, &qword_1001603C8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    if (qword_100158190 != -1)
      swift_once(&qword_100158190, sub_100100F78);
    v24 = &qword_1001602F8;
    v18 = (_QWORD *)&unk_100158000;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))((char *)&v49 - v15, 1, 1, v7, v16);
    if (qword_100158198 != -1)
      swift_once(&qword_100158198, sub_100100FBC);
    v24 = &qword_100160318;
  }
  v25 = v24[3];
  v26 = *((unsigned __int8 *)v24 + 16);
  v28 = *v24;
  v27 = v24[1];
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v25);
  v29 = Text.init(_:tableName:bundle:comment:)(v28, v27, v26, v25, 0, 0, 0, 0, 0, 256);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  if (v18[49] != -1)
    swift_once(&qword_100158188, sub_100100F5C);
  v36 = v33 & 1;
  v37 = qword_1001602F0;
  v52[0] = qword_1001602F0;
  swift_retain(qword_1001602F0);
  v38 = Text.foregroundStyle<A>(_:)(v52, v29, v31, v33 & 1, v35, &type metadata for Color, &protocol witness table for Color);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  sub_100007D90(v29, v31, v36);
  swift_release(v37);
  swift_bridgeObjectRelease();
  v45 = v50;
  sub_100007E78((uint64_t)v17, v50, &qword_1001603D0);
  v46 = v51;
  sub_100007E78(v45, v51, &qword_1001603D0);
  v47 = v46 + *(int *)(sub_100007D50(&qword_1001603D8) + 48);
  *(_QWORD *)v47 = v38;
  *(_QWORD *)(v47 + 8) = v40;
  *(_BYTE *)(v47 + 16) = v44;
  *(_QWORD *)(v47 + 24) = v42;
  sub_10000F844(v38, v40, v44);
  swift_bridgeObjectRetain(v42);
  sub_100007F38((uint64_t)v17, &qword_1001603D0);
  sub_100007D90(v38, v40, v44);
  swift_bridgeObjectRelease();
  return sub_100007F38(v45, &qword_1001603D0);
}

uint64_t sub_100101840@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[3];
  uint64_t v82;

  v61 = sub_100007D50(&qword_1001603B0);
  __chkstk_darwin(v61);
  v63 = (uint64_t)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v59);
  v60 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015A250);
  __chkstk_darwin(v4);
  v62 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001581A0 != -1)
    swift_once(&qword_1001581A0, sub_100101000);
  v6 = qword_100160338;
  v7 = unk_100160340;
  v8 = byte_100160348;
  v9 = qword_100160350;
  swift_bridgeObjectRetain(unk_100160340);
  swift_bridgeObjectRetain(v9);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v56 = v11;
  v57 = v10;
  LOBYTE(v8) = v12;
  v58 = v13;
  v14 = static Alignment.center.getter(v10);
  v16 = _FrameLayout.init(width:height:alignment:)(&v64, 0, 1, 0x403E000000000000, 0, v14, v15);
  v17 = v64;
  v18 = v65;
  v19 = v66;
  v20 = v67;
  v21 = v69;
  v55 = v68;
  v22 = static Edge.Set.horizontal.getter(v16);
  v75 = v8 & 1;
  v74 = v18;
  v73 = v20;
  v72 = 1;
  if (qword_100158188 != -1)
    swift_once(&qword_100158188, sub_100100F5C);
  v23 = qword_1001602F0;
  *(_QWORD *)&v76 = v57;
  *((_QWORD *)&v76 + 1) = v56;
  LOBYTE(v77) = v75;
  *((_QWORD *)&v77 + 1) = v58;
  *(_QWORD *)&v78 = v17;
  BYTE8(v78) = v74;
  *(_QWORD *)&v79 = v19;
  BYTE8(v79) = v73;
  *(_QWORD *)&v80 = v55;
  *((_QWORD *)&v80 + 1) = v21;
  LOBYTE(v81[0]) = v22;
  *(_OWORD *)((char *)v81 + 8) = 0u;
  *(_OWORD *)((char *)&v81[1] + 8) = 0u;
  BYTE8(v81[2]) = v72;
  v82 = qword_1001602F0;
  v24 = v60;
  v25 = &v60[*(int *)(v59 + 20)];
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  __asm { FMOV            V0.2D, #3.0 }
  *v24 = _Q0;
  swift_retain_n(v23, 2);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v70, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v33 = v62;
  sub_10000F760((uint64_t)v24, v62);
  v34 = v33 + *(int *)(sub_100007D50(&qword_10015A258) + 36);
  v35 = v70[1];
  *(_OWORD *)v34 = v70[0];
  *(_OWORD *)(v34 + 16) = v35;
  *(_QWORD *)(v34 + 32) = v71;
  v36 = sub_100007D50(&qword_10015A260);
  *(_QWORD *)(v33 + *(int *)(v36 + 52)) = v23;
  *(_WORD *)(v33 + *(int *)(v36 + 56)) = 256;
  v37 = static Alignment.center.getter(v36);
  v39 = v38;
  v40 = (uint64_t *)(v33 + *(int *)(sub_100007D50(&qword_10015A268) + 36));
  *v40 = v37;
  v40[1] = v39;
  v41 = sub_10000F854((uint64_t)v24);
  v42 = static Alignment.center.getter(v41);
  v44 = v43;
  v45 = v63;
  sub_100007E78(v33, v63, &qword_10015A250);
  v46 = (uint64_t *)(v45 + *(int *)(v61 + 36));
  *v46 = v42;
  v46[1] = v44;
  v47 = sub_100007D50(&qword_100160388);
  sub_100007E78(v45, a1 + *(int *)(v47 + 36), &qword_1001603B0);
  v48 = v81[0];
  v49 = v81[2];
  *(_OWORD *)(a1 + 96) = v81[1];
  *(_OWORD *)(a1 + 112) = v49;
  v50 = v77;
  v51 = v79;
  v52 = v80;
  *(_OWORD *)(a1 + 32) = v78;
  *(_OWORD *)(a1 + 48) = v51;
  *(_QWORD *)(a1 + 128) = v82;
  *(_OWORD *)(a1 + 64) = v52;
  *(_OWORD *)(a1 + 80) = v48;
  *(_OWORD *)a1 = v76;
  *(_OWORD *)(a1 + 16) = v50;
  sub_1000D0DB8((uint64_t)&v76);
  sub_100007F38(v45, &qword_1001603B0);
  sub_100007F38(v33, &qword_10015A250);
  return sub_1000D0E08((uint64_t)&v76);
}

uint64_t sub_100101C60@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD v17[3];

  v3 = sub_100007D50(&qword_100160358);
  __chkstk_darwin(v3);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v7 = *((_QWORD *)v1 + 2);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v5 + 1) = 0x4035000000000000;
  v5[16] = 0;
  v10 = sub_100007D50(&qword_100160360);
  v11 = sub_100101044(v6, v8, v7, (uint64_t)&v5[*(int *)(v10 + 44)]);
  v12 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(v17, 0, 1, 0x405E000000000000, 0, v12, v13);
  sub_100007E78((uint64_t)v5, a1, &qword_100160358);
  v14 = (_OWORD *)(a1 + *(int *)(sub_100007D50(&qword_100160368) + 36));
  v15 = v17[1];
  *v14 = v17[0];
  v14[1] = v15;
  v14[2] = v17[2];
  return sub_100007F38((uint64_t)v5, &qword_100160358);
}

uint64_t sub_100101D70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100101D94()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

unint64_t sub_100101DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160390;
  if (!qword_100160390)
  {
    v1 = sub_100007D00(&qword_100160388);
    sub_100101E38();
    sub_10000F4E0(&qword_1001603A8, &qword_1001603B0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160390);
  }
  return result;
}

unint64_t sub_100101E38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100160398;
  if (!qword_100160398)
  {
    v1 = sub_100007D00(&qword_1001603A0);
    sub_1000AA270();
    sub_10000F4E0(&qword_100158618, &qword_100158620, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100160398);
  }
  return result;
}

uint64_t sub_100101EBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100101EE4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

unint64_t sub_100101F10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001603E0;
  if (!qword_1001603E0)
  {
    v1 = sub_100007D00(&qword_100160368);
    sub_10000F4E0(qword_1001603E8, &qword_100160358, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001603E0);
  }
  return result;
}

void sub_100101F94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[12];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v15[0] = *(_QWORD *)(v2 - 8) + 64;
    v15[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v15[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = *(_QWORD *)(a1 + 88);
    v5 = type metadata accessor for Optional(255);
    v6 = type metadata accessor for Published(319, v5);
    if (v7 <= 0x3F)
    {
      v15[3] = *(_QWORD *)(v6 - 8) + 64;
      v8 = type metadata accessor for Array(255, v4);
      v9 = type metadata accessor for Published(319, v8);
      if (v10 <= 0x3F)
      {
        v15[4] = *(_QWORD *)(v9 - 8) + 64;
        sub_100022780(319, &qword_100160470, (uint64_t)&type metadata for Tab);
        if (v12 <= 0x3F)
        {
          v15[5] = *(_QWORD *)(v11 - 8) + 64;
          sub_100022780(319, (unint64_t *)&qword_100159230, (uint64_t)&type metadata for Bool);
          if (v14 <= 0x3F)
          {
            v15[6] = *(_QWORD *)(v13 - 8) + 64;
            v15[7] = (char *)&value witness table for Builtin.NativeObject + 64;
            v15[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
            v15[9] = " ";
            v15[10] = " ";
            v15[11] = " ";
            swift_initClassMetadata2(a1, 0, 12, v15, a1 + 112);
          }
        }
      }
    }
  }
}

uint64_t sub_1001020EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 96) + 48))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_100102120@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v4, &unk_100117714, &unk_100117734);
  v6 = type metadata accessor for Optional(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 56))(v4, v3, v8);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    v14 = sub_100102E84();
    v15 = sub_100102E84();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_100117714, &unk_10011772C);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v14, v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v10, AssociatedTypeWitness);
  }
}

uint64_t sub_1001022C4()
{
  return sub_100102D98(1);
}

BOOL sub_1001022CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t WitnessTable;

  v1 = type metadata accessor for Array(0, *(_QWORD *)(*(_QWORD *)v0 + 88));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
  return (Collection.isEmpty.getter(v1, WitnessTable) & 1) == 0;
}

_QWORD *sub_100102334(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;

  v3 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
  swift_bridgeObjectRetain_n(v3, 2);
  v4 = sub_1000B9FFC(v3);
  swift_bridgeObjectRelease();
  v19 = v4;
  sub_1001038A8((uint64_t *)&v19);
  swift_bridgeObjectRelease();
  v5 = v19;
  v6 = _swiftEmptyArrayStorage;
  if (*(_QWORD *)(v3 + 16) == 1)
  {
    if ((a1 & 1) == 0)
      goto LABEL_3;
LABEL_10:
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_10008A160(0, v6[2] + 1, 1, v6);
    v17 = v6[2];
    v16 = v6[3];
    if (v17 >= v16 >> 1)
      v6 = sub_10008A160((_QWORD *)(v16 > 1), v17 + 1, 1, v6);
    v6[2] = v17 + 1;
    *(_OWORD *)&v6[2 * v17 + 4] = xmmword_100112AB0;
    v7 = v5[2];
    if (v7)
      goto LABEL_4;
LABEL_15:
    swift_release(v5);
    v8 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  v15 = sub_100007D50(&qword_10015CAB8);
  v6 = (_QWORD *)swift_allocObject(v15, 48, 7);
  *((_OWORD *)v6 + 1) = xmmword_100109020;
  v6[4] = 0;
  v6[5] = 0;
  if ((a1 & 1) != 0)
    goto LABEL_10;
LABEL_3:
  v7 = v5[2];
  if (!v7)
    goto LABEL_15;
LABEL_4:
  v19 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v6);
  sub_1000F1578(0, v7, 0);
  v8 = v19;
  v9 = v5 + 5;
  do
  {
    v11 = *(v9 - 1);
    v10 = *v9;
    v19 = v8;
    v13 = v8[2];
    v12 = v8[3];
    swift_bridgeObjectRetain(v10);
    if (v13 >= v12 >> 1)
    {
      sub_1000F1578(v12 > 1, v13 + 1, 1);
      v8 = v19;
    }
    v9 += 2;
    v8[2] = v13 + 1;
    v14 = &v8[2 * v13];
    v14[4] = v11;
    v14[5] = v10;
    --v7;
  }
  while (v7);
  swift_release(v5);
  swift_bridgeObjectRelease();
LABEL_16:
  v19 = v6;
  sub_1000BA880((uint64_t)v8);
  return v19;
}

uint64_t sub_100102558()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100112C58);
  v2 = swift_getKeyPath(&unk_100112C90);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1001025F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = *v2;
  v4 = type metadata accessor for MainActor(0);
  v3[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[8] = v6;
  v3[9] = v7;
  return swift_task_switch(sub_10010266C, v6, v7);
}

uint64_t sub_10010266C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 32);
  sub_100040BE8();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = (_QWORD *)swift_task_alloc(dword_100160484);
      *(_QWORD *)(v0 + 80) = v2;
      *v2 = v0;
      v2[1] = sub_1001027F8;
      return sub_100103028();
    }
    v6 = *(_QWORD **)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 24);
    swift_release(*(_QWORD *)(v0 + 56));
    v10 = *(_QWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 120));
    *(_QWORD *)(v0 + 16) = v10;
    v11 = (_QWORD *)swift_task_alloc(64);
    v11[2] = v6[10];
    v12 = v6[11];
    v11[3] = v12;
    v11[4] = v6[12];
    v11[5] = v6[13];
    v11[6] = v9;
    v11[7] = v8;
    v13 = type metadata accessor for Array(0, v12);
    swift_bridgeObjectRetain(v10);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
    v15 = _ArrayProtocol.filter(_:)(sub_1001045E4, v11, v13, WitnessTable);
    swift_task_dealloc(v11);
    v5 = v15;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 40);
    swift_release(*(_QWORD *)(v0 + 56));
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 120)));
  }
  sub_100102EE4(v5);
  v16 = *(_QWORD *)(v0 + 32);
  v17 = *(_QWORD *)(v0 + 24);
  sub_10008DDF8(v17, v16);
  sub_100102F84(v17, v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001027F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  *(_QWORD *)(*(_QWORD *)v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[8];
    v7 = v4[9];
    v8 = sub_1001028D4;
  }
  else
  {
    v4[12] = a1;
    v6 = v4[8];
    v7 = v4[9];
    v8 = sub_10010286C;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_10010286C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 56));
  sub_100102EE4(v1);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 24);
  sub_10008DDF8(v3, v2);
  sub_100102F84(v3, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001028D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100102910(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  ValueWitnessTable *v24;
  uint64_t v25;
  char *v26;
  NSString v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void **aBlock;
  uint64_t v33;
  Class (*v34)(uint64_t);
  ValueMetadata *v35;
  _QWORD *(*v36)();
  _QWORD *v37;
  char *v38;

  v11 = *v5;
  v12 = sub_100007D50(&qword_100159260);
  v13 = swift_allocObject(v12, 192, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100109440;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v11 + 96) + 40))(*(_QWORD *)(v11 + 80));
  *(_QWORD *)(v13 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v13 + 64) = &off_10015BAD8;
  *(_BYTE *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v13 + 104) = &off_10015BAB0;
  *(_BYTE *)(v13 + 72) = 2;
  *(_QWORD *)(v13 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v13 + 144) = &off_10015BB38;
  *(_BYTE *)(v13 + 112) = a1;
  *(_QWORD *)(v13 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v13 + 184) = &off_10015BB10;
  *(_QWORD *)(v13 + 152) = a2;
  *(_QWORD *)(v13 + 160) = a3;
  *(_BYTE *)(v13 + 168) = a4;
  v16 = *(_QWORD *)(a5 + 72);
  if (v16)
  {
    v17 = *(_QWORD *)(a5 + 64);
    v18 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
  }
  v35 = &type metadata for AnalyticsString;
  v36 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v33 = v17;
  v34 = (Class (*)(uint64_t))v18;
  sub_1000227F8(a2, a3, a4);
  v38 = (char *)v13;
  v19 = *(_QWORD *)(v13 + 16);
  v20 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v16);
  if (v19 >= v20 >> 1)
    v38 = sub_100089D00((char *)(v20 > 1), v19 + 1, 1, (char *)v13);
  v21 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v21);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v24->initializeWithCopy)((uint64_t)v23, v25);
  sub_10008A6F0(v19, (uint64_t)v23, (uint64_t *)&v38, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v26 = v38;
  v27 = String._bridgeToObjectiveC()();
  v28 = (_QWORD *)swift_allocObject(&unk_100150CC8, 40, 7);
  v28[2] = 0xD00000000000001ELL;
  v28[3] = 0x80000001001131B0;
  v28[4] = v26;
  v36 = sub_100022948;
  v37 = v28;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_100089C8C;
  v35 = (ValueMetadata *)&unk_100150CE0;
  v29 = _Block_copy(&aBlock);
  v30 = v37;
  swift_bridgeObjectRetain(v26);
  swift_release(v30);
  AnalyticsSendEventLazy(v27, v29);
  _Block_release(v29);
  swift_bridgeObjectRelease();

}

uint64_t sub_100102BBC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100112C00);
  v2 = swift_getKeyPath(&unk_100112C38);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100102C58()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_100112BA8);
  v2 = swift_getKeyPath(&unk_100112BE0);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100102CFC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unsigned __int8 v4;

  KeyPath = swift_getKeyPath(&unk_100112B50);
  v2 = swift_getKeyPath(&unk_100112B88);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100102D98(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  KeyPath = swift_getKeyPath(&unk_100112B50);
  v4 = swift_getKeyPath(&unk_100112B88);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_100102E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 96) + 40))(*(_QWORD *)(*(_QWORD *)v1 + 80));
  sub_10008AB1C(v3, v4, 2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100102E84()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == (id)1)
    return 200;
  else
    return 100;
}

uint64_t sub_100102EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100112C00);
  v4 = swift_getKeyPath(&unk_100112C38);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_100102F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_100112C58);
  v6 = swift_getKeyPath(&unk_100112C90);
  v8[0] = a1;
  v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

uint64_t sub_100103028()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[3] = v0;
  v1[4] = *v0;
  v2 = type metadata accessor for MainActor(0);
  v1[5] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[6] = v4;
  v1[7] = v5;
  return swift_task_switch(sub_10010309C, v4, v5);
}

uint64_t sub_10010309C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10015A1BC);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1001030F0;
  return sub_100040930();
}

uint64_t sub_1001030F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 64);
  *(_QWORD *)(v6 + 72) = a1;
  *(_QWORD *)(v6 + 80) = a2;
  *(_QWORD *)(v6 + 88) = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    v8 = *(_QWORD *)(v6 + 48);
    v9 = *(_QWORD *)(v6 + 56);
    v10 = sub_10010327C;
  }
  else
  {
    *(_BYTE *)(v6 + 96) = a3;
    v8 = *(_QWORD *)(v6 + 48);
    v9 = *(_QWORD *)(v6 + 56);
    v10 = sub_100103170;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100103170()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;

  v1 = *(_BYTE *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 40));
  if ((v1 & 1) != 0)
  {
    v10 = static Array._allocateUninitialized(_:)(0, *(_QWORD *)(*(_QWORD *)(v0 + 32) + 88));
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + *(_QWORD *)(**(_QWORD **)(v0 + 24) + 120));
    *(_QWORD *)(v0 + 16) = v2;
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD **)(v0 + 32);
    v6 = (_QWORD *)swift_task_alloc(64);
    v6[2] = v5[10];
    v7 = v5[11];
    v6[3] = v7;
    v6[4] = v5[12];
    v6[5] = v5[13];
    v6[6] = v4;
    v6[7] = v3;
    v8 = type metadata accessor for Array(0, v7);
    swift_bridgeObjectRetain(v2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
    v10 = _ArrayProtocol.filter(_:)(sub_100104608, v6, v8, WitnessTable);
    swift_task_dealloc(v6);
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_10010327C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001032B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a3;
  v30 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7, a5, &unk_10011790C, &unk_10011797C);
  v10 = type metadata accessor for Optional(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 216))(a5, a7);
  v32 = v14;
  v15 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  Collection.first.getter(v15, WitnessTable);
  swift_bridgeObjectRelease(v14);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v18 = 0;
  }
  else
  {
    v20 = v30;
    v19 = v31;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a5, AssociatedTypeWitness, &unk_10011790C, &unk_10011795C);
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, AssociatedTypeWitness);
    if (v22)
    {
      v23 = objc_msgSend(v22, "country");

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      if (v24 == v20 && v26 == v19)
      {
        swift_bridgeObjectRelease(v19);
        v18 = 1;
      }
      else
      {
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v20, v19, 0);
        swift_bridgeObjectRelease(v26);
      }
    }
    else
    {
      v18 = 0;
    }
  }
  return v18 & 1;
}

BOOL sub_1001034C0(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;
  double v27;
  double v28;
  _QWORD v29[8];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7, a5, &unk_10011790C, &unk_10011797C);
  v12 = type metadata accessor for Optional(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v29 - v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 216))(a5, a7);
  v29[7] = v16;
  v17 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v17);
  Collection.first.getter(v17, WitnessTable);
  swift_bridgeObjectRelease(v16);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a5, AssociatedTypeWitness, &unk_10011790C, &unk_10011795C);
    v22 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, AssociatedTypeWitness);
    v25 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v22, v24);
    v26 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", a1, a2);
    objc_msgSend(v26, "distanceFromLocation:", v25);
    v28 = v27;

    return v28 <= 161000.0;
  }
}

uint64_t *sub_1001036CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = type metadata accessor for Optional(255);
  v5 = type metadata accessor for Published(0, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  v6 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v7 = type metadata accessor for Array(255, v3);
  v8 = type metadata accessor for Published(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  v10 = sub_100007D50(&qword_10015ADD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  v12 = sub_100007D50(&qword_100159248);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 168)));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100103878()
{
  uint64_t v0;

  sub_1001036CC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for ArtistEventViewModel(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ArtistEventViewModel);
}

Swift::Int sub_1001038A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1000BC7EC(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100103910(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100103910(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD *v107;
  Swift::Int v108;
  Swift::Int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_133;
    if (v3)
      return sub_100104034(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_141;
  v108 = result;
  v116 = v1;
  v105 = a1;
  if (v3 < 2)
  {
    v8 = (char *)_swiftEmptyArrayStorage;
    v110 = (char *)&_swiftEmptyArrayStorage[4];
    v107 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
LABEL_99:
      if (v11 >= 2)
      {
        v98 = *v105;
        do
        {
          v99 = v11 - 2;
          if (v11 < 2)
            goto LABEL_128;
          if (!v98)
            goto LABEL_140;
          v100 = *(_QWORD *)&v8[16 * v99 + 32];
          v101 = *(_QWORD *)&v8[16 * v11 + 24];
          v102 = v116;
          sub_100104128((char *)(v98 + 16 * v100), (char *)(v98 + 16 * *(_QWORD *)&v8[16 * v11 + 16]), v98 + 16 * v101, v110);
          v116 = v102;
          if (v102)
            break;
          if (v101 < v100)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_1000BC13C((uint64_t)v8);
          if (v99 >= *((_QWORD *)v8 + 2))
            goto LABEL_130;
          v103 = &v8[16 * v99 + 32];
          *(_QWORD *)v103 = v100;
          *((_QWORD *)v103 + 1) = v101;
          v104 = *((_QWORD *)v8 + 2);
          if (v11 > v104)
            goto LABEL_131;
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v104 - v11));
          *((_QWORD *)v8 + 2) = v104 - 1;
          v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      v107[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v107 = (_QWORD *)v7;
    v110 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v106 = *a1 + 24;
  v8 = (char *)_swiftEmptyArrayStorage;
  v109 = v3;
LABEL_15:
  v12 = v9++;
  if (v9 >= v3)
    goto LABEL_32;
  v13 = (uint64_t *)(v10 + 16 * v9);
  v15 = *v13;
  v14 = v13[1];
  v16 = (uint64_t *)(v10 + 16 * v12);
  v18 = *v16;
  v17 = v16[1];
  v114 = v15;
  v115 = v14;
  v112 = v18;
  v113 = v17;
  v19 = sub_10001DB0C();
  v20 = StringProtocol.localizedStandardCompare<A>(_:)(&v112, &type metadata for String, &type metadata for String, v19, v19);
  v9 = v12 + 2;
  if (v12 + 2 >= v3)
    goto LABEL_21;
  v21 = (_QWORD *)(v106 + 16 * v12);
  v22 = v21;
  do
  {
    v23 = v22[2];
    v22 += 2;
    v24 = v21[1];
    v26 = *(v21 - 1);
    v25 = *v21;
    v114 = v24;
    v115 = v23;
    v112 = v26;
    v113 = v25;
    if ((v20 == -1) == (StringProtocol.localizedStandardCompare<A>(_:)(&v112, &type metadata for String, &type metadata for String, v19, v19) != -1))
    {
      v3 = v109;
      if (v20 == -1)
        goto LABEL_24;
LABEL_32:
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v12))
          goto LABEL_132;
        if (v9 - v12 < v108)
        {
          if (__OFADD__(v12, v108))
            goto LABEL_134;
          if (v12 + v108 >= v3)
            v34 = v3;
          else
            v34 = v12 + v108;
          if (v34 < v12)
          {
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
          if (v9 != v34)
          {
            v35 = sub_10001DB0C();
            v36 = (_QWORD *)(v10 + 16 * v9);
            do
            {
              v37 = (uint64_t *)(v10 + 16 * v9);
              v38 = *v37;
              v39 = v37[1];
              v40 = v12;
              v41 = v36;
              do
              {
                v42 = *(v41 - 2);
                v43 = *(v41 - 1);
                v114 = v38;
                v115 = v39;
                v112 = v42;
                v113 = v43;
                if (StringProtocol.localizedStandardCompare<A>(_:)(&v112, &type metadata for String, &type metadata for String, v35, v35) != -1)break;
                if (!v10)
                  goto LABEL_137;
                v38 = *v41;
                v39 = v41[1];
                *(_OWORD *)v41 = *((_OWORD *)v41 - 1);
                *(v41 - 1) = v39;
                *(v41 - 2) = v38;
                v41 -= 2;
                ++v40;
              }
              while (v9 != v40);
              ++v9;
              v36 += 2;
            }
            while (v9 != v34);
            v9 = v34;
          }
        }
      }
      if (v9 < v12)
        goto LABEL_127;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1000BBE90(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v45 = *((_QWORD *)v8 + 2);
      v44 = *((_QWORD *)v8 + 3);
      v11 = v45 + 1;
      if (v45 >= v44 >> 1)
        v8 = sub_1000BBE90((char *)(v44 > 1), v45 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v11;
      v111 = v8 + 32;
      v46 = &v8[16 * v45 + 32];
      *(_QWORD *)v46 = v12;
      *((_QWORD *)v46 + 1) = v9;
      if (v45)
      {
        v47 = v8 + 32;
        while (1)
        {
          v48 = v11 - 1;
          if (v11 >= 4)
          {
            v53 = &v47[16 * v11];
            v54 = *((_QWORD *)v53 - 8);
            v55 = *((_QWORD *)v53 - 7);
            v59 = __OFSUB__(v55, v54);
            v56 = v55 - v54;
            if (v59)
              goto LABEL_116;
            v58 = *((_QWORD *)v53 - 6);
            v57 = *((_QWORD *)v53 - 5);
            v59 = __OFSUB__(v57, v58);
            v51 = v57 - v58;
            v52 = v59;
            if (v59)
              goto LABEL_117;
            v60 = v11 - 2;
            v61 = &v47[16 * v11 - 32];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v59 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v59)
              goto LABEL_119;
            v59 = __OFADD__(v51, v64);
            v65 = v51 + v64;
            if (v59)
              goto LABEL_122;
            if (v65 >= v56)
            {
              v83 = &v47[16 * v48];
              v85 = *(_QWORD *)v83;
              v84 = *((_QWORD *)v83 + 1);
              v59 = __OFSUB__(v84, v85);
              v86 = v84 - v85;
              if (v59)
                goto LABEL_126;
              v76 = v51 < v86;
              goto LABEL_87;
            }
          }
          else
          {
            if (v11 != 3)
            {
              v77 = *((_QWORD *)v8 + 4);
              v78 = *((_QWORD *)v8 + 5);
              v59 = __OFSUB__(v78, v77);
              v70 = v78 - v77;
              v71 = v59;
              goto LABEL_81;
            }
            v50 = *((_QWORD *)v8 + 4);
            v49 = *((_QWORD *)v8 + 5);
            v59 = __OFSUB__(v49, v50);
            v51 = v49 - v50;
            v52 = v59;
          }
          if ((v52 & 1) != 0)
            goto LABEL_118;
          v60 = v11 - 2;
          v66 = &v47[16 * v11 - 32];
          v68 = *(_QWORD *)v66;
          v67 = *((_QWORD *)v66 + 1);
          v69 = __OFSUB__(v67, v68);
          v70 = v67 - v68;
          v71 = v69;
          if (v69)
            goto LABEL_121;
          v72 = &v47[16 * v48];
          v74 = *(_QWORD *)v72;
          v73 = *((_QWORD *)v72 + 1);
          v59 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          if (v59)
            goto LABEL_124;
          if (__OFADD__(v70, v75))
            goto LABEL_125;
          if (v70 + v75 >= v51)
          {
            v76 = v51 < v75;
LABEL_87:
            if (v76)
              v48 = v60;
            goto LABEL_89;
          }
LABEL_81:
          if ((v71 & 1) != 0)
            goto LABEL_120;
          v79 = &v47[16 * v48];
          v81 = *(_QWORD *)v79;
          v80 = *((_QWORD *)v79 + 1);
          v59 = __OFSUB__(v80, v81);
          v82 = v80 - v81;
          if (v59)
            goto LABEL_123;
          if (v82 < v70)
            goto LABEL_14;
LABEL_89:
          v87 = v48 - 1;
          if (v48 - 1 >= v11)
          {
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          v88 = v10;
          if (!v10)
            goto LABEL_138;
          v89 = v8;
          v90 = &v47[16 * v87];
          v91 = v47;
          v92 = *(_QWORD *)v90;
          v93 = &v91[16 * v48];
          v94 = *((_QWORD *)v93 + 1);
          v95 = v88;
          v96 = v116;
          sub_100104128((char *)(v88 + 16 * *(_QWORD *)v90), (char *)(v88 + 16 * *(_QWORD *)v93), v88 + 16 * v94, v110);
          v116 = v96;
          if (v96)
            goto LABEL_110;
          if (v94 < v92)
            goto LABEL_113;
          if (v48 > *((_QWORD *)v89 + 2))
            goto LABEL_114;
          *(_QWORD *)v90 = v92;
          v47 = v111;
          *(_QWORD *)&v111[16 * v87 + 8] = v94;
          v97 = *((_QWORD *)v89 + 2);
          if (v48 >= v97)
            goto LABEL_115;
          v8 = v89;
          v11 = v97 - 1;
          memmove(v93, v93 + 16, 16 * (v97 - 1 - v48));
          *((_QWORD *)v89 + 2) = v97 - 1;
          v10 = v95;
          if (v97 <= 2)
            goto LABEL_14;
        }
      }
      v11 = 1;
LABEL_14:
      v3 = v109;
      if (v9 >= v109)
        goto LABEL_99;
      goto LABEL_15;
    }
    ++v9;
    v21 = v22;
    v3 = v109;
  }
  while (v109 != v9);
  v9 = v109;
LABEL_21:
  if (v20 != -1)
    goto LABEL_32;
LABEL_24:
  if (v9 >= v12)
  {
    if (v12 < v9)
    {
      v27 = 16 * v9;
      v28 = 16 * v12;
      v29 = v9;
      v30 = v12;
      while (1)
      {
        if (v30 != --v29)
        {
          if (!v10)
            goto LABEL_139;
          v31 = v10 + v27;
          v32 = *(_QWORD *)(v10 + v28);
          v33 = *(_QWORD *)(v10 + v28 + 8);
          *(_OWORD *)(v10 + v28) = *(_OWORD *)(v10 + v27 - 16);
          *(_QWORD *)(v31 - 16) = v32;
          *(_QWORD *)(v31 - 8) = v33;
        }
        ++v30;
        v27 -= 16;
        v28 += 16;
        if (v30 >= v29)
          goto LABEL_32;
      }
    }
    goto LABEL_32;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100104034(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  uint64_t v17;

  v17 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = sub_10001DB0C();
    v7 = (_QWORD *)(v5 + 16 * v4);
LABEL_5:
    v8 = (uint64_t *)(v5 + 16 * v4);
    v9 = *v8;
    v10 = v8[1];
    v11 = v17;
    v12 = v7;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v16[2] = v9;
      v16[3] = v10;
      v16[0] = v13;
      v16[1] = v14;
      result = StringProtocol.localizedStandardCompare<A>(_:)(v16, &type metadata for String, &type metadata for String, v6, v6);
      if (result != -1)
      {
LABEL_4:
        ++v4;
        v7 += 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v9 = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = v9;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100104128(char *__src, char *a2, unint64_t a3, char *a4)
{
  char *v5;
  char *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;

  v5 = a2;
  v6 = __src;
  v7 = a2 - __src;
  v8 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v8 = a2 - __src;
  v9 = v8 >> 4;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 4;
  v36 = __src;
  v35 = a4;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (a4 != a2 || &a2[16 * v12] <= a4)
        memmove(a4, a2, 16 * v12);
      v19 = &a4[16 * v12];
      v34 = v19;
      v36 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        v20 = sub_10001DB0C();
        v21 = (char *)(a3 - 16);
        v22 = v5;
        do
        {
          v23 = v21 + 16;
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v22 - 2);
          v26 = *((_QWORD *)v22 - 1);
          v22 -= 16;
          v32 = *((_QWORD *)v19 - 2);
          v33 = v24;
          v30 = v25;
          v31 = v26;
          if (StringProtocol.localizedStandardCompare<A>(_:)(&v30, &type metadata for String, &type metadata for String, v20, v20) == -1)
          {
            if (v23 != v5 || v21 >= v5)
              *(_OWORD *)v21 = *(_OWORD *)v22;
            v36 = v22;
          }
          else
          {
            v34 = v19 - 16;
            if (v23 < v19 || v21 >= v19 || v23 != v19)
              *(_OWORD *)v21 = *((_OWORD *)v19 - 1);
            v22 = v5;
            v19 -= 16;
          }
          if (v22 <= v6)
            break;
          v21 -= 16;
          v5 = v22;
        }
        while (v19 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v7 >= -15)
  {
    v13 = a4;
    if (a4 != __src || &__src[16 * v9] <= a4)
      memmove(a4, __src, 16 * v9);
    v34 = &a4[16 * v9];
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      v14 = sub_10001DB0C();
      do
      {
        v15 = *((_QWORD *)v5 + 1);
        v16 = *(_QWORD *)v13;
        v17 = *((_QWORD *)v13 + 1);
        v32 = *(_QWORD *)v5;
        v33 = v15;
        v30 = v16;
        v31 = v17;
        if (StringProtocol.localizedStandardCompare<A>(_:)(&v30, &type metadata for String, &type metadata for String, v14, v14) == -1)
        {
          v18 = v5 + 16;
          if (v6 < v5 || v6 >= v18 || v6 != v5)
            *(_OWORD *)v6 = *(_OWORD *)v5;
        }
        else
        {
          if (v6 != v13)
            *(_OWORD *)v6 = *(_OWORD *)v13;
          v13 += 16;
          v35 = v13;
          v18 = v5;
        }
        v6 += 16;
        if (v13 >= &a4[16 * v9])
          break;
        v5 = v18;
      }
      while ((unint64_t)v18 < a3);
      v36 = v6;
    }
LABEL_43:
    sub_1000BC094((void **)&v36, (const void **)&v35, &v34);
    return 1;
  }
  v28 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100104404()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100104430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100104440(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100104450()
{
  return 32;
}

__n128 sub_10010445C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100104468(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v5 = type metadata accessor for Optional(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v15 - v7;
  v16 = v3[10];
  v9 = v16;
  v17 = v4;
  v11 = v3[13];
  v18 = v3[12];
  v10 = v18;
  v19 = v11;
  KeyPath = swift_getKeyPath(&unk_100112BA8);
  v15[0] = v9;
  v15[1] = v4;
  v15[2] = v10;
  v15[3] = v11;
  v13 = swift_getKeyPath(&unk_100112BE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain(v1);
  return static Published.subscript.setter(v8, v1, KeyPath, v13);
}

uint64_t sub_100104564()
{
  return 32;
}

__n128 sub_100104570(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10010457C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100102BBC();
  *a1 = result;
  return result;
}

uint64_t sub_1001045A4(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain(*a1);
  return sub_100102EE4(v1);
}

uint64_t sub_1001045CC()
{
  return 32;
}

__n128 sub_1001045D8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1001045E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001032B0(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]) & 1;
}

BOOL sub_100104608(uint64_t a1)
{
  uint64_t v1;

  return sub_1001034C0(*(double *)(v1 + 48), *(double *)(v1 + 56), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10010462C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100102558();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100104654(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  sub_10008DDF8(*a1, v2);
  return sub_100102F84(v1, v2);
}

uint64_t sub_100104694()
{
  return 32;
}

__n128 sub_1001046A0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1001046AC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100104718(v0, qword_10016A5B0);
  sub_100029E7C(v0, (uint64_t)qword_10016A5B0);
  return Logger.init(subsystem:category:)(0xD000000000000021, 0x8000000100115D20, 1701998435, 0xE400000000000000);
}

uint64_t *sub_100104718(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100104758()
{
  return sub_100007428((unint64_t *)&qword_10015BE60, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&unk_10010C400);
}

uint64_t sub_100104784(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[5];
  uint64_t v20;

  v20 = (*(uint64_t (**)(void))(a2 + 40))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &unk_100119D18, &unk_100119D30);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_100119D18, &unk_100119D20);
  v6 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v6);
  v8 = Array.init<A>(_:)(&v20, AssociatedTypeWitness, v6, WitnessTable);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v9 = Array.init<A>(_:)(&v20, AssociatedTypeWitness, v6, WitnessTable);
  v10 = static Array.+ infix(_:_:)(v8, v9, AssociatedTypeWitness);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  v20 = v10;
  v19[2] = a1;
  v19[3] = a2;
  v11 = type metadata accessor for Array(0, AssociatedTypeWitness);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for [A], v11);
  v14 = sub_100104BB4((void (*)(char *, char *))sub_100104F5C, (uint64_t)v19, v11, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v12, (uint64_t)&protocol witness table for Never, v13);
  swift_bridgeObjectRelease(v10);
  v20 = v14;
  v15 = sub_100007D50(&qword_10015F8A8);
  v16 = sub_1000ED948();
  v17 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v15, v16);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t sub_100104958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, &unk_100119D18, &unk_100119D30);
  v6 = type metadata accessor for Optional(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_100119D18, &unk_100119D20);
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100117714, &unk_100117734);
  v12 = type metadata accessor for Optional(0);
  v25 = *(_QWORD *)(v12 - 8);
  v26 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v25 - v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 40))(a1, a2, v13);
  v28 = v16;
  v17 = type metadata accessor for Set(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v17);
  Collection.first.getter(v17, WitnessTable);
  swift_bridgeObjectRelease(v16);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_5:
    v22 = (_OWORD *)v27;
    *(_QWORD *)(v27 + 32) = 0;
    *v22 = 0u;
    v22[1] = 0u;
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, AssociatedTypeWitness);
  v21 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v11) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v26);
    goto LABEL_5;
  }
  v23 = (_QWORD *)v27;
  *(_QWORD *)(v27 + 24) = v11;
  v23[4] = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_100117714, &unk_10011772C);
  v24 = sub_10002BA68(v23);
  return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v21 + 32))(v24, v15, v11);
}

uint64_t sub_100104BB4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t result;
  Swift::Int v30;
  void (*v31)(_BYTE *, _QWORD);
  void (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v40 = a5;
  v41 = a8;
  v48 = a1;
  v49 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8), v14, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = __chkstk_darwin(AssociatedTypeWitness);
  v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_getAssociatedTypeWitness(0, a6, a3, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v42 = *(_QWORD *)(v22 - 8);
  v43 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v39 - v23;
  v25 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v25)
    return static Array._allocateUninitialized(_:)(0, a4);
  v46 = AssociatedTypeWitness;
  v26 = v8;
  v27 = a4;
  v28 = v25;
  v54 = ContiguousArray.init()(v27);
  v44 = type metadata accessor for ContiguousArray(0, v27);
  ContiguousArray.reserveCapacity(_:)(v28);
  v47 = v26;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v28 & 0x8000000000000000) == 0)
  {
    v30 = v28;
    v45 = v21;
    while (v30)
    {
      v51 = v30;
      v31 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v24, a3, a6);
      v32 = *(void (**)(char *))(v16 + 16);
      v33 = v16;
      v34 = v46;
      v32(v19);
      v31(v53, 0);
      v35 = v24;
      v36 = v19;
      v37 = v45;
      v38 = v52;
      v48(v36, v50);
      if (v38)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
        swift_release(v54);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v50, v40);
      }
      v52 = 0;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
      ContiguousArray.append(_:)(v37, v44);
      result = dispatch thunk of Collection.formIndex(after:)(v35, a3, a6);
      v30 = v51 - 1;
      v16 = v33;
      v19 = v36;
      v24 = v35;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
        return v54;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100104EAC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, &unk_100119D18, &unk_100119D30);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_100119D18, &unk_100119D20);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  result = v8(v9, AssociatedConformanceWitness);
  *a3 = result;
  a3[1] = v11;
  return result;
}

uint64_t sub_100104F5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100104EAC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100104F78()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC15ShazamEventsAppP33_5EB3C25F27294882C08F056C44F069BF19ResourceBundleClass);
}

