void type metadata accessor for ASCAppState(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001581B0, (uint64_t)&unk_100147F80);
}

void type metadata accessor for EKEventEditViewAction(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001581B8, (uint64_t)&unk_100147FA8);
}

__n128 initializeWithTake for ViewModulesConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001581C0, (uint64_t)&unk_100148020);
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier.Size(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001581C8, (uint64_t)&unk_1001480A0);
}

uint64_t sub_100006198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;

  v43 = a2;
  v3 = sub_100007D00(&qword_1001582B0);
  v4 = *(_QWORD *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 24);
  v41 = v4;
  v6 = type metadata accessor for CalendarModule(255, v4, v40, v5);
  v7 = sub_100007D00(&qword_1001582B8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v6, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, WitnessTable);
  v12 = swift_getTupleTypeMetadata2(255, v3, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(0, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - v17;
  v19 = type metadata accessor for ModifiedContent(0, v15, &type metadata for _PaddingLayout);
  v38 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for ModifiedContent(0, v19, &type metadata for _PaddingLayout);
  v39 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v38 - v27;
  v29 = static HorizontalAlignment.leading.getter(v26);
  v45 = v41;
  v46 = v40;
  v47 = v42;
  v30 = VStack.init(alignment:spacing:content:)(v29, 0x4030000000000000, 0, sub_100007D44, v44, v13, v14);
  v31 = static Edge.Set.all.getter(v30);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  View.padding(_:_:)(v31, 0, 1, v15, v32);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v34 = static Edge.Set.top.getter(v33);
  v50 = v32;
  v51 = &protocol witness table for _PaddingLayout;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  View.padding(_:_:)(v34, 0, 1, v19, v35);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v19);
  v48 = v35;
  v49 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  sub_10005135C((uint64_t)v25, v22, (uint64_t)v28);
  v36 = *(void (**)(char *, uint64_t))(v39 + 8);
  v36(v25, v22);
  sub_1000424BC((uint64_t)v28, v22, v43);
  return ((uint64_t (*)(char *, uint64_t))v36)(v28, v22);
}

uint64_t sub_1000064C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t WitnessTable;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82[16];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v69 = a1;
  v81 = a5;
  v71 = a2;
  v72 = a3;
  v8 = type metadata accessor for CalendarModule(255, a2, a3, a4);
  v9 = sub_100007D00(&qword_1001582B8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v9, 0, 0);
  v79 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v79);
  v11 = type metadata accessor for VStack(0, v79, WitnessTable);
  v80 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v75 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v76 = (uint64_t)&v66 - v14;
  v74 = type metadata accessor for AccessibilityTraits(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v68 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100007D50(&qword_1001582B0);
  v16 = __chkstk_darwin(v77);
  v67 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v70 = (uint64_t)&v66 - v18;
  v20 = (uint64_t *)(a1 + *(int *)(type metadata accessor for GuideViewModel(0, a2, a3, v19) + 36));
  v21 = *v20;
  v22 = v20[1];
  v23 = *((unsigned __int8 *)v20 + 16);
  v24 = v20[3];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  v25 = Text.init(_:tableName:bundle:comment:)(v21, v22, v23, v24, 0, 0, 0, 0, 0, 256);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.Weight.bold.getter();
  v33 = Text.fontWeight(_:)(*(_QWORD *)&v32, 0, v25, v27, v31, v29);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_100007D90(v25, v27, v31);
  v40 = swift_bridgeObjectRelease(v29);
  v41 = static Font.title2.getter(v40);
  v42 = Text.font(_:)(v41, v33, v35, v39, v37);
  v44 = v43;
  LOBYTE(v31) = v45;
  v47 = v46;
  swift_release(v41);
  LOBYTE(v41) = v31 & 1;
  sub_100007D90(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  v48 = Text.accessibilityHeading(_:)(1, v42, v44, v31 & 1, v47);
  v50 = v49;
  LOBYTE(v35) = v51;
  v53 = v52;
  sub_100007D90(v42, v44, v41);
  v54 = swift_bridgeObjectRelease(v47);
  v89 = v48;
  v90 = v50;
  v91 = v35 & 1;
  v92 = v53;
  v55 = v68;
  static AccessibilityTraits.isHeader.getter(v54);
  v56 = (uint64_t)v67;
  View.accessibility(addTraits:)(v55, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v74);
  sub_100007D90(v89, v90, v91);
  swift_bridgeObjectRelease(v92);
  v57 = v70;
  v58 = sub_100007DA0(v56, v70);
  v59 = static HorizontalAlignment.leading.getter(v58);
  v83 = v71;
  v84 = v72;
  v85 = v69;
  v60 = (uint64_t)v75;
  VStack.init(alignment:spacing:content:)(v59, 0x4038000000000000, 0, sub_100007DE8, v82, v79, WitnessTable);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v11);
  v62 = v76;
  sub_10005135C(v60, v11, v76);
  v63 = v80;
  v64 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
  v64(v60, v11);
  sub_100007E78(v57, v56, &qword_1001582B0);
  v89 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v60, v62, v11);
  v90 = v60;
  v88[0] = v77;
  v88[1] = v11;
  v86 = sub_100007DF4();
  v87 = v61;
  sub_100042510(&v89, 2uLL, (uint64_t)v88);
  v64(v62, v11);
  sub_100007F38(v57, &qword_1001582B0);
  v64(v60, v11);
  return sub_100007F38(v56, &qword_1001582B0);
}

uint64_t sub_1000069A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedConformanceWitness;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD v82[2];
  uint64_t v83[2];
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;

  v79 = a4;
  v76 = type metadata accessor for LocationModule(0);
  *(_QWORD *)&v77 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011797C);
  v70 = type metadata accessor for Optional(0);
  v69 = *(_QWORD *)(v70 - 8);
  v10 = __chkstk_darwin(v70);
  v12 = (char *)&v67 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v10);
  v71 = (char *)&v67 - v14;
  v75 = sub_100007D50(&qword_1001582B8);
  v15 = __chkstk_darwin(v75);
  v78 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v74 = (uint64_t)&v67 - v18;
  v19 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v17);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalendarViewModel(0, a2, a3, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a2);
  v23 = (_QWORD *)sub_1000EB034((uint64_t)v21);
  v24 = sub_100095628(v23);
  v26 = v25;
  v28 = v27;
  v84 = v24;
  v85 = v25;
  *(_QWORD *)&v86 = v27;
  *((_QWORD *)&v86 + 1) = v29;
  v30 = type metadata accessor for CalendarModule(0, a2, a3, v29);
  WitnessTable = swift_getWitnessTable(&unk_10010EB08, v30);
  v73 = v30;
  v72 = WitnessTable;
  sub_10005135C((uint64_t)&v84, v30, (uint64_t)&v87);
  swift_release(v26);
  swift_release(v28);
  v33 = type metadata accessor for GuideViewModel(0, a2, a3, v32);
  sub_100041FB4(v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v12, v70);
    v34 = 1;
    v35 = v76;
    v36 = v74;
  }
  else
  {
    v68 = v13;
    v37 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v38 = v71;
    v37(v71, v12, AssociatedTypeWitness);
    v39 = sub_100042060(v33);
    v70 = v40;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_10011795C);
    v42 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v44 = v43;
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v47 = v46;
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v50 = v49;
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
    v52 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000024, 0x8000000100112F20);
    v53 = v70;
    *(_QWORD *)v8 = v39;
    *((_QWORD *)v8 + 1) = v53;
    *((double *)v8 + 2) = v42;
    *((_QWORD *)v8 + 3) = v44;
    *((_QWORD *)v8 + 4) = v45;
    *((_QWORD *)v8 + 5) = v47;
    *((_QWORD *)v8 + 6) = v48;
    *((_QWORD *)v8 + 7) = v50;
    *((_QWORD *)v8 + 8) = v51;
    *((_QWORD *)v8 + 9) = v52;
    *((_QWORD *)v8 + 10) = v54;
    v8[88] = v55 & 1;
    *((_QWORD *)v8 + 12) = v56;
    v57 = type metadata accessor for RemoteViewConfiguration();
    v58 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *((_QWORD *)v8 + 13) = EnvironmentObject.init()(v57, v58);
    *((_QWORD *)v8 + 14) = v59;
    v60 = v76;
    v61 = &v8[*(int *)(v76 + 24)];
    *(_QWORD *)v61 = swift_getKeyPath(&unk_1001082D8);
    v62 = sub_100007D50(&qword_1001582E8);
    swift_storeEnumTagMultiPayload(v61, v62, 0);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v38, AssociatedTypeWitness);
    v36 = v74;
    sub_100007F7C((uint64_t)v8, v74);
    v34 = 0;
    v35 = v60;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v36, v34, 1, v35);
  v63 = v88;
  v84 = v87;
  v85 = v88;
  v77 = v89;
  v86 = v89;
  v83[0] = (uint64_t)&v84;
  v64 = v78;
  sub_100007E78(v36, v78, &qword_1001582B8);
  v83[1] = v64;
  swift_retain(v77);
  swift_retain(v63);
  v82[0] = v73;
  v82[1] = v75;
  v80 = v72;
  v81 = sub_100007EBC();
  sub_100042510(v83, 2uLL, (uint64_t)v82);
  sub_100007F38(v36, &qword_1001582B8);
  swift_release(v88);
  swift_release(v89);
  sub_100007F38(v64, &qword_1001582B8);
  v65 = v86;
  swift_release(v85);
  return swift_release(v65);
}

uint64_t sub_100006F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for GuideViewModel(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t sub_100006F50()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100006F6C(uint64_t a1, uint64_t a2)
{
  return sub_100007468(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100006F8C(uint64_t a1, uint64_t a2)
{
  return sub_100007468(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100006F9C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100006FC8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10000703C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000070B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_1000070F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007428(&qword_100158378, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100108744);
  v3 = sub_100007428(&qword_100158380, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1001086A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000717C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007428(&qword_100158388, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100108784);
  v3 = sub_100007428(qword_100158390, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_1001085A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007428(&qword_100158220, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100108218);
  v3 = sub_100007428(qword_100158228, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10010816C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007284@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000072C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007428(&qword_100158320, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010840C);
  v3 = sub_100007428(&qword_100158328, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1001083B4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000734C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100007428(&qword_1001581E8, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_10010802C);
  v3 = sub_100007428(&qword_1001581F0, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100107FCC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000073D0()
{
  return sub_100007428(&qword_1001581D0, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100107F90);
}

uint64_t sub_1000073FC()
{
  return sub_100007428(&qword_1001581D8, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100107F64);
}

uint64_t sub_100007428(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007468(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000074A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000074E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100007554(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000075DC()
{
  return sub_100007428(&qword_1001581E0, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_100108000);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001581F8, (uint64_t)&unk_1001480C8);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_1000082D8(a1, &qword_100158200, (uint64_t)&unk_1001480F0);
}

uint64_t sub_100007630()
{
  return sub_100007428(&qword_100158208, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100108130);
}

uint64_t sub_10000765C()
{
  return sub_100007428(&qword_100158210, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100108104);
}

uint64_t sub_100007688()
{
  return sub_100007428(&qword_100158218, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1001081A0);
}

uint64_t sub_1000076B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000076BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = type metadata accessor for GuideViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v7, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100007728(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 24) = v12;
    ((void (*)(void))swift_bridgeObjectRetain)();
    swift_bridgeObjectRetain(v12);
  }
  return v4;
}

uint64_t sub_1000077FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v4 + 24));
}

uint64_t sub_100007844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 24) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000078C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100007958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t sub_1000079B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_100007A38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100007AB4 + 4 * byte_100107EE0[v10]))();
  }
}

void sub_100007B38(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_100007C2C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100007CA8);
}

void sub_100007C34(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100007C3CLL);
  JUMPOUT(0x100007CA8);
}

void sub_100007C80()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100007CA8);
}

void sub_100007C88()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100007CA8);
}

uint64_t sub_100007C90(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x100007C9CLL);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x100007CA8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for GuideModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GuideModule);
}

uint64_t sub_100007CCC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100115F4C, 1);
}

uint64_t sub_100007D00(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100007D44@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000064C0(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_100007D50(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100007D90(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100007DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_1001582B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007DE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000069A8(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100007DF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001582C0;
  if (!qword_1001582C0)
  {
    v1 = sub_100007D00(&qword_1001582B0);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001582C0);
  }
  return result;
}

uint64_t sub_100007E78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100007D50(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100007EBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001582D0;
  if (!qword_1001582D0)
  {
    v1 = sub_100007D00(&qword_1001582B8);
    sub_100007428(&qword_1001582D8, type metadata accessor for LocationModule, (uint64_t)&unk_10010CB68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001582D0);
  }
  return result;
}

uint64_t sub_100007F38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100007D50(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100007F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100007FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t initializeBufferWithCopyOfBuffer for VenueEventListHeader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for EmptyEventsList(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100008028(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100008048(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001582F0, (uint64_t)&unk_1001481C8);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_1000082D8(a1, &qword_1001582F8, (uint64_t)&unk_1001481F0);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_1000082D8(a1, &qword_100158300, (uint64_t)&unk_100148210);
}

uint64_t sub_1000080B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_1001582B0);
  v5 = type metadata accessor for CalendarModule(255, v1, v2, v4);
  v6 = sub_100007D00(&qword_1001582B8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, v6, 0, 0);
  v8 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v8);
  v10 = type metadata accessor for VStack(255, v8, WitnessTable);
  v11 = swift_getTupleTypeMetadata2(255, v3, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, v11);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(255, v12, v13);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_100008218()
{
  return sub_100007428(&qword_100158308, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_10010837C);
}

uint64_t sub_100008244()
{
  return sub_100007428(&qword_100158310, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100108354);
}

uint64_t sub_100008270()
{
  return sub_100007428(&qword_100158318, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1001083E4);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
  sub_1000082D8(a1, &qword_100158330, (uint64_t)&unk_100148238);
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
  sub_1000082D8(a1, &qword_100158338, (uint64_t)&unk_100148260);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000082D8(a1, &qword_100158340, (uint64_t)&unk_1001482E0);
}

void sub_1000082D8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10000831C()
{
  return sub_100007428(&qword_100158348, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_10010856C);
}

uint64_t sub_100008348()
{
  return sub_100007428(&qword_100158350, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100108544);
}

uint64_t sub_100008374()
{
  return sub_100007428(&qword_100158358, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_10010866C);
}

uint64_t sub_1000083A0()
{
  return sub_100007428(&qword_100158360, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100108644);
}

uint64_t sub_1000083CC()
{
  return sub_100007428(&qword_100158368, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_1001086D4);
}

uint64_t sub_1000083F8()
{
  return sub_100007428(&qword_100158370, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_1001085D4);
}

uint64_t sub_100008434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_100008470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for Optional(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v7 - v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - v4, a1, v2);
  State.init(wrappedValue:)(v5, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t sub_10000850C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Optional(255);
  v4 = type metadata accessor for State(0, v3);
  return a2(v4);
}

uint64_t sub_10000855C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t TupleTypeMetadata2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t TupleTypeMetadata3;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96[16];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _QWORD *v112;

  v95 = a2;
  v3 = sub_100007D00(&qword_100158418);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a1;
  v94 = a1;
  v6 = type metadata accessor for Array(255, v4);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD **)(v9 + 8);
  v108 = v6;
  v109 = v4;
  v110 = v7;
  v111 = (void *)WitnessTable;
  v112 = v10;
  v11 = type metadata accessor for ForEach(255, &v108);
  v107 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v13 = type metadata accessor for HStack(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v13);
  v108 = v13;
  v109 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v108 = v13;
  v109 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v17 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v17);
  v108 = v17;
  v109 = v18;
  v19 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v20 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v108 = v17;
  v109 = v18;
  v21 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v108 = v19;
  v109 = v20;
  v110 = v21;
  v111 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v22 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v108 = v19;
  v109 = v20;
  v110 = v21;
  v111 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v23 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v108 = v22;
  v109 = v4;
  v110 = v23;
  v111 = v10;
  v24 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v108 = v22;
  v109 = v4;
  v110 = v23;
  v111 = v10;
  v25 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v108 = v24;
  v109 = v25;
  v26 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _FrameLayout);
  v28 = type metadata accessor for Optional(255);
  v108 = v24;
  v109 = v25;
  v105 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v106 = &protocol witness table for _FrameLayout;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v104 = v10[1];
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v28);
  v108 = v27;
  v109 = v28;
  v110 = v29;
  v111 = (void *)v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v32 = sub_100007D00(&qword_100158428);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = sub_100007D00(&qword_100158430);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  type metadata accessor for PageControl(255, v4, v104, v37);
  v38 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v36, v38, 0, 0);
  v40 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v40);
  v42 = type metadata accessor for VStack(255, v40, v41);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _AppearanceActionModifier);
  type metadata accessor for SelectAssetButton(255, v4, v9, v44);
  v45 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v43, v45, 0, 0);
  v47 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v47);
  v49 = type metadata accessor for VStack(0, v47, v48);
  v88 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v51 = (char *)&v88 - v50;
  v52 = type metadata accessor for ModifiedContent(0, v49, &type metadata for _PaddingLayout);
  v91 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v54 = (char *)&v88 - v53;
  v55 = sub_100007D00(&qword_100158438);
  v56 = type metadata accessor for ModifiedContent(0, v52, v55);
  v92 = *(_QWORD *)(v56 - 8);
  v57 = __chkstk_darwin(v56);
  v89 = (char *)&v88 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __chkstk_darwin(v57);
  v90 = (uint64_t)&v88 - v60;
  v97 = v4;
  v98 = v9;
  v99 = v93;
  v61 = static HorizontalAlignment.center.getter(v59);
  v62 = VStack.init(alignment:spacing:content:)(v61, 0, 0, sub_10000C0F0, v96, v47, v48);
  v63 = static Edge.Set.top.getter(v62);
  v64 = v94;
  v68 = sub_100008434(v94, v65, v66, v67);
  LOBYTE(v47) = sub_100068638();
  swift_release(v68);
  if ((v47 & 1) != 0)
    v69 = 0x4042000000000000;
  else
    v69 = 0;
  v70 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v49);
  View.padding(_:_:)(v63, v69, 0, v49, v70);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v51, v49);
  v74 = sub_100008434(v64, v71, v72, v73);
  v75 = sub_100068638();
  v76 = swift_release(v74);
  LOBYTE(v108) = (v75 & 1) == 0;
  v77 = static Alignment.center.getter(v76);
  v79 = v78;
  v80 = sub_100007D50(&qword_100158440);
  v102 = v70;
  v103 = &protocol witness table for _PaddingLayout;
  v81 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
  v82 = sub_10000C164(&qword_100158448, &qword_100158440, (void (*)(void))sub_10000C0FC);
  v83 = (uint64_t)v89;
  View.background<A>(_:alignment:)(&v108, v77, v79, v52, v80, v81, v82);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v54, v52);
  v84 = sub_10000F4E0(&qword_100158458, &qword_100158438, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v100 = v81;
  v101 = v84;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
  v85 = v90;
  sub_10005135C(v83, v56, v90);
  v86 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v86(v83, v56);
  sub_1000424BC(v85, v56, v95);
  return ((uint64_t (*)(uint64_t, uint64_t))v86)(v85, v56);
}

uint64_t sub_100008CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *WitnessTable;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t TupleTypeMetadata2;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(_QWORD, _QWORD);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  void (*v142)(_QWORD, _QWORD);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;

  v157 = a1;
  v151 = a5;
  v7 = type metadata accessor for SelectAssetButton(0, a2, a3, a4);
  v146 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v131 = (uint64_t)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v132 = (uint64_t)&v126 - v10;
  v11 = type metadata accessor for Optional(0);
  v128 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v143 = (char *)&v126 - v13;
  v144 = *(_QWORD *)(a2 - 8);
  v14 = __chkstk_darwin(v12);
  v130 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v129 = (char *)&v126 - v16;
  v150 = v7;
  v149 = type metadata accessor for Optional(0);
  v145 = *(_QWORD *)(v149 - 8);
  v17 = __chkstk_darwin(v149);
  v148 = (uint64_t)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v147 = (uint64_t)&v126 - v19;
  v21 = type metadata accessor for PhoneWallpaperView(0, a2, a3, v20);
  v141 = *(_QWORD *)(v21 - 8);
  v139 = *(_QWORD *)(v141 + 64);
  __chkstk_darwin(v21);
  v140 = (char *)&v126 - v22;
  v23 = type metadata accessor for Array(255, a2);
  v24 = type metadata accessor for ScrollAsset(255);
  WitnessTable = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
  v142 = (void (*)(_QWORD, _QWORD))a3;
  v26 = *(uint64_t **)(a3 + 8);
  v172 = v23;
  v173 = a2;
  v174 = v24;
  v175 = WitnessTable;
  v176 = v26;
  v27 = type metadata accessor for ForEach(255, &v172);
  v171 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v27);
  v29 = type metadata accessor for HStack(255, v27, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v29);
  v172 = v29;
  v173 = v30;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v172, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v172 = v29;
  v173 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v33 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v33);
  v172 = v33;
  v173 = v34;
  v35 = swift_getOpaqueTypeMetadata2(255, &v172, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v36 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v172 = v33;
  v173 = v34;
  v37 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v172 = v35;
  v173 = v36;
  v174 = v37;
  v175 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v38 = swift_getOpaqueTypeMetadata2(255, &v172, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v172 = v35;
  v173 = v36;
  v174 = v37;
  v175 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v39 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v172 = v38;
  v173 = a2;
  v174 = v39;
  v175 = v26;
  v40 = swift_getOpaqueTypeMetadata2(255, &v172, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v172 = v38;
  v173 = a2;
  v174 = v39;
  v175 = v26;
  v41 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v172 = v40;
  v173 = v41;
  v42 = swift_getOpaqueTypeMetadata2(255, &v172, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _FrameLayout);
  v172 = v40;
  v173 = v41;
  v169 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v170 = &protocol witness table for _FrameLayout;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v168 = v26[1];
  v45 = v168;
  v46 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v11);
  v172 = v43;
  v173 = v11;
  v127 = v11;
  v174 = v44;
  v175 = v46;
  v47 = swift_getOpaqueTypeMetadata2(255, &v172, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v48 = sub_100007D00(&qword_100158428);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v50 = sub_100007D00(&qword_100158430);
  v51 = type metadata accessor for ModifiedContent(255, v49, v50);
  v52 = type metadata accessor for ModifiedContent(255, v51, &type metadata for _PaddingLayout);
  v53 = a2;
  type metadata accessor for PageControl(255, a2, v45, v54);
  v55 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v52, v55, 0, 0);
  v57 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v58 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v57);
  v59 = type metadata accessor for VStack(0, v57, v58);
  v134 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v61 = (char *)&v126 - v60;
  v155 = type metadata accessor for ModifiedContent(0, v59, &type metadata for _AppearanceActionModifier);
  v153 = *(_QWORD *)(v155 - 8);
  v62 = __chkstk_darwin(v155);
  v138 = (char *)&v126 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __chkstk_darwin(v62);
  v133 = (char *)&v126 - v65;
  __chkstk_darwin(v64);
  v154 = (uint64_t)&v126 - v66;
  v156 = v21;
  v70 = sub_100008434(v21, v67, v68, v69);
  LOBYTE(v21) = sub_100068638();
  v71 = swift_release(v70);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v152 = 0;
  if ((v21 & 1) != 0)
  {
    v78 = sub_100008434(v156, v72, v73, v74);
    v75 = *(_QWORD *)(v78 + 16);
    v76 = *(_QWORD *)(v78 + 24);
    v77 = *(unsigned __int8 *)(v78 + 32);
    v79 = *(uint64_t **)(v78 + 40);
    swift_bridgeObjectRetain(v76);
    v152 = v79;
    swift_bridgeObjectRetain(v79);
    v71 = swift_release(v78);
  }
  v135 = v77;
  v136 = v76;
  v137 = v75;
  v80 = __chkstk_darwin(v71);
  v81 = v142;
  *(&v126 - 4) = v53;
  *(&v126 - 3) = (uint64_t)v81;
  v82 = v157;
  *(&v126 - 2) = v157;
  v83 = static HorizontalAlignment.center.getter(v80);
  VStack.init(alignment:spacing:content:)(v83, 0, 0, sub_10000C140, &v126 - 6, v57, v58);
  v84 = v141;
  v85 = v140;
  v86 = v156;
  (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v140, v82, v156);
  v87 = *(unsigned __int8 *)(v84 + 80);
  v88 = (v87 + 32) & ~v87;
  v89 = swift_allocObject(&unk_100148458, v88 + v139, v87 | 7);
  *(_QWORD *)(v89 + 16) = v53;
  *(_QWORD *)(v89 + 24) = v81;
  v90 = v85;
  v91 = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v89 + v88, v90, v86);
  v92 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v59);
  v93 = (uint64_t)v133;
  View.onAppear(perform:)(sub_10000C150, v89, v59, v92);
  swift_release(v89);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v61, v59);
  v166 = v92;
  v167 = &protocol witness table for _AppearanceActionModifier;
  v94 = v155;
  v141 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v155);
  sub_10005135C(v93, v94, v154);
  v142 = *(void (**)(_QWORD, _QWORD))(v153 + 8);
  v142(v93, v94);
  v95 = v143;
  sub_10000850C(v86, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v96 = v144;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v95, 1, v91) == 1)
  {
    (*(void (**)(char *, uint64_t))(v128 + 8))(v95, v127);
    v97 = v148;
    v98 = v150;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v148, 1, 1, v150);
    swift_getWitnessTable(&unk_100108910, v98);
  }
  else
  {
    v99 = v129;
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v129, v95, v91);
    v100 = v156;
    v101 = (char *)(v157 + *(int *)(v156 + 40));
    v102 = *v101;
    v103 = (char *)*((_QWORD *)v101 + 1);
    LOBYTE(v163) = v102;
    v164 = v103;
    v104 = sub_100007D50(&qword_100158470);
    State.projectedValue.getter(v104);
    v105 = v172;
    v106 = v173;
    v107 = v174;
    v108 = (uint64_t)v130;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v130, v99, v91);
    v112 = (_QWORD *)sub_100008434(v100, v109, v110, v111);
    v113 = v131;
    sub_10000B418(v105, v106, v107, v108, v112, v131);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v91);
    v98 = v150;
    swift_getWitnessTable(&unk_100108910, v150);
    v114 = v132;
    sub_10005135C(v113, v98, v132);
    v115 = v146;
    v116 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
    v116(v113, v98);
    v97 = v148;
    sub_1000424BC(v114, v98, v148);
    v116(v114, v98);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56))(v97, 0, 1, v98);
  }
  v117 = v147;
  sub_1000424D4(v97, v147);
  v118 = v145;
  v119 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
  v120 = v149;
  v119(v97, v149);
  v172 = v137;
  v173 = v136;
  v174 = v135;
  v175 = v152;
  v163 = &v172;
  v121 = v138;
  v122 = v154;
  v123 = v155;
  (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v138, v154, v155);
  v164 = v121;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 16))(v97, v117, v120);
  v165 = v97;
  v162[0] = sub_100007D50(&qword_100158418);
  v162[1] = v123;
  v162[2] = v120;
  v159 = sub_10000C164(&qword_100158460, &qword_100158418, (void (*)(void))sub_10000C1C8);
  v160 = v141;
  v158 = swift_getWitnessTable(&unk_100108910, v98);
  v161 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v120);
  sub_100042510((uint64_t *)&v163, 3uLL, (uint64_t)v162);
  v119(v117, v120);
  v124 = (void (*)(char *, uint64_t))v142;
  v142(v122, v123);
  v119(v97, v120);
  v124(v121, v123);
  return sub_10000C20C(v172, v173, v174, (uint64_t)v175);
}

uint64_t sub_1000098F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(_QWORD *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  void (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t);
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t OpaqueTypeConformance2;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(_QWORD, _QWORD);
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[8];
  _QWORD v272[12];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  _QWORD *v277;

  v267 = a1;
  v259 = a5;
  v6 = *(_QWORD **)(a3 + 8);
  v268 = (void (*)(_QWORD, _QWORD))a3;
  v262 = v6[1];
  v263 = v6;
  v7 = v6;
  v9 = type metadata accessor for PageControl(0, a2, v262, a4);
  v253 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v199 = (_QWORD **)((char *)&v199 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v200 = (uint64_t)&v199 - v12;
  v256 = v13;
  v258 = type metadata accessor for Optional(0);
  v254 = *(_QWORD *)(v258 - 8);
  v14 = __chkstk_darwin(v258);
  v257 = (uint64_t)&v199 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v255 = (uint64_t)&v199 - v16;
  v266 = type metadata accessor for PhoneWallpaperView(0, a2, a3, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64);
  v250 = *(_QWORD *)(v266 - 8);
  v251 = v18;
  __chkstk_darwin(v266);
  v249 = (char *)&v199 - v19;
  v20 = type metadata accessor for Optional(0);
  v21 = *(_QWORD *)(v20 - 8);
  v264 = v20;
  v252 = v21;
  __chkstk_darwin(v20);
  v248 = (char *)&v199 - v22;
  v24 = type metadata accessor for Binding(0, v23);
  v245 = *(_QWORD *)(v24 - 8);
  v246 = v24;
  __chkstk_darwin(v24);
  v261 = (char *)&v199 - v25;
  v26 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v26);
  v243 = (char *)&v199 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v244 = *(_QWORD *)(v28 - 8);
  v29 = v28;
  __chkstk_darwin(v28);
  v240 = (char *)&v199 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ContentMarginPlacement(0);
  v241 = *(_QWORD *)(v31 - 8);
  v242 = v31;
  __chkstk_darwin(v31);
  v223 = (char *)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Array(255, a2);
  v34 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
  v273 = v33;
  v274 = a2;
  v275 = v34;
  v276 = (void *)WitnessTable;
  v277 = v7;
  v36 = type metadata accessor for ForEach(255, &v273);
  v272[11] = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v36);
  v38 = type metadata accessor for HStack(255, v36, v37);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v38);
  v273 = v38;
  v274 = v39;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v273, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v216 = OpaqueTypeMetadata2;
  v273 = v38;
  v274 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v41 = type metadata accessor for ScrollView(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v226 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v212 = (char *)&v199 - v42;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v41);
  v273 = v41;
  v274 = v43;
  v44 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v228 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v213 = (char *)&v199 - v45;
  v273 = v41;
  v274 = v43;
  v46 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v273 = v44;
  v274 = v29;
  v209 = v29;
  v210 = v44;
  v47 = v29;
  v275 = v46;
  v276 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v48 = v46;
  v211 = v46;
  v49 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v225 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v208 = (char *)&v199 - v50;
  v273 = v44;
  v274 = v47;
  v275 = v48;
  v276 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v51 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v205 = v49;
  v206 = v51;
  v273 = v49;
  v274 = a2;
  v52 = v51;
  v53 = v263;
  v275 = v51;
  v276 = v263;
  v54 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v222 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v204 = (char *)&v199 - v55;
  v273 = v49;
  v274 = a2;
  v275 = v52;
  v276 = v53;
  v56 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v273 = v54;
  v274 = v56;
  v57 = v54;
  v202 = v54;
  v203 = v56;
  v58 = v56;
  v59 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v224 = *(_QWORD *)(v59 - 8);
  v218 = v59;
  __chkstk_darwin(v59);
  v207 = (char *)&v199 - v60;
  v62 = type metadata accessor for ModifiedContent(0, v61, &type metadata for _FrameLayout);
  v233 = *(_QWORD *)(v62 - 8);
  v221 = v62;
  __chkstk_darwin(v62);
  v215 = (char *)&v199 - v63;
  v273 = v57;
  v274 = v58;
  v214 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v272[9] = v214;
  v272[10] = &protocol witness table for _FrameLayout;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v220 = v64;
  v272[8] = v262;
  v65 = v264;
  v219 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v264);
  v273 = v62;
  v274 = v65;
  v275 = v64;
  v276 = (void *)v219;
  v66 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v232 = *(_QWORD *)(v66 - 8);
  v229 = v66;
  __chkstk_darwin(v66);
  v265 = (char *)&v199 - v67;
  v68 = sub_100007D00(&qword_100158428);
  v69 = type metadata accessor for ModifiedContent(0, v66, v68);
  v237 = *(_QWORD *)(v69 - 8);
  v230 = v69;
  __chkstk_darwin(v69);
  v227 = (char *)&v199 - v70;
  v71 = sub_100007D00(&qword_100158430);
  v72 = type metadata accessor for ModifiedContent(0, v69, v71);
  v239 = *(_QWORD *)(v72 - 8);
  v235 = v72;
  __chkstk_darwin(v72);
  v231 = (char *)&v199 - v73;
  v201 = type metadata accessor for ModifiedContent(0, v74, &type metadata for _PaddingLayout);
  v238 = *(_QWORD *)(v201 - 8);
  v75 = __chkstk_darwin(v201);
  v247 = (char *)&v199 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __chkstk_darwin(v75);
  v234 = (char *)&v199 - v78;
  v79 = __chkstk_darwin(v77);
  v236 = (uint64_t)&v199 - v80;
  v81 = static Axis.Set.horizontal.getter(v79);
  v82 = a2;
  v271[2] = a2;
  v271[3] = v268;
  v271[4] = v267;
  v83 = v212;
  v84 = ScrollView.init(_:showsIndicators:content:)(v81, 0, sub_10000E1E0, v271, v216, OpaqueTypeConformance2);
  v85 = static Edge.Set.horizontal.getter(v84);
  v86 = v266;
  v90 = sub_100008434(v266, v87, v88, v89);
  v91 = sub_1000686D8();
  swift_release(v90);
  v92 = v223;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ(v41, v43);
  v93 = v213;
  v94 = v85;
  v95 = v261;
  View.contentMargins(_:_:for:)(v94, *(_QWORD *)&v91, 0, v92, v41, v43);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v92, v242);
  v96 = (*(uint64_t (**)(char *, uint64_t))(v226 + 8))(v83, v41);
  v97 = v243;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v96);
  v98 = v240;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v97);
  v99 = v208;
  v100 = v209;
  v101 = v210;
  View.scrollTargetBehavior<A>(_:)(v98, v210, v209, v211, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v98, v100);
  (*(void (**)(char *, uint64_t))(v228 + 8))(v93, v101);
  v102 = v267;
  sub_10000850C(v86, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  v103 = v204;
  v104 = v205;
  View.scrollPosition<A>(id:anchor:)(v95, 0, 0, 1, v205, v82, v206, v263);
  (*(void (**)(char *, uint64_t))(v245 + 8))(v95, v246);
  (*(void (**)(char *, uint64_t))(v225 + 8))(v99, v104);
  v108 = sub_100008434(v86, v105, v106, v107);
  LOBYTE(v95) = sub_100068714();
  swift_release(v108);
  v109 = (v95 & 1) == 0;
  v110 = v207;
  v111 = v202;
  View.scrollDisabled(_:)(v109, v202, v203);
  (*(void (**)(char *, uint64_t))(v222 + 8))(v103, v111);
  v115 = sub_100008434(v86, v112, v113, v114);
  v116 = sub_10006873C();
  v117 = swift_release(v115);
  v118 = static Alignment.center.getter(v117);
  v119 = v215;
  v120 = v218;
  View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v116, 0, v118, v121, v218, v214);
  (*(void (**)(char *, uint64_t))(v224 + 8))(v110, v120);
  v122 = v248;
  v123 = v86;
  sub_10000850C(v86, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v124 = v249;
  v125 = v250;
  v126 = v102;
  v127 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v126, v123);
  v128 = *(unsigned __int8 *)(v125 + 80);
  v129 = (v128 + 32) & ~v128;
  v130 = swift_allocObject(&unk_100148480, v129 + v251, v128 | 7);
  v260 = v82;
  v131 = v268;
  *(_QWORD *)(v130 + 16) = v82;
  *(_QWORD *)(v130 + 24) = v131;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v130 + v129, v124, v127);
  v133 = v220;
  v132 = v221;
  v134 = v264;
  v135 = (void *)v219;
  View.onChange<A>(of:initial:_:)(v122, 0, sub_10000E1F0, v130, v221, v264, v220, v219);
  swift_release(v130);
  (*(void (**)(char *, uint64_t))(v252 + 8))(v122, v134);
  v136 = v119;
  v137 = v132;
  v138 = (*(uint64_t (**)(char *, uint64_t))(v233 + 8))(v136, v132);
  v139 = static Alignment.center.getter(v138);
  v141 = v140;
  v142 = v260;
  v270[2] = v260;
  v270[3] = v131;
  v143 = v267;
  v270[4] = v267;
  v144 = sub_100007D50(&qword_100158478);
  v273 = v137;
  v274 = v134;
  v275 = v133;
  v276 = v135;
  v145 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v146 = sub_10000E210();
  v147 = v227;
  v148 = v139;
  v149 = v141;
  v150 = v229;
  v151 = v265;
  View.overlay<A>(alignment:content:)(v148, v149, sub_10000E204, v270, v229, v144, v145, v146);
  v152 = (*(uint64_t (**)(char *, uint64_t))(v232 + 8))(v151, v150);
  v153 = static Alignment.center.getter(v152);
  v155 = v154;
  v269[2] = v142;
  v269[3] = v268;
  v269[4] = v143;
  v156 = sub_100007D50(&qword_100158498);
  v157 = sub_10000F4E0(&qword_1001584A0, &qword_100158428, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v272[6] = v145;
  v272[7] = v157;
  v158 = v230;
  v159 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v230);
  v160 = sub_10000F4E0(&qword_1001584A8, &qword_100158498, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v161 = v231;
  View.background<A>(alignment:content:)(v153, v155, sub_10000E304, v269, v158, v156, v159, v160);
  v162 = (*(uint64_t (**)(char *, uint64_t))(v237 + 8))(v147, v158);
  v163 = static Edge.Set.bottom.getter(v162);
  v164 = sub_10000F4E0(qword_1001584B0, &qword_100158430, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v272[4] = v159;
  v272[5] = v164;
  v165 = v235;
  v166 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v235);
  v167 = (uint64_t)v234;
  View.padding(_:_:)(v163, 0x403E000000000000, 0, v165, v166);
  (*(void (**)(char *, uint64_t))(v239 + 8))(v161, v165);
  v272[2] = v166;
  v272[3] = &protocol witness table for _PaddingLayout;
  v168 = v238;
  v169 = v201;
  v170 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v201);
  v171 = v236;
  v265 = (char *)v170;
  sub_10005135C(v167, v169, v236);
  v172 = v169;
  v268 = *(void (**)(_QWORD, _QWORD))(v168 + 8);
  v268(v167, v169);
  v173 = v266;
  v177 = sub_100008434(v266, v174, v175, v176);
  LOBYTE(v169) = sub_100068714();
  swift_release(v177);
  if ((v169 & 1) != 0)
  {
    v181 = sub_100008434(v173, v178, v179, v180);
    v182 = *(_QWORD *)(v181 + 240);
    swift_bridgeObjectRetain(v182);
    swift_release(v181);
    v183 = (uint64_t)v261;
    sub_10000850C(v173, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    v184 = v199;
    sub_100091364(v182, v183, v260, v262, v199);
    v185 = v256;
    swift_getWitnessTable(&unk_10010E938, v256);
    v186 = v200;
    sub_10005135C((uint64_t)v184, v185, v200);
    v187 = v253;
    v188 = *(void (**)(_QWORD *, uint64_t))(v253 + 8);
    v188(v184, v185);
    v189 = v257;
    sub_1000424BC(v186, v185, v257);
    v188((_QWORD *)v186, v185);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v187 + 56))(v189, 0, 1, v185);
  }
  else
  {
    v185 = v256;
    v189 = v257;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v257, 1, 1, v256);
    swift_getWitnessTable(&unk_10010E938, v185);
  }
  v190 = v255;
  sub_1000424D4(v189, v255);
  v191 = v254;
  v192 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
  v193 = v258;
  v192(v189, v258);
  v194 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
  v195 = (uint64_t)v247;
  v194(v247, v171, v172);
  v273 = v195;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 16))(v189, v190, v193);
  v274 = v189;
  v272[0] = v172;
  v272[1] = v193;
  v271[6] = v265;
  v271[5] = swift_getWitnessTable(&unk_10010E938, v185);
  v271[7] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v193);
  sub_100042510(&v273, 2uLL, (uint64_t)v272);
  v192(v190, v193);
  v196 = v171;
  v197 = (uint64_t (*)(uint64_t, uint64_t))v268;
  v268(v196, v172);
  v192(v189, v193);
  return v197(v195, v172);
}

uint64_t sub_10000A8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v28 = a3;
  v29 = a1;
  v30 = a4;
  v6 = type metadata accessor for Array(255, a2);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(a3 + 8);
  v36 = v6;
  v37 = a2;
  v38 = v7;
  v39 = WitnessTable;
  v40 = v9;
  v10 = type metadata accessor for ForEach(255, &v36);
  v35 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  v12 = type metadata accessor for HStack(0, v10, v11);
  v27 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v12);
  v36 = v12;
  v37 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v17 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v18 = __chkstk_darwin(OpaqueTypeMetadata2);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v27 - v22;
  v32 = a2;
  v33 = v28;
  v34 = v29;
  v24 = static VerticalAlignment.center.getter(v21);
  HStack.init(alignment:spacing:content:)(v24, 0x4034000000000000, 0, sub_10000E310, v31, v10, v11);
  View.scrollTargetLayout(isEnabled:)(1, v12, v15);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  v36 = v12;
  v37 = v15;
  swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_10005135C((uint64_t)v20, OpaqueTypeMetadata2, (uint64_t)v23);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, OpaqueTypeMetadata2);
  sub_1000424BC((uint64_t)v23, OpaqueTypeMetadata2, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, OpaqueTypeMetadata2);
}

uint64_t sub_10000AB00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];

  v41 = a5;
  v8 = type metadata accessor for PhoneWallpaperView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v35 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - v10;
  v12 = type metadata accessor for Array(255, a2);
  v39 = v12;
  v13 = type metadata accessor for ScrollAsset(255);
  v38 = v13;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v36 = *(_QWORD *)(a3 + 8);
  v37 = WitnessTable;
  v45[0] = v12;
  v45[1] = a2;
  v45[2] = v13;
  v45[3] = WitnessTable;
  v45[4] = v36;
  v15 = type metadata accessor for ForEach(0, v45);
  v40 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v34 = (uint64_t)&v32 - v19;
  v23 = sub_100008434(v8, v20, v21, v22);
  v24 = *(_QWORD *)(v23 + 240);
  swift_bridgeObjectRetain(v24);
  swift_release(v23);
  v45[0] = v24;
  v42 = a2;
  v43 = a3;
  KeyPath = swift_getKeyPath(&unk_1001088B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v25 = *(unsigned __int8 *)(v9 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_1001484A8, v26 + v35, v25 | 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + v26, v11, v8);
  v28 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  ForEach<>.init(_:id:content:)(v45, KeyPath, sub_10000E440, v27, v39, v38, v37, v36, v28);
  v44 = v28;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v15);
  v29 = v34;
  sub_10005135C((uint64_t)v18, v15, v34);
  v30 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30(v18, v15);
  sub_1000424BC(v29, v15, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v15);
}

int *sub_10000AD78@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int *result;

  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v7 = type metadata accessor for PhoneWallpaperView(0, a1, a2, v6);
  v11 = sub_100008434(v7, v8, v9, v10);
  v12 = sub_100068688();
  swift_release(v11);
  v16 = sub_100008434(v7, v13, v14, v15);
  v17 = sub_1000686B4();
  swift_release(v16);
  v21 = sub_100008434(v7, v18, v19, v20);
  v22 = sub_1000686D4();
  swift_release(v21);
  result = (int *)type metadata accessor for ScrollAsset(0);
  *(double *)(a3 + result[5]) = v12;
  *(double *)(a3 + result[6]) = v17;
  *(double *)(a3 + result[7]) = v22;
  return result;
}

uint64_t sub_10000AE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for PhoneWallpaperView(0, a2, a3, a4);
  v9 = sub_100008434(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 224);
  v10 = *(_QWORD *)(v9 + 232);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v12 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  v13 = *v12;
  if (*v12)
  {
    swift_retain(*v12);
    sub_10008A874(v11, v10, 8, 10, 26, 0, 3u, v13);
    swift_bridgeObjectRelease(v10);
    return swift_release(v13);
  }
  else
  {
    v15 = v12[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
  return result;
}

uint64_t sub_10000AF44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t result;

  v5 = type metadata accessor for PhoneWallpaperView(0, a1, a2, a3);
  v9 = sub_100008434(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 48);
  v10 = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v15 = sub_100008434(v5, v12, v13, v14);
  v16 = sub_100068740();
  result = swift_release(v15);
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v16;
  *(_BYTE *)(a4 + 24) = 0;
  return result;
}

double sub_10000AFCC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double result;
  uint64_t v47;

  v6 = type metadata accessor for Color.RGBColorSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PhoneWallpaperView(0, a1, a2, v10);
  v15 = sub_100008434(v11, v12, v13, v14);
  v16 = sub_100068760();
  swift_release(v15);
  v20 = sub_100008434(v11, v17, v18, v19);
  v21 = sub_10006878C();
  swift_release(v20);
  v25 = sub_100008434(v11, v22, v23, v24);
  v26 = sub_1000686D4();
  swift_release(v25);
  v27 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v28(v9, enum case for Color.RGBColorSpace.sRGBLinear(_:), v6);
  v29 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v28(v9, v27, v6);
  v30 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v34 = sub_100008434(v11, v31, v32, v33);
  v35 = sub_100068760();
  swift_release(v34);
  v39 = sub_100008434(v11, v36, v37, v38);
  v40 = sub_10006878C();
  swift_release(v39);
  v44 = sub_100008434(v11, v41, v42, v43);
  v45 = sub_1000686D4();
  swift_release(v44);
  *(double *)a3 = v16;
  *(double *)(a3 + 8) = v21;
  *(double *)(a3 + 16) = v26;
  *(_QWORD *)(a3 + 24) = v29;
  *(_OWORD *)(a3 + 32) = xmmword_1001087E0;
  *(_QWORD *)(a3 + 48) = 0x4010000000000000;
  *(_QWORD *)(a3 + 56) = v30;
  result = 10.0;
  *(_OWORD *)(a3 + 64) = xmmword_1001087F0;
  *(_OWORD *)(a3 + 80) = xmmword_100108800;
  *(double *)(a3 + 96) = v35;
  *(double *)(a3 + 104) = v40;
  *(double *)(a3 + 112) = v45;
  return result;
}

uint64_t sub_10000B1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, uint64_t);
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t WitnessTable;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v33 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v32 - v16;
  v19 = type metadata accessor for PhoneWallpaperView(0, a2, a3, v18);
  v34 = a1;
  sub_10000850C(v19, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a3) = v20(v17, 1, a2);
  v21 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  result = v21(v17, v9);
  if ((_DWORD)a3 == 1)
  {
    v32 = v8;
    v26 = sub_100008434(v19, v23, v24, v25);
    v27 = *(_QWORD *)(v26 + 240);
    swift_bridgeObjectRetain(v27);
    swift_release(v26);
    v35 = v27;
    v28 = type metadata accessor for Array(0, a2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v28);
    Collection.first.getter(v28, WitnessTable);
    swift_bridgeObjectRelease(v27);
    if (v20(v15, 1, a2) == 1)
    {
      return v21(v15, v9);
    }
    else
    {
      v30 = v32;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v15, a2);
      v31 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v33, v30, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v31, 0, 1, a2);
      sub_10000E140(v31);
      v21((char *)v31, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v30, a2);
    }
  }
  return result;
}

uint64_t sub_10000B418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = *a5;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  v10 = *(_QWORD *)(v9 + 80);
  v11 = type metadata accessor for SelectAssetButton(0, v10, *(_QWORD *)(v9 + 88), a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a6 + *(int *)(v11 + 36), a4, v10);
  v12 = *a5;
  WitnessTable = swift_getWitnessTable(&unk_10010C208, *a5);
  Bindable<A>.init(wrappedValue:)(a5, v12, WitnessTable);
  v14 = (uint64_t *)(a6 + *(int *)(v11 + 44));
  v15 = type metadata accessor for RemoteViewConfiguration();
  v16 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v15, v16);
  *v14 = result;
  v14[1] = v18;
  return result;
}

uint64_t sub_10000B4F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[9];
  uint64_t v18;

  v6 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010C208, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v6, WitnessTable);
  v9 = type metadata accessor for PhoneWallpaperView(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), v8);
  sub_100008470(a2);
  v10 = a3 + *(int *)(v9 + 40);
  v17[0] = 0;
  State.init(wrappedValue:)(v17, &type metadata for Bool);
  v11 = v18;
  *(_BYTE *)v10 = v17[1];
  *(_QWORD *)(v10 + 8) = v11;
  v12 = (uint64_t *)(a3 + *(int *)(v9 + 44));
  v13 = type metadata accessor for RemoteViewConfiguration();
  v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v13, v14);
  *v12 = result;
  v12[1] = v16;
  return result;
}

uint64_t type metadata accessor for PhoneWallpaperView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhoneWallpaperView);
}

uint64_t sub_10000B5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10000B600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  v5 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v8 = type metadata accessor for Optional(255);
    result = type metadata accessor for State(319, v8);
    if (v9 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(result - 8) + 64;
      v10[2] = &unk_100108838;
      v10[3] = &unk_100108838;
      swift_initStructMetadata(a1, 0, 4, v10, a1 + 32);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10000B6B4(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;

  v5 = a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v5 = (_QWORD *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = type metadata accessor for PhoneWallpaperViewModel(255, v8, *(_QWORD *)(a3 + 24), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, a2, v10);
    v11 = *(int *)(a3 + 36);
    v12 = (char *)v5 + v11;
    v13 = &a2[v11];
    v14 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v11], 1, v8))
    {
      v15 = type metadata accessor for Optional(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v13, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
    }
    v17 = type metadata accessor for Optional(255);
    v18 = *(int *)(type metadata accessor for State(0, v17) + 28);
    v19 = *(_QWORD *)&v13[v18];
    *(_QWORD *)&v12[v18] = v19;
    v20 = *(int *)(a3 + 40);
    v21 = *(int *)(a3 + 44);
    v22 = (char *)v5 + v20;
    v23 = &a2[v20];
    *v22 = *v23;
    v24 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v22 + 1) = v24;
    v25 = (_QWORD *)((char *)v5 + v21);
    v26 = &a2[v21];
    v16 = *(_QWORD *)v26;
    v27 = *((_QWORD *)v26 + 1);
    *v25 = v16;
    v25[1] = v27;
    swift_retain(v19);
    swift_retain(v24);
  }
  swift_retain(v16);
  return v5;
}

uint64_t sub_10000B82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for PhoneWallpaperViewModel(255, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = a1 + *(int *)(a2 + 36);
  v10 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v6);
  v11 = type metadata accessor for Optional(255);
  v12 = type metadata accessor for State(0, v11);
  swift_release(*(_QWORD *)(v9 + *(int *)(v12 + 28)));
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44)));
}

uint64_t sub_10000B8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255);
  v16 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v17 = *(_QWORD *)&v12[v16];
  *(_QWORD *)&v11[v16] = v17;
  v18 = *(int *)(a3 + 40);
  v19 = *(int *)(a3 + 44);
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  v22 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v20 + 8) = v22;
  v23 = (_QWORD *)(a1 + v19);
  v24 = (uint64_t *)(a2 + v19);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_retain(v17);
  swift_retain(v22);
  swift_retain(v26);
  return a1;
}

uint64_t sub_10000BA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  v21 = *(_QWORD *)&v12[v19];
  *(_QWORD *)&v11[v19] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = *(int *)(a3 + 40);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v26;
  swift_retain(v26);
  swift_release(v25);
  v27 = *(int *)(a3 + 44);
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *(_QWORD *)(a1 + v27);
  v31 = *v29;
  *(_QWORD *)(a1 + v27) = *v29;
  swift_retain(v31);
  swift_release(v30);
  *(_QWORD *)(v28 + 8) = v29[1];
  return a1;
}

uint64_t sub_10000BC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255);
  v16 = type metadata accessor for State(0, v15);
  *(_QWORD *)&v11[*(int *)(v16 + 28)] = *(_QWORD *)&v12[*(int *)(v16 + 28)];
  v17 = *(int *)(a3 + 44);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_10000BD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  *(_QWORD *)&v11[v19] = *(_QWORD *)&v12[v19];
  swift_release(v20);
  v21 = *(int *)(a3 + 40);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v24 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_release(v24);
  v25 = *(int *)(a3 + 44);
  v26 = a1 + v25;
  v27 = (_QWORD *)(a2 + v25);
  v28 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *v27;
  swift_release(v28);
  *(_QWORD *)(v26 + 8) = v27[1];
  return a1;
}

uint64_t sub_10000BEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000BEEC);
}

uint64_t sub_10000BEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v7 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
    return v11(v12, a2, v10);
  }
  v13 = type metadata accessor for Optional(255);
  v14 = type metadata accessor for State(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v15 + 84) == (_DWORD)a2)
  {
    v10 = v14;
    v12 = a1 + *(int *)(a3 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    return v11(v12, a2, v10);
  }
  v17 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_10000BFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000BFD4);
}

uint64_t sub_10000BFD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
    return v12(v13, a2, a2, v11);
  }
  v14 = type metadata accessor for Optional(255);
  result = type metadata accessor for State(0, v14);
  v16 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v16 + 84) == a3)
  {
    v11 = result;
    v13 = a1 + *(int *)(a4 + 36);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    return v12(v13, a2, a2, v11);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = a2;
  return result;
}

uint64_t sub_10000C0AC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100116078, 1);
}

uint64_t type metadata accessor for SelectAssetButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectAssetButton);
}

uint64_t sub_10000C0F0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100008CC0(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_10000C0FC()
{
  unint64_t result;

  result = qword_100158450;
  if (!qword_100158450)
  {
    result = swift_getWitnessTable(&unk_10010E1A8, &type metadata for LightGradientBackground);
    atomic_store(result, (unint64_t *)&qword_100158450);
  }
  return result;
}

uint64_t sub_10000C140@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000098F0(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10000C150()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, sub_10000B1CC);
}

uint64_t sub_10000C164(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000C1C8()
{
  unint64_t result;

  result = qword_100158468;
  if (!qword_100158468)
  {
    result = swift_getWitnessTable(&unk_10010B1E0, &type metadata for AssetHeader);
    atomic_store(result, (unint64_t *)&qword_100158468);
  }
  return result;
}

uint64_t sub_10000C20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10000C23C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = v1[1];
  v3 = *((_BYTE *)v1 + 16);
  v7 = *v1;
  v8 = v2;
  v9 = v3;
  v6 = a1;
  v4 = sub_100007D50(&qword_10015CE00);
  return Binding.wrappedValue.setter(&v6, v4);
}

uint64_t sub_10000C28C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100007D50(&qword_10015CE00);
  Binding.projectedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_10000C2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_10000C328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PhoneWallpaperViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  return Bindable.projectedValue.getter(v5);
}

uint64_t sub_10000C36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t KeyPath;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t, char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char v151[8];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155[8];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161[8];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;

  v147 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v148 = v4;
  v150 = v5;
  v6 = type metadata accessor for PhoneWallpaperViewModel(255, v4, v5, a2);
  v145 = type metadata accessor for Bindable(0, v6);
  v146 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v144 = (char *)&v111 - v7;
  v133 = type metadata accessor for PlainButtonStyle(0);
  v135 = *(_QWORD *)(v133 - 8);
  v8 = __chkstk_darwin(v133);
  v126 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 - 8);
  v118 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v8);
  v117 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100007D50(&qword_100158538);
  v130 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v121 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100007D50(&qword_100158540);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v123 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100007D50(&qword_100158548);
  __chkstk_darwin(v128);
  v125 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100007D50(&qword_100158550);
  __chkstk_darwin(v15);
  v129 = (uint64_t)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SavedWallpaperView(255, v4, v5, v17);
  WitnessTable = swift_getWitnessTable(&unk_10010FEF0, v18);
  v165 = v18;
  v166 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v165, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 0);
  v165 = v18;
  v166 = WitnessTable;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v165 = OpaqueTypeMetadata2;
  v166 = OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeMetadata2(255, &v165, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 0);
  v23 = sub_10000F31C(&qword_100158558, &qword_100158550, (void (*)(void))sub_10000F0E8);
  v165 = OpaqueTypeMetadata2;
  v166 = OpaqueTypeConformance2;
  v24 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 1);
  v116 = v15;
  v165 = v15;
  v166 = v22;
  v119 = v22;
  v167 = (void *)v23;
  v168 = v24;
  v25 = (void *)v23;
  v122 = v23;
  v26 = v24;
  v120 = v24;
  v27 = swift_getOpaqueTypeMetadata2(0, &v165, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v143 = *(_QWORD *)(v27 - 8);
  v28 = v27;
  v139 = v27;
  __chkstk_darwin(v27);
  v149 = (char *)&v111 - v29;
  v30 = sub_100007D00(&qword_100158578);
  v138 = v30;
  v165 = v15;
  v166 = v22;
  v167 = v25;
  v168 = v26;
  v31 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v137 = v31;
  v136 = sub_10000F4E0(&qword_100158580, &qword_100158578, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v165 = v28;
  v166 = v30;
  v167 = &type metadata for Text;
  v168 = v31;
  v169 = v136;
  v170 = &protocol witness table for Text;
  v141 = swift_getOpaqueTypeMetadata2(0, &v165, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 0);
  v142 = *(_QWORD *)(v141 - 8);
  v32 = __chkstk_darwin(v141);
  v134 = (char *)&v111 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v140 = (uint64_t)&v111 - v34;
  v115 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v35 = v117;
  v36 = v124;
  v115(v117, v124, a1);
  v37 = *(unsigned __int8 *)(v10 + 80);
  v38 = (v37 + 32) & ~v37;
  v113 = v38;
  v118 += v38;
  v114 = v37 | 7;
  v39 = swift_allocObject(&unk_100148528, v118, v37 | 7);
  v40 = v148;
  v41 = v150;
  *(_QWORD *)(v39 + 16) = v148;
  *(_QWORD *)(v39 + 24) = v41;
  v42 = v39 + v38;
  v112 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v43 = v35;
  v112(v42, v35, a1);
  v162 = v40;
  v163 = v41;
  v164 = v36;
  v44 = v36;
  v45 = sub_100007D50(&qword_100158588);
  v46 = sub_10000F1FC();
  v47 = v121;
  v48 = Button.init(action:label:)(sub_10000F1DC, v39, sub_10000F1F0, v161, v45, v46);
  v49 = v126;
  PlainButtonStyle.init()(v48);
  v50 = sub_10000F4E0(&qword_100158568, &qword_100158538, (uint64_t)&protocol conformance descriptor for Button<A>);
  v51 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v52 = v123;
  v53 = v127;
  v54 = v133;
  View.buttonStyle<A>(_:)(v49, v127, v133, v50, v51);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v49, v54);
  v55 = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v47, v53);
  LOBYTE(v50) = static Edge.Set.top.getter(v55);
  v56 = EdgeInsets.init(_all:)(22.0);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = v131;
  v64 = (uint64_t)v125;
  v65 = v132;
  (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v125, v52, v132);
  v66 = v64 + *(int *)(v128 + 36);
  *(_BYTE *)v66 = v50;
  *(double *)(v66 + 8) = v56;
  *(_QWORD *)(v66 + 16) = v58;
  *(_QWORD *)(v66 + 24) = v60;
  *(_QWORD *)(v66 + 32) = v62;
  *(_BYTE *)(v66 + 40) = 0;
  v67 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v52, v65);
  LOBYTE(v50) = static Edge.Set.horizontal.getter(v67);
  v68 = EdgeInsets.init(_all:)(20.0);
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v75 = v129;
  sub_100007E78(v64, v129, &qword_100158548);
  v76 = v116;
  v77 = v75 + *(int *)(v116 + 36);
  *(_BYTE *)v77 = v50;
  *(double *)(v77 + 8) = v68;
  *(_QWORD *)(v77 + 16) = v70;
  *(_QWORD *)(v77 + 24) = v72;
  *(_QWORD *)(v77 + 32) = v74;
  *(_BYTE *)(v77 + 40) = 0;
  sub_100007F38(v64, &qword_100158548);
  v78 = sub_10000C28C();
  v80 = v79;
  LOBYTE(v65) = v81;
  v115(v43, v44, a1);
  v82 = swift_allocObject(&unk_100148550, v118, v114);
  v83 = v148;
  v84 = v150;
  *(_QWORD *)(v82 + 16) = v148;
  *(_QWORD *)(v82 + 24) = v84;
  v112(v82 + v113, v43, a1);
  v85 = swift_checkMetadataState(0, v119);
  View.sheet<A>(isPresented:onDismiss:content:)(v78, v80, v65 & 1, 0, 0, sub_10000F524, v82, v76, v85, v122, v120);
  swift_release(v80);
  swift_release(v82);
  swift_release(v78);
  sub_100007F38(v75, &qword_100158550);
  v89 = sub_10000C2DC(a1, v86, v87, v88);
  v90 = *(_QWORD *)(v89 + 104);
  v135 = *(_QWORD *)(v89 + 96);
  LODWORD(v133) = *(unsigned __int8 *)(v89 + 112);
  v91 = *(_QWORD *)(v89 + 120);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v91);
  swift_release(v89);
  v92 = v144;
  sub_10000C328(a1, v93, v94, v95);
  v96 = v150;
  v159 = v83;
  v160 = v150;
  KeyPath = swift_getKeyPath(&unk_100108960);
  v98 = v145;
  Bindable<A>.subscript.getter(&v165, KeyPath, v145);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v92, v98);
  v99 = v165;
  v100 = v166;
  v156 = v83;
  v157 = v96;
  v158 = v44;
  v152 = v83;
  v153 = v96;
  v154 = v44;
  v101 = v136;
  v102 = v137;
  v103 = v138;
  v104 = v139;
  v105 = (uint64_t)v134;
  v106 = v149;
  View.alert<A, B>(_:isPresented:actions:message:)(v135, v90, v133, v91, v165, v166, v167, sub_10000F5E4, v155, sub_10000F5F0, v151, v139, v138, &type metadata for Text, v137, v136, &protocol witness table for Text);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v90);
  swift_release(v100);
  swift_release(v99);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v106, v104);
  v165 = v104;
  v166 = v103;
  v167 = &type metadata for Text;
  v168 = v102;
  v169 = v101;
  v170 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
  v107 = v140;
  v108 = v141;
  sub_10005135C(v105, v141, v140);
  v109 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
  v109(v105, v108);
  sub_1000424BC(v107, v108, v147);
  return ((uint64_t (*)(uint64_t, uint64_t))v109)(v107, v108);
}

uint64_t sub_10000CE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a3;
  v6 = type metadata accessor for SelectAssetButton(0, a2, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000C2DC(v6, v14, v15, v16);
  v18 = (void *)objc_opt_self(PHPhotoLibrary);
  if (objc_msgSend(v18, "authorizationStatusForAccessLevel:", 1))
  {
    v19 = objc_msgSend(v18, "authorizationStatusForAccessLevel:", 1);
    swift_release(v17);
    if (v19 != (id)3)
    {
      v23 = sub_10000C2DC(v6, v20, v21, v22);
      sub_1000687E4(1);
      return swift_release(v23);
    }
  }
  else
  {
    swift_release(v17);
  }
  v25 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 1, 1, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  type metadata accessor for MainActor(0);
  v26 = static MainActor.shared.getter();
  v27 = *(unsigned __int8 *)(v7 + 80);
  v28 = (v27 + 48) & ~v27;
  v29 = (char *)swift_allocObject(&unk_1001485A0, v28 + v8, v27 | 7);
  *((_QWORD *)v29 + 2) = v26;
  *((_QWORD *)v29 + 3) = &protocol witness table for MainActor;
  v30 = v33;
  *((_QWORD *)v29 + 4) = a2;
  *((_QWORD *)v29 + 5) = v30;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v29[v28], v10, v6);
  v31 = sub_1000956A4((uint64_t)v13, (uint64_t)&unk_100158688, (uint64_t)v29);
  return swift_release(v31);
}

uint64_t sub_10000D030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter();
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v8;
  v6[7] = v9;
  return swift_task_switch(sub_10000D0A0, v8, v9);
}

uint64_t sub_10000D0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v13;

  v5 = v4[2];
  v6 = type metadata accessor for SelectAssetButton(0, v4[3], v4[4], a4);
  v4[8] = v6;
  v4[9] = sub_10000C2DC(v6, v7, v8, v9);
  v10 = v5 + *(int *)(v6 + 36);
  v13 = (char *)&dword_10015B5D8 + dword_10015B5D8;
  v11 = (_QWORD *)swift_task_alloc(unk_10015B5DC);
  v4[10] = v11;
  *v11 = v4;
  v11[1] = sub_10000D12C;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD))v13)(v10, v4[3], v4[4]);
}

uint64_t sub_10000D12C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10000D2B0;
  }
  else
  {
    swift_release(v2[9]);
    v4 = v2[6];
    v5 = v2[7];
    v6 = sub_10000D198;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10000D198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 40));
  sub_10000C23C(1);
  v6 = sub_10000C2DC(v1, v3, v4, v5);
  v7 = *(_QWORD *)(v6 + 224);
  v8 = *(_QWORD *)(v6 + 232);
  swift_bridgeObjectRetain(v8);
  swift_release(v6);
  v9 = (uint64_t *)(v2 + *(int *)(v1 + 44));
  v10 = *v9;
  if (*v9)
  {
    swift_retain(*v9);
    sub_10008A874(v7, v8, 8, 10, 28, 0, 3u, v10);
    swift_release(v10);
    swift_bridgeObjectRelease(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = v9[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    return EnvironmentObject.error()(0, v12, v13, v14);
  }
}

uint64_t sub_10000D2B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D2F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v48;
  void *v49;
  _BYTE v51[12];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _OWORD v75[17];

  v68 = a3;
  v67 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v67);
  v6 = &v51[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = type metadata accessor for RoundedRectangle(0);
  v7 = __chkstk_darwin(v66);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = static VerticalAlignment.center.getter(v7);
  v10 = sub_10000D650(a1, a2, (uint64_t)v75);
  v63 = v75[0];
  v62 = *(_QWORD *)&v75[1];
  v11 = BYTE8(v75[1]);
  v64 = *(_QWORD *)&v75[3];
  v12 = BYTE8(v75[3]);
  v61 = v75[2];
  v13 = static Font.body.getter(v10);
  static Font.Weight.semibold.getter();
  v60 = Font.weight(_:)(v13);
  swift_release(v13);
  KeyPath = swift_getKeyPath(&unk_100108998);
  v58 = static Color.white.getter();
  v57 = static Edge.Set.horizontal.getter(v58);
  v14 = EdgeInsets.init(_all:)(20.0);
  v55 = v15;
  v56 = v14;
  v53 = v17;
  v54 = v16;
  v72 = 0;
  v71 = v11;
  v70 = v12;
  v69 = 0;
  v52 = static Edge.Set.top.getter(v18);
  v19 = EdgeInsets.init(_all:)(14.4);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = v72;
  v27 = v71;
  LOBYTE(v13) = v70;
  LOBYTE(a1) = v69;
  v73 = 0;
  v29 = static Edge.Set.bottom.getter(v28);
  v30 = EdgeInsets.init(_all:)(13.6);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = v73;
  v74 = 0;
  v38 = static Color.blue.getter();
  v39 = static Edge.Set.all.getter(v38);
  *(_QWORD *)&v75[0] = v65;
  *((_QWORD *)&v75[0] + 1) = 0x4010000000000000;
  LOBYTE(v75[1]) = v26;
  *(_OWORD *)((char *)&v75[1] + 8) = v63;
  *((_QWORD *)&v75[2] + 1) = v62;
  LOBYTE(v75[3]) = v27;
  *(_OWORD *)((char *)&v75[3] + 8) = v61;
  *((_QWORD *)&v75[4] + 1) = v64;
  LOBYTE(v75[5]) = v13;
  *((_QWORD *)&v75[5] + 1) = KeyPath;
  *(_QWORD *)&v75[6] = v60;
  *((_QWORD *)&v75[6] + 1) = v58;
  LOBYTE(v75[7]) = v57;
  *((double *)&v75[7] + 1) = v56;
  *(_QWORD *)&v75[8] = v55;
  *((_QWORD *)&v75[8] + 1) = v54;
  *(_QWORD *)&v75[9] = v53;
  BYTE8(v75[9]) = a1;
  LOBYTE(v75[10]) = v52;
  *((double *)&v75[10] + 1) = v19;
  *(_QWORD *)&v75[11] = v21;
  *((_QWORD *)&v75[11] + 1) = v23;
  *(_QWORD *)&v75[12] = v25;
  BYTE8(v75[12]) = v37;
  LOBYTE(v75[13]) = v29;
  *((double *)&v75[13] + 1) = v30;
  *(_QWORD *)&v75[14] = v32;
  *((_QWORD *)&v75[14] + 1) = v34;
  *(_QWORD *)&v75[15] = v36;
  BYTE8(v75[15]) = v74;
  *(_QWORD *)&v75[16] = v38;
  BYTE8(v75[16]) = v39;
  v40 = (char *)v9 + *(int *)(v66 + 20);
  v41 = enum case for RoundedCornerStyle.continuous(_:);
  v42 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v40, v41, v42);
  __asm { FMOV            V0.2D, #12.0 }
  *v9 = _Q0;
  sub_10000F760((uint64_t)v9, (uint64_t)v6);
  *(_WORD *)&v6[*(int *)(v67 + 36)] = 256;
  v48 = sub_100007D50(&qword_100158588);
  v49 = v68;
  sub_100007E78((uint64_t)v6, (uint64_t)v68 + *(int *)(v48 + 36), &qword_100158640);
  memcpy(v49, v75, 0x109uLL);
  sub_10000F7A4((uint64_t)v75);
  sub_100007F38((uint64_t)v6, &qword_100158640);
  sub_10000F854((uint64_t)v9);
  return sub_10000F890((uint64_t)v75);
}

uint64_t sub_10000D650@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t KeyPath;

  v6 = Image.init(systemName:)(0x656E6F687069, 0xE600000000000000);
  v8 = type metadata accessor for SelectAssetButton(0, a1, a2, v7);
  v12 = sub_10000C2DC(v8, v9, v10, v11);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = *(_QWORD *)(v12 + 88);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_release(v12);
  v17 = Text.init(_:tableName:bundle:comment:)(v13, v14, v15, v16, 0, 0, 0, 0, 0, 256);
  v19 = v18;
  v21 = v20;
  LOBYTE(v15) = v22 & 1;
  KeyPath = swift_getKeyPath(&unk_1001089C8);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 16) = v19;
  *(_BYTE *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v21;
  *(_QWORD *)(a3 + 40) = KeyPath;
  *(_QWORD *)(a3 + 48) = 1;
  *(_BYTE *)(a3 + 56) = 0;
  swift_retain(v6);
  sub_10000F844(v17, v19, v15);
  swift_bridgeObjectRetain(v21);
  swift_retain(KeyPath);
  sub_100007D90(v17, v19, v15);
  swift_release(v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_10000D7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v53 = a4;
  v6 = sub_100007D50(&qword_100158670);
  v7 = __chkstk_darwin(v6);
  v45 = (_QWORD **)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SavedWallpaperView(0, a2, a3, v12);
  v52 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v44 = (_QWORD **)((char *)&v44 - v14);
  WitnessTable = swift_getWitnessTable(&unk_10010FEF0, v13);
  v54 = v13;
  v55 = WitnessTable;
  v16 = WitnessTable;
  v48 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v54, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 0);
  v51 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v47 = (char *)&v44 - v18;
  v54 = v13;
  v55 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v54 = OpaqueTypeMetadata2;
  v55 = OpaqueTypeConformance2;
  v19 = swift_getOpaqueTypeMetadata2(0, &v54, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 0);
  v50 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v44 - v23;
  type metadata accessor for SavedWallpaperViewModel(0, a2, a3, v25);
  v27 = type metadata accessor for SelectAssetButton(0, a2, a3, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v46 + *(int *)(v27 + 36), a2);
  v28 = (uint64_t *)sub_100016768((uint64_t)v11);
  v29 = v45;
  sub_1000C2704(v45);
  v30 = v44;
  sub_1000C2748(v28, (uint64_t)v29, v44);
  v31 = sub_100007D50(&qword_100158678);
  v32 = type metadata accessor for PresentationDetent(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 72);
  v35 = *(unsigned __int8 *)(v33 + 80);
  v36 = (v35 + 32) & ~v35;
  v37 = swift_allocObject(v31, v36 + 2 * v34, v35 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_100108810;
  v38 = static PresentationDetent.medium.getter();
  static PresentationDetent.large.getter(v38);
  v39 = sub_100098A00(v37);
  swift_setDeallocating(v37);
  swift_arrayDestroy(v37 + v36, 2, v32);
  swift_deallocClassInstance(v37, 32, 7);
  v40 = v47;
  View.presentationDetents(_:)(v39, v13, v48);
  swift_bridgeObjectRelease(v39);
  (*(void (**)(_QWORD *, uint64_t))(v52 + 8))(v30, v13);
  v41 = OpaqueTypeConformance2;
  View.presentationDragIndicator(_:)(2, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v40, OpaqueTypeMetadata2);
  v54 = OpaqueTypeMetadata2;
  v55 = v41;
  swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 1);
  sub_10005135C((uint64_t)v22, v19, (uint64_t)v24);
  v42 = *(void (**)(char *, uint64_t))(v50 + 8);
  v42(v22, v19);
  sub_1000424BC((uint64_t)v24, v19, v53);
  return ((uint64_t (*)(char *, uint64_t))v42)(v24, v19);
}

uint64_t sub_10000DB68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000687F8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10000DB94(char *a1)
{
  return sub_1000687E4(*a1);
}

uint64_t sub_10000DBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  void (*v62)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_BYTE *, uint64_t);
  _BYTE v68[12];
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = a5;
  v79 = a2;
  v80 = a3;
  v6 = type metadata accessor for SelectAssetButton(0, a2, a3, a4);
  v78 = *(_QWORD *)(v6 - 8);
  v76 = *(_QWORD *)(v78 + 64);
  __chkstk_darwin(v6);
  v77 = &v68[-v7];
  v84 = sub_100007D50(&qword_100158648);
  v82 = *(_QWORD *)(v84 - 8);
  v8 = __chkstk_darwin(v84);
  v83 = &v68[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v81 = &v68[-v10];
  v11 = sub_100007D50(&qword_100158650);
  v74 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v73 = &v68[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v13);
  v15 = &v68[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = &v68[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  v22 = &v68[-v21];
  v23 = sub_100007D50(&qword_100158660);
  v24 = __chkstk_darwin(v23);
  v75 = &v68[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v27 = &v68[-v26];
  v31 = sub_10000C2DC(v6, v28, v29, v30);
  sub_100068848();
  swift_release(v31);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100007F38((uint64_t)v15, &qword_100158658);
    v32 = 1;
    v33 = v74;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v22, v15, v16);
    v37 = sub_10000C2DC(v6, v34, v35, v36);
    v70 = *(_QWORD *)(v37 + 160);
    v71 = v11;
    v38 = *(_QWORD *)(v37 + 168);
    v69 = *(unsigned __int8 *)(v37 + 176);
    v72 = a1;
    v39 = *(_QWORD *)(v37 + 184);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_release(v37);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v20, v22, v16);
    v40 = v73;
    v41 = v38;
    v11 = v71;
    v42 = v39;
    a1 = v72;
    Link<>.init(_:sensitiveUrl:)(v70, v41, v69, v42, v20);
    (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v22, v16);
    v43 = v74;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 32))(v27, v40, v11);
    v32 = 0;
    v33 = v43;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v27, v32, 1, v11);
  v47 = sub_10000C2DC(v6, v44, v45, v46);
  v48 = *(_QWORD *)(v47 + 192);
  v49 = *(_QWORD *)(v47 + 200);
  v50 = *(unsigned __int8 *)(v47 + 208);
  v51 = *(_QWORD *)(v47 + 216);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v51);
  swift_release(v47);
  v53 = v77;
  v52 = v78;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v78 + 16))(v77, a1, v6);
  v54 = *(unsigned __int8 *)(v52 + 80);
  v55 = (v54 + 32) & ~v54;
  v56 = swift_allocObject(&unk_100148578, v55 + v76, v54 | 7);
  v57 = v80;
  *(_QWORD *)(v56 + 16) = v79;
  *(_QWORD *)(v56 + 24) = v57;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v52 + 32))(v56 + v55, v53, v6);
  v58 = v81;
  Button<>.init(_:action:)(v48, v49, v50, v51, sub_10000F6E0, v56);
  v59 = v75;
  sub_100007E78((uint64_t)v27, (uint64_t)v75, &qword_100158660);
  v61 = v82;
  v60 = v83;
  v62 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 16);
  v63 = v84;
  v62(v83, v58, v84);
  v64 = v85;
  sub_100007E78((uint64_t)v59, v85, &qword_100158660);
  v65 = sub_100007D50(&qword_100158668);
  v62((_BYTE *)(v64 + *(int *)(v65 + 48)), v60, v63);
  v66 = *(void (**)(_BYTE *, uint64_t))(v61 + 8);
  v66(v58, v63);
  sub_100007F38((uint64_t)v27, &qword_100158660);
  v66(v60, v63);
  return sub_100007F38((uint64_t)v59, &qword_100158660);
}

uint64_t sub_10000E058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for SelectAssetButton(0, a2, a3, a4);
  v8 = sub_10000C2DC(v4, v5, v6, v7);
  sub_1000687E4(0);
  return swift_release(v8);
}

uint64_t sub_10000E090@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v5 = type metadata accessor for SelectAssetButton(0, a1, a2, a3);
  v9 = sub_10000C2DC(v5, v6, v7, v8);
  v10 = *(_QWORD *)(v9 + 128);
  v11 = *(_QWORD *)(v9 + 136);
  v12 = *(unsigned __int8 *)(v9 + 144);
  v13 = *(_QWORD *)(v9 + 152);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_release(v9);
  result = Text.init(_:tableName:bundle:comment:)(v10, v11, v12, v13, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v16 & 1;
  *(_QWORD *)(a4 + 24) = v17;
  return result;
}

uint64_t sub_10000E140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for Optional(0);
  __chkstk_darwin();
  v4 = (char *)&v8 - v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - v3, a1, v2);
  v6 = type metadata accessor for State(0, v2);
  return State.wrappedValue.setter(v4, v6);
}

uint64_t sub_10000E1E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10000A8AC(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10000E1F0()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PhoneWallpaperView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000AE64);
}

uint64_t sub_10000E204@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000AF44(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_10000E210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158480;
  if (!qword_100158480)
  {
    v1 = sub_100007D00(&qword_100158478);
    sub_10000E27C();
    sub_10000E2C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158480);
  }
  return result;
}

unint64_t sub_10000E27C()
{
  unint64_t result;

  result = qword_100158488;
  if (!qword_100158488)
  {
    result = swift_getWitnessTable(&unk_10010B190, &type metadata for Bezel);
    atomic_store(result, (unint64_t *)&qword_100158488);
  }
  return result;
}

unint64_t sub_10000E2C0()
{
  unint64_t result;

  result = qword_100158490;
  if (!qword_100158490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_100158490);
  }
  return result;
}

double sub_10000E304@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000AFCC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10000E310@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10000AB00(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10000E320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for PhoneWallpaperView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  v14 = type metadata accessor for PhoneWallpaperViewModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v4 + v10, v15);
  v16 = v4 + v10 + v7[9];
  v17 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v5);
  v18 = type metadata accessor for Optional(255);
  v19 = type metadata accessor for State(0, v18);
  swift_release(*(_QWORD *)(v16 + *(int *)(v19 + 28)));
  swift_release(*(_QWORD *)(v12 + v7[10] + 8));
  swift_release(*(_QWORD *)(v12 + v7[11]));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

int *sub_10000E440@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for PhoneWallpaperView(0, v4, v5, a1);
  return sub_10000AD78(v4, v5, a2);
}

uint64_t sub_10000E4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[4];

  v10[0] = &unk_1001088E8;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  v4 = v2;
  if (v5 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v6 = type metadata accessor for PhoneWallpaperViewModel(255, v2, *(_QWORD *)(a1 + 24), v3);
    v7 = type metadata accessor for Bindable(319, v6);
    v4 = v7;
    if (v8 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v7 - 8) + 64;
      v10[3] = &unk_100108838;
      swift_initStructMetadata(a1, 0, 4, v10, a1 + 32);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_10000E564(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = *(int *)(a3 + 36);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = *(_QWORD *)(a3 + 16);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain(v5);
    swift_retain(v8);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 40);
    v15 = a1 + v14;
    v16 = (uint64_t)a2 + v14;
    v18 = type metadata accessor for PhoneWallpaperViewModel(255, v12, *(_QWORD *)(a3 + 24), v17);
    v19 = type metadata accessor for Bindable(0, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v16, v19);
    v20 = *(int *)(a3 + 44);
    v21 = (_QWORD *)(a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v5 = *v22;
    v23 = v22[1];
    *v21 = v5;
    v21[1] = v23;
  }
  swift_retain(v5);
  return a1;
}

uint64_t sub_10000E668(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)a1);
  swift_release(*((_QWORD *)a1 + 1));
  v4 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(&a1[*(int *)(a2 + 36)], v4);
  v5 = &a1[*(int *)(a2 + 40)];
  v7 = type metadata accessor for PhoneWallpaperViewModel(255, v4, *(_QWORD *)(a2 + 24), v6);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
  return swift_release(*(_QWORD *)&a1[*(int *)(a2 + 44)]);
}

uint64_t sub_10000E6FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain(v6);
  swift_retain(v7);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 40);
  v14 = a1 + v13;
  v15 = (uint64_t)a2 + v13;
  v17 = type metadata accessor for PhoneWallpaperViewModel(255, v11, *(_QWORD *)(a3 + 24), v16);
  v18 = type metadata accessor for Bindable(0, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
  v19 = *(int *)(a3 + 44);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  *v20 = v22;
  v20[1] = v23;
  swift_retain(v22);
  return a1;
}

uint64_t *sub_10000E7D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))((uint64_t)a1 + *(int *)(a3 + 36), (uint64_t)a2 + *(int *)(a3 + 36), v10);
  v11 = *(int *)(a3 + 40);
  v12 = (uint64_t)a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v15 = type metadata accessor for PhoneWallpaperViewModel(255, v10, *(_QWORD *)(a3 + 24), v14);
  v16 = type metadata accessor for Bindable(0, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v12, v13, v16);
  v17 = *(int *)(a3 + 44);
  v18 = (uint64_t)a1 + v17;
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = *(uint64_t *)((char *)a1 + v17);
  v21 = *v19;
  *(uint64_t *)((char *)a1 + v17) = *v19;
  swift_retain(v21);
  swift_release(v20);
  *(_QWORD *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_10000E8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1 + *(int *)(a3 + 36), a2 + *(int *)(a3 + 36), v6);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v11 = type metadata accessor for PhoneWallpaperViewModel(255, v6, *(_QWORD *)(a3 + 24), v10);
  v12 = type metadata accessor for Bindable(0, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t *sub_10000E988(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))((uint64_t)a1 + *(int *)(a3 + 36), (uint64_t)a2 + *(int *)(a3 + 36), v8);
  v9 = *(int *)(a3 + 40);
  v10 = (uint64_t)a1 + v9;
  v11 = (uint64_t)a2 + v9;
  v13 = type metadata accessor for PhoneWallpaperViewModel(255, v8, *(_QWORD *)(a3 + 24), v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v10, v11, v14);
  v15 = *(int *)(a3 + 44);
  v16 = (uint64_t)a1 + v15;
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = *(uint64_t *)((char *)a1 + v15);
  *(uint64_t *)((char *)a1 + v15) = *v17;
  swift_release(v18);
  *(_QWORD *)(v16 + 8) = v17[1];
  return a1;
}

uint64_t sub_10000EA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000EA78);
}

uint64_t sub_10000EA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v8 = a2;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = a1 + *(int *)(a3 + 36);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      v13 = *(_QWORD *)(a3 + 16);
    }
    else
    {
      v14 = type metadata accessor for PhoneWallpaperViewModel(255, v9, *(_QWORD *)(a3 + 24), a4);
      v13 = type metadata accessor for Bindable(0, v14);
      v11 = a1 + *(int *)(a3 + 40);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
      a2 = v8;
    }
    return v12(v11, a2, v13);
  }
}

uint64_t sub_10000EB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000EB40);
}

uint64_t sub_10000EB40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = *(_QWORD *)(a4 + 16);
    v8 = *(_QWORD *)(v7 - 8);
    if (*(_DWORD *)(v8 + 84) == a3)
    {
      v9 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for PhoneWallpaperViewModel(255, v7, *(_QWORD *)(a4 + 24), v7);
      v7 = type metadata accessor for Bindable(0, v10);
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5 + v9, a2, a2, v7);
  }
  return result;
}

uint64_t sub_10000EBE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t TupleTypeMetadata3;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_100158418);
  v4 = type metadata accessor for Array(255, v1);
  v5 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v7 = *(uint64_t **)(v2 + 8);
  v52 = v4;
  v53 = v1;
  v54 = v5;
  v55 = (void *)WitnessTable;
  v56 = v7;
  v8 = type metadata accessor for ForEach(255, &v52);
  sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v10 = type metadata accessor for HStack(255, v8, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  v52 = v10;
  v53 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v52 = v10;
  v53 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v14 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v14);
  v52 = v14;
  v53 = v15;
  v16 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v17 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v52 = v14;
  v53 = v15;
  v18 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v19 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v20 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v52 = v19;
  v53 = v1;
  v54 = v20;
  v55 = v7;
  v21 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v52 = v19;
  v53 = v1;
  v54 = v20;
  v55 = v7;
  v22 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v52 = v21;
  v53 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _FrameLayout);
  v25 = type metadata accessor for Optional(255);
  v52 = v21;
  v53 = v22;
  swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v27 = v7[1];
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v25);
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v55 = (void *)v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v30 = sub_100007D00(&qword_100158428);
  v31 = type metadata accessor for ModifiedContent(255, v29, v30);
  v32 = sub_100007D00(&qword_100158430);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = type metadata accessor for ModifiedContent(255, v33, &type metadata for _PaddingLayout);
  type metadata accessor for PageControl(255, v1, v27, v35);
  v36 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for VStack(255, v38, v39);
  v41 = type metadata accessor for ModifiedContent(255, v40, &type metadata for _AppearanceActionModifier);
  type metadata accessor for SelectAssetButton(255, v1, v2, v42);
  v43 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v41, v43, 0, 0);
  v45 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v46 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v45);
  v47 = type metadata accessor for VStack(255, v45, v46);
  v48 = type metadata accessor for ModifiedContent(255, v47, &type metadata for _PaddingLayout);
  v49 = sub_100007D00(&qword_100158438);
  v50 = type metadata accessor for ModifiedContent(255, v48, v49);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v48);
  sub_10000F4E0(&qword_100158458, &qword_100158438, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
}

uint64_t sub_10000F0B4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001160AC, 1);
}

unint64_t sub_10000F0E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100158560;
  if (!qword_100158560)
  {
    v1 = sub_100007D00(&qword_100158548);
    v2[0] = sub_100007D00(&qword_100158538);
    v2[1] = type metadata accessor for PlainButtonStyle(255);
    v2[2] = sub_10000F4E0(&qword_100158568, &qword_100158538, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158560);
  }
  return result;
}

uint64_t sub_10000F1DC()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectAssetButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000CE30);
}

uint64_t sub_10000F1F0@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_10000D2F0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10000F1FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158590;
  if (!qword_100158590)
  {
    v1 = sub_100007D00(&qword_100158588);
    sub_10000F280();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158590);
  }
  return result;
}

unint64_t sub_10000F280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158598;
  if (!qword_100158598)
  {
    v1 = sub_100007D00(&qword_1001585A0);
    sub_10000F31C(&qword_1001585A8, &qword_1001585B0, (void (*)(void))sub_10000F388);
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158598);
  }
  return result;
}

uint64_t sub_10000F31C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F388()
{
  return sub_10000F31C(&qword_1001585B8, &qword_1001585C0, (void (*)(void))sub_10000F3A4);
}

uint64_t sub_10000F3A4()
{
  return sub_10000F31C(&qword_1001585C8, &qword_1001585D0, (void (*)(void))sub_10000F3C0);
}

unint64_t sub_10000F3C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001585D8;
  if (!qword_1001585D8)
  {
    v1 = sub_100007D00(&qword_1001585E0);
    sub_10000F444();
    sub_10000F4E0(&qword_100158618, &qword_100158620, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001585D8);
  }
  return result;
}

unint64_t sub_10000F444()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001585E8;
  if (!qword_1001585E8)
  {
    v1 = sub_100007D00(&qword_1001585F0);
    sub_10000F4E0(&qword_1001585F8, &qword_100158600, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001585E8);
  }
  return result;
}

uint64_t sub_10000F4E0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F524@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SelectAssetButton(0, v4, v5, a1) - 8) + 80);
  return sub_10000D7A8(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_10000F57C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000687F8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10000F5A8(char *a1)
{
  return sub_1000687E4(*a1);
}

uint64_t sub_10000F5CC()
{
  return 16;
}

__n128 sub_10000F5D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10000F5E4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10000DBB8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10000F5F0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000E090(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_10000F600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for SelectAssetButton(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  v13 = v4 + v10;
  swift_release(*(_QWORD *)(v4 + v10));
  swift_release(*(_QWORD *)(v13 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v13 + v7[9], v5);
  v14 = v13 + v7[10];
  v16 = type metadata accessor for PhoneWallpaperViewModel(255, v5, v6, v15);
  v17 = type metadata accessor for Bindable(0, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v14, v17);
  swift_release(*(_QWORD *)(v13 + v7[11]));
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_10000F6E0()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectAssetButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000E058);
}

uint64_t sub_10000F6F4(uint64_t (*a1)(_QWORD, uint64_t, uint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1(0, v3, v4) - 8) + 80);
  return a2(v2 + ((v5 + 32) & ~v5), v3, v4);
}

uint64_t sub_10000F760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F7A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 256);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10000F844(v2, v3, v4);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_10000F844(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000F854(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000F890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 256);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_100007D90(v2, v3, v4);
  swift_release(v10);
  swift_release(v9);
  swift_release(v7);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  swift_release(v8);
  return a1;
}

uint64_t sub_10000F938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *((_QWORD *)v4 + 4);
  v6 = *((_QWORD *)v4 + 5);
  v7 = (int *)type metadata accessor for SelectAssetButton(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 48) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v13 = &v4[v10];
  swift_release(*(_QWORD *)&v4[v10]);
  swift_release(*(_QWORD *)&v4[v10 + 8]);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v4[v10 + v7[9]], v5);
  v14 = &v4[v10 + v7[10]];
  v16 = type metadata accessor for PhoneWallpaperViewModel(255, v5, v6, v15);
  v17 = type metadata accessor for Bindable(0, v16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v14, v17);
  swift_release(*(_QWORD *)&v13[v7[11]]);
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_10000FA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SelectAssetButton(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_100158684);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10000FAC0;
  return sub_10000D030(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_10000FAC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000FB08(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_100158550);
  v5 = type metadata accessor for SavedWallpaperView(255, v1, v2, v4);
  WitnessTable = swift_getWitnessTable(&unk_10010FEF0, v5);
  v17 = v5;
  v18 = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v17, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 0);
  v17 = v5;
  v18 = WitnessTable;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v17 = OpaqueTypeMetadata2;
  v18 = OpaqueTypeConformance2;
  v9 = swift_getOpaqueTypeMetadata2(255, &v17, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 0);
  v10 = sub_10000F31C(&qword_100158558, &qword_100158550, (void (*)(void))sub_10000F0E8);
  v17 = OpaqueTypeMetadata2;
  v18 = OpaqueTypeConformance2;
  v11 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.presentationDragIndicator(_:)>>, 1);
  v17 = v3;
  v18 = v9;
  v19 = (void *)v10;
  v20 = v11;
  v12 = swift_getOpaqueTypeMetadata2(255, &v17, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v13 = sub_100007D00(&qword_100158578);
  v17 = v3;
  v18 = v9;
  v19 = (void *)v10;
  v20 = v11;
  v14 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v15 = sub_10000F4E0(&qword_100158580, &qword_100158578, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v17 = v12;
  v18 = v13;
  v19 = &type metadata for Text;
  v20 = v14;
  v21 = v15;
  v22 = &protocol witness table for Text;
  return swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
}

uint64_t sub_10000FCBC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007428(&qword_100158690, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum.Photo);
  result = sub_100007428(&qword_100158698, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum.Photo);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000FD18()
{
  return sub_100007428(&qword_1001586A0, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum.Photo, (uint64_t)&unk_100108A00);
}

uint64_t sub_10000FD48(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007428(&qword_1001586D8, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum);
  result = sub_100007428(qword_1001586E0, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhotoAlbum);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10000FDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_10000FDE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t TupleTypeMetadata2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t TupleTypeMetadata3;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96[16];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _QWORD *v112;

  v95 = a2;
  v3 = sub_100007D00(&qword_100158418);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a1;
  v94 = a1;
  v6 = type metadata accessor for Array(255, v4);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD **)(v9 + 8);
  v108 = v6;
  v109 = v4;
  v110 = v7;
  v111 = (void *)WitnessTable;
  v112 = v10;
  v11 = type metadata accessor for ForEach(255, &v108);
  v107 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v13 = type metadata accessor for HStack(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v13);
  v108 = v13;
  v109 = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v108 = v13;
  v109 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v17 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v17);
  v108 = v17;
  v109 = v18;
  v19 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v20 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v108 = v17;
  v109 = v18;
  v21 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v108 = v19;
  v109 = v20;
  v110 = v21;
  v111 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v22 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v108 = v19;
  v109 = v20;
  v110 = v21;
  v111 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v23 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v108 = v22;
  v109 = v4;
  v110 = v23;
  v111 = v10;
  v24 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v108 = v22;
  v109 = v4;
  v110 = v23;
  v111 = v10;
  v25 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v108 = v24;
  v109 = v25;
  v26 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _FrameLayout);
  v28 = type metadata accessor for Optional(255);
  v108 = v24;
  v109 = v25;
  v105 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v106 = &protocol witness table for _FrameLayout;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v104 = v10[1];
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v28);
  v108 = v27;
  v109 = v28;
  v110 = v29;
  v111 = (void *)v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v108, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v32 = sub_100007D00(&qword_100158428);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = sub_100007D00(&qword_100158768);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  type metadata accessor for PageControl(255, v4, v104, v37);
  v38 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v36, v38, 0, 0);
  v40 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v40);
  v42 = type metadata accessor for VStack(255, v40, v41);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _AppearanceActionModifier);
  _s15ShazamEventsApp17SelectAssetButtonVMa_0(255, v4, v9, v44);
  v45 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v43, v45, 0, 0);
  v47 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v47);
  v49 = type metadata accessor for VStack(0, v47, v48);
  v88 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v51 = (char *)&v88 - v50;
  v52 = type metadata accessor for ModifiedContent(0, v49, &type metadata for _PaddingLayout);
  v91 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v54 = (char *)&v88 - v53;
  v55 = sub_100007D00(&qword_100158438);
  v56 = type metadata accessor for ModifiedContent(0, v52, v55);
  v92 = *(_QWORD *)(v56 - 8);
  v57 = __chkstk_darwin(v56);
  v89 = (char *)&v88 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __chkstk_darwin(v57);
  v90 = (uint64_t)&v88 - v60;
  v97 = v4;
  v98 = v9;
  v99 = v93;
  v61 = static HorizontalAlignment.center.getter(v59);
  v62 = VStack.init(alignment:spacing:content:)(v61, 0, 0, sub_1000137A4, v96, v47, v48);
  v63 = static Edge.Set.top.getter(v62);
  v64 = v94;
  v68 = sub_10000FDA4(v94, v65, v66, v67);
  LODWORD(v9) = *(unsigned __int8 *)(v68 + 136);
  swift_release(v68);
  if ((_DWORD)v9)
    v69 = 0x4042000000000000;
  else
    v69 = 0;
  v70 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v49);
  View.padding(_:_:)(v63, v69, 0, v49, v70);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v51, v49);
  v74 = sub_10000FDA4(v64, v71, v72, v73);
  v75 = *(_BYTE *)(v74 + 136);
  v76 = swift_release(v74);
  LOBYTE(v108) = (v75 & 1) == 0;
  v77 = static Alignment.center.getter(v76);
  v79 = v78;
  v80 = sub_100007D50(&qword_100158440);
  v102 = v70;
  v103 = &protocol witness table for _PaddingLayout;
  v81 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
  v82 = sub_10000C164(&qword_100158448, &qword_100158440, (void (*)(void))sub_10000C0FC);
  v83 = (uint64_t)v89;
  View.background<A>(_:alignment:)(&v108, v77, v79, v52, v80, v81, v82);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v54, v52);
  v84 = sub_10000F4E0(&qword_100158458, &qword_100158438, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v100 = v81;
  v101 = v84;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
  v85 = v90;
  sub_10005135C(v83, v56, v90);
  v86 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v86(v83, v56);
  sub_1000424BC(v85, v56, v95);
  return ((uint64_t (*)(uint64_t, uint64_t))v86)(v85, v56);
}

uint64_t sub_10001052C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *WitnessTable;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t TupleTypeMetadata2;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[3];
  uint64_t v156[5];
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;

  v150 = a1;
  v146 = a5;
  v7 = _s15ShazamEventsApp17SelectAssetButtonVMa_0(0, a2, a3, a4);
  v141 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v123 = (uint64_t)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v124 = (uint64_t)&v119 - v10;
  v11 = type metadata accessor for Optional(0);
  v119 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v138 = (char *)&v119 - v13;
  v139 = *(_QWORD *)(a2 - 8);
  v14 = __chkstk_darwin(v12);
  v121 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v120 = (char *)&v119 - v16;
  v145 = v7;
  v144 = type metadata accessor for Optional(0);
  v140 = *(_QWORD *)(v144 - 8);
  v17 = __chkstk_darwin(v144);
  v143 = (uint64_t)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v142 = (uint64_t)&v119 - v19;
  v21 = type metadata accessor for WatchFacesView(0, a2, a3, v20);
  v136 = *(_QWORD *)(v21 - 8);
  v134 = *(_QWORD *)(v136 + 64);
  __chkstk_darwin(v21);
  v135 = (char *)&v119 - v22;
  v23 = type metadata accessor for Array(255, a2);
  v24 = type metadata accessor for ScrollAsset(255);
  WitnessTable = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
  v137 = a3;
  v26 = *(uint64_t **)(a3 + 8);
  v161 = v23;
  v162 = a2;
  v163 = v24;
  v164 = WitnessTable;
  v165 = v26;
  v27 = type metadata accessor for ForEach(255, &v161);
  v160 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v27);
  v29 = type metadata accessor for HStack(255, v27, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v29);
  v161 = v29;
  v162 = v30;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v161, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v161 = v29;
  v162 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v161, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v33 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v33);
  v161 = v33;
  v162 = v34;
  v35 = swift_getOpaqueTypeMetadata2(255, &v161, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v36 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v161 = v33;
  v162 = v34;
  v37 = swift_getOpaqueTypeConformance2(&v161, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v161 = v35;
  v162 = v36;
  v163 = v37;
  v164 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v38 = swift_getOpaqueTypeMetadata2(255, &v161, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v161 = v35;
  v162 = v36;
  v163 = v37;
  v164 = (uint64_t *)&protocol witness table for ViewAlignedScrollTargetBehavior;
  v39 = swift_getOpaqueTypeConformance2(&v161, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v161 = v38;
  v162 = a2;
  v163 = v39;
  v164 = v26;
  v40 = swift_getOpaqueTypeMetadata2(255, &v161, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v161 = v38;
  v162 = a2;
  v163 = v39;
  v164 = v26;
  v41 = swift_getOpaqueTypeConformance2(&v161, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v161 = v40;
  v162 = v41;
  v42 = swift_getOpaqueTypeMetadata2(255, &v161, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v43 = type metadata accessor for ModifiedContent(255, v42, &type metadata for _FrameLayout);
  v161 = v40;
  v162 = v41;
  v158 = swift_getOpaqueTypeConformance2(&v161, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v159 = &protocol witness table for _FrameLayout;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v157 = v26[1];
  v45 = v157;
  v46 = (uint64_t *)swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v11);
  v161 = v43;
  v162 = v11;
  v122 = v11;
  v163 = v44;
  v164 = v46;
  v47 = swift_getOpaqueTypeMetadata2(255, &v161, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v48 = sub_100007D00(&qword_100158428);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v50 = sub_100007D00(&qword_100158768);
  v51 = type metadata accessor for ModifiedContent(255, v49, v50);
  v52 = type metadata accessor for ModifiedContent(255, v51, &type metadata for _PaddingLayout);
  v53 = a2;
  type metadata accessor for PageControl(255, a2, v45, v54);
  v55 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v52, v55, 0, 0);
  v57 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v125 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v57);
  v58 = type metadata accessor for VStack(0, v57, v125);
  v127 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v60 = (char *)&v119 - v59;
  v148 = type metadata accessor for ModifiedContent(0, v58, &type metadata for _AppearanceActionModifier);
  v132 = *(_QWORD *)(v148 - 8);
  v61 = __chkstk_darwin(v148);
  v133 = (char *)&v119 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __chkstk_darwin(v61);
  v126 = (char *)&v119 - v64;
  __chkstk_darwin(v63);
  v147 = (uint64_t)&v119 - v65;
  v149 = v21;
  v69 = sub_10000FDA4(v21, v66, v67, v68);
  LODWORD(v52) = *(unsigned __int8 *)(v69 + 136);
  v70 = swift_release(v69);
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  if ((_DWORD)v52 == 1)
  {
    v78 = sub_10000FDA4(v149, v71, v72, v73);
    v74 = *(_QWORD *)(v78 + 16);
    v75 = *(_QWORD *)(v78 + 24);
    v76 = *(unsigned __int8 *)(v78 + 32);
    v77 = *(uint64_t **)(v78 + 40);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v77);
    v70 = swift_release(v78);
  }
  v128 = v77;
  v129 = v76;
  v130 = v75;
  v131 = v74;
  v79 = __chkstk_darwin(v70);
  v80 = v137;
  *(&v119 - 4) = v53;
  *(&v119 - 3) = v80;
  v81 = v150;
  *(&v119 - 2) = v150;
  v82 = static HorizontalAlignment.center.getter(v79);
  VStack.init(alignment:spacing:content:)(v82, 0, 0, sub_1000137B0, &v119 - 6, v57, v125);
  v83 = v136;
  v84 = v135;
  v85 = v149;
  (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v135, v81, v149);
  v86 = *(unsigned __int8 *)(v83 + 80);
  v87 = (v86 + 32) & ~v86;
  v88 = swift_allocObject(&unk_1001486A0, v87 + v134, v86 | 7);
  *(_QWORD *)(v88 + 16) = v53;
  *(_QWORD *)(v88 + 24) = v80;
  v89 = *(void (**)(uint64_t, char *, uint64_t))(v83 + 32);
  v90 = v53;
  v89(v88 + v87, v84, v85);
  v91 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v58);
  v92 = (uint64_t)v126;
  View.onAppear(perform:)(sub_1000137C0, v88, v58, v91);
  swift_release(v88);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v60, v58);
  v156[3] = v91;
  v156[4] = (uint64_t)&protocol witness table for _AppearanceActionModifier;
  v93 = v148;
  v137 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v148);
  sub_10005135C(v92, v93, v147);
  v94 = v132;
  v95 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
  v95(v92, v93);
  v96 = v138;
  sub_10000850C(v85, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v97 = v139;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v96, 1, v90) == 1)
  {
    (*(void (**)(char *, uint64_t))(v119 + 8))(v96, v122);
    v98 = v143;
    v99 = v145;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v143, 1, 1, v145);
    swift_getWitnessTable(&unk_100108B68, v99);
  }
  else
  {
    v100 = v120;
    (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v120, v96, v90);
    v101 = (uint64_t)v121;
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v121, v100, v90);
    v105 = (uint64_t *)sub_10000FDA4(v149, v102, v103, v104);
    v106 = v123;
    sub_100012C00(v101, v105, v123);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v100, v90);
    v99 = v145;
    swift_getWitnessTable(&unk_100108B68, v145);
    v107 = v124;
    sub_10005135C(v106, v99, v124);
    v108 = v141;
    v109 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
    v109(v106, v99);
    v98 = v143;
    sub_1000424BC(v107, v99, v143);
    v109(v107, v99);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v98, 0, 1, v99);
  }
  v110 = v142;
  sub_1000424D4(v98, v142);
  v111 = v140;
  v112 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
  v113 = v144;
  v112(v98, v144);
  v161 = v131;
  v162 = v130;
  v163 = v129;
  v164 = v128;
  v156[0] = (uint64_t)&v161;
  v114 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  v115 = (uint64_t)v133;
  v116 = v147;
  v117 = v148;
  v114(v133, v147, v148);
  v156[1] = v115;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v98, v110, v113);
  v156[2] = v98;
  v155[0] = sub_100007D50(&qword_100158418);
  v155[1] = v117;
  v155[2] = v113;
  v152 = sub_10000C164(&qword_100158460, &qword_100158418, (void (*)(void))sub_10000C1C8);
  v153 = v137;
  v151 = swift_getWitnessTable(&unk_100108B68, v99);
  v154 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v113);
  sub_100042510(v156, 3uLL, (uint64_t)v155);
  v112(v110, v113);
  v95(v116, v117);
  v112(v98, v113);
  v95(v115, v117);
  return sub_10000C20C(v161, v162, v163, (uint64_t)v164);
}

uint64_t sub_1000110F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(_QWORD *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  void (*v194)(char *, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t);
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t OpaqueTypeConformance2;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  void (*v268)(_QWORD, _QWORD);
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[8];
  _QWORD v272[12];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  _QWORD *v277;

  v267 = a1;
  v259 = a5;
  v6 = *(_QWORD **)(a3 + 8);
  v268 = (void (*)(_QWORD, _QWORD))a3;
  v262 = v6[1];
  v263 = v6;
  v7 = v6;
  v9 = type metadata accessor for PageControl(0, a2, v262, a4);
  v253 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v199 = (_QWORD **)((char *)&v199 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v200 = (uint64_t)&v199 - v12;
  v256 = v13;
  v258 = type metadata accessor for Optional(0);
  v254 = *(_QWORD *)(v258 - 8);
  v14 = __chkstk_darwin(v258);
  v257 = (uint64_t)&v199 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v255 = (uint64_t)&v199 - v16;
  v266 = type metadata accessor for WatchFacesView(0, a2, a3, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(v266 - 8) + 64);
  v250 = *(_QWORD *)(v266 - 8);
  v251 = v18;
  __chkstk_darwin(v266);
  v249 = (char *)&v199 - v19;
  v20 = type metadata accessor for Optional(0);
  v21 = *(_QWORD *)(v20 - 8);
  v264 = v20;
  v252 = v21;
  __chkstk_darwin(v20);
  v248 = (char *)&v199 - v22;
  v24 = type metadata accessor for Binding(0, v23);
  v245 = *(_QWORD *)(v24 - 8);
  v246 = v24;
  __chkstk_darwin(v24);
  v261 = (char *)&v199 - v25;
  v26 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v26);
  v243 = (char *)&v199 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v244 = *(_QWORD *)(v28 - 8);
  v29 = v28;
  __chkstk_darwin(v28);
  v240 = (char *)&v199 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ContentMarginPlacement(0);
  v241 = *(_QWORD *)(v31 - 8);
  v242 = v31;
  __chkstk_darwin(v31);
  v223 = (char *)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Array(255, a2);
  v34 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v33);
  v273 = v33;
  v274 = a2;
  v275 = v34;
  v276 = (void *)WitnessTable;
  v277 = v7;
  v36 = type metadata accessor for ForEach(255, &v273);
  v272[11] = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v36);
  v38 = type metadata accessor for HStack(255, v36, v37);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v38);
  v273 = v38;
  v274 = v39;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v273, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v216 = OpaqueTypeMetadata2;
  v273 = v38;
  v274 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v41 = type metadata accessor for ScrollView(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v226 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v212 = (char *)&v199 - v42;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v41);
  v273 = v41;
  v274 = v43;
  v44 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v228 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v213 = (char *)&v199 - v45;
  v273 = v41;
  v274 = v43;
  v46 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v273 = v44;
  v274 = v29;
  v209 = v29;
  v210 = v44;
  v47 = v29;
  v275 = v46;
  v276 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v48 = v46;
  v211 = v46;
  v49 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v225 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v208 = (char *)&v199 - v50;
  v273 = v44;
  v274 = v47;
  v275 = v48;
  v276 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v51 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v205 = v49;
  v206 = v51;
  v273 = v49;
  v274 = a2;
  v52 = v51;
  v53 = v263;
  v275 = v51;
  v276 = v263;
  v54 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v222 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v204 = (char *)&v199 - v55;
  v273 = v49;
  v274 = a2;
  v275 = v52;
  v276 = v53;
  v56 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v273 = v54;
  v274 = v56;
  v57 = v54;
  v202 = v54;
  v203 = v56;
  v58 = v56;
  v59 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v224 = *(_QWORD *)(v59 - 8);
  v218 = v59;
  __chkstk_darwin(v59);
  v207 = (char *)&v199 - v60;
  v62 = type metadata accessor for ModifiedContent(0, v61, &type metadata for _FrameLayout);
  v233 = *(_QWORD *)(v62 - 8);
  v221 = v62;
  __chkstk_darwin(v62);
  v215 = (char *)&v199 - v63;
  v273 = v57;
  v274 = v58;
  v214 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v272[9] = v214;
  v272[10] = &protocol witness table for _FrameLayout;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v220 = v64;
  v272[8] = v262;
  v65 = v264;
  v219 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v264);
  v273 = v62;
  v274 = v65;
  v275 = v64;
  v276 = (void *)v219;
  v66 = swift_getOpaqueTypeMetadata2(0, &v273, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v232 = *(_QWORD *)(v66 - 8);
  v229 = v66;
  __chkstk_darwin(v66);
  v265 = (char *)&v199 - v67;
  v68 = sub_100007D00(&qword_100158428);
  v69 = type metadata accessor for ModifiedContent(0, v66, v68);
  v237 = *(_QWORD *)(v69 - 8);
  v230 = v69;
  __chkstk_darwin(v69);
  v227 = (char *)&v199 - v70;
  v71 = sub_100007D00(&qword_100158768);
  v72 = type metadata accessor for ModifiedContent(0, v69, v71);
  v239 = *(_QWORD *)(v72 - 8);
  v235 = v72;
  __chkstk_darwin(v72);
  v231 = (char *)&v199 - v73;
  v201 = type metadata accessor for ModifiedContent(0, v74, &type metadata for _PaddingLayout);
  v238 = *(_QWORD *)(v201 - 8);
  v75 = __chkstk_darwin(v201);
  v247 = (char *)&v199 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __chkstk_darwin(v75);
  v234 = (char *)&v199 - v78;
  v79 = __chkstk_darwin(v77);
  v236 = (uint64_t)&v199 - v80;
  v81 = static Axis.Set.horizontal.getter(v79);
  v82 = a2;
  v271[2] = a2;
  v271[3] = v268;
  v271[4] = v267;
  v83 = v212;
  v84 = ScrollView.init(_:showsIndicators:content:)(v81, 0, sub_100014404, v271, v216, OpaqueTypeConformance2);
  v85 = static Edge.Set.horizontal.getter(v84);
  v86 = v266;
  v90 = sub_10000FDA4(v266, v87, v88, v89);
  v91 = sub_10008FB00();
  swift_release(v90);
  v92 = v223;
  j___s7SwiftUI22ContentMarginPlacementV9automaticACvgZ(v41, v43);
  v93 = v213;
  v94 = v85;
  v95 = v261;
  View.contentMargins(_:_:for:)(v94, *(_QWORD *)&v91, 0, v92, v41, v43);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v92, v242);
  v96 = (*(uint64_t (**)(char *, uint64_t))(v226 + 8))(v83, v41);
  v97 = v243;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v96);
  v98 = v240;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v97);
  v99 = v208;
  v100 = v209;
  v101 = v210;
  View.scrollTargetBehavior<A>(_:)(v98, v210, v209, v211, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v98, v100);
  (*(void (**)(char *, uint64_t))(v228 + 8))(v93, v101);
  v102 = v267;
  sub_10000850C(v86, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
  v103 = v204;
  v104 = v205;
  View.scrollPosition<A>(id:anchor:)(v95, 0, 0, 1, v205, v82, v206, v263);
  (*(void (**)(char *, uint64_t))(v245 + 8))(v95, v246);
  (*(void (**)(char *, uint64_t))(v225 + 8))(v99, v104);
  v108 = sub_10000FDA4(v86, v105, v106, v107);
  LOBYTE(v95) = sub_10008FB3C();
  swift_release(v108);
  v109 = (v95 & 1) == 0;
  v110 = v207;
  v111 = v202;
  View.scrollDisabled(_:)(v109, v202, v203);
  (*(void (**)(char *, uint64_t))(v222 + 8))(v103, v111);
  v115 = sub_10000FDA4(v86, v112, v113, v114);
  v116 = sub_10008FB64();
  v117 = swift_release(v115);
  v118 = static Alignment.center.getter(v117);
  v119 = v215;
  v120 = v218;
  View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v116, 0, v118, v121, v218, v214);
  (*(void (**)(char *, uint64_t))(v224 + 8))(v110, v120);
  v122 = v248;
  v123 = v86;
  sub_10000850C(v86, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v124 = v249;
  v125 = v250;
  v126 = v102;
  v127 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v250 + 16))(v249, v126, v123);
  v128 = *(unsigned __int8 *)(v125 + 80);
  v129 = (v128 + 32) & ~v128;
  v130 = swift_allocObject(&unk_1001486C8, v129 + v251, v128 | 7);
  v260 = v82;
  v131 = v268;
  *(_QWORD *)(v130 + 16) = v82;
  *(_QWORD *)(v130 + 24) = v131;
  (*(void (**)(uint64_t, char *, uint64_t))(v125 + 32))(v130 + v129, v124, v127);
  v133 = v220;
  v132 = v221;
  v134 = v264;
  v135 = (void *)v219;
  View.onChange<A>(of:initial:_:)(v122, 0, sub_100014414, v130, v221, v264, v220, v219);
  swift_release(v130);
  (*(void (**)(char *, uint64_t))(v252 + 8))(v122, v134);
  v136 = v119;
  v137 = v132;
  v138 = (*(uint64_t (**)(char *, uint64_t))(v233 + 8))(v136, v132);
  v139 = static Alignment.center.getter(v138);
  v141 = v140;
  v142 = v260;
  v270[2] = v260;
  v270[3] = v131;
  v143 = v267;
  v270[4] = v267;
  v144 = sub_100007D50(&qword_100158478);
  v273 = v137;
  v274 = v134;
  v275 = v133;
  v276 = v135;
  v145 = swift_getOpaqueTypeConformance2(&v273, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v146 = sub_10000E210();
  v147 = v227;
  v148 = v139;
  v149 = v141;
  v150 = v229;
  v151 = v265;
  View.overlay<A>(alignment:content:)(v148, v149, sub_100014428, v270, v229, v144, v145, v146);
  v152 = (*(uint64_t (**)(char *, uint64_t))(v232 + 8))(v151, v150);
  v153 = static Alignment.center.getter(v152);
  v155 = v154;
  v269[2] = v142;
  v269[3] = v268;
  v269[4] = v143;
  v156 = sub_100007D50(&qword_100158770);
  v157 = sub_10000F4E0(&qword_1001584A0, &qword_100158428, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v272[6] = v145;
  v272[7] = v157;
  v158 = v230;
  v159 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v230);
  v160 = sub_10000F4E0(&qword_100158778, &qword_100158770, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v161 = v231;
  View.background<A>(alignment:content:)(v153, v155, sub_100014434, v269, v158, v156, v159, v160);
  v162 = (*(uint64_t (**)(char *, uint64_t))(v237 + 8))(v147, v158);
  v163 = static Edge.Set.bottom.getter(v162);
  v164 = sub_10000F4E0(qword_100158780, &qword_100158768, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v272[4] = v159;
  v272[5] = v164;
  v165 = v235;
  v166 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v235);
  v167 = (uint64_t)v234;
  View.padding(_:_:)(v163, 0x403E000000000000, 0, v165, v166);
  (*(void (**)(char *, uint64_t))(v239 + 8))(v161, v165);
  v272[2] = v166;
  v272[3] = &protocol witness table for _PaddingLayout;
  v168 = v238;
  v169 = v201;
  v170 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v201);
  v171 = v236;
  v265 = (char *)v170;
  sub_10005135C(v167, v169, v236);
  v172 = v169;
  v268 = *(void (**)(_QWORD, _QWORD))(v168 + 8);
  v268(v167, v169);
  v173 = v266;
  v177 = sub_10000FDA4(v266, v174, v175, v176);
  LOBYTE(v169) = sub_10008FB3C();
  swift_release(v177);
  if ((v169 & 1) != 0)
  {
    v181 = sub_10000FDA4(v173, v178, v179, v180);
    v182 = *(_QWORD *)(v181 + 112);
    swift_bridgeObjectRetain(v182);
    swift_release(v181);
    v183 = (uint64_t)v261;
    sub_10000850C(v173, (uint64_t (*)(uint64_t))&State.projectedValue.getter);
    v184 = v199;
    sub_100091364(v182, v183, v260, v262, v199);
    v185 = v256;
    swift_getWitnessTable(&unk_10010E938, v256);
    v186 = v200;
    sub_10005135C((uint64_t)v184, v185, v200);
    v187 = v253;
    v188 = *(void (**)(_QWORD *, uint64_t))(v253 + 8);
    v188(v184, v185);
    v189 = v257;
    sub_1000424BC(v186, v185, v257);
    v188((_QWORD *)v186, v185);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v187 + 56))(v189, 0, 1, v185);
  }
  else
  {
    v185 = v256;
    v189 = v257;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v257, 1, 1, v256);
    swift_getWitnessTable(&unk_10010E938, v185);
  }
  v190 = v255;
  sub_1000424D4(v189, v255);
  v191 = v254;
  v192 = *(void (**)(uint64_t, uint64_t))(v254 + 8);
  v193 = v258;
  v192(v189, v258);
  v194 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
  v195 = (uint64_t)v247;
  v194(v247, v171, v172);
  v273 = v195;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 16))(v189, v190, v193);
  v274 = v189;
  v272[0] = v172;
  v272[1] = v193;
  v271[6] = v265;
  v271[5] = swift_getWitnessTable(&unk_10010E938, v185);
  v271[7] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v193);
  sub_100042510(&v273, 2uLL, (uint64_t)v272);
  v192(v190, v193);
  v196 = v171;
  v197 = (uint64_t (*)(uint64_t, uint64_t))v268;
  v268(v196, v172);
  v192(v189, v193);
  return v197(v195, v172);
}

uint64_t sub_1000120B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v28 = a3;
  v29 = a1;
  v30 = a4;
  v6 = type metadata accessor for Array(255, a2);
  v7 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
  v9 = *(_QWORD *)(a3 + 8);
  v36 = v6;
  v37 = a2;
  v38 = v7;
  v39 = WitnessTable;
  v40 = v9;
  v10 = type metadata accessor for ForEach(255, &v36);
  v35 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  v12 = type metadata accessor for HStack(0, v10, v11);
  v27 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v12);
  v36 = v12;
  v37 = v15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v17 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v18 = __chkstk_darwin(OpaqueTypeMetadata2);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v27 - v22;
  v32 = a2;
  v33 = v28;
  v34 = v29;
  v24 = static VerticalAlignment.center.getter(v21);
  HStack.init(alignment:spacing:content:)(v24, 0x3FF0000000000000, 0, sub_100014440, v31, v10, v11);
  View.scrollTargetLayout(isEnabled:)(1, v12, v15);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  v36 = v12;
  v37 = v15;
  swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  sub_10005135C((uint64_t)v20, OpaqueTypeMetadata2, (uint64_t)v23);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, OpaqueTypeMetadata2);
  sub_1000424BC((uint64_t)v23, OpaqueTypeMetadata2, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, OpaqueTypeMetadata2);
}

uint64_t sub_100012304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];

  v41 = a5;
  v8 = type metadata accessor for WatchFacesView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v35 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - v10;
  v12 = type metadata accessor for Array(255, a2);
  v39 = v12;
  v13 = type metadata accessor for ScrollAsset(255);
  v38 = v13;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v36 = *(_QWORD *)(a3 + 8);
  v37 = WitnessTable;
  v45[0] = v12;
  v45[1] = a2;
  v45[2] = v13;
  v45[3] = WitnessTable;
  v45[4] = v36;
  v15 = type metadata accessor for ForEach(0, v45);
  v40 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v34 = (uint64_t)&v32 - v19;
  v23 = sub_10000FDA4(v8, v20, v21, v22);
  v24 = *(_QWORD *)(v23 + 112);
  swift_bridgeObjectRetain(v24);
  swift_release(v23);
  v45[0] = v24;
  v42 = a2;
  v43 = a3;
  KeyPath = swift_getKeyPath(&unk_100108B20);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v25 = *(unsigned __int8 *)(v9 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_1001486F0, v26 + v35, v25 | 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + v26, v11, v8);
  v28 = sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  ForEach<>.init(_:id:content:)(v45, KeyPath, sub_100014560, v27, v39, v38, v37, v36, v28);
  v44 = v28;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v15);
  v29 = v34;
  sub_10005135C((uint64_t)v18, v15, v34);
  v30 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30(v18, v15);
  sub_1000424BC(v29, v15, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v15);
}

int *sub_10001257C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int *result;

  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v7 = type metadata accessor for WatchFacesView(0, a1, a2, v6);
  v11 = sub_10000FDA4(v7, v8, v9, v10);
  v12 = sub_10008FA88();
  swift_release(v11);
  v16 = sub_10000FDA4(v7, v13, v14, v15);
  v17 = sub_10008FAB4();
  swift_release(v16);
  v21 = sub_10000FDA4(v7, v18, v19, v20);
  v22 = sub_10008FAD4();
  swift_release(v21);
  result = (int *)type metadata accessor for ScrollAsset(0);
  *(double *)(a3 + result[5]) = v12;
  *(double *)(a3 + result[6]) = v17;
  *(double *)(a3 + result[7]) = v22;
  return result;
}

uint64_t sub_100012668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for WatchFacesView(0, a2, a3, a4);
  v9 = sub_10000FDA4(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 96);
  v10 = *(_QWORD *)(v9 + 104);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v12 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v13 = *v12;
  if (*v12)
  {
    swift_retain(*v12);
    sub_10008A874(v11, v10, 8, 10, 27, 0, 3u, v13);
    swift_bridgeObjectRelease(v10);
    return swift_release(v13);
  }
  else
  {
    v15 = v12[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
  return result;
}

uint64_t sub_100012748@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t result;

  v5 = type metadata accessor for WatchFacesView(0, a1, a2, a3);
  v9 = sub_10000FDA4(v5, v6, v7, v8);
  v11 = *(_QWORD *)(v9 + 48);
  v10 = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRetain(v10);
  swift_release(v9);
  v15 = sub_10000FDA4(v5, v12, v13, v14);
  v16 = sub_10008FB68();
  result = swift_release(v15);
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v16;
  *(_BYTE *)(a4 + 24) = 0;
  return result;
}

double sub_1000127D0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double result;
  uint64_t v43;

  v6 = type metadata accessor for Color.RGBColorSpace(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WatchFacesView(0, a1, a2, v10);
  v15 = sub_10000FDA4(v11, v12, v13, v14);
  v17 = *(_QWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 56);
  swift_bridgeObjectRetain(v16);
  swift_release(v15);
  v21 = sub_10000FDA4(v11, v18, v19, v20);
  v22 = sub_10008FB68();
  swift_release(v21);
  v23 = enum case for Color.RGBColorSpace.sRGBLinear(_:);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v24(v9, enum case for Color.RGBColorSpace.sRGBLinear(_:), v6);
  v25 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v24(v9, v23, v6);
  v26 = Color.init(_:white:opacity:)(v9, 0.0, 0.33);
  v30 = sub_10000FDA4(v11, v27, v28, v29);
  v31 = sub_10008FB88();
  swift_release(v30);
  v35 = sub_10000FDA4(v11, v32, v33, v34);
  v36 = sub_10008FBB4();
  swift_release(v35);
  v40 = sub_10000FDA4(v11, v37, v38, v39);
  v41 = sub_1000901FC();
  swift_release(v40);
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v16;
  *(double *)(a3 + 16) = v22;
  *(_QWORD *)(a3 + 24) = v25;
  *(_OWORD *)(a3 + 32) = xmmword_1001087E0;
  *(_QWORD *)(a3 + 48) = 0x4010000000000000;
  *(_QWORD *)(a3 + 56) = v26;
  result = 10.0;
  *(_OWORD *)(a3 + 64) = xmmword_1001087F0;
  *(_OWORD *)(a3 + 80) = xmmword_100108A70;
  *(double *)(a3 + 96) = v31;
  *(double *)(a3 + 104) = v36;
  *(double *)(a3 + 112) = v41;
  return result;
}

uint64_t sub_1000129B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, uint64_t);
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t WitnessTable;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v33 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v32 - v16;
  v19 = type metadata accessor for WatchFacesView(0, a2, a3, v18);
  v34 = a1;
  sub_10000850C(v19, (uint64_t (*)(uint64_t))&State.wrappedValue.getter);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a3) = v20(v17, 1, a2);
  v21 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  result = v21(v17, v9);
  if ((_DWORD)a3 == 1)
  {
    v32 = v8;
    v26 = sub_10000FDA4(v19, v23, v24, v25);
    v27 = *(_QWORD *)(v26 + 112);
    swift_bridgeObjectRetain(v27);
    swift_release(v26);
    v35 = v27;
    v28 = type metadata accessor for Array(0, a2);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v28);
    Collection.first.getter(v28, WitnessTable);
    swift_bridgeObjectRelease(v27);
    if (v20(v15, 1, a2) == 1)
    {
      return v21(v15, v9);
    }
    else
    {
      v30 = v32;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v15, a2);
      v31 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v33, v30, a2);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v31, 0, 1, a2);
      sub_10000E140(v31);
      v21((char *)v31, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v30, a2);
    }
  }
  return result;
}

uint64_t sub_100012C00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v8 = _s15ShazamEventsApp17SelectAssetButtonVMa_0(0, v6, *(_QWORD *)(v5 + 88), v7);
  *(_QWORD *)(a3 + *(int *)(v8 + 36)) = a2;
  v9 = (uint64_t *)(a3 + *(int *)(v8 + 40));
  v10 = type metadata accessor for RemoteViewConfiguration();
  v11 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v10, v11);
  *v9 = result;
  v9[1] = v13;
  return result;
}

uint64_t sub_100012CA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010E698, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v6, WitnessTable);
  v9 = type metadata accessor for WatchFacesView(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), v8);
  sub_100008470(a2);
  v10 = (uint64_t *)(a3 + *(int *)(v9 + 40));
  v11 = type metadata accessor for RemoteViewConfiguration();
  v12 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v11, v12);
  *v10 = result;
  v10[1] = v14;
  return result;
}

uint64_t type metadata accessor for WatchFacesView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WatchFacesView);
}

uint64_t sub_100012D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[3];

  v5 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(result - 8) + 64;
    v8 = type metadata accessor for Optional(255);
    result = type metadata accessor for State(319, v8);
    if (v9 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(result - 8) + 64;
      v10[2] = &unk_100108AA0;
      swift_initStructMetadata(a1, 0, 3, v10, a1 + 32);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_100012E18(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;

  v5 = a1;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v5 = (_QWORD *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 16);
    v9 = type metadata accessor for WatchFacesViewModel(255, v8, *(_QWORD *)(a3 + 24), a4);
    v10 = type metadata accessor for Bindable(0, v9);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, a2, v10);
    v11 = *(int *)(a3 + 36);
    v12 = (char *)v5 + v11;
    v13 = &a2[v11];
    v14 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(&a2[v11], 1, v8))
    {
      v15 = type metadata accessor for Optional(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v13, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
    }
    v17 = type metadata accessor for Optional(255);
    v18 = *(int *)(type metadata accessor for State(0, v17) + 28);
    v19 = *(_QWORD *)&v13[v18];
    *(_QWORD *)&v12[v18] = v19;
    v20 = *(int *)(a3 + 40);
    v21 = (_QWORD *)((char *)v5 + v20);
    v22 = &a2[v20];
    v16 = *(_QWORD *)v22;
    v23 = *((_QWORD *)v22 + 1);
    *v21 = v16;
    v21[1] = v23;
    swift_retain(v19);
  }
  swift_retain(v16);
  return v5;
}

uint64_t sub_100012F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for WatchFacesViewModel(255, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  v9 = a1 + *(int *)(a2 + 36);
  v10 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v6);
  v11 = type metadata accessor for Optional(255);
  v12 = type metadata accessor for State(0, v11);
  swift_release(*(_QWORD *)(v9 + *(int *)(v12 + 28)));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40)));
}

uint64_t sub_100013030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255);
  v16 = *(int *)(type metadata accessor for State(0, v15) + 28);
  v17 = *(_QWORD *)&v12[v16];
  *(_QWORD *)&v11[v16] = v17;
  v18 = *(int *)(a3 + 40);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_retain(v17);
  swift_retain(v22);
  return a1;
}

uint64_t sub_100013160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  v21 = *(_QWORD *)&v12[v19];
  *(_QWORD *)&v11[v19] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = *(int *)(a3 + 40);
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *v24;
  *(_QWORD *)(a1 + v22) = *v24;
  swift_retain(v26);
  swift_release(v25);
  *(_QWORD *)(v23 + 8) = v24[1];
  return a1;
}

uint64_t sub_1000132F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1, v7))
  {
    v14 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
  }
  v15 = type metadata accessor for Optional(255);
  v16 = type metadata accessor for State(0, v15);
  *(_QWORD *)&v11[*(int *)(v16 + 28)] = *(_QWORD *)&v12[*(int *)(v16 + 28)];
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100013414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for WatchFacesViewModel(255, v7, *(_QWORD *)(a3 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  v10 = *(int *)(a3 + 36);
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(a1 + v10, 1, v7);
  v16 = v14((uint64_t)v12, 1, v7);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v11, v12, v7);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v7);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for Optional(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v7);
LABEL_7:
  v18 = type metadata accessor for Optional(255);
  v19 = *(int *)(type metadata accessor for State(0, v18) + 28);
  v20 = *(_QWORD *)&v11[v19];
  *(_QWORD *)&v11[v19] = *(_QWORD *)&v12[v19];
  swift_release(v20);
  v21 = *(int *)(a3 + 40);
  v22 = a1 + v21;
  v23 = (_QWORD *)(a2 + v21);
  v24 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *v23;
  swift_release(v24);
  *(_QWORD *)(v22 + 8) = v23[1];
  return a1;
}

uint64_t sub_10001359C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000135A8);
}

uint64_t sub_1000135A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v7 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
    return v11(v12, a2, v10);
  }
  v13 = type metadata accessor for Optional(255);
  v14 = type metadata accessor for State(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v15 + 84) == (_DWORD)a2)
  {
    v10 = v14;
    v12 = a1 + *(int *)(a3 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    return v11(v12, a2, v10);
  }
  v17 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_100013680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001368C);
}

uint64_t sub_10001368C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for WatchFacesViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v9 = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
    return v12(v13, a2, a2, v11);
  }
  v14 = type metadata accessor for Optional(255);
  result = type metadata accessor for State(0, v14);
  v16 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v16 + 84) == a3)
  {
    v11 = result;
    v13 = a1 + *(int *)(a4 + 36);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    return v12(v13, a2, a2, v11);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = a2;
  return result;
}

uint64_t sub_100013760(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100116224, 1);
}

uint64_t _s15ShazamEventsApp17SelectAssetButtonVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&_s15ShazamEventsApp17SelectAssetButtonVMn_0);
}

uint64_t sub_1000137A4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10001052C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000137B0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000110F4(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000137C0()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WatchFacesView, sub_1000129B4);
}

uint64_t sub_1000137D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v3 = v2;
  v63 = a2;
  v5 = type metadata accessor for PlainButtonStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  v62 = v6;
  v7 = __chkstk_darwin(v5);
  v55 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100007D50(&qword_100158538);
  v58 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100158540);
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  __chkstk_darwin(v14);
  v54 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100007D50(&qword_100158548);
  __chkstk_darwin(v57);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v3, a1);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(&unk_100148770, v19 + v10, v18 | 7);
  v22 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v20 + 16) = v22;
  *(_QWORD *)(v20 + 24) = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, v11, a1);
  v65 = v22;
  v66 = v21;
  v67 = v3;
  v23 = sub_100007D50(&qword_100158588);
  v24 = sub_10000F1FC();
  v25 = Button.init(action:label:)(sub_10001519C, v20, sub_1000151B0, v64, v23, v24);
  v26 = v55;
  PlainButtonStyle.init()(v25);
  v27 = sub_10000F4E0(&qword_100158568, &qword_100158538, (uint64_t)&protocol conformance descriptor for Button<A>);
  v28 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v29 = v54;
  v30 = v56;
  v31 = v61;
  View.buttonStyle<A>(_:)(v26, v56, v61, v27, v28);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v26, v31);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v13, v30);
  LOBYTE(v27) = static Edge.Set.top.getter(v32);
  v33 = EdgeInsets.init(_all:)(22.0);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v59;
  v40 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v17, v29, v60);
  v42 = &v17[*(int *)(v57 + 36)];
  *v42 = v27;
  *((double *)v42 + 1) = v33;
  *((_QWORD *)v42 + 2) = v35;
  *((_QWORD *)v42 + 3) = v37;
  *((_QWORD *)v42 + 4) = v39;
  v42[40] = 0;
  v43 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v29, v40);
  LOBYTE(v27) = static Edge.Set.horizontal.getter(v43);
  v44 = EdgeInsets.init(_all:)(20.0);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v63;
  sub_100007E78((uint64_t)v17, v63, &qword_100158548);
  v52 = v51 + *(int *)(sub_100007D50(&qword_100158550) + 36);
  *(_BYTE *)v52 = v27;
  *(double *)(v52 + 8) = v44;
  *(_QWORD *)(v52 + 16) = v46;
  *(_QWORD *)(v52 + 24) = v48;
  *(_QWORD *)(v52 + 32) = v50;
  *(_BYTE *)(v52 + 40) = 0;
  return sub_100007F38((uint64_t)v17, &qword_100158548);
}

uint64_t sub_100013B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  v7 = _s15ShazamEventsApp17SelectAssetButtonVMa_0(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v22 - v10;
  v12 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  type metadata accessor for MainActor(0);
  v16 = static MainActor.shared.getter();
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 48) & ~v17;
  v19 = (char *)swift_allocObject(&unk_100148798, v18 + v9, v17 | 7);
  *((_QWORD *)v19 + 2) = v16;
  *((_QWORD *)v19 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v19 + 4) = a2;
  *((_QWORD *)v19 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v19[v18], v11, v7);
  v20 = sub_1000956A4((uint64_t)v14, (uint64_t)&unk_100158810, (uint64_t)v19);
  return swift_release(v20);
}

uint64_t sub_100013CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v6[5] = type metadata accessor for MainActor(0);
  v6[6] = static MainActor.shared.getter();
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015CD48 + dword_10015CD48);
  v10 = (_QWORD *)swift_task_alloc(unk_10015CD4C);
  v6[7] = v10;
  *v10 = v6;
  v10[1] = sub_100013D58;
  return v12(a4, a5, a6);
}

uint64_t sub_100013D58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  v5 = *(_QWORD *)(v2 + 40);
  if (v0)
  {
    v6 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 40), &protocol witness table for MainActor);
    v8 = v7;
    v9 = sub_100013F18;
  }
  else
  {
    v10 = _s15ShazamEventsApp17SelectAssetButtonVMa_0(0, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v4);
    *(_QWORD *)(v2 + 72) = v10;
    *(_DWORD *)(v2 + 80) = *(_DWORD *)(v10 + 36);
    v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
    v8 = v11;
    v9 = sub_100013E14;
  }
  return swift_task_switch(v9, v6, v8);
}

uint64_t sub_100013E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(int *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  v4 = *(_QWORD *)(v3 + v1);
  v5 = *(_QWORD *)(v4 + 104);
  v6 = (uint64_t *)(v3 + *(int *)(v2 + 40));
  v7 = *v6;
  if (*v6)
  {
    v8 = *(_QWORD *)(v4 + 96);
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + 104));
    swift_retain(v7);
    sub_10008A874(v8, v5, 8, 10, 7, 0, 3u, v7);
    swift_release(v7);
    swift_bridgeObjectRelease(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = v6[1];
    v11 = type metadata accessor for RemoteViewConfiguration();
    v12 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    swift_bridgeObjectRetain(v5);
    return EnvironmentObject.error()(0, v10, v11, v12);
  }
}

uint64_t sub_100013F18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v48;
  void *v49;
  _BYTE v51[12];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _OWORD v75[17];

  v68 = a4;
  v67 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v67);
  v8 = &v51[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = type metadata accessor for RoundedRectangle(0);
  v9 = __chkstk_darwin(v66);
  v11 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = static VerticalAlignment.center.getter(v9);
  v12 = sub_1000142AC(a1, a2, a3, (uint64_t)v75);
  v63 = v75[0];
  v62 = *(_QWORD *)&v75[1];
  LOBYTE(a1) = BYTE8(v75[1]);
  v64 = *(_QWORD *)&v75[3];
  v13 = BYTE8(v75[3]);
  v61 = v75[2];
  v14 = static Font.body.getter(v12);
  static Font.Weight.semibold.getter();
  v60 = Font.weight(_:)(v14);
  swift_release(v14);
  KeyPath = swift_getKeyPath(&unk_100108BB8);
  v58 = static Color.white.getter();
  v57 = static Edge.Set.horizontal.getter(v58);
  v15 = EdgeInsets.init(_all:)(20.0);
  v55 = v16;
  v56 = v15;
  v53 = v18;
  v54 = v17;
  v72 = 0;
  v71 = a1;
  v70 = v13;
  v69 = 0;
  v52 = static Edge.Set.top.getter(v19);
  v20 = EdgeInsets.init(_all:)(14.4);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v27 = v72;
  v28 = v71;
  LOBYTE(v14) = v70;
  LOBYTE(a2) = v69;
  v73 = 0;
  v30 = static Edge.Set.bottom.getter(v29);
  v31 = EdgeInsets.init(_all:)(13.6);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  LOBYTE(a1) = v73;
  v74 = 0;
  v38 = static Color.blue.getter();
  v39 = static Edge.Set.all.getter(v38);
  *(_QWORD *)&v75[0] = v65;
  *((_QWORD *)&v75[0] + 1) = 0x4010000000000000;
  LOBYTE(v75[1]) = v27;
  *(_OWORD *)((char *)&v75[1] + 8) = v63;
  *((_QWORD *)&v75[2] + 1) = v62;
  LOBYTE(v75[3]) = v28;
  *(_OWORD *)((char *)&v75[3] + 8) = v61;
  *((_QWORD *)&v75[4] + 1) = v64;
  LOBYTE(v75[5]) = v14;
  *((_QWORD *)&v75[5] + 1) = KeyPath;
  *(_QWORD *)&v75[6] = v60;
  *((_QWORD *)&v75[6] + 1) = v58;
  LOBYTE(v75[7]) = v57;
  *((double *)&v75[7] + 1) = v56;
  *(_QWORD *)&v75[8] = v55;
  *((_QWORD *)&v75[8] + 1) = v54;
  *(_QWORD *)&v75[9] = v53;
  BYTE8(v75[9]) = a2;
  LOBYTE(v75[10]) = v52;
  *((double *)&v75[10] + 1) = v20;
  *(_QWORD *)&v75[11] = v22;
  *((_QWORD *)&v75[11] + 1) = v24;
  *(_QWORD *)&v75[12] = v26;
  BYTE8(v75[12]) = a1;
  LOBYTE(v75[13]) = v30;
  *((double *)&v75[13] + 1) = v31;
  *(_QWORD *)&v75[14] = v33;
  *((_QWORD *)&v75[14] + 1) = v35;
  *(_QWORD *)&v75[15] = v37;
  BYTE8(v75[15]) = v74;
  *(_QWORD *)&v75[16] = v38;
  BYTE8(v75[16]) = v39;
  v40 = (char *)v11 + *(int *)(v66 + 20);
  v41 = enum case for RoundedCornerStyle.continuous(_:);
  v42 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v40, v41, v42);
  __asm { FMOV            V0.2D, #12.0 }
  *v11 = _Q0;
  sub_10000F760((uint64_t)v11, (uint64_t)v8);
  *(_WORD *)&v8[*(int *)(v67 + 36)] = 256;
  v48 = sub_100007D50(&qword_100158588);
  v49 = v68;
  sub_100007E78((uint64_t)v8, (uint64_t)v68 + *(int *)(v48 + 36), &qword_100158640);
  memcpy(v49, v75, 0x109uLL);
  sub_10000F7A4((uint64_t)v75);
  sub_100007F38((uint64_t)v8, &qword_100158640);
  sub_10000F854((uint64_t)v11);
  return sub_10000F890((uint64_t)v75);
}

uint64_t sub_1000142AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;

  v8 = Image.init(systemName:)(0xD000000000000014, 0x8000000100112F50);
  v10 = *(_QWORD *)(a1 + *(int *)(_s15ShazamEventsApp17SelectAssetButtonVMa_0(0, a2, a3, v9) + 36));
  v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_QWORD *)(v10 + 72);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  v15 = Text.init(_:tableName:bundle:comment:)(v11, v12, v13, v14, 0, 0, 0, 0, 0, 256);
  v17 = v16;
  v19 = v18;
  LOBYTE(v14) = v20 & 1;
  KeyPath = swift_getKeyPath(&unk_100108BE8);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 16) = v17;
  *(_BYTE *)(a4 + 24) = v14;
  *(_QWORD *)(a4 + 32) = v19;
  *(_QWORD *)(a4 + 40) = KeyPath;
  *(_QWORD *)(a4 + 48) = 1;
  *(_BYTE *)(a4 + 56) = 0;
  swift_retain(v8);
  sub_10000F844(v15, v17, v14);
  swift_bridgeObjectRetain(v19);
  swift_retain(KeyPath);
  sub_100007D90(v15, v17, v14);
  swift_release(v8);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_100014404@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000120B0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100014414()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WatchFacesView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100012668);
}

uint64_t sub_100014428@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100012748(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

double sub_100014434@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000127D0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100014440@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100012304(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_100014450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for WatchFacesView(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for WatchFacesViewModel(255, v5, v6, v12);
  v14 = type metadata accessor for Bindable(0, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v4 + v10, v14);
  v15 = v4 + v10 + *(int *)(v7 + 36);
  v16 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v5);
  v17 = type metadata accessor for Optional(255);
  v18 = type metadata accessor for State(0, v17);
  swift_release(*(_QWORD *)(v15 + *(int *)(v18 + 28)));
  swift_release(*(_QWORD *)(v4 + v10 + *(int *)(v7 + 40)));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

int *sub_100014560@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for WatchFacesView(0, v4, v5, a1);
  return sub_10001257C(v4, v5, a2);
}

uint64_t sub_1000145C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_100108AA0;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10001464C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v10 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = *v10;
    *v9 = *v10;
    v12 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = *v13;
    *v12 = *v13;
    v12[1] = v13[1];
    swift_retain(v11);
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_100014724(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = a1 + *(_QWORD *)(v3 + 64) + 7;
  v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8));
  return swift_release(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFF8));
}

uint64_t sub_100014770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  *v7 = *v8;
  v10 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  *v10 = *v11;
  v10[1] = v11[1];
  swift_retain(v9);
  swift_retain(v12);
  return a1;
}

uint64_t sub_1000147F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v11 = *v7;
  *v7 = v9;
  swift_retain(v9);
  swift_release(v11);
  v12 = (uint64_t *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v13 = *v12;
  v14 = *(_QWORD *)v10;
  *v12 = *(_QWORD *)v10;
  swift_retain(v14);
  swift_release(v13);
  v12[1] = *(_QWORD *)(v10 + 8);
  return a1;
}

uint64_t sub_100014884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000148F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;
  swift_release(v9);
  v10 = (uint64_t *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;
  swift_release(v12);
  v10[1] = v11[1];
  return a1;
}

uint64_t sub_100014974(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000149F8 + 4 * byte_100108A80[v10]))();
  }
}

void sub_100014A7C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_100014B78()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x100014BECLL);
}

void sub_100014B80(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100014B88);
  JUMPOUT(0x100014BECLL);
}

void sub_100014BC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x100014BECLL);
}

void sub_100014BD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x100014BECLL);
}

uint64_t sub_100014BD8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x100014BECLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x100014BE8);
    JUMPOUT(0x100014BE4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_100014C04(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t TupleTypeMetadata3;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100007D00(&qword_100158418);
  v4 = type metadata accessor for Array(255, v1);
  v5 = type metadata accessor for ScrollAsset(255);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v7 = *(uint64_t **)(v2 + 8);
  v52 = v4;
  v53 = v1;
  v54 = v5;
  v55 = (void *)WitnessTable;
  v56 = v7;
  v8 = type metadata accessor for ForEach(255, &v52);
  sub_100007428(&qword_100158420, type metadata accessor for ScrollAsset, (uint64_t)&unk_10010B230);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v10 = type metadata accessor for HStack(255, v8, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v10);
  v52 = v10;
  v53 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v52 = v10;
  v53 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v14 = type metadata accessor for ScrollView(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v14);
  v52 = v14;
  v53 = v15;
  v16 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v17 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v52 = v14;
  v53 = v15;
  v18 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v19 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v52 = v16;
  v53 = v17;
  v54 = v18;
  v55 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v20 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v52 = v19;
  v53 = v1;
  v54 = v20;
  v55 = v7;
  v21 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 0);
  v52 = v19;
  v53 = v1;
  v54 = v20;
  v55 = v7;
  v22 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v52 = v21;
  v53 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _FrameLayout);
  v25 = type metadata accessor for Optional(255);
  v52 = v21;
  v53 = v22;
  swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v27 = v7[1];
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v25);
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v55 = (void *)v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v52, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v30 = sub_100007D00(&qword_100158428);
  v31 = type metadata accessor for ModifiedContent(255, v29, v30);
  v32 = sub_100007D00(&qword_100158768);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = type metadata accessor for ModifiedContent(255, v33, &type metadata for _PaddingLayout);
  type metadata accessor for PageControl(255, v1, v27, v35);
  v36 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v36, 0, 0);
  v38 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v38);
  v40 = type metadata accessor for VStack(255, v38, v39);
  v41 = type metadata accessor for ModifiedContent(255, v40, &type metadata for _AppearanceActionModifier);
  _s15ShazamEventsApp17SelectAssetButtonVMa_0(255, v1, v2, v42);
  v43 = type metadata accessor for Optional(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v3, v41, v43, 0, 0);
  v45 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v46 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v45);
  v47 = type metadata accessor for VStack(255, v45, v46);
  v48 = type metadata accessor for ModifiedContent(255, v47, &type metadata for _PaddingLayout);
  v49 = sub_100007D00(&qword_100158438);
  v50 = type metadata accessor for ModifiedContent(255, v48, v49);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v47);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v48);
  sub_10000F4E0(&qword_100158458, &qword_100158438, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
}

uint64_t sub_1000150D4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100116258, 1);
}

uint64_t sub_100015108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = _s15ShazamEventsApp17SelectAssetButtonVMa_0(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_release(*(_QWORD *)(v12 + *(int *)(v6 + 36)));
  swift_release(*(_QWORD *)(v12 + *(int *)(v6 + 40)));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_10001519C()
{
  return sub_10000F6F4((uint64_t (*)(_QWORD, uint64_t, uint64_t))_s15ShazamEventsApp17SelectAssetButtonVMa_0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100013B58);
}

uint64_t sub_1000151B0@<X0>(void *a1@<X8>)
{
  uint64_t *v1;

  return sub_100013F4C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000151CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v5 = v4[4];
  v6 = _s15ShazamEventsApp17SelectAssetButtonVMa_0(0, v5, v4[5], a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 48) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  swift_unknownObjectRelease(v4[2]);
  v12 = (char *)v4 + v9;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12, v5);
  swift_release(*(_QWORD *)&v12[*(int *)(v6 + 36)]);
  swift_release(*(_QWORD *)&v12[*(int *)(v6 + 40)]);
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_100015268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(_s15ShazamEventsApp17SelectAssetButtonVMa_0(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_10015880C);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10000FAC0;
  return sub_100013CBC(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_100015308()
{
  return sub_10000F31C(&qword_100158558, &qword_100158550, (void (*)(void))sub_10000F0E8);
}

uint64_t sub_100015334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[4];

  v46 = a1;
  v47 = a3;
  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&unk_100108C38, v7);
  v9 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v38 = v9;
  v10 = sub_100007D00(&qword_100158898);
  v11 = *(_QWORD *)(a2 + 16);
  v42 = *(_QWORD *)(a2 + 24);
  v43 = v11;
  v12 = type metadata accessor for _PreferenceWritingModifier(255, v11, v42);
  v13 = type metadata accessor for ModifiedContent(255, v10, v12);
  v14 = sub_100015DCC();
  v15 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v12);
  v50[2] = v14;
  v50[3] = v15;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v16 = type metadata accessor for GeometryReader(255, v13, v39);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v16);
  v41 = type metadata accessor for _BackgroundModifier(255, v16, v40);
  v17 = type metadata accessor for ModifiedContent(0, v9, v41);
  v44 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v38 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v45, a2);
  v23 = *(unsigned __int8 *)(v4 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(&unk_100148868, v24 + v5, v23 | 7);
  v26 = v42;
  *(_QWORD *)(v25 + 16) = v43;
  *(_QWORD *)(v25 + 24) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v25 + v24, v6, a2);
  v27 = GeometryReader.init(content:)(sub_100015F60, v25, v13, v39);
  v29 = v28;
  v50[0] = v27;
  v50[1] = v28;
  v30 = static Alignment.center.getter(v27);
  v32 = v31;
  v33 = v38;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v38);
  View.background<A>(_:alignment:)(v50, v30, v32, v33, v16, v34, v40);
  swift_release(v29);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v41);
  v48 = v34;
  v49 = v35;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  sub_10005135C((uint64_t)v20, v17, (uint64_t)v22);
  v36 = *(void (**)(char *, uint64_t))(v44 + 8);
  v36(v20, v17);
  sub_1000424BC((uint64_t)v22, v17, v47);
  return ((uint64_t (*)(char *, uint64_t))v36)(v22, v17);
}

uint64_t sub_100015618@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t WitnessTable;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;

  v31 = a1;
  v36 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v29 - v9;
  v11 = sub_100007D00(&qword_100158898);
  v30 = v11;
  v32 = type metadata accessor for _PreferenceWritingModifier(255, a3, a4);
  v12 = type metadata accessor for ModifiedContent(0, v11, v32);
  v35 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v29 - v17;
  v19 = static Color.clear.getter(v16);
  KeyPath = swift_getKeyPath(&unk_100108C88);
  v40 = v19;
  v20 = *a2;
  v22 = type metadata accessor for SizeModifier(0, a3, a4, v21);
  v23 = *(void (**)(uint64_t))((char *)a2 + *(int *)(v22 + 40));
  v24 = GeometryProxy.frame(in:)((char *)a2 + *(int *)(v22 + 36));
  v23(v24);
  v25 = sub_100015DCC();
  View.preference<A>(key:value:)(v20, v10, v30, a3, v25, a4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  swift_release(KeyPath);
  swift_release(v40);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v32);
  v37 = v25;
  v38 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  sub_10005135C((uint64_t)v15, v12, (uint64_t)v18);
  v27 = *(void (**)(char *, uint64_t))(v35 + 8);
  v27(v15, v12);
  sub_1000424BC((uint64_t)v18, v12, v36);
  return ((uint64_t (*)(char *, uint64_t))v27)(v18, v12);
}

uint64_t sub_10001584C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  *a7 = a1;
  v11 = type metadata accessor for SizeModifier(0, a5, a6, a4);
  v12 = (char *)a7 + *(int *)(v11 + 36);
  v13 = type metadata accessor for CoordinateSpace(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  v15 = (_QWORD *)((char *)a7 + *(int *)(v11 + 40));
  *v15 = a3;
  v15[1] = a4;
  return result;
}

uint64_t type metadata accessor for SizeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeModifier);
}

uint64_t sub_1000158DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject.Type + 64;
  result = type metadata accessor for CoordinateSpace(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100015960(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for CoordinateSpace(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 40);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v5 = v14[1];
    *v13 = *v14;
    v13[1] = v5;
  }
  swift_retain(v5);
  return a1;
}

uint64_t sub_100015A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
}

_QWORD *sub_100015A5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *sub_100015AE0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  v14 = v11[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

_QWORD *sub_100015B70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *sub_100015BE8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = *(_QWORD *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_100015C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015C78);
}

uint64_t sub_100015C78(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CoordinateSpace(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_100015CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015D00);
}

char *sub_100015D00(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CoordinateSpace(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100015D74(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001162E8, 1);
}

uint64_t sub_100015DB0()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

unint64_t sub_100015DCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001588A0;
  if (!qword_1001588A0)
  {
    v1 = sub_100007D00(&qword_100158898);
    sub_100015E38();
    sub_100015E7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001588A0);
  }
  return result;
}

unint64_t sub_100015E38()
{
  unint64_t result;

  result = qword_1001588A8;
  if (!qword_1001588A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_1001588A8);
  }
  return result;
}

unint64_t sub_100015E7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001588B0;
  if (!qword_1001588B0)
  {
    v1 = sub_100007D00(&qword_1001588B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001588B0);
  }
  return result;
}

uint64_t sub_100015EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for SizeModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  v11 = v4 + v8;
  v12 = v4 + v8 + *(int *)(v5 + 36);
  v13 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v11 + *(int *)(v5 + 40) + 8));
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_100015F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SizeModifier(0, v6, v7, a2) - 8) + 80);
  return sub_100015618(a1, (uint64_t *)(v3 + ((v8 + 32) & ~v8)), v6, v7, a3);
}

uint64_t sub_100015FD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SizeModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_100108C38, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_100007D00(&qword_100158898);
  v10 = type metadata accessor for _PreferenceWritingModifier(255, v4, v5);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  sub_100015DCC();
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v10);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for GeometryReader(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v13);
  v15 = type metadata accessor for _BackgroundModifier(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v8, v15);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_100016124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSString v12;
  Class isa;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v18 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v1 + 56))((char *)&v18 - v9, 1, 1, v0, v8);
  v11 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setDateFormat:", v12);

  sub_100016318((uint64_t)v10, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
  {
    sub_100016360((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  sub_100016360((uint64_t)v10);
  v14 = Date._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v11, "stringFromDate:", v14);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  return v16;
}

uint64_t sub_100016318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_1001588C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100016360(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_1001588C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for Blur()
{
  return &type metadata for Blur;
}

void *sub_1000163B0()
{
  return &protocol witness table for Never;
}

id sub_1000163BC()
{
  _QWORD *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", *v0);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v1);

  return v2;
}

void sub_100016428(void *a1)
{
  _QWORD *v1;
  id v3;

  v3 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", *v1);
  objc_msgSend(a1, "setEffect:", v3);

}

uint64_t sub_1000164A0(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_1000164E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000165EC();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100016530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000165EC();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100016580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000165EC();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000165A8()
{
  unint64_t result;

  result = qword_1001588C8;
  if (!qword_1001588C8)
  {
    result = swift_getWitnessTable(&unk_100108CC0, &type metadata for Blur);
    atomic_store(result, (unint64_t *)&qword_1001588C8);
  }
  return result;
}

unint64_t sub_1000165EC()
{
  unint64_t result;

  result = qword_1001588D0;
  if (!qword_1001588D0)
  {
    result = swift_getWitnessTable(&unk_100108D10, &type metadata for Blur);
    atomic_store(result, (unint64_t *)&qword_1001588D0);
  }
  return result;
}

uint64_t sub_10001663C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100016688(&qword_1001588D8, (uint64_t)&protocol conformance descriptor for PromotionalAssets.Video);
  result = sub_100016688(qword_1001588E0, (uint64_t)&protocol conformance descriptor for PromotionalAssets.Video);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100016688(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PromotionalAssets.Video(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000166CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 5, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_100016768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_100016AE0(a1);
  return v3;
}

double sub_1000167A4()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100108EC0);
  sub_100016810(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
}

uint64_t sub_1000167FC(double a1)
{
  return sub_1000169D8((uint64_t)&unk_100108EC0, (uint64_t)sub_100016D78, a1);
}

uint64_t sub_100016810(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_100108E30, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_10001686C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_100108E30, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_100016900()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100108E88);
  sub_100016810(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
}

uint64_t sub_100016958(double a1)
{
  return sub_1000169D8((uint64_t)&unk_100108E88, (uint64_t)sub_100016CEC, a1);
}

double sub_10001696C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_100108E50);
  sub_100016810(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t sub_1000169C4(double a1)
{
  return sub_1000169D8((uint64_t)&unk_100108E50, (uint64_t)sub_100016C60, a1);
}

uint64_t sub_1000169D8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  double v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v9 = v3;
  v10 = a3;
  sub_10001686C(KeyPath, a2, (uint64_t)&v8, (uint64_t)&type metadata for () + 8);
  return swift_release(KeyPath);
}

double sub_100016A54()
{
  return sub_100016900() * 0.92;
}

double sub_100016A74()
{
  return sub_10001696C() * 0.96;
}

double sub_100016A94()
{
  return sub_100016900() * 0.92 * 0.14;
}

double sub_100016AC0()
{
  return sub_10001696C() * -0.022;
}

uint64_t *sub_100016AE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 104)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112)) = 0;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 120)) = 0;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 96), a1);
  return v1;
}

uint64_t sub_100016B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100016BBC()
{
  uint64_t v0;

  sub_100016B5C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for SavedWallpaperViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SavedWallpaperViewModel);
}

void sub_100016BEC(double *a1@<X8>)
{
  *a1 = sub_10001696C();
}

uint64_t sub_100016C14(double *a1)
{
  return sub_1000169D8((uint64_t)&unk_100108E50, (uint64_t)sub_100016C60, *a1);
}

uint64_t sub_100016C48()
{
  return 16;
}

__n128 sub_100016C54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100016C60()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 120)) = result;
  return result;
}

void sub_100016C78(double *a1@<X8>)
{
  *a1 = sub_100016900();
}

uint64_t sub_100016CA0(double *a1)
{
  return sub_1000169D8((uint64_t)&unk_100108E88, (uint64_t)sub_100016CEC, *a1);
}

uint64_t sub_100016CD4()
{
  return 16;
}

__n128 sub_100016CE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100016CEC()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 112)) = result;
  return result;
}

void sub_100016D04(double *a1@<X8>)
{
  *a1 = sub_1000167A4();
}

uint64_t sub_100016D2C(double *a1)
{
  return sub_1000169D8((uint64_t)&unk_100108EC0, (uint64_t)sub_100016D78, *a1);
}

uint64_t sub_100016D60()
{
  return 16;
}

__n128 sub_100016D6C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100016D78()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 104)) = result;
  return result;
}

uint64_t *sub_100016D90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for UserInterfaceSizeClass(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        v12 = sub_100007D50(&qword_100158970);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(v7, v8, v10);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      v14 = v7;
      v15 = v9;
      v16 = 1;
    }
    else
    {
      v13 = *v8;
      *v7 = *v8;
      swift_retain(v13);
      v14 = v7;
      v15 = v9;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_100016ECC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

uint64_t *sub_100016F7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  v9 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = sub_100007D50(&qword_100158970);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      v13 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(v7, v8, v10);
      v13 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
  }
  else
  {
    v14 = *v8;
    *v7 = *v8;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v13);
  return a1;
}

uint64_t *sub_10001708C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_100007F38((uint64_t)a1 + v8, &qword_100158968);
    v11 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100007D50(&qword_100158970);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        v15 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v9, v10, v12);
        v15 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v15);
  }
  return a1;
}

_OWORD *sub_1000171D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
    {
      v10 = sub_100007D50(&qword_100158970);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v5, v6, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1000172D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_100007F38((uint64_t)a1 + v7, &qword_100158968);
    v10 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for UserInterfaceSizeClass(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        v13 = sub_100007D50(&qword_100158970);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100017410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001741C);
}

uint64_t sub_10001741C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100007D50(&qword_100158978);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_1000174A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000174B4);
}

char *sub_1000174B4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = sub_100007D50(&qword_100158978);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for EventRootView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001589D8;
  if (!qword_1001589D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventRootView);
  return result;
}

void sub_100017568(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100108F10;
  sub_1000175DC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1000175DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001589E8)
  {
    v2 = sub_100007D00(&qword_100158970);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001589E8);
  }
}

uint64_t sub_100017634(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116424, 1);
}

uint64_t sub_100017644@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  uint64_t *v26;
  char v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  unsigned __int8 v78;

  v67 = a1;
  v2 = type metadata accessor for TaskPriority(0);
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  __chkstk_darwin(v2);
  v64 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v52 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_100158A18);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_100158970);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v51 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v51 - v17;
  v19 = sub_100007D50(&qword_100158A20);
  v62 = *(_QWORD *)(v19 - 8);
  v63 = v19;
  __chkstk_darwin(v19);
  v68 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100007D50(&qword_100158A28);
  __chkstk_darwin(v61);
  v55 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017B9C(v1);
  v69 = v70;
  v59 = v72;
  v60 = v71;
  v57 = v74;
  v58 = v73;
  v56 = v75;
  v53 = v76;
  v22 = v77;
  v54 = v78;
  type metadata accessor for EventRootView(0);
  sub_100018474((uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v16, enum case for UserInterfaceSizeClass.compact(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v23 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100007E78((uint64_t)v18, (uint64_t)v9, &qword_100158970);
  sub_100007E78((uint64_t)v16, v23, &qword_100158970);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v9, 1, v4) == 1)
  {
    sub_100007F38((uint64_t)v16, &qword_100158970);
    sub_100007F38((uint64_t)v18, &qword_100158970);
    v25 = v24(v23, 1, v4);
    if (v25 == 1)
      v26 = &qword_100158970;
    else
      v26 = &qword_100158A18;
    if (v25 == 1)
      v27 = -1;
    else
      v27 = 0;
  }
  else
  {
    sub_100007E78((uint64_t)v9, (uint64_t)v13, &qword_100158970);
    if (v24(v23, 1, v4) == 1)
    {
      sub_100007F38((uint64_t)v16, &qword_100158970);
      sub_100007F38((uint64_t)v18, &qword_100158970);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v27 = 0;
      v26 = &qword_100158A18;
    }
    else
    {
      v28 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v52, v23, v4);
      v29 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v28, v4, v29);
      v30 = *(void (**)(char *, uint64_t))(v5 + 8);
      v30(v28, v4);
      v26 = &qword_100158970;
      sub_100007F38((uint64_t)v16, &qword_100158970);
      sub_100007F38((uint64_t)v18, &qword_100158970);
      v30(v13, v4);
    }
  }
  sub_100007F38((uint64_t)v9, v26);
  v32 = v59;
  v31 = v60;
  v70 = v69;
  v71 = v60;
  v34 = v57;
  v33 = v58;
  v72 = v59;
  v73 = v58;
  v35 = v56;
  v74 = v57;
  v75 = v56;
  v36 = v53;
  v76 = v53;
  v77 = v22;
  v37 = v54;
  v78 = v54;
  v38 = sub_100007D50(&qword_100158A30);
  v39 = sub_1000186A4();
  View.statusBar(hidden:)(v27 & 1, v38, v39);
  v40 = sub_100018914(v69, v31, v32, v33, v34, v35, v36, v22, v37);
  v41 = v64;
  static TaskPriority.userInitiated.getter(v40);
  v42 = (uint64_t)v55;
  v43 = &v55[*(int *)(v61 + 36)];
  v44 = type metadata accessor for _TaskModifier(0);
  v46 = v65;
  v45 = v66;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v43[*(int *)(v44 + 20)], v41, v66);
  *(_QWORD *)v43 = &unk_100158AA0;
  *((_QWORD *)v43 + 1) = 0;
  v48 = v62;
  v47 = v63;
  v49 = v68;
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 16))(v42, v68, v63);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v45);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
  return sub_100018EB4(v42, v67, &qword_100158A28);
}

uint64_t sub_100017B9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*a1)
    __asm { BR              X11 }
  v1 = a1[1];
  v2 = type metadata accessor for RemoteViewConfiguration();
  v3 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.error()(0, v1, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_100018318()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_100018380, v2, v3);
}

uint64_t sub_100018380()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1001580C8 != -1)
    swift_once(&qword_1001580C8, sub_10005592C);
  v1 = (_QWORD *)swift_task_alloc(dword_10015AC84);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1000183F4;
  return sub_1000554B8();
}

uint64_t sub_1000183F4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return swift_task_switch(sub_100018440, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100018440()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_100158968);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007E78(v2, (uint64_t)v10, &qword_100158968);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
    return sub_100018EB4((uint64_t)v10, a1, &qword_100158970);
  v12 = *v10;
  v13 = static os_log_type_t.fault.getter();
  v14 = static Log.runtimeIssuesLog.getter();
  v15 = v13;
  if (os_log_type_enabled(v14, v13))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v19[1] = a1;
    v18 = v17;
    v21 = v17;
    *(_DWORD *)v16 = 136315138;
    v20 = sub_10003FCB4(0xD000000000000020, 0x8000000100112FF0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, v12);
  swift_release(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_1000186A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158A38;
  if (!qword_100158A38)
  {
    v1 = sub_100007D00(&qword_100158A30);
    sub_10001881C(&qword_100158A40, &qword_100158A48, (void (*)(void))sub_100018728, (void (*)(void))sub_1000188D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100158A38);
  }
  return result;
}

uint64_t sub_100018728()
{
  return sub_10001881C(&qword_100158A50, &qword_100158A58, (void (*)(void))sub_10001874C, (void (*)(void))sub_1000187F8);
}

uint64_t sub_10001874C()
{
  return sub_10001881C(&qword_100158A60, &qword_100158A68, (void (*)(void))sub_100018770, (void (*)(void))sub_1000187B4);
}

unint64_t sub_100018770()
{
  unint64_t result;

  result = qword_100158A70;
  if (!qword_100158A70)
  {
    result = swift_getWitnessTable(&unk_10010E2A4, &type metadata for EventContentView);
    atomic_store(result, (unint64_t *)&qword_100158A70);
  }
  return result;
}

unint64_t sub_1000187B4()
{
  unint64_t result;

  result = qword_100158A78;
  if (!qword_100158A78)
  {
    result = swift_getWitnessTable(&unk_10010B368, &type metadata for ArtistEventContentView);
    atomic_store(result, (unint64_t *)&qword_100158A78);
  }
  return result;
}

uint64_t sub_1000187F8()
{
  return sub_10001881C(&qword_100158A80, &qword_100158A88, (void (*)(void))sub_10001888C, (void (*)(void))sub_1000188D0);
}

uint64_t sub_10001881C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007D00(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001888C()
{
  unint64_t result;

  result = qword_100158A90;
  if (!qword_100158A90)
  {
    result = swift_getWitnessTable(&unk_10010FBC8, &type metadata for VenueEventContentView);
    atomic_store(result, (unint64_t *)&qword_100158A90);
  }
  return result;
}

unint64_t sub_1000188D0()
{
  unint64_t result;

  result = qword_100158A98;
  if (!qword_100158A98)
  {
    result = swift_getWitnessTable(&unk_1001119C0, &type metadata for PromotionalAssetsContentView);
    atomic_store(result, (unint64_t *)&qword_100158A98);
  }
  return result;
}

uint64_t sub_100018914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, char a9)
{
  if ((a9 & 1) == 0)
    return sub_100018958(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  swift_release(a1);
  return swift_release(a2);
}

uint64_t sub_100018958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  if ((a9 & 1) != 0)
    return sub_1000189C4(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  else
    return sub_100018970(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100018970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRelease(a2);
  sub_1000189BC(a3, a4);
  return swift_release(a6);
}

uint64_t sub_1000189BC(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_1000189C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v9;

  if ((a8 & 1) != 0)
  {
    swift_release(a1);
    v9 = a2;
  }
  else
  {
    v9 = a6;
    swift_bridgeObjectRelease(a2);
    sub_1000189BC(a3, a4);
  }
  return swift_release(v9);
}

uint64_t sub_100018A2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100018C48(&qword_1001582E8, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_100018A60(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10003FCB4(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_100018FA8(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100018C18@<X0>(uint64_t a1@<X8>)
{
  return sub_100018C48(&qword_100158AC0, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100018C48@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100007D50(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007E78(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_10003FCB4(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100018E80@<X0>(uint64_t a1@<X8>)
{
  return sub_100018C48(qword_100158AC8, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_100018EB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100007D50(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100018EFC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100158AB0;
  if (!qword_100158AB0)
  {
    v1 = sub_100007D00(&qword_100158A28);
    v2[0] = sub_100007D00(&qword_100158A30);
    v2[1] = sub_1000186A4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.statusBar(hidden:)>>, 1);
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158AB0);
  }
  return result;
}

uint64_t sub_100018FA8(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100018FB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Optional(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100108FA8;
    v5[3] = &unk_100108FC0;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 6, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_100019070()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + *(_QWORD *)(*v0 + 104);
  v2 = type metadata accessor for Optional(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + *(_QWORD *)(*v0 + 120);
  v4 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRelease(*((_QWORD *)v3 + 3));
  swift_bridgeObjectRelease(v4);
  v5 = (char *)v0 + *(_QWORD *)(*v0 + 136);
  v6 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_100019114()
{
  uint64_t v0;

  sub_100019070();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for UpcomingEventsViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UpcomingEventsViewModel);
}

uint64_t sub_100019144(uint64_t a1)
{
  return sub_100019164(8.0, a1, &qword_10016A490);
}

uint64_t sub_100019154(uint64_t a1)
{
  return sub_100019164(24.0, a1, &qword_10016A498);
}

uint64_t sub_100019164(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v5 = sub_100007D50(&qword_100158B50);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Font.Design(0, v6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = static Font.system(size:weight:design:)(0, 1, v8, a1);
  result = sub_100019218((uint64_t)v8);
  *a3 = v10;
  return result;
}

uint64_t sub_100019218(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_100158B50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100019258(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    v6 = a2[2];
    a1[1] = v7;
    a1[2] = v6;
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain(v5);
    swift_retain(v7);
    v11 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v13 = v9;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_10001933C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for OpenURLAction(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t *sub_1000193BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 24);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_100019474(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[2] = a2[2];
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_100007F38((uint64_t)a1 + v10, &qword_1001582E8);
    v13 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

uint64_t sub_100019568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100019618(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  a1[2] = a2[2];
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_100007F38((uint64_t)a1 + v8, &qword_1001582E8);
    v11 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100019700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001970C);
}

uint64_t sub_10001970C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158B78);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_10001978C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019798);
}

char *sub_100019798(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158B78);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SetlistSongRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_100158BD8;
  if (!qword_100158BD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistSongRowView);
  return result;
}

void sub_10001984C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_100109048;
  sub_1000198CC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000198CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100158BE8)
  {
    v2 = type metadata accessor for OpenURLAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100158BE8);
  }
}

uint64_t sub_100019920(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001164F4, 1);
}

uint64_t sub_100019930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.gray.getter();
  v1 = Color.opacity(_:)(0.6);
  result = swift_release(v0);
  qword_100158B58 = v1;
  return result;
}

void sub_100019974()
{
  qword_100158B60 = 3028656112;
  *(_QWORD *)algn_100158B68 = 0xA400000000000000;
}

uint64_t sub_100019990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Font.body.getter();
  static Font.Weight.regular.getter();
  v1 = Font.weight(_:)(v0);
  result = swift_release(v0);
  qword_100158B70 = v1;
  return result;
}

uint64_t sub_1000199D0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v37 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_100158C20);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_100158C28);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_100158C30);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v16 = sub_100007D50(&qword_100158C38);
  sub_100019D04(v1, (uint64_t)&v8[*(int *)(v16 + 44)]);
  v17 = sub_100007D50(&qword_100158C40);
  v18 = swift_allocObject(v17, ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_100109020;
  static AccessibilityTraits.startsMediaSession.getter();
  v38 = v18;
  v19 = sub_100007428(&qword_100158C48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v20 = sub_100007D50(&qword_100158C50);
  v21 = sub_10000F4E0(&qword_100158C58, &qword_100158C50, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v20, v21, v2, v19);
  v22 = sub_10000F4E0(&qword_100158C60, &qword_100158C20, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityAddTraits(_:)(v5, v6, v22);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v23 = sub_100007F38((uint64_t)v8, &qword_100158C20);
  v24 = static Alignment.center.getter(v23);
  sub_100042850(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v24, v25);
  v26 = sub_100007F38((uint64_t)v11, &qword_100158C28);
  LOBYTE(v18) = static Edge.Set.bottom.getter(v26);
  v27 = EdgeInsets.init(_all:)(3.5);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = v37;
  sub_100007E78((uint64_t)v15, v37, &qword_100158C30);
  v35 = v34 + *(int *)(sub_100007D50(&qword_100158C68) + 36);
  *(_BYTE *)v35 = v18;
  *(double *)(v35 + 8) = v27;
  *(_QWORD *)(v35 + 16) = v29;
  *(_QWORD *)(v35 + 24) = v31;
  *(_QWORD *)(v35 + 32) = v33;
  *(_BYTE *)(v35 + 40) = 0;
  return sub_100007F38((uint64_t)v15, &qword_100158C30);
}

uint64_t sub_100019D04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;

  v54 = a1;
  v55 = a2;
  v2 = sub_100007D50(&qword_100158C70);
  __chkstk_darwin(v2);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_100158C78);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v52 - v9;
  v10 = type metadata accessor for Divider(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100158C80);
  __chkstk_darwin(v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_100158C88);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v52 = (uint64_t)&v52 - v22;
  v23 = Divider.init()(v21);
  v24 = static Edge.Set.bottom.getter(v23);
  v25 = EdgeInsets.init(_all:)(4.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  v32 = &v16[*(int *)(v14 + 36)];
  *v32 = v24;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  LOBYTE(v10) = static Edge.Set.leading.getter(v33);
  v34 = EdgeInsets.init(_all:)(64.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_100007E78((uint64_t)v16, (uint64_t)v20, &qword_100158C80);
  v41 = &v20[*(int *)(v17 + 36)];
  *v41 = v10;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  sub_100007F38((uint64_t)v16, &qword_100158C80);
  v42 = v52;
  v43 = sub_100018EB4((uint64_t)v20, v52, &qword_100158C88);
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v43);
  *((_QWORD *)v4 + 1) = 0x4030000000000000;
  v4[16] = 0;
  v44 = sub_100007D50(&qword_100158C90);
  v45 = sub_10001A0C8(v54, (uint64_t)&v4[*(int *)(v44 + 44)]);
  v46 = static Alignment.center.getter(v45);
  sub_1000428A8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v8, 0.0, 1, 0.0, 1, v46, v47);
  sub_100007F38((uint64_t)v4, &qword_100158C70);
  v48 = v53;
  sub_100018EB4((uint64_t)v8, v53, &qword_100158C78);
  sub_100007E78(v42, (uint64_t)v20, &qword_100158C88);
  sub_100007E78(v48, (uint64_t)v8, &qword_100158C78);
  v49 = v55;
  sub_100007E78((uint64_t)v20, v55, &qword_100158C88);
  v50 = sub_100007D50(&qword_100158C98);
  sub_100007E78((uint64_t)v8, v49 + *(int *)(v50 + 48), &qword_100158C78);
  sub_100007F38(v48, &qword_100158C78);
  sub_100007F38(v42, &qword_100158C88);
  sub_100007F38((uint64_t)v8, &qword_100158C78);
  return sub_100007F38((uint64_t)v20, &qword_100158C88);
}

uint64_t sub_10001A0C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t v65;
  uint64_t *v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD v198[3];
  _OWORD v199[3];

  v195 = a2;
  v175 = type metadata accessor for PlainButtonStyle(0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v173 = (char *)&v155 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for AccessibilityTraits(0);
  v167 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v165 = (char *)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SetlistSongRowView(0);
  v157 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v158 = v6;
  v159 = (uint64_t)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100007D50(&qword_100158CA0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v160 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_100158CA8);
  __chkstk_darwin(v8);
  v164 = (char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100007D50(&qword_100158CB0);
  __chkstk_darwin(v161);
  v168 = (uint64_t)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100007D50(&qword_100158CB8);
  __chkstk_darwin(v170);
  v172 = (uint64_t)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100007D50(&qword_100158CC0);
  v191 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v171 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = type metadata accessor for URL(0);
  v188 = *(_QWORD *)(v189 - 8);
  v13 = __chkstk_darwin(v189);
  v156 = (char *)&v155 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = v14;
  __chkstk_darwin(v13);
  v166 = (char *)&v155 - v15;
  v16 = sub_100007D50(&qword_100158CC8);
  v17 = __chkstk_darwin(v16);
  v194 = (uint64_t)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v192 = (char *)&v155 - v19;
  v20 = sub_100007D50(&qword_100158CD0);
  __chkstk_darwin(v20);
  v183 = (uint64_t *)((char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = sub_100007D50(&qword_100158CD8);
  __chkstk_darwin(v22);
  v185 = (uint64_t)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_100007D50(&qword_100158CE0);
  v24 = __chkstk_darwin(v182);
  v190 = (uint64_t)&v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v181 = (uint64_t)&v155 - v27;
  __chkstk_darwin(v26);
  v197 = (uint64_t)&v155 - v28;
  v179 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v179);
  v180 = (char *)&v155 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100007D50(&qword_100158658);
  v31 = __chkstk_darwin(v30);
  v184 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v155 - v33;
  v35 = sub_100007D50(&qword_100158CE8);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v155 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100007D50(&qword_100158CF0);
  __chkstk_darwin(v176);
  v40 = (char *)&v155 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100007D50(&qword_100158CF8);
  __chkstk_darwin(v177);
  v42 = (char *)&v155 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100007D50(&qword_100158D00);
  v43 = __chkstk_darwin(v178);
  v187 = (uint64_t)&v155 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v155 - v46;
  __chkstk_darwin(v45);
  v196 = (uint64_t)&v155 - v48;
  v186 = a1;
  v49 = *a1;
  v50 = sub_100033AC8((uint64_t)v34);
  v51 = static Animation.spring(response:dampingFraction:blendDuration:)(v50, 0.5, 1.0, 0.0);
  v52 = Transaction.init(animation:)(v51);
  v53 = sub_100007D50(&qword_100158D08);
  v54 = sub_10001BDDC();
  v55 = AsyncImage.init(url:scale:transaction:content:)(v34, v52, sub_10001B010, 0, v53, v54, 1.0);
  v56 = static Alignment.center.getter(v55);
  _FrameLayout.init(width:height:alignment:)(v198, 0x4048000000000000, 0, 0x4048000000000000, 0, v56, v57);
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v40, v38, v35);
  v58 = &v40[*(int *)(v176 + 36)];
  v59 = v198[1];
  *(_OWORD *)v58 = v198[0];
  *((_OWORD *)v58 + 1) = v59;
  *((_OWORD *)v58 + 2) = v198[2];
  v60 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  v61 = static Alignment.center.getter(v60);
  v63 = v62;
  KeyPath = 0;
  v65 = 0;
  if (sub_100033C54())
  {
    KeyPath = swift_getKeyPath(&unk_1001090B0);
    swift_retain(v49);
    v65 = v49;
  }
  sub_100007E78((uint64_t)v40, (uint64_t)v42, &qword_100158CF0);
  v66 = (uint64_t *)&v42[*(int *)(v177 + 36)];
  *v66 = KeyPath;
  v66[1] = 0;
  v66[2] = v65;
  v66[3] = v61;
  v66[4] = v63;
  sub_100007F38((uint64_t)v40, &qword_100158CF0);
  v67 = v180;
  v68 = &v180[*(int *)(v179 + 20)];
  v69 = enum case for RoundedCornerStyle.continuous(_:);
  v70 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 104))(v68, v69, v70);
  __asm { FMOV            V0.2D, #5.0 }
  *v67 = _Q0;
  v76 = (uint64_t)&v47[*(int *)(v178 + 36)];
  sub_10001BFB8((uint64_t)v67, v76, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v76 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v42, (uint64_t)v47, &qword_100158CF8);
  sub_10001E24C((uint64_t)v67, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100007F38((uint64_t)v42, &qword_100158CF8);
  v77 = sub_100018EB4((uint64_t)v47, v196, &qword_100158D00);
  v78 = static HorizontalAlignment.leading.getter(v77);
  v79 = (uint64_t)v183;
  *v183 = v78;
  *(_QWORD *)(v79 + 8) = 0x4008000000000000;
  *(_BYTE *)(v79 + 16) = 0;
  v80 = sub_100007D50(&qword_100158D60);
  v81 = (uint64_t)v186;
  v82 = sub_10001B394((uint64_t)v186, (char *)(v79 + *(int *)(v80 + 44)));
  v83 = static Alignment.leading.getter(v82);
  v84 = v185;
  sub_100042ACC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v185, 0.0, 1, 0.0, 1, v83, v85);
  v86 = sub_100007F38(v79, &qword_100158CD0);
  v87 = static Edge.Set.trailing.getter(v86);
  v88 = EdgeInsets.init(_all:)(8.0);
  v90 = v89;
  v92 = v91;
  v94 = v93;
  v95 = v181;
  sub_100007E78(v84, v181, &qword_100158CD8);
  v96 = v95 + *(int *)(v182 + 36);
  *(_BYTE *)v96 = v87;
  *(double *)(v96 + 8) = v88;
  *(_QWORD *)(v96 + 16) = v90;
  *(_QWORD *)(v96 + 24) = v92;
  *(_QWORD *)(v96 + 32) = v94;
  *(_BYTE *)(v96 + 40) = 0;
  sub_100007F38(v84, &qword_100158CD8);
  sub_100018EB4(v95, v197, &qword_100158CE0);
  v97 = *(_QWORD *)(*(_QWORD *)v81 + 64);
  v98 = *(_QWORD *)(*(_QWORD *)v81 + 72);
  sub_10001BF94((_QWORD *)(*(_QWORD *)v81 + 40), v97);
  v99 = (uint64_t)v184;
  (*(void (**)(uint64_t, uint64_t))(v98 + 80))(v97, v98);
  v100 = v188;
  v101 = v189;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48))(v99, 1, v189) == 1)
  {
    sub_100007F38(v99, &qword_100158658);
    v102 = 1;
    v103 = v193;
    v104 = (uint64_t)v192;
    v105 = v191;
  }
  else
  {
    v106 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 32);
    v107 = v166;
    v106(v166, v99, v101);
    v108 = v81;
    v109 = v159;
    sub_10001BFB8(v108, v159, type metadata accessor for SetlistSongRowView);
    v110 = v156;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v156, v107, v101);
    v111 = *(unsigned __int8 *)(v157 + 80);
    v112 = (v111 + 16) & ~v111;
    v113 = *(unsigned __int8 *)(v100 + 80);
    v114 = (v158 + v113 + v112) & ~v113;
    v115 = swift_allocObject(&unk_100148BD0, v114 + v155, v111 | v113 | 7);
    sub_10001C104(v109, v115 + v112);
    v106((char *)(v115 + v114), (uint64_t)v110, v101);
    v116 = sub_100007D50(&qword_100158D70);
    v117 = sub_10001C1A8();
    v118 = v160;
    Button.init(action:label:)(sub_10001C148, v115, sub_10001BBC0, 0, v116, v117);
    v119 = sub_100007D50(&qword_100158C40);
    v120 = v167;
    v121 = swift_allocObject(v119, ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80))+ *(_QWORD *)(v167 + 72), *(unsigned __int8 *)(v167 + 80) | 7);
    *(_OWORD *)(v121 + 16) = xmmword_100109020;
    static AccessibilityTraits.startsMediaSession.getter();
    *(_QWORD *)&v199[0] = v121;
    v122 = sub_100007428(&qword_100158C48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v123 = sub_100007D50(&qword_100158C50);
    v124 = sub_10000F4E0(&qword_100158C58, &qword_100158C50, (uint64_t)&protocol conformance descriptor for [A]);
    v125 = v165;
    v126 = v123;
    v127 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)(v199, v126, v124, v169, v122);
    v128 = sub_10000F4E0(&qword_100158DA0, &qword_100158CA0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v129 = (uint64_t)v164;
    v130 = v163;
    View.accessibilityRemoveTraits(_:)(v125, v163, v128);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v125, v127);
    v131 = (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v118, v130);
    v132 = static Alignment.center.getter(v131);
    _FrameLayout.init(width:height:alignment:)(v199, 0x4046000000000000, 0, 0, 1, v132, v133);
    v134 = v168;
    sub_100007E78(v129, v168, &qword_100158CA8);
    v135 = (_OWORD *)(v134 + *(int *)(v161 + 36));
    v136 = v199[1];
    *v135 = v199[0];
    v135[1] = v136;
    v135[2] = v199[2];
    v137 = sub_100007F38(v129, &qword_100158CA8);
    v138 = static Alignment.center.getter(v137);
    v139 = v172;
    sub_100042B24(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v172, 0.0, 1, INFINITY, 0, v138, v140);
    v141 = sub_100007F38(v134, &qword_100158CB0);
    v142 = v173;
    PlainButtonStyle.init()(v141);
    v143 = sub_10001E0A8(&qword_100158DA8, &qword_100158CB8, (void (*)(void))sub_10001C2BC);
    v144 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v145 = v171;
    v146 = v175;
    View.buttonStyle<A>(_:)(v142, v170, v175, v143, v144);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v142, v146);
    sub_100007F38(v139, &qword_100158CB8);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v107, v101);
    v105 = v191;
    v104 = (uint64_t)v192;
    v103 = v193;
    (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v192, v145, v193);
    v102 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v104, v102, 1, v103);
  v147 = v196;
  v148 = v187;
  sub_100007E78(v196, v187, &qword_100158D00);
  v149 = v197;
  v150 = v190;
  sub_100007E78(v197, v190, &qword_100158CE0);
  v151 = v194;
  sub_100007E78(v104, v194, &qword_100158CC8);
  v152 = v195;
  sub_100007E78(v148, v195, &qword_100158D00);
  v153 = sub_100007D50(&qword_100158D68);
  sub_100007E78(v150, v152 + *(int *)(v153 + 48), &qword_100158CE0);
  sub_100007E78(v151, v152 + *(int *)(v153 + 64), &qword_100158CC8);
  sub_100007F38(v104, &qword_100158CC8);
  sub_100007F38(v149, &qword_100158CE0);
  sub_100007F38(v147, &qword_100158D00);
  sub_100007F38(v151, &qword_100158CC8);
  sub_100007F38(v150, &qword_100158CE0);
  return sub_100007F38(v148, &qword_100158D00);
}

uint64_t sub_10001B010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88))(v11, v8) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v11, v8);
    v12 = *v11;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v13 = Image.resizable(capInsets:resizingMode:)(v7, v12, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v37 = v13;
    v38 = 1;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0;
    swift_retain_n(v13, 2);
    v14 = sub_100007D50(&qword_100158D20);
    v15 = sub_100007D50(&qword_100158D38);
    v16 = sub_10001BE48();
    v17 = sub_10001BEF8();
    _ConditionalContent<>.init(storage:)(&v37, v14, v15, v16, v17);
    swift_release_n(v13, 2);
    result = swift_release(v12);
    v19 = v43;
    v20 = v44;
    v21 = v45;
    v22 = v46;
    v23 = v47;
  }
  else
  {
    if (qword_1001580A8 != -1)
      swift_once(&qword_1001580A8, sub_100051438);
    v24 = qword_10016A4C0;
    v25 = swift_retain(qword_10016A4C0);
    v26 = static Alignment.center.getter(v25);
    v28 = v27;
    sub_10001B318((uint64_t)&v43);
    v37 = v24;
    v38 = 256;
    v39 = v43;
    *(_QWORD *)&v40 = v44;
    *((_QWORD *)&v40 + 1) = DWORD2(v44);
    *(_QWORD *)&v41 = v26;
    *((_QWORD *)&v41 + 1) = v28;
    v42 = 1;
    v29 = sub_100007D50(&qword_100158D20);
    v30 = sub_100007D50(&qword_100158D38);
    v31 = sub_10001BE48();
    v32 = sub_10001BEF8();
    _ConditionalContent<>.init(storage:)(&v37, v29, v30, v31, v32);
    v36 = v43;
    v35 = v44;
    v34 = v45;
    v33 = v46;
    v23 = v47;
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
    v22 = v33;
    v21 = v34;
    v20 = v35;
    v19 = v36;
  }
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 32) = v21;
  *(_OWORD *)(a2 + 48) = v22;
  *(_BYTE *)(a2 + 64) = v23;
  return result;
}

uint64_t sub_10001B318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t result;

  v2 = Image.init(_internalSystemName:)(0x636973756DLL, 0xE500000000000000);
  v3 = static Font.title3.getter();
  static Font.Weight.regular.getter();
  v4 = Font.weight(_:)(v3);
  swift_release(v3);
  KeyPath = swift_getKeyPath(&unk_1001090E0);
  result = static HierarchicalShapeStyle.quaternary.getter();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10001B394@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD v111[2];
  _OWORD v112[11];
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;

  v105 = a2;
  v3 = type metadata accessor for Text.Suffix(0);
  v101 = *(_QWORD *)(v3 - 8);
  v102 = v3;
  __chkstk_darwin(v3);
  v100 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_100158DC8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v106 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v103 = (char *)&v100 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v100 - v11;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  sub_10001BF94((_QWORD *)(*(_QWORD *)a1 + 40), v13);
  *(_QWORD *)&v114 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v13, v14);
  *((_QWORD *)&v114 + 1) = v15;
  v107 = sub_10001DB0C();
  v16 = Text.init<A>(_:)(&v114, &type metadata for String);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Alignment.leading.getter();
  sub_100042B7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v114, 0.0, 1, 0.0, 1, v23, v24, v16, v18, v22, v20);
  sub_100007D90(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  v132 = v120;
  v133 = v121;
  v134 = v122;
  v128 = v116;
  v129 = v117;
  v130 = v118;
  v131 = v119;
  v126 = v114;
  v127 = v115;
  if (qword_100158070 != -1)
    swift_once(&qword_100158070, sub_100019990);
  v25 = qword_100158B70;
  KeyPath = swift_getKeyPath(&unk_1001090E0);
  v27 = swift_getKeyPath(&unk_100109110);
  v135 = 0;
  v120 = v132;
  v121 = v133;
  v122 = v134;
  v116 = v128;
  v117 = v129;
  v118 = v130;
  v119 = v131;
  v114 = v126;
  v115 = v127;
  *(_QWORD *)&v123 = KeyPath;
  *((_QWORD *)&v123 + 1) = v25;
  *(_QWORD *)&v124 = v27;
  *((_QWORD *)&v124 + 1) = 1;
  v125 = 0;
  v104 = a1;
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  sub_10001BF94((_QWORD *)(*(_QWORD *)a1 + 40), v28);
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 112);
  swift_retain(v25);
  v31 = v30(v28, v29);
  v108 = v6;
  v109 = v5;
  v110 = v12;
  if ((v31 & 1) != 0)
  {
    if (qword_100158068 != -1)
      swift_once(&qword_100158068, sub_100019974);
    v112[0] = xmmword_100158B60;
    swift_bridgeObjectRetain(*((_QWORD *)&xmmword_100158B60 + 1));
    v32 = Text.init<A>(_:)(v112, &type metadata for String);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    if (qword_100158060 != -1)
      swift_once(&qword_100158060, sub_100019930);
    v39 = v36 & 1;
    v40 = Text.foregroundColor(_:)(qword_100158B58, v32, v34, v39, v38);
    v42 = v41;
    v44 = v43;
    v46 = v45 & 1;
    sub_100007D90(v32, v34, v39);
    swift_bridgeObjectRelease(v38);
    v47 = Text.font(_:)(qword_100158B70, v40, v42, v46, v44);
    v49 = v48;
    v51 = v50;
    v53 = v52 & 1;
    sub_100007D90(v40, v42, v46);
    swift_bridgeObjectRelease(v44);
    v54 = v100;
    static Text.Suffix.alwaysVisible(_:)(v47, v49, v53, v51);
    sub_100007D90(v47, v49, v53);
    v55 = v51;
    v56 = v54;
    swift_bridgeObjectRelease(v55);
    v6 = v108;
    v5 = v109;
    v12 = v110;
  }
  else
  {
    v56 = v100;
    static Text.Suffix.none.getter();
  }
  v57 = sub_100007D50(&qword_100158DD8);
  v58 = sub_10001DB60();
  v59 = v103;
  View.textSuffix(_:)(v56, v57, v58);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v56, v102);
  v112[9] = v123;
  v112[10] = v124;
  v112[5] = v119;
  v112[6] = v120;
  v113 = v125;
  v112[7] = v121;
  v112[8] = v122;
  v112[0] = v114;
  v112[1] = v115;
  v112[2] = v116;
  v112[3] = v117;
  v112[4] = v118;
  sub_10001DCCC((uint64_t)v112);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v59, v5);
  v60 = *(_QWORD *)(*(_QWORD *)v104 + 64);
  v61 = *(_QWORD *)(*(_QWORD *)v104 + 72);
  sub_10001BF94((_QWORD *)(*(_QWORD *)v104 + 40), v60);
  v111[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 56))(v60, v61);
  v111[1] = v62;
  v63 = Text.init<A>(_:)(v111, &type metadata for String);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  v70 = static Font.footnote.getter();
  static Font.Weight.regular.getter();
  v71 = Font.weight(_:)(v70);
  swift_release(v70);
  v72 = Text.font(_:)(v71, v63, v65, v69, v67);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  swift_release(v71);
  sub_100007D90(v63, v65, v69);
  swift_bridgeObjectRelease(v67);
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v79 = qword_10016A4B8;
  v111[0] = qword_10016A4B8;
  swift_retain(qword_10016A4B8);
  v107 = Text.foregroundStyle<A>(_:)(v111, v72, v74, v76 & 1, v78, &type metadata for Color, &protocol witness table for Color);
  v81 = v80;
  v83 = v82;
  v85 = v84 & 1;
  sub_100007D90(v72, v74, v76 & 1);
  swift_release(v79);
  swift_bridgeObjectRelease(v78);
  v86 = swift_getKeyPath(&unk_100109110);
  v87 = v108;
  v88 = v109;
  v89 = *(void (**)(char *, char *, uint64_t))(v108 + 16);
  v90 = v106;
  v89(v106, v110, v109);
  v91 = v105;
  v89(v105, v90, v88);
  v92 = &v91[*(int *)(sub_100007D50(&qword_100158E18) + 48)];
  v93 = v107;
  *(_QWORD *)v92 = v107;
  *((_QWORD *)v92 + 1) = v81;
  v94 = v81;
  v92[16] = v85;
  v95 = v83;
  *((_QWORD *)v92 + 3) = v83;
  *((_QWORD *)v92 + 4) = v86;
  *((_QWORD *)v92 + 5) = 1;
  v92[48] = 0;
  v96 = v93;
  v97 = v94;
  sub_10000F844(v93, v94, v85);
  v98 = *(void (**)(char *, uint64_t))(v87 + 8);
  swift_bridgeObjectRetain(v95);
  swift_retain(v86);
  v98(v110, v88);
  sub_100007D90(v96, v97, v85);
  swift_release(v86);
  swift_bridgeObjectRelease(v95);
  return ((uint64_t (*)(char *, uint64_t))v98)(v90, v88);
}

uint64_t sub_10001BA7C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for OpenURLAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistSongRowView(0);
  sub_100018A2C((uint64_t)v7);
  OpenURLAction.callAsFunction(_:)(a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v8 = a1[1];
  v9 = *(_QWORD *)(*a1 + 24);
  if (v8)
  {
    v10 = *(_QWORD *)(*a1 + 16);
    swift_bridgeObjectRetain(v9);
    swift_retain(v8);
    sub_10008A874(v10, v9, 8, 11, 14, 0, 3u, v8);
    swift_bridgeObjectRelease(v9);
    return swift_release(v8);
  }
  else
  {
    v12 = a1[2];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    swift_bridgeObjectRetain(v9);
    result = EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001BBC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for SymbolVariants(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = sub_100007D50(&qword_100158DC0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_100158D88);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = Image.init(_internalSystemName:)(0x70612E636973756DLL, 0xE900000000000070);
  v16 = static SymbolVariants.square.getter();
  SymbolVariants.fill.getter(v16);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v8, v2);
  View.symbolVariant(_:)(v6, &type metadata for Image, &protocol witness table for Image);
  v17(v6, v2);
  v18 = swift_release(v24);
  v19 = static Alignment.center.getter(v18);
  v21 = sub_100042D5C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v19, v20);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v21);
  sub_100007E78((uint64_t)v15, a1, &qword_100158D88);
  *(_BYTE *)(a1 + *(int *)(sub_100007D50(&qword_100158D70) + 36)) = 0;
  return sub_100007F38((uint64_t)v15, &qword_100158D88);
}

unint64_t sub_10001BDDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158D10;
  if (!qword_100158D10)
  {
    v1 = sub_100007D00(&qword_100158D08);
    sub_10001BE48();
    sub_10001BEF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158D10);
  }
  return result;
}

unint64_t sub_10001BE48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158D18;
  if (!qword_100158D18)
  {
    v1 = sub_100007D00(&qword_100158D20);
    sub_10001BEB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158D18);
  }
  return result;
}

unint64_t sub_10001BEB4()
{
  unint64_t result;

  result = qword_100158D28;
  if (!qword_100158D28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, (unint64_t *)&qword_100158D28);
  }
  return result;
}

unint64_t sub_10001BEF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158D30;
  if (!qword_100158D30)
  {
    v1 = sub_100007D00(&qword_100158D38);
    sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    sub_10000F4E0(&qword_100158D50, &qword_100158D58, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158D30);
  }
  return result;
}

_QWORD *sub_10001BF94(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001BFB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001BFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for SetlistSongRowView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v10 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v11 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = v3 | v8 | 7;
  v14 = (v4 + v5 + v8) & ~v8;
  v15 = v14 + v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v14, v6);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_10001C104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SetlistSongRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C148()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for SetlistSongRowView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_10001BA7C((_QWORD *)(v0 + v2), v0 + ((v2 + v3 + v4) & ~v4));
}

unint64_t sub_10001C1A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158D78;
  if (!qword_100158D78)
  {
    v1 = sub_100007D00(&qword_100158D70);
    sub_10001C22C();
    sub_10000F4E0(&qword_100158D90, &qword_100158D98, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158D78);
  }
  return result;
}

unint64_t sub_10001C22C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100158D80;
  if (!qword_100158D80)
  {
    v1 = sub_100007D00(&qword_100158D88);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158D80);
  }
  return result;
}

uint64_t sub_10001C2BC()
{
  return sub_10001E0A8(&qword_100158DB0, &qword_100158CB0, (void (*)(void))sub_10001C2E0);
}

unint64_t sub_10001C2E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158DB8;
  if (!qword_100158DB8)
  {
    v1 = sub_100007D00(&qword_100158CA8);
    sub_10000F4E0(&qword_100158DA0, &qword_100158CA0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158DB8);
  }
  return result;
}

uint64_t sub_10001C37C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _BYTE v28[16];

  v8 = sub_100007D50(&qword_100158E38);
  __chkstk_darwin(v8);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100007D50(&qword_100158E40);
  v12 = __chkstk_darwin(v11);
  v14 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v10 = static Alignment.center.getter(v12);
  v10[1] = v15;
  v16 = sub_100007D50(&qword_100158E48);
  v17 = sub_10001C524(a1, a2 & 1, a3, (uint64_t)v10 + *(int *)(v16 + 44));
  v18 = static Alignment.center.getter(v17);
  sub_100042F28(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, INFINITY, 0, v18, v19);
  v20 = sub_100007F38((uint64_t)v10, &qword_100158E38);
  v21 = static Alignment.center.getter(v20);
  v23 = v22;
  v24 = static Color.black.getter();
  v25 = Color.opacity(_:)(0.5);
  swift_release(v24);
  sub_100007E78((uint64_t)v14, a4, &qword_100158E40);
  v26 = (uint64_t *)(a4 + *(int *)(sub_100007D50(&qword_100158E50) + 36));
  *v26 = v25;
  v26[1] = v21;
  v26[2] = v23;
  return sub_100007F38((uint64_t)v14, &qword_100158E40);
}

uint64_t sub_10001C524@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;

  v74 = a4;
  v75 = a1;
  v76 = a2 & 1;
  v5 = sub_100007D50(&qword_100158E58);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = sub_100007D50(&qword_100158E60);
  __chkstk_darwin(v73);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_100158E68);
  v11 = __chkstk_darwin(v10);
  v70 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v60 - v13;
  v69 = type metadata accessor for AnimationTimelineSchedule(0);
  v71 = *(_QWORD *)(v69 - 8);
  v15 = __chkstk_darwin(v69);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v68 = (char *)&v60 - v18;
  v19 = sub_100007D50(&qword_100158E70);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v67 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v66 = (char *)&v60 - v23;
  v24 = sub_100007D50(&qword_100158E78);
  v25 = __chkstk_darwin(v24);
  v72 = (uint64_t)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v60 - v27;
  v29 = sub_100033ED4();
  v30 = 1;
  if (v29)
  {
    v61 = v28;
    v62 = v20;
    v63 = v19;
    v64 = v9;
    v31 = v76;
    v32 = v75;
    v33 = sub_1000340B4();
    v65 = v14;
    v34 = a3;
    if (v33)
    {
      v35 = 1;
    }
    else
    {
      sub_10001DD3C(v32, v31);
      v35 = sub_100018A60(v32, v31);
      sub_100018FA8(v32, v31);
    }
    v36 = v68;
    AnimationTimelineSchedule.init(minimumInterval:paused:)(0x3FC999999999999ALL, 0, v35 & 1);
    v37 = swift_allocObject(&unk_100148C78, 40, 7);
    *(_QWORD *)(v37 + 16) = v32;
    *(_BYTE *)(v37 + 24) = v31 != 0;
    *(_QWORD *)(v37 + 32) = a3;
    v38 = v69;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v17, v36, v69);
    v39 = swift_allocObject(&unk_100148CA0, 32, 7);
    *(_QWORD *)(v39 + 16) = sub_10001E064;
    *(_QWORD *)(v39 + 24) = v37;
    sub_10001DD3C(v32, v31);
    swift_retain(v34);
    v40 = sub_100007D50(&qword_100158E90);
    v41 = sub_100007428(&qword_100158E98, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
    v42 = sub_10001E0A8(&qword_100158EA0, &qword_100158E90, (void (*)(void))sub_10001E110);
    v43 = v67;
    v44 = v39;
    a3 = v34;
    TimelineView<>.init(_:content:)(v17, sub_10001E0A0, v44, v38, v40, v41, v42);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v36, v38);
    v20 = v62;
    v19 = v63;
    v45 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v46 = v66;
    v45(v66, v43, v63);
    v28 = v61;
    v45(v61, v46, v19);
    v30 = 0;
    v9 = v64;
    v14 = v65;
  }
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v28, v30, 1, v19);
  *v7 = static Alignment.center.getter(v47);
  v7[1] = v48;
  v49 = sub_100007D50(&qword_100158E80);
  v50 = sub_10001CEB8(a3, (_QWORD *)((char *)v7 + *(int *)(v49 + 44)));
  v51 = static Color.white.getter(v50);
  sub_100007E78((uint64_t)v7, (uint64_t)v9, &qword_100158E58);
  *(_QWORD *)&v9[*(int *)(v73 + 36)] = v51;
  v52 = sub_100007F38((uint64_t)v7, &qword_100158E58);
  v53 = static Alignment.center.getter(v52);
  v54 = v70;
  sub_100042F80(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v70, 0.0, 1, INFINITY, 0, v53, v55);
  sub_100007F38((uint64_t)v9, &qword_100158E60);
  sub_100018EB4(v54, (uint64_t)v14, &qword_100158E68);
  v56 = v72;
  sub_100007E78((uint64_t)v28, v72, &qword_100158E78);
  sub_100007E78((uint64_t)v14, v54, &qword_100158E68);
  v57 = v74;
  sub_100007E78(v56, v74, &qword_100158E78);
  v58 = sub_100007D50(&qword_100158E88);
  sub_100007E78(v54, v57 + *(int *)(v58 + 48), &qword_100158E68);
  sub_100007F38((uint64_t)v14, &qword_100158E68);
  sub_100007F38((uint64_t)v28, &qword_100158E78);
  sub_100007F38(v54, &qword_100158E68);
  return sub_100007F38(v56, &qword_100158E78);
}

uint64_t sub_10001CAC4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double (*v20)(uint64_t, uint64_t);
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[3];

  v46 = a2;
  v41 = type metadata accessor for Font.TextStyle(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for CircularProgressViewStyle(0);
  __chkstk_darwin(v38);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_100007D50(&qword_100158EB8);
  v43 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_100158EE0);
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100007D50(&qword_100158EB0);
  __chkstk_darwin(v42);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1001091A0);
  *(_QWORD *)&v48[0] = a1;
  v15 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v48, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD **)(v16 + 200);
  v18 = v17[5];
  v19 = v17[6];
  sub_10001BF94(v17 + 2, v18);
  v20 = *(double (**)(uint64_t, uint64_t))(v19 + 8);
  swift_retain(v16);
  v21 = v20(v18, v19);
  swift_release(v16);
  *(double *)v48 = v21;
  BYTE8(v48[0]) = 0;
  v47 = 0x3FF0000000000000;
  v22 = sub_10001E208();
  v23 = ProgressView.init<A>(value:total:)(v48, &v47, &type metadata for Double, v22);
  *v6 = static Color.white.getter(v23);
  v24 = v38;
  *(_QWORD *)&v48[0] = 0x4000000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v4, enum case for Font.TextStyle.body(_:), v41);
  ScaledMetric.init(wrappedValue:relativeTo:)(v48, v4, &type metadata for Double, v22);
  v25 = sub_10000F4E0(&qword_100158EC0, &qword_100158EB8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v26 = sub_100007428(&qword_100158EC8, type metadata accessor for CircularProgressViewStyle, (uint64_t)&unk_10010CC9C);
  v27 = v40;
  View.progressViewStyle<A>(_:)(v6, v40, v24, v25, v26);
  sub_10001E24C((uint64_t)v6, type metadata accessor for CircularProgressViewStyle);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v8, v27);
  v29 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(v48, 0x4040000000000000, 0, 0x4040000000000000, 0, v29, v30);
  v32 = v44;
  v31 = v45;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v13, v11, v45);
  v33 = &v13[*(int *)(v42 + 36)];
  v34 = v48[1];
  *(_OWORD *)v33 = v48[0];
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v48[2];
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v31);
  v35 = v46;
  sub_100007E78((uint64_t)v13, v46, &qword_100158EB0);
  v36 = (uint64_t (**)())(v35 + *(int *)(sub_100007D50(&qword_100158E90) + 36));
  *v36 = sub_10001CE94;
  v36[1] = 0;
  return sub_100007F38((uint64_t)v13, &qword_100158EB0);
}

uint64_t sub_10001CE94()
{
  return Transaction.disablesAnimations.setter(1);
}

uint64_t sub_10001CEB8@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 (*v60)(uint64_t, uint64_t);
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 (*v68)(uint64_t, uint64_t);
  int v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 (*v83)(uint64_t, uint64_t);
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  double v90;
  double v91;
  uint64_t v92;
  double v93;
  _BOOL8 v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  BOOL v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t KeyPath;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[2];

  v142 = a2;
  v129 = type metadata accessor for ControlSize(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v125 = (char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100007D50(&qword_100158EB8);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v117 = (char *)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100007D50(&qword_100158EF8);
  __chkstk_darwin(v121);
  v6 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100007D50(&qword_100158F00);
  __chkstk_darwin(v120);
  v116 = (uint64_t)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100007D50(&qword_100158F08);
  __chkstk_darwin(v122);
  v119 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100007D50(&qword_100158F10);
  __chkstk_darwin(v130);
  v128 = (uint64_t)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100007D50(&qword_100158F18);
  __chkstk_darwin(v136);
  v133 = (uint64_t)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100007D50(&qword_100158F20);
  v11 = __chkstk_darwin(v138);
  v144 = (uint64_t)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v137 = (uint64_t)&v115 - v14;
  __chkstk_darwin(v13);
  v143 = (uint64_t)&v115 - v15;
  v141 = Image.init(systemName:)(0x69662E6573756170, 0xEA00000000006C6CLL);
  v140 = static Font.subheadline.getter();
  KeyPath = swift_getKeyPath(&unk_1001090E0);
  v16 = swift_getKeyPath(&unk_1001091A0);
  v145[0] = a1;
  v17 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v145, v16, v17);
  swift_release(v16);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD **)(v18 + 200);
  v20 = v19[5];
  v21 = v19[6];
  sub_10001BF94(v19 + 2, v20);
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 16);
  swift_retain(v18);
  LOBYTE(v132) = v22(v20, v21);
  v132 = v132;
  swift_release(v18);
  v23 = swift_getKeyPath(&unk_1001091A0);
  v145[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v145, v23, v17);
  swift_release(v23);
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_QWORD **)(v24 + 200);
  v26 = v25[5];
  v27 = v25[6];
  sub_10001BF94(v25 + 2, v26);
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 16);
  swift_retain(v24);
  LOBYTE(v126) = v28(v26, v27);
  v126 = v126;
  v29 = swift_release(v24);
  v30 = static UnitPoint.center.getter(v29);
  v134 = v31;
  v135 = v30;
  v32 = 1.0;
  v131 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 170.0, 15.0, 0.0);
  v33 = swift_getKeyPath(&unk_1001091A0);
  v145[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v145, v33, v17);
  swift_release(v33);
  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(_QWORD **)(v34 + 200);
  v36 = v35[5];
  v37 = v35[6];
  sub_10001BF94(v35 + 2, v36);
  v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16);
  swift_retain(v34);
  LOBYTE(v118) = v38(v36, v37);
  v118 = v118;
  v39 = swift_release(v34);
  v40 = v117;
  v41 = ProgressView<>.init<>()(v39);
  v42 = static Color.white.getter(v41);
  v43 = swift_getKeyPath(&unk_1001091C8);
  v44 = v123;
  v45 = v124;
  (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v6, v40, v124);
  v46 = (uint64_t *)&v6[*(int *)(v121 + 36)];
  *v46 = v43;
  v46[1] = v42;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v45);
  v47 = v116;
  sub_100007E78((uint64_t)v6, v116, &qword_100158EF8);
  *(_WORD *)(v47 + *(int *)(v120 + 36)) = 257;
  sub_100007F38((uint64_t)v6, &qword_100158EF8);
  v48 = v127;
  v49 = v125;
  v50 = v129;
  (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v125, enum case for ControlSize.small(_:), v129);
  v51 = swift_getKeyPath(&unk_1001091F8);
  v52 = (uint64_t)v119;
  v53 = (uint64_t *)&v119[*(int *)(v122 + 36)];
  v54 = sub_100007D50(&qword_100158F28);
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))((char *)v53 + *(int *)(v54 + 28), v49, v50);
  *v53 = v51;
  sub_100007E78(v47, v52, &qword_100158F00);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  sub_100007F38(v47, &qword_100158F00);
  v55 = swift_getKeyPath(&unk_1001091A0);
  v145[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v145, v55, v17);
  swift_release(v55);
  v56 = *(_QWORD *)(a1 + 32);
  v57 = *(_QWORD **)(v56 + 200);
  v58 = v57[5];
  v59 = v57[6];
  sub_10001BF94(v57 + 2, v58);
  v60 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v59 + 16);
  swift_retain(v56);
  LODWORD(v51) = v60(v58, v59);
  swift_release(v56);
  if ((_DWORD)v51 == 1)
    v61 = 1.0;
  else
    v61 = 0.0;
  v62 = v128;
  sub_100007E78(v52, v128, &qword_100158F08);
  *(double *)(v62 + *(int *)(v130 + 36)) = v61;
  sub_100007F38(v52, &qword_100158F08);
  v63 = swift_getKeyPath(&unk_1001091A0);
  v145[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v145, v63, v17);
  swift_release(v63);
  v64 = *(_QWORD *)(a1 + 32);
  v65 = *(_QWORD **)(v64 + 200);
  v66 = v65[5];
  v67 = v65[6];
  sub_10001BF94(v65 + 2, v66);
  v68 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v67 + 16);
  swift_retain(v64);
  v69 = v68(v66, v67);
  v70 = swift_release(v64);
  if (v69 == 1)
    v71 = 1.0;
  else
    v71 = 0.0;
  v72 = static UnitPoint.center.getter(v70);
  v74 = v73;
  v75 = v133;
  sub_100007E78(v62, v133, &qword_100158F10);
  v76 = v75 + *(int *)(v136 + 36);
  *(double *)v76 = v71;
  *(double *)(v76 + 8) = v71;
  *(double *)(v76 + 16) = v72;
  *(_QWORD *)(v76 + 24) = v74;
  sub_100007F38(v62, &qword_100158F10);
  v77 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 170.0, 15.0, 0.0);
  v78 = swift_getKeyPath(&unk_1001091A0);
  v145[0] = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v145, v78, v17);
  swift_release(v78);
  v79 = *(_QWORD *)(a1 + 32);
  v80 = *(_QWORD **)(v79 + 200);
  v81 = v80[5];
  v82 = v80[6];
  sub_10001BF94(v80 + 2, v81);
  v83 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v82 + 16);
  swift_retain(v79);
  v84 = v83(v81, v82);
  swift_release(v79);
  v85 = v137;
  sub_100007E78(v75, v137, &qword_100158F18);
  v86 = v85 + *(int *)(v138 + 36);
  *(_QWORD *)v86 = v77;
  *(_BYTE *)(v86 + 8) = v84 == 1;
  sub_100007F38(v75, &qword_100158F18);
  v87 = v85;
  v88 = v143;
  sub_100018EB4(v87, v143, &qword_100158F20);
  v89 = v118 == 2;
  if (v126 == 2)
    v90 = 1.0;
  else
    v90 = 0.0;
  if (v132 == 2)
    v91 = 1.0;
  else
    v91 = 0.0;
  v138 = Image.init(systemName:)(0x6C69662E79616C70, 0xE90000000000006CLL);
  v137 = static Font.subheadline.getter();
  v92 = swift_getKeyPath(&unk_1001090E0);
  if (sub_1000340B4())
    v93 = 1.0;
  else
    v93 = 0.0;
  v94 = sub_1000340B4();
  if (!v94)
    v32 = 0.0;
  v95 = static UnitPoint.center.getter(v94);
  v97 = v96;
  v98 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 170.0, 15.0, 0.0);
  v99 = sub_1000340B4();
  v100 = v144;
  sub_100007E78(v88, v144, &qword_100158F20);
  v101 = v99;
  v103 = v141;
  v102 = v142;
  v105 = KeyPath;
  v104 = v140;
  *v142 = v141;
  v102[1] = v105;
  v102[2] = v104;
  *((double *)v102 + 3) = v91;
  *((double *)v102 + 4) = v90;
  v106 = v135;
  *((double *)v102 + 5) = v90;
  *((double *)v102 + 6) = v106;
  v102[7] = v134;
  v107 = v131;
  v102[8] = v131;
  *((_BYTE *)v102 + 72) = v89;
  v108 = v102;
  v109 = sub_100007D50(&qword_100158F30);
  sub_100007E78(v100, (uint64_t)v108 + *(int *)(v109 + 48), &qword_100158F20);
  v110 = (uint64_t)v108 + *(int *)(v109 + 64);
  v111 = v138;
  *(_QWORD *)v110 = v138;
  *(_QWORD *)(v110 + 8) = v92;
  v112 = v92;
  v113 = v137;
  *(_QWORD *)(v110 + 16) = v137;
  *(double *)(v110 + 24) = v93;
  *(double *)(v110 + 32) = v32;
  *(double *)(v110 + 40) = v32;
  *(double *)(v110 + 48) = v95;
  *(_QWORD *)(v110 + 56) = v97;
  *(_QWORD *)(v110 + 64) = v98;
  *(_BYTE *)(v110 + 72) = v101;
  swift_retain(v103);
  swift_retain(v105);
  swift_retain(v104);
  swift_retain(v107);
  swift_retain(v111);
  swift_retain(v112);
  swift_retain(v113);
  swift_retain(v98);
  sub_100007F38(v143, &qword_100158F20);
  swift_release(v98);
  swift_release(v113);
  swift_release(v112);
  swift_release(v111);
  sub_100007F38(v144, &qword_100158F20);
  swift_release(v107);
  swift_release(v104);
  swift_release(v105);
  return swift_release(v103);
}

uint64_t sub_10001D958@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10001D984(unsigned __int8 *a1)
{
  return EnvironmentValues.isLuminanceReduced.setter(*a1);
}

uint64_t sub_10001D9A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001C37C(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10001D9C0(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_100007D50(&qword_100158ED0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  result = sub_100007D50(&qword_100158ED8);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001DA90(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ControlSize(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.controlSize.setter(v3);
}

unint64_t sub_10001DB0C()
{
  unint64_t result;

  result = qword_100158DD0;
  if (!qword_100158DD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100158DD0);
  }
  return result;
}

unint64_t sub_10001DB60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158DE0;
  if (!qword_100158DE0)
  {
    v1 = sub_100007D00(&qword_100158DD8);
    sub_10001DBE4();
    sub_10000F4E0(&qword_100158E08, &qword_100158E10, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158DE0);
  }
  return result;
}

unint64_t sub_10001DBE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158DE8;
  if (!qword_100158DE8)
  {
    v1 = sub_100007D00(&qword_100158DF0);
    sub_10001DC68();
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158DE8);
  }
  return result;
}

unint64_t sub_10001DC68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158DF8;
  if (!qword_100158DF8)
  {
    v1 = sub_100007D00(&qword_100158E00);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158DF8);
  }
  return result;
}

uint64_t sub_10001DCCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_10001DD3C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for PlaybackView(uint64_t a1)
{
  sub_100018FA8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp12PlaybackViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10001DD3C(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for PlaybackView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10001DD3C(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_100018FA8(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for RemoteViewConfiguration.QueryItem(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PlaybackView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_100018FA8(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteViewConfiguration.QueryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackView()
{
  return &type metadata for PlaybackView;
}

uint64_t sub_10001DF30()
{
  return sub_10001E0A8(&qword_100158E20, &qword_100158C68, (void (*)(void))sub_10001DF64);
}

uint64_t sub_10001DF64()
{
  return sub_10001E0A8(&qword_100158E28, &qword_100158C30, (void (*)(void))sub_10001DF88);
}

unint64_t sub_10001DF88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158E30;
  if (!qword_100158E30)
  {
    v1 = sub_100007D00(&qword_100158C28);
    sub_10000F4E0(&qword_100158C60, &qword_100158C20, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158E30);
  }
  return result;
}

uint64_t sub_10001E024(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011651C, 1);
}

uint64_t sub_10001E034()
{
  uint64_t v0;

  sub_100018FA8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001E064@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001CAC4(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10001E07C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001E0A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10001D9C0(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_10001E0A8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001E110()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100158EA8;
  if (!qword_100158EA8)
  {
    v1 = sub_100007D00(&qword_100158EB0);
    v2[0] = sub_100007D00(&qword_100158EB8);
    v2[1] = type metadata accessor for CircularProgressViewStyle(255);
    v2[2] = sub_10000F4E0(&qword_100158EC0, &qword_100158EB8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v2[3] = sub_100007428(&qword_100158EC8, type metadata accessor for CircularProgressViewStyle, (uint64_t)&unk_10010CC9C);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158EA8);
  }
  return result;
}

unint64_t sub_10001E208()
{
  unint64_t result;

  result = qword_100158EF0;
  if (!qword_100158EF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100158EF0);
  }
  return result;
}

uint64_t sub_10001E24C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001E290()
{
  return EnvironmentValues.controlSize.getter();
}

unint64_t sub_10001E2B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F38;
  if (!qword_100158F38)
  {
    v1 = sub_100007D00(&qword_100158E50);
    sub_10001E33C();
    sub_10000F4E0(&qword_100158F50, &qword_100158F58, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158F38);
  }
  return result;
}

unint64_t sub_10001E33C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158F40;
  if (!qword_100158F40)
  {
    v1 = sub_100007D00(&qword_100158E40);
    sub_10000F4E0(&qword_100158F48, &qword_100158E38, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100158F40);
  }
  return result;
}

void sub_10001E3C0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_10001E3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (**v34)(double *@<X8>, double@<D2>, double@<D3>);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;
  void (*v52)(uint64_t, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v3 = v2;
  v71 = a2;
  v67 = type metadata accessor for CoordinateSpace(0);
  v61 = *(_QWORD *)(v67 - 8);
  v5 = __chkstk_darwin(v67);
  v64 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v5);
  v9 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_100158FF0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v59 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100007D50(&qword_100158FF8);
  __chkstk_darwin(v60);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100007D50(&qword_100159000);
  __chkstk_darwin(v65);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100007D50(&qword_100159008);
  __chkstk_darwin(v69);
  v66 = (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100007D50(&qword_100159010);
  __chkstk_darwin(v70);
  v68 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v2;
  v20 = *(_QWORD *)(v2 + 8);
  swift_retain(v20);
  sub_1000D2440((uint64_t)v11);
  swift_release(v20);
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v51 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58(v51, v3, a1);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 32) & ~v21;
  v55 = v21 | 7;
  v56 = v22 + v8;
  v23 = swift_allocObject(&unk_100148DA0, v22 + v8, v21 | 7);
  v24 = *(_QWORD *)(a1 + 24);
  v53 = *(_QWORD *)(a1 + 16);
  v54 = v24;
  *(_QWORD *)(v23 + 16) = v53;
  *(_QWORD *)(v23 + 24) = v24;
  v52 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v52(v23 + v22, (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v25 = sub_100007D50(&qword_100159018);
  v26 = sub_100020340();
  v27 = 1.0;
  v28 = v59;
  AsyncImage.init(url:scale:transaction:content:)(v11, 0, sub_1000202D8, v23, v25, v26, 1.0);
  v29 = v61;
  v30 = v64;
  v31 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v64, enum case for CoordinateSpace.local(_:), v67);
  v32 = &v15[*(int *)(v60 + 36)];
  v33 = sub_100007D50(&qword_100159120);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(&v32[*(int *)(v33 + 36)], v30, v31);
  *(_QWORD *)v32 = &type metadata for HeroImageHeightPreferenceKey;
  v34 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v32[*(int *)(v33 + 40)];
  *v34 = sub_10001F8A8;
  v34[1] = 0;
  v36 = v62;
  v35 = v63;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v15, v28, v63);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v35);
  v37 = v51;
  v38 = v57;
  v58(v51, v57, a1);
  v39 = swift_allocObject(&unk_100148DC8, v56, v55);
  v40 = v54;
  *(_QWORD *)(v39 + 16) = v53;
  *(_QWORD *)(v39 + 24) = v40;
  v52(v39 + v22, v37, a1);
  sub_100007E78((uint64_t)v15, (uint64_t)v17, &qword_100158FF8);
  v41 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v17[*(int *)(v65 + 36)];
  *v41 = sub_100020974;
  v41[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v39;
  sub_100007F38((uint64_t)v15, &qword_100158FF8);
  v42 = *(_QWORD *)(v38 + 8);
  swift_retain(v42);
  LOBYTE(v39) = sub_1000D279C();
  swift_release(v42);
  if ((v39 & 1) == 0)
    v27 = 0.0;
  v43 = v66;
  sub_100007E78((uint64_t)v17, v66, &qword_100159000);
  *(double *)(v43 + *(int *)(v69 + 36)) = v27;
  v44 = sub_100007F38((uint64_t)v17, &qword_100159000);
  v45 = static Edge.Set.bottom.getter(v44);
  v46 = v45;
  v47 = static SafeAreaRegions.all.getter(v45);
  v48 = v68;
  sub_100007E78(v43, v68, &qword_100159008);
  v49 = v48 + *(int *)(v70 + 36);
  *(_QWORD *)v49 = v47;
  *(_BYTE *)(v49 + 8) = v46;
  sub_100007F38(v43, &qword_100159008);
  return sub_100018EB4(v48, v71, &qword_100159010);
}

void *sub_10001E8E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  char v98;
  void (*v99)(_BYTE *, _QWORD *, uint64_t);
  uint64_t v100;
  unint64_t v101;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE v107[4];
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(_BYTE *, _QWORD *, uint64_t);
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  __int128 v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  _BYTE v125[556];
  _BYTE v126[7];
  _BYTE v127[11];
  __int16 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _OWORD v135[2];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _OWORD v141[20];
  _OWORD v142[9];
  _OWORD v143[32];
  _QWORD v144[69];
  _QWORD v145[69];
  _BYTE v146[552];
  _QWORD v147[69];
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _QWORD v165[71];

  v123 = a4;
  v124 = a5;
  v122 = a3;
  v7 = type metadata accessor for HeroImage(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v120 = v7;
  v121 = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v119 = &v107[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  *(_QWORD *)&v118 = &v107[-v11];
  v12 = type metadata accessor for Image.ResizingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v107[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for AsyncImagePhase(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v107[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 != enum case for AsyncImagePhase.success(_:))
  {
    if (v20 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v17 + 96))(v19, v16);
      swift_errorRelease(*v19);
      v86 = v124;
    }
    else
    {
      v86 = v124;
      if (v20 != enum case for AsyncImagePhase.empty(_:))
      {
        sub_1000209E8((uint64_t)v146);
        sub_100018EB4((uint64_t)v146, (uint64_t)v165, &qword_100159130);
        v100 = sub_100007D50(&qword_100159030);
        v101 = sub_1000203AC();
        _ConditionalContent<>.init(storage:)(v165, v100, &type metadata for EmptyView, v101, &protocol witness table for EmptyView);
        (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
        v97 = v147;
        goto LABEL_16;
      }
    }
    v87 = a2[1];
    swift_retain(v87);
    v88 = sub_1000D25B4();
    swift_release(v87);
    v89 = Color.init(_:)(v88);
    v90 = static Edge.Set.all.getter(v89);
    v145[0] = v89;
    LOBYTE(v145[1]) = v90;
    sub_1000209F4((uint64_t)v145);
    sub_100018EB4((uint64_t)v145, (uint64_t)v165, &qword_100159138);
    swift_retain(v89);
    v91 = sub_100007D50(&qword_100159040);
    v92 = sub_100007D50(&qword_100159110);
    v93 = sub_100020418();
    v94 = sub_1000208A8();
    _ConditionalContent<>.init(storage:)(v165, v91, v92, v93, v94);
    memcpy(v147, v144, 0x221uLL);
    sub_100020A00((uint64_t)v147);
    sub_100018EB4((uint64_t)v147, (uint64_t)v165, &qword_100159130);
    v95 = sub_100007D50(&qword_100159030);
    v96 = sub_1000203AC();
    _ConditionalContent<>.init(storage:)(v165, v95, &type metadata for EmptyView, v96, &protocol witness table for EmptyView);
    swift_release(v89);
    v97 = v146;
LABEL_16:
    memcpy(v165, v97, 0x222uLL);
    return memcpy(v86, v165, 0x222uLL);
  }
  (*(void (**)(_QWORD *, uint64_t))(v17 + 96))(v19, v16);
  v21 = *v19;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v12);
  v115 = Image.resizable(capInsets:resizingMode:)(v15, v21, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  v22 = a2[1];
  swift_retain(v22);
  v23 = sub_1000D2584();
  v24 = swift_release(v22);
  v25 = *(_QWORD *)(v22 + 64);
  v26 = static MatchedGeometryProperties.position.getter(v24);
  v27 = v26;
  v28 = static UnitPoint.center.getter(v26);
  v30 = v29;
  v31 = sub_100007D50(&qword_100159140);
  v32 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100108810;
  swift_retain(v22);
  v33 = sub_1000D25B4();
  swift_release(v22);
  v34 = Color.init(_:)(v33);
  v35 = a2[6];
  if (!v35)
  {
    v104 = a2[7];
    goto LABEL_21;
  }
  v36 = v34;
  v113 = v27;
  v114 = v25;
  swift_retain(v35);
  v37 = sub_1000DED48();
  v39 = v38;
  swift_release(v35);
  v116 = a2;
  v117 = v21;
  if (v39 && (swift_bridgeObjectRelease(v39), (v37 & 1) != 0))
  {
    v98 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(0xE300000000000000);
    v41 = v121;
    v99 = *(void (**)(_BYTE *, _QWORD *, uint64_t))(v121 + 16);
    a1 = v118;
    v99((_BYTE *)v118, a2, v120);
    v112 = v99;
    if ((v98 & 1) == 0)
    {
      if (*(_QWORD *)(a1 + 48))
        __asm { BR              X10 }
      while (1)
      {
        v104 = *(_QWORD *)(a1 + 56);
LABEL_21:
        v105 = type metadata accessor for RemoteViewConfiguration();
        v106 = sub_10001F9C0();
        EnvironmentObject.error()(0, v104, v105, v106);
        __break(1u);
      }
    }
    v40 = v120;
  }
  else
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    v40 = v120;
    v41 = v121;
    a1 = v118;
    v112 = *(void (**)(_BYTE *, _QWORD *, uint64_t))(v121 + 16);
    v112((_BYTE *)v118, a2, v120);
  }
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a1, v40);
  v42 = Color.opacity(_:)(0.3);
  v43 = swift_release(v36);
  *(_QWORD *)(v32 + 32) = v42;
  *(_QWORD *)(v32 + 40) = static Color.clear.getter(v43);
  v165[0] = v32;
  specialized Array._endMutation()();
  Gradient.init(colors:)(v165[0]);
  v44 = 0.0;
  v45 = LinearGradient.init(gradient:startPoint:endPoint:)(&v148, 0.0, 0.1, 0.0, 0.5);
  v120 = v148;
  v118 = v149;
  v46 = v150;
  v47 = v151;
  v111 = static SafeAreaRegions.all.getter(v45);
  v48 = static Edge.Set.all.getter(v111);
  v108 = v48;
  v49 = static Alignment.center.getter(v48);
  v109 = v50;
  v110 = v49;
  v51 = v116;
  v52 = v116[3];
  LOBYTE(v165[0]) = *((_BYTE *)v116 + 16);
  v165[1] = v52;
  v53 = sub_100007D50(&qword_100158470);
  State.wrappedValue.getter(v147, v53);
  if (LOBYTE(v147[0]))
    v44 = 1.0;
  v125[552] = 1;
  v54 = v119;
  v112(v119, v51, v40);
  v55 = v121;
  v56 = *(unsigned __int8 *)(v121 + 80);
  v57 = v40;
  v58 = (v56 + 32) & ~v56;
  v59 = swift_allocObject(&unk_100148DF0, v58 + v9, v56 | 7);
  v60 = v123;
  *(_QWORD *)(v59 + 16) = v122;
  *(_QWORD *)(v59 + 24) = v60;
  v61 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v55 + 32))(v59 + v58, v54, v57);
  v129 = (unint64_t)v115;
  LOWORD(v130) = 1;
  *(_DWORD *)((char *)&v130 + 2) = *(_DWORD *)&v127[7];
  WORD3(v130) = v128;
  *((_QWORD *)&v130 + 1) = 0;
  *(double *)&v131 = v23;
  *((_QWORD *)&v131 + 1) = 0xD000000000000010;
  *(_QWORD *)&v132 = 0x8000000100113090;
  *((_QWORD *)&v132 + 1) = v114;
  LODWORD(v133) = v113;
  *((double *)&v133 + 1) = v28;
  *(_QWORD *)&v134 = v30;
  BYTE8(v134) = 1;
  HIDWORD(v134) = *(_DWORD *)&v127[3];
  *(_DWORD *)((char *)&v134 + 9) = *(_DWORD *)v127;
  *(_QWORD *)&v135[0] = v120;
  *(_OWORD *)((char *)v135 + 8) = v118;
  *((_QWORD *)&v135[1] + 1) = v46;
  *(_QWORD *)&v136 = v47;
  *((_QWORD *)&v136 + 1) = v111;
  LOBYTE(v137) = v108;
  DWORD1(v137) = *(_DWORD *)&v126[3];
  *(_DWORD *)((char *)&v137 + 1) = *(_DWORD *)v126;
  *((_QWORD *)&v137 + 1) = v110;
  *(_QWORD *)&v138 = v109;
  *((double *)&v138 + 1) = v44;
  *(_QWORD *)&v139 = sub_100020AD8;
  *((_QWORD *)&v139 + 1) = v59;
  v140 = 0uLL;
  v163 = v139;
  v162 = v138;
  v157 = v134;
  v158 = v135[0];
  v159 = v135[1];
  v160 = v136;
  v164 = 0uLL;
  v161 = v137;
  v152 = (unint64_t)v115;
  v156 = v133;
  v155 = v132;
  v154 = v131;
  v153 = v130;
  v62 = static Alignment.top.getter(v61);
  sub_100042FD8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v141, 0.0, 1, INFINITY, 0, v62, v63);
  sub_100020B28((uint64_t *)&v129);
  v64 = v51[1];
  swift_retain(v64);
  v65 = sub_1000D25B4();
  swift_release(v64);
  v66 = Color.init(_:)(v65);
  LOBYTE(v65) = static Edge.Set.all.getter(v66);
  v67 = static Alignment.bottom.getter();
  v69 = v68;
  sub_10001F568(v51, v122, v123, (uint64_t)v142);
  v71 = static Alignment.center.getter(v70);
  v73 = v72;
  memcpy(v143, v141, 0x140uLL);
  *(_QWORD *)&v143[20] = v66;
  BYTE8(v143[20]) = (_BYTE)v65;
  *(_QWORD *)&v143[21] = v67;
  *((_QWORD *)&v143[21] + 1) = v69;
  v143[28] = v142[6];
  v143[29] = v142[7];
  v143[30] = v142[8];
  v143[24] = v142[2];
  v143[25] = v142[3];
  v143[27] = v142[5];
  v143[26] = v142[4];
  v143[23] = v142[1];
  v143[22] = v142[0];
  *(_QWORD *)&v143[31] = v71;
  *((_QWORD *)&v143[31] + 1) = v73;
  v74 = v51[1];
  swift_retain(v74);
  v75 = sub_1000D2760();
  v76 = swift_release(v74);
  v77 = static UnitPoint.top.getter(v76);
  v79 = v78;
  memcpy(v144, v143, 0x200uLL);
  *(double *)&v144[64] = v75;
  *(double *)&v144[65] = v75;
  *(double *)&v144[66] = v77;
  v144[67] = v79;
  sub_100020BB0((uint64_t)v144);
  sub_100018EB4((uint64_t)v144, (uint64_t)v165, &qword_100159138);
  sub_100020BB8(v143);
  v80 = sub_100007D50(&qword_100159040);
  v81 = sub_100007D50(&qword_100159110);
  v82 = sub_100020418();
  v83 = sub_1000208A8();
  _ConditionalContent<>.init(storage:)(v165, v80, v81, v82, v83);
  memcpy(v145, v125, 0x221uLL);
  memcpy(v147, v125, 0x221uLL);
  sub_100020A00((uint64_t)v147);
  sub_100018EB4((uint64_t)v147, (uint64_t)v165, &qword_100159130);
  sub_100020D48(v145, sub_100020C8C);
  v84 = sub_100007D50(&qword_100159030);
  v85 = sub_1000203AC();
  _ConditionalContent<>.init(storage:)(v165, v84, &type metadata for EmptyView, v85, &protocol witness table for EmptyView);
  swift_release(v117);
  sub_100020D48(v145, sub_100020E30);
  sub_100020F14((uint64_t *)v143);
  memcpy(v165, v146, 0x222uLL);
  v86 = v124;
  return memcpy(v86, v165, 0x222uLL);
}

uint64_t sub_10001F508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a1;
  v3 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v3, sub_100020FE0, v5, (char *)&type metadata for () + 8);
  return swift_release(v3);
}

double sub_10001F568@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t *v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  double result;
  _BYTE v45[8];
  double v46;
  _QWORD v47[5];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;

  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v45[-v13];
  v15 = sub_100007D50(&qword_100159140);
  v16 = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100108810;
  v17 = static Color.clear.getter(v16);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = static Color.white.getter(v17);
  v48 = v16;
  specialized Array._endMutation()();
  Gradient.init(colors:)(v48);
  LinearGradient.init(gradient:startPoint:endPoint:)(v47, 0.0, 0.0, 0.0, 0.45);
  v18 = v47[0];
  v19 = v47[1];
  v20 = v47[2];
  v21 = v47[3];
  v22 = v47[4];
  type metadata accessor for HeroImage(0, a2, a3, v23);
  v24 = a1[1];
  swift_retain(v24);
  v25 = sub_1000D26EC();
  swift_release(v24);
  sub_100018C18((uint64_t)v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for ColorScheme.light(_:), v8);
  LOBYTE(v24) = static ColorScheme.== infix(_:_:)(v14, v12);
  v26 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v26(v12, v8);
  v26(v14, v8);
  if ((v24 & 1) != 0)
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v27 = &qword_10016A4B0;
  }
  else
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v27 = &qword_10016A4A8;
  }
  v28 = *v27;
  swift_retain(*v27);
  KeyPath = swift_getKeyPath(&unk_100109380);
  v30 = a1[5];
  v48 = a1[4];
  v49 = v30;
  v31 = sub_100007D50(&qword_100159128);
  State.wrappedValue.getter(&v46, v31);
  v32 = v46;
  v33 = a1[1];
  swift_retain(v33);
  v34 = sub_1000D2714();
  v35 = swift_release(v33);
  v36 = v32 - v34;
  if (v32 - v34 < 0.0)
    v36 = 0.0;
  v37 = v36;
  v38 = static Alignment.center.getter(v35);
  _FrameLayout.init(width:height:alignment:)(&v48, 0, 1, *(_QWORD *)&v37, 0, v38, v39);
  v40 = v48;
  v41 = v49;
  v42 = v50;
  v43 = v51;
  *(_QWORD *)a4 = 17;
  *(_QWORD *)(a4 + 8) = v18;
  *(_QWORD *)(a4 + 16) = v19;
  *(_QWORD *)(a4 + 24) = v20;
  *(_QWORD *)(a4 + 32) = v21;
  *(_QWORD *)(a4 + 40) = v22;
  *(_QWORD *)(a4 + 48) = 0;
  *(double *)(a4 + 56) = v25;
  *(_QWORD *)(a4 + 64) = KeyPath;
  *(_QWORD *)(a4 + 72) = v28;
  *(_QWORD *)(a4 + 80) = v40;
  *(_BYTE *)(a4 + 88) = v41;
  *(_QWORD *)(a4 + 96) = v42;
  *(_BYTE *)(a4 + 104) = v43;
  result = *(double *)&v52;
  *(_OWORD *)(a4 + 112) = v52;
  *(_QWORD *)(a4 + 128) = sub_10001F884;
  *(_QWORD *)(a4 + 136) = 0;
  return result;
}

uint64_t sub_10001F884()
{
  return Transaction.animation.setter(0);
}

void sub_10001F8A8(double *a1@<X8>, double a2@<D2>, double a3@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t sub_10001F8B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_100110600, *a1);
  *(_QWORD *)a2 = ObservedObject.init(wrappedValue:)(a1, v4, WitnessTable);
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 88);
  LOBYTE(v18) = 0;
  State.init(wrappedValue:)(&v18, &type metadata for Bool);
  v9 = v20;
  *(_BYTE *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v9;
  v18 = 0;
  State.init(wrappedValue:)(&v18, &type metadata for CGFloat);
  v10 = v20;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v10;
  v11 = type metadata accessor for RemoteViewConfiguration();
  v12 = sub_10001F9C0();
  *(_QWORD *)(a2 + 48) = EnvironmentObject.init()(v11, v12);
  *(_QWORD *)(a2 + 56) = v13;
  v15 = (_QWORD *)(a2 + *(int *)(type metadata accessor for HeroImage(0, v7, v8, v14) + 48));
  *v15 = swift_getKeyPath(&unk_100109248);
  v16 = sub_100007D50(&qword_100158AC0);
  return swift_storeEnumTagMultiPayload(v15, v16, 0);
}

unint64_t sub_10001F9C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001582E0;
  if (!qword_1001582E0)
  {
    v1 = type metadata accessor for RemoteViewConfiguration();
    result = swift_getWitnessTable(&unk_100111314, v1);
    atomic_store(result, (unint64_t *)&qword_1001582E0);
  }
  return result;
}

uint64_t type metadata accessor for HeroImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImage);
}

__n128 sub_10001FA18@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _OWORD v11[9];

  v3 = static Color.clear.getter(a1);
  KeyPath = swift_getKeyPath(&unk_100109380);
  v5 = static Alignment.top.getter(KeyPath);
  sub_1000431A0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, INFINITY, 0, v5, v6, KeyPath, v3, 0x3FF199999999999ALL, 0);
  swift_release(v3);
  swift_release(KeyPath);
  v7 = v11[7];
  *(_OWORD *)(a2 + 96) = v11[6];
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v11[8];
  v8 = v11[3];
  *(_OWORD *)(a2 + 32) = v11[2];
  *(_OWORD *)(a2 + 48) = v8;
  v9 = v11[5];
  *(_OWORD *)(a2 + 64) = v11[4];
  *(_OWORD *)(a2 + 80) = v9;
  result = (__n128)v11[1];
  *(_OWORD *)a2 = v11[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for HeroImagePlaceholder()
{
  return &type metadata for HeroImagePlaceholder;
}

uint64_t sub_10001FB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_10001FB14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1001092A0;
  v4[1] = &unk_1001092B8;
  v4[2] = &unk_1001092B8;
  v4[3] = &unk_1001092B8;
  sub_10002023C(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

uint64_t sub_10001FB94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v18);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2[3];
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    v8 = a2[5];
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = *(int *)(a3 + 48);
    v11 = (uint64_t *)((char *)a2 + v10);
    v12 = (uint64_t *)(a1 + v10);
    *(_QWORD *)(a1 + 56) = a2[7];
    swift_retain(v5);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    v13 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v11, v14);
      v15 = v12;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v19 = *v11;
      *v12 = *v11;
      swift_retain(v19);
      v15 = v12;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_10001FCB0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 48));
  v5 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_10001FD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(int *)(a3 + 48);
  v10 = (uint64_t *)(a2 + v9);
  v11 = (uint64_t *)(a1 + v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v10, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v10;
    *v11 = *v10;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v14);
  return a1;
}

uint64_t sub_10001FE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v12);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 48);
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_100007F38(a1 + v14, &qword_100158AC0);
    v17 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  return a1;
}

_OWORD *sub_10001FF64(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 48);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100020014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_release(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v10);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 48);
    v12 = (void *)(a1 + v11);
    v13 = (const void *)(a2 + v11);
    sub_100007F38(a1 + v11, &qword_100158AC0);
    v14 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10002012C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020138);
}

uint64_t sub_100020138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(qword_100158F60);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_1000201B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000201C4);
}

uint64_t sub_1000201C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(qword_100158F60);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

void sub_10002023C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100158FE8)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100158FE8);
  }
}

uint64_t sub_100020290(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001165F4, 1);
}

uint64_t sub_1000202A0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001165C0, 1);
}

void *sub_1000202D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroImage(0, v6, v7, a2) - 8) + 80);
  return sub_10001E8E0(a1, (_QWORD *)(v3 + ((v8 + 32) & ~v8)), v6, v7, a3);
}

unint64_t sub_100020340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159020;
  if (!qword_100159020)
  {
    v1 = sub_100007D00(&qword_100159018);
    sub_1000203AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159020);
  }
  return result;
}

unint64_t sub_1000203AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159028;
  if (!qword_100159028)
  {
    v1 = sub_100007D00(&qword_100159030);
    sub_100020418();
    sub_1000208A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159028);
  }
  return result;
}

unint64_t sub_100020418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159038;
  if (!qword_100159038)
  {
    v1 = sub_100007D00(&qword_100159040);
    sub_100020484();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159038);
  }
  return result;
}

unint64_t sub_100020484()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159048;
  if (!qword_100159048)
  {
    v1 = sub_100007D00(&qword_100159050);
    sub_100020508();
    sub_10000F4E0(&qword_1001590F8, &qword_100159100, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159048);
  }
  return result;
}

unint64_t sub_100020508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159058;
  if (!qword_100159058)
  {
    v1 = sub_100007D00(&qword_100159060);
    sub_10002058C();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159058);
  }
  return result;
}

unint64_t sub_10002058C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159068;
  if (!qword_100159068)
  {
    v1 = sub_100007D00(&qword_100159070);
    sub_1000205F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159068);
  }
  return result;
}

unint64_t sub_1000205F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159078;
  if (!qword_100159078)
  {
    v1 = sub_100007D00(&qword_100159080);
    sub_100020664();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159078);
  }
  return result;
}

unint64_t sub_100020664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159088;
  if (!qword_100159088)
  {
    v1 = sub_100007D00(&qword_100159090);
    sub_1000206D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159088);
  }
  return result;
}

unint64_t sub_1000206D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159098;
  if (!qword_100159098)
  {
    v1 = sub_100007D00(&qword_1001590A0);
    sub_100020754();
    sub_10000F4E0(&qword_1001590E8, &qword_1001590F0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159098);
  }
  return result;
}

unint64_t sub_100020754()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001590A8;
  if (!qword_1001590A8)
  {
    v1 = sub_100007D00(&qword_1001590B0);
    sub_1000207D8();
    sub_10000F4E0(&qword_1001590D8, &qword_1001590E0, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001590A8);
  }
  return result;
}

unint64_t sub_1000207D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001590B8;
  if (!qword_1001590B8)
  {
    v1 = sub_100007D00(&qword_1001590C0);
    sub_100020844();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001590B8);
  }
  return result;
}

unint64_t sub_100020844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001590C8;
  if (!qword_1001590C8)
  {
    v1 = sub_100007D00(&qword_1001590D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001590C8);
  }
  return result;
}

unint64_t sub_1000208A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159108;
  if (!qword_100159108)
  {
    v1 = sub_100007D00(&qword_100159110);
    sub_10002092C();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159108);
  }
  return result;
}

unint64_t sub_10002092C()
{
  unint64_t result;

  result = qword_100159118;
  if (!qword_100159118)
  {
    result = swift_getWitnessTable(&unk_1001092E0, &type metadata for HeroImagePlaceholder);
    atomic_store(result, (unint64_t *)&qword_100159118);
  }
  return result;
}

uint64_t sub_100020974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  v7 = v4 + ((v6 + 32) & ~v6);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 40);
  v12[0] = *(_QWORD *)(a1 + 8);
  v12[1] = v8;
  v12[2] = v9;
  v10 = sub_100007D50(&qword_100159128);
  return State.wrappedValue.setter(v12, v10);
}

uint64_t sub_1000209E8(uint64_t result)
{
  *(_BYTE *)(result + 545) = 1;
  return result;
}

uint64_t sub_1000209F4(uint64_t result)
{
  *(_BYTE *)(result + 544) = 1;
  return result;
}

uint64_t sub_100020A00(uint64_t result)
{
  *(_BYTE *)(result + 545) = 0;
  return result;
}

uint64_t sub_100020A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for HeroImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  swift_release(*(_QWORD *)(v4 + v8 + 40));
  swift_release(*(_QWORD *)(v4 + v8 + 48));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 48));
  v11 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_100020AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeroImage(0, v5, v6, a4) - 8) + 80);
  return sub_10001F508(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t *sub_100020B28(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[6];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  sub_100020BA0(v4, v5);
  sub_100020BA0(v6, v7);
  return a1;
}

uint64_t sub_100020BA0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100020BB0(uint64_t result)
{
  *(_BYTE *)(result + 544) = 0;
  return result;
}

_QWORD *sub_100020BB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[6];
  v3 = a1[12];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  v8 = a1[40];
  v9 = a1[53];
  v12 = a1[45];
  v13 = a1[52];
  v10 = a1[61];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100020C7C(v4, v5);
  sub_100020C7C(v6, v7);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v8);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t sub_100020C7C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100020C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  if ((a69 & 1) == 0)
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a13);
    sub_100020C7C(a23, a24);
    sub_100020C7C(a25, a26);
    swift_retain(a54);
    swift_retain(a62);
    swift_retain(a41);
    swift_bridgeObjectRetain(a46);
    a1 = a53;
  }
  return swift_retain(a1);
}

#error "100020E0C: call analysis failed (funcsize=58)"

uint64_t sub_100020E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t result;

  result = swift_release(a1);
  if ((a69 & 1) == 0)
  {
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a13);
    sub_100020BA0(a23, a24);
    sub_100020BA0(a25, a26);
    swift_release(a62);
    swift_release(a53);
    swift_bridgeObjectRelease(a46);
    swift_release(a41);
    return swift_release(a54);
  }
  return result;
}

uint64_t *sub_100020F14(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[6];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  v8 = a1[45];
  v9 = a1[52];
  v12 = a1[40];
  v13 = a1[53];
  v10 = a1[61];
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  sub_100020BA0(v4, v5);
  sub_100020BA0(v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  swift_release(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_100020FE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100007D50(&qword_100158470);
  return State.wrappedValue.setter(v6, v4);
}

ValueMetadata *type metadata accessor for HeroImageHeightPreferenceKey()
{
  return &type metadata for HeroImageHeightPreferenceKey;
}

unint64_t sub_100021054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159148;
  if (!qword_100159148)
  {
    v1 = sub_100007D00(&qword_100159010);
    sub_1000210C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159148);
  }
  return result;
}

unint64_t sub_1000210C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159150;
  if (!qword_100159150)
  {
    v1 = sub_100007D00(&qword_100159008);
    sub_10002112C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159150);
  }
  return result;
}

unint64_t sub_10002112C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159158;
  if (!qword_100159158)
  {
    v1 = sub_100007D00(&qword_100159000);
    sub_1000211B0();
    sub_10000F4E0(&qword_100159178, &qword_100159180, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159158);
  }
  return result;
}

unint64_t sub_1000211B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159160;
  if (!qword_100159160)
  {
    v1 = sub_100007D00(&qword_100158FF8);
    sub_10000F4E0(&qword_100159168, &qword_100158FF0, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
    sub_10000F4E0(&qword_100159170, &qword_100159120, (uint64_t)&unk_100108C38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159160);
  }
  return result;
}

unint64_t sub_100021250()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159188;
  if (!qword_100159188)
  {
    v1 = sub_100007D00(&qword_100159190);
    sub_1000212BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159188);
  }
  return result;
}

unint64_t sub_1000212BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159198;
  if (!qword_100159198)
  {
    v1 = sub_100007D00(&qword_1001591A0);
    sub_100015DCC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159198);
  }
  return result;
}

unint64_t sub_100021328(uint64_t a1)
{
  unint64_t result;

  result = sub_10002134C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002134C()
{
  unint64_t result;

  result = qword_1001591A8[0];
  if (!qword_1001591A8[0])
  {
    result = swift_getWitnessTable(&unk_1001093D0, &type metadata for HeroImageHeightPreferenceKey);
    atomic_store(result, qword_1001591A8);
  }
  return result;
}

void sub_100021390(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[13];

  v2 = swift_checkMetadataState(319, a1[10]);
  if (v3 <= 0x3F)
  {
    v22[0] = *(_QWORD *)(v2 - 8) + 64;
    v22[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100022780(319, (unint64_t *)&qword_100159230, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v22[2] = v6;
      v7 = a1[11];
      v8 = type metadata accessor for Optional(255);
      v9 = type metadata accessor for Published(319, v8);
      if (v10 <= 0x3F)
      {
        v22[3] = *(_QWORD *)(v9 - 8) + 64;
        sub_100022780(319, &qword_100159238, (uint64_t)&type metadata for String);
        if (v12 <= 0x3F)
        {
          v22[4] = *(_QWORD *)(v11 - 8) + 64;
          v22[5] = v6;
          sub_100022780(319, &qword_100159240, (uint64_t)&type metadata for CGFloat);
          if (v15 <= 0x3F)
          {
            v22[6] = *(_QWORD *)(v13 - 8) + 64;
            v16 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v7, a1[13], v14);
            v17 = type metadata accessor for Published(319, v16);
            if (v18 <= 0x3F)
            {
              v22[7] = *(_QWORD *)(v17 - 8) + 64;
              v19 = type metadata accessor for Array(255, v7);
              v20 = type metadata accessor for Published(319, v19);
              if (v21 <= 0x3F)
              {
                v22[8] = *(_QWORD *)(v20 - 8) + 64;
                v22[9] = " ";
                v22[10] = " ";
                v22[11] = " ";
                v22[12] = &unk_100109490;
                swift_initClassMetadata2(a1, 0, 13, v22, a1 + 14);
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_100021538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 104), a4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v11 - v7);
  sub_1000215C0();
  v9 = *v8;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  return v9 > 0;
}

uint64_t sub_1000215C0()
{
  return sub_1000216A8((uint64_t)&unk_1001095B8, (uint64_t)&unk_1001095F0);
}

uint64_t sub_1000215D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v5 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 104), a4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - v7;
  if (sub_100021538(v9, v10, v11, v12))
  {
    sub_1000215C0();
    v13 = *((_QWORD *)v8 + 2);
    v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain(v13);
    v14(v8, v5);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 120));
    swift_bridgeObjectRetain(v13);
  }
  return v13;
}

uint64_t sub_100021680()
{
  return sub_100021898((uint64_t)&unk_100109508, (uint64_t)&unk_100109540);
}

uint64_t sub_100021694()
{
  return sub_1000216A8((uint64_t)&unk_1001096C0, (uint64_t)&unk_1001096F8);
}

uint64_t sub_1000216A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100021744()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100109610);
  v2 = swift_getKeyPath(&unk_100109648);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1000217E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_100109610);
  v6 = swift_getKeyPath(&unk_100109648);
  v8[0] = a1;
  v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

uint64_t sub_100021884()
{
  return sub_100021898((uint64_t)&unk_100109668, (uint64_t)&unk_1001096A0);
}

uint64_t sub_100021898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100021934(char a1)
{
  return sub_100021948(a1, (uint64_t)&unk_100109668, (uint64_t)&unk_1001096A0);
}

uint64_t sub_100021948(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

double sub_1000219E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_100109718);
  v2 = swift_getKeyPath(&unk_100109750);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100021A84(double a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double v6;

  KeyPath = swift_getKeyPath(&unk_100109718);
  v4 = swift_getKeyPath(&unk_100109750);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_100021B24()
{
  return sub_1000215C0();
}

uint64_t sub_100021B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100022A5C(a1, a2, a3, a4);
}

uint64_t sub_100021B64()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100109560);
  v2 = swift_getKeyPath(&unk_100109598);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100021C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100109560);
  v4 = swift_getKeyPath(&unk_100109598);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t sub_100021CA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 96) + 24))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_100021CD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 96) + 32))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

BOOL sub_100021D08()
{
  uint64_t v0;

  return Array.count.getter(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120)), *(_QWORD *)(*(_QWORD *)v0 + 88)) > 5;
}

uint64_t sub_100021D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  void *object;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;

  v5 = type metadata accessor for FilterViewModel.FilterConfiguration(0, *(_QWORD *)(*(_QWORD *)v4 + 88), *(_QWORD *)(*(_QWORD *)v4 + 104), a4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v32 - v7);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v11._countAndFlagsBits = 0xD00000000000002DLL;
  v33._object = (void *)0xE000000000000000;
  v11._object = (void *)0x80000001001131F0;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v33);

  v14 = objc_msgSend(v9, "mainBundle");
  v34._object = (void *)0xE000000000000000;
  v15._object = (void *)0x8000000100113220;
  v15._countAndFlagsBits = 0xD000000000000025;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v34);

  v18 = sub_100007D50(qword_100159268);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100109020;
  sub_1000215C0();
  v20 = *v8;
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)(v19 + 56) = &type metadata for Int;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 32) = v20;
  countAndFlagsBits = String.init(format:_:)(v13._countAndFlagsBits, v13._object, v19);
  v23 = v22;
  v24 = swift_bridgeObjectRelease(v13._object);
  v28 = sub_100021538(v24, v25, v26, v27);
  v29 = !v28;
  if (v28)
    object = v17._object;
  else
    object = v23;
  if (v29)
    countAndFlagsBits = v17._countAndFlagsBits;
  swift_bridgeObjectRelease(object);
  return countAndFlagsBits;
}

uint64_t sub_100021F24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100021744();
  v5 = v4;
  v6 = swift_bridgeObjectRelease(v4);
  if ((v5 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v5) & 0xF;
  else
    v10 = v3 & 0xFFFFFFFFFFFFLL;
  v11 = sub_1000215D4(v6, v7, v8, v9);
  if (v10)
  {
    v12 = type metadata accessor for Array(0, *(_QWORD *)(v2 + 88));
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
    v11 = _ArrayProtocol.filter(_:)(sub_100022E94, v1, v12, WitnessTable);
  }
  return sub_100021C00(v11);
}

uint64_t sub_100021FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[4];

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &unk_10011790C, &unk_10011796C);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)v18 - v7;
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 208))(v3, v2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v10 = sub_100104784(AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  v18[2] = v10;
  v18[3] = v12;
  v13 = sub_100021744();
  v15 = v14;
  v18[0] = v13;
  v18[1] = v14;
  v16 = sub_10001DB0C();
  LOBYTE(v10) = StringProtocol.localizedStandardContains<A>(_:)(v18, &type metadata for String, &type metadata for String, v16, v16);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v15);
  return v10 & 1;
}

uint64_t sub_100022138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = sub_1000215D4(a1, a2, a3, a4);
  return sub_100021C00(v4);
}

uint64_t sub_10002214C()
{
  return sub_100021948(1, (uint64_t)&unk_100109508, (uint64_t)&unk_100109540);
}

void sub_100022174()
{
  void *v0;
  void *v1;
  _QWORD v2[6];

  sub_1000217E0(0, 0xE000000000000000);
  sub_100021948(0, (uint64_t)&unk_100109508, (uint64_t)&unk_100109540);
  v0 = (void *)objc_opt_self(UIView);
  v2[4] = sub_1000579A8;
  v2[5] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_1000FADC4;
  v2[3] = &unk_100148FC8;
  v1 = _Block_copy(v2);
  objc_msgSend(v0, "animateWithDuration:delay:options:animations:completion:", 0, v1, 0, 0.3, 0.0);
  _Block_release(v1);
}

void sub_100022240(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  ValueWitnessTable *v24;
  uint64_t v25;
  char *v26;
  NSString v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void **aBlock;
  uint64_t v33;
  Class (*v34)(uint64_t);
  ValueMetadata *v35;
  _QWORD *(*v36)();
  _QWORD *v37;
  char *v38;

  v11 = *v5;
  v12 = sub_100007D50(&qword_100159260);
  v13 = swift_allocObject(v12, 192, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100109440;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v11 + 96) + 16))(*(_QWORD *)(v11 + 80));
  *(_QWORD *)(v13 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v13 + 64) = &off_10015BAD8;
  *(_BYTE *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v13 + 104) = &off_10015BAB0;
  *(_BYTE *)(v13 + 72) = 4;
  *(_QWORD *)(v13 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v13 + 144) = &off_10015BB38;
  *(_BYTE *)(v13 + 112) = a1;
  *(_QWORD *)(v13 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v13 + 184) = &off_10015BB10;
  *(_QWORD *)(v13 + 152) = a2;
  *(_QWORD *)(v13 + 160) = a3;
  *(_BYTE *)(v13 + 168) = a4;
  v16 = *(_QWORD *)(a5 + 72);
  if (v16)
  {
    v17 = *(_QWORD *)(a5 + 64);
    v18 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
  }
  v35 = &type metadata for AnalyticsString;
  v36 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v33 = v17;
  v34 = (Class (*)(uint64_t))v18;
  sub_1000227F8(a2, a3, a4);
  v38 = (char *)v13;
  v19 = *(_QWORD *)(v13 + 16);
  v20 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v16);
  if (v19 >= v20 >> 1)
    v38 = sub_100089D00((char *)(v20 > 1), v19 + 1, 1, (char *)v13);
  v21 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v21);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v24->initializeWithCopy)((uint64_t)v23, v25);
  sub_10008A6F0(v19, (uint64_t)v23, (uint64_t *)&v38, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v26 = v38;
  v27 = String._bridgeToObjectiveC()();
  v28 = (_QWORD *)swift_allocObject(&unk_100148F88, 40, 7);
  v28[2] = 0xD00000000000001ELL;
  v28[3] = 0x80000001001131B0;
  v28[4] = v26;
  v36 = sub_100022948;
  v37 = v28;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_100089C8C;
  v35 = (ValueMetadata *)&unk_100148FA0;
  v29 = _Block_copy(&aBlock);
  v30 = v37;
  swift_bridgeObjectRetain(v26);
  swift_release(v30);
  AnalyticsSendEventLazy(v27, v29);
  _Block_release(v29);
  swift_bridgeObjectRelease(v26);

}

uint64_t sub_1000224EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 96) + 16))(*(_QWORD *)(*(_QWORD *)v1 + 80));
  v5 = v4;
  sub_10008AB1C(v3, v4, 4, a1);
  return swift_bridgeObjectRelease(v5);
}

uint64_t *sub_100022538()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*v0 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 120)));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  v3 = sub_100007D50(&qword_100159248);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v5 = (uint64_t)v0 + *(_QWORD *)(*v0 + 136);
  v6 = *(_QWORD *)(v1 + 88);
  v7 = type metadata accessor for Optional(255);
  v8 = type metadata accessor for Published(0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
  v9 = (uint64_t)v0 + *(_QWORD *)(*v0 + 144);
  v10 = sub_100007D50(&qword_100159250);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v4((uint64_t)v0 + *(_QWORD *)(*v0 + 152), v3);
  v11 = (uint64_t)v0 + *(_QWORD *)(*v0 + 160);
  v12 = sub_100007D50(&qword_100159258);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (uint64_t)v0 + *(_QWORD *)(*v0 + 168);
  v15 = type metadata accessor for FilterViewModel.FilterConfiguration(255, v6, *(_QWORD *)(v1 + 104), v14);
  v16 = type metadata accessor for Published(0, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
  v17 = (uint64_t)v0 + *(_QWORD *)(*v0 + 176);
  v18 = type metadata accessor for Array(255, v6);
  v19 = type metadata accessor for Published(0, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  v20 = (uint64_t)v0 + *(_QWORD *)(*v0 + 184);
  v21 = *(_QWORD *)(v20 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + 24));
  swift_bridgeObjectRelease(v21);
  v22 = (uint64_t)v0 + *(_QWORD *)(*v0 + 192);
  v23 = *(_QWORD *)(v22 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v22 + 24));
  swift_bridgeObjectRelease(v23);
  v24 = (uint64_t)v0 + *(_QWORD *)(*v0 + 200);
  v25 = *(_QWORD *)(v24 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v24 + 24));
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 208) + 8));
  return v0;
}

uint64_t sub_100022750()
{
  uint64_t v0;

  sub_100022538();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for VenueEventViewModel(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VenueEventViewModel);
}

void sub_100022780(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void *sub_1000227C4()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000227D0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000227F8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100022810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100021744();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100022838(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  return sub_1000217E0(v1, v2);
}

uint64_t sub_100022874@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100021680();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000228A0(char *a1)
{
  return sub_100021948(*a1, (uint64_t)&unk_100109508, (uint64_t)&unk_100109540);
}

uint64_t sub_1000228D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000228FC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002291C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

_QWORD *sub_100022948()
{
  uint64_t v0;

  return sub_100074ED4(v0 + 16);
}

uint64_t sub_100022950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100022960(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100022968(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v5 = type metadata accessor for Optional(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)v15 - v7;
  v16 = v3[10];
  v9 = v16;
  v17 = v4;
  v11 = v3[13];
  v18 = v3[12];
  v10 = v18;
  v19 = v11;
  KeyPath = swift_getKeyPath(&unk_1001096C0);
  v15[0] = v9;
  v15[1] = v4;
  v15[2] = v10;
  v15[3] = v11;
  v13 = swift_getKeyPath(&unk_1001096F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain(v1);
  return static Published.subscript.setter(v8, v1, KeyPath, v13);
}

uint64_t sub_100022A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  v8 = *(_QWORD *)(*v4 + 104);
  v9 = type metadata accessor for FilterViewModel.FilterConfiguration(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v18 - v11;
  v19 = *(_QWORD *)(v6 + 80);
  v13 = v19;
  v20 = v7;
  v21 = *(_QWORD *)(v6 + 96);
  v14 = v21;
  v22 = v8;
  KeyPath = swift_getKeyPath(&unk_1001095B8);
  v18[0] = v13;
  v18[1] = v7;
  v18[2] = v14;
  v18[3] = v8;
  v16 = swift_getKeyPath(&unk_1001095F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v16);
}

uint64_t sub_100022B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, &unk_10011790C, &unk_10011796C);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v35 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v14 = type metadata accessor for Optional(0);
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v35 - v16;
  v18 = *(void (**)(uint64_t, uint64_t, __n128))(a5 + 208);
  v37 = a1;
  v18(a3, a5, v15);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v38 = v19;
  v20 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_100119D18, &unk_100119D20);
  v21 = type metadata accessor for Set(0, v13, *(_QWORD *)(v20 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v21);
  Collection.first.getter(v21, WitnessTable);
  swift_bridgeObjectRelease(v19);
  v23 = *(_QWORD *)(v13 - 8);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v17, 1, v13);
  if (v24 == 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v36);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 152))(a3, a5);
    v27 = v28;
  }
  else
  {
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v13, v20);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v13);
  }
  v29 = type metadata accessor for PromotionalAssetsController(0);
  v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v31 = v30 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  v32 = type metadata accessor for ArtistPromotionalAssets(0);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(_QWORD *)(v30 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v30 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v33);
  *(_QWORD *)(v30 + 16) = v25;
  *(_QWORD *)(v30 + 24) = v27;
  *(_BYTE *)(v30 + 32) = v24 != 1;
  return v30;
}

uint64_t sub_100022E1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100021680();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100022E48(char *a1)
{
  return sub_100021948(*a1, (uint64_t)&unk_100109508, (uint64_t)&unk_100109540);
}

uint64_t sub_100022E7C()
{
  return 32;
}

__n128 sub_100022E88(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100022E94(uint64_t a1)
{
  uint64_t v1;

  return sub_100021FE4(a1, v1) & 1;
}

uint64_t sub_100022EB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100021B64();
  *a1 = result;
  return result;
}

uint64_t sub_100022ED8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain(*a1);
  return sub_100021C00(v1);
}

uint64_t sub_100022F00()
{
  return 32;
}

__n128 sub_100022F0C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100022F18()
{
  return sub_1000215C0();
}

uint64_t sub_100022F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100022A5C(a1, a2, a3, a4);
}

uint64_t sub_100022F58()
{
  return 32;
}

__n128 sub_100022F64(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100022F70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100021744();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100022F98(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  return sub_1000217E0(v1, v2);
}

uint64_t sub_100022FD4()
{
  return 32;
}

__n128 sub_100022FE0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100022FF4()
{
  return 32;
}

__n128 sub_100023000(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100023014()
{
  return 32;
}

__n128 sub_100023020(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_10002302C(double *a1@<X8>)
{
  *a1 = sub_1000219E8();
}

uint64_t sub_100023054(double *a1)
{
  return sub_100021A84(*a1);
}

uint64_t sub_100023078()
{
  return 32;
}

__n128 sub_100023084(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100023098(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100023108()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for ConditionalValue.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalValue.Storage);
}

_QWORD *initializeBufferWithCopyOfBuffer for ShazamEventsApp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ShazamEventsApp(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for ShazamEventsApp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for ShazamEventsApp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ConditionalValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionalValue);
}

uint64_t sub_100023284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

_QWORD *sub_1000232A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_100007D50(&qword_100158658);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = a3[7];
    v18 = (char *)v4 + v16;
    v19 = (char *)a2 + v16;
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v18[16] = v19[16];
    v21 = *((_QWORD *)v19 + 3);
    LOBYTE(v19) = *((_BYTE *)a2 + v17);
    *((_QWORD *)v18 + 3) = v21;
    *((_BYTE *)v4 + v17) = (_BYTE)v19;
    v22 = a3[8];
    v23 = (_QWORD *)((char *)v4 + v22);
    v24 = (_QWORD *)((char *)a2 + v22);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v25 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for UserInterfaceSizeClass(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
      {
        v28 = sub_100007D50(&qword_100158970);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 16))(v23, v24, v26);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
      }
      v30 = v23;
      v31 = v25;
      v32 = 1;
    }
    else
    {
      v29 = *v24;
      *v23 = *v24;
      swift_retain(v29);
      v30 = v23;
      v31 = v25;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
  return v4;
}

uint64_t sub_1000234B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[6];
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = (_QWORD *)(a1 + a2[8]);
  v9 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v8, v9) != 1)
    return swift_release(*v8);
  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v8, v10);
  return result;
}

_QWORD *sub_1000235CC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100007D50(&qword_100158658);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  v16[16] = v17[16];
  v19 = *((_QWORD *)v17 + 3);
  LOBYTE(v17) = *((_BYTE *)a2 + v15);
  *((_QWORD *)v16 + 3) = v19;
  *((_BYTE *)a1 + v15) = (_BYTE)v17;
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v23 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
      v26 = sub_100007D50(&qword_100158970);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v27 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v25 + 16))(v21, v22, v24);
      v27 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    }
  }
  else
  {
    v28 = *v22;
    *v21 = *v22;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v23, v27);
  return a1;
}

_QWORD *sub_1000237B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100007D50(&qword_100158658);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)((char *)a2 + v17);
  v20 = *(_QWORD *)((char *)a2 + v17 + 8);
  v21 = *(_QWORD *)((char *)a1 + v17 + 8);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v18[16] = v19[16];
  v22 = *((_QWORD *)v19 + 3);
  v23 = *((_QWORD *)v18 + 3);
  *((_QWORD *)v18 + 3) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  if (a1 != a2)
  {
    v24 = a3[8];
    v25 = (_QWORD *)((char *)a1 + v24);
    v26 = (_QWORD *)((char *)a2 + v24);
    sub_100007F38((uint64_t)a1 + v24, &qword_100158968);
    v27 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for UserInterfaceSizeClass(0);
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v28))
      {
        v30 = sub_100007D50(&qword_100158970);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        v31 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v29 + 16))(v25, v26, v28);
        v31 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
      }
    }
    else
    {
      v32 = *v26;
      *v25 = *v26;
      swift_retain(v32);
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v31);
  }
  return a1;
}

_OWORD *sub_100023A28(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100007D50(&qword_100158658);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_OWORD *)((char *)a1 + v12);
  v15 = (_OWORD *)((char *)a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  LOBYTE(v15) = *((_BYTE *)a2 + v13);
  *v14 = v16;
  v14[1] = v17;
  *((_BYTE *)a1 + v13) = (_BYTE)v15;
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for UserInterfaceSizeClass(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      v24 = sub_100007D50(&qword_100158970);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_100023BE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100007D50(&qword_100158658);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)((char *)a2 + v17 + 8);
  v21 = *(_QWORD *)((char *)a1 + v17 + 8);
  *(_QWORD *)v18 = *(_QWORD *)((char *)a2 + v17);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease(v21);
  v18[16] = v19[16];
  v22 = *((_QWORD *)v18 + 3);
  *((_QWORD *)v18 + 3) = *((_QWORD *)v19 + 3);
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  if (a1 != a2)
  {
    v23 = a3[8];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    sub_100007F38((uint64_t)a1 + v23, &qword_100158968);
    v26 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for UserInterfaceSizeClass(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v27))
      {
        v29 = sub_100007D50(&qword_100158970);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v24, v25, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
      }
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100023E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100023E34);
}

uint64_t sub_100023E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158658);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158978);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100023EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023EE8);
}

uint64_t sub_100023EE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158658);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158978);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ArtistEventListHeader(uint64_t a1)
{
  return sub_100025D84(a1, (uint64_t *)&unk_1001593C8, (uint64_t)&nominal type descriptor for ArtistEventListHeader);
}

void sub_100023FA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_1001098B8;
  sub_100024044(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_1001098D0;
    v6[3] = &unk_1001098E8;
    sub_1000175DC(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_100024044(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_1001593D8)
  {
    type metadata accessor for URL(255);
    v2 = type metadata accessor for Optional(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1001593D8);
  }
}

uint64_t destroy for VenueEventListHeader(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for VenueEventListHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for VenueEventListHeader(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VenueEventListHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VenueEventListHeader()
{
  return &type metadata for VenueEventListHeader;
}

uint64_t sub_100024310(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116850, 1);
}

uint64_t sub_100024320@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = sub_100007D50(&qword_100159418);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_100159420);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static VerticalAlignment.top.getter(v8);
  v12 = type metadata accessor for ArtistEventListHeader(0);
  v13 = 0x4024000000000000;
  if (*((_BYTE *)v2 + *(int *)(v12 + 28)))
    v13 = 0x4020000000000000;
  *(_QWORD *)v6 = v11;
  *((_QWORD *)v6 + 1) = v13;
  v6[16] = 0;
  v14 = sub_100007D50(&qword_100159428);
  v15 = sub_100024488(v2, (uint64_t)&v6[*(int *)(v14 + 44)]);
  v16 = static Alignment.leading.getter(v15);
  sub_100043378(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v16, v17);
  sub_100007F38((uint64_t)v6, &qword_100159418);
  return sub_100018EB4((uint64_t)v10, a1, &qword_100159420);
}

uint64_t sub_100024488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  void (*v58)(_BYTE *, uint64_t, uint64_t);
  void (*v59)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v60;
  uint64_t v61;
  void (*v62)(_BYTE *, uint64_t);
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  double v66;
  _BYTE *v67;
  _QWORD *v68;
  _BYTE *v69;
  uint64_t v70;
  char v71;
  void (*v72)(_BYTE *, uint64_t);
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v94[12];
  int v95;
  _BYTE *v96;
  char *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  void (*v101)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v102;
  int v103;
  uint64_t v104;
  _BYTE *v105;
  int *v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _BYTE *v116;
  _BYTE *v117;
  _QWORD *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  _BYTE *v124;

  v121 = a2;
  v119 = type metadata accessor for HeaderText(0);
  v3 = __chkstk_darwin(v119);
  v102 = &v94[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v120 = &v94[-v5];
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v100 = &v94[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v123 = sub_100007D50(&qword_100158A18);
  v9 = __chkstk_darwin(v123);
  v124 = &v94[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v12 = &v94[-v11];
  v13 = sub_100007D50(&qword_100158970);
  v14 = __chkstk_darwin(v13);
  v99 = &v94[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v105 = &v94[-v17];
  v18 = __chkstk_darwin(v16);
  v107 = &v94[-v19];
  v20 = __chkstk_darwin(v18);
  v98 = &v94[-v21];
  v22 = __chkstk_darwin(v20);
  v24 = &v94[-v23];
  __chkstk_darwin(v22);
  v122 = &v94[-v25];
  v26 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v26);
  v28 = &v94[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = sub_100007D50(&qword_100159430);
  v113 = *(_QWORD *)(v29 - 8);
  v114 = v29;
  __chkstk_darwin(v29);
  v31 = &v94[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v109 = sub_100007D50(&qword_100159438);
  __chkstk_darwin(v109);
  v111 = &v94[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v110 = sub_100007D50(&qword_100159440);
  v33 = __chkstk_darwin(v110);
  v117 = &v94[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = __chkstk_darwin(v33);
  v108 = &v94[-v36];
  __chkstk_darwin(v35);
  v116 = &v94[-v37];
  v38 = (int *)type metadata accessor for ArtistEventListHeader(0);
  v39 = sub_100007E78((uint64_t)a1 + v38[5], (uint64_t)v28, &qword_100158658);
  v40 = static Animation.easeInOut.getter(v39);
  v41 = Transaction.init(animation:)(v40);
  v42 = sub_100007D50(&qword_100159448);
  v43 = sub_100025DB8();
  v112 = v31;
  AsyncImage.init(url:scale:transaction:content:)(v28, v41, sub_100024ECC, 0, v42, v43, 1.0);
  v45 = v38[7];
  v44 = v38[8];
  v106 = v38;
  v46 = v122;
  v104 = v45;
  v103 = *((unsigned __int8 *)a1 + v45);
  v118 = a1;
  v47 = (char *)a1 + v44;
  sub_100018474((uint64_t)v122);
  v48 = enum case for UserInterfaceSizeClass.compact(_:);
  v101 = (void (*)(_BYTE *, uint64_t, uint64_t))v7[13];
  v101(v24, enum case for UserInterfaceSizeClass.compact(_:), v6);
  v49 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v7[7];
  v49(v24, 0, 1, v6);
  v50 = (uint64_t)&v12[*(int *)(v123 + 48)];
  sub_100007E78((uint64_t)v46, (uint64_t)v12, &qword_100158970);
  sub_100007E78((uint64_t)v24, v50, &qword_100158970);
  v115 = v7;
  v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[6];
  if (v51((uint64_t)v12, 1, v6) == 1)
  {
    sub_100007F38((uint64_t)v24, &qword_100158970);
    sub_100007F38((uint64_t)v46, &qword_100158970);
    v52 = v51(v50, 1, v6);
    v53 = (uint64_t)v105;
    if (v52 == 1)
    {
      sub_100007F38((uint64_t)v12, &qword_100158970);
      v54 = 25.0;
      v55 = (uint64_t)v107;
      goto LABEL_9;
    }
  }
  else
  {
    v56 = v98;
    sub_100007E78((uint64_t)v12, (uint64_t)v98, &qword_100158970);
    if (v51(v50, 1, v6) != 1)
    {
      v96 = v12;
      v57 = v115;
      v58 = (void (*)(_BYTE *, uint64_t, uint64_t))v115[4];
      v97 = v47;
      v59 = v49;
      v60 = v100;
      v58(v100, v50, v6);
      v61 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v95 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v60, v6, v61);
      v62 = (void (*)(_BYTE *, uint64_t))v57[1];
      v63 = v60;
      v49 = v59;
      v62(v63, v6);
      sub_100007F38((uint64_t)v24, &qword_100158970);
      sub_100007F38((uint64_t)v122, &qword_100158970);
      v62(v56, v6);
      sub_100007F38((uint64_t)v96, &qword_100158970);
      v54 = 25.0;
      v55 = (uint64_t)v107;
      v53 = (uint64_t)v105;
      if ((v95 & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_100007F38((uint64_t)v24, &qword_100158970);
    sub_100007F38((uint64_t)v122, &qword_100158970);
    ((void (*)(_BYTE *, uint64_t))v115[1])(v56, v6);
    v53 = (uint64_t)v105;
  }
  sub_100007F38((uint64_t)v12, &qword_100158A18);
  v55 = (uint64_t)v107;
LABEL_8:
  v54 = 30.0;
LABEL_9:
  sub_100018474(v55);
  v101((_BYTE *)v53, v48, v6);
  v49((_BYTE *)v53, 0, 1, v6);
  v64 = v124;
  v65 = (uint64_t)&v124[*(int *)(v123 + 48)];
  sub_100007E78(v55, (uint64_t)v124, &qword_100158970);
  sub_100007E78(v53, v65, &qword_100158970);
  if (v51((uint64_t)v64, 1, v6) != 1)
  {
    v67 = v99;
    sub_100007E78((uint64_t)v124, (uint64_t)v99, &qword_100158970);
    if (v51(v65, 1, v6) != 1)
    {
      v68 = v115;
      v69 = v100;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v115[4])(v100, v65, v6);
      v70 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v71 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v69, v6, v70);
      v72 = (void (*)(_BYTE *, uint64_t))v68[1];
      v72(v69, v6);
      sub_100007F38(v53, &qword_100158970);
      sub_100007F38(v55, &qword_100158970);
      v72(v67, v6);
      sub_100007F38((uint64_t)v124, &qword_100158970);
      v66 = 25.0;
      if ((v71 & 1) != 0)
        goto LABEL_17;
LABEL_16:
      v66 = 30.0;
      goto LABEL_17;
    }
    sub_100007F38(v53, &qword_100158970);
    sub_100007F38(v55, &qword_100158970);
    ((void (*)(_BYTE *, uint64_t))v115[1])(v67, v6);
LABEL_14:
    sub_100007F38((uint64_t)v124, &qword_100158A18);
    goto LABEL_16;
  }
  sub_100007F38(v53, &qword_100158970);
  sub_100007F38(v55, &qword_100158970);
  if (v51(v65, 1, v6) != 1)
    goto LABEL_14;
  sub_100007F38((uint64_t)v124, &qword_100158970);
  v66 = 25.0;
LABEL_17:
  v74 = v112;
  v73 = v113;
  v75 = (uint64_t)v111;
  v76 = v114;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v113 + 16))(v111, v112, v114);
  v77 = v75 + *(int *)(v109 + 36);
  *(_BYTE *)v77 = v103;
  *(_QWORD *)(v77 + 8) = 0x404E000000000000;
  *(double *)(v77 + 16) = v54;
  *(_QWORD *)(v77 + 24) = 0x404E000000000000;
  *(double *)(v77 + 32) = v66;
  (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v74, v76);
  v78 = v108;
  sub_100007E78(v75, (uint64_t)v108, &qword_100159438);
  v78[*(int *)(v110 + 36)] = 1;
  sub_100007F38(v75, &qword_100159438);
  v79 = v116;
  sub_100018EB4((uint64_t)v78, (uint64_t)v116, &qword_100159440);
  v80 = v118[1];
  v81 = (char *)v118 + v106[6];
  v82 = *(_QWORD *)v81;
  v83 = *((_QWORD *)v81 + 1);
  v84 = v81[16];
  v85 = *((_QWORD *)v81 + 3);
  LOBYTE(v81) = *((_BYTE *)v118 + v104);
  v86 = (uint64_t)v102;
  *v102 = *v118;
  *(_QWORD *)(v86 + 8) = v80;
  *(_QWORD *)(v86 + 16) = v82;
  *(_QWORD *)(v86 + 24) = v83;
  *(_BYTE *)(v86 + 32) = v84;
  *(_QWORD *)(v86 + 40) = v85;
  *(_BYTE *)(v86 + 48) = (_BYTE)v81;
  v87 = (_QWORD *)(v86 + *(int *)(v119 + 28));
  *v87 = swift_getKeyPath(&unk_1001099B8);
  v88 = sub_100007D50(&qword_100158968);
  swift_storeEnumTagMultiPayload(v87, v88, 0);
  v89 = v120;
  sub_10002735C(v86, (uint64_t)v120);
  v90 = v117;
  sub_100007E78((uint64_t)v79, (uint64_t)v117, &qword_100159440);
  sub_10001BFB8((uint64_t)v89, v86, type metadata accessor for HeaderText);
  v91 = v121;
  sub_100007E78((uint64_t)v90, v121, &qword_100159440);
  v92 = sub_100007D50(&qword_1001594B0);
  sub_10001BFB8(v86, v91 + *(int *)(v92 + 48), type metadata accessor for HeaderText);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRetain(v85);
  sub_10001E24C((uint64_t)v89, type metadata accessor for HeaderText);
  sub_100007F38((uint64_t)v79, &qword_100159440);
  sub_10001E24C(v86, type metadata accessor for HeaderText);
  return sub_100007F38((uint64_t)v90, &qword_100159440);
}

uint64_t sub_100024ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int8 v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[26];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 v48;
  char v49;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v11, v8);
    *(_QWORD *)&v42 = *v11;
    v13 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    KeyPath = Image.resizable(capInsets:resizingMode:)(v7, v13, 0.0, 0.0, 0.0, 0.0);
    v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = static Color.black.getter(v15);
    v17 = Color.opacity(_:)(0.1);
    swift_release(v16);
    *(_QWORD *)&v43 = KeyPath;
    *((_QWORD *)&v43 + 1) = v17;
    *(_OWORD *)v44 = xmmword_1001087E0;
    *(_QWORD *)&v44[16] = 0x4010000000000000;
    v44[24] = 0;
    swift_retain(KeyPath);
    swift_retain(v17);
    v18 = sub_100007D50(&qword_100159470);
    v19 = sub_100007D50(&qword_1001594A0);
    v20 = sub_10001E0A8(&qword_100159468, &qword_100159470, (void (*)(void))sub_100025EB0);
    v21 = sub_100025F34();
    _ConditionalContent<>.init(storage:)(&v43, v18, v19, v20, v21);
    v22 = v45;
    v43 = v45;
    *(_OWORD *)v44 = v46;
    *(_QWORD *)&v44[16] = v47;
    *(_WORD *)&v44[24] = v48;
    sub_1000273A8(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, v48);
    v23 = sub_100007D50(&qword_100159460);
    v24 = sub_100025E24();
    _ConditionalContent<>.init(storage:)(&v43, v23, &type metadata for EmptyView, v24, &protocol witness table for EmptyView);
    swift_release(v42);
    sub_1000273D8(v22, *((uint64_t *)&v22 + 1));
    v25 = v17;
  }
  else
  {
    if (v12 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v11, v8);
      swift_errorRelease(*v11);
    }
    else if (v12 != enum case for AsyncImagePhase.empty(_:))
    {
      v43 = 0u;
      memset(v44, 0, 25);
      v44[25] = 1;
      v39 = sub_100007D50(&qword_100159460);
      v40 = sub_100025E24();
      _ConditionalContent<>.init(storage:)(&v43, v39, &type metadata for EmptyView, v40, &protocol witness table for EmptyView);
      v41 = v46;
      v42 = v45;
      v36 = v47;
      v37 = v48;
      v38 = v49;
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
      v35 = v41;
      v34 = v42;
      goto LABEL_10;
    }
    if (qword_1001580B8 != -1)
      swift_once(&qword_1001580B8, sub_100051460);
    v26 = qword_10016A4D0;
    KeyPath = swift_getKeyPath(&unk_1001099E8);
    *(_QWORD *)&v43 = KeyPath;
    *((_QWORD *)&v43 + 1) = v26;
    memset(v44, 0, 24);
    v44[24] = 1;
    swift_retain_n(v26, 2);
    swift_retain(KeyPath);
    v27 = sub_100007D50(&qword_100159470);
    v28 = sub_100007D50(&qword_1001594A0);
    v29 = sub_10001E0A8(&qword_100159468, &qword_100159470, (void (*)(void))sub_100025EB0);
    v30 = sub_100025F34();
    _ConditionalContent<>.init(storage:)(&v43, v27, v28, v29, v30);
    v43 = v45;
    *(_OWORD *)v44 = v46;
    *(_QWORD *)&v44[16] = v47;
    *(_WORD *)&v44[24] = v48;
    v31 = sub_100007D50(&qword_100159460);
    v32 = sub_100025E24();
    _ConditionalContent<>.init(storage:)(&v43, v31, &type metadata for EmptyView, v32, &protocol witness table for EmptyView);
    v25 = v26;
  }
  swift_release(v25);
  result = swift_release(KeyPath);
  v34 = v45;
  v35 = v46;
  v36 = v47;
  v37 = v48;
  v38 = v49;
LABEL_10:
  *(_OWORD *)a2 = v34;
  *(_OWORD *)(a2 + 16) = v35;
  *(_QWORD *)(a2 + 32) = v36;
  *(_BYTE *)(a2 + 40) = v37;
  *(_BYTE *)(a2 + 41) = v38;
  return result;
}

uint64_t sub_100025390@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  _OWORD v112[3];
  uint64_t v113;
  __int128 v114;
  __int128 v115;

  v110 = a2;
  v111 = a1;
  v108 = type metadata accessor for HeaderText(0);
  v2 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v108);
  v4 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v109 = (uint64_t)&v89 - v5;
  v107 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v107);
  v106 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MapInteractionModes(0);
  __chkstk_darwin(v7);
  v99 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_1001594C8);
  __chkstk_darwin(v9);
  v97 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for MapCamera(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MapCameraPosition(0);
  v90 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_1001594D0);
  __chkstk_darwin(v16);
  v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100007D50(&qword_1001594D8);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100007D50(&qword_1001594E0);
  __chkstk_darwin(v93);
  v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100007D50(&qword_1001594E8);
  __chkstk_darwin(v96);
  v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100007D50(&qword_1001594F0);
  __chkstk_darwin(v98);
  v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100007D50(&qword_1001594F8);
  __chkstk_darwin(v103);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100007D50(&qword_100159500);
  __chkstk_darwin(v29);
  v102 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100007D50(&qword_100159508);
  v31 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v104);
  v105 = (uint64_t)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v31);
  v100 = (uint64_t)&v89 - v34;
  __chkstk_darwin(v33);
  v101 = (uint64_t)&v89 - v35;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)(*((double *)v111 + 7), *((double *)v111 + 8), 1000.0, 0.0, 60.0);
  static MapCameraPosition.camera(_:)(v12);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v12, v92);
  static Binding.constant(_:)(v15, v13);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v15, v13);
  v36 = type metadata accessor for MapCameraBounds(0);
  v37 = v97;
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v97, 1, 1, v36);
  v39 = v99;
  static MapInteractionModes.all.getter(v38);
  Map.init<>(position:bounds:interactionModes:scope:)(v18, v37, v39, 0, 1);
  KeyPath = swift_getKeyPath(&unk_100109A18);
  v41 = swift_allocObject(&unk_100149220, 17, 7);
  *(_BYTE *)(v41 + 16) = 1;
  v42 = v94;
  v43 = v95;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v22, v20, v95);
  v44 = (uint64_t *)&v22[*(int *)(v93 + 36)];
  *v44 = KeyPath;
  v44[1] = (uint64_t)sub_1000274C0;
  v44[2] = v41;
  v45 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v20, v43);
  LOBYTE(KeyPath) = static Edge.Set.bottom.getter(v45);
  v46 = EdgeInsets.init(_all:)(-20.0);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  sub_100007E78((uint64_t)v22, (uint64_t)v24, &qword_1001594E0);
  v53 = &v24[*(int *)(v96 + 36)];
  *v53 = KeyPath;
  *((double *)v53 + 1) = v46;
  *((_QWORD *)v53 + 2) = v48;
  *((_QWORD *)v53 + 3) = v50;
  *((_QWORD *)v53 + 4) = v52;
  v53[40] = 0;
  sub_100007F38((uint64_t)v22, &qword_1001594E0);
  v54 = v106;
  v55 = &v106[*(int *)(v107 + 20)];
  v56 = enum case for RoundedCornerStyle.continuous(_:);
  v57 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v55, v56, v57);
  __asm { FMOV            V0.2D, #8.0 }
  *v54 = _Q0;
  v63 = (uint64_t)&v26[*(int *)(v98 + 36)];
  sub_10001BFB8((uint64_t)v54, v63, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v63 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v24, (uint64_t)v26, &qword_1001594E8);
  sub_10001E24C((uint64_t)v54, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v64 = sub_100007F38((uint64_t)v24, &qword_1001594E8);
  v65 = v111;
  v66 = *((_BYTE *)v111 + 48);
  if ((v66 & 1) != 0)
    v67 = 0x4044000000000000;
  else
    v67 = 0x404E000000000000;
  v68 = static Alignment.center.getter(v64);
  _FrameLayout.init(width:height:alignment:)(v112, v67, 0, v67, 0, v68, v69);
  sub_100007E78((uint64_t)v26, (uint64_t)v28, &qword_1001594F0);
  v70 = v103;
  v71 = &v28[*(int *)(v103 + 36)];
  v72 = v112[1];
  *(_OWORD *)v71 = v112[0];
  *((_OWORD *)v71 + 1) = v72;
  *((_OWORD *)v71 + 2) = v112[2];
  sub_100007F38((uint64_t)v26, &qword_1001594F0);
  v73 = sub_10001E0A8(&qword_100159510, &qword_1001594F8, (void (*)(void))sub_1000274D8);
  v74 = (uint64_t)v102;
  View.accessibility(hidden:)(1, v70, v73);
  sub_100007F38((uint64_t)v28, &qword_1001594F8);
  v75 = v100;
  sub_100007E78(v74, v100, &qword_100159500);
  *(_BYTE *)(v75 + *(int *)(v104 + 36)) = 1;
  sub_100007F38(v74, &qword_100159500);
  v76 = v101;
  sub_100018EB4(v75, v101, &qword_100159508);
  v77 = *v65;
  v114 = v65[1];
  v78 = v114;
  v115 = v77;
  v80 = *((_QWORD *)v65 + 4);
  v113 = *((_QWORD *)v65 + 5);
  v79 = v113;
  *(_OWORD *)v4 = v77;
  *((_OWORD *)v4 + 1) = v78;
  *((_QWORD *)v4 + 4) = v80;
  *((_QWORD *)v4 + 5) = v79;
  v4[48] = v66;
  v81 = &v4[*(int *)(v108 + 28)];
  *(_QWORD *)v81 = swift_getKeyPath(&unk_1001099B8);
  v82 = sub_100007D50(&qword_100158968);
  swift_storeEnumTagMultiPayload(v81, v82, 0);
  v83 = v109;
  sub_10002735C((uint64_t)v4, v109);
  v84 = v105;
  sub_100007E78(v76, v105, &qword_100159508);
  sub_10001BFB8(v83, (uint64_t)v4, type metadata accessor for HeaderText);
  v85 = v110;
  sub_100007E78(v84, v110, &qword_100159508);
  v86 = sub_100007D50(&qword_100159548);
  sub_10001BFB8((uint64_t)v4, v85 + *(int *)(v86 + 48), type metadata accessor for HeaderText);
  v87 = v85 + *(int *)(v86 + 64);
  *(_QWORD *)v87 = 0;
  *(_BYTE *)(v87 + 8) = 1;
  sub_100027618((uint64_t)&v115);
  sub_100027618((uint64_t)&v114);
  sub_100027640(&v113);
  sub_10001E24C(v83, type metadata accessor for HeaderText);
  sub_100007F38(v76, &qword_100159508);
  sub_10001E24C((uint64_t)v4, type metadata accessor for HeaderText);
  return sub_100007F38(v84, &qword_100159508);
}

uint64_t sub_100025C94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[3];
  __int128 v14;
  uint64_t v15;

  v3 = sub_100007D50(&qword_1001594B8);
  __chkstk_darwin(v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_OWORD *)(v1 + 48);
  v13[2] = *(_OWORD *)(v1 + 32);
  v14 = v6;
  v15 = *(_QWORD *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v7;
  v9 = static VerticalAlignment.top.getter(v8);
  v10 = 0x4020000000000000;
  if ((v14 & 1) == 0)
    v10 = 0x4024000000000000;
  *(_QWORD *)v5 = v9;
  *((_QWORD *)v5 + 1) = v10;
  v5[16] = 0;
  v11 = sub_100007D50(&qword_1001594C0);
  sub_100025390(v13, (uint64_t)&v5[*(int *)(v11 + 44)]);
  return sub_100018EB4((uint64_t)v5, a1, &qword_1001594B8);
}

uint64_t sub_100025D60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116828, 1);
}

uint64_t type metadata accessor for HeaderText(uint64_t a1)
{
  return sub_100025D84(a1, qword_1001595A8, (uint64_t)&nominal type descriptor for HeaderText);
}

uint64_t sub_100025D84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_100025DB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159450;
  if (!qword_100159450)
  {
    v1 = sub_100007D00(&qword_100159448);
    sub_100025E24();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159450);
  }
  return result;
}

unint64_t sub_100025E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159458;
  if (!qword_100159458)
  {
    v1 = sub_100007D00(&qword_100159460);
    sub_10001E0A8(&qword_100159468, &qword_100159470, (void (*)(void))sub_100025EB0);
    sub_100025F34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159458);
  }
  return result;
}

unint64_t sub_100025EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159478;
  if (!qword_100159478)
  {
    v1 = sub_100007D00(&qword_100159480);
    sub_10000F4E0(&qword_100159488, &qword_100159490, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159478);
  }
  return result;
}

unint64_t sub_100025F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159498;
  if (!qword_100159498)
  {
    v1 = sub_100007D00(&qword_1001594A0);
    sub_100025FB8();
    sub_10000F4E0((unint64_t *)&qword_1001588B0, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159498);
  }
  return result;
}

unint64_t sub_100025FB8()
{
  unint64_t result;

  result = qword_1001594A8;
  if (!qword_1001594A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_1001594A8);
  }
  return result;
}

uint64_t sub_100025FFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t OpaqueTypeConformance2;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];

  v67 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  v3 = __chkstk_darwin(v2);
  v64 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for AccessibilityChildBehavior(0, v3);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HeaderText(0);
  __chkstk_darwin(v6);
  v57 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UserInterfaceSizeClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v52 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_100158A18);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v52 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v52 - v21;
  v56 = sub_100007D50(&qword_100159600);
  __chkstk_darwin(v56);
  v24 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100007D50(&qword_100159608);
  v58 = *(_QWORD *)(v25 - 8);
  v59 = v25;
  __chkstk_darwin(v25);
  v55 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100007D50(&qword_100159610);
  __chkstk_darwin(v27);
  v54 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = static HorizontalAlignment.leading.getter(v29);
  v62 = v1;
  sub_100018474((uint64_t)v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v19, enum case for UserInterfaceSizeClass.compact(_:), v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v19, 0, 1, v8);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_100007E78((uint64_t)v22, (uint64_t)v13, &qword_100158970);
  sub_100007E78((uint64_t)v19, v30, &qword_100158970);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    sub_100007F38((uint64_t)v19, &qword_100158970);
    sub_100007F38((uint64_t)v22, &qword_100158970);
    if (v31(v30, 1, v8) == 1)
    {
      sub_100007F38((uint64_t)v13, &qword_100158970);
      v32 = v62;
      v33 = v57;
      sub_10001BFB8(v62, v57, type metadata accessor for HeaderText);
LABEL_8:
      sub_10001E24C(v33, type metadata accessor for HeaderText);
      v38 = 0x3FF0000000000000;
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  sub_100007E78((uint64_t)v13, (uint64_t)v16, &qword_100158970);
  if (v31(v30, 1, v8) == 1)
  {
    sub_100007F38((uint64_t)v19, &qword_100158970);
    sub_100007F38((uint64_t)v22, &qword_100158970);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
LABEL_6:
    sub_100007F38((uint64_t)v13, &qword_100158A18);
    v32 = v62;
    v33 = v57;
    sub_10001BFB8(v62, v57, type metadata accessor for HeaderText);
    goto LABEL_9;
  }
  v34 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v52, v30, v8);
  v35 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v34, v8, v35);
  v37 = *(void (**)(char *, uint64_t))(v9 + 8);
  v37(v34, v8);
  sub_100007F38((uint64_t)v19, &qword_100158970);
  sub_100007F38((uint64_t)v22, &qword_100158970);
  v37(v16, v8);
  sub_100007F38((uint64_t)v13, &qword_100158970);
  v32 = v62;
  v33 = v57;
  sub_10001BFB8(v62, v57, type metadata accessor for HeaderText);
  if ((v36 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v39 = *(unsigned __int8 *)(v33 + 48);
  sub_10001E24C(v33, type metadata accessor for HeaderText);
  v38 = 0x4014000000000000;
  if (v39)
    v38 = 0x3FF0000000000000;
LABEL_11:
  *(_QWORD *)v24 = v53;
  *((_QWORD *)v24 + 1) = v38;
  v24[16] = 0;
  v40 = sub_100007D50(&qword_100159618);
  v41 = sub_10002662C(v32, (uint64_t)&v24[*(int *)(v40 + 44)]);
  v42 = v60;
  static AccessibilityChildBehavior.combine.getter(v41);
  v43 = sub_10000F4E0(&qword_100159620, &qword_100159600, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v45 = v55;
  v44 = v56;
  View.accessibilityElement(children:)(v42, v56, v43);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v42, v63);
  v46 = sub_100007F38((uint64_t)v24, &qword_100159600);
  v47 = v64;
  static AccessibilityTraits.isHeader.getter(v46);
  v68[0] = v44;
  v68[1] = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v68, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v49 = (uint64_t)v54;
  v50 = v59;
  View.accessibility(addTraits:)(v47, v59, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v47, v66);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v50);
  return sub_100018EB4(v49, v67, &qword_100159610);
}

uint64_t sub_10002662C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  double v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t KeyPath;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  double v104;
  double v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  char v173;

  v158 = a2;
  v3 = sub_100007D50(&qword_100159628);
  v154 = *(_QWORD *)(v3 - 8);
  v155 = v3;
  __chkstk_darwin(v3);
  v167 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100007D50(&qword_100159630);
  __chkstk_darwin(v153);
  v157 = (uint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v152 = (char *)&v137 - v7;
  __chkstk_darwin(v8);
  v156 = (uint64_t)&v137 - v9;
  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  v165 = *(_QWORD *)(v10 - 8);
  v166 = v10;
  __chkstk_darwin(v10);
  v139 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100007D50(&qword_100158A18);
  __chkstk_darwin(v163);
  v151 = (uint64_t)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v147 = (uint64_t)&v137 - v14;
  v15 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v15);
  v17 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v160 = (uint64_t)&v137 - v19;
  __chkstk_darwin(v20);
  v149 = (uint64_t)&v137 - v21;
  __chkstk_darwin(v22);
  v137 = (uint64_t)&v137 - v23;
  __chkstk_darwin(v24);
  v161 = (uint64_t)&v137 - v25;
  __chkstk_darwin(v26);
  v159 = (uint64_t)&v137 - v27;
  v142 = sub_100007D50(&qword_100159638);
  __chkstk_darwin(v142);
  v29 = (uint64_t *)((char *)&v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v30);
  v144 = (char *)&v137 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100007D50(&qword_100159648);
  __chkstk_darwin(v141);
  v33 = (char *)&v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100007D50(&qword_100159650);
  __chkstk_darwin(v143);
  v162 = (uint64_t)&v137 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100007D50(&qword_100159658);
  __chkstk_darwin(v146);
  v150 = (uint64_t)&v137 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v145 = (uint64_t)&v137 - v37;
  __chkstk_darwin(v38);
  v164 = (uint64_t)&v137 - v39;
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 24);
  v42 = *(unsigned __int8 *)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v43);
  v44 = Text.init(_:tableName:bundle:comment:)(v40, v41, v42, v43, 0, 0, 0, 0, 0, 256);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v148 = a1;
  v51 = *(unsigned __int8 *)(a1 + 48);
  v138 = v17;
  if (v51 == 1)
    static Font.Weight.regular.getter();
  else
    v52 = ((double (*)(void))static Font.Weight.semibold.getter)();
  v53 = v48 & 1;
  v54 = Text.fontWeight(_:)(*(_QWORD *)&v52, 0, v44, v46, v48 & 1, v50);
  v56 = v55;
  LODWORD(v140) = v57;
  v59 = v58;
  sub_100007D90(v44, v46, v53);
  swift_bridgeObjectRelease(v50);
  if (v51)
  {
    v60 = type metadata accessor for Text.Case(0);
    v61 = (uint64_t)v144;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v144, 1, 1, v60);
  }
  else
  {
    v62 = enum case for Text.Case.uppercase(_:);
    v63 = type metadata accessor for Text.Case(0);
    v64 = *(_QWORD *)(v63 - 8);
    v61 = (uint64_t)v144;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 104))(v144, v62, v63);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  v65 = v161;
  KeyPath = swift_getKeyPath(&unk_100109AA8);
  sub_100007E78(v61, (uint64_t)v29 + *(int *)(v142 + 28), &qword_100159640);
  *v29 = KeyPath;
  sub_100007E78((uint64_t)v29, (uint64_t)&v33[*(int *)(v141 + 36)], &qword_100159638);
  *(_QWORD *)v33 = v54;
  *((_QWORD *)v33 + 1) = v56;
  v67 = v140;
  v68 = v140 & 1;
  v33[16] = v140 & 1;
  *((_QWORD *)v33 + 3) = v59;
  sub_10000F844(v54, v56, v67 & 1);
  swift_bridgeObjectRetain(v59);
  sub_100007F38((uint64_t)v29, &qword_100159638);
  sub_100007F38(v61, &qword_100159640);
  sub_100007D90(v54, v56, v68);
  swift_bridgeObjectRelease(v59);
  v69 = v162;
  sub_100007E78((uint64_t)v33, v162, &qword_100159648);
  *(_QWORD *)(v69 + *(int *)(v143 + 36)) = 0x3FE0000000000000;
  v70 = sub_100007F38((uint64_t)v33, &qword_100159648);
  v71 = v148;
  LODWORD(v141) = *(unsigned __int8 *)(v148 + 48);
  v140 = static Font.caption2.getter(v70);
  v72 = type metadata accessor for HeaderText(0);
  v73 = v159;
  v144 = (char *)(v71 + *(int *)(v72 + 28));
  sub_100018474(v159);
  v74 = enum case for UserInterfaceSizeClass.compact(_:);
  v75 = v165;
  v76 = v166;
  v142 = *(_QWORD *)(v165 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v142)(v65, enum case for UserInterfaceSizeClass.compact(_:), v166);
  v143 = *(_QWORD *)(v75 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v143)(v65, 0, 1, v76);
  v77 = v147;
  v78 = v147 + *(int *)(v163 + 48);
  sub_100007E78(v73, v147, &qword_100158970);
  sub_100007E78(v65, v78, &qword_100158970);
  v79 = v65;
  v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v80(v77, 1, v76) == 1)
  {
    sub_100007F38(v79, &qword_100158970);
    sub_100007F38(v73, &qword_100158970);
    if (v80(v78, 1, v76) == 1)
    {
      v81 = sub_100007F38(v77, &qword_100158970);
LABEL_14:
      v90 = static Font.caption2.getter(v81);
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  v82 = v137;
  sub_100007E78(v77, v137, &qword_100158970);
  if (v80(v78, 1, v76) == 1)
  {
    sub_100007F38(v161, &qword_100158970);
    sub_100007F38(v73, &qword_100158970);
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v82, v76);
LABEL_12:
    v81 = sub_100007F38(v77, &qword_100158A18);
    goto LABEL_15;
  }
  v83 = v82;
  v84 = v165;
  v85 = v77;
  v86 = v139;
  (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v139, v78, v76);
  v87 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v88 = dispatch thunk of static Equatable.== infix(_:_:)(v83, v86, v76, v87);
  v89 = *(void (**)(char *, uint64_t))(v84 + 8);
  v89(v86, v76);
  sub_100007F38(v161, &qword_100158970);
  sub_100007F38(v159, &qword_100158970);
  v89((char *)v83, v76);
  v81 = sub_100007F38(v85, &qword_100158970);
  if ((v88 & 1) != 0)
    goto LABEL_14;
LABEL_15:
  v90 = static Font.footnote.getter(v81);
LABEL_16:
  v91 = v90;
  v92 = v162;
  v93 = v145;
  sub_100007E78(v162, v145, &qword_100159650);
  v94 = v93 + *(int *)(v146 + 36);
  *(_BYTE *)v94 = v141;
  *(_QWORD *)(v94 + 8) = v140;
  *(_QWORD *)(v94 + 16) = v91;
  sub_100007F38(v92, &qword_100159650);
  sub_100018EB4(v93, v164, &qword_100159658);
  v95 = *(_QWORD *)(v71 + 8);
  v168 = *(_QWORD *)v71;
  v169 = v95;
  sub_10001DB0C();
  swift_bridgeObjectRetain(v95);
  v96 = Text.init<A>(_:)(&v168, &type metadata for String);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  v103 = *(unsigned __int8 *)(v71 + 48);
  v168 = v96;
  v169 = v97;
  v170 = v99 & 1;
  v171 = v101;
  v172 = 0;
  v173 = v103 ^ 1;
  if (((v103 ^ 1) & 1) != 0)
    v104 = static Font.Weight.bold.getter();
  else
    static Font.Weight.semibold.getter();
  v105 = v104;
  v106 = sub_100007D50(&qword_100159660);
  v107 = sub_10002803C();
  View.fontWeight(_:)(*(_QWORD *)&v105, 0, v106, v107);
  sub_100007D90(v96, v98, v100 & 1);
  v108 = swift_bridgeObjectRelease(v102);
  v109 = static Font.title.getter(v108);
  v110 = v149;
  sub_100018474(v149);
  v111 = v160;
  v112 = v166;
  ((void (*)(uint64_t, uint64_t, uint64_t))v142)(v160, v74, v166);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v143)(v111, 0, 1, v112);
  v113 = v151;
  v114 = v151 + *(int *)(v163 + 48);
  sub_100007E78(v110, v151, &qword_100158970);
  sub_100007E78(v111, v114, &qword_100158970);
  if (v80(v113, 1, v112) != 1)
  {
    v116 = (uint64_t)v138;
    sub_100007E78(v113, (uint64_t)v138, &qword_100158970);
    if (v80(v114, 1, v112) != 1)
    {
      v117 = v165;
      v118 = v139;
      (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v139, v114, v112);
      v119 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v120 = dispatch thunk of static Equatable.== infix(_:_:)(v116, v118, v112, v119);
      v121 = v110;
      v122 = *(void (**)(char *, uint64_t))(v117 + 8);
      v122(v118, v112);
      sub_100007F38(v160, &qword_100158970);
      sub_100007F38(v121, &qword_100158970);
      v122((char *)v116, v112);
      v115 = sub_100007F38(v113, &qword_100158970);
      if ((v120 & 1) != 0)
        goto LABEL_26;
LABEL_27:
      v123 = static Font.subheadline.getter(v115);
      goto LABEL_28;
    }
    sub_100007F38(v111, &qword_100158970);
    sub_100007F38(v110, &qword_100158970);
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v116, v112);
LABEL_24:
    v115 = sub_100007F38(v113, &qword_100158A18);
    goto LABEL_27;
  }
  sub_100007F38(v111, &qword_100158970);
  sub_100007F38(v110, &qword_100158970);
  if (v80(v114, 1, v112) != 1)
    goto LABEL_24;
  v115 = sub_100007F38(v113, &qword_100158970);
LABEL_26:
  v123 = static Font.footnote.getter(v115);
LABEL_28:
  v124 = v123;
  v126 = v154;
  v125 = v155;
  v127 = (uint64_t)v152;
  v128 = v167;
  (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v152, v167, v155);
  v129 = v127 + *(int *)(v153 + 36);
  *(_BYTE *)v129 = v103;
  *(_QWORD *)(v129 + 8) = v109;
  *(_QWORD *)(v129 + 16) = v124;
  (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v125);
  v130 = v156;
  sub_100018EB4(v127, v156, &qword_100159630);
  v131 = v164;
  v132 = v150;
  sub_100007E78(v164, v150, &qword_100159658);
  v133 = v157;
  sub_100007E78(v130, v157, &qword_100159630);
  v134 = v158;
  sub_100007E78(v132, v158, &qword_100159658);
  v135 = sub_100007D50(&qword_100159670);
  sub_100007E78(v133, v134 + *(int *)(v135 + 48), &qword_100159630);
  sub_100007F38(v130, &qword_100159630);
  sub_100007F38(v131, &qword_100159658);
  sub_100007F38(v133, &qword_100159630);
  return sub_100007F38(v132, &qword_100159658);
}

uint64_t sub_10002735C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HeaderText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000273A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  if ((a6 & 1) != 0)
    v6 = a2;
  else
    v6 = a1;
  if ((a6 & 1) != 0)
    v7 = a1;
  else
    v7 = a2;
  swift_retain(v6);
  return swift_retain(v7);
}

uint64_t sub_1000273D8(uint64_t a1, uint64_t a2)
{
  swift_release(a1);
  return swift_release(a2);
}

uint64_t sub_1000273FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100027428@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100027454(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_100027478(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_10002749C(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_1000274B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000274C0(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_1000274D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159518;
  if (!qword_100159518)
  {
    v1 = sub_100007D00(&qword_1001594F0);
    sub_10001E0A8(&qword_100159520, &qword_1001594E8, (void (*)(void))sub_10002757C);
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159518);
  }
  return result;
}

unint64_t sub_10002757C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159528;
  if (!qword_100159528)
  {
    v1 = sub_100007D00(&qword_1001594E0);
    sub_10000F4E0(&qword_100159530, &qword_1001594D8, (uint64_t)&protocol conformance descriptor for Map<A>);
    sub_10000F4E0(&qword_100159538, &qword_100159540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159528);
  }
  return result;
}

uint64_t sub_100027618(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_100027640(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100027668(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v7 = a2[5];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = *(int *)(a3 + 28);
    v9 = (uint64_t *)((char *)a2 + v8);
    v10 = (uint64_t *)(a1 + v8);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v11 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12))
      {
        v14 = sub_100007D50(&qword_100158970);
        memcpy(v10, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v10, v9, v12);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v17 = v10;
      v18 = v11;
      v19 = 1;
    }
    else
    {
      v16 = *v9;
      *v10 = *v9;
      swift_retain(v16);
      v17 = v10;
      v18 = v11;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_1000277D4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v5 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  return result;
}

uint64_t sub_100027894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = (uint64_t *)(a2 + v7);
  v9 = (uint64_t *)(a1 + v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v10 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11))
    {
      v13 = sub_100007D50(&qword_100158970);
      memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(v9, v8, v11);
      v14 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  else
  {
    v15 = *v8;
    *v9 = *v8;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v14);
  return a1;
}

uint64_t sub_1000279D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 28);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    sub_100007F38(a1 + v12, &qword_100158968);
    v15 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_100007D50(&qword_100158970);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        v19 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v13, v14, v16);
        v19 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v19);
  }
  return a1;
}

uint64_t sub_100027B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
    {
      v11 = sub_100007D50(&qword_100158970);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v6, v7, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100027C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 28);
    v12 = (void *)(a1 + v11);
    v13 = (const void *)(a2 + v11);
    sub_100007F38(a1 + v11, &qword_100158968);
    v14 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for UserInterfaceSizeClass(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
      {
        v17 = sub_100007D50(&qword_100158970);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v12, v13, v15);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100027DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100027DE4);
}

uint64_t sub_100027DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158978);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100027E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100027E70);
}

uint64_t sub_100027E70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158978);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_100027EE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1001098B8;
  v4[1] = &unk_1001098D0;
  v4[2] = &unk_1001098E8;
  sub_1000175DC(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

unint64_t sub_100027F74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001595E8;
  if (!qword_1001595E8)
  {
    v1 = sub_100007D00(&qword_100159420);
    sub_10000F4E0(&qword_1001595F0, &qword_100159418, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001595E8);
  }
  return result;
}

uint64_t sub_100027FF8()
{
  return sub_10000F4E0(&qword_1001595F8, &qword_1001594B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100028024(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116878, 1);
}

unint64_t sub_10002803C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159668;
  if (!qword_100159668)
  {
    v1 = sub_100007D00(&qword_100159660);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159668);
  }
  return result;
}

unint64_t sub_1000280A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100159678;
  if (!qword_100159678)
  {
    v1 = sub_100007D00(&qword_100159610);
    v2[0] = sub_100007D00(&qword_100159600);
    v2[1] = sub_10000F4E0(&qword_100159620, &qword_100159600, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, &qword_100159678);
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperWatchFaceController()
{
  return &type metadata for WallpaperWatchFaceController;
}

uint64_t sub_100028180(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = type metadata accessor for URL(0);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[17] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1001596AC);
  v1[18] = v6;
  *v6 = v1;
  v6[1] = sub_100028200;
  return sub_1000284B4(v5, a1);
}

uint64_t sub_100028200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000283F8;
  else
    v3 = sub_100028264;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100028264()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  NSURL *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0 + 2;
  v2 = objc_msgSend(objc_allocWithZone((Class)CLKWatchFaceLibrary), "init");
  v0[20] = v2;
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  v0[21] = v4;
  v0[2] = v0;
  v0[3] = sub_100028328;
  v6 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_100028AC4;
  v7[3] = &unk_100149318;
  v7[4] = v6;
  objc_msgSend(v2, "addWatchFaceAtURL:completionHandler:", v5, v7);
  return swift_continuation_await(v1);
}

uint64_t sub_100028328()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_10002842C;
  else
    v2 = sub_100028388;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100028388()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);

  sub_100029A48(v2, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000283F8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002842C(__n128 a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v1 + 168);
  v3 = *(void **)(v1 + 160);
  v5 = *(_QWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 136);
  v6 = *(_QWORD *)(v1 + 120);
  swift_willThrow(a1);

  sub_100029A48(v4, "Failed to remove file at %s possibly does not exist");
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000284B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for URL(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  return swift_task_switch(sub_10002855C, 0, 0);
}

uint64_t sub_10002855C()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)v0[5];
  v2 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
  v0[11] = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v2);

  v3 = v1[3];
  v4 = v1[4];
  sub_10001BF94(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.download(from:delegate:)[1]);
  v0[12] = v5;
  *v5 = v0;
  v5[1] = sub_100028674;
  return NSURLSession.download(from:delegate:)(v0[10], v0[9], 0);
}

uint64_t sub_100028674(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 96);
  *(_QWORD *)(*(_QWORD *)v2 + 104) = v1;
  swift_task_dealloc(v5);
  v6 = v4[9];
  v7 = v4[6];
  v8 = v4[7];
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 8))(v4[9], v4[6]);
    v9 = sub_100028A40;
  }
  else
  {

    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v4[14] = v10;
    v10(v6, v7);
    v9 = sub_100028768;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_100028768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  id v12;
  NSURL *v13;
  void *v14;
  void *v15;
  NSURL *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  __n128 v30;
  id v31;
  NSURL *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  __n128 v43;
  id v44;
  __n128 v45;

  v1 = *(_QWORD *)(v0 + 104);
  sub_100029844(*(_QWORD *)(v0 + 64));
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    v4 = *(void **)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 48));

  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    v10 = *(_QWORD *)(v0 + 64);
    URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001ALL, 0x80000001001132A0, 0);
    v9(v10, v3);
    v11 = (void *)objc_opt_self(NSFileManager);
    v12 = objc_msgSend(v11, "defaultManager");
    URL._bridgeToObjectiveC()(v13);
    v15 = v14;
    URL._bridgeToObjectiveC()(v16);
    v18 = v17;
    *(_QWORD *)(v0 + 16) = 0;
    v19 = objc_msgSend(v12, "copyItemAtURL:toURL:error:", v15, v17, v0 + 16);

    v20 = *(void **)(v0 + 16);
    if (v19)
    {
      v21 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
      v22 = *(_QWORD *)(v0 + 80);
      v23 = *(void **)(v0 + 88);
      v25 = *(_QWORD *)(v0 + 64);
      v24 = *(_QWORD *)(v0 + 72);
      v26 = *(_QWORD *)(v0 + 48);
      v27 = v20;
      v21(v22, v26);

      swift_task_dealloc(v22);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      v7 = *(uint64_t (**)(void))(v0 + 8);
      return v7();
    }
    v28 = v20;
    v29 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v30);
    v31 = objc_msgSend(v11, "defaultManager");
    URL._bridgeToObjectiveC()(v32);
    v34 = v33;
    *(_QWORD *)(v0 + 24) = 0;
    v35 = objc_msgSend(v31, "removeItemAtURL:error:", v33, v0 + 24);

    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
    v37 = *(_QWORD *)(v0 + 80);
    v38 = *(void **)(v0 + 88);
    v39 = *(_QWORD *)(v0 + 48);
    v40 = *(void **)(v0 + 24);
    v41 = *(_QWORD *)(v0 + 32);
    if (v35)
    {
      v42 = v40;
      swift_willThrow(v43);

    }
    else
    {
      v44 = v40;
      _convertNSErrorToError(_:)(v40);

      swift_willThrow(v45);
      swift_errorRelease(v29);
    }
    v36(v41, v39);
    v36(v37, v39);
  }
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100028A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028AC4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100007D50(&qword_100159698);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_100028B38(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for URL(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v4);
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v1[13] = swift_task_alloc(v4);
  return swift_task_switch(sub_100028C04, 0, 0);
}

uint64_t sub_100028C04()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = (_QWORD *)v0[5];
  v2 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
  v0[14] = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:", v2);

  v3 = v1[3];
  v0[15] = v3;
  v4 = v1[4];
  v0[16] = v4;
  v0[17] = sub_10001BF94(v1, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
  v0[18] = v5;
  v5(v3, v4);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.download(from:delegate:)[1]);
  v0[19] = v6;
  *v6 = v0;
  v6[1] = sub_100028D30;
  return NSURLSession.download(from:delegate:)(v0[13], v0[12], 0);
}

uint64_t sub_100028D30(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  *(_QWORD *)(*(_QWORD *)v2 + 160) = v1;
  swift_task_dealloc(v5);
  v6 = v4[12];
  v7 = v4[6];
  v8 = v4[7];
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 8))(v4[12], v4[6]);
    v9 = sub_100029794;
  }
  else
  {

    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v4[21] = v10;
    v10(v6, v7);
    v9 = sub_100028E24;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_100028E24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSURL *v20;
  void *v21;
  void *v22;
  NSURL *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  __n128 v33;
  id v34;
  NSURL *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  void *v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  __n128 v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  id v51;
  Class isa;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 160);
  sub_100029844(*(_QWORD *)(v0 + 80));
  if (v1)
  {
    v2 = *(void **)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 48));

LABEL_3:
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 48);
  v14 = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  v15 = URL.lastPathComponent.getter(v14);
  v17 = v16;
  v10(v12, v13);
  URL.appendingPathComponent(_:isDirectory:)(v15, v17, 0);
  swift_bridgeObjectRelease(v17);
  v10(v11, v13);
  v18 = (void *)objc_opt_self(NSFileManager);
  *(_QWORD *)(v0 + 176) = v18;
  v19 = objc_msgSend(v18, "defaultManager");
  URL._bridgeToObjectiveC()(v20);
  v22 = v21;
  URL._bridgeToObjectiveC()(v23);
  v25 = v24;
  *(_QWORD *)(v0 + 16) = 0;
  LODWORD(v12) = objc_msgSend(v19, "copyItemAtURL:toURL:error:", v22, v24, v0 + 16);

  v26 = *(void **)(v0 + 16);
  if (!(_DWORD)v12)
  {
    v31 = v26;
    v32 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v33);
    v34 = objc_msgSend(*(id *)(v0 + 176), "defaultManager");
    URL._bridgeToObjectiveC()(v35);
    v37 = v36;
    *(_QWORD *)(v0 + 24) = 0;
    v38 = objc_msgSend(v34, "removeItemAtURL:error:", v36, v0 + 24);

    v39 = *(void **)(v0 + 24);
    v40 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v41 = *(_QWORD *)(v0 + 104);
    v42 = *(void **)(v0 + 112);
    v43 = *(_QWORD *)(v0 + 88);
    v44 = *(_QWORD *)(v0 + 48);
    if (v38)
    {
      v45 = v39;
      swift_willThrow(v46);

    }
    else
    {
      v47 = v39;
      _convertNSErrorToError(_:)(v39);

      swift_willThrow(v48);
      swift_errorRelease(v32);
    }
    v40(v43, v44);
    v40(v41, v44);
    goto LABEL_3;
  }
  v27 = *(_QWORD *)(v0 + 88);
  v28 = v26;
  v29 = Data.init(contentsOf:options:)(v27, 0);
  *(_QWORD *)(v0 + 184) = v29;
  *(_QWORD *)(v0 + 192) = v30;
  v49 = v29;
  v50 = v30;
  v51 = objc_allocWithZone((Class)UIImage);
  sub_100029D38(v49, v50);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v53 = objc_msgSend(v51, "initWithData:", isa);
  *(_QWORD *)(v0 + 200) = v53;
  sub_100029D7C(v49, v50);

  if (!v53)
  {
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v55 = *(_QWORD *)(v0 + 88);
    v57 = *(_QWORD *)(v0 + 56);
    v56 = *(_QWORD *)(v0 + 64);
    v58 = *(_QWORD *)(v0 + 48);
    v59 = type metadata accessor for Logger(0);
    sub_100029E7C(v59, (uint64_t)qword_10016A5B0);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v56, v55, v58);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    v63 = os_log_type_enabled(v61, v62);
    v64 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v65 = *(_QWORD *)(v0 + 64);
    v66 = *(_QWORD *)(v0 + 48);
    if (v63)
    {
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v81 = swift_slowAlloc(32, -1);
      v82 = v81;
      *(_DWORD *)v67 = 136315138;
      v68 = sub_100029E94();
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v66, v68);
      v71 = v70;
      *(_QWORD *)(v0 + 32) = sub_10003FCB4(v69, v70, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease(v71);
      v64(v65, v66);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to create image from %s", v67, 0xCu);
      swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      sub_100029D7C(v49, v50);
    }
    else
    {
      sub_100029D7C(v49, v50);
      v64(v65, v66);

    }
    v72 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v73 = *(_QWORD *)(v0 + 104);
    v74 = *(void **)(v0 + 112);
    v76 = *(_QWORD *)(v0 + 88);
    v75 = *(_QWORD *)(v0 + 96);
    v78 = *(_QWORD *)(v0 + 72);
    v77 = *(_QWORD *)(v0 + 80);
    v79 = *(_QWORD *)(v0 + 64);
    v80 = *(_QWORD *)(v0 + 48);
    sub_100029A48(v76, "Failed to delete wallpaper at %s");

    v72(v76, v80);
    v72(v73, v80);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  v54 = (_QWORD *)swift_task_alloc(dword_100159694);
  *(_QWORD *)(v0 + 208) = v54;
  *v54 = v0;
  v54[1] = sub_100029440;
  v54[16] = v53;
  return swift_task_switch(sub_100029EF4, 0, 0);
}

uint64_t sub_100029440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000295EC;
  else
    v3 = sub_1000294E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000294E8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);

  sub_100029D7C(v2, v1);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(void **)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 48);
  sub_100029A48(v7, "Failed to delete wallpaper at %s");

  v3(v7, v11);
  v3(v4, v11);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000295EC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __n128 v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 88);

  sub_100029D7C(v2, v1);
  sub_100029A48(v3, "Failed to delete wallpaper at %s");
  v4 = *(_QWORD *)(v0 + 216);
  v5 = objc_msgSend(*(id *)(v0 + 176), "defaultManager");
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  *(_QWORD *)(v0 + 24) = 0;
  v9 = objc_msgSend(v5, "removeItemAtURL:error:", v7, v0 + 24);

  v10 = *(void **)(v0 + 24);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(void **)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 48);
  if (v9)
  {
    v16 = v10;
    swift_willThrow(v17);

  }
  else
  {
    v18 = v10;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v19);
    swift_errorRelease(v4);
  }
  v11(v14, v15);
  v11(v12, v15);
  v20 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100029794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100029844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  id v22;
  id v23;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v23 - v8;
  static URL.temporaryDirectory.getter(v7);
  v10 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v11 = objc_msgSend(v10, "globallyUniqueString");

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  URL.appendingPathComponent(_:isDirectory:)(v12, v14, 1);
  swift_bridgeObjectRelease(v14);
  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v6, v2);
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  v23 = 0;
  LOBYTE(v11) = objc_msgSend(v16, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v18, 1, 0, &v23);

  v20 = v23;
  if ((v11 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v9, v2);
    return v20;
  }
  else
  {
    v22 = v23;
    _convertNSErrorToError(_:)(v20);

    swift_willThrow();
    return (id)((uint64_t (*)(char *, uint64_t))v15)(v9, v2);
  }
}

void sub_100029A48(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v33 = 0;
  v12 = objc_msgSend(v8, "removeItemAtURL:error:", v10, &v33);

  if (v12)
  {
    v13 = v33;
  }
  else
  {
    v30 = (uint64_t)v33;
    v14 = v33;
    v15 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v16);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v17 = type metadata accessor for Logger(0);
    sub_100029E7C(v17, (uint64_t)qword_10016A5B0);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (void *)swift_slowAlloc(32, -1);
      v29 = a2;
      v23 = v22;
      v33 = v22;
      *(_DWORD *)v21 = 136315138;
      v30 = v15;
      v24 = sub_100029E94();
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v4, v24);
      v27 = v26;
      v31 = sub_10003FCB4(v25, v26, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v27);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, v29, v21, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);
      v28 = v30;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v28 = v15;
    }
    swift_errorRelease(v28);

  }
}

uint64_t sub_100029D38(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100029D7C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100029DC0(uint64_t a1)
{

}

uint64_t sub_100029E00(uint64_t result, int a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a2)
    return swift_continuation_throwingResume(*(_QWORD *)(result + 32));
  if (a3)
  {
    v5 = sub_100007D50(&qword_100159698);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100029E7C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_100029E94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159688;
  if (!qword_100159688)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, &qword_100159688);
  }
  return result;
}

uint64_t sub_100029EDC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = a1;
  return swift_task_switch(sub_100029EF4, 0, 0);
}

uint64_t sub_100029EF4()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v1 = (void *)v0[16];
  v2 = objc_msgSend((id)objc_opt_self(PHPhotoLibrary), "sharedPhotoLibrary");
  v0[17] = v2;
  v3 = swift_allocObject(&unk_1001492C0, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v0[14] = sub_10002A13C;
  v0[15] = v3;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_1000FADC4;
  v0[13] = &unk_1001492D8;
  v4 = _Block_copy(v0 + 10);
  v0[18] = v4;
  v5 = v0[15];
  v6 = v1;
  swift_release(v5);
  v0[2] = v0;
  v0[3] = sub_10002A030;
  v7 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100029E00;
  v0[13] = &unk_100149300;
  v0[14] = v7;
  objc_msgSend(v2, "performChanges:completionHandler:", v4, v0 + 10);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_10002A030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 152) = v1;
  if (v1)
    v2 = sub_10002A0CC;
  else
    v2 = sub_10002A090;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002A090()
{
  uint64_t v0;
  const void *v1;

  v1 = *(const void **)(v0 + 144);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A0CC()
{
  uint64_t v0;
  const void *v1;
  void *v2;

  v1 = *(const void **)(v0 + 144);
  v2 = *(void **)(v0 + 136);
  swift_willThrow();

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A118()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10002A13C()
{
  uint64_t v0;

  sub_100029DC0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10002A144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002A154(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002A15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100109C00);
  v6 = v0;
  v3 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 184));
  return v4;
}

uint64_t sub_10002A1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 184) = a3;
  swift_bridgeObjectRetain(a3);
  return swift_bridgeObjectRelease(v3);
}

unint64_t sub_10002A228()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  sub_10001BF94((_QWORD *)(v0 + 32), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3, v2, &unk_1001166AC, &unk_1001166CC);
  v6 = sub_100007D50(&qword_1001597E8);
  v7 = _arrayForceCast<A, B>(_:)(v4, AssociatedTypeWitness, v6);
  swift_bridgeObjectRelease(v4);
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease(v7);
  v9 = 4;
  if (v8 < 4)
    v9 = v8;
  if (v1)
    return v8;
  else
    return v9;
}

uint64_t sub_10002A2E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_100109C50);
  v7[0] = v1;
  v4 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription, v7, 0, 0);
  return sub_100007E78(v5, a1, &qword_1001597C8);
}

uint64_t sub_10002A398@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100109C50);
  v8[0] = v3;
  v5 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(v3 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription, v8, 0, 0);
  return sub_100007E78(v6, a2, &qword_1001597C8);
}

uint64_t sub_10002A450(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100007D50(&qword_1001597C8);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100007E78(a1, (uint64_t)v6, &qword_1001597C8);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_100109C50);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_10002BC44, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v6, &qword_1001597C8);
}

uint64_t sub_10002A558(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(a1 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription, v5, 33, 0);
  sub_10002BBFC(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10002A5C0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, __n128);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  _QWORD v17[5];

  v3 = v1[7];
  v4 = v1[8];
  sub_10001BF94(v1 + 4, v3);
  v5 = *(void (**)(uint64_t, uint64_t, __n128))(v4 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v3, &unk_1001166AC, &unk_1001166C4);
  v7 = type metadata accessor for Optional(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v17[-1] - v10;
  v5(v3, v4, v9);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v13 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    v17[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_1001166AC, &unk_1001166B4);
    v17[4] = AssociatedConformanceWitness;
    sub_10002BA68(v17);
    (*(void (**)(void))(v12 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_1000228FC(v17);
  }
}

void sub_10002A74C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = *(_QWORD **)(v2 + 200);
  KeyPath = swift_getKeyPath(&unk_100109C28);
  v29[0] = v6;
  v8 = sub_100007428((unint64_t *)&qword_1001597D8, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100110770);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v29, KeyPath, v8);
  swift_release(KeyPath);
  swift_beginAccess(v6 + 7, &v28, 0, 0);
  sub_100007E78((uint64_t)(v6 + 7), (uint64_t)v29, &qword_1001597E0);
  v9 = v30;
  if (v30)
  {
    v10 = v31;
    sub_10001BF94(v29, v30);
    v11 = dispatch thunk of MusicItem.id.getter(v9, *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8));
    v9 = v12;
    sub_1000228FC(v29);
  }
  else
  {
    sub_100007F38((uint64_t)v29, &qword_1001597E0);
    v11 = 0;
  }
  v14 = a1[3];
  v13 = a1[4];
  sub_10001BF94(a1, v14);
  v15 = dispatch thunk of MusicItem.id.getter(v14, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
  v17 = v16;
  if (v9)
  {
    if (v11 == v15 && v9 == v16)
    {
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v17);
      goto LABEL_18;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v9, v15, v16, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
    {
LABEL_18:
      v25 = v6[5];
      v26 = v6[6];
      sub_10001BF94(v6 + 2, v25);
      v27 = (char *)&loc_10002A9F0
          + 4 * byte_100109B00[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26)];
      __asm { BR              X10 }
    }
  }
  else
  {
    swift_bridgeObjectRelease(v16);
  }
  sub_1000D3250((uint64_t)a1);
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100029E7C(v20, (uint64_t)qword_10016A5B0);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Playing new song.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  sub_10008A874(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), 8, 11, 16, 0, 3u, a2);
}

uint64_t sub_10002ACDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[20] = a1;
  v2[21] = v1;
  v3 = type metadata accessor for AttributeContainer(0);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_1001597C8);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributedString(0);
  v2[24] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[25] = v6;
  v2[26] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[27] = static MainActor.shared.getter();
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v2[28] = v8;
  v2[29] = v9;
  return swift_task_switch(sub_10002ADB4, v8, v9);
}

uint64_t sub_10002ADB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  unint64_t v8;
  Class isa;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD **)(v0 + 168);
  v2 = v1[7];
  v3 = v1[8];
  sub_10001BF94(v1 + 4, v2);
  *(_QWORD *)(v0 + 240) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  *(_QWORD *)(v0 + 248) = v4;
  if (v4)
  {
    v5 = v0 + 16;
    v6 = (void *)objc_opt_self(NSAttributedString);
    v7 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 256) = v7;
    v8 = sub_1000FAF24((uint64_t)&_swiftEmptyArrayStorage);
    type metadata accessor for DocumentReadingOptionKey(0);
    sub_100007428(&qword_100158388, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100108784);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 264) = isa;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10002AF5C;
    v10 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v11 = (_QWORD *)(v0 + 80);
    v11[1] = 0x40000000;
    v11[2] = sub_10002B318;
    v11[3] = &unk_100149330;
    v11[4] = v10;
    objc_msgSend(v6, "loadFromHTMLWithString:options:completionHandler:", v7, isa, v11);
    return swift_continuation_await(v5);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 216));
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002AF5C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v2;
  if (v2)
    return swift_task_switch(sub_10002B1A8, v1[28], v1[29]);
  swift_bridgeObjectRelease(v1[31]);
  return swift_task_switch(sub_10002AFC4, v1[28], v1[29]);
}

uint64_t sub_10002AFC4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v20;

  v2 = *(void **)(v0 + 256);
  v1 = *(void **)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 216));
  v9 = *(void **)(v0 + 120);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));

  v20 = v9;
  AttributedString.init(_:)();
  KeyPath = swift_getKeyPath(&unk_100109C78);
  v11 = (uint64_t *)swift_task_alloc(16);
  *v11 = KeyPath;
  v12 = swift_getKeyPath(&unk_100109CA8);
  swift_task_dealloc(v11);
  *(_QWORD *)(v0 + 144) = v7;
  v13 = sub_10002BB20();
  swift_retain(v7);
  AttributedString.subscript.setter(v0 + 144, v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
  v14 = swift_getKeyPath(&unk_100109C50);
  v15 = swift_task_alloc(32);
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = v6;
  *(_QWORD *)(v0 + 152) = v8;
  v16 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 152, v14, sub_10002BC44, v15, (char *)&type metadata for () + 8, v16);
  swift_release(v14);
  swift_task_dealloc(v15);
  sub_100007F38(v6, &qword_1001597C8);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v17 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B1A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void **)(v0 + 264);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(void **)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = swift_release(*(_QWORD *)(v0 + 216));
  swift_willThrow(v9);
  swift_errorRelease(v1);

  AttributeContainer.init()(v10);
  AttributedString.init(_:attributes:)(v5, v3, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v6, 0, 1, v18);
  KeyPath = swift_getKeyPath(&unk_100109C50);
  v12 = swift_task_alloc(32);
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v6;
  *(_QWORD *)(v0 + 136) = v8;
  v13 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 136, KeyPath, sub_10002BAEC, v12, (char *)&type metadata for () + 8, v13);
  swift_release(KeyPath);
  swift_task_dealloc(v12);
  sub_100007F38(v6, &qword_1001597C8);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B318(uint64_t result, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;

  v4 = *(_QWORD *)(result + 32);
  if (a4)
  {
    v6 = sub_100007D50(&qword_100159698);
    v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0, 0);
    *v8 = a4;
    v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }
  else if (a2)
  {
    type metadata accessor for DocumentAttributeKey(0);
    v13 = v12;
    v14 = sub_100007428(&qword_100158378, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100108744);
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, v13, (char *)&type metadata for Any + 8, v14);
    v16 = *(_QWORD **)(*(_QWORD *)(v4 + 64) + 40);
    *v16 = a2;
    v16[1] = v15;
    v17 = a2;
    return swift_continuation_throwingResume(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002B3F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100007D50(qword_100159800);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

_QWORD *sub_10002B448()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(v0[3]);
  sub_1000228FC(v0 + 4);
  v1 = v0[11];
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v1);
  v2 = v0[15];
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v2);
  v3 = v0[19];
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v0[23]);
  swift_release(v0[25]);
  sub_100007F38((uint64_t)v0 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription, &qword_1001597C8);
  v4 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel___observationRegistrar;
  v5 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t sub_10002B500()
{
  uint64_t v0;

  sub_10002B448();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002B524()
{
  return type metadata accessor for SetlistViewModel(0);
}

uint64_t type metadata accessor for SetlistViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001596E8;
  if (!qword_1001596E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistViewModel);
  return result;
}

void sub_10002B568(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v6[0] = &unk_100109B68;
  v6[1] = &unk_100109B80;
  v6[2] = &unk_100109B98;
  v6[3] = &unk_100109BB0;
  v6[4] = &unk_100109BB0;
  v6[5] = &unk_100109BB0;
  v6[6] = &unk_100109BC8;
  v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10002B640(319);
  if (v3 <= 0x3F)
  {
    v6[9] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 11, v6, a1 + 80);
    }
  }
}

void sub_10002B640(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_1001596F8)
  {
    type metadata accessor for AttributedString(255);
    v2 = type metadata accessor for Optional(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1001596F8);
  }
}

uint64_t sub_10002B694@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100109C28);
  v7[0] = v3;
  v5 = sub_100007428((unint64_t *)&qword_1001597D8, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100110770);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 56, v7, 0, 0);
  return sub_100007E78(v3 + 56, a2, &qword_1001597E0);
}

uint64_t sub_10002B744(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_100007E78(a1, (uint64_t)v9, &qword_1001597E0);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100109C28);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100007428((unint64_t *)&qword_1001597D8, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100110770);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10002BACC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v9, &qword_1001597E0);
}

uint64_t sub_10002B80C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a6;
  v30 = a7;
  v13 = sub_10002BA68(&v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v13, a3, a6);
  *(_QWORD *)(a5 + 80) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000022, 0x80000001001133E0);
  *(_QWORD *)(a5 + 88) = v14;
  *(_BYTE *)(a5 + 96) = v15 & 1;
  *(_QWORD *)(a5 + 104) = v16;
  *(_QWORD *)(a5 + 112) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100113410);
  *(_QWORD *)(a5 + 120) = v17;
  *(_BYTE *)(a5 + 128) = v18 & 1;
  *(_QWORD *)(a5 + 136) = v19;
  *(_QWORD *)(a5 + 144) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100113440);
  *(_QWORD *)(a5 + 152) = v20;
  *(_BYTE *)(a5 + 160) = v21 & 1;
  *(_QWORD *)(a5 + 168) = v22;
  *(_QWORD *)(a5 + 176) = 0;
  *(_QWORD *)(a5 + 184) = 0;
  *(_QWORD *)(a5 + 192) = 0x4008000000000000;
  if (qword_100158170 != -1)
    swift_once(&qword_100158170, sub_1000D3328);
  v23 = qword_10016A5A0;
  *(_QWORD *)(a5 + 200) = qword_10016A5A0;
  v24 = a5 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  v25 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  swift_retain(v23);
  ObservationRegistrar.init()(v26);
  *(_QWORD *)(a5 + 16) = a1;
  *(_QWORD *)(a5 + 24) = a2;
  sub_10002BAA4(&v28, a5 + 32);
  *(_BYTE *)(a5 + 72) = a4 & 1;
  return a5;
}

uint64_t sub_10002B9A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v13 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, a6);
  return sub_10002B80C(a1, a2, (uint64_t)v15, a4, v17, a6, a7);
}

_QWORD *sub_10002BA68(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10002BAA4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10002BACC()
{
  uint64_t v0;

  return sub_1000D3364(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10002BAEC()
{
  uint64_t v0;

  return sub_10002A558(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10002BB04()
{
  AttributeScopes.SwiftUIAttributes.font.getter();
  __break(1u);
}

unint64_t sub_10002BB20()
{
  unint64_t result;

  result = qword_1001597F8;
  if (!qword_1001597F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_1001597F8);
  }
  return result;
}

void sub_10002BB64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10002BB20();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_10002BB88()
{
  return 8;
}

uint64_t sub_10002BB94(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_10002BB9C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10002BBAC()
{
  uint64_t v0;

  v0 = sub_100007D50(qword_100159800);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_10002BBF0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10002BBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_1001597C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BC44()
{
  return sub_10002BAEC();
}

double sub_10002BC58()
{
  return 0.0;
}

uint64_t sub_10002BC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

void sub_10002BC68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100109D70;
  v4[1] = &unk_100109D88;
  v4[2] = &unk_100109DA0;
  sub_10002C488(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100109DB8;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 48);
  }
}

unint64_t sub_10002BCF8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10002BE30(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v12 = *(int *)(a3 + 60);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    *(_QWORD *)(a1 + 48) = v11;
    swift_retain(v10);
    swift_retain(v11);
    v15 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v20 = *(int *)(a3 + 64);
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    v18 = *v22;
    v23 = v22[1];
    *v21 = v18;
    v21[1] = v23;
  }
  swift_retain(v18);
  return a1;
}

uint64_t sub_10002BE30(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_10002BE38(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000189BC(*a1, a1[1]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 60));
  v5 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  return swift_release(*(uint64_t *)((char *)a1 + *(int *)(a2 + 64)));
}

uint64_t sub_10002BED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(int *)(a3 + 60);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v9);
  swift_retain(v10);
  v14 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = *(int *)(a3 + 64);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  *v19 = v21;
  v19[1] = v22;
  swift_retain(v21);
  return a1;
}

uint64_t sub_10002BFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_1000189BC(v9, v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_retain(v14);
  swift_release(v13);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 60);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_100007F38(a1 + v15, qword_100158AC8);
    v18 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  v22 = *(int *)(a3 + 64);
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *(_QWORD *)(a1 + v22);
  v26 = *v24;
  *(_QWORD *)(a1 + v22) = *v24;
  swift_retain(v26);
  swift_release(v25);
  *(_QWORD *)(v23 + 8) = v24[1];
  return a1;
}

uint64_t sub_10002C14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(int *)(a3 + 60);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 64)) = *(_OWORD *)(a2 + *(int *)(a3 + 64));
  return a1;
}

uint64_t sub_10002C230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000189BC(v7, v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_release(v10);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 60);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_100007F38(a1 + v12, qword_100158AC8);
    v15 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v17 = *(int *)(a3 + 64);
  v18 = a1 + v17;
  v19 = (_QWORD *)(a2 + v17);
  v20 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *v19;
  swift_release(v20);
  *(_QWORD *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_10002C36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002C378);
}

uint64_t sub_10002C378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_10002C3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C404);
}

uint64_t sub_10002C404(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158670);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for VenueEventView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for VenueEventView);
}

void sub_10002C488(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100159888)
  {
    v2 = type metadata accessor for DismissAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100159888);
  }
}

uint64_t sub_10002C4DC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_1001169F4, 1);
}

uint64_t sub_10002C510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_BYTE *)(*(_QWORD *)(v1 + 32) + 16);
  (*(void (**)(char *, __n128))(v3 + 16))(v6, v4);
  if ((v7 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = sub_10002C5D4(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v10 = sub_100021D08();
    swift_release(v9);
    v8 = !v10;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v8 & 1;
}

uint64_t sub_10002C5D4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t WitnessTable;
  _OWORD v11[2];

  v4 = *v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v11[0] = *(_OWORD *)(a1 + 16);
  v11[1] = v7;
  v8 = type metadata accessor for VenueEventViewModel(0, (uint64_t)v11);
  WitnessTable = swift_getWitnessTable(&unk_1001094D0, v8);
  return a2(v4, v5, v6, v8, WitnessTable);
}

uint64_t sub_10002C650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t KeyPath;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, char *, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t, uint64_t);
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  void (*v188)(char *, char *, uint64_t);
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  void (*v274)(char *, uint64_t, uint64_t);
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;

  v258 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v4 = type metadata accessor for Optional(255);
  v5 = type metadata accessor for Binding(0, v4);
  v256 = *(_QWORD *)(v5 - 8);
  v257 = v5;
  __chkstk_darwin(v5);
  v255 = (uint64_t *)((char *)&v218 - v6);
  v7 = *(_QWORD *)(a1 - 8);
  v277 = a1;
  v268 = v7;
  v275 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v8);
  v267 = (char *)&v218 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v269 = (char *)&v218 - v11;
  v12 = type metadata accessor for CoordinateSpace(0);
  v273 = *(_QWORD *)(v12 - 8);
  v274 = (void (*)(char *, uint64_t, uint64_t))v12;
  v13 = __chkstk_darwin(v12);
  v272 = (uint64_t)&v218 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = type metadata accessor for NavigationPath(255, v13);
  v15 = sub_100007D00(&qword_100159890);
  sub_100007D00(&qword_100159898);
  v16 = type metadata accessor for Array(255, v2);
  v278 = *(_QWORD *)(a1 + 40);
  v261 = *(_QWORD *)(v278 + 16);
  v17 = v261;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v261, v2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v19 = sub_100007D00(&qword_1001598A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v16);
  v21 = v17;
  v22 = v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v21, v2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v300 = v16;
  v301 = (_QWORD *)AssociatedTypeWitness;
  v302 = v19;
  v303 = (void *)WitnessTable;
  v304 = AssociatedConformanceWitness;
  v24 = type metadata accessor for ForEach(255, &v300);
  v25 = type metadata accessor for _ConditionalContent(255);
  v26 = type metadata accessor for Group(255, v25);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _PaddingLayout);
  v28 = type metadata accessor for Section(255, v15, v27, &type metadata for EmptyView);
  v29 = sub_10001E0A8(&qword_1001598A8, &qword_100159890, (void (*)(void))sub_1000323C4);
  v30 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v318 = sub_100032470();
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v24);
  v316 = v30;
  v317 = v31;
  v315 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v25);
  v313 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v26);
  v314 = &protocol witness table for _PaddingLayout;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v310 = v29;
  v311 = v32;
  v312 = &protocol witness table for EmptyView;
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v28);
  v34 = type metadata accessor for LazyVGrid(255, v28, v33);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v34);
  v37 = type metadata accessor for ObservableScrollView(255, v34, v35, v36);
  v38 = swift_getWitnessTable(&unk_10010F020, v37);
  v300 = v37;
  v301 = (_QWORD *)v38;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v300, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 0);
  v300 = v37;
  v301 = (_QWORD *)v38;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
  v300 = OpaqueTypeMetadata2;
  v301 = (_QWORD *)OpaqueTypeConformance2;
  v41 = swift_getOpaqueTypeMetadata2(255, &v300, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v42 = sub_100007D00(&qword_1001598F8);
  v300 = OpaqueTypeMetadata2;
  v301 = (_QWORD *)OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v44 = sub_100007D00(&qword_100159900);
  v45 = sub_10000F4E0(&qword_100159908, &qword_100159900, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v300 = v44;
  v301 = (_QWORD *)v45;
  v46 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v300 = v41;
  v301 = (_QWORD *)v42;
  v302 = v43;
  v303 = (void *)v46;
  v47 = swift_getOpaqueTypeMetadata2(255, &v300, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v225 = v47;
  v300 = v41;
  v301 = (_QWORD *)v42;
  v302 = v43;
  v303 = (void *)v46;
  v224 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v48 = type metadata accessor for NavigationStack(0, v276, v47, v224);
  v229 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v221 = (char *)&v218 - v49;
  v50 = sub_100007D00(&qword_100159910);
  v220 = v48;
  v51 = type metadata accessor for ModifiedContent(0, v48, v50);
  v231 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v259 = (uint64_t *)((char *)&v218 - v52);
  v53 = sub_100007D00(&qword_100159918);
  v223 = v51;
  v54 = type metadata accessor for ModifiedContent(0, v51, v53);
  v236 = *(_QWORD *)(v54 - 8);
  v55 = v54;
  __chkstk_darwin(v54);
  v260 = (char *)&v218 - v56;
  v57 = (_QWORD *)v22;
  v58 = v278;
  v60 = type metadata accessor for EventView(255, v22, v278, v59);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v48);
  v219 = v61;
  v62 = sub_10000F4E0(&qword_100159920, &qword_100159910, (uint64_t)&unk_100108C38);
  v308 = v61;
  v309 = v62;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v51);
  v222 = v63;
  v64 = sub_10000F4E0(&qword_100159928, &qword_100159918, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v306 = v63;
  v307 = v64;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  v66 = v60;
  v67 = swift_getWitnessTable(&unk_10010A868, v60);
  v300 = v55;
  v301 = v57;
  v230 = v55;
  v68 = (uint64_t)v57;
  v271 = v57;
  v302 = v66;
  v303 = (void *)v65;
  v69 = v66;
  v226 = v66;
  v227 = v67;
  v228 = v65;
  v70 = v261;
  v304 = v261;
  v305 = v67;
  v71 = swift_getOpaqueTypeMetadata2(0, &v300, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v239 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v264 = (char *)&v218 - v72;
  v74 = type metadata accessor for FilterView(255, v68, v58, v73);
  v300 = v55;
  v301 = (_QWORD *)v68;
  v302 = v69;
  v303 = (void *)v65;
  v304 = v70;
  v305 = v67;
  v75 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v76 = swift_getWitnessTable(&unk_10010F1B8, v74);
  v234 = v75;
  v235 = v71;
  v300 = v71;
  v301 = (_QWORD *)v74;
  v77 = (_QWORD *)v74;
  v232 = v74;
  v233 = v76;
  v302 = v75;
  v303 = (void *)v76;
  v78 = v75;
  v79 = (void *)v76;
  v80 = swift_getOpaqueTypeMetadata2(0, &v300, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v241 = *(_QWORD *)(v80 - 8);
  v81 = v80;
  __chkstk_darwin(v80);
  v262 = (char *)&v218 - v82;
  v300 = v71;
  v301 = v77;
  v302 = v78;
  v303 = v79;
  v83 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v300 = v81;
  v301 = &type metadata for String;
  v84 = v81;
  v237 = v81;
  v302 = v83;
  v303 = &protocol witness table for String;
  v85 = v83;
  v238 = v83;
  v86 = swift_getOpaqueTypeMetadata2(0, &v300, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v245 = *(_QWORD *)(v86 - 8);
  v87 = v86;
  v240 = v86;
  __chkstk_darwin(v86);
  v263 = (char *)&v218 - v88;
  v300 = v84;
  v301 = &type metadata for String;
  v302 = v85;
  v303 = &protocol witness table for String;
  v266 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v300 = v87;
  v301 = &type metadata for Bool;
  v302 = v266;
  v303 = &protocol witness table for Bool;
  v89 = swift_getOpaqueTypeMetadata2(0, &v300, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v246 = *(_QWORD *)(v89 - 8);
  v244 = v89;
  __chkstk_darwin(v89);
  v265 = (char *)&v218 - v90;
  v92 = type metadata accessor for ModifiedContent(0, v91, &type metadata for _AppearanceActionModifier);
  v93 = *(_QWORD *)(v92 - 8);
  v247 = v92;
  v248 = v93;
  __chkstk_darwin(v92);
  v242 = (char *)&v218 - v94;
  v96 = type metadata accessor for ModifiedContent(0, v95, &type metadata for _AppearanceActionModifier);
  v250 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v243 = (char *)&v218 - v97;
  v98 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v252 = v96;
  v99 = type metadata accessor for ModifiedContent(0, v96, v98);
  v253 = *(_QWORD *)(v99 - 8);
  v254 = v99;
  __chkstk_darwin(v99);
  v249 = (char *)&v218 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __chkstk_darwin(v101);
  v251 = (uint64_t)&v218 - v103;
  v289 = *(_QWORD *)(v277 + 16);
  v104 = v289;
  v105 = v271;
  v290 = v271;
  v270 = *(_QWORD *)(v277 + 32);
  v291 = v270;
  v106 = v279;
  v292 = v278;
  v293 = v279;
  v107 = v221;
  NavigationStack.init<>(root:)(sub_1000325B8, &v288, v225, v224, v102);
  v108 = sub_1000325C4();
  v109 = v272;
  v111 = v219;
  v110 = v220;
  v225 = v108;
  sub_100044784(v272);
  sub_10005698C((uint64_t)&type metadata for NavigationBarWidthPreferenceKey, v109, (uint64_t)sub_10001F8A8, 0, v110, (uint64_t)&type metadata for NavigationBarWidthPreferenceKey, v111, v108, (uint64_t)v259);
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v273 + 8))(v109, v274);
  (*(void (**)(char *, uint64_t))(v229 + 8))(v107, v110);
  v113 = v268;
  v112 = v269;
  v274 = *(void (**)(char *, uint64_t, uint64_t))(v268 + 16);
  v114 = v277;
  v274(v269, v106, v277);
  v115 = *(unsigned __int8 *)(v113 + 80);
  v272 = ((v115 + 48) & ~v115) + v275;
  v273 = (v115 + 48) & ~v115;
  v116 = v273;
  v275 = v115 | 7;
  v117 = (_QWORD *)swift_allocObject(&unk_1001493F0, v272, v115 | 7);
  v118 = v104;
  v117[2] = v104;
  v117[3] = v105;
  v119 = v270;
  v120 = v278;
  v117[4] = v270;
  v117[5] = v120;
  v268 = *(_QWORD *)(v113 + 32);
  ((void (*)(char *, char *, uint64_t))v268)((char *)v117 + v116, v112, v114);
  v121 = sub_100007428(&qword_100159938, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v122 = (uint64_t)v259;
  v123 = v223;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for NavigationBarWidthPreferenceKey, sub_10003260C, v117, v223, &type metadata for NavigationBarWidthPreferenceKey, v222, v225, v121);
  swift_release(v117);
  (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v122, v123);
  v124 = sub_10002C5D4(v114, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v284 = v118;
  v285 = v105;
  v125 = v119;
  v286 = v119;
  v287 = v120;
  KeyPath = swift_getKeyPath(&unk_100109E30);
  v300 = v118;
  v301 = v105;
  v276 = v118;
  v302 = v119;
  v303 = (void *)v120;
  v127 = type metadata accessor for VenueEventViewModel(255, (uint64_t)&v300);
  v259 = (_QWORD *)swift_getWitnessTable(&unk_1001094D0, v127);
  v128 = v255;
  ObservedObject.Wrapper.subscript.getter(v255, KeyPath, v124, v259);
  swift_release(v124);
  swift_release(KeyPath);
  v129 = (_QWORD *)swift_allocObject(&unk_100149418, 48, 7);
  v129[2] = v118;
  v129[3] = v105;
  v129[4] = v119;
  v129[5] = v120;
  v130 = swift_checkMetadataState(0, v226);
  v131 = v230;
  v132 = v260;
  View.sheet<A, B>(item:onDismiss:content:)(v128, 0, 0, sub_1000326EC, v129, v230, v105, v130, v228, v261, v227);
  swift_release(v129);
  (*(void (**)(_QWORD *, uint64_t))(v256 + 8))(v128, v257);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v132, v131);
  v133 = v277;
  v134 = v279;
  v135 = sub_10002C5D4(v277, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v136 = v276;
  v280 = v276;
  v281 = v105;
  v137 = v125;
  v282 = v125;
  v283 = v120;
  v138 = swift_getKeyPath(&unk_100109E68);
  ObservedObject.Wrapper.subscript.getter(&v300, v138, v135, v259);
  swift_release(v138);
  swift_release(v135);
  v261 = v300;
  v259 = v301;
  LODWORD(v260) = v302;
  v139 = v269;
  v140 = v134;
  v141 = v134;
  v142 = v274;
  v274(v269, v141, v133);
  v143 = v272;
  v144 = (_QWORD *)swift_allocObject(&unk_100149440, v272, v275);
  v144[2] = v136;
  v144[3] = v105;
  v145 = v105;
  v146 = v137;
  v144[4] = v137;
  v147 = v278;
  v144[5] = v278;
  v148 = v273;
  v149 = v139;
  v150 = v277;
  ((void (*)(char *, char *, uint64_t))v268)((char *)v144 + v273, v149, v277);
  v142(v267, v140, v150);
  v151 = v143;
  v152 = v275;
  v153 = (_QWORD *)swift_allocObject(&unk_100149468, v151, v275);
  v153[2] = v276;
  v153[3] = v145;
  v153[4] = v146;
  v153[5] = v147;
  v154 = v150;
  v155 = v150;
  v156 = (void (*)(uint64_t, char *, uint64_t))v268;
  ((void (*)(char *, char *, uint64_t))v268)((char *)v153 + v148, v267, v154);
  v157 = swift_checkMetadataState(0, v232);
  v158 = v261;
  v159 = (uint64_t)v259;
  v160 = v235;
  v161 = v264;
  View.sheet<A>(isPresented:onDismiss:content:)(v261, v259, v260, sub_100032764, v144, sub_100032774, v153, v235, v157, v234, v233);
  swift_release(v159);
  swift_release(v144);
  swift_release(v153);
  swift_release(v158);
  (*(void (**)(char *, uint64_t))(v239 + 8))(v161, v160);
  v162 = v279;
  v163 = sub_10002C5D4(v155, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v164 = sub_100021744();
  v166 = v165;
  swift_release(v163);
  v300 = v164;
  v301 = v166;
  v167 = v269;
  v168 = v155;
  v274(v269, v162, v155);
  v169 = v272;
  v170 = swift_allocObject(&unk_100149490, v272, v152);
  v171 = v276;
  v172 = v270;
  v173 = v271;
  *(_QWORD *)(v170 + 16) = v276;
  *(_QWORD *)(v170 + 24) = v173;
  v174 = v278;
  *(_QWORD *)(v170 + 32) = v172;
  *(_QWORD *)(v170 + 40) = v174;
  v175 = v167;
  v156(v170 + v273, v167, v168);
  v176 = v262;
  v177 = v237;
  View.onChange<A>(of:initial:_:)(&v300, 0, sub_1000327F0, v170, v237, &type metadata for String, v238, &protocol witness table for String);
  swift_release(v170);
  swift_bridgeObjectRelease(v301);
  (*(void (**)(char *, uint64_t))(v241 + 8))(v176, v177);
  v178 = v279;
  v179 = sub_10002C5D4(v168, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(v170) = sub_100021680();
  swift_release(v179);
  LOBYTE(v300) = v170 & 1;
  v180 = v168;
  v181 = v274;
  v274(v175, v178, v168);
  v182 = (_QWORD *)swift_allocObject(&unk_1001494B8, v169, v275);
  v182[2] = v171;
  v182[3] = v173;
  v183 = v270;
  v184 = v278;
  v182[4] = v270;
  v182[5] = v184;
  v185 = v273;
  v186 = v175;
  v187 = v175;
  v188 = (void (*)(char *, char *, uint64_t))v268;
  ((void (*)(char *, char *, uint64_t))v268)((char *)v182 + v273, v186, v180);
  v189 = v240;
  v190 = v263;
  View.onChange<A>(of:initial:_:)(&v300, 0, sub_100032800, v182, v240, &type metadata for Bool, v266, &protocol witness table for Bool);
  swift_release(v182);
  (*(void (**)(char *, uint64_t))(v245 + 8))(v190, v189);
  v191 = v277;
  v181(v187, v279, v277);
  v192 = v275;
  v193 = (char *)swift_allocObject(&unk_1001494E0, v272, v275);
  v194 = v271;
  *((_QWORD *)v193 + 2) = v276;
  *((_QWORD *)v193 + 3) = v194;
  *((_QWORD *)v193 + 4) = v183;
  *((_QWORD *)v193 + 5) = v184;
  v195 = v191;
  v188(&v193[v185], v187, v191);
  v300 = v189;
  v301 = &type metadata for Bool;
  v302 = v266;
  v303 = &protocol witness table for Bool;
  v196 = swift_getOpaqueTypeConformance2(&v300, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v197 = v242;
  v198 = v244;
  v199 = v265;
  View.onAppear(perform:)(sub_10003288C, v193, v244, v196);
  swift_release(v193);
  (*(void (**)(char *, uint64_t))(v246 + 8))(v199, v198);
  v200 = v187;
  v201 = v187;
  v202 = v243;
  v274(v201, v279, v195);
  v203 = (char *)swift_allocObject(&unk_100149508, v272, v192);
  v204 = v271;
  *((_QWORD *)v203 + 2) = v276;
  *((_QWORD *)v203 + 3) = v204;
  v205 = v278;
  *((_QWORD *)v203 + 4) = v270;
  *((_QWORD *)v203 + 5) = v205;
  v188(&v203[v273], v200, v195);
  v298 = v196;
  v299 = &protocol witness table for _AppearanceActionModifier;
  v206 = v247;
  v207 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v247);
  View.onDisappear(perform:)(sub_10003289C, v203, v206, v207);
  swift_release(v203);
  (*(void (**)(char *, uint64_t))(v248 + 8))(v197, v206);
  if (qword_1001580F0 != -1)
    swift_once(&qword_1001580F0, sub_10007536C);
  v208 = qword_10016A540;
  v209 = *(_QWORD *)algn_10016A548;
  v296 = v207;
  v297 = &protocol witness table for _AppearanceActionModifier;
  v210 = v252;
  v211 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v252);
  v212 = (uint64_t)v249;
  View.accessibilityIdentifier(_:)(v208, v209, v210, v211);
  (*(void (**)(char *, uint64_t))(v250 + 8))(v202, v210);
  v213 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v294 = v211;
  v295 = v213;
  v214 = v254;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v254);
  v215 = v251;
  sub_10005135C(v212, v214, v251);
  v216 = *(void (**)(uint64_t, uint64_t))(v253 + 8);
  v216(v212, v214);
  sub_1000424BC(v215, v214, v258);
  return ((uint64_t (*)(uint64_t, uint64_t))v216)(v215, v214);
}

uint64_t sub_10002D93C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121[8];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127[8];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v119 = a4;
  v118 = a2;
  v120 = a1;
  v116 = a6;
  v115 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v114 = *(_QWORD *)(v115 - 8);
  v10 = __chkstk_darwin(v115);
  v113 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for ScrollDismissesKeyboardMode(0, v10);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = a2;
  v143 = a3;
  v144 = a4;
  v145 = a5;
  v105 = a5;
  v108 = type metadata accessor for VenueEventView(0, (uint64_t)&v142);
  v107 = *(_QWORD *)(v108 - 8);
  v109 = *(_QWORD *)(v107 + 64);
  __chkstk_darwin(v108);
  v106 = (char *)&v85 - v13;
  v14 = sub_100007D00(&qword_100159890);
  sub_100007D00(&qword_100159898);
  v15 = type metadata accessor for Array(255, a3);
  v16 = *(_QWORD *)(a5 + 16);
  v117 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v16, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v18 = sub_100007D00(&qword_1001598A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v142 = v15;
  v143 = AssociatedTypeWitness;
  v144 = v18;
  v145 = WitnessTable;
  v146 = AssociatedConformanceWitness;
  v21 = type metadata accessor for ForEach(255, &v142);
  v22 = type metadata accessor for _ConditionalContent(255);
  v23 = type metadata accessor for Group(255, v22);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _PaddingLayout);
  v25 = type metadata accessor for Section(255, v14, v24, &type metadata for EmptyView);
  v26 = sub_10001E0A8(&qword_1001598A8, &qword_100159890, (void (*)(void))sub_1000323C4);
  v27 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v141 = sub_100032470();
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v21);
  v139 = v27;
  v140 = v28;
  v138 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v22);
  v136 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v23);
  v137 = &protocol witness table for _PaddingLayout;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v133 = v26;
  v134 = v29;
  v135 = &protocol witness table for EmptyView;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v25);
  v31 = type metadata accessor for LazyVGrid(255, v25, v30);
  v100 = v31;
  v101 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v31);
  v33 = type metadata accessor for ObservableScrollView(0, v31, v101, v32);
  v104 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v99 = (uint64_t)&v85 - v34;
  v35 = swift_getWitnessTable(&unk_10010F020, v33);
  v142 = v33;
  v143 = v35;
  v97 = v33;
  v36 = v35;
  v98 = v35;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v142, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 0);
  v103 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v38 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v96 = (char *)&v85 - v39;
  v142 = v33;
  v143 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v142, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
  v142 = v38;
  v143 = OpaqueTypeConformance2;
  v41 = v38;
  v92 = v38;
  v42 = OpaqueTypeConformance2;
  v93 = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeMetadata2(0, &v142, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v102 = *(_QWORD *)(v43 - 8);
  v44 = v43;
  v91 = v43;
  __chkstk_darwin(v43);
  v94 = (char *)&v85 - v45;
  v46 = sub_100007D00(&qword_1001598F8);
  v90 = v46;
  v142 = v41;
  v143 = v42;
  v47 = swift_getOpaqueTypeConformance2(&v142, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v89 = v47;
  v48 = sub_100007D00(&qword_100159900);
  v49 = sub_10000F4E0(&qword_100159908, &qword_100159900, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v142 = v48;
  v143 = v49;
  v88 = swift_getOpaqueTypeConformance2(&v142, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v142 = v44;
  v143 = v46;
  v144 = v47;
  v145 = v88;
  v50 = swift_getOpaqueTypeMetadata2(0, &v142, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v95 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v86 = (char *)&v85 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __chkstk_darwin(v52);
  v87 = (uint64_t)&v85 - v54;
  v55 = v118;
  v56 = v117;
  v128 = v118;
  v129 = v117;
  v57 = v119;
  v58 = v105;
  v130 = v119;
  v131 = v105;
  v132 = v120;
  v59 = v107;
  v60 = v106;
  v61 = v108;
  (*(void (**)(char *, __n128))(v107 + 16))(v106, v53);
  v62 = *(unsigned __int8 *)(v59 + 80);
  v63 = (v62 + 48) & ~v62;
  v64 = (char *)swift_allocObject(&unk_100149580, v63 + v109, v62 | 7);
  *((_QWORD *)v64 + 2) = v55;
  *((_QWORD *)v64 + 3) = v56;
  *((_QWORD *)v64 + 4) = v57;
  *((_QWORD *)v64 + 5) = v58;
  v65 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(&v64[v63], v60, v61);
  v66 = static Axis.Set.vertical.getter(v65);
  v67 = v99;
  v68 = sub_10009D510(v66, 0, (void (*)(uint64_t))sub_1000329B4, (uint64_t)v127, (uint64_t)sub_1000329C4, (uint64_t)v64, v100, v101, v99);
  v69 = v110;
  static ScrollDismissesKeyboardMode.immediately.getter(v68);
  v70 = v96;
  v71 = v97;
  View.scrollDismissesKeyboard(_:)(v69, v97, v98);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v69, v112);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v67, v71);
  v72 = v114;
  v73 = v113;
  v74 = v115;
  (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v113, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v115);
  v75 = v94;
  v76 = v92;
  View.navigationBarTitleDisplayMode(_:)(v73, v92, v93);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v70, v76);
  v122 = v118;
  v123 = v117;
  v124 = v119;
  v125 = v58;
  v126 = v120;
  v77 = (uint64_t)v86;
  v78 = v91;
  v79 = v90;
  v80 = v89;
  v81 = v88;
  View.toolbar<A>(content:)(sub_100032A44, v121, v91, v90, v89, v88);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v75, v78);
  v142 = v78;
  v143 = v79;
  v144 = v80;
  v145 = v81;
  swift_getOpaqueTypeConformance2(&v142, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v82 = v87;
  sub_10005135C(v77, v50, v87);
  v83 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  v83(v77, v50);
  sub_1000424BC(v82, v50, v116);
  return ((uint64_t (*)(uint64_t, uint64_t))v83)(v82, v50);
}

uint64_t sub_10002E238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD v68[6];

  v45 = a5;
  v51 = a4;
  v49 = a2;
  v50 = a1;
  v52 = a6;
  v8 = type metadata accessor for PinnedScrollableViews(0);
  v9 = __chkstk_darwin(v8);
  v48 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for GridItem.Size(0, v9);
  v46 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v12 = (_OWORD *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100007D00(&qword_100159890);
  sub_100007D00(&qword_100159898);
  v14 = type metadata accessor for Array(255, a3);
  v15 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v17 = sub_100007D00(&qword_1001598A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v68[0] = v14;
  v68[1] = AssociatedTypeWitness;
  v68[2] = v17;
  v68[3] = WitnessTable;
  v68[4] = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach(255, v68);
  v21 = type metadata accessor for _ConditionalContent(255);
  v22 = type metadata accessor for Group(255, v21);
  v23 = type metadata accessor for ModifiedContent(255, v22, &type metadata for _PaddingLayout);
  v24 = type metadata accessor for Section(255, v13, v23, &type metadata for EmptyView);
  v25 = sub_10001E0A8(&qword_1001598A8, &qword_100159890, (void (*)(void))sub_1000323C4);
  v26 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v67 = sub_100032470();
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v20);
  v65 = v26;
  v66 = v27;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21);
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v22);
  v63 = &protocol witness table for _PaddingLayout;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v59 = v25;
  v60 = v28;
  v61 = &protocol witness table for EmptyView;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v24);
  v30 = type metadata accessor for LazyVGrid(0, v24, v29);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v45 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v45 - v35;
  v37 = sub_100007D50(&qword_100159A28);
  v38 = *(_QWORD *)(type metadata accessor for GridItem(0) - 8);
  v39 = swift_allocObject(v37, ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72), *(unsigned __int8 *)(v38 + 80) | 7);
  *(_OWORD *)(v39 + 16) = xmmword_100109020;
  *v12 = xmmword_100109D50;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v46 + 104))(v12, enum case for GridItem.Size.flexible(_:), v47);
  v40 = GridItem.init(_:spacing:alignment:)(v12, 0, 0, 0, 0, 1);
  v54 = v49;
  v55 = a3;
  v56 = v51;
  v57 = v45;
  v58 = v50;
  v41 = static HorizontalAlignment.center.getter(v40);
  v42 = v48;
  sub_1000B07DC();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v39, v41, 0, 0, v42, sub_100033038, v53, v24, v29);
  swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v30);
  sub_10005135C((uint64_t)v33, v30, (uint64_t)v36);
  v43 = *(void (**)(char *, uint64_t))(v31 + 8);
  v43(v33, v30);
  sub_1000424BC((uint64_t)v36, v30, v52);
  return ((uint64_t (*)(char *, uint64_t))v43)(v36, v30);
}

uint64_t sub_10002E6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v29 = a4;
  v27 = a2;
  v28 = a1;
  v31 = a6;
  v26 = sub_100007D00(&qword_100159890);
  sub_100007D00(&qword_100159898);
  v8 = type metadata accessor for Array(255, a3);
  v9 = *(_QWORD *)(a5 + 16);
  v53 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v55 = sub_100007D00(&qword_1001598A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v10 = type metadata accessor for ForEach(255, &v53);
  v11 = type metadata accessor for _ConditionalContent(255);
  v12 = type metadata accessor for Group(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = type metadata accessor for Section(0, v26, v13, &type metadata for EmptyView);
  v30 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v26 - v18;
  v39 = v27;
  v40 = a3;
  v41 = v29;
  v42 = a5;
  v43 = v28;
  v33 = v27;
  v34 = a3;
  v35 = v29;
  v36 = a5;
  v37 = v28;
  v20 = sub_10001E0A8(&qword_1001598A8, &qword_100159890, (void (*)(void))sub_1000323C4);
  v21 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v52 = sub_100032470();
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v10);
  v50 = v21;
  v51 = v22;
  v49 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v12);
  v48 = &protocol witness table for _PaddingLayout;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_10002FE74((uint64_t)sub_100033044, (uint64_t)v38, (uint64_t)sub_100033050, (uint64_t)v32, v26, v13, v20, v23);
  v44 = v20;
  v45 = v23;
  v46 = &protocol witness table for EmptyView;
  swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v14);
  sub_10005135C((uint64_t)v16, v14, (uint64_t)v19);
  v24 = *(void (**)(char *, uint64_t))(v30 + 8);
  v24(v16, v14);
  sub_1000424BC((uint64_t)v19, v14, v31);
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v14);
}

uint64_t sub_10002EA70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v37 = a4;
  v36 = a1;
  v40 = a6;
  sub_100007D00(&qword_100159898);
  v9 = type metadata accessor for Array(255, a3);
  v10 = *(_QWORD *)(a5 + 16);
  v53 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v55 = sub_100007D00(&qword_1001598A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v11 = type metadata accessor for ForEach(255, &v53);
  v12 = type metadata accessor for _ConditionalContent(255);
  v13 = type metadata accessor for Group(0, v12);
  v38 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for ModifiedContent(0, v13, &type metadata for _PaddingLayout);
  v39 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v35 - v20;
  v42 = a2;
  v43 = a3;
  v44 = v37;
  v45 = a5;
  v46 = v36;
  v22 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v52 = sub_100032470();
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v50 = v22;
  v51 = v23;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v12);
  v25 = Group<A>.init(content:)(sub_100033060, v41, v12, v24);
  v26 = static Edge.Set.leading.getter(v25);
  v27 = v26;
  v28 = static Edge.Set.trailing.getter(v26);
  v29 = Edge.Set.init(rawValue:)(0);
  v30 = Edge.Set.init(rawValue:)(v29);
  if (Edge.Set.init(rawValue:)(v30 & v27) != v27)
    v29 = Edge.Set.init(rawValue:)(v29 | v27);
  v31 = Edge.Set.init(rawValue:)(v29);
  if (Edge.Set.init(rawValue:)(v31 & v28) != v28)
    v29 = Edge.Set.init(rawValue:)(v29 | v28);
  v49 = v24;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v13);
  View.padding(_:_:)(v29, 0, 1, v13, v32);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
  v47 = v32;
  v48 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_10005135C((uint64_t)v18, v16, (uint64_t)v21);
  v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v18, v16);
  sub_1000424BC((uint64_t)v21, v16, v40);
  return ((uint64_t (*)(char *, uint64_t))v33)(v21, v16);
}

uint64_t sub_10002EDE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v67 = a1;
  v72 = a6;
  v64 = a2;
  v74 = a2;
  v75 = a3;
  v65 = a4;
  v76 = a4;
  v77 = a5;
  v8 = type metadata accessor for VenueEventView(0, (uint64_t)&v74);
  v62 = *(_QWORD *)(v8 - 8);
  v57 = *(_QWORD *)(v62 + 64);
  __chkstk_darwin(v8);
  v61 = (char *)&v55 - v9;
  v10 = type metadata accessor for Array(255, a3);
  v66 = a5;
  v11 = *(_QWORD *)(a5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, a3, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v13 = sub_100007D00(&qword_1001598A0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v60 = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a3, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v74 = v10;
  v75 = AssociatedTypeWitness;
  v59 = AssociatedTypeWitness;
  v58 = v13;
  v76 = v13;
  v77 = WitnessTable;
  v56 = WitnessTable;
  v78 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(0, &v74);
  v55 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v63 = (uint64_t)&v55 - v20;
  v68 = sub_100007D00(&qword_100159898);
  v21 = type metadata accessor for _ConditionalContent(0);
  v70 = *(_QWORD *)(v21 - 8);
  v71 = v21;
  __chkstk_darwin(v21);
  v69 = (char *)&v55 - v22;
  v23 = v67;
  v24 = sub_10002C5D4(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v25 = sub_100021B64();
  swift_release(v24);
  v74 = v25;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  LOBYTE(v13) = Collection.isEmpty.getter(v10, v26);
  swift_bridgeObjectRelease(v25);
  v27 = sub_10002C5D4(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v28 = v27;
  if ((v13 & 1) != 0)
  {
    v29 = v27 + *(_QWORD *)(*(_QWORD *)v27 + 192);
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(_BYTE *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v33);
    v34 = swift_release(v28);
    v35 = static Edge.Set.top.getter(v34);
    v74 = v31;
    v75 = v30;
    LOBYTE(v76) = v32;
    v77 = v33;
    LOBYTE(v78) = v35;
    v79 = 0u;
    v80 = 0u;
    v81 = 1;
    v36 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
    v73 = sub_100032470();
    v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v38 = (uint64_t)v69;
    sub_1000426C4((uint64_t)&v74, v68, v16, v36, v37);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v39 = sub_100021B64();
    swift_release(v28);
    v74 = v39;
    v40 = v62;
    v41 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v23, v8);
    v42 = *(unsigned __int8 *)(v40 + 80);
    v43 = (v42 + 48) & ~v42;
    v44 = (char *)swift_allocObject(&unk_100149648, v43 + v57, v42 | 7);
    *((_QWORD *)v44 + 2) = v64;
    *((_QWORD *)v44 + 3) = a3;
    v45 = v66;
    *((_QWORD *)v44 + 4) = v65;
    *((_QWORD *)v44 + 5) = v45;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v44[v43], v41, v8);
    v46 = sub_100032470();
    ForEach<>.init(_:content:)(&v74, sub_10003317C, v44, v10, v59, v58, v56, v46, v60);
    v85 = v46;
    v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
    v48 = v63;
    sub_10005135C((uint64_t)v18, v16, v63);
    v49 = *(void (**)(char *, uint64_t))(v55 + 8);
    v49(v18, v16);
    sub_1000424BC(v48, v16, (uint64_t)v18);
    v50 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
    v38 = (uint64_t)v69;
    sub_100042788((uint64_t)v18, v68, v16, v50, v47);
    v49(v18, v16);
    v49((char *)v48, v16);
  }
  v51 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v84 = sub_100032470();
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  v82 = v51;
  v83 = v52;
  v53 = v71;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v71);
  sub_1000424BC(v38, v53, v72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v38, v53);
}

uint64_t sub_10002F374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t AssociatedConformanceWitness;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  void (*v94)(uint64_t, uint64_t, __n128);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[4];

  v127 = a3;
  v128 = a5;
  v118 = a2;
  v125 = a7;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v123 = *(_QWORD *)(a4 - 8);
  v124 = v10;
  __chkstk_darwin(a1);
  v122 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129[0] = v12;
  v129[1] = v13;
  v129[2] = v14;
  v129[3] = v15;
  v113 = type metadata accessor for VenueEventView(0, (uint64_t)v129);
  v16 = *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64);
  v120 = *(_QWORD *)(v113 - 8);
  v121 = v16;
  __chkstk_darwin(v113);
  v119 = (char *)&v89 - v17;
  v18 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v18 - 8);
  v117 = v18;
  __chkstk_darwin(v18);
  v110 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DateInterval(0);
  v109 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v105 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a4, &unk_10011790C, &unk_10011796C);
  v102 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v106 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v95 = (char *)&v89 - v24;
  v25 = swift_getAssociatedTypeWitness(0, a6, a4, &unk_10011790C, &unk_100117964);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v101 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - v29;
  v107 = type metadata accessor for EventRowViewModel(0);
  __chkstk_darwin(v107);
  v108 = (uint64_t)&v89 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (uint64_t *)((char *)&v89 - v33);
  v35 = type metadata accessor for EventRow(0);
  __chkstk_darwin(v35);
  v104 = (char *)&v89 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100007D50(&qword_1001598E0);
  __chkstk_darwin(v126);
  v103 = (uint64_t)&v89 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100007D50(&qword_100159A30);
  v114 = *(_QWORD *)(v38 - 8);
  v115 = v38;
  v39 = __chkstk_darwin(v38);
  v112 = (char *)&v89 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = *(void (**)(uint64_t, uint64_t, __n128))(a6 + 200);
  v94(a4, a6, v39);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, v25, &unk_10011790C, &unk_100117954);
  v100 = sub_100093514(v25, AssociatedConformanceWitness);
  v99 = v41;
  v89 = *(void (**)(char *, uint64_t))(v26 + 8);
  v89(v30, v25);
  v93 = *(void (**)(uint64_t, uint64_t))(a6 + 208);
  v42 = v95;
  v43 = a1;
  v93(a4, a6);
  v44 = a4;
  v90 = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v97 = sub_100104784(AssociatedTypeWitness, v90);
  v96 = v45;
  v46 = *(void (**)(char *, uint64_t))(v102 + 8);
  v46(v42, AssociatedTypeWitness);
  v47 = v101;
  ((void (*)(uint64_t, uint64_t))v94)(a4, a6);
  v48 = v105;
  sub_100093160(v25, AssociatedConformanceWitness, v105);
  v49 = ((uint64_t (*)(char *, uint64_t))v89)(v47, v25);
  v50 = v110;
  DateInterval.start.getter(v49);
  (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v48, v111);
  v51 = v106;
  v92 = v43;
  v98 = a6;
  v93(v44, a6);
  sub_100104958(AssociatedTypeWitness, v90, (uint64_t)v129);
  v46(v51, AssociatedTypeWitness);
  v52 = v113;
  v53 = v118;
  v54 = sub_10002C5D4(v113, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v55 = v44;
  v56 = sub_100022B58(v43, v127, v44, v128, a6);
  swift_release(v54);
  v57 = v99;
  *v34 = v100;
  v34[1] = v57;
  v58 = v96;
  v34[2] = v97;
  v34[3] = v58;
  v59 = (int *)v107;
  (*(void (**)(char *, char *, uint64_t))(v116 + 32))((char *)v34 + *(int *)(v107 + 24), v50, v117);
  sub_100018EB4((uint64_t)v129, (uint64_t)v34 + v59[7], &qword_100159A38);
  *((_BYTE *)v34 + v59[8]) = 1;
  *(uint64_t *)((char *)v34 + v59[9]) = v56;
  v60 = v108;
  sub_10001BFB8((uint64_t)v34, v108, type metadata accessor for EventRowViewModel);
  v61 = v104;
  State.init(wrappedValue:)(v60, v59);
  sub_10001E24C((uint64_t)v34, type metadata accessor for EventRowViewModel);
  v62 = (uint64_t)v61;
  v63 = (uint64_t)v61;
  v64 = v103;
  sub_10001BFB8(v62, v103, type metadata accessor for EventRow);
  *(_BYTE *)(v64 + *(int *)(v126 + 36)) = 0;
  sub_10001E24C(v63, type metadata accessor for EventRow);
  v66 = v119;
  v65 = v120;
  v67 = v53;
  v68 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v67, v52);
  v70 = v122;
  v69 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v92, v55);
  v71 = *(unsigned __int8 *)(v65 + 80);
  v72 = v65;
  v73 = (v71 + 48) & ~v71;
  v74 = *(unsigned __int8 *)(v69 + 80);
  v75 = v69;
  v76 = (v121 + v74 + v73) & ~v74;
  v77 = (char *)swift_allocObject(&unk_100149670, v76 + v124, v71 | v74 | 7);
  *((_QWORD *)v77 + 2) = v127;
  *((_QWORD *)v77 + 3) = v55;
  v78 = v98;
  *((_QWORD *)v77 + 4) = v128;
  *((_QWORD *)v77 + 5) = v78;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v77[v73], v66, v68);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v77[v76], v70, v55);
  v79 = sub_10003251C();
  v80 = v112;
  View.onTapGesture(count:perform:)(1, sub_100033354, v77, v126, v79);
  swift_release(v77);
  v81 = sub_100007F38(v64, &qword_1001598E0);
  v82 = static Color.primary.getter(v81);
  KeyPath = swift_getKeyPath(&unk_100109F48);
  v85 = v114;
  v84 = v115;
  v86 = v125;
  (*(void (**)(uint64_t, char *, uint64_t))(v114 + 16))(v125, v80, v115);
  v87 = (uint64_t *)(v86 + *(int *)(sub_100007D50(&qword_1001598A0) + 36));
  *v87 = KeyPath;
  v87[1] = v82;
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v80, v84);
}

uint64_t sub_10002FB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];

  v12 = type metadata accessor for Optional(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v27 - v14;
  v27[0] = a3;
  v27[1] = a4;
  v27[2] = a5;
  v27[3] = a6;
  v16 = type metadata accessor for VenueEventView(0, (uint64_t)v27);
  v17 = sub_10002C5D4(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, a2, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, a4);
  sub_100022968((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release(v17);
  v19 = sub_10002C5D4(v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v20 = (uint64_t *)(a1 + *(int *)(v16 + 64));
  v21 = *v20;
  if (*v20)
  {
    v22 = v19;
    swift_retain(*v20);
    sub_100022240(8, 10, 0, 3u, v21);
    swift_release(v22);
    return swift_release(v21);
  }
  else
  {
    v24 = v20[1];
    v25 = type metadata accessor for RemoteViewConfiguration();
    v26 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v24, v25, v26);
    __break(1u);
  }
  return result;
}

double sub_10002FD24@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  double result;
  uint64_t v24;
  _QWORD v25[4];

  v25[0] = a1;
  v25[1] = a2;
  v25[2] = a3;
  v25[3] = a4;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v25);
  v7 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v24 = sub_100021CA0();
  v9 = v8;
  swift_release(v7);
  v10 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 184);
  v13 = *(_QWORD *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  v14 = *(_BYTE *)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_release(v10);
  v16 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100021CD4();
  v18 = v17;
  v20 = v19;
  v21 = swift_release(v16);
  LOBYTE(v16) = static Edge.Set.horizontal.getter(v21);
  v22 = static Edge.Set.vertical.getter();
  *(_QWORD *)a5 = v24;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v12;
  *(_BYTE *)(a5 + 32) = v14;
  *(_QWORD *)(a5 + 40) = v15;
  *(_BYTE *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = v18;
  *(_QWORD *)(a5 + 64) = v20;
  *(_BYTE *)(a5 + 72) = v16;
  result = 0.0;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_BYTE *)(a5 + 112) = 1;
  *(_BYTE *)(a5 + 120) = v22;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_BYTE *)(a5 + 160) = 1;
  return result;
}

uint64_t sub_10002FE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v19;

  v14 = __chkstk_darwin(a1);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  return Section<>.init(header:content:)(v16, a1, a2, a5, a6, a7, a8);
}

uint64_t sub_10002FF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  _QWORD v8[10];

  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a5;
  v8[6] = a1;
  *(double *)&v8[7] = a6;
  v6 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v6, sub_100033014, v8, (char *)&type metadata for () + 8);
  return swift_release(v6);
}

uint64_t sub_10002FF90(uint64_t result, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 32);
  if (a2 < -50.0 != *(_BYTE *)(v3 + 16))
  {
    v4 = sub_100007D50(&qword_100159A18);
    sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    v5 = ObservableObject<>.objectWillChange.getter(v4);
    ObservableObjectPublisher.send()();
    result = swift_release(v5);
  }
  *(_BYTE *)(v3 + 16) = a2 < -50.0;
  return result;
}

uint64_t sub_100030044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23[1] = a6;
  v11 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100159900);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v16);
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a1;
  v19 = sub_100007D50(&qword_100159948);
  v20 = sub_100032A5C();
  ToolbarItem<>.init(placement:content:)(v13, sub_100032A50, v24, v19, v20);
  v21 = sub_10000F4E0(&qword_100159908, &qword_100159900, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v18, v14, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_100030194@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  char v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (**v62)();
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;

  v110 = a6;
  v11 = sub_100007D50(&qword_1001599D0);
  __chkstk_darwin(v11);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100007D50(&qword_1001599C0);
  __chkstk_darwin(v100);
  v103 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100007D50(&qword_1001599B0);
  __chkstk_darwin(v109);
  v102 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v104 = (uint64_t)&v94 - v17;
  v107 = sub_100007D50(&qword_1001599D8);
  __chkstk_darwin(v107);
  v108 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_1001599A0);
  __chkstk_darwin(v19);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100007D50(&qword_100159990);
  __chkstk_darwin(v94);
  v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100007D50(&qword_100159980);
  __chkstk_darwin(v95);
  v99 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100007D50(&qword_100159970);
  __chkstk_darwin(v96);
  v98 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100007D50(&qword_100159960);
  __chkstk_darwin(v106);
  v97 = (uint64_t)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v101 = (uint64_t)&v94 - v28;
  v29 = a2;
  *(_QWORD *)&v111 = a2;
  *((_QWORD *)&v111 + 1) = a3;
  v30 = a3;
  v31 = a4;
  *(_QWORD *)&v112 = a4;
  *((_QWORD *)&v112 + 1) = a5;
  v32 = a5;
  v105 = type metadata accessor for VenueEventView(0, (uint64_t)&v111);
  v33 = a1;
  v34 = sub_10002C5D4(v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(a4) = sub_100021680();
  v35 = swift_release(v34);
  v36 = static VerticalAlignment.center.getter(v35);
  if ((a4 & 1) != 0)
  {
    *(_QWORD *)v21 = v36;
    *((_QWORD *)v21 + 1) = 0x4010000000000000;
    v21[16] = 0;
    v37 = sub_100007D50(&qword_1001599E8);
    v38 = sub_1000308F0(v33, (uint64_t)v29, v30, v31, v32, &v21[*(int *)(v37 + 44)]);
    v39 = static Edge.Set.leading.getter(v38);
    sub_100007E78((uint64_t)v21, (uint64_t)v23, &qword_1001599A0);
    v40 = &v23[*(int *)(v94 + 36)];
    *v40 = v39;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    v40[40] = 1;
    v41 = sub_100007F38((uint64_t)v21, &qword_1001599A0);
    v42 = static Edge.Set.trailing.getter(v41);
    v43 = EdgeInsets.init(_all:)(8.0);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v50 = v99;
    sub_100007E78((uint64_t)v23, v99, &qword_100159990);
    v51 = v50 + *(int *)(v95 + 36);
    *(_BYTE *)v51 = v42;
    *(double *)(v51 + 8) = v43;
    *(_QWORD *)(v51 + 16) = v45;
    *(_QWORD *)(v51 + 24) = v47;
    *(_QWORD *)(v51 + 32) = v49;
    *(_BYTE *)(v51 + 40) = 0;
    sub_100007F38((uint64_t)v23, &qword_100159990);
    v52 = sub_10002C5D4(v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v53 = sub_1000219E8();
    v54 = swift_release(v52);
    v55 = static Alignment.center.getter(v54);
    _FrameLayout.init(width:height:alignment:)(&v111, *(_QWORD *)&v53, 0, 0, 1, v55, v56);
    v57 = v98;
    sub_100007E78(v50, v98, &qword_100159980);
    v58 = (_OWORD *)(v57 + *(int *)(v96 + 36));
    v59 = v112;
    *v58 = v111;
    v58[1] = v59;
    v58[2] = v113;
    sub_100007F38(v50, &qword_100159980);
    v60 = v97;
    sub_100007E78(v57, v97, &qword_100159970);
    v61 = v106;
    v62 = (uint64_t (**)())(v60 + *(int *)(v106 + 36));
    *v62 = sub_10001F884;
    v62[1] = 0;
    sub_100007F38(v57, &qword_100159970);
    v63 = &qword_100159960;
    v64 = v101;
    sub_100018EB4(v60, v101, &qword_100159960);
    v65 = v108;
    sub_100007E78(v64, v108, &qword_100159960);
    swift_storeEnumTagMultiPayload(v65, v107, 0);
    v66 = sub_10001E0A8(&qword_100159958, &qword_100159960, (void (*)(void))sub_100032AE8);
    v67 = sub_100032C18();
    v68 = v109;
    v69 = v65;
    v70 = v61;
  }
  else
  {
    *(_QWORD *)v13 = v36;
    *((_QWORD *)v13 + 1) = 0x4010000000000000;
    v13[16] = 0;
    v71 = sub_100007D50(&qword_1001599E0);
    v72 = sub_100030ED4(v33, v29, v30, v31, v32, (uint64_t)&v13[*(int *)(v71 + 44)]);
    v73 = static Edge.Set.horizontal.getter(v72);
    v74 = EdgeInsets.init(_all:)(8.0);
    v76 = v75;
    v78 = v77;
    v80 = v79;
    v81 = v103;
    sub_100007E78((uint64_t)v13, v103, &qword_1001599D0);
    v82 = v81 + *(int *)(v100 + 36);
    *(_BYTE *)v82 = v73;
    *(double *)(v82 + 8) = v74;
    *(_QWORD *)(v82 + 16) = v76;
    *(_QWORD *)(v82 + 24) = v78;
    *(_QWORD *)(v82 + 32) = v80;
    *(_BYTE *)(v82 + 40) = 0;
    sub_100007F38((uint64_t)v13, &qword_1001599D0);
    v83 = sub_10002C5D4(v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
    v84 = sub_1000219E8();
    v85 = swift_release(v83);
    v86 = static Alignment.center.getter(v85);
    _FrameLayout.init(width:height:alignment:)(&v111, *(_QWORD *)&v84, 0, 0, 1, v86, v87);
    v88 = v102;
    sub_100007E78(v81, v102, &qword_1001599C0);
    v89 = v109;
    v90 = (_OWORD *)(v88 + *(int *)(v109 + 36));
    v91 = v112;
    *v90 = v111;
    v90[1] = v91;
    v90[2] = v113;
    sub_100007F38(v81, &qword_1001599C0);
    v63 = &qword_1001599B0;
    v64 = v104;
    sub_100018EB4(v88, v104, &qword_1001599B0);
    v92 = v108;
    sub_100007E78(v64, v108, &qword_1001599B0);
    swift_storeEnumTagMultiPayload(v92, v107, 1);
    v66 = sub_10001E0A8(&qword_100159958, &qword_100159960, (void (*)(void))sub_100032AE8);
    v67 = sub_100032C18();
    v69 = v92;
    v70 = v106;
    v68 = v89;
  }
  _ConditionalContent<>.init(storage:)(v69, v70, v68, v66, v67);
  return sub_100007F38(v64, v63);
}

uint64_t sub_1000308F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;

  v95 = a6;
  v110 = a2;
  v111 = a3;
  v112 = a4;
  v113 = a5;
  v11 = type metadata accessor for VenueEventView(0, (uint64_t)&v110);
  v88 = *(_QWORD *)(v11 - 8);
  v90 = *(_QWORD *)(v88 + 64);
  __chkstk_darwin(v11);
  v86 = (char *)&v77 - v12;
  v94 = sub_100007D50(&qword_100158648);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98 = (char *)&v77 - v15;
  v91 = sub_100007D50(&qword_1001599F0);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v97 = (char *)&v77 - v18;
  v19 = sub_10002C5D4(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v20 = a2;
  v96 = a2;
  v103 = a2;
  v104 = a3;
  v21 = a3;
  v22 = a4;
  v105 = a4;
  v106 = a5;
  KeyPath = swift_getKeyPath(&unk_100109ED8);
  v110 = v20;
  v111 = v21;
  v83 = v21;
  v112 = v22;
  v113 = a5;
  v24 = v22;
  v84 = v22;
  v85 = a5;
  v25 = type metadata accessor for VenueEventViewModel(255, (uint64_t)&v110);
  WitnessTable = swift_getWitnessTable(&unk_1001094D0, v25);
  ObservedObject.Wrapper.subscript.getter(&v110, KeyPath, v19, WitnessTable);
  swift_release(KeyPath);
  swift_release(v19);
  v27 = v110;
  v79 = v111;
  v80 = v112;
  v78 = v113;
  v82 = v11;
  v28 = sub_10002C5D4(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v99 = v96;
  v100 = v21;
  v101 = v24;
  v102 = a5;
  v29 = swift_getKeyPath(&unk_100109F10);
  ObservedObject.Wrapper.subscript.getter(&v119, v29, v28, WitnessTable);
  swift_release(v29);
  swift_release(v28);
  v30 = v119;
  v31 = v120;
  v81 = v119;
  LOBYTE(KeyPath) = v121;
  v32 = sub_10002C5D4(v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v33 = (uint64_t *)(v32 + *(_QWORD *)(*(_QWORD *)v32 + 208));
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  swift_release(v32);
  v36 = v27;
  v110 = v27;
  v37 = v79;
  v111 = v79;
  v112 = v80;
  v38 = v78;
  v113 = v78;
  v114 = v30;
  v115 = v31;
  v116 = KeyPath;
  v117 = v34;
  v118 = v35;
  v39 = *(_QWORD *)(a1 + 48);
  v40 = *(_BYTE *)(a1 + 56);
  v107 = *(_BYTE *)(a1 + 40);
  v108 = v39;
  v109 = v40;
  v41 = sub_100007D50(&qword_100159940);
  FocusState.projectedValue.getter(&v119, v41);
  v42 = v119;
  v43 = v120;
  v44 = v121;
  v45 = sub_100032CE4();
  View.focused(_:)(v42, v43, v44, &type metadata for SearchBar, v45);
  swift_bridgeObjectRelease(v35);
  swift_release(v31);
  swift_bridgeObjectRelease(v38);
  swift_release(v37);
  swift_release(v43);
  swift_release(v42);
  swift_release(v36);
  swift_release(v81);
  v46 = v82;
  v47 = sub_10002C5D4(v82, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v48 = v47 + *(_QWORD *)(*(_QWORD *)v47 + 200);
  v49 = *(_QWORD *)v48;
  v50 = *(_QWORD *)(v48 + 8);
  v51 = *(unsigned __int8 *)(v48 + 16);
  v52 = *(_QWORD *)(v48 + 24);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v52);
  swift_release(v47);
  v53 = v88;
  v54 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v86, a1, v46);
  v55 = *(unsigned __int8 *)(v53 + 80);
  v56 = v53;
  v57 = (v55 + 48) & ~v55;
  v58 = (char *)swift_allocObject(&unk_1001495A8, v57 + v90, v55 | 7);
  v59 = v83;
  *((_QWORD *)v58 + 2) = v96;
  *((_QWORD *)v58 + 3) = v59;
  v60 = v85;
  *((_QWORD *)v58 + 4) = v84;
  *((_QWORD *)v58 + 5) = v60;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(&v58[v57], v54, v46);
  v61 = v98;
  Button<>.init(_:action:)(v49, v50, v51, v52, sub_100032D2C, v58);
  v62 = v89;
  v63 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
  v64 = v87;
  v65 = v97;
  v66 = v91;
  v63(v87, v97, v91);
  v67 = v93;
  v68 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v69 = v92;
  v70 = v61;
  v71 = v94;
  v68(v92, v70, v94);
  v72 = v95;
  v63(v95, v64, v66);
  v73 = sub_100007D50(&qword_1001599F8);
  v68(&v72[*(int *)(v73 + 48)], v69, v71);
  v74 = *(void (**)(char *, uint64_t))(v67 + 8);
  v74(v98, v71);
  v75 = *(void (**)(char *, uint64_t))(v62 + 8);
  v75(v65, v66);
  v74(v69, v71);
  return ((uint64_t (*)(char *, uint64_t))v75)(v64, v66);
}

uint64_t sub_100030ED4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t (*v95)();
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)();
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t result;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t, uint64_t);
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)();
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD v172[11];
  uint64_t v173;
  _OWORD v174[11];
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  double v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  char v208;

  v170 = a5;
  v167 = a3;
  v168 = a4;
  v165 = a6;
  v166 = a2;
  v11 = type metadata accessor for DismissAction(0);
  v155 = *(_QWORD *)(v11 - 8);
  v156 = v11;
  __chkstk_darwin(v11);
  v154 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = v12;
  __chkstk_darwin(v13);
  v153 = (uint64_t)&v146 - v14;
  *(_QWORD *)&v188 = a2;
  *((_QWORD *)&v188 + 1) = a3;
  *(_QWORD *)&v189 = a4;
  *((_QWORD *)&v189 + 1) = a5;
  v15 = type metadata accessor for VenueEventView(0, (uint64_t)&v188);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v19 = (char *)&v146 - v18;
  v20 = sub_100007D50(&qword_100158648);
  v162 = *(_QWORD *)(v20 - 8);
  v163 = v20;
  __chkstk_darwin(v20);
  v159 = (char *)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100007D50(&qword_100159A00);
  __chkstk_darwin(v161);
  v23 = (char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100007D50(&qword_100159A08);
  __chkstk_darwin(v164);
  v169 = (uint64_t)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v160 = (uint64_t)&v146 - v26;
  __chkstk_darwin(v27);
  v171 = (uint64_t)&v146 - v28;
  v29 = sub_10002C5D4(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v33 = sub_100021D34(v29, v30, v31, v32);
  v35 = v34;
  swift_release(v29);
  *(_QWORD *)&v188 = v33;
  *((_QWORD *)&v188 + 1) = v35;
  v36 = a1;
  v149 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v149(v19, a1, v15);
  v37 = *(unsigned __int8 *)(v16 + 80);
  v38 = (v37 + 48) & ~v37;
  v147 = v37 | 7;
  v148 = v38 + v17;
  v39 = (char *)swift_allocObject(&unk_1001495D0, v38 + v17, v37 | 7);
  v40 = v167;
  *((_QWORD *)v39 + 2) = v166;
  *((_QWORD *)v39 + 3) = v40;
  v41 = v170;
  *((_QWORD *)v39 + 4) = v168;
  *((_QWORD *)v39 + 5) = v41;
  v150 = v38;
  v151 = v19;
  v146 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v146(&v39[v38], v19, v15);
  v42 = sub_10001DB0C();
  v43 = v159;
  v44 = Button<>.init<A>(_:action:)(&v188, sub_100032DB8, v39, &type metadata for String, v42);
  v45 = static Color.blue.getter(v44);
  KeyPath = swift_getKeyPath(&unk_100109F48);
  v48 = v162;
  v47 = v163;
  (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v23, v43, v163);
  v49 = (uint64_t *)&v23[*(int *)(v161 + 36)];
  *v49 = KeyPath;
  v49[1] = v45;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v47);
  v157 = v36;
  v158 = v15;
  v50 = sub_10002C5D4(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  LOBYTE(KeyPath) = sub_100021D08();
  swift_release(v50);
  v51 = 0.0;
  v52 = 1.0;
  if ((KeyPath & 1) != 0)
    v53 = 1.0;
  else
    v53 = 0.0;
  v54 = v160;
  sub_100007E78((uint64_t)v23, v160, &qword_100159A00);
  *(double *)(v54 + *(int *)(v164 + 36)) = v53;
  sub_100007F38((uint64_t)v23, &qword_100159A00);
  sub_100018EB4(v54, v171, &qword_100159A08);
  v55 = sub_10002C5D4(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v56 = sub_100021CA0();
  v58 = v57;
  swift_release(v55);
  *(_QWORD *)&v188 = v56;
  *((_QWORD *)&v188 + 1) = v58;
  v59 = Text.init<A>(_:)(&v188, &type metadata for String);
  v61 = v60;
  v63 = v62;
  v65 = v64 & 1;
  v66 = static Font.Weight.semibold.getter();
  v67 = Text.fontWeight(_:)(*(_QWORD *)&v66, 0, v59, v61, v65, v63);
  v69 = v68;
  v71 = v70;
  v73 = v72 & 1;
  sub_100007D90(v59, v61, v65);
  v74 = swift_bridgeObjectRelease(v63);
  v75 = static Font.subheadline.getter(v74);
  v76 = Text.font(_:)(v75, v67, v69, v73, v71);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  swift_release(v75);
  v83 = v80 & 1;
  sub_100007D90(v67, v69, v73);
  swift_bridgeObjectRelease(v71);
  v84 = v158;
  if (!*(_BYTE *)(*(_QWORD *)(v157 + 32) + 16))
    v52 = 0.0;
  v85 = v157;
  if ((sub_10002C510(v158) & 1) == 0)
    v51 = 22.0;
  v86 = swift_getKeyPath(&unk_100109F78);
  v200 = v76;
  v201 = v78;
  v202 = v83;
  v203 = v82;
  v204 = v52;
  v205 = v51;
  v206 = 0;
  v207 = v86;
  v208 = 1;
  v87 = static Alignment.center.getter(v86);
  sub_1000433D0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v188, 0.0, 1, 0.0, 1, v87, v88);
  v89 = v78;
  v90 = v85;
  sub_100007D90(v76, v89, v83);
  v91 = v86;
  v92 = v84;
  swift_release(v91);
  swift_bridgeObjectRelease(v82);
  v184 = v196;
  v185 = v197;
  v186 = v198;
  v187 = v199;
  v180 = v192;
  v181 = v193;
  v182 = v194;
  v183 = v195;
  v176 = v188;
  v177 = v189;
  v178 = v190;
  v179 = v191;
  v93 = sub_10002C510(v84);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  if ((v93 & 1) == 0)
  {
    v99 = v151;
    v149(v151, v90, v92);
    v96 = (_QWORD *)swift_allocObject(&unk_1001495F8, v148, v147);
    v100 = v167;
    v96[2] = v166;
    v96[3] = v100;
    v101 = v170;
    v96[4] = v168;
    v96[5] = v101;
    v102 = ((uint64_t (*)(char *, char *, uint64_t))v146)((char *)v96 + v150, v99, v92);
    v98 = static Font.title2.getter(v102);
    v97 = swift_getKeyPath(&unk_100109FA8);
    v95 = sub_100032DD8;
    v94 = 3;
  }
  v170 = v94;
  v103 = (_QWORD *)(v90 + *(int *)(v92 + 64));
  v104 = *v103;
  if (*v103)
  {
    swift_retain(*v103);
    v105 = sub_1000DED48();
    v107 = v106;
    swift_release(v104);
    v167 = v97;
    v168 = v98;
    v166 = v95;
    if (v107 && (swift_bridgeObjectRelease(v107), (v105 & 1) != 0))
    {
      v142 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
      swift_bridgeObjectRelease(0xE300000000000000);
      if ((v142 & 1) == 0)
      {
        v108 = (uint64_t)v96;
        v118 = 0;
        v117 = 0;
        v115 = 0;
        v163 = 0;
        v164 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      swift_bridgeObjectRelease(0xE500000000000000);
    }
    v108 = (uint64_t)v96;
    v109 = v153;
    sub_100018E80(v153);
    v111 = v154;
    v110 = v155;
    v112 = v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v154, v109, v156);
    v113 = *(unsigned __int8 *)(v110 + 80);
    v114 = (v113 + 16) & ~v113;
    v115 = swift_allocObject(&unk_100149620, v114 + v152, v113 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v110 + 32))(v115 + v114, v111, v112);
    v116 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 8))(v109, v112);
    v164 = static Font.title2.getter(v116);
    v163 = swift_getKeyPath(&unk_100109FA8);
    v117 = sub_100032FDC;
    v118 = 1;
LABEL_15:
    v119 = v169;
    sub_100007E78(v171, v169, &qword_100159A08);
    v120 = v165;
    sub_100007E78(v119, v165, &qword_100159A08);
    v121 = (int *)sub_100007D50(&qword_100159A10);
    v122 = v121[12];
    v123 = v185;
    v172[8] = v184;
    v172[9] = v185;
    v124 = v186;
    v172[10] = v186;
    v125 = v180;
    v126 = v181;
    v172[4] = v180;
    v172[5] = v181;
    v127 = v182;
    v128 = v183;
    v172[6] = v182;
    v172[7] = v183;
    v129 = v176;
    v130 = v177;
    v172[0] = v176;
    v172[1] = v177;
    v131 = v178;
    v132 = v179;
    v172[2] = v178;
    v172[3] = v179;
    v133 = v120 + v122;
    *(_OWORD *)(v133 + 128) = v184;
    *(_OWORD *)(v133 + 144) = v123;
    *(_OWORD *)(v133 + 160) = v124;
    *(_OWORD *)(v133 + 64) = v125;
    *(_OWORD *)(v133 + 80) = v126;
    *(_OWORD *)(v133 + 96) = v127;
    *(_OWORD *)(v133 + 112) = v128;
    *(_OWORD *)v133 = v129;
    *(_OWORD *)(v133 + 16) = v130;
    v173 = v187;
    *(_QWORD *)(v133 + 176) = v187;
    *(_OWORD *)(v133 + 32) = v131;
    *(_OWORD *)(v133 + 48) = v132;
    v134 = (_QWORD *)(v120 + v121[16]);
    v136 = (uint64_t)v166;
    v135 = v167;
    *v134 = v170;
    v134[1] = v136;
    v134[2] = v108;
    v134[3] = v135;
    v137 = v168;
    v134[4] = v168;
    v138 = (uint64_t *)(v120 + v121[20]);
    *v138 = v118;
    v138[1] = (uint64_t)v117;
    v139 = v163;
    v140 = v164;
    v138[2] = v115;
    v138[3] = v139;
    v138[4] = v140;
    sub_100032E64((uint64_t)v172);
    sub_100032EB4(v170, v136, v108, v135, v137);
    sub_100032EB4(v118, (uint64_t)v117, v115, v139, v140);
    sub_100007F38(v171, &qword_100159A08);
    sub_100032EF0(v118, (uint64_t)v117, v115, v139, v140);
    sub_100032EF0(v170, v136, v108, v135, v137);
    v174[8] = v184;
    v174[9] = v185;
    v174[10] = v186;
    v175 = v187;
    v174[4] = v180;
    v174[5] = v181;
    v174[6] = v182;
    v174[7] = v183;
    v174[0] = v176;
    v174[1] = v177;
    v174[2] = v178;
    v174[3] = v179;
    sub_100032F2C((uint64_t)v174);
    return sub_100007F38(v169, &qword_100159A08);
  }
  v143 = v103[1];
  v144 = type metadata accessor for RemoteViewConfiguration();
  v145 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.error()(0, v143, v144, v145);
  __break(1u);
  return result;
}

uint64_t sub_1000318B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD);
  BOOL *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v20);
  v7 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  KeyPath = swift_getKeyPath(&unk_100109E68);
  v9 = swift_getKeyPath(&unk_100109FD8);
  v10 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v20, v7, KeyPath, v9);
  *v11 = !*v11;
  v10(v20, 0);
  swift_release(v7);
  swift_release(KeyPath);
  swift_release(v9);
  v12 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v13 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v14 = *v13;
  if (*v13)
  {
    v15 = v12;
    swift_retain(*v13);
    sub_100022240(0, 11, 0, 3u, v14);
    swift_release(v15);
    return swift_release(v14);
  }
  else
  {
    v17 = v13[1];
    v18 = type metadata accessor for RemoteViewConfiguration();
    v19 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_100031A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v16);
  v7 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_10002214C();
  swift_release(v7);
  v8 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v9 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v10 = *v9;
  if (*v9)
  {
    v11 = v8;
    swift_retain(*v9);
    sub_100022240(0, 0, 0, 3u, v10);
    swift_release(v11);
    return swift_release(v10);
  }
  else
  {
    v13 = v9[1];
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_100031B54(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v6 = *a1;
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  v7 = type metadata accessor for VenueEventView(0, (uint64_t)v10);
  v8 = sub_10002C5D4(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  sub_100021A84(v6);
  return swift_release(v8);
}

uint64_t sub_100031BB8()
{
  return sub_100021694();
}

uint64_t sub_100031BD8(uint64_t a1)
{
  return sub_100022968(a1);
}

uint64_t sub_100031BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a2;
  v27 = a4;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(a1);
  v14 = type metadata accessor for EventView(0, v11, v13, v12);
  v28 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v26 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3, v18);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = (char *)swift_allocObject(&unk_100149558, v22 + v10, v21 | 7);
  *((_QWORD *)v23 + 2) = v26;
  *((_QWORD *)v23 + 3) = a3;
  *((_QWORD *)v23 + 4) = v27;
  *((_QWORD *)v23 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_1000447C8((uint64_t)sub_100032994, (uint64_t)v23, (uint64_t)sub_100044A64, 0, a3, a5, (uint64_t)v16);
  swift_getWitnessTable(&unk_10010A868, v14);
  sub_10005135C((uint64_t)v16, v14, (uint64_t)v20);
  v24 = *(void (**)(char *, uint64_t))(v28 + 8);
  v24(v16, v14);
  sub_1000424BC((uint64_t)v20, v14, v29);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v14);
}

uint64_t sub_100031DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EventViewModel(0, v8, v10, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return sub_100072A98((uint64_t)v7);
}

uint64_t sub_100031E4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100021884();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100031E78(char *a1)
{
  return sub_100021934(*a1);
}

uint64_t sub_100031E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v10[0] = a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  v7 = type metadata accessor for VenueEventView(0, (uint64_t)v10);
  v8 = sub_10002C5D4(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  a6();
  return swift_release(v8);
}

uint64_t sub_100031EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v27 = a2;
  v28 = a4;
  v30 = a6;
  v31[0] = a2;
  v31[1] = a3;
  v31[2] = a4;
  v31[3] = a5;
  v9 = type metadata accessor for VenueEventView(0, (uint64_t)v31);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = (char *)&v27 - v12;
  v15 = type metadata accessor for FilterView(0, a3, a5, v14);
  v29 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v27 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v19);
  v22 = *(unsigned __int8 *)(v10 + 80);
  v23 = (v22 + 48) & ~v22;
  v24 = (char *)swift_allocObject(&unk_100149530, v23 + v11, v22 | 7);
  *((_QWORD *)v24 + 2) = v27;
  *((_QWORD *)v24 + 3) = a3;
  *((_QWORD *)v24 + 4) = v28;
  *((_QWORD *)v24 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v24[v23], v13, v9);
  sub_10009E598((uint64_t)sub_1000328AC, (uint64_t)v24, a3, a5, (uint64_t)v17);
  swift_getWitnessTable(&unk_10010F1B8, v15);
  sub_10005135C((uint64_t)v17, v15, (uint64_t)v21);
  v25 = *(void (**)(char *, uint64_t))(v29 + 8);
  v25(v17, v15);
  sub_1000424BC((uint64_t)v21, v15, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v15);
}

Swift::String *sub_1000320C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t WitnessTable;
  Swift::String *v20;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = type metadata accessor for FilterViewModel.FilterConfiguration(255, a3, a5, a4);
  v10 = type metadata accessor for Binding(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v22 - v12);
  type metadata accessor for FilterViewModel(0, a3, a5, v14);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v15 = type metadata accessor for VenueEventView(0, (uint64_t)&v23);
  v16 = sub_10002C5D4(v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
  v22[0] = a2;
  v22[1] = a3;
  v22[2] = a4;
  v22[3] = a5;
  KeyPath = swift_getKeyPath(&unk_100109EA0);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v18 = type metadata accessor for VenueEventViewModel(255, (uint64_t)&v23);
  WitnessTable = swift_getWitnessTable(&unk_1001094D0, v18);
  ObservedObject.Wrapper.subscript.getter(v13, KeyPath, v16, WitnessTable);
  swift_release(v16);
  swift_release(KeyPath);
  v20 = sub_1000D9BFC((uint64_t)v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  return v20;
}

uint64_t sub_10003221C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v16);
  v7 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = (_QWORD *)(a1 + *(int *)(v6 + 64));
  v9 = *v8;
  if (*v8)
  {
    v10 = v7;
    v11 = swift_retain(*v8);
    sub_1000224EC(v11);
    swift_release(v10);
    return swift_release(v9);
  }
  else
  {
    v13 = v8[1];
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000322E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v15[3] = a5;
  v6 = type metadata accessor for VenueEventView(0, (uint64_t)v15);
  v7 = sub_10002C5D4(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
  v8 = (uint64_t *)(a1 + *(int *)(v6 + 64));
  v9 = *v8;
  if (*v8)
  {
    v10 = v7;
    swift_retain(*v8);
    sub_100022240(0, 2, 0, 3u, v9);
    swift_release(v10);
    return swift_release(v9);
  }
  else
  {
    v12 = v8[1];
    v13 = type metadata accessor for RemoteViewConfiguration();
    v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000323C4()
{
  return sub_10001E0A8(&qword_1001598B0, &qword_1001598B8, (void (*)(void))sub_1000323E8);
}

unint64_t sub_1000323E8()
{
  unint64_t result;

  result = qword_1001598C0;
  if (!qword_1001598C0)
  {
    result = swift_getWitnessTable(&unk_100109918, &type metadata for VenueEventListHeader);
    atomic_store(result, (unint64_t *)&qword_1001598C0);
  }
  return result;
}

unint64_t sub_10003242C()
{
  unint64_t result;

  result = qword_1001598D0;
  if (!qword_1001598D0)
  {
    result = swift_getWitnessTable(&unk_10010A6B8, &type metadata for EmptyEventsList);
    atomic_store(result, (unint64_t *)&qword_1001598D0);
  }
  return result;
}

unint64_t sub_100032470()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001598D8;
  if (!qword_1001598D8)
  {
    v1 = sub_100007D00(&qword_1001598A0);
    v2[0] = sub_100007D00(&qword_1001598E0);
    v2[1] = sub_10003251C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_10000F4E0((unint64_t *)&qword_1001588B0, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001598D8);
  }
  return result;
}

unint64_t sub_10003251C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001598E8;
  if (!qword_1001598E8)
  {
    v1 = sub_100007D00(&qword_1001598E0);
    sub_100007428(&qword_1001598F0, type metadata accessor for EventRow, (uint64_t)&unk_10010F90C);
    sub_10000F4E0(&qword_100158D90, &qword_100158D98, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001598E8);
  }
  return result;
}

uint64_t sub_1000325B8()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002D93C);
}

unint64_t sub_1000325C4()
{
  unint64_t result;

  result = qword_100159930;
  if (!qword_100159930)
  {
    result = swift_getWitnessTable(&unk_10010A03C, &type metadata for NavigationBarWidthPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100159930);
  }
  return result;
}

uint64_t sub_10003260C(double *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_100031B54(a1, (uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_100032684()
{
  return sub_100021694();
}

uint64_t sub_1000326A4(uint64_t a1)
{
  return sub_100022968(a1);
}

uint64_t sub_1000326C4()
{
  return 32;
}

__n128 sub_1000326D0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1000326DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000326EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100031BF8(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1000326F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100021884();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100032724(char *a1)
{
  return sub_100021934(*a1);
}

uint64_t sub_100032748()
{
  return 32;
}

__n128 sub_100032754(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100032764()
{
  return sub_100032D38((void (*)(void))sub_100022138);
}

uint64_t sub_100032774@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_100031EF4((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_1000327F0()
{
  return sub_100032D38((void (*)(void))sub_100021F24);
}

uint64_t sub_100032800(uint64_t a1, char *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *(_OWORD *)(v2 + 32);
  v12 = *(_OWORD *)(v2 + 16);
  v13 = v4;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)&v12) - 8) + 80);
  v6 = v2 + ((v5 + 48) & ~v5);
  v7 = *a2;
  v8 = *(_BYTE *)(v6 + 40);
  v9 = *(_QWORD *)(v6 + 48);
  LOBYTE(v6) = *(_BYTE *)(v6 + 56);
  LOBYTE(v12) = v8;
  *((_QWORD *)&v12 + 1) = v9;
  LOBYTE(v13) = v6;
  v14 = v7;
  v10 = sub_100007D50(&qword_100159940);
  return FocusState.wrappedValue.setter(&v14, v10);
}

uint64_t sub_10003288C()
{
  return sub_100032DE4((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10003221C);
}

uint64_t sub_10003289C()
{
  return sub_100032DE4((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000322E4);
}

Swift::String *sub_1000328AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v7[0] = v0[2];
  v1 = v7[0];
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v7) - 8) + 80);
  return sub_1000320C0((uint64_t)v0 + ((v5 + 48) & ~v5), v1, v2, v3, v4);
}

uint64_t sub_100032924()
{
  return 32;
}

__n128 sub_100032930(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_10003293C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100032994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_100031DB8(v0 + ((v2 + 48) & ~v2), *(_QWORD *)(v0 + 16), v1);
}

uint64_t sub_1000329B4()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002E238);
}

uint64_t sub_1000329C4(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_10002FF28((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_100032A44()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030044);
}

uint64_t sub_100032A50()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100030194);
}

unint64_t sub_100032A5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159950;
  if (!qword_100159950)
  {
    v1 = sub_100007D00(&qword_100159948);
    sub_10001E0A8(&qword_100159958, &qword_100159960, (void (*)(void))sub_100032AE8);
    sub_100032C18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159950);
  }
  return result;
}

uint64_t sub_100032AE8()
{
  return sub_10001E0A8(&qword_100159968, &qword_100159970, (void (*)(void))sub_100032B0C);
}

unint64_t sub_100032B0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159978;
  if (!qword_100159978)
  {
    v1 = sub_100007D00(&qword_100159980);
    sub_100032B98(&qword_100159988, &qword_100159990, &qword_100159998, &qword_1001599A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159978);
  }
  return result;
}

uint64_t sub_100032B98(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007D00(a2);
    sub_10000F4E0(a3, a4, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100032C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001599A8;
  if (!qword_1001599A8)
  {
    v1 = sub_100007D00(&qword_1001599B0);
    sub_100032B98(&qword_1001599B8, &qword_1001599C0, &qword_1001599C8, &qword_1001599D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001599A8);
  }
  return result;
}

uint64_t sub_100032CAC()
{
  return 32;
}

__n128 sub_100032CB8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100032CCC()
{
  return 32;
}

__n128 sub_100032CD8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_100032CE4()
{
  unint64_t result;

  result = qword_10015CDF0;
  if (!qword_10015CDF0)
  {
    result = swift_getWitnessTable(&unk_10010E7EC, &type metadata for SearchBar);
    atomic_store(result, (unint64_t *)&qword_10015CDF0);
  }
  return result;
}

uint64_t sub_100032D2C()
{
  return sub_100032D38(sub_100022174);
}

uint64_t sub_100032D38(void (*a1)(void))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return sub_100031E9C((uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6, a1);
}

uint64_t sub_100032DB8()
{
  return sub_100032DE4((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000318B8);
}

uint64_t sub_100032DD8()
{
  return sub_100032DE4((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100031A54);
}

uint64_t sub_100032DE4(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];

  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v9[0] = *((_QWORD *)v1 + 2);
  v2 = v9[0];
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8) + 80);
  return a1(&v1[(v6 + 48) & ~v6], v2, v3, v4, v5);
}

uint64_t sub_100032E64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100032EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_retain(a5);
    swift_retain(a3);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_100032EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_release(a3);
    swift_release(a4);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_100032F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 56);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100032F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100032FDC()
{
  type metadata accessor for DismissAction(0);
  DismissAction.callAsFunction()();
}

uint64_t sub_100033014()
{
  uint64_t v0;

  return sub_10002FF90(*(_QWORD *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t sub_100033038()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002E6F0);
}

uint64_t sub_100033044()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EA70);
}

double sub_100033050@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10002FD24(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100033060()
{
  return sub_10003306C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002EDE8);
}

uint64_t sub_10003306C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100033084()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];

  v1 = *(_OWORD *)(v0 + 32);
  v11[0] = *(_OWORD *)(v0 + 16);
  v11[1] = v1;
  v2 = type metadata accessor for VenueEventView(0, (uint64_t)v11);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  sub_1000189BC(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 48));
  v7 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v8 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v0 + v5 + *(int *)(v2 + 64)));
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

uint64_t sub_10003317C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v11) - 8) + 80);
  return sub_10002F374(a1, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8, a2);
}

uint64_t sub_100033204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 40);
  v17 = *(_QWORD *)(v0 + 16);
  v18 = *(_OWORD *)(v0 + 24);
  v15 = v18;
  v19 = v1;
  v2 = type metadata accessor for VenueEventView(0, (uint64_t)&v17);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v16 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(v15 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v5;
  sub_1000189BC(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 32));
  swift_release(*(_QWORD *)(v0 + v5 + 48));
  v10 = (_QWORD *)(v0 + v5 + *(int *)(v2 + 60));
  v11 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (v5 + v16 + v7) & ~v7;
  swift_release(*(_QWORD *)(v9 + *(int *)(v2 + 64)));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v15);
  return swift_deallocObject(v0, v13 + v8, v4 | v7 | 7);
}

uint64_t sub_100033354()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v9[0] = v0[2];
  v1 = v9[0];
  v9[1] = v2;
  v9[2] = v3;
  v9[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for VenueEventView(0, (uint64_t)v9) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_10002FB7C((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + *(_QWORD *)(v5 + 64) + v7) & ~v7), v1, v2, v3, v4);
}

ValueMetadata *type metadata accessor for NavigationBarWidthPreferenceKey()
{
  return &type metadata for NavigationBarWidthPreferenceKey;
}

uint64_t sub_1000333F0(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *AssociatedTypeWitness;
  uint64_t v64;
  void *WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v60 = v3;
  v59 = type metadata accessor for NavigationPath(255, a2);
  v4 = sub_100007D00(&qword_100159890);
  sub_100007D00(&qword_100159898);
  v5 = type metadata accessor for Array(255, v2);
  v61 = *(_QWORD *)(v3 + 16);
  v62 = v5;
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness(255, v61, v2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v64 = sub_100007D00(&qword_1001598A0);
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v61, v2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v6 = type metadata accessor for ForEach(255, &v62);
  v7 = type metadata accessor for _ConditionalContent(255);
  v8 = type metadata accessor for Group(255, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  v10 = type metadata accessor for Section(255, v4, v9, &type metadata for EmptyView);
  v11 = sub_10001E0A8(&qword_1001598A8, &qword_100159890, (void (*)(void))sub_1000323C4);
  v12 = sub_10001E0A8(&qword_1001598C8, &qword_100159898, (void (*)(void))sub_10003242C);
  v80 = sub_100032470();
  v13 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
  v78 = v12;
  v79 = v13;
  v77 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v7);
  v75 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v8);
  v76 = &protocol witness table for _PaddingLayout;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v72 = v11;
  v73 = v14;
  v74 = &protocol witness table for EmptyView;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v10);
  v16 = type metadata accessor for LazyVGrid(255, v10, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for LazyVGrid<A>, v16);
  v19 = type metadata accessor for ObservableScrollView(255, v16, v17, v18);
  v20 = swift_getWitnessTable(&unk_10010F020, v19);
  v62 = v19;
  AssociatedTypeWitness = (_QWORD *)v20;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 0);
  v62 = v19;
  AssociatedTypeWitness = (_QWORD *)v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
  v62 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (_QWORD *)OpaqueTypeConformance2;
  v23 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v24 = sub_100007D00(&qword_1001598F8);
  v62 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = (_QWORD *)OpaqueTypeConformance2;
  v25 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v26 = sub_100007D00(&qword_100159900);
  v27 = sub_10000F4E0(&qword_100159908, &qword_100159900, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v62 = v26;
  AssociatedTypeWitness = (_QWORD *)v27;
  v28 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v62 = v23;
  AssociatedTypeWitness = (_QWORD *)v24;
  v64 = v25;
  WitnessTable = (void *)v28;
  v29 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v62 = v23;
  AssociatedTypeWitness = (_QWORD *)v24;
  v64 = v25;
  WitnessTable = (void *)v28;
  v30 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v31 = type metadata accessor for NavigationStack(255, v59, v29, v30);
  v32 = sub_100007D00(&qword_100159910);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = sub_100007D00(&qword_100159918);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v37 = type metadata accessor for EventView(255, v2, v60, v36);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v31);
  v39 = sub_10000F4E0(&qword_100159920, &qword_100159910, (uint64_t)&unk_100108C38);
  v70 = v38;
  v71 = v39;
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  v41 = sub_10000F4E0(&qword_100159928, &qword_100159918, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v68 = v40;
  v69 = v41;
  v42 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v43 = swift_getWitnessTable(&unk_10010A868, v37);
  v62 = v35;
  AssociatedTypeWitness = (_QWORD *)v2;
  v64 = v37;
  WitnessTable = (void *)v42;
  AssociatedConformanceWitness = v61;
  v67 = v43;
  v44 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 0);
  v46 = type metadata accessor for FilterView(255, v2, v60, v45);
  v62 = v35;
  AssociatedTypeWitness = (_QWORD *)v2;
  v64 = v37;
  WitnessTable = (void *)v42;
  AssociatedConformanceWitness = v61;
  v67 = v43;
  v47 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
  v48 = swift_getWitnessTable(&unk_10010F1B8, v46);
  v62 = v44;
  AssociatedTypeWitness = (_QWORD *)v46;
  v64 = v47;
  WitnessTable = (void *)v48;
  v49 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v62 = v44;
  AssociatedTypeWitness = (_QWORD *)v46;
  v64 = v47;
  WitnessTable = (void *)v48;
  v50 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v62 = v49;
  AssociatedTypeWitness = &type metadata for String;
  v64 = v50;
  WitnessTable = &protocol witness table for String;
  v51 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v62 = v49;
  AssociatedTypeWitness = &type metadata for String;
  v64 = v50;
  WitnessTable = &protocol witness table for String;
  v52 = swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v62 = v51;
  AssociatedTypeWitness = &type metadata for Bool;
  v64 = v52;
  WitnessTable = &protocol witness table for Bool;
  v53 = swift_getOpaqueTypeMetadata2(255, &v62, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v54 = type metadata accessor for ModifiedContent(255, v53, &type metadata for _AppearanceActionModifier);
  v55 = type metadata accessor for ModifiedContent(255, v54, &type metadata for _AppearanceActionModifier);
  v56 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v57 = type metadata accessor for ModifiedContent(255, v55, v56);
  v62 = v51;
  AssociatedTypeWitness = &type metadata for Bool;
  v64 = v52;
  WitnessTable = &protocol witness table for Bool;
  swift_getOpaqueTypeConformance2(&v62, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v57);
}

unint64_t sub_100033AA4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000325C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100033AC8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD v16[5];

  v3 = v1[8];
  v4 = v1[9];
  sub_10001BF94(v1 + 5, v3);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 72);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v3, &unk_100116E98, &unk_100116EC0);
  v7 = type metadata accessor for Optional(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16[-1] - v9;
  v5(v3, v4);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v12 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    v16[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &unk_100116E98, &unk_100116EB8);
    v16[4] = AssociatedConformanceWitness;
    sub_10002BA68(v16);
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(100, 100, AssociatedTypeWitness, AssociatedConformanceWitness);
    return sub_1000228FC(v16);
  }
}

BOOL sub_100033C54()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  char v27;
  _QWORD v28[3];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = v0 + 5;
  v4 = v0[8];
  v3 = v0[9];
  sub_10001BF94(v2, v4);
  v5 = dispatch thunk of MusicItem.id.getter(v4, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
  v7 = v6;
  KeyPath = swift_getKeyPath(&unk_10010A118);
  v28[0] = v1;
  v9 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v28, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v1[4];
  v11 = *(_QWORD *)(v10 + 200);
  v12 = swift_getKeyPath(&unk_10010A140);
  v28[0] = v11;
  v13 = sub_100007428((unint64_t *)&qword_1001597D8, type metadata accessor for SetlistSongPlaybackController, (uint64_t)&unk_100110770);
  swift_retain(v10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v28, v12, v13);
  swift_release(v12);
  swift_beginAccess(v11 + 56, v28, 0, 0);
  sub_1000345D4(v11 + 56, (uint64_t)v29);
  swift_release(v10);
  v14 = v30;
  if (!v30)
  {
    sub_10003461C((uint64_t)v29);
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  v15 = v31;
  sub_10001BF94(v29, v30);
  v16 = dispatch thunk of MusicItem.id.getter(v14, *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8));
  v18 = v17;
  sub_1000228FC(v29);
  if (v5 == v16 && v7 == v18)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v16, v18, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v18);
    result = 0;
    if ((v20 & 1) == 0)
      return result;
  }
  v21 = swift_getKeyPath(&unk_10010A118);
  v29[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v29, v21, v9);
  swift_release(v21);
  v22 = v1[4];
  v23 = *(_QWORD **)(v22 + 200);
  v24 = v23[5];
  v25 = v23[6];
  sub_10001BF94(v23 + 2, v24);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 16);
  swift_retain(v22);
  v27 = v26(v24, v25);
  swift_release(v22);
  return v27 != 0;
}

BOOL sub_100033ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 (*v8)(uint64_t, uint64_t);
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 (*v15)(uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double (*v22)(uint64_t, uint64_t);
  double v23;
  uint64_t v25;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_10010A118);
  v25 = v0;
  v3 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v4 + 200);
  v6 = v5[5];
  v7 = v5[6];
  sub_10001BF94(v5 + 2, v6);
  v8 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v7 + 16);
  swift_retain(v4);
  v9 = v8(v6, v7);
  swift_release(v4);
  if (v9 != 2)
  {
    v10 = swift_getKeyPath(&unk_10010A118);
    v25 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v10, v3);
    swift_release(v10);
    v11 = *(_QWORD *)(v1 + 32);
    v12 = *(_QWORD **)(v11 + 200);
    v13 = v12[5];
    v14 = v12[6];
    sub_10001BF94(v12 + 2, v13);
    v15 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v14 + 16);
    swift_retain(v11);
    v16 = v15(v13, v14);
    swift_release(v11);
    if (v16 != 3)
      return 0;
  }
  v17 = swift_getKeyPath(&unk_10010A118);
  v25 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v17, v3);
  swift_release(v17);
  v18 = *(_QWORD *)(v1 + 32);
  v19 = *(_QWORD **)(v18 + 200);
  v20 = v19[5];
  v21 = v19[6];
  sub_10001BF94(v19 + 2, v20);
  v22 = *(double (**)(uint64_t, uint64_t))(v21 + 8);
  swift_retain(v18);
  v23 = v22(v20, v21);
  swift_release(v18);
  return v23 > 0.0;
}

BOOL sub_1000340B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 (*v8)(uint64_t, uint64_t);
  int v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  char v17;
  uint64_t v18;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_10010A118);
  v18 = v0;
  v3 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v4 + 200);
  v6 = v5[5];
  v7 = v5[6];
  sub_10001BF94(v5 + 2, v6);
  v8 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v7 + 16);
  swift_retain(v4);
  v9 = v8(v6, v7);
  swift_release(v4);
  if (v9 == 3)
    return 1;
  v11 = swift_getKeyPath(&unk_10010A118);
  v18 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, v11, v3);
  swift_release(v11);
  v12 = *(_QWORD *)(v1 + 32);
  v13 = *(_QWORD **)(v12 + 200);
  v14 = v13[5];
  v15 = v13[6];
  sub_10001BF94(v13 + 2, v14);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
  swift_retain(v12);
  v17 = v16(v14, v15);
  swift_release(v12);
  return v17 == 0;
}

uint64_t sub_100034214()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010A118);
  v4 = v0;
  v2 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10003429C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A118);
  v8 = v3;
  v5 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_10003432C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A118);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007428(&qword_100158EE8, type metadata accessor for SetlistSongRowViewModel, (uint64_t)&unk_10010A0F8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003465C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1000343E4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  sub_1000228FC(v0 + 5);
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp23SetlistSongRowViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10003444C()
{
  return type metadata accessor for SetlistSongRowViewModel(0);
}

uint64_t type metadata accessor for SetlistSongRowViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100159A70;
  if (!qword_100159A70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SetlistSongRowViewModel);
  return result;
}

uint64_t sub_100034490(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10010A0C8;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_10010A0E0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_100034520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  _QWORD *v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a6;
  v18 = a7;
  v13 = sub_10002BA68(&v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v13, a3, a6);
  v14 = (_QWORD *)swift_allocObject(a5, *(unsigned int *)(a5 + 48), *(unsigned __int16 *)(a5 + 52));
  ObservationRegistrar.init()(v14);
  v14[2] = a1;
  v14[3] = a2;
  sub_10002BAA4(&v16, (uint64_t)(v14 + 5));
  v14[4] = a4;
  return v14;
}

uint64_t sub_1000345D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_1001597E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003461C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_1001597E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003465C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t *sub_100034694(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    a1[1] = v8;
    a1[2] = v9;
    a1[3] = a2[3];
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    swift_retain(v5);
    swift_retain(v8);
    swift_retain(v9);
    v13 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = *(int *)(a3 + 28);
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for UserInterfaceSizeClass(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
      {
        v23 = sub_100007D50(&qword_100158970);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v22 + 16))(v18, v19, v21);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      }
      v25 = v18;
      v26 = v20;
      v27 = 1;
    }
    else
    {
      v24 = *v19;
      *v18 = *v19;
      swift_retain(v24);
      v25 = v18;
      v26 = v20;
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
  }
  return a1;
}

uint64_t sub_10003486C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v8 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for UserInterfaceSizeClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  return result;
}

uint64_t *sub_10003497C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v9 = a2[2];
  v8 = a2[3];
  a1[2] = v9;
  a1[3] = v8;
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v9);
  v13 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v17 = *(int *)(a3 + 28);
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for UserInterfaceSizeClass(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
    {
      v23 = sub_100007D50(&qword_100158970);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v24 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v22 + 16))(v18, v19, v21);
      v24 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    }
  }
  else
  {
    v25 = *v19;
    *v18 = *v19;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v24);
  return a1;
}

uint64_t *sub_100034B28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a1[2];
  v11 = a2[2];
  a1[2] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100007F38((uint64_t)a1 + v12, &qword_1001582E8);
    v15 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = *(int *)(a3 + 28);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100007F38((uint64_t)a1 + v19, &qword_100158968);
    v22 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for UserInterfaceSizeClass(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23))
      {
        v25 = sub_100007D50(&qword_100158970);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v26 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v24 + 16))(v20, v21, v23);
        v26 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
      }
    }
    else
    {
      v27 = *v21;
      *v20 = *v21;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v26);
  }
  return a1;
}

_OWORD *sub_100034D20(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
      v18 = sub_100007D50(&qword_100158970);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v13, v14, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100034EA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  a1[3] = a2[3];
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_100007F38((uint64_t)a1 + v9, &qword_1001582E8);
    v12 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v14 = *(int *)(a3 + 28);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    sub_100007F38((uint64_t)a1 + v14, &qword_100158968);
    v17 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for UserInterfaceSizeClass(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_100007D50(&qword_100158970);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v16, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100035088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035094);
}

uint64_t sub_100035094(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158B78);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158978);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10003513C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035148);
}

char *sub_100035148(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158B78);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158978);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SetlistView(uint64_t a1)
{
  return sub_100025D84(a1, qword_100159B78, (uint64_t)&nominal type descriptor for SetlistView);
}

void sub_100035200(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010A190;
  v6[1] = &unk_10010A1A8;
  sub_10003C940(319, (unint64_t *)&qword_100158BE8, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000175DC(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000352A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116AD4, 1);
}

uint64_t sub_1000352B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for GridItem(0);
      v5 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      *((_QWORD *)v5 + 2) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v8(&v5[v7], a1, v4);
      v9 = a2 - 1;
      if (a2 != 1)
      {
        v10 = *(_QWORD *)(v6 + 72);
        v11 = &v5[v10 + v7];
        do
        {
          v8(v11, a1, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v5 = (char *)&_swiftEmptyArrayStorage;
    }
    v12 = type metadata accessor for GridItem(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1000353E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A270);
  v8 = v3;
  v5 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 184);
  *a2 = *(_QWORD *)(v3 + 176);
  a2[1] = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_100035478(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A270);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10003BA64, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100035534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_100158A18);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)&v22 - v14;
  type metadata accessor for SetlistView(0);
  sub_100018474((uint64_t)v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v12, enum case for UserInterfaceSizeClass.regular(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100007E78((uint64_t)v15, (uint64_t)v6, &qword_100158970);
  sub_100007E78((uint64_t)v12, v16, &qword_100158970);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) == 1)
  {
    sub_100007F38((uint64_t)v12, &qword_100158970);
    sub_100007F38((uint64_t)v15, &qword_100158970);
    if (v17(v16, 1, v0) == 1)
    {
      sub_100007F38((uint64_t)v6, &qword_100158970);
      return 2;
    }
    goto LABEL_6;
  }
  sub_100007E78((uint64_t)v6, (uint64_t)v9, &qword_100158970);
  if (v17(v16, 1, v0) == 1)
  {
    sub_100007F38((uint64_t)v12, &qword_100158970);
    sub_100007F38((uint64_t)v15, &qword_100158970);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
LABEL_6:
    sub_100007F38((uint64_t)v6, &qword_100158A18);
    return 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
  v18 = sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v3, v0, v18);
  v20 = *(void (**)(char *, uint64_t))(v1 + 8);
  v20(v3, v0);
  sub_100007F38((uint64_t)v12, &qword_100158970);
  sub_100007F38((uint64_t)v15, &qword_100158970);
  v20(v9, v0);
  sub_100007F38((uint64_t)v6, &qword_100158970);
  if ((v19 & 1) != 0)
    return 2;
  return 1;
}

uint64_t sub_100035848@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for TaskPriority(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SetlistView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_100007D50(&qword_100159BB8);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.leading.getter(v14);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v15 = sub_100007D50(&qword_100159BC0);
  sub_100035A20(v2, &v13[*(int *)(v15 + 44)]);
  sub_10001BFB8((uint64_t)v2, (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_100149768, v17 + v10, v16 | 7);
  v19 = sub_10003C9D4((uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for SetlistView);
  static TaskPriority.userInitiated.getter(v19);
  v20 = (char *)(a1 + *(int *)(sub_100007D50(&qword_100159BD8) + 36));
  v21 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v20[*(int *)(v21 + 20)], v7, v4);
  *(_QWORD *)v20 = &unk_100159BD0;
  *((_QWORD *)v20 + 1) = v18;
  sub_100007E78((uint64_t)v13, a1, &qword_100159BB8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100007F38((uint64_t)v13, &qword_100159BB8);
}

uint64_t sub_100035A20@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t OpaqueTypeConformance2;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t (*v154)(char *, uint64_t);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  double v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  double v218;
  double v219;
  double v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int8 v251;
  unsigned __int8 v252;
  unsigned __int8 v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  int v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  char *v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void (*v273)(char *, uint64_t);
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  int v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t KeyPath;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  _QWORD v335[4];
  _DWORD v336[2];
  _DWORD v337[2];
  _DWORD v338[2];
  _DWORD v339[2];
  _DWORD v340[2];
  _DWORD v341[2];
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  char v352;
  __int128 v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  _BYTE v358[7];
  uint64_t v359;
  char v360;
  _BYTE v361[7];
  char v362;
  _BYTE v363[7];
  double v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char v368;
  _BYTE v369[7];
  char v370;
  _BYTE v371[7];
  double v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  char v376;
  _QWORD v377[3];
  unsigned __int8 v378;
  _BYTE v379[7];
  _BYTE v380[7];
  unsigned __int8 v381;
  _BYTE v382[7];
  _BYTE v383[7];
  _BYTE v384[7];
  unsigned __int8 v385;
  unsigned __int8 v386;

  v320 = a2;
  v3 = sub_100007D50(&qword_100159BE8);
  __chkstk_darwin(v3);
  v281 = (uint64_t *)((char *)&v275 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v280 = sub_100007D50(&qword_100159BF0);
  __chkstk_darwin(v280);
  v283 = (uint64_t)&v275 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v289 = sub_100007D50(&qword_100159BF8);
  __chkstk_darwin(v289);
  v282 = (uint64_t)&v275 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v284 = (uint64_t)&v275 - v8;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v321 = v9;
  v322 = v10;
  __chkstk_darwin(v9);
  v285 = (char *)&v275 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = sub_100007D50(&qword_100159C00);
  __chkstk_darwin(v287);
  v288 = (uint64_t)&v275 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_100159C08);
  __chkstk_darwin(v13);
  v276 = (uint64_t *)((char *)&v275 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v275 = sub_100007D50(&qword_100159C10);
  __chkstk_darwin(v275);
  v278 = (uint64_t)&v275 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = sub_100007D50(&qword_100159C18);
  __chkstk_darwin(v286);
  v277 = (uint64_t)&v275 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v279 = (uint64_t)&v275 - v18;
  v19 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v19);
  v290 = (char *)&v275 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v317 = (char *)&v275 - v22;
  v23 = sub_100007D50(&qword_100159C20);
  __chkstk_darwin(v23);
  v323 = (uint64_t)&v275 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v291 = (uint64_t)&v275 - v26;
  v27 = type metadata accessor for SetlistView(0);
  v28 = *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64);
  v315 = *(_QWORD *)(v27 - 8);
  v316 = v28;
  __chkstk_darwin(v27);
  v314 = (uint64_t)&v275 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v30);
  v303 = (char *)&v275 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v33 = *(_QWORD *)(v32 - 8);
  v306 = v32;
  v307 = v33;
  __chkstk_darwin(v32);
  v302 = (char *)&v275 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v299 = type metadata accessor for ContentMarginPlacement(0);
  v297 = *(_QWORD *)(v299 - 8);
  __chkstk_darwin(v299);
  v36 = (char *)&v275 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100007D50(&qword_100159C28);
  v38 = *(_QWORD *)(v37 - 8);
  v295 = v37;
  v296 = v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v275 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = sub_100007D50(&qword_100159C30);
  v301 = *(_QWORD *)(v298 - 8);
  __chkstk_darwin(v298);
  v293 = (char *)&v275 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100007D50(&qword_100159C38);
  v43 = *(_QWORD *)(v42 - 8);
  v304 = v42;
  v305 = v43;
  __chkstk_darwin(v42);
  v294 = (char *)&v275 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100007D50(&qword_100159C40);
  v46 = *(_QWORD *)(v45 - 8);
  v309 = v45;
  v310 = v46;
  __chkstk_darwin(v45);
  v300 = (char *)&v275 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100007D50(&qword_100159C48);
  v49 = *(_QWORD *)(v48 - 8);
  v312 = v48;
  v313 = v49;
  __chkstk_darwin(v48);
  v308 = (char *)&v275 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100007D50(&qword_100159C50);
  v330 = *(_QWORD *)(v51 - 8);
  v331 = v51;
  __chkstk_darwin(v51);
  v333 = (char *)&v275 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v311 = (char *)&v275 - v54;
  __chkstk_darwin(v55);
  v332 = (char *)&v275 - v56;
  v57 = a1[1];
  *(_QWORD *)&v353 = *a1;
  *((_QWORD *)&v353 + 1) = v57;
  *(double *)&v334 = COERCE_DOUBLE(sub_100007D50(&qword_100159BE0));
  State.wrappedValue.getter(&v342, v334);
  v58 = v342;
  v60 = *(_QWORD *)(v342 + 80);
  v59 = *(_QWORD *)(v342 + 88);
  v61 = *(unsigned __int8 *)(v342 + 96);
  v62 = *(_QWORD *)(v342 + 104);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v62);
  swift_release(v58);
  v63 = Text.init(_:tableName:bundle:comment:)(v60, v59, v61, v62, 0, 0, 0, 0, 0, 256);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  v70 = static Font.title2.getter(v63);
  static Font.Weight.bold.getter();
  v71 = Font.weight(_:)(v70);
  swift_release(v70);
  v72 = Text.font(_:)(v71, v63, v65, v69, v67);
  v328 = v73;
  v329 = v72;
  LODWORD(v70) = v74;
  v319 = v75;
  swift_release(v71);
  sub_100007D90(v63, v65, v69);
  swift_bridgeObjectRelease(v67);
  KeyPath = swift_getKeyPath(&unk_10010A210);
  v325 = swift_getKeyPath(&unk_10010A240);
  v327 = static Edge.Set.bottom.getter(v325);
  v76 = EdgeInsets.init(_all:)(13.0);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v324 = static Edge.Set.leading.getter(v83);
  v84 = EdgeInsets.init(_all:)(20.0);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v318 = v70;
  v386 = v70 & 1;
  v385 = 0;
  v381 = 0;
  v378 = 0;
  v92 = static Axis.Set.horizontal.getter(v91);
  v335[2] = a1;
  v93 = sub_100007D50(&qword_100159C58);
  v94 = sub_100007D00(&qword_100159C60);
  v95 = sub_10000F4E0(&qword_100159C68, &qword_100159C60, (uint64_t)&protocol conformance descriptor for LazyHGrid<A>);
  *(_QWORD *)&v353 = v94;
  *((_QWORD *)&v353 + 1) = v95;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v353, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v97 = ScrollView.init(_:showsIndicators:content:)(v92, 0, sub_10003B384, v335, v93, OpaqueTypeConformance2);
  v98 = static Edge.Set.horizontal.getter(v97);
  v99 = v36;
  static ContentMarginPlacement.automatic.getter();
  v100 = sub_10000F4E0(&qword_100159C70, &qword_100159C28, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v101 = v293;
  v102 = v295;
  View.contentMargins(_:_:for:)(v98, 0x4034000000000000, 0, v99, v295, v100);
  (*(void (**)(char *, uint64_t))(v297 + 8))(v99, v299);
  v103 = (*(uint64_t (**)(char *, uint64_t))(v296 + 8))(v40, v102);
  v104 = v303;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v103);
  v105 = v302;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v104);
  *(_QWORD *)&v353 = v102;
  *((_QWORD *)&v353 + 1) = v100;
  v106 = swift_getOpaqueTypeConformance2(&v353, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v107 = v294;
  v108 = v298;
  v109 = v306;
  View.scrollTargetBehavior<A>(_:)(v105, v298, v306, v106, &protocol witness table for ViewAlignedScrollTargetBehavior);
  v110 = v105;
  v111 = v109;
  (*(void (**)(char *, uint64_t))(v307 + 8))(v110, v109);
  v112 = v101;
  v113 = v108;
  (*(void (**)(char *, uint64_t))(v301 + 8))(v112, v108);
  v114 = a1[1];
  v115 = a1;
  *(_QWORD *)&v353 = *a1;
  *((_QWORD *)&v353 + 1) = v114;
  v116 = v334;
  State.wrappedValue.getter(&v342, v334);
  v117 = *(unsigned __int8 *)(v342 + 72);
  swift_release(v342);
  *(_QWORD *)&v353 = v113;
  *((_QWORD *)&v353 + 1) = v111;
  *(_QWORD *)&v354 = v106;
  *((_QWORD *)&v354 + 1) = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v118 = swift_getOpaqueTypeConformance2(&v353, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v119 = v300;
  v120 = v304;
  View.scrollDisabled(_:)(v117, v304, v118);
  (*(void (**)(char *, uint64_t))(v305 + 8))(v107, v120);
  v292 = v115;
  v121 = v115[1];
  *(_QWORD *)&v342 = *v115;
  *((_QWORD *)&v342 + 1) = v121;
  State.projectedValue.getter(v116);
  v122 = v353;
  v123 = v354;
  v124 = swift_getKeyPath(&unk_10010A270);
  v342 = v122;
  *(_QWORD *)&v343 = v123;
  v125 = sub_100007D50(&qword_100159C78);
  Binding.subscript.getter(&v353, v124, v125);
  swift_release(v123);
  swift_release(*((_QWORD *)&v122 + 1));
  swift_release(v124);
  swift_release(v122);
  v126 = v353;
  v127 = *((_QWORD *)&v354 + 1);
  v342 = v353;
  v343 = v354;
  v377[0] = v120;
  v377[1] = v118;
  v128 = swift_getOpaqueTypeConformance2(v377, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v129 = sub_10003B394();
  v130 = v308;
  v131 = v309;
  View.scrollPosition<A>(id:anchor:)(&v342, 0, 0, 1, v309, &type metadata for MusicItemID, v128, v129);
  swift_release(*((_QWORD *)&v126 + 1));
  swift_release(v126);
  swift_bridgeObjectRelease(v127);
  v132 = v131;
  (*(void (**)(char *, uint64_t))(v310 + 8))(v119, v131);
  v133 = v292;
  v134 = v292[1];
  *(_QWORD *)&v353 = *v292;
  *((_QWORD *)&v353 + 1) = v134;
  State.wrappedValue.getter(&v342, v334);
  v135 = v342;
  v136 = swift_getKeyPath(&unk_10010A270);
  *(_QWORD *)&v353 = v135;
  v137 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v353, v136, v137);
  swift_release(v136);
  v139 = *(_QWORD *)(v135 + 176);
  v138 = *(_QWORD *)(v135 + 184);
  swift_bridgeObjectRetain(v138);
  swift_release(v135);
  *(_QWORD *)&v342 = v139;
  *((_QWORD *)&v342 + 1) = v138;
  v140 = v314;
  sub_10001BFB8((uint64_t)v133, v314, type metadata accessor for SetlistView);
  v141 = *(unsigned __int8 *)(v315 + 80);
  v142 = (v141 + 16) & ~v141;
  v143 = swift_allocObject(&unk_100149790, v142 + v316, v141 | 7);
  sub_10003C9D4(v140, v143 + v142, type metadata accessor for SetlistView);
  v144 = sub_100007D50(&qword_100159C88);
  *(_QWORD *)&v353 = v132;
  *((_QWORD *)&v353 + 1) = &type metadata for MusicItemID;
  *(_QWORD *)&v354 = v128;
  *((_QWORD *)&v354 + 1) = v129;
  v145 = swift_getOpaqueTypeConformance2(&v353, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v146 = sub_10003B524();
  v148 = v311;
  v147 = v312;
  View.onChange<A>(of:initial:_:)(&v342, 0, sub_10003B510, v143, v312, v144, v145, v146);
  swift_release(v143);
  swift_bridgeObjectRelease(*((_QWORD *)&v342 + 1));
  (*(void (**)(char *, uint64_t))(v313 + 8))(v130, v147);
  (*(void (**)(char *, char *, uint64_t))(v330 + 32))(v332, v148, v331);
  v149 = v133[1];
  *(_QWORD *)&v353 = *v133;
  *((_QWORD *)&v353 + 1) = v149;
  State.wrappedValue.getter(&v342, v334);
  v150 = (_QWORD *)v342;
  v151 = *(_QWORD *)(v342 + 56);
  v152 = *(_QWORD *)(v342 + 64);
  sub_10001BF94((_QWORD *)(v342 + 32), v151);
  v153 = v317;
  (*(void (**)(uint64_t, uint64_t))(v152 + 64))(v151, v152);
  v154 = *(uint64_t (**)(char *, uint64_t))(v322 + 48);
  v155 = v153;
  v156 = (uint64_t)v153;
  v157 = v321;
  LODWORD(v144) = v154(v155, 1);
  sub_100007F38(v156, &qword_100158658);
  if ((_DWORD)v144 == 1)
  {
    swift_release(v150);
    v158 = v133;
  }
  else
  {
    v159 = v150[7];
    v160 = v150[8];
    sub_10001BF94(v150 + 4, v159);
    (*(void (**)(uint64_t, uint64_t))(v160 + 40))(v159, v160);
    v162 = v161;
    swift_release(v150);
    v158 = v133;
    if (v162)
    {
      v163 = swift_bridgeObjectRelease(v162);
      v164 = static HorizontalAlignment.center.getter(v163);
      v165 = (uint64_t)v276;
      *v276 = v164;
      *(_QWORD *)(v165 + 8) = 0x4026000000000000;
      *(_BYTE *)(v165 + 16) = 0;
      v166 = sub_100007D50(&qword_100159CE8);
      v167 = sub_100037C7C(v133, (char *)(v165 + *(int *)(v166 + 44)));
      v168 = static Edge.Set.leading.getter(v167);
      v169 = EdgeInsets.init(_all:)(20.0);
      *(double *)&v334 = v84;
      v170 = v76;
      v171 = v169;
      v316 = v88;
      v317 = v86;
      v172 = v78;
      v174 = v173;
      v175 = v80;
      v177 = v176;
      v315 = v90;
      v178 = v82;
      v180 = v179;
      v181 = v278;
      sub_100007E78(v165, v278, &qword_100159C08);
      v182 = v181 + *(int *)(v275 + 36);
      *(_BYTE *)v182 = v168;
      *(double *)(v182 + 8) = v171;
      *(_QWORD *)(v182 + 16) = v174;
      *(_QWORD *)(v182 + 24) = v177;
      *(_QWORD *)(v182 + 32) = v180;
      *(_BYTE *)(v182 + 40) = 0;
      v183 = sub_100007F38(v165, &qword_100159C08);
      v184 = static Edge.Set.top.getter(v183);
      v185 = EdgeInsets.init(_all:)(12.5);
      v187 = v186;
      v189 = v188;
      v191 = v190;
      v192 = v277;
      sub_100007E78(v181, v277, &qword_100159C10);
      v193 = v286;
      v194 = v192 + *(int *)(v286 + 36);
      *(_BYTE *)v194 = v184;
      *(double *)(v194 + 8) = v185;
      *(_QWORD *)(v194 + 16) = v187;
      v76 = v170;
      v84 = *(double *)&v334;
      v78 = v172;
      *(_QWORD *)(v194 + 24) = v189;
      *(_QWORD *)(v194 + 32) = v191;
      v80 = v175;
      v88 = v316;
      v86 = v317;
      v82 = v178;
      v90 = v315;
      *(_BYTE *)(v194 + 40) = 0;
      sub_100007F38(v181, &qword_100159C10);
      v195 = v279;
      sub_100018EB4(v192, v279, &qword_100159C18);
      v196 = v288;
      sub_100007E78(v195, v288, &qword_100159C18);
      swift_storeEnumTagMultiPayload(v196, v287, 0);
      v197 = sub_10003B67C();
      v198 = sub_10003B708();
      v199 = v323;
      _ConditionalContent<>.init(storage:)(v196, v193, v289, v197, v198);
      sub_100007F38(v195, &qword_100159C18);
      v200 = sub_100007D50(&qword_100159CA0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v200 - 8) + 56))(v199, 0, 1, v200);
      v201 = v291;
      sub_100018EB4(v199, v291, &qword_100159C20);
      goto LABEL_8;
    }
  }
  v202 = v158[1];
  *(_QWORD *)&v353 = *v158;
  *((_QWORD *)&v353 + 1) = v202;
  State.wrappedValue.getter(&v342, v334);
  v203 = v342;
  v204 = *(_QWORD *)(v342 + 56);
  v205 = *(_QWORD *)(v342 + 64);
  sub_10001BF94((_QWORD *)(v342 + 32), v204);
  v206 = (uint64_t)v290;
  (*(void (**)(uint64_t, uint64_t))(v205 + 64))(v204, v205);
  swift_release(v203);
  v207 = v157;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v154)(v206, 1, v157) == 1)
  {
    sub_100007F38(v206, &qword_100158658);
    v208 = sub_100007D50(&qword_100159CA0);
    v201 = v291;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v208 - 8) + 56))(v291, 1, 1, v208);
    v199 = v323;
  }
  else
  {
    v209 = v322;
    v210 = v206;
    v211 = (uint64_t)v285;
    v212 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v322 + 32))(v285, v210, v207);
    v213 = static HorizontalAlignment.leading.getter(v212);
    v214 = (uint64_t)v281;
    *v281 = v213;
    *(_QWORD *)(v214 + 8) = 0x4026000000000000;
    *(_BYTE *)(v214 + 16) = 0;
    v215 = sub_100007D50(&qword_100159CB0);
    v216 = sub_100037FC8((uint64_t)v158, v211, (char *)(v214 + *(int *)(v215 + 44)));
    v217 = static Edge.Set.leading.getter(v216);
    v218 = EdgeInsets.init(_all:)(20.0);
    *(double *)&v334 = v84;
    v219 = v76;
    v220 = v218;
    v316 = v88;
    v317 = v86;
    v221 = v78;
    v223 = v222;
    v224 = v80;
    v226 = v225;
    v315 = v90;
    v227 = v82;
    v229 = v228;
    v230 = v283;
    sub_100007E78(v214, v283, &qword_100159BE8);
    v231 = v230 + *(int *)(v280 + 36);
    *(_BYTE *)v231 = v217;
    *(double *)(v231 + 8) = v220;
    *(_QWORD *)(v231 + 16) = v223;
    *(_QWORD *)(v231 + 24) = v226;
    *(_QWORD *)(v231 + 32) = v229;
    *(_BYTE *)(v231 + 40) = 0;
    v232 = sub_100007F38(v214, &qword_100159BE8);
    v233 = static Edge.Set.top.getter(v232);
    v234 = EdgeInsets.init(_all:)(12.5);
    v236 = v235;
    v238 = v237;
    v240 = v239;
    v241 = v282;
    sub_100007E78(v230, v282, &qword_100159BF0);
    v242 = v289;
    v243 = v241 + *(int *)(v289 + 36);
    *(_BYTE *)v243 = v233;
    *(double *)(v243 + 8) = v234;
    *(_QWORD *)(v243 + 16) = v236;
    v76 = v219;
    v84 = *(double *)&v334;
    v78 = v221;
    *(_QWORD *)(v243 + 24) = v238;
    *(_QWORD *)(v243 + 32) = v240;
    v80 = v224;
    v88 = v316;
    v86 = v317;
    v82 = v227;
    v90 = v315;
    *(_BYTE *)(v243 + 40) = 0;
    sub_100007F38(v230, &qword_100159BF0);
    v244 = v284;
    sub_100018EB4(v241, v284, &qword_100159BF8);
    v245 = v288;
    sub_100007E78(v244, v288, &qword_100159BF8);
    swift_storeEnumTagMultiPayload(v245, v287, 1);
    v246 = sub_10003B67C();
    v247 = sub_10003B708();
    v199 = v323;
    _ConditionalContent<>.init(storage:)(v245, v286, v242, v246, v247);
    sub_100007F38(v244, &qword_100159BF8);
    v248 = sub_100007D50(&qword_100159CA0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v248 - 8) + 56))(v199, 0, 1, v248);
    v249 = v291;
    sub_100018EB4(v199, v291, &qword_100159C20);
    v250 = v211;
    v201 = v249;
    (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v250, v321);
  }
LABEL_8:
  v251 = v386;
  LODWORD(v334) = v386;
  v341[0] = v377[0];
  *(_DWORD *)((char *)v341 + 3) = *(_DWORD *)((char *)v377 + 3);
  v252 = v385;
  LODWORD(v322) = v385;
  v340[0] = *(_DWORD *)v384;
  *(_DWORD *)((char *)v340 + 3) = *(_DWORD *)&v384[3];
  *(_DWORD *)((char *)v339 + 3) = *(_DWORD *)&v383[3];
  v339[0] = *(_DWORD *)v383;
  *(_DWORD *)((char *)v338 + 3) = *(_DWORD *)&v382[3];
  v338[0] = *(_DWORD *)v382;
  v253 = v381;
  LODWORD(v321) = v381;
  *(_DWORD *)((char *)v337 + 3) = *(_DWORD *)&v380[3];
  v337[0] = *(_DWORD *)v380;
  *(_DWORD *)((char *)v336 + 3) = *(_DWORD *)&v379[3];
  v336[0] = *(_DWORD *)v379;
  v254 = v331;
  v255 = *(void (**)(char *, char *, uint64_t))(v330 + 16);
  v256 = v378;
  v255(v333, v332, v331);
  sub_100007E78(v201, v199, &qword_100159C20);
  *(_QWORD *)&v342 = v329;
  *((_QWORD *)&v342 + 1) = v328;
  LOBYTE(v343) = v251;
  *(_DWORD *)((char *)&v343 + 1) = v377[0];
  DWORD1(v343) = *(_DWORD *)((char *)v377 + 3);
  v257 = v319;
  *((_QWORD *)&v343 + 1) = v319;
  *(_QWORD *)&v344 = KeyPath;
  *((_QWORD *)&v344 + 1) = 2;
  LOBYTE(v345) = v252;
  *(_DWORD *)((char *)&v345 + 1) = *(_DWORD *)v384;
  DWORD1(v345) = *(_DWORD *)&v384[3];
  *((_QWORD *)&v345 + 1) = v325;
  LOBYTE(v346) = 0;
  DWORD1(v346) = *(_DWORD *)&v383[3];
  *(_DWORD *)((char *)&v346 + 1) = *(_DWORD *)v383;
  BYTE8(v346) = v327;
  *(_DWORD *)((char *)&v346 + 9) = *(_DWORD *)v382;
  HIDWORD(v346) = *(_DWORD *)&v382[3];
  *(double *)&v347 = v76;
  *((_QWORD *)&v347 + 1) = v78;
  *(_QWORD *)&v348 = v80;
  *((_QWORD *)&v348 + 1) = v82;
  LOBYTE(v349) = v253;
  *(_DWORD *)((char *)&v349 + 1) = *(_DWORD *)v380;
  DWORD1(v349) = *(_DWORD *)&v380[3];
  BYTE8(v349) = v324;
  HIDWORD(v349) = *(_DWORD *)&v379[3];
  *(_DWORD *)((char *)&v349 + 9) = *(_DWORD *)v379;
  *(double *)&v350 = v84;
  *((_QWORD *)&v350 + 1) = v86;
  *(_QWORD *)&v351 = v88;
  *((_QWORD *)&v351 + 1) = v90;
  LODWORD(v317) = v256;
  v352 = v256;
  v258 = v350;
  v259 = v351;
  v260 = v199;
  v261 = v320;
  v320[160] = v256;
  *((_OWORD *)v261 + 8) = v258;
  *((_OWORD *)v261 + 9) = v259;
  v262 = v343;
  *(_OWORD *)v261 = v342;
  *((_OWORD *)v261 + 1) = v262;
  v263 = v344;
  v264 = v345;
  v265 = v349;
  *((_OWORD *)v261 + 6) = v348;
  *((_OWORD *)v261 + 7) = v265;
  v266 = v347;
  *((_OWORD *)v261 + 4) = v346;
  *((_OWORD *)v261 + 5) = v266;
  *((_OWORD *)v261 + 2) = v263;
  *((_OWORD *)v261 + 3) = v264;
  v267 = sub_100007D50(&qword_100159CA8);
  v255(&v261[*(int *)(v267 + 48)], v333, v254);
  sub_100007E78(v260, (uint64_t)&v261[*(int *)(v267 + 64)], &qword_100159C20);
  sub_10003B5CC((uint64_t)&v342);
  LOBYTE(v267) = v318 & 1;
  v268 = v328;
  v269 = v329;
  sub_10000F844(v329, v328, v318 & 1);
  swift_bridgeObjectRetain(v257);
  v270 = KeyPath;
  swift_retain(KeyPath);
  v271 = v325;
  swift_retain(v325);
  sub_100007F38(v201, &qword_100159C20);
  v272 = v331;
  v273 = *(void (**)(char *, uint64_t))(v330 + 8);
  v273(v332, v331);
  sub_100007D90(v269, v268, v267);
  swift_release(v271);
  swift_release(v270);
  swift_bridgeObjectRelease(v257);
  sub_100007F38(v323, &qword_100159C20);
  v273(v333, v272);
  *(_QWORD *)&v353 = v269;
  *((_QWORD *)&v353 + 1) = v268;
  LOBYTE(v354) = v334;
  *(_DWORD *)((char *)&v354 + 1) = v341[0];
  DWORD1(v354) = *(_DWORD *)((char *)v341 + 3);
  *((_QWORD *)&v354 + 1) = v257;
  v355 = v270;
  v356 = 2;
  v357 = v322;
  *(_DWORD *)v358 = v340[0];
  *(_DWORD *)&v358[3] = *(_DWORD *)((char *)v340 + 3);
  v359 = v271;
  v360 = 0;
  *(_DWORD *)&v361[3] = *(_DWORD *)((char *)v339 + 3);
  *(_DWORD *)v361 = v339[0];
  v362 = v327;
  *(_DWORD *)&v363[3] = *(_DWORD *)((char *)v338 + 3);
  *(_DWORD *)v363 = v338[0];
  v364 = v76;
  v365 = v78;
  v366 = v80;
  v367 = v82;
  v368 = v321;
  *(_DWORD *)&v369[3] = *(_DWORD *)((char *)v337 + 3);
  *(_DWORD *)v369 = v337[0];
  v370 = v324;
  *(_DWORD *)&v371[3] = *(_DWORD *)((char *)v336 + 3);
  *(_DWORD *)v371 = v336[0];
  v372 = v84;
  v373 = v86;
  v374 = v88;
  v375 = v90;
  v376 = (char)v317;
  return sub_10003B624((uint64_t)&v353);
}

uint64_t sub_100037000@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  _BYTE v30[16];
  _QWORD *v31;
  _QWORD v32[2];
  uint64_t v33;

  v29[1] = a2;
  v3 = type metadata accessor for PinnedScrollableViews(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GridItem.Size(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_OWORD *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for GridItem(0);
  __chkstk_darwin(v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100159C60);
  v29[0] = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[1];
  v32[0] = *a1;
  v32[1] = v17;
  v18 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v33, v18);
  v19 = v33;
  *v10 = xmmword_100109D50;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for GridItem.Size.flexible(_:), v7);
  GridItem.init(_:spacing:alignment:)(v10, 0x4008000000000000, 0, 0, 0, 1);
  v20 = sub_10002A228();
  v21 = sub_1000352B8((uint64_t)v13, v20);
  v22 = swift_release(v19);
  v31 = a1;
  v23 = static VerticalAlignment.center.getter(v22);
  LODWORD(v32[0]) = 0;
  v24 = sub_100007428(&qword_100159D20, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(v32, v3, v24);
  v25 = sub_100007D50(&qword_100159D28);
  v26 = sub_10003BA88();
  LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)(v21, v23, 0x4024000000000000, 0, v6, sub_10003BA80, v30, v25, v26);
  v27 = sub_10000F4E0(&qword_100159C68, &qword_100159C60, (uint64_t)&protocol conformance descriptor for LazyHGrid<A>);
  View.scrollTargetLayout(isEnabled:)(1, v14, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v29[0] + 8))(v16, v14);
}

uint64_t sub_100037288@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v32 = a2;
  v3 = type metadata accessor for SetlistView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = a1[1];
  v33 = *a1;
  v34 = v6;
  v7 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v37, v7);
  v8 = v37;
  v9 = v37[7];
  v10 = v37[8];
  sub_10001BF94(v37 + 4, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(v9, v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, v9, &unk_1001166AC, &unk_1001166CC);
  v13 = sub_100007D50(&qword_1001597E8);
  v14 = _arrayForceCast<A, B>(_:)(v11, AssociatedTypeWitness, v13);
  swift_release(v8);
  swift_bridgeObjectRelease(v11);
  v37 = (_QWORD *)v14;
  KeyPath = swift_getKeyPath(&unk_10010A2F8);
  sub_10001BFB8((uint64_t)a1, (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistView);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_1001497E0, v16 + v5, v15 | 7);
  sub_10003C9D4((uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for SetlistView);
  v18 = sub_100007D50(&qword_100159D50);
  v19 = sub_100007D50(&qword_100159D58);
  v20 = sub_10000F4E0(&qword_100159D60, &qword_100159D50, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_10003B394();
  v22 = sub_100007D00(&qword_100159D38);
  v23 = sub_100007D00(&qword_100159D40);
  v24 = type metadata accessor for PlainButtonStyle(255);
  v25 = sub_10000F4E0(&qword_100159D48, &qword_100159D40, (uint64_t)&protocol conformance descriptor for Button<A>);
  v26 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v33 = v23;
  v34 = v24;
  v35 = v25;
  v36 = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v33 = v22;
  v34 = OpaqueTypeConformance2;
  v28 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  return ForEach<>.init(_:id:content:)(&v37, KeyPath, sub_10003BBE4, v17, v18, v19, v20, v21, v28);
}

uint64_t sub_10003751C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v53 = a3;
  v45 = type metadata accessor for PlainButtonStyle(0);
  v47 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SetlistView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_100159D40);
  v46 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_100159D38);
  v51 = *(_QWORD *)(v14 - 8);
  v52 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_100159D58);
  v49 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  __chkstk_darwin(v17);
  v48 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001BFB8((uint64_t)a2, (uint64_t)v10, type metadata accessor for SetlistView);
  v19 = a1;
  sub_10003BC30(a1, (uint64_t)&v60);
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v9 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_100149808, v22 + 40, v20 | 7);
  sub_10003C9D4((uint64_t)v10, v23 + v21, type metadata accessor for SetlistView);
  v24 = v23 + v22;
  v25 = v45;
  sub_10002BAA4(&v60, v24);
  v55 = a2;
  v56 = v19;
  v26 = sub_100007D50(&qword_100159D68);
  v27 = sub_10003BE0C();
  v28 = Button.init(action:label:)(sub_10003BDC4, v23, sub_10003BE04, v54, v26, v27);
  PlainButtonStyle.init()(v28);
  v29 = sub_10000F4E0(&qword_100159D48, &qword_100159D40, (uint64_t)&protocol conformance descriptor for Button<A>);
  v30 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  View.buttonStyle<A>(_:)(v6, v11, v25, v29, v30);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v25);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v13, v11);
  v32 = static Axis.Set.horizontal.getter(v31);
  v33 = a2[1];
  v57 = *a2;
  v58 = v33;
  v34 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v59, v34);
  LOBYTE(v13) = *(_BYTE *)(v59 + 72);
  v35 = swift_release(v59);
  if ((v13 & 1) != 0)
  {
    v36 = 1;
  }
  else
  {
    v35 = sub_100035534();
    v36 = v35;
  }
  v37 = static Alignment.center.getter(v35);
  v39 = v38;
  *(_QWORD *)&v60 = v11;
  *((_QWORD *)&v60 + 1) = v25;
  v61 = v29;
  v62 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v41 = v48;
  v42 = v52;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)(v32, v36, 1, v37, v39, v52, OpaqueTypeConformance2, 10.0);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v42);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v53, v41, v50);
}

uint64_t sub_1000378B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v11, v4);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = v11;
    swift_retain(*(_QWORD *)(a1 + 16));
    sub_10002A74C(a2, v5);
    swift_release(v6);
    return swift_release(v5);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = type metadata accessor for RemoteViewConfiguration();
    v10 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_100037978@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v32 = a3;
  v5 = type metadata accessor for SetlistSongRowView(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for SetlistSongRowViewModel(0);
  v9 = a1[1];
  v35[0] = *a1;
  v10 = v35[0];
  v35[1] = v9;
  v11 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(v33, v11);
  v12 = v33[0];
  v13 = *(_QWORD *)(v33[0] + 16);
  v14 = *(_QWORD *)(v33[0] + 24);
  swift_bridgeObjectRetain(v14);
  swift_release(v12);
  sub_10003BC30(a2, (uint64_t)v35);
  v33[0] = v10;
  v33[1] = v9;
  State.wrappedValue.getter(&v34, v11);
  v15 = v34;
  v16 = v36;
  v17 = v37;
  v18 = sub_1000228D4((uint64_t)v35, v36);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v22 + 16))(v21, v19);
  v23 = sub_100034520(v13, v14, (uint64_t)v21, v15, v8, v16, v17);
  sub_1000228FC(v35);
  *v7 = v23;
  v24 = type metadata accessor for RemoteViewConfiguration();
  v25 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  v7[1] = EnvironmentObject.init()(v24, v25);
  v7[2] = v26;
  v27 = (_QWORD *)((char *)v7 + *(int *)(v5 + 24));
  *v27 = swift_getKeyPath(&unk_10010A298);
  v28 = sub_100007D50(&qword_1001582E8);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = v32;
  sub_10001BFB8((uint64_t)v7, v32, type metadata accessor for SetlistSongRowView);
  *(_BYTE *)(v29 + *(int *)(sub_100007D50(&qword_100159D68) + 36)) = 0;
  return sub_10001E24C((uint64_t)v7, type metadata accessor for SetlistSongRowView);
}

uint64_t sub_100037B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v11, v2);
  v3 = v11;
  v5 = *(_QWORD *)(v11 + 16);
  v4 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v4);
  swift_release(v3);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    swift_retain(*(_QWORD *)(a1 + 16));
    sub_10008A874(v5, v4, 8, 11, 24, 0, 3u, v6);
    swift_bridgeObjectRelease(v4);
    return swift_release(v6);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = type metadata accessor for RemoteViewConfiguration();
    v10 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_100037C7C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v3 = type metadata accessor for SetlistDetailSection(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_100159CF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for Divider(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - v17;
  Divider.init()(v19);
  v20 = a1[1];
  v48 = *a1;
  v49 = v20;
  v21 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v47, v21);
  v22 = type metadata accessor for SetlistViewModel(0);
  State.init(wrappedValue:)(&v47, v22);
  v23 = v49;
  *(_QWORD *)v5 = v48;
  *((_QWORD *)v5 + 1) = v23;
  LOBYTE(v47) = 0;
  State.init(wrappedValue:)(&v47, &type metadata for Bool);
  v24 = v49;
  v5[16] = v48;
  *((_QWORD *)v5 + 3) = v24;
  v25 = type metadata accessor for RemoteViewConfiguration();
  v26 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  *((_QWORD *)v5 + 4) = EnvironmentObject.init()(v25, v26);
  *((_QWORD *)v5 + 5) = v27;
  v28 = &v5[*(int *)(v3 + 28)];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_10010A298);
  v29 = sub_100007D50(&qword_1001582E8);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = &v5[*(int *)(v3 + 32)];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_10010A2C8);
  v31 = sub_100007D50(&qword_100158AC0);
  v32 = swift_storeEnumTagMultiPayload(v30, v31, 0);
  LOBYTE(v30) = static Edge.Set.trailing.getter(v32);
  v33 = EdgeInsets.init(_all:)(20.0);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_10001BFB8((uint64_t)v5, (uint64_t)v8, type metadata accessor for SetlistDetailSection);
  v40 = &v8[*(int *)(v6 + 36)];
  *v40 = (char)v30;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10001E24C((uint64_t)v5, type metadata accessor for SetlistDetailSection);
  sub_100018EB4((uint64_t)v8, (uint64_t)v11, &qword_100159CF0);
  v41 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v41(v15, v18, v12);
  sub_100007E78((uint64_t)v11, (uint64_t)v8, &qword_100159CF0);
  v42 = v46;
  v41(v46, v15, v12);
  v43 = sub_100007D50(&qword_100159CF8);
  sub_100007E78((uint64_t)v8, (uint64_t)&v42[*(int *)(v43 + 48)], &qword_100159CF0);
  sub_100007F38((uint64_t)v11, &qword_100159CF0);
  v44 = *(void (**)(char *, uint64_t))(v13 + 8);
  v44(v18, v12);
  sub_100007F38((uint64_t)v8, &qword_100159CF0);
  return ((uint64_t (*)(char *, uint64_t))v44)(v15, v12);
}

uint64_t sub_100037FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53[16];
  uint64_t v54;

  v48 = a2;
  v52 = a3;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SetlistView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_100159D00);
  v13 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  v51 = v13;
  __chkstk_darwin(v12);
  v49 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v47 = (char *)&v43 - v16;
  v17 = type metadata accessor for Divider(0);
  v46 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v45 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v43 - v20;
  v44 = (char *)&v43 - v20;
  Divider.init()(v22);
  sub_10001BFB8(a1, (uint64_t)v11, type metadata accessor for SetlistView);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v48, v4);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = *(unsigned __int8 *)(v5 + 80);
  v26 = (v10 + v25 + v24) & ~v25;
  v27 = swift_allocObject(&unk_1001497B8, v26 + v6, v23 | v25 | 7);
  sub_10003C9D4((uint64_t)v11, v27 + v24, type metadata accessor for SetlistView);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v27 + v26, v7, v4);
  v54 = a1;
  v28 = sub_100007D50(&qword_100159D08);
  v29 = sub_10003B9E0();
  v30 = v47;
  Button.init(action:label:)(sub_10003B9C4, v27, sub_10003B9D8, v53, v28, v29);
  v31 = v45;
  v32 = v46;
  v33 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v33(v45, v21, v17);
  v34 = v50;
  v35 = v51;
  v36 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v37 = v49;
  v36(v49, v30, v50);
  v38 = v52;
  v33(v52, v31, v17);
  v39 = sub_100007D50(&qword_100159D18);
  v36(&v38[*(int *)(v39 + 48)], v37, v34);
  v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  v40(v30, v34);
  v41 = *(void (**)(char *, uint64_t))(v32 + 8);
  v41(v44, v17);
  v40(v37, v34);
  return ((uint64_t (*)(char *, uint64_t))v41)(v31, v17);
}

uint64_t sub_1000382B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for OpenURLAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistView(0);
  sub_100018A2C((uint64_t)v6);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100038354@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[2];
  uint64_t v36;

  v3 = a1[1];
  v35[0] = *a1;
  v35[1] = v3;
  v4 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v36, v4);
  v5 = v36;
  v6 = *(_QWORD *)(v36 + 112);
  v7 = *(_QWORD *)(v36 + 120);
  v8 = *(unsigned __int8 *)(v36 + 128);
  v9 = *(_QWORD *)(v36 + 136);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_release(v5);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.body.getter(v10);
  static Font.Weight.regular.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  LOBYTE(v18) = v23 & 1;
  sub_100007D90(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Color.blue.getter(v26);
  v35[0] = v27;
  v28 = Text.foregroundStyle<A>(_:)(v35, v19, v21, v23 & 1, v25, &type metadata for Color, &protocol witness table for Color);
  v30 = v29;
  LOBYTE(v16) = v31;
  v33 = v32;
  sub_100007D90(v19, v21, v18);
  swift_release(v27);
  swift_bridgeObjectRelease(v25);
  result = swift_getKeyPath(&unk_10010A210);
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v30;
  *(_BYTE *)(a2 + 16) = v16 & 1;
  *(_QWORD *)(a2 + 24) = v33;
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_100038518(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 48) = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100038584, v3, v4);
}

uint64_t sub_100038584()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = v1[1];
  *(_QWORD *)(v0 + 16) = *v1;
  *(_QWORD *)(v0 + 24) = v2;
  v3 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter((_QWORD *)(v0 + 32), v3);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v4 + 200);
  v6 = v5[5];
  v7 = v5[6];
  sub_10001BF94(v5 + 2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100038620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SetlistView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100159BCC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000FAC0;
  return sub_100038518(v3);
}

uint64_t sub_100038684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.black.getter();
  v1 = Color.opacity(_:)(0.1);
  result = swift_release(v0);
  qword_100159B10 = v1;
  return result;
}

uint64_t sub_1000386C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Font.subheadline.getter();
  static Font.Weight.regular.getter();
  v1 = Font.weight(_:)(v0);
  result = swift_release(v0);
  qword_100159B18 = v1;
  return result;
}

uint64_t sub_100038704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t OpaqueTypeConformance2;
  char *v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  _QWORD *v199;
  uint64_t v200;

  v191 = a2;
  v3 = type metadata accessor for PlainButtonStyle(0);
  v189 = *(_QWORD *)(v3 - 8);
  v190 = v3;
  __chkstk_darwin(v3);
  v188 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v5);
  v176 = (char *)&v153 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100007D50(&qword_100159E58);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v175 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100007D50(&qword_100159E60);
  __chkstk_darwin(v181);
  v182 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100007D50(&qword_100159E68);
  v184 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v183 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100007D50(&qword_100159E70);
  __chkstk_darwin(v180);
  v187 = (uint64_t)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v179 = (char *)&v153 - v12;
  __chkstk_darwin(v13);
  v185 = (uint64_t)&v153 - v14;
  v15 = type metadata accessor for SetlistDetailSection(0);
  v171 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v172 = v16;
  v173 = (uint64_t)&v153 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for Text.Suffix(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100007D50(&qword_100159E78);
  v160 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v159 = (char *)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100007D50(&qword_100159E80);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v164 = (char *)&v153 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100007D50(&qword_100159E88);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v163 = (char *)&v153 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v161 = (uint64_t)&v153 - v22;
  v23 = sub_100007D50(&qword_1001597C8);
  __chkstk_darwin(v23);
  v25 = (char *)&v153 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for AttributedString(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v153 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v167 = (char *)&v153 - v31;
  v32 = sub_100007D50(&qword_100159E90);
  __chkstk_darwin(v32);
  v174 = (uint64_t)&v153 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)&v153 - v35;
  v37 = *(_QWORD *)(a1 + 8);
  v192 = *(_QWORD *)a1;
  v193 = v37;
  v168 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v200, v168);
  v38 = v200;
  KeyPath = swift_getKeyPath(&unk_10010A388);
  v192 = v38;
  v40 = sub_100007428(&qword_1001597D0, type metadata accessor for SetlistViewModel, (uint64_t)&unk_100109BE0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, KeyPath, v40);
  swift_release(KeyPath);
  v41 = v38 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription;
  swift_beginAccess(v38 + OBJC_IVAR____TtC15ShazamEventsApp16SetlistViewModel__formattedStandardDescription, &v200, 0, 0);
  sub_100007E78(v41, (uint64_t)v25, &qword_1001597C8);
  v42 = swift_release(v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48))(v25, 1, v26, v42) == 1)
  {
    sub_100007F38((uint64_t)v25, &qword_1001597C8);
    v43 = 1;
    v44 = v173;
    v45 = v190;
    v46 = v172;
    v47 = v171;
    v48 = v170;
  }
  else
  {
    v155 = v36;
    v49 = v167;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v167, v25, v26);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v29, v49, v26);
    v50 = Text.init(_:)(v29);
    v154 = v26;
    v153 = v27;
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;
    if (qword_100158080 != -1)
      swift_once(&qword_100158080, sub_1000386C4);
    v58 = v55 & 1;
    v59 = Text.font(_:)(qword_100159B18, v51, v53, v55 & 1, v57);
    v61 = v60;
    v63 = v62;
    v65 = v64 & 1;
    sub_100007D90(v51, v53, v58);
    v66 = swift_bridgeObjectRelease(v57);
    LODWORD(v192) = static HierarchicalShapeStyle.secondary.getter(v66);
    v67 = Text.foregroundStyle<A>(_:)(&v192, v59, v61, v65, v63, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v69 = v68;
    v71 = v70;
    v73 = v72;
    sub_100007D90(v59, v61, v65);
    swift_bridgeObjectRelease(v63);
    v74 = *(_QWORD *)(a1 + 24);
    LOBYTE(v192) = *(_BYTE *)(a1 + 16);
    v193 = v74;
    v75 = sub_100007D50(&qword_100158470);
    State.wrappedValue.getter(&v199, v75);
    v76 = (char)v199;
    if ((_BYTE)v199)
      v77 = 0;
    else
      v77 = 2;
    v78 = swift_getKeyPath(&unk_10010A210);
    v192 = v67;
    v193 = v69;
    v194 = v71 & 1;
    v195 = v73;
    v196 = v78;
    v197 = v77;
    v198 = v76;
    v79 = sub_100039454();
    v81 = v80;
    v83 = v82;
    v85 = v84 & 1;
    v86 = v156;
    static Text.Suffix.truncated(_:)();
    sub_100007D90(v79, v81, v85);
    swift_bridgeObjectRelease(v83);
    v87 = sub_100007D50(&qword_100159D08);
    v88 = sub_10003B9E0();
    v89 = v159;
    View.textSuffix(_:)(v86, v87, v88);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v86, v158);
    sub_100007D90(v192, v193, v194);
    swift_bridgeObjectRelease(v195);
    swift_release(v196);
    v44 = v173;
    sub_10001BFB8(a1, v173, type metadata accessor for SetlistDetailSection);
    v47 = v171;
    v90 = *(unsigned __int8 *)(v171 + 80);
    v91 = (v90 + 16) & ~v90;
    v46 = v172;
    v92 = swift_allocObject(&unk_100149880, v91 + v172, v90 | 7);
    sub_10003C9D4(v44, v92 + v91, type metadata accessor for SetlistDetailSection);
    v192 = v87;
    v193 = v88;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.textSuffix(_:)>>, 1);
    v94 = v164;
    v95 = v162;
    View.onTapGesture(count:perform:)(1, sub_10003CD94, v92, v162, OpaqueTypeConformance2);
    v96 = swift_release(v92);
    v97 = (*(uint64_t (**)(char *, uint64_t, __n128))(v160 + 8))(v89, v95, v96);
    LOBYTE(v95) = static Edge.Set.top.getter(v97);
    v98 = EdgeInsets.init(_all:)(11.0);
    v100 = v99;
    v102 = v101;
    v104 = v103;
    v105 = v165;
    v106 = (uint64_t)v163;
    v107 = v166;
    (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v163, v94, v166);
    v48 = v170;
    v108 = v106 + *(int *)(v170 + 36);
    *(_BYTE *)v108 = v95;
    *(double *)(v108 + 8) = v98;
    *(_QWORD *)(v108 + 16) = v100;
    *(_QWORD *)(v108 + 24) = v102;
    *(_QWORD *)(v108 + 32) = v104;
    *(_BYTE *)(v108 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v94, v107);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v167, v154);
    v109 = v161;
    sub_100018EB4(v106, v161, &qword_100159E88);
    v110 = v109;
    v36 = v155;
    sub_100018EB4(v110, (uint64_t)v155, &qword_100159E88);
    v43 = 0;
    v45 = v190;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v36, v43, 1, v48);
  sub_10001BFB8(a1, v44, type metadata accessor for SetlistDetailSection);
  v111 = *(unsigned __int8 *)(v47 + 80);
  v112 = (uint64_t)v36;
  v113 = (v111 + 16) & ~v111;
  v114 = swift_allocObject(&unk_100149858, v113 + v46, v111 | 7);
  v115 = sub_10003C9D4(v44, v114 + v113, type metadata accessor for SetlistDetailSection);
  __chkstk_darwin(v115);
  *(&v153 - 2) = a1;
  v116 = sub_100007D50(&qword_100159E98);
  v117 = sub_10003CC04();
  v118 = v175;
  Button.init(action:label:)(sub_10003CBA8, v114, sub_10003CBFC, &v153 - 4, v116, v117);
  v119 = *(_QWORD *)(a1 + 8);
  v192 = *(_QWORD *)a1;
  v193 = v119;
  State.wrappedValue.getter(&v199, v168);
  v120 = v199;
  v121 = v199[7];
  v122 = v199[8];
  sub_10001BF94(v199 + 4, v121);
  v123 = (uint64_t)v176;
  (*(void (**)(uint64_t, uint64_t))(v122 + 64))(v121, v122);
  v124 = type metadata accessor for URL(0);
  LOBYTE(v114) = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 48))(v123, 1, v124) != 1;
  sub_100007F38(v123, &qword_100158658);
  v125 = swift_release(v120);
  v126 = v177;
  v127 = (uint64_t)v182;
  v128 = v178;
  (*(void (**)(char *, char *, uint64_t, __n128))(v177 + 16))(v182, v118, v178, v125);
  v129 = v181;
  *(_BYTE *)(v127 + *(int *)(v181 + 36)) = v114;
  v130 = (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v118, v128);
  v131 = v188;
  PlainButtonStyle.init()(v130);
  v132 = sub_10003CD0C();
  v133 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v134 = v183;
  View.buttonStyle<A>(_:)(v131, v129, v45, v132, v133);
  (*(void (**)(char *, uint64_t))(v189 + 8))(v131, v45);
  v135 = sub_100007F38(v127, &qword_100159E60);
  LOBYTE(v132) = static Edge.Set.top.getter(v135);
  v136 = EdgeInsets.init(_all:)(24.0);
  v138 = v137;
  v140 = v139;
  v142 = v141;
  v143 = v184;
  v144 = (uint64_t)v179;
  v145 = v186;
  (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v179, v134, v186);
  v146 = v144 + *(int *)(v180 + 36);
  *(_BYTE *)v146 = v132;
  *(double *)(v146 + 8) = v136;
  *(_QWORD *)(v146 + 16) = v138;
  *(_QWORD *)(v146 + 24) = v140;
  *(_QWORD *)(v146 + 32) = v142;
  *(_BYTE *)(v146 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v143 + 8))(v134, v145);
  v147 = v185;
  sub_100018EB4(v144, v185, &qword_100159E70);
  v148 = v174;
  sub_100007E78(v112, v174, &qword_100159E90);
  v149 = v187;
  sub_100007E78(v147, v187, &qword_100159E70);
  v150 = v191;
  sub_100007E78(v148, v191, &qword_100159E90);
  v151 = sub_100007D50(&qword_100159EE8);
  sub_100007E78(v149, v150 + *(int *)(v151 + 48), &qword_100159E70);
  sub_100007F38(v147, &qword_100159E70);
  sub_100007F38(v112, &qword_100159E90);
  sub_100007F38(v149, &qword_100159E70);
  return sub_100007F38(v148, &qword_100159E90);
}

uint64_t sub_100039454()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;

  v1 = v0[1];
  v28[0] = *v0;
  v28[1] = v1;
  v2 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v29, v2);
  v3 = v29;
  v4 = *(_QWORD *)(v29 + 144);
  v5 = *(_QWORD *)(v29 + 152);
  v6 = *(unsigned __int8 *)(v29 + 160);
  v7 = *(_QWORD *)(v29 + 168);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_release(v3);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v5, v6, v7, 0, 0, 0, 0, 0, 256);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.subheadline.getter(v8);
  static Font.Weight.regular.getter();
  v16 = Font.weight(_:)(v15);
  swift_release(v15);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_release(v16);
  sub_100007D90(v8, v10, v14);
  v24 = swift_bridgeObjectRelease(v12);
  v25 = static Color.blue.getter(v24);
  v28[0] = v25;
  v26 = Text.foregroundStyle<A>(_:)(v28, v17, v19, v21 & 1, v23, &type metadata for Color, &protocol witness table for Color);
  sub_100007D90(v17, v19, v21 & 1);
  swift_release(v25);
  swift_bridgeObjectRelease(v23);
  return v26;
}

void sub_1000395FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[3];
  LOBYTE(v14) = *((_BYTE *)a1 + 16);
  v15 = v2;
  LOBYTE(v13) = 1;
  v3 = sub_100007D50(&qword_100158470);
  State.wrappedValue.setter(&v13, v3);
  v4 = a1[1];
  v14 = *a1;
  v15 = v4;
  v5 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v13, v5);
  v6 = v13;
  v8 = *(_QWORD *)(v13 + 16);
  v7 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v7);
  swift_release(v6);
  v9 = a1[4];
  if (v9)
  {
    swift_retain(a1[4]);
    sub_10008A874(v8, v7, 8, 12, 22, 0, 3u, v9);
    swift_bridgeObjectRelease(v7);
    swift_release(v9);
  }
  else
  {
    v10 = a1[5];
    v11 = type metadata accessor for RemoteViewConfiguration();
    v12 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v10, v11, v12);
    __break(1u);
  }
}

uint64_t sub_10003971C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v2 = type metadata accessor for OpenURLAction(0);
  v26 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v28 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v29 = *a1;
  v30 = v11;
  v12 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v31, v12);
  v13 = v31;
  v15 = v31[7];
  v14 = v31[8];
  sub_10001BF94(v31 + 4, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 64))(v15, v14);
  swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_100007F38((uint64_t)v7, &qword_100158658);
  v17 = v28;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v28, v7, v8);
  type metadata accessor for SetlistDetailSection(0);
  sub_100018A2C((uint64_t)v4);
  OpenURLAction.callAsFunction(_:)(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v27);
  v18 = a1[1];
  v29 = *a1;
  v30 = v18;
  State.wrappedValue.getter(&v31, v12);
  v19 = v31;
  v21 = v31[2];
  v20 = v31[3];
  swift_bridgeObjectRetain(v20);
  swift_release(v19);
  v22 = a1[4];
  if (v22)
  {
    swift_retain(a1[4]);
    sub_10008A874(v21, v20, 8, 12, 13, 0, 3u, v22);
    swift_bridgeObjectRelease(v20);
    swift_release(v22);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  }
  else
  {
    v23 = a1[5];
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000399A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v31[4];
  char v32;

  v4 = sub_100007D50(&qword_100159EC0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100007D50(&qword_100159EB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v31[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.leading.getter(v10);
  v6[1] = v11;
  v12 = sub_100007D50(&qword_100159EF0);
  v13 = (char *)v6 + *(int *)(v12 + 44);
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v13 + 1) = 0x4030000000000000;
  v13[16] = 0;
  v14 = sub_100007D50(&qword_100159EF8);
  v15 = sub_100039B90(a1, (uint64_t)&v13[*(int *)(v14 + 44)]);
  v16 = static Edge.Set.all.getter(v15);
  v31[0] = EdgeInsets.init(_all:)(16.0);
  v31[1] = v17;
  v31[2] = v18;
  v31[3] = v19;
  v32 = 0;
  sub_100007D50(&qword_100159F00);
  v20 = SafeAreaPaddingModifier.init(edges:insets:)(v16, v31);
  v21 = static Alignment.leading.getter(v20);
  sub_100043588(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v21, v22);
  v23 = sub_100007F38((uint64_t)v6, &qword_100159EC0);
  v24 = static Alignment.center.getter(v23);
  v26 = v25;
  v27 = a2 + *(int *)(sub_100007D50(&qword_100159E98) + 36);
  sub_10003AD08((uint64_t)a1, v27);
  v28 = (uint64_t *)(v27 + *(int *)(sub_100007D50(&qword_100159ED0) + 36));
  *v28 = v24;
  v28[1] = v26;
  return sub_100018EB4((uint64_t)v9, a2, &qword_100159EB0);
}

uint64_t sub_100039B90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];

  v58 = a2;
  v3 = sub_100007D50(&qword_100159F18);
  __chkstk_darwin(v3);
  v57 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - v6;
  v56 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v56);
  v9 = (_OWORD *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_100159F20);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100007D50(&qword_100159F28);
  __chkstk_darwin(v52);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100007D50(&qword_100159F30);
  __chkstk_darwin(v53);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v54 = (uint64_t)&v52 - v22;
  v55 = a1;
  v23 = a1[1];
  *(_QWORD *)&v60[0] = *a1;
  *((_QWORD *)&v60[0] + 1) = v23;
  v24 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v59, v24);
  v25 = v59;
  sub_10002A5C0((uint64_t)v12);
  swift_release(v25);
  v27 = static Animation.spring(response:dampingFraction:blendDuration:)(v26, 0.5, 1.0, 0.0);
  v28 = Transaction.init(animation:)(v27);
  v29 = sub_100007D50(&qword_100159F38);
  v30 = sub_10003CDA8();
  v31 = AsyncImage.init(url:scale:transaction:content:)(v12, v28, sub_100039FEC, 0, v29, v30, 1.0);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(v60, 0x4051800000000000, 0, 0x4051800000000000, 0, v32, v33);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v16, v13);
  v34 = &v18[*(int *)(v52 + 36)];
  v35 = v60[1];
  *(_OWORD *)v34 = v60[0];
  *((_OWORD *)v34 + 1) = v35;
  *((_OWORD *)v34 + 2) = v60[2];
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v36 = (char *)v9 + *(int *)(v56 + 20);
  v37 = enum case for RoundedCornerStyle.continuous(_:);
  v38 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v36, v37, v38);
  __asm { FMOV            V0.2D, #5.0 }
  *v9 = _Q0;
  v44 = (uint64_t)&v20[*(int *)(v53 + 36)];
  sub_10001BFB8((uint64_t)v9, v44, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v44 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v18, (uint64_t)v20, &qword_100159F28);
  sub_10001E24C((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100007F38((uint64_t)v18, &qword_100159F28);
  v45 = v54;
  v46 = sub_100018EB4((uint64_t)v20, v54, &qword_100159F30);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v46);
  *((_QWORD *)v7 + 1) = 0x4008000000000000;
  v7[16] = 0;
  v47 = sub_100007D50(&qword_100159F58);
  sub_10003A208(v55, (uint64_t)&v7[*(int *)(v47 + 44)]);
  sub_100007E78(v45, (uint64_t)v20, &qword_100159F30);
  v48 = v57;
  sub_100007E78((uint64_t)v7, v57, &qword_100159F18);
  v49 = v58;
  sub_100007E78((uint64_t)v20, v58, &qword_100159F30);
  v50 = sub_100007D50(&qword_100159F60);
  sub_100007E78(v48, v49 + *(int *)(v50 + 48), &qword_100159F18);
  sub_100007F38((uint64_t)v7, &qword_100159F18);
  sub_100007F38(v45, &qword_100159F30);
  sub_100007F38(v48, &qword_100159F18);
  return sub_100007F38((uint64_t)v20, &qword_100159F30);
}

uint64_t sub_100039FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v9 + 88))(v12, v8) == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v12, v8);
    v13 = *v12;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v14 = Image.resizable(capInsets:resizingMode:)(v7, v13, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v22 = v14;
    v23 = 0;
    swift_retain_n(v14, 2);
    v15 = sub_100007D50(&qword_100159F50);
    v16 = sub_10003CE14();
    _ConditionalContent<>.init(storage:)(&v22, &type metadata for Image, v15, &protocol witness table for Image, v16);
    swift_release_n(v14, 2);
    result = swift_release(v13);
    v18 = v24;
    v19 = v25;
  }
  else
  {
    v22 = static Color.gray.getter();
    v23 = 1;
    v20 = sub_100007D50(&qword_100159F50);
    v21 = sub_10003CE14();
    _ConditionalContent<>.init(storage:)(&v22, &type metadata for Image, v20, &protocol witness table for Image, v21);
    v18 = v24;
    v19 = v25;
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v12, v8);
  }
  *(_QWORD *)a2 = v18;
  *(_BYTE *)(a2 + 8) = v19;
  return result;
}

uint64_t sub_10003A208@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v111;
  int v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD v137[2];

  v124 = a2;
  v3 = type metadata accessor for SetlistDetailSection(0);
  v116 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v117 = v4;
  v118 = (uint64_t)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100007D50(&qword_100158648);
  v122 = *(_QWORD *)(v5 - 8);
  v123 = v5;
  __chkstk_darwin(v5);
  v119 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v7);
  v131 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v132 = *(_QWORD *)(v9 - 8);
  v133 = v9;
  __chkstk_darwin(v9);
  v114 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = v10;
  __chkstk_darwin(v11);
  v115 = (char *)&v113 - v12;
  v13 = sub_100007D50(&qword_100159F68);
  __chkstk_darwin(v13);
  v121 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v120 = (char *)&v113 - v16;
  v130 = sub_100007D50(&qword_100159638);
  __chkstk_darwin(v130);
  v128 = (uint64_t *)((char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v18);
  v126 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100007D50(&qword_100159648);
  __chkstk_darwin(v127);
  v21 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v134 = (uint64_t)&v113 - v23;
  v125 = a1;
  v24 = a1[1];
  v135 = *a1;
  v136 = v24;
  v129 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(v137, v129);
  v25 = v137[0];
  v26 = *(_QWORD *)(v137[0] + 80);
  v27 = *(_QWORD *)(v137[0] + 88);
  v28 = *(unsigned __int8 *)(v137[0] + 96);
  v29 = *(_QWORD *)(v137[0] + 104);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v29);
  swift_release(v25);
  LOWORD(v112) = 256;
  v30 = Text.init(_:tableName:bundle:comment:)(v26, v27, v28, v29, 0, 0, 0, 0, 0, v112);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v37 = static Font.caption2.getter(v30);
  static Font.Weight.semibold.getter();
  v38 = Font.weight(_:)(v37);
  swift_release(v37);
  v39 = Text.font(_:)(v38, v30, v32, v36, v34);
  v41 = v40;
  LOBYTE(v37) = v42;
  v44 = v43;
  swift_release(v38);
  LOBYTE(v38) = v37 & 1;
  sub_100007D90(v30, v32, v36);
  v45 = swift_bridgeObjectRelease(v34);
  LODWORD(v135) = static HierarchicalShapeStyle.secondary.getter(v45);
  v46 = Text.foregroundStyle<A>(_:)(&v135, v39, v41, v37 & 1, v44, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v48 = v47;
  v50 = v49;
  LOBYTE(v37) = v51 & 1;
  v52 = v41;
  v53 = v125;
  sub_100007D90(v39, v52, v38);
  swift_bridgeObjectRelease(v44);
  v54 = enum case for Text.Case.uppercase(_:);
  v55 = type metadata accessor for Text.Case(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (uint64_t)v126;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v126, v54, v55);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v55);
  KeyPath = swift_getKeyPath(&unk_10010A3B0);
  v59 = v128;
  sub_100007E78(v57, (uint64_t)v128 + *(int *)(v130 + 28), &qword_100159640);
  *v59 = KeyPath;
  sub_100007E78((uint64_t)v59, (uint64_t)&v21[*(int *)(v127 + 36)], &qword_100159638);
  *(_QWORD *)v21 = v46;
  *((_QWORD *)v21 + 1) = v48;
  v21[16] = v37;
  *((_QWORD *)v21 + 3) = v50;
  swift_bridgeObjectRetain(v50);
  sub_10000F844(v46, v48, v37);
  sub_100007F38((uint64_t)v59, &qword_100159638);
  sub_100007F38(v57, &qword_100159640);
  sub_100007D90(v46, v48, v37);
  swift_bridgeObjectRelease(v50);
  v128 = (uint64_t *)v21;
  sub_100018EB4((uint64_t)v21, v134, &qword_100159648);
  v60 = *v53;
  v61 = v53[1];
  v62 = (uint64_t)v53;
  v63 = v129;
  v135 = v60;
  v136 = v61;
  State.wrappedValue.getter(v137, v129);
  v64 = v137[0];
  v65 = *(_QWORD *)(v137[0] + 56);
  v66 = *(_QWORD *)(v137[0] + 64);
  sub_10001BF94((_QWORD *)(v137[0] + 32), v65);
  v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 40))(v65, v66);
  v69 = v68;
  swift_release(v64);
  if (v69)
  {
    v135 = v67;
    v136 = v69;
    sub_10001DB0C();
    v70 = Text.init<A>(_:)(&v135, &type metadata for String);
    v72 = v71;
    v127 = v73;
    v130 = v74 & 1;
  }
  else
  {
    v70 = 0;
    v72 = 0;
    v130 = 0;
    v127 = 0;
  }
  v135 = v60;
  v136 = v61;
  State.wrappedValue.getter(v137, v63);
  v75 = v137[0];
  v76 = *(_QWORD *)(v137[0] + 56);
  v77 = *(_QWORD *)(v137[0] + 64);
  sub_10001BF94((_QWORD *)(v137[0] + 32), v76);
  v78 = (uint64_t)v131;
  (*(void (**)(uint64_t, uint64_t))(v77 + 64))(v76, v77);
  swift_release(v75);
  v80 = v132;
  v79 = v133;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v78, 1, v133) == 1)
  {
    sub_100007F38(v78, &qword_100158658);
    v81 = 1;
    v82 = v123;
    v83 = v124;
    v85 = (uint64_t)v121;
    v84 = v122;
    v86 = (uint64_t)v120;
  }
  else
  {
    v87 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 32);
    v129 = v70;
    v88 = v115;
    v87(v115, v78, v79);
    v89 = v62;
    v90 = v118;
    sub_10001BFB8(v62, v118, type metadata accessor for SetlistDetailSection);
    v91 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
    v131 = v72;
    v92 = v114;
    v91(v114, v88, v79);
    v93 = *(unsigned __int8 *)(v116 + 80);
    v94 = (v93 + 16) & ~v93;
    v95 = *(unsigned __int8 *)(v80 + 80);
    v96 = (v117 + v95 + v94) & ~v95;
    v97 = swift_allocObject(&unk_1001498A8, v96 + v113, v93 | v95 | 7);
    sub_10003C9D4(v90, v97 + v94, type metadata accessor for SetlistDetailSection);
    v98 = v92;
    v72 = v131;
    v99 = ((uint64_t (*)(uint64_t, char *, uint64_t))v87)(v97 + v96, v98, v79);
    __chkstk_darwin(v99);
    v111 = v89;
    v100 = v119;
    Button.init(action:label:)(sub_10003D078, v97, sub_10003D100, &v113 - 4, &type metadata for Text, &protocol witness table for Text);
    v101 = v88;
    v70 = v129;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v101, v79);
    v84 = v122;
    v82 = v123;
    v86 = (uint64_t)v120;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v120, v100, v123);
    v81 = 0;
    v83 = v124;
    v85 = (uint64_t)v121;
  }
  v103 = v127;
  v102 = (uint64_t)v128;
  v104 = v134;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v86, v81, 1, v82);
  sub_100007E78(v104, v102, &qword_100159648);
  sub_100007E78(v86, v85, &qword_100159F68);
  sub_100007E78(v102, v83, &qword_100159648);
  v105 = sub_100007D50(&qword_100159F70);
  v106 = (uint64_t *)(v83 + *(int *)(v105 + 48));
  v107 = v70;
  *v106 = v70;
  v106[1] = (uint64_t)v72;
  v108 = (uint64_t)v72;
  v109 = v130;
  v106[2] = v130;
  v106[3] = v103;
  sub_100007E78(v85, v83 + *(int *)(v105 + 64), &qword_100159F68);
  sub_10003CEA0(v107, v108, v109, v103);
  sub_100007F38(v86, &qword_100159F68);
  sub_100007F38(v104, &qword_100159648);
  sub_100007F38(v85, &qword_100159F68);
  sub_10003CED0(v107, v108, v109, v103);
  return sub_100007F38(v102, &qword_100159648);
}

uint64_t sub_10003AABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for OpenURLAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SetlistDetailSection(0);
  sub_100018A2C((uint64_t)v6);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10003AB5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[2];
  uint64_t v36;

  v3 = a1[1];
  v35[0] = *a1;
  v35[1] = v3;
  v4 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(&v36, v4);
  v5 = v36;
  v6 = *(_QWORD *)(v36 + 112);
  v7 = *(_QWORD *)(v36 + 120);
  v8 = *(unsigned __int8 *)(v36 + 128);
  v9 = *(_QWORD *)(v36 + 136);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_release(v5);
  v10 = Text.init(_:tableName:bundle:comment:)(v6, v7, v8, v9, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter(v10);
  static Font.Weight.regular.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  LOBYTE(v18) = v23 & 1;
  sub_100007D90(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Color.blue.getter(v26);
  v35[0] = v27;
  v28 = Text.foregroundStyle<A>(_:)(v35, v19, v21, v23 & 1, v25, &type metadata for Color, &protocol witness table for Color);
  v30 = v29;
  LOBYTE(v16) = v31;
  v33 = v32;
  sub_100007D90(v19, v21, v18);
  swift_release(v27);
  result = swift_bridgeObjectRelease(v25);
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v30;
  *(_BYTE *)(a2 + 16) = v16 & 1;
  *(_QWORD *)(a2 + 24) = v33;
  return result;
}

uint64_t sub_10003AD08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v31[1] = a1;
  v33 = a2;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)v31 - v7;
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100007D50(&qword_100159F08);
  __chkstk_darwin(v12);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100007D50(&qword_100159F10);
  __chkstk_darwin(v32);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (char *)v11 + *(int *)(v9 + 20);
  v18 = enum case for RoundedCornerStyle.continuous(_:);
  v19 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  __asm { FMOV            V0.2D, #10.0 }
  *v11 = _Q0;
  type metadata accessor for SetlistDetailSection(0);
  sub_100018C18((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.light(_:), v2);
  LOBYTE(v17) = static ColorScheme.== infix(_:_:)(v8, v5);
  v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v5, v2);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v8, v2);
  if ((v17 & 1) != 0)
  {
    v27 = static Color.white.getter(v26);
  }
  else
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v27 = qword_10016A4B0;
    swift_retain(qword_10016A4B0);
  }
  sub_10001BFB8((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v14[*(int *)(v12 + 36)] = v27;
  sub_10001E24C((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  if (qword_100158078 != -1)
    swift_once(&qword_100158078, sub_100038684);
  v28 = qword_100159B10;
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_100159F08);
  v29 = &v16[*(int *)(v32 + 36)];
  *(_QWORD *)v29 = v28;
  *(_OWORD *)(v29 + 8) = xmmword_10010A170;
  *((_QWORD *)v29 + 3) = 0x4010000000000000;
  swift_retain(v28);
  sub_100007F38((uint64_t)v14, &qword_100159F08);
  return sub_100018EB4((uint64_t)v16, v33, &qword_100159F10);
}

uint64_t sub_10003AFFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_10003B068, v3, v4);
}

uint64_t sub_10003B068()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (uint64_t *)v0[5];
  v3 = *v1;
  v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100007D50(&qword_100159BE0);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  if (qword_100158080 != -1)
    swift_once(&qword_100158080, sub_1000386C4);
  v5 = qword_100159B18;
  v6 = (_QWORD *)swift_task_alloc(dword_1001597F4);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_10003B118;
  return sub_10002ACDC(v5);
}

uint64_t sub_10003B118()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2);
  return swift_task_switch(sub_10003B16C, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10003B16C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B19C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v4 = v2;
  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v12);
  v13 = sub_100007D50(&qword_100159E30);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v17 = sub_100007D50(&qword_100159E38);
  sub_100038704(v4, (uint64_t)&v15[*(int *)(v17 + 44)]);
  sub_10001BFB8(v4, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SetlistDetailSection);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_100149830, v19 + v11, v18 | 7);
  v21 = sub_10003C9D4((uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for SetlistDetailSection);
  static TaskPriority.userInitiated.getter(v21);
  v22 = (char *)(a2 + *(int *)(sub_100007D50(&qword_100159E50) + 36));
  v23 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v22[*(int *)(v23 + 20)], v9, v6);
  *(_QWORD *)v22 = &unk_100159E48;
  *((_QWORD *)v22 + 1) = v20;
  sub_100007E78((uint64_t)v15, a2, &qword_100159E30);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_100007F38((uint64_t)v15, &qword_100159E30);
}

uint64_t sub_10003B384@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100037000(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_10003B394()
{
  unint64_t result;

  result = qword_100159C80;
  if (!qword_100159C80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MusicItemID, &type metadata for MusicItemID);
    atomic_store(result, (unint64_t *)&qword_100159C80);
  }
  return result;
}

uint64_t sub_10003B3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for SetlistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v10 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10003B510()
{
  return sub_10003CBBC(type metadata accessor for SetlistView, sub_100037B90);
}

unint64_t sub_10003B524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159C90;
  if (!qword_100159C90)
  {
    v1 = sub_100007D00(&qword_100159C88);
    sub_10003B588();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100159C90);
  }
  return result;
}

unint64_t sub_10003B588()
{
  unint64_t result;

  result = qword_100159C98;
  if (!qword_100159C98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MusicItemID, &type metadata for MusicItemID);
    atomic_store(result, (unint64_t *)&qword_100159C98);
  }
  return result;
}

uint64_t sub_10003B5CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_10003B624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10003B67C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159CB8;
  if (!qword_100159CB8)
  {
    v1 = sub_100007D00(&qword_100159C18);
    sub_10003B794(&qword_100159CC0, &qword_100159C10, &qword_100159CC8, &qword_100159C08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159CB8);
  }
  return result;
}

unint64_t sub_10003B708()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159CD0;
  if (!qword_100159CD0)
  {
    v1 = sub_100007D00(&qword_100159BF8);
    sub_10003B794(&qword_100159CD8, &qword_100159BF0, &qword_100159CE0, &qword_100159BE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159CD0);
  }
  return result;
}

uint64_t sub_10003B794(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007D00(a2);
    sub_10000F4E0(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SetlistDetailSection(uint64_t a1)
{
  return sub_100025D84(a1, qword_100159DD8, (uint64_t)&nominal type descriptor for SetlistDetailSection);
}

uint64_t sub_10003B838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for SetlistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v20 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v10 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v13 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for UserInterfaceSizeClass(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v12, v14);
  }
  else
  {
    v16 = swift_release(*v12);
  }
  v17 = (v4 + v20 + v7) & ~v7;
  v18 = v17 + v8;
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v17, v5, v16);
  return swift_deallocObject(v0, v18, v3 | v7 | 7);
}

uint64_t sub_10003B9C4()
{
  return sub_10003D08C(type metadata accessor for SetlistView, (uint64_t (*)(unint64_t, unint64_t))sub_1000382B4);
}

uint64_t sub_10003B9D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100038354(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_10003B9E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159D10;
  if (!qword_100159D10)
  {
    v1 = sub_100007D00(&qword_100159D08);
    sub_10000F4E0(&qword_100158E08, &qword_100158E10, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159D10);
  }
  return result;
}

uint64_t sub_10003BA64()
{
  uint64_t *v0;

  return sub_10002A1F0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10003BA80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100037288(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10003BA88()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_100159D30;
  if (!qword_100159D30)
  {
    v1 = sub_100007D00(&qword_100159D28);
    v2 = sub_100007D00(&qword_100159D38);
    v4 = sub_100007D00(&qword_100159D40);
    v5 = type metadata accessor for PlainButtonStyle(255);
    v6 = sub_10000F4E0(&qword_100159D48, &qword_100159D40, (uint64_t)&protocol conformance descriptor for Button<A>);
    v7 = sub_100007428(&qword_100158570, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100159D30);
  }
  return result;
}

uint64_t sub_10003BB98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = a1[3];
  v3 = a1[4];
  sub_10001BF94(a1, v4);
  result = dispatch thunk of MusicItem.id.getter(v4, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_10003BBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SetlistView(0) - 8) + 80);
  return sub_10003751C(a1, (_QWORD *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_10003BC30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003BC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for SetlistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v10 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 40;
  sub_1000228FC((_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10003BDC4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SetlistView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000378B4(v0 + v2, (_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10003BE04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100037978(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10003BE0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159D70;
  if (!qword_100159D70)
  {
    v1 = sub_100007D00(&qword_100159D68);
    sub_100007428(&qword_100159D78, type metadata accessor for SetlistSongRowView, (uint64_t)&unk_100109060);
    sub_10000F4E0(&qword_100158D90, &qword_100158D98, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159D70);
  }
  return result;
}

uint64_t sub_10003BEA8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2[3];
    v10 = a2[4];
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = *(int *)(a3 + 28);
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 40) = a2[5];
    swift_retain(v5);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v10);
    v14 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = *(int *)(a3 + 32);
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

double sub_10003C040(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v5 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  v8 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_10003C12C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(int *)(a3 + 28);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  v14 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = *(int *)(a3 + 32);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
    v23 = 1;
  }
  else
  {
    v24 = *v20;
    *v19 = *v20;
    swift_retain(v24);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v21, v23);
  return a1;
}

uint64_t *sub_10003C290(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[5] = a2[5];
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_100007F38((uint64_t)a1 + v14, &qword_1001582E8);
    v17 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v21 = *(int *)(a3 + 32);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_100007F38((uint64_t)a1 + v21, &qword_100158AC0);
    v24 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  return a1;
}

_OWORD *sub_10003C448(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10003C580(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a1[3];
  a1[3] = a2[3];
  swift_release(v8);
  v9 = a1[4];
  a1[4] = a2[4];
  swift_release(v9);
  a1[5] = a2[5];
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_100007F38((uint64_t)a1 + v10, &qword_1001582E8);
    v13 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = *(int *)(a3 + 32);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_100007F38((uint64_t)a1 + v15, &qword_100158AC0);
    v18 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10003C720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C72C);
}

uint64_t sub_10003C72C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158B78);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = sub_100007D50(qword_100158F60);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10003C7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C7E0);
}

char *sub_10003C7E0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158B78);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = sub_100007D50(qword_100158F60);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_10003C884(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_10010A190;
  v6[1] = &unk_10010A1A8;
  v6[2] = &unk_10010A1A8;
  sub_10003C940(319, (unint64_t *)&qword_100158BE8, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003C940(319, (unint64_t *)&qword_100158FE8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_10003C940(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10003C98C()
{
  return sub_10003D13C(&qword_100159E20, &qword_100159BD8, &qword_100159E28, &qword_100159BB8);
}

uint64_t sub_10003C9C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116AFC, 1);
}

uint64_t sub_10003C9D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003CA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SetlistDetailSection(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100159E44);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003D1D4;
  return sub_10003AFFC(v3);
}

uint64_t sub_10003CA88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for SetlistDetailSection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v10 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10003CBA8()
{
  return sub_10003CBBC(type metadata accessor for SetlistDetailSection, (uint64_t (*)(uint64_t))sub_10003971C);
}

uint64_t sub_10003CBBC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v3 + 16) & ~v3));
}

uint64_t sub_10003CBFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000399A8(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10003CC04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159EA0;
  if (!qword_100159EA0)
  {
    v1 = sub_100007D00(&qword_100159E98);
    sub_10003CC88();
    sub_10000F4E0(&qword_100159EC8, &qword_100159ED0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159EA0);
  }
  return result;
}

unint64_t sub_10003CC88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159EA8;
  if (!qword_100159EA8)
  {
    v1 = sub_100007D00(&qword_100159EB0);
    sub_10000F4E0(&qword_100159EB8, &qword_100159EC0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159EA8);
  }
  return result;
}

unint64_t sub_10003CD0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159ED8;
  if (!qword_100159ED8)
  {
    v1 = sub_100007D00(&qword_100159E60);
    sub_10000F4E0(&qword_100159EE0, &qword_100159E58, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000E2C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159ED8);
  }
  return result;
}

uint64_t sub_10003CD94()
{
  return sub_10003CBBC(type metadata accessor for SetlistDetailSection, (uint64_t (*)(uint64_t))sub_1000395FC);
}

unint64_t sub_10003CDA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159F40;
  if (!qword_100159F40)
  {
    v1 = sub_100007D00(&qword_100159F38);
    sub_10003CE14();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159F40);
  }
  return result;
}

unint64_t sub_10003CE14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100159F48;
  if (!qword_100159F48)
  {
    v1 = sub_100007D00(&qword_100159F50);
    sub_100015E38();
    sub_10000F4E0(&qword_100158618, &qword_100158620, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100159F48);
  }
  return result;
}

uint64_t sub_10003CEA0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000F844(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10003CED0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100007D90(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10003CF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = type metadata accessor for SetlistDetailSection(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v19 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v10 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v13 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    v15 = swift_release(*v12);
  }
  v16 = (v4 + v19 + v7) & ~v7;
  v17 = v16 + v8;
  (*(void (**)(uint64_t, uint64_t, __n128))(v6 + 8))(v0 + v16, v5, v15);
  return swift_deallocObject(v0, v17, v3 | v7 | 7);
}

uint64_t sub_10003D078()
{
  return sub_10003D08C(type metadata accessor for SetlistDetailSection, (uint64_t (*)(unint64_t, unint64_t))sub_10003AABC);
}

uint64_t sub_10003D08C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return a2(v2 + v4, v2 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_10003D100@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003AB5C(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_10003D108()
{
  return sub_10003D13C(&qword_100159F78, &qword_100159E50, &qword_100159F80, &qword_100159E30);
}

uint64_t sub_10003D13C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007D00(a2);
    sub_10000F4E0(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003D1D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_10010A548);
  v7[0] = v1;
  v4 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver, v7, 0, 0);
  return sub_100007E78(v5, a1, (uint64_t *)&unk_10015D4A0);
}

uint64_t sub_10003D290@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A548);
  v8[0] = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver, v8, 0, 0);
  return sub_100007E78(v6, a2, (uint64_t *)&unk_10015D4A0);
}

uint64_t sub_10003D348(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  _BYTE v9[32];

  sub_100007E78(a1, (uint64_t)v9, (uint64_t *)&unk_10015D4A0);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A548);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100040828, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v9, (uint64_t *)&unk_10015D4A0);
}

uint64_t sub_10003D410(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(a1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver, v5, 33, 0);
  sub_1000404D4(a2, v3, (uint64_t *)&unk_10015D4A0);
  return swift_endAccess(v5);
}

void *sub_10003D480()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  v6 = v0;
  v2 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  v4 = v3;
  return v3;
}

id sub_10003D514@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  v8 = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  *a2 = v6;
  return v6;
}

void sub_10003D5A8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003FCA0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_10003D65C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_10010A4F8);
  v7[0] = v1;
  v4 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong, v7, 0, 0);
  return sub_100007E78(v5, a1, &qword_1001597E0);
}

uint64_t sub_10003D714@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A4F8);
  v8[0] = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess(v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong, v8, 0, 0);
  return sub_100007E78(v6, a2, &qword_1001597E0);
}

uint64_t sub_10003D7CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  _BYTE v9[40];

  sub_100007E78(a1, (uint64_t)v9, &qword_1001597E0);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A4F8);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004083C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return sub_100007F38((uint64_t)v9, &qword_1001597E0);
}

uint64_t sub_10003D894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess(a1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong, v5, 33, 0);
  sub_1000404D4(a2, v3, &qword_1001597E0);
  return swift_endAccess(v5);
}

void sub_10003D904(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double v6;
  double v7;
  double v10;
  uint64_t v11;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A570);
  v11 = v3;
  v5 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(double *)(v3 + 16);
  v7 = 1.0;
  if (v6 <= 1.0)
    v7 = *(double *)(v3 + 16);
  if ((*(_QWORD *)&v6 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0 || v6 < 0.0)
    v10 = 0.0;
  else
    v10 = v7;
  *a2 = v10;
}

double sub_10003D9C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010A570);
  v4 = v0;
  v2 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 16);
}

uint64_t sub_10003DA48()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010A520);
  v4 = v0;
  v2 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status);
}

void sub_10003DAD4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A520);
  v6 = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status);
}

double sub_10003DB68(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A520);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100040850, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_10003DC10()
{
  _BYTE *v0;
  objc_class *ObjectType;
  _OWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver];
  *v2 = 0u;
  v2[1] = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player] = 0;
  v3 = &v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status] = 0;
  v4 = OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock;
  v5 = type metadata accessor for PlaybackProgressUpdater(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v6 + 16) = 0;
  v7 = sub_100007D50(&qword_10015A0D8);
  v8 = swift_allocObject(v7, 20, 7);
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v8;
  v9 = v0;
  ObservationRegistrar.init()(v9);
  v10 = sub_100007D50((uint64_t *)&unk_10015A0E0);
  v11 = swift_allocObject(v10, 28, 7);
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = v6;
  *(_QWORD *)&v0[v4] = v11;
  ObservationRegistrar.init()(v11);

  v13.receiver = v9;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

void sub_10003DD58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v2 = v1;
  v4 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v4);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10010A4F8);
  v10 = v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer___observationRegistrar;
  v49[0] = v2;
  v44[0] = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  v44[1] = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v49, KeyPath, v44[0]);
  swift_release(KeyPath);
  v11 = v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong;
  swift_beginAccess(v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__currentSong, v48, 0, 0);
  sub_100007E78(v11, (uint64_t)v49, &qword_1001597E0);
  v12 = v50;
  if (v50)
  {
    v13 = v51;
    v14 = sub_10001BF94(v49, v50);
    v15 = *(_QWORD *)(v12 - 8);
    v16 = __chkstk_darwin(v14);
    v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v15 + 16))(v18, v16);
    sub_100007F38((uint64_t)v49, &qword_1001597E0);
    v19 = dispatch thunk of MusicItem.id.getter(v12, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v12);
  }
  else
  {
    sub_100007F38((uint64_t)v49, &qword_1001597E0);
    v19 = 0;
    v21 = 0;
  }
  v23 = a1[3];
  v22 = a1[4];
  sub_10001BF94(a1, v23);
  v24 = dispatch thunk of MusicItem.id.getter(v23, *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8));
  v26 = v25;
  if (v21)
  {
    if (v19 == v24 && v21 == v25)
    {
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v26);
LABEL_18:
      if (qword_1001581A8 != -1)
        swift_once(&qword_1001581A8, sub_1001046AC);
      v38 = type metadata accessor for Logger(0);
      v39 = sub_100029E7C(v38, (uint64_t)qword_10016A5B0);
      v34 = Logger.logObject.getter(v39);
      v35 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v34, v35))
        goto LABEL_23;
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      v37 = "Attempting to setup the same song already in the player";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v37, v36, 2u);
      swift_slowDealloc(v36, -1, -1);
LABEL_23:

      return;
    }
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v24, v25, 0);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v26);
    if ((v28 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    swift_bridgeObjectRelease(v25);
  }
  v29 = a1[3];
  v30 = a1[4];
  sub_10001BF94(a1, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 104))(v29, v30);
  v31 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v46) == 1)
  {
    sub_100007F38((uint64_t)v6, &qword_100158658);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100029E7C(v32, (uint64_t)qword_10016A5B0);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_23;
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    v37 = "Preview playback setup initiated but no song preview url to setup.";
    goto LABEL_22;
  }
  v40 = (uint64_t)v45;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v45, v6, v31);
  sub_10003E2A4();
  sub_10003BC30((uint64_t)a1, (uint64_t)v49);
  v41 = swift_getKeyPath(&unk_10010A4F8);
  __chkstk_darwin(v41);
  v44[-2] = v2;
  v44[-1] = v49;
  v47 = v2;
  v42 = v44[0];
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v47, v41, sub_10004033C, &v44[-4], (char *)&type metadata for () + 8, v44[0]);
  swift_release(v41);
  sub_100007F38((uint64_t)v49, &qword_1001597E0);
  v43 = swift_getKeyPath(&unk_10010A520);
  __chkstk_darwin(v43);
  v44[-2] = v2;
  LOBYTE(v44[-1]) = 1;
  v49[0] = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v49, v43, sub_10004035C, &v44[-4], (char *)&type metadata for () + 8, v42);
  swift_release(v43);
  sub_10003E538(v40);
  sub_10003E9CC();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v40, v31);
}

double sub_10003E2A4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSString v16;
  uint64_t v17;
  double result;
  _QWORD v19[5];
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  sub_10003F424();
  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  *(_QWORD *)&v23 = v0;
  v2 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v2);
  *(_QWORD *)&v3 = swift_release(KeyPath).n128_u64[0];
  v4 = OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player), "pause", v3);
  v5 = swift_getKeyPath(&unk_10010A548);
  *(_QWORD *)&v23 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v5, v2);
  swift_release(v5);
  v6 = v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver;
  swift_beginAccess(v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__playerTimeObserver, v20, 0, 0);
  sub_100007E78(v6, (uint64_t)&v21, (uint64_t *)&unk_10015D4A0);
  if (v22)
  {
    sub_100040554(&v21, &v23);
    v7 = swift_getKeyPath(&unk_10010A4D0);
    *(_QWORD *)&v21 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v7, v2);
    swift_release(v7);
    v8 = *(void **)(v0 + v4);
    if (v8)
    {
      v9 = v24;
      v10 = sub_10001BF94(&v23, v24);
      v11 = v8;
      v12 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v9);
      objc_msgSend(v11, "removeTimeObserver:", v12);

      swift_unknownObjectRelease(v12);
    }
    sub_1000228FC(&v23);
  }
  else
  {
    sub_100007F38((uint64_t)&v21, (uint64_t *)&unk_10015D4A0);
  }
  v13 = swift_getKeyPath(&unk_10010A4D0);
  *(_QWORD *)&v23 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v13, v2);
  swift_release(v13);
  v14 = *(void **)(v0 + v4);
  if (v14)
  {
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "removeObserver:forKeyPath:", v0, v16);

  }
  v17 = swift_getKeyPath(&unk_10010A4D0);
  __chkstk_darwin(v17);
  v19[2] = v0;
  v19[3] = 0;
  *(_QWORD *)&v23 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v17, sub_10003FCA0, v19, (char *)&type metadata for () + 8, v2);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

void sub_10003E538(uint64_t a1)
{
  void **v1;
  void **v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSURL *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSString v19;
  void *v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  CMTimeScale timescale;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  double v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  CMTimeValue value;
  uint64_t v41;
  CMTimeEpoch epoch;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char v51[16];
  void **v52;
  id v53;
  void **v54;
  void **aBlock;
  unint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t *);
  void *v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  CMTime v61;

  v2 = v1;
  v49 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v49 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v49);
  v48 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_allocWithZone((Class)AVURLAsset);
  v47 = a1;
  URL._bridgeToObjectiveC()(v7);
  v9 = v8;
  v10 = objc_msgSend(v6, "initWithURL:options:", v8, 0);

  v11 = objc_msgSend(objc_allocWithZone((Class)AVPlayerItem), "initWithAsset:", v10);
  v12 = objc_msgSend(objc_allocWithZone((Class)AVPlayer), "initWithPlayerItem:", v11);
  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  v52 = v2;
  v53 = v12;
  v14 = (char *)v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer___observationRegistrar;
  aBlock = v2;
  v15 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  v50 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, KeyPath, sub_10003FCA0, v51, (char *)&type metadata for () + 8, v15);
  swift_release(KeyPath);

  v16 = swift_getKeyPath(&unk_10010A4D0);
  aBlock = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, v16, v15);
  swift_release(v16);
  v17 = *(void **)((char *)v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  if (v17)
  {
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    v46 = 0;
    v20 = v19;
    objc_msgSend(v18, "addObserver:forKeyPath:options:context:", v2, v19, 1, 0);

    v21 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v18, "currentItem");
    v44 = v15;
    v45 = v14;
    v24 = v23;
    objc_msgSend(v21, "addObserver:selector:name:object:", v2, "playerDidFinishPlaying", v22, v23);

    v61 = CMTime.init(value:timescale:)(1, 5);
    value = v61.value;
    timescale = v61.timescale;
    epoch = v61.epoch;
    v41 = HIDWORD(*(_QWORD *)&v61.timescale);
    sub_100040374();
    v26 = (void *)static OS_dispatch_queue.main.getter();
    v43 = v11;
    v27 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
    v28 = v48;
    v29 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v48, v47, v49);
    v30 = *(unsigned __int8 *)(v4 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject(&unk_100149968, v31 + v5, v30 | 7);
    *(_QWORD *)(v32 + 16) = v27;
    *(_QWORD *)(v32 + 24) = v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v32 + v31, v28, v29);
    v59 = sub_10004042C;
    v60 = v32;
    aBlock = _NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10003F3D0;
    v58 = &unk_100149980;
    v33 = _Block_copy(&aBlock);
    v34 = v60;
    v35 = v18;
    swift_retain(v27);
    *(_QWORD *)&v36 = swift_release(v34).n128_u64[0];
    aBlock = (void **)value;
    v56 = __PAIR64__(v41, timescale);
    v57 = (uint64_t (*)(uint64_t, uint64_t *))epoch;
    v37 = objc_msgSend(v35, "addPeriodicTimeObserverForInterval:queue:usingBlock:", &aBlock, v26, v33, v36);
    _Block_release(v33);

    _bridgeAnyObjectToAny(_:)(&aBlock, v37);
    swift_unknownObjectRelease(v37);
    v38 = swift_getKeyPath(&unk_10010A548);
    __chkstk_darwin(v38);
    *(&v39 - 2) = (uint64_t)v2;
    *(&v39 - 1) = (uint64_t)&aBlock;
    v54 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v54, v38, sub_1000404A4, &v39 - 4, v50, v44);
    swift_release(v38);
    sub_100007F38((uint64_t)&aBlock, (uint64_t *)&unk_10015D4A0);

  }
  else
  {

  }
}

void sub_10003E9CC()
{
  char *v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  double v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23[8];
  uint64_t v24;
  char *v25;

  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  v25 = v0;
  v2 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v2);
  *(_QWORD *)&v3 = swift_release(KeyPath).n128_u64[0];
  v4 = OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player;
  v5 = *(void **)&v0[OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player];
  if (v5 && (v6 = objc_msgSend(v5, "error", v3)) != 0)
  {

    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v7 = type metadata accessor for Logger(0);
    sub_100029E7C(v7, (uint64_t)qword_10016A5B0);
    v8 = v0;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v25 = (char *)v21;
      *(_DWORD *)v11 = 136315138;
      v12 = swift_getKeyPath(&unk_10010A4D0);
      v24 = (uint64_t)v8;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v12, v2);
      *(_QWORD *)&v13 = swift_release(v12).n128_u64[0];
      v14 = *(void **)&v0[v4];
      if (v14 && (v15 = objc_msgSend(v14, "error", v13)) != 0)
      {
        v16 = v15;
        swift_getErrorValue(v15, v23, v22);
        v17 = Error.localizedDescription.getter(v22[1], v22[2]);
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0xE000000000000000;
      }
      v24 = sub_10003FCB4(v17, v19, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v11 + 4, v11 + 12);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Playback initiated but player has error: %s", v11, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v20 = swift_getKeyPath(&unk_10010A4D0);
    v25 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v20, v2);
    objc_msgSend(*(id *)&v0[v4], "play", swift_release(v20).n128_f64[0]);
  }
}

id sub_10003ECB0()
{
  void *v0;
  objc_class *ObjectType;
  double v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_10003E2A4();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc", v2);
}

uint64_t sub_10003EDD8()
{
  return type metadata accessor for MusicPreviewPlayer(0);
}

uint64_t type metadata accessor for MusicPreviewPlayer(uint64_t a1)
{
  return sub_100025D84(a1, (uint64_t *)&unk_100159FE0, (uint64_t)&nominal type descriptor for MusicPreviewPlayer);
}

void sub_10003EF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  os_unfair_lock_s *v12;

  v12 = (os_unfair_lock_s *)(a4 + 24);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(a4 + 24)))
  {
    sub_10003EFBC((uint64_t *)(a4 + 16), a5, a6, a1, a2, a3);
    os_unfair_lock_unlock(v12);
  }
}

void sub_10003EFBC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t KeyPath;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  double (*v41)();
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t *v46;
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49;

  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)&v14 = __chkstk_darwin(v12).n128_u64[0];
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a2, "currentItem", v14);
  if (!v17)
  {
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v23 = type metadata accessor for Logger(0);
    sub_100029E7C(v23, (uint64_t)qword_10016A5B0);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3, v12);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v46 = a1;
      v28 = (uint8_t *)v27;
      v29 = swift_slowAlloc(32, -1);
      v47[0] = v29;
      *(_DWORD *)v28 = 136315138;
      v45 = v28 + 4;
      v30 = sub_100007428(&qword_100159688, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v12, v30);
      v33 = v32;
      v48 = sub_10003FCB4(v31, v32, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v45, v28 + 12);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid or missing duration for current item %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      v34 = v28;
      a1 = v46;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    }

    v35 = *a1;
    v36 = (os_unfair_lock_s *)(*(_QWORD *)(*a1 + 24) + 16);
    os_unfair_lock_lock(v36);
    KeyPath = swift_getKeyPath(&unk_10010A570);
    __chkstk_darwin(KeyPath);
    v38 = &v44 - 4;
    *(&v44 - 2) = v35;
    *(&v44 - 1) = 0;
    v47[0] = v35;
    v39 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
    v40 = (char *)&type metadata for () + 8;
    v41 = sub_1000404C4;
    goto LABEL_13;
  }
  v18 = v17;
  objc_msgSend(v17, "duration");
  v19 = v47[0];
  v20 = v47[1];
  v21 = v47[2];

  v22 = CMTime.seconds.getter(v19, v20, v21);
  if (v22 > 0.0 && ((~*(_QWORD *)&v22 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v22 & 0xFFFFFFFFFFFFFLL) == 0))
  {
    v42 = CMTime.seconds.getter(a4, a5, a6) / v22;
    v43 = *a1;
    v36 = (os_unfair_lock_s *)(*(_QWORD *)(*a1 + 24) + 16);
    os_unfair_lock_lock(v36);
    KeyPath = swift_getKeyPath(&unk_10010A570);
    __chkstk_darwin(KeyPath);
    v38 = &v44 - 4;
    *(&v44 - 2) = v43;
    *((double *)&v44 - 1) = v42;
    v47[0] = v43;
    v39 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
    v40 = (char *)&type metadata for () + 8;
    v41 = sub_100040864;
LABEL_13:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v47, KeyPath, v41, v38, v40, v39);
    swift_release(KeyPath);
    os_unfair_lock_unlock(v36);
  }
}

uint64_t sub_10003F3D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(v2, v3, v4);
  return swift_release(v5);
}

uint64_t sub_10003F424()
{
  CMTimeValue v0;
  CMTimeValue v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *v12;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v16;
  _BYTE v18[16];
  CMTimeValue v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  CMTimeValue v24;
  CMTimeScale v25;
  CMTimeFlags v26;
  CMTimeEpoch v27;
  CMTimeValue value;
  CMTimeScale v29;
  CMTimeFlags v30;
  CMTimeEpoch v31;

  v1 = v0;
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100029E7C(v2, (uint64_t)qword_10016A5B0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Preview Playback ended.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(v7 + 24)))
  {
    sub_10003F6F0((uint64_t *)(v7 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  }
  KeyPath = swift_getKeyPath(&unk_10010A520);
  __chkstk_darwin(KeyPath);
  v19 = v1;
  LOBYTE(v20) = 0;
  *(_QWORD *)&v21 = v1;
  v9 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_100040850, v18, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  v10 = swift_getKeyPath(&unk_10010A4D0);
  *(_QWORD *)&v21 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v10, v9);
  *(_QWORD *)&v11 = swift_release(v10).n128_u64[0];
  v12 = *(void **)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  if (v12)
  {
    timescale = kCMTimeZero.timescale;
    flags = kCMTimeZero.flags;
    epoch = kCMTimeZero.epoch;
    *(_QWORD *)&v21 = kCMTimeZero.value;
    *((_QWORD *)&v21 + 1) = __PAIR64__(flags, timescale);
    *(_QWORD *)&v22 = epoch;
    v27 = epoch;
    value = kCMTimeZero.value;
    v29 = timescale;
    v30 = flags;
    v31 = epoch;
    v24 = kCMTimeZero.value;
    v25 = timescale;
    v26 = flags;
    objc_msgSend(v12, "seekToTime:toleranceBefore:toleranceAfter:", &v21, &value, &v24, v11);
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v16 = swift_getKeyPath(&unk_10010A4F8);
  __chkstk_darwin(v16);
  v19 = v1;
  v20 = &v21;
  value = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&value, v16, sub_10004083C, v18, (char *)&type metadata for () + 8, v9);
  swift_release(v16);
  return sub_100007F38((uint64_t)&v21, &qword_1001597E0);
}

void sub_10003F6F0(uint64_t *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t KeyPath;
  uint64_t v4;
  _QWORD v5[4];
  uint64_t v6;

  v1 = *a1;
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(*a1 + 24) + 16);
  os_unfair_lock_lock(v2);
  KeyPath = swift_getKeyPath(&unk_10010A570);
  v5[2] = v1;
  v5[3] = 0;
  v6 = v1;
  v4 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_100040864, v5, (char *)&type metadata for () + 8, v4);
  swift_release(KeyPath);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_10003F7F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = " ";
  v4[1] = &unk_10010A410;
  v4[2] = &unk_10010A428;
  v4[3] = &unk_10010A440;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_10003F894()
{
  _QWORD *v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  double v5;

  v1 = *(os_unfair_lock_s **)(*v0 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_10003D904(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_10003F8FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_10010A520);
  v5 = v1;
  v3 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status);
}

void sub_10003F988(_QWORD *a1)
{
  sub_10003DD58(a1);
}

void sub_10003F9A8()
{
  sub_10003E9CC();
}

id sub_10003F9C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_10010A4D0);
  v5 = v1;
  v3 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v3);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player), "pause", swift_release(KeyPath).n128_f64[0]);
}

double sub_10003FA60@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A570);
  v7 = v3;
  v5 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

void sub_10003FAEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010A570);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100007428(&qword_10015A0D0, type metadata accessor for PlaybackProgressUpdater, (uint64_t)&unk_10010A488);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100040864, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

uint64_t sub_10003FB9C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[3]);
  v1 = (char *)v0
     + OBJC_IVAR____TtC15ShazamEventsAppP33_8D663A7C818D454EECC930098910A96A23PlaybackProgressUpdater___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10003FBF4()
{
  return type metadata accessor for PlaybackProgressUpdater(0);
}

uint64_t type metadata accessor for PlaybackProgressUpdater(uint64_t a1)
{
  return sub_100025D84(a1, qword_10015A020, (uint64_t)&nominal type descriptor for PlaybackProgressUpdater);
}

uint64_t sub_10003FC10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10003FCA0()
{
  sub_100040518();
}

uint64_t sub_10003FCB4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10003FD84(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000402F4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000402F4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000228FC(v12);
  return v7;
}

uint64_t sub_10003FD84(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10003FF3C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003FF3C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10003FFD0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000401A8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000401A8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10003FFD0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100040144(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100040144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100007D50(&qword_10015A0C0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000401A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100007D50(&qword_10015A0C0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000402F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10004033C()
{
  uint64_t v0;

  return sub_10003D894(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10004035C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__status) = *(_BYTE *)(v0 + 24);
}

unint64_t sub_100040374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A0C8;
  if (!qword_10015A0C8)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015A0C8);
  }
  return result;
}

uint64_t sub_1000403B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10004042C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_10003EF1C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), v3 + ((v7 + 32) & ~v7));
}

uint64_t sub_100040484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100040494(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000404A4()
{
  uint64_t v0;

  return sub_10003D410(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1000404C4()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 16) = result;
  return result;
}

uint64_t sub_1000404D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100007D50(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void sub_100040518()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer__player) = v2;
  v4 = v2;

}

_OWORD *sub_100040554(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_100040564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSString *v7;
  unint64_t v8;
  char v9;
  double v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  os_unfair_lock_s *v13;
  uint64_t KeyPath;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  __int128 v21;
  __int128 v22;

  if (!a2)
    return;
  v5 = v4;
  if ((a1 != 1702125938 || a2 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 1702125938, 0xE400000000000000, 0) & 1) == 0)
  {
    return;
  }
  if (!a4 || !*(_QWORD *)(a4 + 16))
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_17;
  }
  v7 = NSKeyValueChangeNewKey;
  v8 = sub_100086EE4((uint64_t)v7);
  if ((v9 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;

    goto LABEL_17;
  }
  sub_1000402F4(*(_QWORD *)(a4 + 56) + 32 * v8, (uint64_t)&v21);

  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_17:
    sub_100007F38((uint64_t)&v21, (uint64_t *)&unk_10015D4A0);
    return;
  }
  if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
  {
    v10 = v20;
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      v11 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC15ShazamEventsApp18MusicPreviewPlayer_lock);
      v12 = (uint64_t *)&v11[4];
      v13 = v11 + 6;
      os_unfair_lock_lock(v11 + 6);
      sub_10003D904(v12, (double *)&v21);
      os_unfair_lock_unlock(v13);
      if ((~(_QWORD)v21 & 0x7FF0000000000000) != 0 || (v21 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        os_unfair_lock_lock(v13);
        sub_10003D904(v12, (double *)&v21);
        os_unfair_lock_unlock(v13);
        if (*(double *)&v21 > 0.0)
        {
          KeyPath = swift_getKeyPath(&unk_10010A520);
          __chkstk_darwin(KeyPath);
          v18 = v5;
          v19 = 3;
          *(_QWORD *)&v21 = v5;
          v15 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
          v16 = (char *)&type metadata for () + 8;
LABEL_21:
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, KeyPath, sub_100040850, &v17, v16, v15);
          swift_release(KeyPath);
          return;
        }
      }
    }
    if (v10 != 0.0)
    {
      KeyPath = swift_getKeyPath(&unk_10010A520);
      __chkstk_darwin(KeyPath);
      v18 = v5;
      v19 = 2;
      *(_QWORD *)&v21 = v5;
      v15 = sub_100007428(&qword_10015A0B8, type metadata accessor for MusicPreviewPlayer, (uint64_t)&unk_10010A4A4);
      v16 = (char *)&type metadata for () + 8;
      goto LABEL_21;
    }
  }
}

uint64_t sub_100040828()
{
  return sub_1000404A4();
}

uint64_t sub_10004083C()
{
  return sub_10004033C();
}

void sub_100040850()
{
  sub_10004035C();
}

double sub_100040864()
{
  return sub_1000404C4();
}

uint64_t sub_100040878()
{
  return 1;
}

Swift::Int sub_100040880()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000408C0()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000408E4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100040930()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch(sub_100040948, 0, 0);
}

uint64_t sub_100040948()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[5];
  v2 = swift_allocObject(&unk_1001499C8, 24, 7);
  v0[6] = v2;
  swift_unknownObjectWeakInit(v2 + 16, v1);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v3;
  v4 = sub_100007D50(&qword_10015A1C0);
  *v3 = v0;
  v3[1] = sub_100040A0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000011, 0x8000000100113910, sub_100041358, v2, v4);
}

uint64_t sub_100040A0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100013F18;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 48));
    v4 = sub_100040A78;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100040A78()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

void sub_100040A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t Strong;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE v13[24];
  char v14[24];

  v4 = sub_100007D50(&qword_10015A1B0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v8 = (char *)Strong;
    v9 = sub_100007D50(&qword_10015A140);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v6, a1, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    v11 = (uint64_t)&v8[OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation];
    swift_beginAccess(&v8[OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation], v13, 33, 0);
    sub_1000412AC((uint64_t)v6, v11);
    swift_endAccess(v13);
    v12 = *(void **)&v8[OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_manager];
    objc_msgSend(v12, "setDelegate:", v8);
    objc_msgSend(v12, "setDesiredAccuracy:", kCLLocationAccuracyKilometer);
    objc_msgSend(v12, "startUpdatingLocation");

  }
}

uint64_t sub_100040BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[3];
  _BYTE v13[24];

  v1 = sub_100007D50(&qword_10015A1B0);
  __chkstk_darwin(v1);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015A140);
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v6 = __chkstk_darwin(v4).n128_u64[0];
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_manager), "stopUpdatingLocation", v6);
  v9 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation;
  swift_beginAccess(v0 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation, v13, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
    v10 = sub_100041360();
    v12[0] = swift_allocError(&type metadata for LocationManager.RequestError, v10, 0, 0);
    CheckedContinuation.resume(throwing:)(v12, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  swift_beginAccess(v9, v12, 33, 0);
  sub_1000412AC((uint64_t)v3, v9);
  return swift_endAccess(v12);
}

id sub_100040E28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100040E94()
{
  return type metadata accessor for LocationManager(0);
}

uint64_t type metadata accessor for LocationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A128;
  if (!qword_10015A128)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationManager);
  return result;
}

void sub_100040ED8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100040F54(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100040F54(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_10015A138)
  {
    sub_100007D00(&qword_10015A140);
    v2 = type metadata accessor for Optional(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_10015A138);
  }
}

unint64_t sub_100040FAC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  BOOL v24;
  _BYTE v25[24];

  v5 = sub_100007D50(&qword_10015A1B0);
  __chkstk_darwin(v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015A140);
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = __chkstk_darwin(v8).n128_u64[0];
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "stopUpdatingLocation", v10);
  v13 = v2 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC15ShazamEventsApp15LocationManager_checkedThrowingContinuation, v25, 0, 0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    goto LABEL_16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
  if (!((unint64_t)a2 >> 62))
  {
    v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v14)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease(a2);
    v19 = 0;
    v21 = 0;
    goto LABEL_15;
  }
  if (a2 < 0)
    v22 = a2;
  else
    v22 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v14 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v14)
    goto LABEL_14;
LABEL_4:
  result = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_18:
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(a2 + 8 * result + 32);
LABEL_9:
    v17 = v16;
    swift_bridgeObjectRelease(a2);
    objc_msgSend(v17, "coordinate");
    v19 = v18;
    v21 = v20;

LABEL_15:
    v23[0] = v19;
    v23[1] = v21;
    v24 = v14 == 0;
    CheckedContinuation.resume(returning:)(v23, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
LABEL_16:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    swift_beginAccess(v13, v23, 33, 0);
    sub_1000412AC((uint64_t)v7, v13);
    return swift_endAccess(v23);
  }
  __break(1u);
  return result;
}

unint64_t sub_100041270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A1A8;
  if (!qword_10015A1A8)
  {
    v1 = objc_opt_self(CLLocation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10015A1A8);
  }
  return result;
}

uint64_t sub_1000412AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015A1B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000412F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015A1B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100041334()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100041358(uint64_t a1)
{
  uint64_t v1;

  sub_100040A8C(a1, v1);
}

unint64_t sub_100041360()
{
  unint64_t result;

  result = qword_10015A1C8;
  if (!qword_10015A1C8)
  {
    result = swift_getWitnessTable(&unk_10010A638, &type metadata for LocationManager.RequestError);
    atomic_store(result, (unint64_t *)&qword_10015A1C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationManager.RequestError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for LocationManager.RequestError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100041438 + 4 * byte_10010A598[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100041458 + 4 * byte_10010A59D[v4]))();
}

_BYTE *sub_100041438(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100041458(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100041460(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100041468(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100041470(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100041478(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100041484()
{
  return 0;
}

ValueMetadata *type metadata accessor for LocationManager.RequestError()
{
  return &type metadata for LocationManager.RequestError;
}

unint64_t sub_1000414A0()
{
  unint64_t result;

  result = qword_10015A1D0;
  if (!qword_10015A1D0)
  {
    result = swift_getWitnessTable(&unk_10010A610, &type metadata for LocationManager.RequestError);
    atomic_store(result, (unint64_t *)&qword_10015A1D0);
  }
  return result;
}

unint64_t sub_1000414EC(uint64_t a1)
{
  unint64_t result;

  result = sub_100041510();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100041510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A240;
  if (!qword_10015A240)
  {
    v1 = type metadata accessor for Artwork(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Artwork, v1);
    atomic_store(result, (unint64_t *)&qword_10015A240);
  }
  return result;
}

uint64_t destroy for EmptyEventsList(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for EmptyEventsList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyEventsList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyEventsList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyEventsList()
{
  return &type metadata for EmptyEventsList;
}

uint64_t sub_100041714(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116C70, 1);
}

uint64_t sub_100041724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  char v77;
  char v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v61 = sub_100007D50(&qword_10015A248);
  __chkstk_darwin(v61);
  v63 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v60);
  v59 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015A250);
  __chkstk_darwin(v12);
  v62 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static VerticalAlignment.center.getter(v14);
  v16 = sub_100041B40(a1, a2, a3, a4, (uint64_t)&v81);
  v17 = v81;
  v58 = v81;
  v18 = v82;
  v19 = v83;
  LOBYTE(a3) = v84;
  v20 = *((_QWORD *)&v84 + 1);
  v21 = static Edge.Set.all.getter(v16);
  v80 = 0;
  v79 = a3;
  v78 = 1;
  v66 = v15;
  v67 = 0x402E000000000000;
  v68 = 0;
  v69 = v17;
  v70 = v18;
  v71 = v19;
  v72 = a3;
  v73 = v20;
  v74 = v21;
  v75 = 0u;
  v76 = 0u;
  v77 = 1;
  v22 = static Alignment.leading.getter(v21);
  sub_1000435E0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v81, 0.0, 1, 0.0, 1, v22, v23);
  v24 = v59;
  swift_release(*((_QWORD *)&v17 + 1));
  swift_release(v58);
  swift_release(v18);
  sub_100007D90(v19, *((uint64_t *)&v19 + 1), a3);
  swift_bridgeObjectRelease(v20);
  v25 = (char *)v24 + *(int *)(v60 + 20);
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  __asm { FMOV            V0.2D, #12.0 }
  *v24 = _Q0;
  if (qword_100158098 != -1)
    swift_once(&qword_100158098, sub_100051410);
  v33 = qword_10016A4B0;
  swift_retain(qword_10016A4B0);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v64, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  v34 = v62;
  sub_10000F760((uint64_t)v24, v62);
  v35 = v34 + *(int *)(sub_100007D50(&qword_10015A258) + 36);
  v36 = v64[1];
  *(_OWORD *)v35 = v64[0];
  *(_OWORD *)(v35 + 16) = v36;
  *(_QWORD *)(v35 + 32) = v65;
  v37 = sub_100007D50(&qword_10015A260);
  *(_QWORD *)(v34 + *(int *)(v37 + 52)) = v33;
  *(_WORD *)(v34 + *(int *)(v37 + 56)) = 256;
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = (uint64_t *)(v34 + *(int *)(sub_100007D50(&qword_10015A268) + 36));
  *v41 = v38;
  v41[1] = v40;
  v42 = sub_10000F854((uint64_t)v24);
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v46 = v63;
  sub_100007E78(v34, v63, &qword_10015A250);
  v47 = (uint64_t *)(v46 + *(int *)(v61 + 36));
  *v47 = v43;
  v47[1] = v45;
  v48 = sub_100007D50(&qword_10015A270);
  sub_100007E78(v46, a5 + *(int *)(v48 + 36), &qword_10015A248);
  v49 = v94;
  *(_OWORD *)(a5 + 192) = v93;
  *(_OWORD *)(a5 + 208) = v49;
  *(_OWORD *)(a5 + 224) = v95;
  *(_QWORD *)(a5 + 240) = v96;
  v50 = v90;
  *(_OWORD *)(a5 + 128) = v89;
  *(_OWORD *)(a5 + 144) = v50;
  v51 = v92;
  *(_OWORD *)(a5 + 160) = v91;
  *(_OWORD *)(a5 + 176) = v51;
  v52 = v86;
  *(_OWORD *)(a5 + 64) = v85;
  *(_OWORD *)(a5 + 80) = v52;
  v53 = v88;
  *(_OWORD *)(a5 + 96) = v87;
  *(_OWORD *)(a5 + 112) = v53;
  v54 = v82;
  *(_OWORD *)a5 = v81;
  *(_OWORD *)(a5 + 16) = v54;
  v55 = v84;
  *(_OWORD *)(a5 + 32) = v83;
  *(_OWORD *)(a5 + 48) = v55;
  sub_100041D44((uint64_t)&v81);
  sub_100007F38(v46, &qword_10015A248);
  sub_100007F38(v34, &qword_10015A250);
  return sub_100041DBC((uint64_t)&v81);
}

uint64_t sub_100041B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;

  v37 = Image.init(systemName:)(0xD000000000000012, 0x8000000100113930);
  v36 = static Font.title2.getter(v37);
  KeyPath = swift_getKeyPath(&unk_10010A708);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v10 = Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.subheadline.getter(v10);
  v18 = Text.font(_:)(v17, v10, v12, v16, v14);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_release(v17);
  v25 = v22 & 1;
  sub_100007D90(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Font.Weight.medium.getter(v26);
  v28 = Text.fontWeight(_:)(*(_QWORD *)&v27, 0, v18, v20, v25, v24);
  v30 = v29;
  v32 = v31;
  LOBYTE(v16) = v33 & 1;
  sub_100007D90(v18, v20, v25);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)a5 = v37;
  *(_QWORD *)(a5 + 8) = KeyPath;
  *(_QWORD *)(a5 + 16) = v36;
  *(_QWORD *)(a5 + 24) = 0x3FE6666666666666;
  *(_QWORD *)(a5 + 32) = v28;
  *(_QWORD *)(a5 + 40) = v30;
  *(_BYTE *)(a5 + 48) = v16;
  *(_QWORD *)(a5 + 56) = v32;
  swift_retain(v37);
  swift_retain(KeyPath);
  swift_retain(v36);
  sub_10000F844(v28, v30, v16);
  swift_bridgeObjectRetain(v32);
  sub_100007D90(v28, v30, v16);
  swift_release(v36);
  swift_release(KeyPath);
  swift_release(v37);
  return swift_bridgeObjectRelease(v32);
}

uint64_t sub_100041D34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100041724(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100041D44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  swift_retain(*(_QWORD *)(a1 + 40));
  swift_retain(v2);
  swift_retain(v3);
  sub_10000F844(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100041DBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(v2);
  swift_release(v3);
  sub_100007D90(v4, v5, v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

unint64_t sub_100041E40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A278;
  if (!qword_10015A278)
  {
    v1 = sub_100007D00(&qword_10015A270);
    sub_100041EC4();
    sub_10000F4E0(qword_10015A2B0, &qword_10015A248, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A278);
  }
  return result;
}

unint64_t sub_100041EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A280;
  if (!qword_10015A280)
  {
    v1 = sub_100007D00(&qword_10015A288);
    sub_100041F30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A280);
  }
  return result;
}

unint64_t sub_100041F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A290;
  if (!qword_10015A290)
  {
    v1 = sub_100007D00(&qword_10015A298);
    sub_10000F4E0(&qword_10015A2A0, &qword_10015A2A8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A290);
  }
  return result;
}

uint64_t sub_100041FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(v2, v1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_10011797C);
  v4 = type metadata accessor for Array(0, AssociatedTypeWitness);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  Collection.first.getter(v4, WitnessTable);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_100042060(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_10004206C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a4, a1, a2);
  v8 = a4 + *(int *)(type metadata accessor for GuideViewModel(0, a2, a3, v7) + 36);
  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000020, 0x8000000100113950);
  *(_QWORD *)v8 = result;
  *(_QWORD *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + 16) = v11 & 1;
  *(_QWORD *)(v8 + 24) = v12;
  return result;
}

uint64_t type metadata accessor for GuideViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GuideViewModel);
}

uint64_t sub_100042100(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = " ";
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_100042174(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000421F0 + 4 * byte_10010A738[v10]))();
  }
}

void sub_100042274(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_100042368()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1000423E4);
}

void sub_100042370(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100042378);
  JUMPOUT(0x1000423E4);
}

void sub_1000423BC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000423E4);
}

void sub_1000423C4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1000423E4);
}

uint64_t sub_1000423CC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1000423D8);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1000423E4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_1000423FC()
{
  return sub_100007428(&qword_10015A338, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhoneWallpaper, (uint64_t)&unk_10010ADB0);
}

uint64_t sub_100042428()
{
  return sub_100007428(&qword_10015A340, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.PhotoAlbum, (uint64_t)&unk_100108A1C);
}

uint64_t sub_100042454()
{
  return sub_100007428(&qword_10015A348, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.Video, (uint64_t)&unk_100108DA0);
}

uint64_t sub_100042480()
{
  return sub_100007428(&qword_10015A350, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets.WatchFace, (uint64_t)&unk_10010ED40);
}

uint64_t sub_1000424BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1000424D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Optional(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_100042510(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_1000426C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100042788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

double sub_100042850@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100158C28, &qword_100158C30).n128_u64[0];
  return result;
}

double sub_1000428A8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100158C70, &qword_100158C78).n128_u64[0];
  return result;
}

__n128 sub_100042900@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100007E78(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100007D50(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_100042ACC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100158CD0, &qword_100158CD8).n128_u64[0];
  return result;
}

double sub_100042B24@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100158CB0, &qword_100158CB8).n128_u64[0];
  return result;
}

uint64_t sub_100042B7C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter();
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_10000F844(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

__n128 sub_100042D5C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter();
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_100007D50(&qword_100158DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100007D50(&qword_100158D88) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

double sub_100042F28@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100158E38, &qword_100158E40).n128_u64[0];
  return result;
}

double sub_100042F80@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100158E60, &qword_100158E68).n128_u64[0];
  return result;
}

_QWORD *sub_100042FD8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v52 = a7;
    v50 = a1;
    v51 = a5;
    v49 = a3;
    v48 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v48;
    a3 = v49;
    a1 = v50;
    a5 = v51;
    v18 = a12;
    a7 = v52;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 176);
  a9[10] = *(_OWORD *)(v15 + 160);
  a9[11] = v34;
  v35 = *(_OWORD *)(v15 + 192);
  v36 = *(_OWORD *)(v15 + 112);
  a9[6] = *(_OWORD *)(v15 + 96);
  a9[7] = v36;
  v37 = *(_OWORD *)(v15 + 144);
  a9[8] = *(_OWORD *)(v15 + 128);
  a9[9] = v37;
  v38 = *(_OWORD *)(v15 + 48);
  a9[2] = *(_OWORD *)(v15 + 32);
  a9[3] = v38;
  v39 = *(_OWORD *)(v15 + 80);
  a9[4] = *(_OWORD *)(v15 + 64);
  a9[5] = v39;
  v40 = *(_OWORD *)(v15 + 16);
  *a9 = *(_OWORD *)v15;
  a9[1] = v40;
  v41 = v53[4];
  v42 = v53[5];
  v43 = v53[2];
  a9[16] = v53[3];
  a9[17] = v41;
  v44 = v53[6];
  a9[18] = v42;
  a9[19] = v44;
  v45 = v53[0];
  v46 = v53[1];
  a9[12] = v35;
  a9[13] = v45;
  a9[14] = v46;
  a9[15] = v43;
  return sub_1000510F0((_QWORD *)v15);
}

uint64_t sub_1000431A0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v35;
  double v36;
  double v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v20 = a19;
  v21 = a17;
  v22 = a15;
  v23 = a16;
  v24 = a14;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a5;
  if ((_DWORD)v31)
    v33 = v30;
  if (v28 > v30 || v30 > v33)
    goto LABEL_22;
  v35 = a7;
  if ((a8 & 1) != 0)
    v35 = -INFINITY;
  v36 = a10;
  if ((a11 & 1) != 0)
    v36 = v35;
  v37 = a12;
  if ((a13 & 1) != 0)
    v37 = v36;
  if (v35 > v36 || v36 > v37)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v48 = v27;
    v46 = v31;
    v47 = v29;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v23 = a16;
    v21 = a17;
    v20 = a19;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v31 = v46;
    v29 = v47;
    v24 = a14;
    v22 = a15;
    v27 = v48;
    v26 = a10;
    v25 = a12;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, a13 & 1, v24, v22);
  *(_QWORD *)a9 = v23;
  *(_QWORD *)(a9 + 8) = v21;
  *(_QWORD *)(a9 + 16) = a18;
  *(_BYTE *)(a9 + 24) = v20 & 1;
  *(_BYTE *)(a9 + 25) = HIBYTE(v20) & 1;
  v42 = v53[5];
  *(_OWORD *)(a9 + 96) = v53[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v53[6];
  v43 = v53[1];
  *(_OWORD *)(a9 + 32) = v53[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v53[3];
  *(_OWORD *)(a9 + 64) = v53[2];
  *(_OWORD *)(a9 + 80) = v44;
  swift_retain(v21);
  return swift_retain(v23);
}

double sub_100043378@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100159418, &qword_100159420).n128_u64[0];
  return result;
}

uint64_t sub_1000433D0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 120) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 136) = v45[4];
  *(_OWORD *)(a9 + 152) = v37;
  *(_OWORD *)(a9 + 168) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 72) = v45[0];
  *(_OWORD *)(a9 + 88) = v38;
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(v15 + 64);
  *(_OWORD *)(a9 + 104) = v36;
  return sub_100032E64(v15);
}

double sub_100043588@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100159EC0, &qword_100159EB0).n128_u64[0];
  return result;
}

uint64_t sub_1000435E0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v46 = a7;
    v44 = a1;
    v45 = a5;
    v43 = a3;
    v42 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v42;
    a3 = v43;
    a1 = v44;
    a5 = v45;
    v18 = a12;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(a9 + 112) = v34;
  v35 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v35;
  v36 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v36;
  v37 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v37;
  v38 = v47[2];
  *(_OWORD *)(a9 + 184) = v47[3];
  v39 = v47[5];
  *(_OWORD *)(a9 + 200) = v47[4];
  *(_OWORD *)(a9 + 216) = v39;
  *(_OWORD *)(a9 + 232) = v47[6];
  v40 = v47[1];
  *(_OWORD *)(a9 + 136) = v47[0];
  *(_OWORD *)(a9 + 152) = v40;
  *(_BYTE *)(a9 + 128) = *(_BYTE *)(v15 + 128);
  *(_OWORD *)(a9 + 168) = v38;
  return sub_100041D44(v15);
}

_QWORD *sub_1000437A8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[8];
  _BYTE v47[40];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[40];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v42 = a1;
    v43 = a3;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    v18 = a12;
    a1 = v42;
    a3 = v43;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[2];
  *(_QWORD *)&v47[32] = *((_QWORD *)v15 + 6);
  v35 = *v15;
  *(_OWORD *)v47 = v15[1];
  *(_OWORD *)&v47[16] = v34;
  v46[7] = v35;
  v48 = *(_OWORD *)&v47[8];
  v49 = *(_OWORD *)&v47[24];
  sub_1000512A4((uint64_t)&v48, (uint64_t)v51);
  v36 = v15[1];
  *(_OWORD *)a9 = *v15;
  *(_OWORD *)(a9 + 16) = v36;
  *(_OWORD *)(a9 + 32) = v15[2];
  v37 = v46[2];
  *(_OWORD *)(a9 + 104) = v46[3];
  v38 = v46[5];
  *(_OWORD *)(a9 + 120) = v46[4];
  *(_OWORD *)(a9 + 136) = v38;
  *(_OWORD *)(a9 + 152) = v46[6];
  v39 = v46[1];
  *(_OWORD *)(a9 + 56) = v46[0];
  *(_OWORD *)(a9 + 72) = v39;
  v50 = *((_QWORD *)&v49 + 1);
  *(_QWORD *)(a9 + 48) = *((_QWORD *)v15 + 6);
  *(_OWORD *)(a9 + 88) = v37;
  sub_1000512E0((uint64_t)v51);
  return sub_100027640(&v50);
}

double sub_1000439A0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A6B8, &qword_10015A6C0).n128_u64[0];
  return result;
}

double sub_1000439F8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A6D8, &qword_10015A6E0).n128_u64[0];
  return result;
}

double sub_100043A50@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A6C8, &qword_10015A6D0).n128_u64[0];
  return result;
}

double sub_100043AA8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A6E8, &qword_10015A6F0).n128_u64[0];
  return result;
}

uint64_t sub_100043B00@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 136) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 152) = v45[4];
  *(_OWORD *)(a9 + 168) = v37;
  *(_OWORD *)(a9 + 184) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 88) = v45[0];
  *(_OWORD *)(a9 + 104) = v38;
  *(_QWORD *)(a9 + 80) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 120) = v36;
  return sub_100051234(v15);
}

double sub_100043CC0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A6F8, &qword_10015A700).n128_u64[0];
  return result;
}

uint64_t sub_100043D18@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v15 + 57);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v45[5];
  a9[9] = v45[4];
  a9[10] = v36;
  a9[11] = v45[6];
  v37 = v45[1];
  a9[5] = v45[0];
  a9[6] = v37;
  v38 = v45[3];
  a9[7] = v45[2];
  a9[8] = v38;
  return sub_100051168((uint64_t)v15);
}

double sub_100043EC4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A728, &qword_10015A730).n128_u64[0];
  return result;
}

double sub_100043F1C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A738, &qword_10015A740).n128_u64[0];
  return result;
}

_QWORD *sub_100043F74@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v48 = a7;
    v46 = a1;
    v47 = a5;
    v45 = a3;
    v44 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v44;
    a3 = v45;
    a1 = v46;
    a5 = v47;
    v18 = a12;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(a9 + 144) = v34;
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v15 + 160);
  v35 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v35;
  v36 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(a9 + 112) = v36;
  v37 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v37;
  v38 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v38;
  v39 = v49[2];
  *(_OWORD *)(a9 + 232) = v49[3];
  v40 = v49[5];
  *(_OWORD *)(a9 + 248) = v49[4];
  v41 = v49[6];
  *(_OWORD *)(a9 + 264) = v40;
  *(_OWORD *)(a9 + 280) = v41;
  v42 = v49[1];
  *(_OWORD *)(a9 + 184) = v49[0];
  *(_OWORD *)(a9 + 200) = v42;
  *(_BYTE *)(a9 + 176) = *(_BYTE *)(v15 + 176);
  *(_OWORD *)(a9 + 216) = v39;
  return sub_1000511A4((_QWORD *)v15);
}

double sub_10004414C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A748, &qword_10015A750).n128_u64[0];
  return result;
}

uint64_t sub_1000441A4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v45 = a5;
    v46 = a7;
    v44 = a3;
    v43 = a1;
    v42 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v42;
    v19 = a10;
    a1 = v43;
    a3 = v44;
    v18 = a12;
    a5 = v45;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v34;
  *(_BYTE *)(a9 + 96) = *(_BYTE *)(v15 + 96);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v36;
  v37 = v47[1];
  *(_OWORD *)(a9 + 104) = v47[0];
  *(_OWORD *)(a9 + 120) = v37;
  v38 = v47[3];
  *(_OWORD *)(a9 + 136) = v47[2];
  v39 = v47[4];
  v40 = v47[5];
  *(_OWORD *)(a9 + 200) = v47[6];
  *(_OWORD *)(a9 + 184) = v40;
  *(_OWORD *)(a9 + 168) = v39;
  *(_OWORD *)(a9 + 152) = v38;
  return sub_100051310(v15);
}

double sub_100044364@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A708, &qword_10015A710).n128_u64[0];
  return result;
}

_QWORD *sub_1000443BC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _OWORD v48[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v46 = a5;
    v47 = a7;
    v45 = a3;
    v44 = a1;
    v43 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v43;
    v19 = a10;
    a1 = v44;
    a3 = v45;
    v18 = a12;
    a5 = v46;
    a7 = v47;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v48, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v34;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v15 + 96);
  *(_QWORD *)(a9 + 112) = *(_QWORD *)(v15 + 112);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v36;
  v37 = v48[0];
  v38 = v48[1];
  v39 = v48[3];
  *(_OWORD *)(a9 + 152) = v48[2];
  *(_OWORD *)(a9 + 136) = v38;
  *(_OWORD *)(a9 + 120) = v37;
  v40 = v48[4];
  v41 = v48[5];
  *(_OWORD *)(a9 + 216) = v48[6];
  *(_OWORD *)(a9 + 200) = v41;
  *(_OWORD *)(a9 + 184) = v40;
  *(_OWORD *)(a9 + 168) = v39;
  return sub_10005120C((_QWORD *)v15);
}

double sub_100044584@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100042900(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10015A718, &qword_10015A720).n128_u64[0];
  return result;
}

uint64_t sub_1000445DC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_retain(a16);
}

uint64_t sub_100044784@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for CoordinateSpace.local(_:);
  v3 = type metadata accessor for CoordinateSpace(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000447C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  *(_QWORD *)a7 = sub_100044924(a1, a2, a5, a6);
  *(_QWORD *)(a7 + 8) = v12;
  *(_BYTE *)(a7 + 16) = v13 & 1;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_BYTE *)(a7 + 40) = 0;
  *(_QWORD *)(a7 + 48) = sub_100045C94(0);
  *(_QWORD *)(a7 + 56) = v14;
  *(_QWORD *)(a7 + 64) = 0;
  v15 = type metadata accessor for RemoteViewConfiguration();
  v16 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  *(_QWORD *)(a7 + 72) = EnvironmentObject.init()(v15, v16);
  *(_QWORD *)(a7 + 80) = v17;
  v19 = (int *)type metadata accessor for EventView(0, a5, a6, v18);
  v20 = (_QWORD *)(a7 + v19[13]);
  *v20 = swift_getKeyPath(&unk_10010AB18);
  v21 = sub_100007D50(qword_100158AC8);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = (_QWORD *)(a7 + v19[14]);
  *v22 = swift_getKeyPath(&unk_10010AAB8);
  v23 = sub_100007D50(&qword_100158AC0);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  v24 = (_QWORD *)(a7 + v19[15]);
  *v24 = swift_getKeyPath(&unk_10010AB48);
  v25 = sub_100007D50(&qword_100158968);
  return swift_storeEnumTagMultiPayload(v24, v25, 0);
}

double sub_100044918@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100044924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t WitnessTable;

  v6 = type metadata accessor for EventViewModel(0, a3, a4, a4);
  WitnessTable = swift_getWitnessTable(&unk_10010D188, v6);
  return StateObject.init(wrappedValue:)(a1, a2, v6, WitnessTable);
}

uint64_t sub_100044988(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;

  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v8 = type metadata accessor for EventViewModel(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  WitnessTable = swift_getWitnessTable(&unk_10010D188, v8);
  return a2(v5, v6, v7, v8, WitnessTable);
}

uint64_t sub_1000449F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(unsigned __int8 *)(v0 + 40);
  v4 = sub_100007D50(qword_10015A3D0);
  v5 = sub_10000F4E0(&qword_10015A560, qword_10015A3D0, (uint64_t)&unk_10010C368);
  return StateObject.wrappedValue.getter(v1, v2, v3, v4, v5);
}

uint64_t sub_100044A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v0 = sub_100007D50(&qword_10015A3C0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015A3C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - v8;
  v10 = sub_100007D50(qword_10015A3D0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = v11 + *(_QWORD *)(*(_QWORD *)v11 + 104);
  v13 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  sub_100007E78((uint64_t)v9, (uint64_t)v6, &qword_10015A3C8);
  Published.init(initialValue:)(v6, v4);
  sub_100007F38((uint64_t)v9, &qword_10015A3C8);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v12, v3, v0);
  return v11;
}

uint64_t sub_100044BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

void sub_100044BD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = &unk_10010A810;
  v8[1] = &unk_10010A810;
  v8[2] = &unk_10010A828;
  v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[4] = &unk_10010A840;
  sub_10003C940(319, (unint64_t *)&qword_100159888, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v3 <= 0x3F)
  {
    v8[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003C940(319, (unint64_t *)&qword_100158FE8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000175DC(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 8, v8, a1 + 32);
      }
    }
  }
}

unint64_t sub_100044CC0(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v23);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10002BE30(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_BYTE *)(a2 + 40);
    sub_10002BE30(v10, v11);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v12;
    v13 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v13;
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    v17 = a3[13];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    *(_QWORD *)(a1 + 64) = v14;
    swift_retain(v13);
    swift_retain(v15);
    v20 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v24 = *v19;
      *v18 = *v19;
      swift_retain(v24);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v25 = a3[14];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v28 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
    v32 = a3[15];
    v33 = (uint64_t *)(a1 + v32);
    v34 = (uint64_t *)(a2 + v32);
    v35 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for UserInterfaceSizeClass(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
      {
        v38 = sub_100007D50(&qword_100158970);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16))(v33, v34, v36);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v33, 0, 1, v36);
      }
      v40 = v33;
      v41 = v35;
      v42 = 1;
    }
    else
    {
      v39 = *v34;
      *v33 = *v34;
      swift_retain(v39);
      v40 = v33;
      v41 = v35;
      v42 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v41, v42);
  }
  return a1;
}

void sub_100044F44(uint64_t *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1000189BC(*a1, a1[1]);
  sub_1000189BC(a1[3], a1[4]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  v4 = (uint64_t *)((char *)a1 + a2[13]);
  v5 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (uint64_t *)((char *)a1 + a2[14]);
  v8 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (uint64_t *)((char *)a1 + a2[15]);
  v11 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
}

uint64_t sub_1000450B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_10002BE30(v9, v10);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  v16 = a3[13];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  *(_QWORD *)(a1 + 64) = v13;
  swift_retain(v12);
  swift_retain(v14);
  v19 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = a3[14];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = 1;
  }
  else
  {
    v29 = *v25;
    *v24 = *v25;
    swift_retain(v29);
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v28);
  v30 = a3[15];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for UserInterfaceSizeClass(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v32, 1, v34))
    {
      v36 = sub_100007D50(&qword_100158970);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v37 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v35 + 16))(v31, v32, v34);
      v37 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
    }
  }
  else
  {
    v38 = *v32;
    *v31 = *v32;
    swift_retain(v38);
    v37 = 0;
  }
  swift_storeEnumTagMultiPayload(v31, v33, v37);
  return a1;
}

uint64_t sub_100045310(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10002BE30(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_1000189BC(v9, v10);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  sub_10002BE30(v11, v12);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  sub_1000189BC(v14, v15);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v19;
  swift_retain(v19);
  swift_release(v18);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (a1 != a2)
  {
    v20 = a3[13];
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    sub_100007F38(a1 + v20, qword_100158AC8);
    v23 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
    v27 = a3[14];
    v28 = (uint64_t *)(a1 + v27);
    v29 = (uint64_t *)(a2 + v27);
    sub_100007F38(a1 + v27, &qword_100158AC0);
    v30 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = 1;
    }
    else
    {
      v33 = *v29;
      *v28 = *v29;
      swift_retain(v33);
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v32);
    v34 = a3[15];
    v35 = (uint64_t *)(a1 + v34);
    v36 = (uint64_t *)(a2 + v34);
    sub_100007F38(a1 + v34, &qword_100158968);
    v37 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for UserInterfaceSizeClass(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
      {
        v40 = sub_100007D50(&qword_100158970);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
        v41 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
      }
    }
    else
    {
      v42 = *v36;
      *v35 = *v36;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v41);
  }
  return a1;
}

uint64_t sub_1000455DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = a3[13];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[14];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[15];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for UserInterfaceSizeClass(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
    {
      v22 = sub_100007D50(&qword_100158970);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10004580C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000189BC(v7, v8);
  v9 = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v9;
  sub_1000189BC(v10, v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_release(v13);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v15;
  swift_release(v14);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (a1 != a2)
  {
    v16 = a3[13];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_100007F38(a1 + v16, qword_100158AC8);
    v19 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    v21 = a3[14];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_100007F38(a1 + v21, &qword_100158AC0);
    v24 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    v26 = a3[15];
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    sub_100007F38(a1 + v26, &qword_100158968);
    v29 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for UserInterfaceSizeClass(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30))
      {
        v32 = sub_100007D50(&qword_100158970);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v27, v28, v30);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
      }
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100045AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100045AAC);
}

uint64_t sub_100045AAC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[13];
    }
    else
    {
      v12 = sub_100007D50(qword_100158F60);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[14];
      }
      else
      {
        v10 = sub_100007D50(&qword_100158978);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100045B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100045B88);
}

uint64_t sub_100045B88(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[13];
    }
    else
    {
      v12 = sub_100007D50(qword_100158F60);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[14];
      }
      else
      {
        v10 = sub_100007D50(&qword_100158978);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for EventView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventView);
}

uint64_t sub_100045C60(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100116E24, 1);
}

uint64_t sub_100045C94(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_100007D50(&qword_100159A18);
  v3 = swift_allocObject(v2, 17, 7);
  *(_BYTE *)(v3 + 16) = a1;
  v4 = sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
  return ObservedObject.init(wrappedValue:)(v3, v2, v4);
}

uint64_t sub_100045D04@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t TupleTypeMetadata;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  __n128 v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t KeyPath;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __n128 v179;
  ValueMetadata *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  __n128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __n128 v197;
  uint64_t v198;
  ValueMetadata *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  __n128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __n128 v217;
  uint64_t v218;
  ValueMetadata *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  __n128 v231;
  char *v232;
  uint64_t v233;
  void (*v234)(char *, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t, char *, uint64_t);
  char *v239;
  uint64_t v240;
  __n128 v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  char *v249;
  __n128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  ValueMetadata *v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  __n128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void (*v279)(char *, char *, uint64_t);
  char *v280;
  void (*v281)(char *, uint64_t);
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  char *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD v363[29];
  uint64_t v364;
  ValueMetadata *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;

  v339 = a2;
  v3 = type metadata accessor for TaskPriority(0);
  v337 = *(_QWORD *)(v3 - 8);
  v338 = v3;
  __chkstk_darwin(v3);
  v336 = (char *)&v283 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v347 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v347);
  v335 = (uint64_t)&v283 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v351 = *(_QWORD *)(a1 - 8);
  v352 = *(_QWORD *)(v351 + 64);
  __chkstk_darwin(v6);
  v355 = (char *)&v283 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v354 = type metadata accessor for CoordinateSpace(0);
  v353 = *(_QWORD *)(v354 - 8);
  v8 = __chkstk_darwin(v354);
  v349 = (char *)&v283 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v346 = (char *)type metadata accessor for NavigationPath(255, v8);
  v334 = a1;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, v10, &unk_10011790C, &unk_10011796C);
  v13 = v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v10, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v15 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v16 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v15, &unk_100119D18, &unk_100119D20);
  v17 = swift_getAssociatedTypeWitness(255, v16, v15, &unk_100117714, &unk_100117734);
  v18 = swift_getAssociatedConformanceWitness(v16, v15, v17, &unk_100117714, &unk_10011772C);
  type metadata accessor for HeroImage(255, v17, v18, v19);
  v20 = v13;
  v22 = type metadata accessor for HeroImageLandscape(255, v13, v11, v21);
  type metadata accessor for ModifiedContent(255, v22, &type metadata for _FrameLayout);
  v345 = (char *)type metadata accessor for _ConditionalContent(255);
  v356 = v13;
  v24 = type metadata accessor for EventDetailModule(255, v13, v11, v23);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  type metadata accessor for VStack(255, v26, WitnessTable);
  v28 = sub_100007D00(&qword_10015A458);
  v29 = type metadata accessor for ModifiedContent(255, v24, &type metadata for _PaddingLayout);
  v30 = swift_getTupleTypeMetadata2(255, v28, v29, 0, 0);
  v31 = type metadata accessor for TupleView(255, v30);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v31);
  v33 = type metadata accessor for HStack(255, v31, v32);
  type metadata accessor for ModifiedContent(255, v33, &type metadata for _FrameLayout);
  v34 = type metadata accessor for _ConditionalContent(255);
  v35 = type metadata accessor for Group(255, v34);
  v36 = sub_100007D00(&qword_10015A460);
  v37 = type metadata accessor for ModifiedContent(255, v35, v36);
  v38 = sub_100007D00(&qword_10015A468);
  v39 = type metadata accessor for ModifiedContent(255, v37, v38);
  v364 = sub_100007D00(&qword_10015A470);
  v365 = (ValueMetadata *)type metadata accessor for GuideModule(255, v20, v11, v40);
  v366 = sub_100007D00(&qword_10015A478);
  v42 = type metadata accessor for LineupModule(255, v15, v16, v41);
  type metadata accessor for ModifiedContent(255, v42, &type metadata for _PaddingLayout);
  v367 = type metadata accessor for Optional(255);
  v368 = sub_100007D00(&qword_10015A480);
  v369 = sub_100007D00(&qword_10015A488);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v44 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v45 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v44);
  v46 = type metadata accessor for VStack(255, v44, v45);
  v47 = type metadata accessor for ModifiedContent(255, v46, &type metadata for PaddingModifier);
  v48 = sub_100007D00(&qword_100158630);
  v49 = type metadata accessor for ModifiedContent(255, v47, v48);
  v50 = swift_getTupleTypeMetadata2(255, v39, v49, 0, 0);
  v51 = type metadata accessor for TupleView(255, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v51);
  v53 = type metadata accessor for VStack(255, v51, v52);
  v54 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v53);
  v56 = type metadata accessor for ObservableScrollView(255, v53, v54, v55);
  v57 = swift_getTupleTypeMetadata2(255, v345, v56, 0, 0);
  v58 = type metadata accessor for TupleView(255, v57);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v58);
  v60 = type metadata accessor for ZStack(255, v58, v59);
  v61 = type metadata accessor for ModifiedContent(255, v60, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v363[27] = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v60);
  v363[28] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v61);
  v364 = v61;
  v365 = (ValueMetadata *)v62;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v364, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v64 = sub_100007D00(&qword_10015A490);
  v65 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v64);
  v66 = type metadata accessor for ModifiedContent(255, v65, v48);
  v67 = sub_100007D00(&qword_10015A498);
  v68 = type metadata accessor for ModifiedContent(255, v66, v67);
  v364 = v61;
  v365 = (ValueMetadata *)v62;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v364, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v70 = sub_10000F4E0(&qword_10015A4A0, &qword_10015A490, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v363[25] = OpaqueTypeConformance2;
  v363[26] = v70;
  v71 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v72 = sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v363[23] = v71;
  v363[24] = v72;
  v73 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  v74 = sub_10000F4E0(&qword_10015A4A8, &qword_10015A498, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v363[21] = v73;
  v363[22] = v74;
  v292 = v68;
  v293 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v75 = type metadata accessor for NavigationStack(0, v346, v68, v293);
  v299 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v291 = (char *)&v283 - v76;
  v77 = sub_100007D00(&qword_10015A4B0);
  v284 = v75;
  v78 = type metadata accessor for ModifiedContent(0, v75, v77);
  v309 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v340 = (uint64_t)&v283 - v79;
  v80 = sub_100007D00(&qword_10015A4B8);
  v287 = v78;
  v81 = type metadata accessor for ModifiedContent(0, v78, v80);
  v308 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v298 = (char *)&v283 - v82;
  v83 = sub_100007D00(&qword_10015A4C0);
  v288 = v81;
  v84 = type metadata accessor for ModifiedContent(0, v81, v83);
  v310 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v300 = (char *)&v283 - v85;
  v86 = sub_100007D00(&qword_10015A4C8);
  v290 = v84;
  v87 = type metadata accessor for ModifiedContent(0, v84, v86);
  v322 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v343 = (char *)&v283 - v88;
  v348 = v11;
  v89 = v356;
  v90 = swift_getAssociatedTypeWitness(255, v11, v356, &unk_10011790C, &unk_100117974);
  v91 = swift_getAssociatedConformanceWitness(v11, v89, v90, &unk_10011790C, &unk_10011794C);
  v93 = type metadata accessor for TicketView(255, v90, v91, v92);
  v94 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v75);
  v283 = v94;
  v95 = sub_10000F4E0(&qword_10015A4D0, &qword_10015A4B0, (uint64_t)&unk_100108C38);
  v363[19] = v94;
  v363[20] = v95;
  v96 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v78);
  v285 = v96;
  v97 = sub_10000F4E0(&qword_10015A4D8, &qword_10015A4B8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v363[17] = v96;
  v363[18] = v97;
  v98 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v81);
  v286 = v98;
  v99 = sub_10000F4E0(&qword_10015A4E0, &qword_10015A4C0, (uint64_t)&unk_10010C4A0);
  v363[15] = v98;
  v363[16] = v99;
  v100 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v84);
  v289 = v100;
  v101 = sub_10000F4E0(&qword_10015A4E8, &qword_10015A4C8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v363[13] = v100;
  v363[14] = v101;
  v102 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v87);
  v103 = swift_getWitnessTable(&unk_10010BEA0, v93);
  v364 = v87;
  v365 = (ValueMetadata *)v93;
  v296 = v102;
  v297 = v87;
  v294 = v93;
  v295 = v103;
  v366 = v102;
  v367 = v103;
  v104 = v103;
  v105 = swift_getOpaqueTypeMetadata2(0, &v364, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v314 = *(_QWORD *)(v105 - 8);
  v106 = v105;
  __chkstk_darwin(v105);
  v341 = (char *)&v283 - v107;
  v108 = sub_100007D00(&qword_10015A4F0);
  v364 = v87;
  v365 = (ValueMetadata *)v93;
  v366 = v102;
  v367 = v104;
  v109 = swift_getOpaqueTypeConformance2(&v364, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v110 = sub_100007D00(&qword_10015A4F8);
  v111 = sub_10001E0A8(&qword_10015A500, &qword_10015A4F8, (void (*)(void))sub_10004EC0C);
  v364 = v110;
  v365 = (ValueMetadata *)v111;
  v112 = swift_getOpaqueTypeConformance2(&v364, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v303 = v108;
  v304 = v106;
  v364 = v106;
  v365 = (ValueMetadata *)v108;
  v301 = v112;
  v302 = v109;
  v366 = v109;
  v367 = v112;
  v113 = v112;
  v114 = swift_getOpaqueTypeMetadata2(0, &v364, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v317 = *(_QWORD *)(v114 - 8);
  v115 = v114;
  __chkstk_darwin(v114);
  v342 = (char *)&v283 - v116;
  v364 = v106;
  v365 = (ValueMetadata *)v108;
  v366 = v109;
  v367 = v113;
  v117 = swift_getOpaqueTypeConformance2(&v364, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v118 = sub_1000188D0();
  v364 = v115;
  v365 = &type metadata for PromotionalAssetsContentView;
  v119 = v115;
  v306 = v117;
  v307 = v115;
  v366 = v117;
  v367 = v118;
  v120 = v117;
  v121 = v118;
  v305 = v118;
  v122 = swift_getOpaqueTypeMetadata2(0, &v364, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v321 = *(_QWORD *)(v122 - 8);
  v315 = v122;
  __chkstk_darwin(v122);
  v344 = (char *)&v283 - v123;
  v125 = type metadata accessor for ModifiedContent(0, v124, &type metadata for _AppearanceActionModifier);
  v323 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v345 = (char *)&v283 - v126;
  v313 = v125;
  v127 = type metadata accessor for ModifiedContent(0, v125, &type metadata for _AppearanceActionModifier);
  v128 = *(_QWORD *)(v127 - 8);
  v320 = v127;
  v326 = v128;
  __chkstk_darwin(v127);
  v316 = (char *)&v283 - v129;
  v364 = v119;
  v365 = &type metadata for PromotionalAssetsContentView;
  v366 = v120;
  v367 = v121;
  v311 = swift_getOpaqueTypeConformance2(&v364, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v363[11] = v311;
  v363[12] = &protocol witness table for _AppearanceActionModifier;
  v312 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v125);
  v363[9] = v312;
  v363[10] = &protocol witness table for _AppearanceActionModifier;
  v130 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v127);
  v319 = v130;
  v318 = sub_10004EC50();
  v364 = v127;
  v365 = (ValueMetadata *)v347;
  v366 = v130;
  v367 = v318;
  v131 = swift_getOpaqueTypeMetadata2(0, &v364, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v324 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v346 = (char *)&v283 - v132;
  v133 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v325 = v131;
  v134 = type metadata accessor for ModifiedContent(0, v131, v133);
  v329 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v327 = (char *)&v283 - v135;
  v136 = type metadata accessor for _TaskModifier(255);
  v331 = v134;
  v137 = type metadata accessor for ModifiedContent(0, v134, v136);
  v332 = *(_QWORD *)(v137 - 8);
  v333 = v137;
  __chkstk_darwin(v137);
  v328 = (char *)&v283 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = __chkstk_darwin(v139);
  v330 = (char *)&v283 - v141;
  v363[2] = v356;
  v142 = v348;
  v363[3] = v348;
  v143 = v350;
  v363[4] = v350;
  v144 = v291;
  NavigationStack.init<>(root:)(sub_10004ECCC, v363, v292, v293, v140);
  v145 = sub_10004ECD8();
  v293 = v145;
  v146 = v353;
  v147 = (uint64_t)v349;
  v148 = v354;
  (*(void (**)(char *, _QWORD, uint64_t))(v353 + 104))(v349, enum case for CoordinateSpace.local(_:), v354);
  v149 = v284;
  sub_10005698C((uint64_t)&type metadata for EventViewHeightPreferenceKey, v147, (uint64_t)sub_100051360, 0, v284, (uint64_t)&type metadata for EventViewHeightPreferenceKey, v283, v145, v340);
  (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v147, v148);
  (*(void (**)(char *, uint64_t))(v299 + 8))(v144, v149);
  v150 = v351;
  v353 = *(_QWORD *)(v351 + 16);
  v151 = v355;
  v152 = v334;
  ((void (*)(char *, uint64_t, uint64_t))v353)(v355, v143, v334);
  v153 = *(unsigned __int8 *)(v150 + 80);
  v349 = (char *)(((v153 + 32) & ~v153) + v352);
  v154 = (v153 + 32) & ~v153;
  v354 = v154;
  v352 = v153 | 7;
  v155 = swift_allocObject(&unk_100149CB0, v349, v153 | 7);
  *(_QWORD *)(v155 + 16) = v356;
  *(_QWORD *)(v155 + 24) = v142;
  v351 = *(_QWORD *)(v150 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v351)(v155 + v154, v151, v152);
  v156 = sub_100007428(&qword_100159938, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v157 = v298;
  v158 = v287;
  v159 = v340;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for EventViewHeightPreferenceKey, sub_10004ED20, v155, v287, &type metadata for EventViewHeightPreferenceKey, v285, v293, v156);
  v160 = swift_release(v155);
  (*(void (**)(uint64_t, uint64_t, __n128))(v309 + 8))(v159, v158, v160);
  v161 = sub_10004ED2C();
  v162 = v300;
  v163 = v288;
  v164 = sub_1000573F0((uint64_t)&type metadata for EventViewSafeAreaPreferenceKey, (uint64_t)sub_10004D770, 0, v288, (uint64_t)&type metadata for EventViewSafeAreaPreferenceKey, v286, v161);
  (*(void (**)(char *, uint64_t, double))(v308 + 8))(v157, v163, v164);
  v165 = v350;
  ((void (*)(char *, uint64_t, uint64_t))v353)(v151, v350, v152);
  v166 = swift_allocObject(&unk_100149CD8, v349, v352);
  v167 = v356;
  *(_QWORD *)(v166 + 16) = v356;
  *(_QWORD *)(v166 + 24) = v142;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v166 + v354, v151, v152);
  v168 = sub_10004EDCC();
  v169 = v290;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for EventViewSafeAreaPreferenceKey, sub_10004ED74, v166, v290, &type metadata for EventViewSafeAreaPreferenceKey, v289, v161, v168);
  v170 = swift_release(v166);
  (*(void (**)(char *, uint64_t, __n128))(v310 + 8))(v162, v169, v170);
  v171 = v152;
  v174 = sub_100044988(v152, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v172, v173);
  v361 = v167;
  v362 = v142;
  KeyPath = swift_getKeyPath(&unk_10010A8B8);
  v176 = v167;
  v178 = type metadata accessor for EventViewModel(255, v167, v142, v177);
  v340 = swift_getWitnessTable(&unk_10010D188, v178);
  ObservedObject.Wrapper.subscript.getter(&v364, KeyPath, v174, v340);
  swift_release(KeyPath);
  v179 = swift_release(v174);
  v181 = v364;
  v180 = v365;
  LODWORD(v310) = v366;
  v182 = v355;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v353)(v355, v165, v152, v179);
  v183 = swift_allocObject(&unk_100149D00, v349, v352);
  *(_QWORD *)(v183 + 16) = v176;
  *(_QWORD *)(v183 + 24) = v142;
  v184 = v142;
  v185 = v171;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v183 + v354, v182, v171);
  v186 = swift_checkMetadataState(0, v294);
  v187 = v297;
  v188 = v343;
  View.sheet<A>(isPresented:onDismiss:content:)(v181, v180, v310, 0, 0, sub_10004EE7C, v183, v297, v186, v296, v295);
  swift_release(v180);
  swift_release(v183);
  v189 = swift_release(v181);
  (*(void (**)(char *, uint64_t, __n128))(v322 + 8))(v188, v187, v189);
  v190 = v185;
  v193 = sub_100044988(v185, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v191, v192);
  v359 = v176;
  v194 = v176;
  v360 = v184;
  v195 = v184;
  v196 = swift_getKeyPath(&unk_10010A8F0);
  ObservedObject.Wrapper.subscript.getter(&v364, v196, v193, v340);
  swift_release(v196);
  v197 = swift_release(v193);
  v198 = v364;
  v199 = v365;
  v200 = v366;
  v201 = v355;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v353)(v355, v165, v190, v197);
  v202 = swift_allocObject(&unk_100149D28, v349, v352);
  *(_QWORD *)(v202 + 16) = v194;
  *(_QWORD *)(v202 + 24) = v195;
  v203 = v195;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v202 + v354, v201, v190);
  v204 = v200;
  v205 = v304;
  v206 = v341;
  View.sheet<A>(isPresented:onDismiss:content:)(v198, v199, v204, 0, 0, sub_10004EEF4, v202, v304, v303, v302, v301);
  swift_release(v199);
  swift_release(v202);
  v207 = swift_release(v198);
  (*(void (**)(char *, uint64_t, __n128))(v314 + 8))(v206, v205, v207);
  v208 = v190;
  v209 = v350;
  v212 = sub_100044988(v190, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v210, v211);
  v213 = v194;
  v357 = v194;
  v214 = v203;
  v358 = v203;
  v215 = swift_getKeyPath(&unk_10010A928);
  v216 = v209;
  ObservedObject.Wrapper.subscript.getter(&v364, v215, v212, v340);
  swift_release(v215);
  v217 = swift_release(v212);
  v218 = v364;
  v219 = v365;
  v220 = v366;
  v221 = v355;
  v222 = v216;
  v223 = v208;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v353)(v355, v222, v208, v217);
  v224 = v349;
  v225 = swift_allocObject(&unk_100149D50, v349, v352);
  *(_QWORD *)(v225 + 16) = v213;
  *(_QWORD *)(v225 + 24) = v214;
  v226 = v354;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v225 + v354, v221, v223);
  v227 = v220;
  v228 = v307;
  v229 = v342;
  View.sheet<A>(isPresented:onDismiss:content:)(v218, v219, v227, 0, 0, sub_10004EFD4, v225, v307, &type metadata for PromotionalAssetsContentView, v306, v305);
  swift_release(v219);
  v230 = v223;
  swift_release(v225);
  v231 = swift_release(v218);
  (*(void (**)(char *, uint64_t, __n128))(v317 + 8))(v229, v228, v231);
  v232 = v355;
  v233 = v350;
  v234 = (void (*)(char *, uint64_t, uint64_t))v353;
  ((void (*)(char *, uint64_t, uint64_t))v353)(v355, v350, v223);
  v235 = v352;
  v236 = swift_allocObject(&unk_100149D78, v224, v352);
  v237 = v348;
  *(_QWORD *)(v236 + 16) = v356;
  *(_QWORD *)(v236 + 24) = v237;
  v238 = (void (*)(uint64_t, char *, uint64_t))v351;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v236 + v226, v232, v230);
  v239 = v344;
  v240 = v315;
  View.onAppear(perform:)(sub_10004F030, v236, v315, v311);
  v241 = swift_release(v236);
  (*(void (**)(char *, uint64_t, __n128))(v321 + 8))(v239, v240, v241);
  v242 = v355;
  v234(v355, v233, v230);
  v243 = swift_allocObject(&unk_100149DA0, v224, v235);
  v244 = v356;
  v245 = v348;
  *(_QWORD *)(v243 + 16) = v356;
  *(_QWORD *)(v243 + 24) = v245;
  v246 = v242;
  v238(v243 + v354, v242, v230);
  v247 = v316;
  v248 = v313;
  v249 = v345;
  View.onDisappear(perform:)(sub_10004F040, v243, v313, v312);
  v250 = swift_release(v243);
  (*(void (**)(char *, uint64_t, __n128))(v323 + 8))(v249, v248, v250);
  v251 = v350;
  v252 = v335;
  sub_100018474(v335);
  ((void (*)(char *, uint64_t, uint64_t))v353)(v246, v251, v230);
  v253 = swift_allocObject(&unk_100149DC8, v349, v352);
  *(_QWORD *)(v253 + 16) = v244;
  *(_QWORD *)(v253 + 24) = v245;
  v254 = v230;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v253 + v354, v246, v230);
  v255 = v319;
  v256 = v320;
  v257 = (ValueMetadata *)v347;
  v258 = v318;
  View.onChange<A>(of:initial:_:)(v252, 0, sub_10004F230, v253, v320, v347, v319, v318);
  swift_release(v253);
  sub_100007F38(v252, &qword_100158970);
  (*(void (**)(char *, uint64_t))(v326 + 8))(v247, v256);
  if (qword_1001580E0 != -1)
    swift_once(&qword_1001580E0, sub_100075318);
  v259 = qword_10016A520;
  v260 = *(_QWORD *)algn_10016A528;
  v364 = v256;
  v365 = v257;
  v366 = v255;
  v367 = v258;
  v261 = swift_getOpaqueTypeConformance2(&v364, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v262 = v327;
  v263 = v259;
  v264 = v260;
  v265 = v325;
  v266 = v346;
  View.accessibilityIdentifier(_:)(v263, v264, v325, v261);
  (*(void (**)(char *, uint64_t))(v324 + 8))(v266, v265);
  v267 = v355;
  ((void (*)(char *, uint64_t, uint64_t))v353)(v355, v350, v254);
  v268 = swift_allocObject(&unk_100149DF0, v349, v352);
  v269 = v348;
  *(_QWORD *)(v268 + 16) = v356;
  *(_QWORD *)(v268 + 24) = v269;
  ((void (*)(uint64_t, char *, uint64_t))v351)(v268 + v354, v267, v254);
  v270 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v363[7] = v261;
  v363[8] = v270;
  v271 = v331;
  v272 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v331);
  v273 = v336;
  static TaskPriority.userInitiated.getter(v272);
  v274 = v328;
  View.task(priority:_:)(v273, &unk_10015A538, v268, v271, v272);
  v275 = swift_release(v268);
  (*(void (**)(char *, uint64_t, __n128))(v337 + 8))(v273, v338, v275);
  (*(void (**)(char *, uint64_t))(v329 + 8))(v262, v271);
  v276 = sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v363[5] = v272;
  v363[6] = v276;
  v277 = v333;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v333);
  v278 = v332;
  v279 = *(void (**)(char *, char *, uint64_t))(v332 + 16);
  v280 = v330;
  v279(v330, v274, v277);
  v281 = *(void (**)(char *, uint64_t))(v278 + 8);
  v281(v274, v277);
  v279(v339, v280, v277);
  return ((uint64_t (*)(char *, uint64_t))v281)(v280, v277);
}

uint64_t sub_100047578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  _QWORD *v93;
  __n128 v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  char *v108;
  __n128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, uint64_t);
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t OpaqueTypeConformance2;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void (*v138)(char *, char *, uint64_t);
  void (*v139)(char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[18];
  _QWORD v172[3];
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v158 = a1;
  v165 = a4;
  v163 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v163);
  v164 = (uint64_t)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v161 = *(_QWORD *)(v7 - 8);
  v162 = v7;
  __chkstk_darwin(v7);
  v160 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v159 = (uint64_t)&v143 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v14 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_100119D18, &unk_100119D20);
  v15 = swift_getAssociatedTypeWitness(255, v14, v13, &unk_100117714, &unk_100117734);
  v16 = swift_getAssociatedConformanceWitness(v14, v13, v15, &unk_100117714, &unk_10011772C);
  type metadata accessor for HeroImage(255, v15, v16, v17);
  v19 = type metadata accessor for HeroImageLandscape(255, a2, a3, v18);
  type metadata accessor for ModifiedContent(255, v19, &type metadata for _FrameLayout);
  v168 = type metadata accessor for _ConditionalContent(255);
  v146 = a2;
  v147 = a3;
  v21 = type metadata accessor for EventDetailModule(255, a2, a3, v20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v21, 0, 0);
  v23 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v23);
  type metadata accessor for VStack(255, v23, WitnessTable);
  v25 = sub_100007D00(&qword_10015A458);
  v26 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _PaddingLayout);
  v27 = swift_getTupleTypeMetadata2(255, v25, v26, 0, 0);
  v28 = type metadata accessor for TupleView(255, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v28);
  v30 = type metadata accessor for HStack(255, v28, v29);
  type metadata accessor for ModifiedContent(255, v30, &type metadata for _FrameLayout);
  v31 = type metadata accessor for _ConditionalContent(255);
  v32 = type metadata accessor for Group(255, v31);
  v33 = sub_100007D00(&qword_10015A460);
  v34 = type metadata accessor for ModifiedContent(255, v32, v33);
  v35 = sub_100007D00(&qword_10015A468);
  v36 = type metadata accessor for ModifiedContent(255, v34, v35);
  v173 = sub_100007D00(&qword_10015A470);
  v174 = type metadata accessor for GuideModule(255, a2, a3, v37);
  v175 = sub_100007D00(&qword_10015A478);
  v39 = type metadata accessor for LineupModule(255, v13, v14, v38);
  type metadata accessor for ModifiedContent(255, v39, &type metadata for _PaddingLayout);
  v176 = type metadata accessor for Optional(255);
  v177 = sub_100007D00(&qword_10015A480);
  v178 = sub_100007D00(&qword_10015A488);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v41 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v41);
  v43 = type metadata accessor for VStack(255, v41, v42);
  v44 = type metadata accessor for ModifiedContent(255, v43, &type metadata for PaddingModifier);
  v45 = sub_100007D00(&qword_100158630);
  v46 = type metadata accessor for ModifiedContent(255, v44, v45);
  v47 = swift_getTupleTypeMetadata2(255, v36, v46, 0, 0);
  v48 = type metadata accessor for TupleView(255, v47);
  v49 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v48);
  v50 = type metadata accessor for VStack(255, v48, v49);
  v51 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v50);
  v53 = type metadata accessor for ObservableScrollView(255, v50, v51, v52);
  v54 = swift_getTupleTypeMetadata2(255, v168, v53, 0, 0);
  v55 = type metadata accessor for TupleView(255, v54);
  v56 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v55);
  v57 = type metadata accessor for ZStack(0, v55, v56);
  v143 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v59 = (char *)&v143 - v58;
  v60 = type metadata accessor for ModifiedContent(0, v57, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v61 = *(_QWORD *)(v60 - 8);
  v145 = v60;
  v148 = v61;
  __chkstk_darwin(v60);
  v166 = (char *)&v143 - v62;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v57);
  v172[1] = v63;
  v172[2] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v168 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v60);
  v173 = v60;
  v174 = v168;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v173, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v65 = sub_100007D00(&qword_10015A490);
  v66 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v65);
  v149 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v144 = (uint64_t)&v143 - v67;
  v150 = v68;
  v69 = type metadata accessor for ModifiedContent(0, v68, v45);
  v153 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v151 = (char *)&v143 - v70;
  v71 = sub_100007D00(&qword_10015A498);
  v156 = v69;
  v157 = type metadata accessor for ModifiedContent(0, v69, v71);
  v155 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v152 = (char *)&v143 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v73);
  v154 = (char *)&v143 - v74;
  v76 = static Alignment.top.getter(v75);
  v77 = v146;
  v78 = v147;
  v171[8] = v146;
  v171[9] = v147;
  v79 = v158;
  v171[10] = v158;
  ZStack.init(alignment:content:)(v76);
  v80 = v77;
  v167 = type metadata accessor for EventView(0, v77, v78, v81);
  v82 = v79;
  v85 = sub_100044988(v167, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v83, v84);
  v86 = sub_100073964();
  swift_release(v85);
  v88 = static SafeAreaRegions.all.getter(v87);
  View.ignoresSafeArea(_:edges:)(v88, v86, v57, v63);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v59, v57);
  v90 = *(_QWORD *)(v82 + 48);
  v89 = *(_QWORD *)(v82 + 56);
  type metadata accessor for MainActor(0);
  v91 = swift_retain(v89);
  v92 = static MainActor.shared.getter(v91);
  v93 = (_QWORD *)swift_allocObject(&unk_100149E68, 48, 7);
  v93[2] = v92;
  v93[3] = &protocol witness table for MainActor;
  v93[4] = v90;
  v93[5] = v89;
  v94 = swift_retain(v89);
  v95 = static MainActor.shared.getter(v94);
  v96 = (_QWORD *)swift_allocObject(&unk_100149E90, 48, 7);
  v96[2] = v95;
  v96[3] = &protocol witness table for MainActor;
  v96[4] = v90;
  v96[5] = v89;
  Binding.init(get:set:)(&v173, sub_10004F784, v93, sub_10004F7C4, v96, &type metadata for Bool);
  v97 = v173;
  v98 = v174;
  LODWORD(v95) = v175;
  v171[2] = v80;
  v171[3] = v78;
  v171[4] = v82;
  v170[2] = v80;
  v170[3] = v78;
  v170[4] = v82;
  v169[2] = v80;
  v169[3] = v78;
  v169[4] = v82;
  v99 = sub_100007D50(&qword_10015A570);
  v100 = sub_100007D50(&qword_10015A578);
  v101 = sub_100007D50(&qword_10015A580);
  v102 = sub_10004F7F4();
  v103 = sub_10004F950();
  v104 = sub_10004F9BC();
  v142 = v102;
  v105 = v144;
  v141 = v100;
  v106 = v145;
  v107 = v95;
  v108 = v166;
  sub_100056AF0(v97, v98, v107, (uint64_t)sub_10004F7D0, (uint64_t)v171, (uint64_t (*)(uint64_t))sub_10004F7DC, (uint64_t)v170, (uint64_t)sub_10004F7E8, v144, (uint64_t)v169, v145, v99, v141, v101, v168, v142, v103, v104);
  swift_release(v98);
  v109 = swift_release(v97);
  (*(void (**)(char *, uint64_t, __n128))(v148 + 8))(v108, v106, v109);
  v110 = v159;
  sub_100018C18(v159);
  v111 = v160;
  v112 = v161;
  v113 = v162;
  (*(void (**)(char *, _QWORD, uint64_t))(v161 + 104))(v160, enum case for ColorScheme.light(_:), v162);
  v114 = v111;
  LOBYTE(v111) = static ColorScheme.== infix(_:_:)(v110, v111);
  v115 = *(void (**)(char *, uint64_t))(v112 + 8);
  v115(v114, v113);
  v115((char *)v110, v113);
  if ((v111 & 1) != 0)
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v116 = &qword_10016A4B0;
  }
  else
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v116 = &qword_10016A4A8;
  }
  v117 = *v116;
  swift_retain(*v116);
  v172[0] = v117;
  v119 = static Edge.Set.all.getter(v118);
  v173 = v106;
  v174 = v168;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v173, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v121 = sub_10000F4E0(&qword_10015A4A0, &qword_10015A490, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v171[16] = OpaqueTypeConformance2;
  v171[17] = v121;
  v122 = v150;
  v123 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v150);
  v124 = v151;
  View.background<A>(_:ignoresSafeAreaEdges:)(v172, v119, v122, &type metadata for Color, v123, &protocol witness table for Color);
  v125 = swift_release(v117);
  v126 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v149 + 8))(v105, v122, v125);
  v127 = static Animation.easeInOut.getter(v126);
  v128 = v164;
  sub_100018474(v164);
  v129 = sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v171[14] = v123;
  v171[15] = v129;
  v130 = v156;
  v131 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v156);
  v132 = sub_10004EC50();
  v133 = v152;
  View.animation<A>(_:value:)(v127, v128, v130, v163, v131, v132);
  swift_release(v127);
  sub_100007F38(v128, &qword_100158970);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v124, v130);
  v134 = sub_10000F4E0(&qword_10015A4A8, &qword_10015A498, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v171[12] = v131;
  v171[13] = v134;
  v135 = v157;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v157);
  v137 = v154;
  v136 = v155;
  v138 = *(void (**)(char *, char *, uint64_t))(v155 + 16);
  v138(v154, v133, v135);
  v139 = *(void (**)(char *, uint64_t))(v136 + 8);
  v139(v133, v135);
  v138(v165, v137, v135);
  return ((uint64_t (*)(char *, uint64_t))v139)(v137, v135);
}

uint64_t sub_100048160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, char *, uint64_t);
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(__int128 *, __int128 *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void (*v165)(char *, uint64_t, uint64_t);
  void (*v166)(uint64_t, uint64_t);
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t);
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  void *v208;
  __int128 v209;
  double v210;
  char v211;
  uint64_t v212;
  char v213;
  __int128 v214;
  __int128 v215;
  double v216;
  char v217;
  uint64_t v218;
  char v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _OWORD v225[4];

  v199 = a1;
  v193 = a5;
  v200 = type metadata accessor for EventView(0, a2, a3, a4);
  v192 = *(_QWORD *)(v200 - 8);
  v190 = *(_QWORD *)(v192 + 64);
  __chkstk_darwin(v200);
  v191 = (char *)&v175 - v7;
  v9 = type metadata accessor for EventDetailModule(255, a2, a3, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  type metadata accessor for VStack(255, v11, WitnessTable);
  v13 = sub_100007D00(&qword_10015A458);
  v14 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  v15 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v18 = type metadata accessor for HStack(255, v16, v17);
  type metadata accessor for ModifiedContent(255, v18, &type metadata for _FrameLayout);
  v19 = type metadata accessor for _ConditionalContent(255);
  v20 = type metadata accessor for Group(255, v19);
  v21 = sub_100007D00(&qword_10015A460);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v23 = sub_100007D00(&qword_10015A468);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  *(_QWORD *)&v221 = sub_100007D00(&qword_10015A470);
  *((_QWORD *)&v221 + 1) = type metadata accessor for GuideModule(255, a2, a3, v25);
  *(_QWORD *)&v222 = sub_100007D00(&qword_10015A478);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v28 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v29 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v28, &unk_100119D18, &unk_100119D20);
  v31 = type metadata accessor for LineupModule(255, v28, v29, v30);
  type metadata accessor for ModifiedContent(255, v31, &type metadata for _PaddingLayout);
  *((_QWORD *)&v222 + 1) = type metadata accessor for Optional(255);
  *(_QWORD *)&v223 = sub_100007D00(&qword_10015A480);
  *((_QWORD *)&v223 + 1) = sub_100007D00(&qword_10015A488);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v33 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v33);
  v35 = type metadata accessor for VStack(255, v33, v34);
  v36 = type metadata accessor for ModifiedContent(255, v35, &type metadata for PaddingModifier);
  v37 = sub_100007D00(&qword_100158630);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  v39 = swift_getTupleTypeMetadata2(255, v24, v38, 0, 0);
  v40 = type metadata accessor for TupleView(255, v39);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v40);
  v42 = type metadata accessor for VStack(255, v40, v41);
  v184 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v42);
  v185 = v42;
  v189 = type metadata accessor for ObservableScrollView(0, v42, v184, v43);
  v186 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v188 = (uint64_t)&v175 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v187 = (char *)&v175 - v46;
  v47 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v48);
  v50 = (char *)&v175 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = swift_getAssociatedTypeWitness(255, v29, v28, &unk_100117714, &unk_100117734);
  v52 = type metadata accessor for Optional(0);
  __chkstk_darwin(v52);
  v180 = (uint64_t)&v175 - v53;
  v54 = swift_getAssociatedConformanceWitness(v29, v28, v51, &unk_100117714, &unk_10011772C);
  v56 = type metadata accessor for HeroImage(0, v51, v54, v55);
  v178 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v58 = (char *)&v175 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  v179 = (uint64_t)&v175 - v60;
  v198 = a3;
  v194 = type metadata accessor for HeroImageLandscape(255, a2, a3, v61);
  v62 = type metadata accessor for ModifiedContent(255, v194, &type metadata for _FrameLayout);
  v197 = v56;
  v195 = v62;
  v183 = type metadata accessor for _ConditionalContent(0);
  v181 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v182 = (char *)&v175 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  v196 = (char *)&v175 - v65;
  v68 = sub_100044988(v200, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v66, v67);
  LOBYTE(v29) = sub_100072AD4();
  swift_release(v68);
  if ((v29 & 1) != 0)
  {
    v177 = (char *)type metadata accessor for HeroImageModel(0, v51, v54, v69);
    v176 = Namespace.wrappedValue.getter(*(_QWORD *)(v199 + 64), v70);
    v71 = v200;
    v74 = sub_100044988(v200, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v72, v73);
    sub_100072DBC(v180);
    swift_release(v74);
    v77 = sub_100044988(v71, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v75, v76);
    __chkstk_darwin(v77);
    v78 = v198;
    *(&v175 - 2) = a2;
    *(&v175 - 1) = v78;
    KeyPath = swift_getKeyPath(&unk_10010A9E8);
    v81 = type metadata accessor for EventViewModel(255, a2, v78, v80);
    v82 = swift_getWitnessTable(&unk_10010D188, v81);
    ObservedObject.Wrapper.subscript.getter(&v221, KeyPath, v77, v82);
    swift_release(KeyPath);
    swift_release(v77);
    v83 = v221;
    v84 = *(double *)&v222;
    v87 = sub_100044988(v71, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v85, v86);
    __chkstk_darwin(v87);
    *(&v175 - 2) = a2;
    *(&v175 - 1) = v78;
    v88 = swift_getKeyPath(&unk_10010AA58);
    ObservedObject.Wrapper.subscript.getter(&v215, v88, v87, v82);
    swift_release(v88);
    swift_release(v87);
    v89 = (_QWORD *)sub_1000D27C8(v176, v180, v83, *((uint64_t *)&v83 + 1), v215, *((uint64_t *)&v215 + 1), v84, v216);
    sub_10001F8B0(v89, (uint64_t)v58);
    v90 = v197;
    v91 = swift_getWitnessTable(&unk_100109330, v197);
    v92 = v178;
    v93 = v179;
    v94 = *(void (**)(uint64_t, char *, uint64_t))(v178 + 16);
    v94(v179, v58, v90);
    v95 = *(void (**)(char *, uint64_t))(v92 + 8);
    v95(v58, v90);
    v94((uint64_t)v58, (char *)v93, v90);
    v201 = swift_getWitnessTable(&unk_10010B520, v194);
    v202 = &protocol witness table for _FrameLayout;
    v96 = v195;
    v97 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v195);
    sub_1000426C4((uint64_t)v58, v90, v96, v91, v97);
    v95(v58, v90);
    v98 = ((uint64_t (*)(uint64_t, uint64_t))v95)(v93, v90);
  }
  else
  {
    v99 = v198;
    v180 = type metadata accessor for HeroImageLandscapeModel(0, a2, v198, v69);
    v179 = Namespace.wrappedValue.getter(*(_QWORD *)(v199 + 64), v100);
    v101 = v50;
    v177 = v50;
    v102 = v200;
    v105 = sub_100044988(v200, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v103, v104);
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v101, v105 + *(_QWORD *)(*(_QWORD *)v105 + 160), a2);
    swift_release(v105);
    v108 = sub_100044988(v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v106, v107);
    v109 = sub_1000730EC();
    swift_release(v108);
    v112 = sub_100044988(v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v110, v111);
    __chkstk_darwin(v112);
    *(&v175 - 2) = a2;
    *(&v175 - 1) = v99;
    v113 = swift_getKeyPath(&unk_10010A9E8);
    v115 = type metadata accessor for EventViewModel(255, a2, v99, v114);
    v116 = swift_getWitnessTable(&unk_10010D188, v115);
    ObservedObject.Wrapper.subscript.getter(&v215, v113, v112, v116);
    swift_release(v113);
    swift_release(v112);
    v176 = *((_QWORD *)&v215 + 1);
    v178 = v215;
    v117 = v216;
    v120 = sub_100044988(v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v118, v119);
    __chkstk_darwin(v120);
    *(&v175 - 2) = a2;
    *(&v175 - 1) = v99;
    v121 = swift_getKeyPath(&unk_10010A8B8);
    ObservedObject.Wrapper.subscript.getter(&v209, v121, v120, v116);
    swift_release(v121);
    swift_release(v120);
    v122 = *((_QWORD *)&v209 + 1);
    v175 = v209;
    v123 = LOBYTE(v210);
    v126 = sub_100044988(v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v124, v125);
    __chkstk_darwin(v126);
    *(&v175 - 2) = a2;
    *(&v175 - 1) = v99;
    v127 = swift_getKeyPath(&unk_10010AA20);
    ObservedObject.Wrapper.subscript.getter(&v221, v127, v126, v116);
    swift_release(v127);
    swift_release(v126);
    v225[0] = v221;
    v225[1] = v222;
    v225[2] = v223;
    v128 = sub_100079A84(v179, (uint64_t)v177, v178, v176, v175, v122, v123, v225, v109, v117);
    v129 = sub_10005F864(v128);
    v131 = v130;
    *(_QWORD *)&v221 = v129;
    *((_QWORD *)&v221 + 1) = v130;
    v134 = sub_100044988(v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v132, v133);
    v135 = sub_1000730EC();
    swift_release(v134);
    v137 = static Alignment.top.getter(v136);
    v139 = v138;
    v140 = v194;
    v141 = swift_getWitnessTable(&unk_10010B520, v194);
    View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v135, 0, v137, v139, v140, v141);
    swift_release(v131);
    v142 = *((_QWORD *)&v215 + 1);
    v209 = v215;
    v210 = v216;
    v211 = v217;
    v212 = v218;
    v213 = v219;
    v214 = v220;
    v207 = v141;
    v208 = &protocol witness table for _FrameLayout;
    v143 = v195;
    v144 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v195);
    v145 = *(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v143 - 8) + 16);
    v145(&v221, &v209, v143);
    swift_release(v142);
    v146 = *((_QWORD *)&v221 + 1);
    v209 = v221;
    v210 = *(double *)&v222;
    v211 = BYTE8(v222);
    v212 = v223;
    v213 = BYTE8(v223);
    v214 = v224;
    v145(&v215, &v209, v143);
    v147 = *((_QWORD *)&v215 + 1);
    v209 = v215;
    v210 = v216;
    v211 = v217;
    v212 = v218;
    v213 = v219;
    v214 = v220;
    v148 = v197;
    v149 = swift_getWitnessTable(&unk_100109330, v197);
    sub_100042788((uint64_t)&v209, v148, v143, v149, v144);
    swift_release(v146);
    swift_release(v147);
  }
  v150 = __chkstk_darwin(v98);
  v152 = v198;
  v151 = v199;
  *(&v175 - 4) = a2;
  *(&v175 - 3) = v152;
  *(&v175 - 2) = v151;
  v154 = v191;
  v153 = v192;
  v155 = v200;
  (*(void (**)(char *, __n128))(v192 + 16))(v191, v150);
  v156 = *(unsigned __int8 *)(v153 + 80);
  v157 = (v156 + 32) & ~v156;
  v158 = swift_allocObject(&unk_100149F08, v157 + v190, v156 | 7);
  *(_QWORD *)(v158 + 16) = a2;
  *(_QWORD *)(v158 + 24) = v152;
  v159 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v153 + 32))(v158 + v157, v154, v155);
  v160 = static Axis.Set.vertical.getter(v159);
  v161 = v188;
  sub_10009D510(v160, 0, (void (*)(uint64_t))sub_10004FBCC, (uint64_t)(&v175 - 6), (uint64_t)sub_10004FBDC, v158, v185, v184, v188);
  v162 = v189;
  v200 = swift_getWitnessTable(&unk_10010F020, v189);
  v163 = v186;
  v164 = v187;
  v165 = *(void (**)(char *, uint64_t, uint64_t))(v186 + 16);
  v165(v187, v161, v162);
  v166 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
  v166(v161, v162);
  v167 = v181;
  v168 = v182;
  v169 = v196;
  v170 = v183;
  (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v182, v196, v183);
  *(_QWORD *)&v221 = v168;
  v165((char *)v161, (uint64_t)v164, v162);
  *((_QWORD *)&v221 + 1) = v161;
  *(_QWORD *)&v215 = v170;
  *((_QWORD *)&v215 + 1) = v162;
  v171 = swift_getWitnessTable(&unk_100109330, v197);
  v205 = swift_getWitnessTable(&unk_10010B520, v194);
  v206 = &protocol witness table for _FrameLayout;
  v172 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v195);
  v203 = v171;
  v204 = v172;
  *(_QWORD *)&v209 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v170);
  *((_QWORD *)&v209 + 1) = v200;
  sub_100042510((uint64_t *)&v221, 2uLL, (uint64_t)&v215);
  v166((uint64_t)v164, v162);
  v173 = *(void (**)(char *, uint64_t))(v167 + 8);
  v173(v169, v170);
  v166(v161, v162);
  return ((uint64_t (*)(char *, uint64_t))v173)(v168, v170);
}

void sub_100048FBC(double *a1@<X8>)
{
  *a1 = sub_100072F88();
}

uint64_t sub_100048FE4(double *a1)
{
  return sub_100072F9C(*a1);
}

void sub_100049008(double *a1@<X8>)
{
  *a1 = sub_100072FB0();
}

uint64_t sub_100049030(double *a1)
{
  return sub_10007304C(*a1);
}

uint64_t sub_100049054@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100073168();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100049080(char *a1)
{
  return sub_10007317C(*a1);
}

uint64_t sub_1000490A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t TupleTypeMetadata;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  _BYTE v55[16];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v54 = a5;
  v8 = type metadata accessor for EventDetailModule(255, a2, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  type metadata accessor for VStack(255, v10, WitnessTable);
  v12 = sub_100007D00(&qword_10015A458);
  v13 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  v14 = swift_getTupleTypeMetadata2(255, v12, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for HStack(255, v15, v16);
  type metadata accessor for ModifiedContent(255, v17, &type metadata for _FrameLayout);
  v18 = type metadata accessor for _ConditionalContent(255);
  v19 = type metadata accessor for Group(255, v18);
  v20 = sub_100007D00(&qword_10015A460);
  v21 = type metadata accessor for ModifiedContent(255, v19, v20);
  v22 = sub_100007D00(&qword_10015A468);
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v59 = sub_100007D00(&qword_10015A470);
  v60 = type metadata accessor for GuideModule(255, a2, a3, v24);
  v61 = sub_100007D00(&qword_10015A478);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v27 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v28 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v27, &unk_100119D18, &unk_100119D20);
  v30 = type metadata accessor for LineupModule(255, v27, v28, v29);
  type metadata accessor for ModifiedContent(255, v30, &type metadata for _PaddingLayout);
  v62 = type metadata accessor for Optional(255);
  v63 = sub_100007D00(&qword_10015A480);
  v64 = sub_100007D00(&qword_10015A488);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v32 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v32);
  v34 = type metadata accessor for VStack(255, v32, v33);
  v35 = type metadata accessor for ModifiedContent(255, v34, &type metadata for PaddingModifier);
  v36 = sub_100007D00(&qword_100158630);
  v37 = type metadata accessor for ModifiedContent(255, v35, v36);
  v38 = swift_getTupleTypeMetadata2(255, v23, v37, 0, 0);
  v39 = type metadata accessor for TupleView(255, v38);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v41 = type metadata accessor for VStack(0, v39, v40);
  v42 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v44 = (char *)&v53 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v47 = (char *)&v53 - v46;
  v49 = static HorizontalAlignment.leading.getter(v48);
  v56 = a2;
  v57 = a3;
  v58 = a1;
  VStack.init(alignment:spacing:content:)(v49, 0, 0, sub_10004FC8C, v55, v39, v40);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v41);
  v50 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v50(v47, v44, v41);
  v51 = *(void (**)(char *, uint64_t))(v42 + 8);
  v51(v44, v41);
  v50(v54, v47, v41);
  return ((uint64_t (*)(char *, uint64_t))v51)(v47, v41);
}

uint64_t sub_1000494D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t TupleTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  __n128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  int v100;
  char *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void (*v134)(char *, char *, uint64_t);
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t (*v140)(uint64_t, uint64_t);
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t (*v155)(char *, uint64_t);
  char *v156;
  uint64_t WitnessTable;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[6];
  _QWORD v181[8];
  _QWORD v182[15];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v177 = a1;
  v174 = a4;
  v6 = type metadata accessor for ColorScheme(0);
  v172 = *(_QWORD *)(v6 - 8);
  v173 = v6;
  __chkstk_darwin(v6);
  v171 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v170 = (uint64_t)&v142 - v9;
  v183 = sub_100007D00(&qword_10015A470);
  v184 = type metadata accessor for GuideModule(255, a2, a3, v10);
  v185 = sub_100007D00(&qword_10015A478);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v14 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v13, &unk_100119D18, &unk_100119D20);
  v16 = type metadata accessor for LineupModule(255, v13, v14, v15);
  type metadata accessor for ModifiedContent(255, v16, &type metadata for _PaddingLayout);
  v186 = type metadata accessor for Optional(255);
  v187 = sub_100007D00(&qword_10015A480);
  v188 = sub_100007D00(&qword_10015A488);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v158 = v18;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v19 = type metadata accessor for VStack(0, v18, WitnessTable);
  v160 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v156 = (char *)&v142 - v20;
  v161 = v21;
  v22 = type metadata accessor for ModifiedContent(0, v21, &type metadata for PaddingModifier);
  v164 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v162 = (char *)&v142 - v23;
  v24 = sub_100007D00(&qword_100158630);
  v165 = v22;
  v169 = type metadata accessor for ModifiedContent(0, v22, v24);
  v166 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v168 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v163 = (char *)&v142 - v27;
  __chkstk_darwin(v28);
  v167 = (char *)&v142 - v29;
  v178 = type metadata accessor for EventView(0, a2, a3, v30);
  v153 = *(_QWORD *)(v178 - 8);
  v155 = *(uint64_t (**)(char *, uint64_t))(v153 + 64);
  __chkstk_darwin(v178);
  v154 = (char *)&v142 - v31;
  v32 = type metadata accessor for CoordinateSpace(0);
  v151 = *(_QWORD *)(v32 - 8);
  v152 = v32;
  __chkstk_darwin(v32);
  v150 = (char *)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = a2;
  v175 = a3;
  v35 = type metadata accessor for EventDetailModule(255, a2, a3, v34);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v35, 0, 0);
  v37 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v37);
  v39 = type metadata accessor for VStack(255, v37, v38);
  v40 = sub_100007D00(&qword_10015A458);
  v41 = type metadata accessor for ModifiedContent(255, v35, &type metadata for _PaddingLayout);
  v42 = swift_getTupleTypeMetadata2(255, v40, v41, 0, 0);
  v43 = type metadata accessor for TupleView(255, v42);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v43);
  v45 = type metadata accessor for HStack(255, v43, v44);
  v46 = type metadata accessor for ModifiedContent(255, v45, &type metadata for _FrameLayout);
  v47 = type metadata accessor for _ConditionalContent(255);
  v48 = type metadata accessor for Group(0, v47);
  v146 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v50 = (char *)&v142 - v49;
  v51 = sub_100007D00(&qword_10015A460);
  v52 = type metadata accessor for ModifiedContent(0, v48, v51);
  v53 = *(_QWORD *)(v52 - 8);
  v143 = v52;
  v148 = v53;
  __chkstk_darwin(v52);
  v144 = (uint64_t)&v142 - v54;
  v55 = sub_100007D00(&qword_10015A468);
  v179 = type metadata accessor for ModifiedContent(0, v52, v55);
  v149 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v159 = (char *)&v142 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v147 = (char *)&v142 - v58;
  __chkstk_darwin(v59);
  v176 = (char *)&v142 - v60;
  v181[2] = a2;
  v181[3] = a3;
  v61 = v177;
  v181[4] = v177;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v39);
  v182[13] = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v45);
  v182[14] = &protocol witness table for _FrameLayout;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v182[11] = v62;
  v182[12] = v63;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v47);
  Group<A>.init(content:)(sub_10004FC98, v181, v47, v64);
  v182[10] = v64;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v48);
  v66 = sub_10004FCA4();
  v142 = v66;
  v68 = (uint64_t)v150;
  v67 = v151;
  v69 = v152;
  (*(void (**)(char *, _QWORD, uint64_t))(v151 + 104))(v150, enum case for CoordinateSpace.local(_:), v152);
  v70 = v144;
  sub_10005698C((uint64_t)&type metadata for HeaderContentHeightPreferenceKey, v68, (uint64_t)sub_10001F8A8, 0, v48, (uint64_t)&type metadata for HeaderContentHeightPreferenceKey, v65, v66, v144);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v50, v48);
  v72 = v153;
  v71 = v154;
  v73 = v178;
  (*(void (**)(char *, uint64_t, uint64_t))(v153 + 16))(v154, v61, v178);
  v74 = *(unsigned __int8 *)(v72 + 80);
  v75 = (v74 + 32) & ~v74;
  v76 = swift_allocObject(&unk_100149F30, (char *)v155 + v75, v74 | 7);
  v77 = v145;
  v78 = v175;
  *(_QWORD *)(v76 + 16) = v145;
  *(_QWORD *)(v76 + 24) = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v76 + v75, v71, v73);
  v79 = sub_10000F4E0(&qword_10015A5D0, &qword_10015A460, (uint64_t)&unk_100108C38);
  v182[8] = v65;
  v182[9] = v79;
  v80 = v143;
  v81 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v143);
  v82 = sub_100007428(&qword_100159938, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v83 = v147;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for HeaderContentHeightPreferenceKey, sub_10004FCEC, v76, v80, &type metadata for HeaderContentHeightPreferenceKey, v81, v142, v82);
  v84 = swift_release(v76);
  v85 = v156;
  (*(void (**)(uint64_t, uint64_t, __n128))(v148 + 8))(v70, v80, v84);
  v86 = sub_10000F4E0(&qword_10015A5D8, &qword_10015A468, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v182[6] = v81;
  v182[7] = v86;
  v87 = v179;
  v154 = (char *)swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v179);
  v88 = v149;
  v153 = *(_QWORD *)(v149 + 16);
  ((void (*)(char *, char *, uint64_t))v153)(v176, v83, v87);
  v89 = v177;
  v155 = *(uint64_t (**)(char *, uint64_t))(v88 + 8);
  v90 = v155(v83, v87);
  v91 = static HorizontalAlignment.leading.getter(v90);
  v180[2] = v77;
  v180[3] = v175;
  v180[4] = v89;
  v92 = VStack.init(alignment:spacing:content:)(v91, 0, 0, sub_10004FD60, v180, v158, WitnessTable);
  v93 = static Edge.Set.leading.getter(v92);
  v94 = v93;
  v95 = static Edge.Set.trailing.getter(v93);
  v96 = v95;
  v97 = static Edge.Set.bottom.getter(v95);
  v98 = Edge.Set.init(rawValue:)(0);
  v99 = Edge.Set.init(rawValue:)(v98);
  if (Edge.Set.init(rawValue:)(v99 & v94) != v94)
    v98 = Edge.Set.init(rawValue:)(v98 | v94);
  v100 = Edge.Set.init(rawValue:)(v98);
  if (Edge.Set.init(rawValue:)(v100 & v96) != v96)
    v98 = Edge.Set.init(rawValue:)(v98 | v96);
  v101 = v162;
  v102 = Edge.Set.init(rawValue:)(v98);
  if (Edge.Set.init(rawValue:)(v102 & v97) != v97)
    LOBYTE(v98) = Edge.Set.init(rawValue:)(v98 | v97);
  v105 = sub_100044988(v178, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v103, v104);
  v106 = sub_100073190();
  v108 = v107;
  v110 = v109;
  v112 = v111;
  swift_release(v105);
  v113 = v161;
  v114 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v161);
  sub_100056AB8(v98, v113, v114, v106, v108, v110, v112);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v85, v113);
  v115 = v170;
  sub_100018C18(v170);
  v117 = v171;
  v116 = v172;
  v118 = v173;
  (*(void (**)(char *, _QWORD, uint64_t))(v172 + 104))(v171, enum case for ColorScheme.light(_:), v173);
  LOBYTE(v105) = static ColorScheme.== infix(_:_:)(v115, v117);
  v119 = *(void (**)(char *, uint64_t))(v116 + 8);
  v119(v117, v118);
  v119((char *)v115, v118);
  if ((v105 & 1) != 0)
  {
    if (qword_100158098 != -1)
      swift_once(&qword_100158098, sub_100051410);
    v120 = &qword_10016A4B0;
  }
  else
  {
    if (qword_100158090 != -1)
      swift_once(&qword_100158090, sub_1000513FC);
    v120 = &qword_10016A4A8;
  }
  v121 = *v120;
  swift_retain(*v120);
  v183 = v121;
  v123 = static Edge.Set.all.getter(v122);
  v124 = sub_10004FD6C();
  v182[4] = v114;
  v182[5] = v124;
  v125 = v165;
  v126 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v165);
  v127 = v163;
  View.background<A>(_:ignoresSafeAreaEdges:)(&v183, v123, v125, &type metadata for Color, v126, &protocol witness table for Color);
  v128 = swift_release(v121);
  (*(void (**)(char *, uint64_t, __n128))(v164 + 8))(v101, v125, v128);
  v129 = sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  v182[2] = v126;
  v182[3] = v129;
  v130 = v169;
  v131 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v169);
  v132 = v166;
  v133 = v167;
  v134 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
  v134(v167, v127, v130);
  v135 = *(void (**)(char *, uint64_t))(v132 + 8);
  v135(v127, v130);
  v136 = (uint64_t)v159;
  v137 = v176;
  v138 = v179;
  ((void (*)(char *, char *, uint64_t))v153)(v159, v176, v179);
  v183 = v136;
  v139 = v168;
  v134(v168, v133, v130);
  v184 = (uint64_t)v139;
  v182[0] = v138;
  v182[1] = v130;
  v181[6] = v154;
  v181[7] = v131;
  sub_100042510(&v183, 2uLL, (uint64_t)v182);
  v135(v133, v130);
  v140 = (uint64_t (*)(uint64_t, uint64_t))v155;
  v155(v137, v138);
  v135(v139, v130);
  return v140(v136, v138);
}

uint64_t sub_10004A108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  char *v72;
  uint64_t WitnessTable;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;

  v85 = a4;
  v7 = sub_100007D00(&qword_10015A458);
  v9 = type metadata accessor for EventDetailModule(255, a2, a3, v8);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v10, 0, 0);
  v74 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v74);
  v12 = type metadata accessor for HStack(0, v74, WitnessTable);
  v76 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v75 = (char *)&v71 - v13;
  v84 = v14;
  v15 = type metadata accessor for ModifiedContent(0, v14, &type metadata for _FrameLayout);
  v77 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v79 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v78 = (char *)&v71 - v18;
  v19 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v9, 0, 0);
  v20 = type metadata accessor for TupleView(255, v19);
  v71 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v21 = type metadata accessor for VStack(0, v20, v71);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v72 = (char *)&v71 - v26;
  v80 = v15;
  v27 = type metadata accessor for _ConditionalContent(0);
  v82 = *(_QWORD *)(v27 - 8);
  v83 = v27;
  __chkstk_darwin(v27);
  v81 = (char *)&v71 - v28;
  v29 = a2;
  v30 = a3;
  v32 = type metadata accessor for EventView(0, a2, a3, v31);
  v33 = a1;
  v36 = sub_100044988(v32, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v34, v35);
  LOBYTE(a1) = sub_100072AD4();
  swift_release(v36);
  if ((a1 & 1) != 0)
  {
    v38 = static HorizontalAlignment.center.getter(v37);
    __chkstk_darwin(v38);
    *(&v71 - 4) = v29;
    *(&v71 - 3) = v30;
    *(&v71 - 2) = v33;
    VStack.init(alignment:spacing:content:)(v39, 0, 0, sub_1000505D8, &v71 - 6, v20, v71);
    v79 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
    v40 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v41 = v72;
    v40(v72, v24, v21);
    v42 = *(void (**)(char *, uint64_t))(v22 + 8);
    v42(v24, v21);
    v40(v24, v41, v21);
    v43 = v84;
    v86 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v84);
    v87 = &protocol witness table for _FrameLayout;
    v44 = v80;
    v45 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
    v46 = v81;
    sub_1000426C4((uint64_t)v24, v21, v44, v79, v45);
    v42(v24, v21);
    v42(v41, v21);
  }
  else
  {
    __chkstk_darwin(v37);
    *(&v71 - 4) = v29;
    *(&v71 - 3) = v30;
    *(&v71 - 2) = v33;
    v48 = static VerticalAlignment.center.getter(v47);
    v49 = v75;
    HStack.init(alignment:spacing:content:)(v48, 0, 0, sub_1000505CC, &v71 - 6, v74, WitnessTable);
    v52 = sub_100044988(v32, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v50, v51);
    v53 = sub_1000730EC();
    swift_release(v52);
    v55 = static Alignment.center.getter(v54);
    v57 = v56;
    v43 = v84;
    v58 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v84);
    v59 = v79;
    View.frame(width:height:alignment:)(0, 1, *(_QWORD *)&v53, 0, v55, v57, v43, v58);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v49, v43);
    v92 = v58;
    v93 = &protocol witness table for _FrameLayout;
    v44 = v80;
    v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
    v61 = v77;
    v62 = v78;
    v63 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    v63(v78, v59, v44);
    v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v64(v59, v44);
    v63((char *)v59, (uint64_t)v62, v44);
    v65 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
    v46 = v81;
    sub_100042788(v59, v21, v44, v65, v60);
    v64(v59, v44);
    v64((uint64_t)v62, v44);
  }
  v66 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v21);
  v90 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v43);
  v91 = &protocol witness table for _FrameLayout;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v88 = v66;
  v89 = v67;
  v68 = v83;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v83);
  v69 = v82;
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 16))(v85, v46, v68);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v46, v68);
}

uint64_t sub_10004A700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t WitnessTable;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  char *v52;
  char v53;

  v45 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EventDetailViewModel(0, v10, v11, v12);
  __chkstk_darwin(v13);
  v43 = (char *)&v42 - v14;
  v16 = type metadata accessor for EventDetailModule(0, a2, a3, v15);
  v44 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - v21;
  v42 = Namespace.wrappedValue.getter(*(_QWORD *)(a1 + 64), v20);
  v24 = type metadata accessor for EventView(0, a2, a3, v23);
  v27 = sub_100044988(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v27 + *(_QWORD *)(*(_QWORD *)v27 + 160), a2);
  swift_release(v27);
  v30 = sub_100044988(v24, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v28, v29);
  v46 = a2;
  v47 = a3;
  KeyPath = swift_getKeyPath(&unk_10010A8B8);
  v33 = type metadata accessor for EventViewModel(255, a2, a3, v32);
  WitnessTable = swift_getWitnessTable(&unk_10010D188, v33);
  ObservedObject.Wrapper.subscript.getter(&v51, KeyPath, v30, WitnessTable);
  swift_release(KeyPath);
  swift_release(v30);
  v35 = v43;
  sub_1000EBBD4(v42, (uint64_t)v9, v51, (uint64_t)v52, v53, a2, a3, v43);
  sub_10007541C((uint64_t)v35, a2, a3, v36, (uint64_t)v18);
  v37 = swift_getWitnessTable(&unk_10010D4E0, v16);
  v38 = v44;
  v39 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v39(v22, v18, v16);
  v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v40(v18, v16);
  v39(v18, v22, v16);
  v52 = v18;
  v50[0] = &type metadata for HeroImagePlaceholder;
  v50[1] = v16;
  v48 = sub_10002092C();
  v49 = v37;
  sub_100042510(&v51, 2uLL, (uint64_t)v50);
  v40(v22, v16);
  return ((uint64_t (*)(char *, uint64_t))v40)(v18, v16);
}

uint64_t sub_10004A99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  void *v69;
  uint64_t *v70;
  char *v71;
  char v72;

  v60 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EventDetailViewModel(0, v10, v11, v12);
  __chkstk_darwin(v13);
  v56 = (char *)&v53 - v14;
  v16 = type metadata accessor for EventDetailModule(0, a2, a3, v15);
  v59 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v55 = (uint64_t)&v53 - v17;
  v18 = type metadata accessor for ModifiedContent(0, v16, &type metadata for _PaddingLayout);
  v58 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v57 = (char *)&v53 - v23;
  v54 = Namespace.wrappedValue.getter(*(_QWORD *)(a1 + 64), v22);
  v25 = type metadata accessor for EventView(0, a2, a3, v24);
  v28 = sub_100044988(v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v26, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v28 + *(_QWORD *)(*(_QWORD *)v28 + 160), a2);
  swift_release(v28);
  v31 = sub_100044988(v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter, v29, v30);
  v61 = a2;
  v62 = a3;
  KeyPath = swift_getKeyPath(&unk_10010A8B8);
  v34 = type metadata accessor for EventViewModel(255, a2, a3, v33);
  WitnessTable = swift_getWitnessTable(&unk_10010D188, v34);
  ObservedObject.Wrapper.subscript.getter(&v70, KeyPath, v31, WitnessTable);
  swift_release(KeyPath);
  swift_release(v31);
  v36 = v56;
  sub_1000EBBD4(v54, (uint64_t)v9, (uint64_t)v70, (uint64_t)v71, v72, a2, a3, v56);
  v37 = v55;
  v39 = sub_10007541C((uint64_t)v36, a2, a3, v38, v55);
  v40 = static Edge.Set.trailing.getter(v39);
  v43 = sub_100044988(v25, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v41, v42);
  sub_100073190();
  v45 = v44;
  swift_release(v43);
  v46 = swift_getWitnessTable(&unk_10010D4E0, v16);
  View.padding(_:_:)(v40, v45, 0, v16, v46);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v37, v16);
  v68 = v46;
  v69 = &protocol witness table for _PaddingLayout;
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v49 = v57;
  v48 = v58;
  v50 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v50(v57, v20, v18);
  v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v20, v18);
  v66 = 0;
  v67 = 1;
  v70 = &v66;
  v50(v20, v49, v18);
  v71 = v20;
  v65[0] = sub_100007D50(&qword_10015A458);
  v65[1] = v18;
  v63 = sub_10001E0A8(&qword_10015A6B0, &qword_10015A458, (void (*)(void))sub_10002092C);
  v64 = v47;
  sub_100042510((uint64_t *)&v70, 2uLL, (uint64_t)v65);
  v51(v49, v18);
  return ((uint64_t (*)(char *, uint64_t))v51)(v20, v18);
}

double sub_10004AD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = *(double *)(a1 + 8);
  v5 = type metadata accessor for EventView(0, a3, a4, a4);
  v8 = sub_100044988(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  sub_10007304C(v4);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_10004ADB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, char *, uint64_t);
  void (*v83)(uint64_t, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD, _QWORD);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(__int128 *, __int128 *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  __n128 v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  double v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t result;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t (**v294)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void (*v298)(uint64_t, char *, uint64_t);
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t WitnessTable;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t *v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  char *v336;
  void (*v337)(uint64_t, char *, uint64_t);
  __int128 v338;
  _BYTE v339[40];
  char v340;
  __int128 v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  char v348;
  uint64_t v349;
  void *v350;
  __int128 v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  __int128 v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  void *v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  char v369;
  uint64_t v370;
  __n128 v371[2];
  _BYTE v372[32];
  uint64_t v373;
  uint64_t v374;
  __int128 v375;
  uint64_t v376[3];

  v318 = a4;
  v292 = type metadata accessor for AppModule(0);
  __chkstk_darwin(v292);
  v294 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v286 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100007D50(&qword_10015A5E8);
  v311 = *(_QWORD *)(v8 - 8);
  v312 = v8;
  __chkstk_darwin(v8);
  v293 = (uint64_t)&v286 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v314 = sub_100007D50(&qword_10015A488);
  __chkstk_darwin(v314);
  v317 = (uint64_t)&v286 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v327 = (uint64_t)&v286 - v12;
  v287 = sub_100007D50(&qword_10015A5F0);
  __chkstk_darwin(v287);
  v288 = (char *)&v286 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v291 = sub_100007D50(&qword_10015A5F8);
  __chkstk_darwin(v291);
  v290 = (uint64_t)&v286 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100007D50(&qword_10015A600);
  v307 = *(_QWORD *)(v15 - 8);
  v308 = v15;
  __chkstk_darwin(v15);
  v289 = (char *)&v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = sub_100007D50(&qword_10015A480);
  __chkstk_darwin(v313);
  v315 = (uint64_t)&v286 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v325 = (uint64_t)&v286 - v19;
  v310 = sub_100007D50(&qword_10015A478);
  __chkstk_darwin(v310);
  v316 = (uint64_t)&v286 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v332 = (uint64_t *)((char *)&v286 - v22);
  WitnessTable = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v23);
  v306 = (char *)&v286 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for GuideViewModel(0, a2, a3, v25);
  __chkstk_darwin(v26);
  v304 = (uint64_t *)((char *)&v286 - v27);
  v324 = type metadata accessor for GuideModule(0, a2, a3, v28);
  v303 = *(_QWORD *)(v324 - 8);
  __chkstk_darwin(v324);
  v333 = (uint64_t)&v286 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v331 = (char *)&v286 - v31;
  v328 = a2;
  v326 = a3;
  v33 = type metadata accessor for EventView(0, a2, a3, v32);
  v34 = *(_QWORD *)(v33 - 8);
  v319 = *(_QWORD *)(v34 + 64);
  __chkstk_darwin(v33);
  v320 = (char *)&v286 - v35;
  v36 = sub_100007D50(&qword_10015A608);
  v301 = *(_QWORD *)(v36 - 8);
  v302 = v36;
  __chkstk_darwin(v36);
  v300 = (char *)&v286 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v38);
  v40 = (char *)&v286 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ArtistPromotionalAssets(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v41);
  v299 = (char *)&v286 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v329 = (uint64_t)&v286 - v45;
  v309 = sub_100007D50(&qword_10015A470);
  __chkstk_darwin(v309);
  v323 = (uint64_t)&v286 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v330 = (uint64_t)&v286 - v48;
  v49 = v33;
  v321 = a1;
  v52 = sub_100044988(v33, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v50, v51);
  v53 = *(_QWORD *)(v52 + *(_QWORD *)(*(_QWORD *)v52 + 168));
  swift_retain(v53);
  swift_release(v52);
  KeyPath = swift_getKeyPath(&unk_10010AA90);
  *(_QWORD *)&v334 = v53;
  v55 = sub_100007428((unint64_t *)&qword_10015A618, type metadata accessor for PromotionalAssetsController, (uint64_t)&unk_100111BC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v334, KeyPath, v55);
  swift_release(KeyPath);
  v56 = v53 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v53 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, &v370, 0, 0);
  sub_100007E78(v56, (uint64_t)v40, &qword_10015A610);
  v57 = swift_release(v53);
  v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v42 + 48))(v40, 1, v41, v57);
  v322 = v34;
  if (v58 == 1)
  {
    sub_100007F38((uint64_t)v40, &qword_10015A610);
    v59 = 1;
    v60 = v328;
    v61 = v326;
    v62 = v330;
    v63 = v321;
    v65 = v301;
    v64 = v302;
  }
  else
  {
    v66 = v34;
    v67 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
    v297 = v41;
    v298 = v67;
    v68 = v42;
    v67(v329, v40, v41);
    v69 = v49;
    v70 = v321;
    v73 = sub_100044988(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v71, v72);
    v74 = *(_QWORD *)(v73 + *(_QWORD *)(*(_QWORD *)v73 + 168));
    swift_retain(v74);
    swift_release(v73);
    v75 = type metadata accessor for PromotionalAssetsEntryViewModel(0);
    v76 = swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
    ObservationRegistrar.init()(v76);
    *(_QWORD *)(v76 + 16) = v74;
    *(_QWORD *)&v364 = v76;
    v77 = State.init(wrappedValue:)(&v364, v75);
    v78 = v334;
    LOBYTE(v75) = static Edge.Set.top.getter(v77);
    v79 = EdgeInsets.init(_all:)(33.0);
    v81 = v80;
    v83 = (void (*)(uint64_t, char *, uint64_t))v82;
    v85 = v84;
    v87 = static Edge.Set.horizontal.getter(v86);
    v334 = v78;
    LOBYTE(v335) = v75;
    *((double *)&v335 + 1) = v79;
    v336 = (char *)v81;
    v337 = v83;
    *(_QWORD *)&v338 = v85;
    BYTE8(v338) = 0;
    v339[0] = v87;
    memset(&v339[8], 0, 32);
    v340 = 1;
    v88 = v320;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v320, v70, v69);
    v89 = v68;
    v296 = v68;
    v90 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    v91 = v299;
    v92 = v297;
    v90(v299, v329, v297);
    v93 = *(unsigned __int8 *)(v66 + 80);
    v94 = (v93 + 32) & ~v93;
    v95 = *(unsigned __int8 *)(v89 + 80);
    v96 = (v319 + v95 + v94) & ~v95;
    v97 = swift_allocObject(&unk_100149F80, v96 + v43, v93 | v95 | 7);
    v61 = v326;
    *(_QWORD *)(v97 + 16) = v328;
    *(_QWORD *)(v97 + 24) = v61;
    (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v97 + v94, v88, v69);
    v298(v97 + v96, v91, v92);
    v98 = sub_100007D50(&qword_10015A640);
    v99 = sub_10001E0A8(&qword_10015A648, &qword_10015A640, (void (*)(void))sub_1000500EC);
    v100 = v300;
    View.onTapGesture(count:perform:)(1, sub_100050550, v97, v98, v99);
    swift_release(v97);
    v101 = *((_QWORD *)&v334 + 1);
    swift_release(v334);
    v102 = swift_release(v101);
    (*(void (**)(uint64_t, uint64_t, __n128))(v296 + 8))(v329, v92, v102);
    v104 = v301;
    v103 = v302;
    v105 = v330;
    (*(void (**)(uint64_t, char *, uint64_t))(v301 + 32))(v330, v100, v302);
    v59 = 0;
    v60 = v328;
    v62 = v105;
    v49 = v69;
    v63 = v321;
    v64 = v103;
    v65 = v104;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v62, v59, 1, v64);
  v108 = sub_100044988(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v106, v107);
  v109 = (uint64_t)v306;
  (*(void (**)(char *, uint64_t, uint64_t))(WitnessTable + 16))(v306, v108 + *(_QWORD *)(*(_QWORD *)v108 + 160), v60);
  swift_release(v108);
  v110 = (void (*)(_QWORD, _QWORD, _QWORD))v304;
  sub_10004206C(v109, v60, v61, (uint64_t)v304);
  v111 = v333;
  sub_100006F0C((uint64_t)v110, v60, v61, v112, v333);
  v113 = v324;
  WitnessTable = swift_getWitnessTable(&unk_100108288, v324);
  v114 = v303;
  v304 = *(_QWORD **)(v303 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v304)(v331, v111, v113);
  v306 = *(char **)(v114 + 8);
  ((void (*)(uint64_t, uint64_t))v306)(v111, v113);
  v117 = sub_100044988(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v115, v116);
  v118 = sub_10007333C();
  v120 = v119;
  swift_release(v117);
  v329 = v49;
  if (v120)
  {
    v123 = sub_100044988(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v121, v122);
    v124 = sub_10007336C();
    v125 = v63;
    v127 = v126;
    swift_release(v123);
    v130 = sub_100044988(v329, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v128, v129);
    type metadata accessor for AttributionViewModel(0);
    v131 = v332;
    sub_10007339C();
    swift_release(v130);
    *v131 = v124;
    v131[1] = v127;
    v63 = v125;
    v49 = v329;
    v131[2] = v118;
    v131[3] = v120;
    v132 = type metadata accessor for AttributionModule(0);
    v133 = (uint64_t *)((char *)v131 + *(int *)(v132 + 20));
    v134 = type metadata accessor for RemoteViewConfiguration();
    v135 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *v133 = EnvironmentObject.init()(v134, v135);
    v133[1] = v136;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56))(v131, 0, 1, v132);
  }
  else
  {
    v139 = type metadata accessor for AttributionModule(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 56))(v332, 1, 1, v139);
  }
  v140 = sub_100044988(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v137, v138);
  v141 = sub_1000733CC();
  swift_release(v140);
  if ((v141 & 1) != 0)
  {
    v144 = sub_100044988(v49, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v142, v143);
    v145 = sub_1000735B8();
    swift_release(v144);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v61, v60, &unk_10011790C, &unk_10011796C);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v61, v60, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
    v148 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
    v149 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v148, &unk_100119D18, &unk_100119D20);
    sub_1000AD924(v145, (uint64_t)v371);
    sub_1000D371C(v371, (__n128 *)v372);
    v376[0] = v373;
    v375 = *(_OWORD *)&v372[8];
    v374 = *(_QWORD *)v372;
    v334 = *(_OWORD *)v372;
    v335 = *(_OWORD *)&v372[16];
    v336 = (char *)v373;
    v151 = static Edge.Set.top.getter(v150);
    v153 = type metadata accessor for LineupModule(0, v148, v149, v152);
    v154 = swift_getWitnessTable(&unk_1001107E8, v153);
    View.padding(_:_:)(v151, 0x4030000000000000, 0, v153, v154);
    sub_100050310(&v374);
    sub_100050338((uint64_t)&v375);
    sub_100050310(v376);
    v155 = v364;
    v156 = v365;
    v157 = v63;
    v158 = v366;
    v351 = v364;
    v352 = v365;
    LOBYTE(v353) = BYTE8(v365);
    v354 = v366;
    LOBYTE(v355) = BYTE8(v366);
    v356 = v367;
    v357 = v368;
    v358 = v369;
    v159 = type metadata accessor for ModifiedContent(0, v153, &type metadata for _PaddingLayout);
    v349 = v154;
    v350 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v159);
    v160 = *(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v159 - 8) + 16);
    v160(&v334, &v351, v159);
    v161 = v158;
    v63 = v157;
    swift_bridgeObjectRelease(v161);
    swift_bridgeObjectRelease(v156);
    swift_bridgeObjectRelease(v155);
    v162 = v334;
    v163 = v335;
    v164 = (uint64_t)v336;
    v364 = v334;
    *(_QWORD *)&v365 = v335;
    BYTE8(v365) = BYTE8(v335);
    *(_QWORD *)&v366 = v336;
    BYTE8(v366) = (_BYTE)v337;
    v367 = v338;
    v368 = *(_OWORD *)v339;
    v369 = v339[16];
    v160(&v351, &v364, v159);
    swift_bridgeObjectRelease(v164);
    swift_bridgeObjectRelease(v163);
    swift_bridgeObjectRelease(v162);
    v165 = v351;
    v166 = v352;
    v167 = v354;
    v341 = v351;
    v342 = v352;
    v343 = v353;
    v344 = v354;
    v345 = v355;
    v346 = v356;
    v347 = v357;
    v348 = v358;
    v168 = type metadata accessor for Optional(0);
    (*(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v168 - 8) + 16))(&v364, &v341, v168);
    swift_bridgeObjectRelease(v167);
    swift_bridgeObjectRelease(v166);
    swift_bridgeObjectRelease(v165);
    v302 = *((_QWORD *)&v364 + 1);
    v303 = v364;
    v300 = (char *)*((_QWORD *)&v365 + 1);
    v301 = v365;
    v298 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)&v366 + 1);
    v299 = (char *)v366;
    v296 = *((_QWORD *)&v367 + 1);
    v297 = v367;
    v169 = *((_QWORD *)&v368 + 1);
    v295 = v368;
    v170 = v369;
  }
  else
  {
    v171 = swift_getAssociatedTypeWitness(255, v61, v60, &unk_10011790C, &unk_10011796C);
    v172 = swift_getAssociatedConformanceWitness(v61, v60, v171, &unk_10011790C, &unk_10011792C);
    v173 = swift_getAssociatedTypeWitness(255, v172, v171, &unk_100119D18, &unk_100119D30);
    v174 = swift_getAssociatedConformanceWitness(v172, v171, v173, &unk_100119D18, &unk_100119D20);
    v176 = type metadata accessor for LineupModule(255, v173, v174, v175);
    v177 = type metadata accessor for ModifiedContent(0, v176, &type metadata for _PaddingLayout);
    v364 = 0u;
    v365 = 0u;
    v366 = 0u;
    v367 = 0u;
    v368 = 0u;
    v369 = 0;
    v362 = swift_getWitnessTable(&unk_1001107E8, v176);
    v363 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v177);
    v178 = type metadata accessor for Optional(0);
    (*(void (**)(__int128 *, __int128 *, uint64_t))(*(_QWORD *)(v178 - 8) + 16))(&v334, &v364, v178);
    v302 = *((_QWORD *)&v334 + 1);
    v303 = v334;
    v300 = (char *)*((_QWORD *)&v335 + 1);
    v301 = v335;
    v298 = v337;
    v299 = v336;
    v296 = *((_QWORD *)&v338 + 1);
    v297 = v338;
    v169 = *(_QWORD *)&v339[8];
    v295 = *(_QWORD *)v339;
    v170 = v339[16];
  }
  v179 = v325;
  v180 = sub_1000449F4();
  v181 = sub_10004C6F4();
  swift_release(v180);
  v182 = v181[2];
  swift_bridgeObjectRelease(v181);
  v183 = v322;
  if (v182)
  {
    v184 = sub_1000449F4();
    v185 = sub_10004C6F4();
    swift_release(v184);
    v186 = sub_1000449F4();
    v187 = sub_100007D50(&qword_10015A620);
    v188 = (uint64_t)v288;
    sub_10004C880((uint64_t)&v288[*(int *)(v187 + 44)]);
    swift_release(v186);
    v191 = sub_100044988(v329, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v189, v190);
    v192 = sub_1000737C4();
    swift_release(v191);
    *(_QWORD *)v188 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x80000001001139B0);
    *(_QWORD *)(v188 + 8) = v193;
    *(_BYTE *)(v188 + 16) = v194 & 1;
    *(_QWORD *)(v188 + 24) = v195;
    *(_QWORD *)(v188 + 32) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100113410);
    *(_QWORD *)(v188 + 40) = v196;
    *(_BYTE *)(v188 + 48) = v197 & 1;
    *(_QWORD *)(v188 + 56) = v198;
    *(_QWORD *)(v188 + 64) = v185;
    *(_QWORD *)(v188 + *(int *)(v187 + 48)) = v192;
    v199 = v287;
    v200 = (_QWORD *)(v188 + *(int *)(v287 + 36));
    *v200 = swift_getKeyPath(&unk_10010AAB8);
    v201 = sub_100007D50(&qword_100158AC0);
    swift_storeEnumTagMultiPayload(v200, v201, 0);
    v202 = (_QWORD *)(v188 + *(int *)(v199 + 40));
    *v202 = swift_getKeyPath(&unk_10010AAE8);
    v203 = sub_100007D50(&qword_1001582E8);
    swift_storeEnumTagMultiPayload(v202, v203, 0);
    v204 = (uint64_t *)(v188 + *(int *)(v199 + 44));
    v205 = type metadata accessor for RemoteViewConfiguration();
    v206 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    v207 = EnvironmentObject.init()(v205, v206);
    *v204 = v207;
    v204[1] = v208;
    LOBYTE(v205) = static Edge.Set.top.getter(v207);
    v209 = EdgeInsets.init(_all:)(16.0);
    v211 = v210;
    v213 = v212;
    v215 = v214;
    v216 = v290;
    sub_100007E78(v188, v290, &qword_10015A5F0);
    v217 = v291;
    v218 = v216 + *(int *)(v291 + 36);
    *(_BYTE *)v218 = v205;
    *(double *)(v218 + 8) = v209;
    *(_QWORD *)(v218 + 16) = v211;
    *(_QWORD *)(v218 + 24) = v213;
    *(_QWORD *)(v218 + 32) = v215;
    *(_BYTE *)(v218 + 40) = 0;
    sub_100007F38(v188, &qword_10015A5F0);
    if (qword_100158100 != -1)
      swift_once(&qword_100158100, sub_1000753C0);
    v219 = qword_10016A560;
    v220 = *(_QWORD *)algn_10016A568;
    v221 = sub_10004FDC8();
    v222 = (uint64_t)v289;
    View.accessibilityIdentifier(_:)(v219, v220, v217, v221);
    sub_100007F38(v216, &qword_10015A5F8);
    sub_100018EB4(v222, v179, &qword_10015A600);
    v223 = 0;
    v225 = v307;
    v224 = v308;
    v183 = v322;
  }
  else
  {
    v223 = 1;
    v225 = v307;
    v224 = v308;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v225 + 56))(v179, v223, 1, v224);
  v226 = v329;
  v229 = sub_100044988(v329, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v227, v228);
  v230 = *(_QWORD *)(v63 + 72);
  if (v230)
  {
    v231 = v229;
    swift_retain(*(_QWORD *)(v63 + 72));
    v233 = sub_100074F28(v232);
    v235 = v234;
    swift_release(v231);
    v236 = swift_release(v230);
    if (!v235)
      goto LABEL_20;
    swift_bridgeObjectRelease(v235);
    v237 = HIBYTE(v235) & 0xF;
    if ((v235 & 0x2000000000000000) == 0)
      v237 = v233 & 0xFFFFFFFFFFFFLL;
    if (!v237)
    {
      v265 = 1;
      v264 = v327;
      v243 = v328;
      v245 = v326;
      v261 = v312;
    }
    else
    {
LABEL_20:
      v238 = v320;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v183 + 16))(v320, v63, v226, v236);
      v239 = *(unsigned __int8 *)(v183 + 80);
      v240 = (v239 + 32) & ~v239;
      v241 = swift_allocObject(&unk_100149F58, v240 + v319, v239 | 7);
      v242 = v183;
      v243 = v328;
      v244 = v226;
      v245 = v326;
      *(_QWORD *)(v241 + 16) = v328;
      *(_QWORD *)(v241 + 24) = v245;
      (*(void (**)(uint64_t, char *, uint64_t))(v242 + 32))(v241 + v240, v238, v244);
      v246 = (uint64_t)v294;
      *v294 = sub_10004FFE8;
      *(_QWORD *)(v246 + 8) = v241;
      *(_BYTE *)(v246 + 16) = 0;
      v247 = type metadata accessor for RemoteViewConfiguration();
      v248 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
      *(_QWORD *)(v246 + 24) = EnvironmentObject.init()(v247, v248);
      *(_QWORD *)(v246 + 32) = v249;
      v250 = (_QWORD *)(v246 + *(int *)(v292 + 24));
      *v250 = swift_getKeyPath(&unk_10010AAE8);
      v251 = sub_100007D50(&qword_1001582E8);
      v252 = swift_storeEnumTagMultiPayload(v250, v251, 0);
      LOBYTE(v250) = static Edge.Set.top.getter(v252);
      v253 = EdgeInsets.init(_all:)(16.0);
      v255 = v254;
      v257 = v256;
      v259 = v258;
      v260 = v293;
      sub_10001BFB8(v246, v293, type metadata accessor for AppModule);
      v261 = v312;
      v262 = v260 + *(int *)(v312 + 36);
      *(_BYTE *)v262 = (_BYTE)v250;
      *(double *)(v262 + 8) = v253;
      *(_QWORD *)(v262 + 16) = v255;
      *(_QWORD *)(v262 + 24) = v257;
      *(_QWORD *)(v262 + 32) = v259;
      *(_BYTE *)(v262 + 40) = 0;
      sub_10001E24C(v246, type metadata accessor for AppModule);
      v263 = v260;
      v264 = v327;
      sub_100018EB4(v263, v327, &qword_10015A5E8);
      v265 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v311 + 56))(v264, v265, 1, v261);
    v266 = v323;
    sub_100007E78(v330, v323, &qword_10015A470);
    *(_QWORD *)&v364 = v266;
    v267 = v333;
    v268 = v324;
    ((void (*)(uint64_t, char *, uint64_t))v304)(v333, v331, v324);
    *((_QWORD *)&v364 + 1) = v267;
    v269 = v316;
    sub_100007E78((uint64_t)v332, v316, &qword_10015A478);
    *(_QWORD *)&v334 = v303;
    *((_QWORD *)&v334 + 1) = v302;
    *(_QWORD *)&v335 = v301;
    *((_QWORD *)&v335 + 1) = v300;
    v336 = v299;
    v337 = v298;
    *(_QWORD *)&v338 = v297;
    *((_QWORD *)&v338 + 1) = v296;
    *(_QWORD *)v339 = v295;
    *(_QWORD *)&v339[8] = v169;
    v339[16] = v170;
    *(_QWORD *)&v365 = v269;
    *((_QWORD *)&v365 + 1) = &v334;
    v270 = v325;
    v271 = v315;
    sub_100007E78(v325, v315, &qword_10015A480);
    *(_QWORD *)&v366 = v271;
    v272 = v317;
    sub_100007E78(v264, v317, &qword_10015A488);
    *((_QWORD *)&v366 + 1) = v272;
    *(_QWORD *)&v351 = v309;
    *((_QWORD *)&v351 + 1) = v268;
    v352 = v310;
    v273 = swift_getAssociatedTypeWitness(255, v245, v243, &unk_10011790C, &unk_10011796C);
    v274 = swift_getAssociatedConformanceWitness(v245, v243, v273, &unk_10011790C, &unk_10011792C);
    v275 = swift_getAssociatedTypeWitness(255, v274, v273, &unk_100119D18, &unk_100119D30);
    v276 = swift_getAssociatedConformanceWitness(v274, v273, v275, &unk_100119D18, &unk_100119D20);
    v278 = type metadata accessor for LineupModule(255, v275, v276, v277);
    v279 = type metadata accessor for ModifiedContent(255, v278, &type metadata for _PaddingLayout);
    v280 = type metadata accessor for Optional(0);
    v353 = v280;
    v354 = v313;
    v355 = v314;
    *(_QWORD *)&v341 = sub_100050038();
    *((_QWORD *)&v341 + 1) = WitnessTable;
    v342 = sub_100050154();
    v360 = swift_getWitnessTable(&unk_1001107E8, v278);
    v361 = &protocol witness table for _PaddingLayout;
    v359 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v279);
    v343 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v280);
    v344 = sub_10000C164(&qword_10015A678, &qword_10015A480, (void (*)(void))sub_1000501D0);
    v345 = sub_10000C164(&qword_10015A688, &qword_10015A488, (void (*)(void))sub_100050254);
    sub_100042510((uint64_t *)&v364, 6uLL, (uint64_t)&v351);
    sub_100007F38(v327, &qword_10015A488);
    sub_100007F38(v270, &qword_10015A480);
    sub_100007F38((uint64_t)v332, &qword_10015A478);
    v281 = v306;
    ((void (*)(char *, uint64_t))v306)(v331, v268);
    sub_100007F38(v330, &qword_10015A470);
    sub_100007F38(v272, &qword_10015A488);
    sub_100007F38(v271, &qword_10015A480);
    sub_1000502D8(v334, *((uint64_t *)&v334 + 1), v335, *((uint64_t *)&v335 + 1), (uint64_t)v336);
    sub_100007F38(v269, &qword_10015A478);
    ((void (*)(uint64_t, uint64_t))v281)(v333, v268);
    return sub_100007F38(v323, &qword_10015A470);
  }
  else
  {
    v283 = *(_QWORD *)(v63 + 80);
    v284 = type metadata accessor for RemoteViewConfiguration();
    v285 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v283, v284, v285);
    __break(1u);
  }
  return result;
}

void sub_10004C568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = sub_100007D50(&qword_10015A6A0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for EventView(0, a3, a4, v11);
  v15 = sub_100044988(v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v13, v14);
  sub_100073314();
  v16 = swift_release(v15);
  ArtistPromotionalAssets.eventWithPromotionalAssets.getter(v16);
  v17 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 152))(v7, v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = *(_QWORD *)(a1 + 72);
  if (v21)
  {
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_10008A874(v18, v20, 0, 3, 9, 0, 3u, v21);
    swift_bridgeObjectRelease(v20);
    swift_release(v21);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 80);
    v23 = type metadata accessor for RemoteViewConfiguration();
    v24 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
}

void *sub_10004C6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD v15[4];

  v1 = v0;
  v2 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015A3C8);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[2] = &type metadata for AppleMusicFetcher;
  v9 = sub_10004F6AC();
  v15[3] = v9;
  KeyPath = swift_getKeyPath(&unk_10010A960);
  v15[0] = &type metadata for AppleMusicFetcher;
  v15[1] = v9;
  v11 = swift_getKeyPath(&unk_10010A998);
  static Published.subscript.getter(v1, KeyPath, v11);
  swift_release(KeyPath);
  v12 = swift_release(v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v3 + 48))(v8, 1, v2, v12))
  {
    sub_100007F38((uint64_t)v8, &qword_10015A3C8);
    return &_swiftEmptyArrayStorage;
  }
  else
  {
    sub_10001BFB8((uint64_t)v8, (uint64_t)v5, type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_100007F38((uint64_t)v8, &qword_10015A3C8);
    v13 = *((_QWORD *)v5 + 4);
    swift_bridgeObjectRetain(v13);
    sub_10001E24C((uint64_t)v5, type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
  return (void *)v13;
}

uint64_t sub_10004C880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD v17[4];

  v2 = v1;
  v4 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015A3C8);
  __chkstk_darwin(v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[2] = &type metadata for AppleMusicFetcher;
  v11 = sub_10004F6AC();
  v17[3] = v11;
  KeyPath = swift_getKeyPath(&unk_10010A960);
  v17[0] = &type metadata for AppleMusicFetcher;
  v17[1] = v11;
  v13 = swift_getKeyPath(&unk_10010A998);
  static Published.subscript.getter(v2, KeyPath, v13);
  swift_release(KeyPath);
  v14 = swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v10, 1, v4, v14))
  {
    sub_100007F38((uint64_t)v10, &qword_10015A3C8);
    v15 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    sub_10001BFB8((uint64_t)v10, (uint64_t)v7, type metadata accessor for AppleMusicFetcher.MusicArtist);
    sub_100007F38((uint64_t)v10, &qword_10015A3C8);
    sub_100007E78((uint64_t)&v7[*(int *)(v4 + 32)], a1, &qword_100158658);
    return sub_10001E24C((uint64_t)v7, type metadata accessor for AppleMusicFetcher.MusicArtist);
  }
}

uint64_t sub_10004CA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EventView(0, a2, a3, v9);
  v13 = sub_100044988(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v11, v12);
  v14 = sub_10007336C();
  v16 = v15;
  swift_release(v13);
  v19 = sub_100044988(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v17, v18);
  sub_100073934();
  swift_release(v19);
  v22 = sub_100044988(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v20, v21);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = v22;
    swift_retain(*(_QWORD *)(a1 + 72));
    v26 = sub_100074F28(v25);
    v28 = v27;
    swift_release(v24);
    swift_release(v23);
    v29 = type metadata accessor for AppViewModel(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    return sub_100067794(v14, v16, (uint64_t)v8, v26, v28, 0);
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 80);
    v32 = type metadata accessor for RemoteViewConfiguration();
    v33 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v31, v32, v33);
    __break(1u);
  }
  return result;
}

void sub_10004CBCC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = v5;
  v9 = sub_100044988(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, a4, a5);
  sub_100072F9C(a2);
  swift_release(v9);
  v12 = sub_100044988(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = sub_10007411C();
  swift_release(v12);
  v14 = *(_QWORD *)(v6 + 56);
  if (v13 != *(unsigned __int8 *)(v14 + 16))
  {
    v15 = sub_100007D50(&qword_100159A18);
    sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    v16 = ObservableObject<>.objectWillChange.getter(v15);
    ObservableObjectPublisher.send()();
    swift_release(v16);
  }
  *(_BYTE *)(v14 + 16) = v13;
}

uint64_t sub_10004CCA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  double v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v34 = a3;
  v38 = a5;
  v7 = type metadata accessor for EventView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = sub_100007D50(&qword_10015A5C0);
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100007D50(&qword_10015A570);
  v15 = __chkstk_darwin(v35);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16))
    v18 = 2;
  else
    v18 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v15);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_100149EE0, v20 + v9, v19 | 7);
  v22 = v34;
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = v22;
  v23 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v20, v11, v7);
  v24 = static Font.title.getter(v23);
  KeyPath = swift_getKeyPath(&unk_10010A9B8);
  v39 = 2;
  v40 = v18;
  v41 = sub_10004FADC;
  v42 = v21;
  v43 = KeyPath;
  v44 = v24;
  v26 = static Font.Weight.medium.getter(KeyPath);
  v27 = sub_100007D50(&qword_10015A590);
  v28 = sub_10004F888();
  View.fontWeight(_:)(*(_QWORD *)&v26, 0, v27, v28);
  swift_release(v24);
  swift_release(KeyPath);
  swift_release(v21);
  LOBYTE(v24) = static Edge.Set.horizontal.getter(v29);
  v31 = v36;
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v17, v14, v37);
  v32 = &v17[*(int *)(v35 + 36)];
  *v32 = v24;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  v32[40] = 1;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
  return sub_100018EB4((uint64_t)v17, v38, &qword_10015A570);
}

void sub_10004CEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for EventView(0, a2, a3, a4);
  v8 = sub_100044988(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  sub_1000739D4();
  swift_release(v8);
  v11 = sub_100044988(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v9, v10);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = v11;
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_100073A78(0, 1, 0, 3u, v12);
    swift_release(v13);
    swift_release(v12);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 80);
    v15 = type metadata accessor for RemoteViewConfiguration();
    v16 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
}

uint64_t sub_10004CFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[9];

  v7 = type metadata accessor for EventView(0, a2, a3, a4);
  v10 = sub_100044988(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v8, v9);
  v11 = sub_100073D1C();
  v13 = v12;
  swift_release(v10);
  *(_QWORD *)&v38[0] = v11;
  *((_QWORD *)&v38[0] + 1) = v13;
  sub_10001DB0C();
  v14 = Text.init<A>(_:)(v38, &type metadata for String);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = static Font.Weight.semibold.getter();
  v22 = Text.fontWeight(_:)(*(_QWORD *)&v21, 0, v14, v16, v20, v18);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  sub_100007D90(v14, v16, v20);
  v29 = swift_bridgeObjectRelease(v18);
  v30 = static Alignment.center.getter(v29);
  sub_100042B7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v38, 0.0, 1, 0.0, 1, v30, v31, v22, v24, v28, v26);
  sub_100007D90(v22, v24, v28);
  result = swift_bridgeObjectRelease(v26);
  v33 = 0.0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16))
    v33 = 1.0;
  v34 = v38[7];
  *(_OWORD *)(a5 + 96) = v38[6];
  *(_OWORD *)(a5 + 112) = v34;
  *(_OWORD *)(a5 + 128) = v38[8];
  v35 = v38[3];
  *(_OWORD *)(a5 + 32) = v38[2];
  *(_OWORD *)(a5 + 48) = v35;
  v36 = v38[5];
  *(_OWORD *)(a5 + 64) = v38[4];
  *(_OWORD *)(a5 + 80) = v36;
  v37 = v38[1];
  *(_OWORD *)a5 = v38[0];
  *(_OWORD *)(a5 + 16) = v37;
  *(double *)(a5 + 144) = v33;
  return result;
}

uint64_t sub_10004D184@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  double v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  void (*v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v65 = a4;
  v63 = sub_100007D50(&qword_10015A5B8);
  __chkstk_darwin(v63);
  v64 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DismissAction(0);
  v8 = *(_QWORD *)(v56 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v56);
  v55 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - v11;
  v13 = sub_100007D50(&qword_10015A5C0);
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  __chkstk_darwin(v13);
  v58 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100007D50(&qword_10015A570);
  __chkstk_darwin(v62);
  v57 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v61 = (uint64_t)&v55 - v17;
  v19 = type metadata accessor for EventView(0, a2, a3, v18);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v55 - v21;
  v23 = a1[9];
  if (!v23)
  {
    v52 = a1[10];
    goto LABEL_13;
  }
  swift_retain(a1[9]);
  v24 = sub_1000DED48();
  v26 = v25;
  swift_release(v23);
  if (v26 && (swift_bridgeObjectRelease(v26), (v24 & 1) != 0))
  {
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(7368801, 0xE300000000000000, 0x6C61646F6DLL, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(0xE300000000000000);
    (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 16))(v22, a1, v19);
    if ((v50 & 1) == 0)
    {
      if (*((_QWORD *)v22 + 9))
        __asm { BR              X10 }
      while (1)
      {
        v52 = *((_QWORD *)v22 + 10);
LABEL_13:
        v53 = type metadata accessor for RemoteViewConfiguration();
        v54 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
        EnvironmentObject.error()(0, v52, v53, v54);
        __break(1u);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 16))(v22, a1, v19);
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (*(_BYTE *)(a1[7] + 16))
    v27 = 2;
  else
    v27 = 1;
  sub_100018E80((uint64_t)v12);
  v29 = v55;
  v28 = v56;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v55, v12, v56);
  v30 = *(unsigned __int8 *)(v8 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = swift_allocObject(&unk_100149EB8, v31 + v9, v30 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v32 + v31, v29, v28);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v28);
  v34 = static Font.title.getter(v33);
  KeyPath = swift_getKeyPath(&unk_10010A9B8);
  v66 = 1;
  v67 = v27;
  v68 = sub_100032FDC;
  v69 = v32;
  v70 = KeyPath;
  v71 = v34;
  v36 = static Font.Weight.medium.getter(KeyPath);
  v37 = sub_100007D50(&qword_10015A590);
  v38 = sub_10004F888();
  v39 = v58;
  View.fontWeight(_:)(*(_QWORD *)&v36, 0, v37, v38);
  swift_release(v34);
  swift_release(KeyPath);
  swift_release(v32);
  LOBYTE(v32) = static Edge.Set.horizontal.getter(v40);
  v42 = v59;
  v41 = v60;
  v43 = (uint64_t)v57;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v39, v60);
  v44 = v62;
  v45 = v43 + *(int *)(v62 + 36);
  *(_BYTE *)v45 = v32;
  *(_OWORD *)(v45 + 8) = 0u;
  *(_OWORD *)(v45 + 24) = 0u;
  *(_BYTE *)(v45 + 40) = 1;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
  v46 = v61;
  sub_100018EB4(v43, v61, &qword_10015A570);
  v47 = v64;
  sub_100007E78(v46, v64, &qword_10015A570);
  swift_storeEnumTagMultiPayload(v47, v63, 0);
  v48 = sub_10004F7F4();
  _ConditionalContent<>.init(storage:)(v47, v44, &type metadata for EmptyView, v48, &protocol witness table for EmptyView);
  return sub_100007F38(v46, &qword_10015A570);
}

double sub_10004D718(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for EventView(0, a3, a4, a4);
  v9 = sub_100044988(v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v7, v8);
  sub_100073EB8(v4, v5);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

void sub_10004D770(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

double sub_10004D77C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for EventView(0, a3, a4, a4);
  v11 = sub_100044988(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v9, v10);
  sub_100073270(v4, v5, v6, v7);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_10004D7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _BYTE v41[144];

  v40 = a4;
  v38 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a2, &unk_10011790C, &unk_100117974);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_10011790C, &unk_10011794C);
  v11 = type metadata accessor for TicketView(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v39 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v18 = type metadata accessor for EventView(0, a2, a3, v17);
  v21 = sub_100044988(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v19, v20);
  v36 = sub_10007336C();
  v35 = v22;
  swift_release(v21);
  v25 = sub_100044988(v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v23, v24);
  v26 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v7, v25 + *(_QWORD *)(*(_QWORD *)v25 + 160), a2);
  v27 = swift_release(v25);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 192))(a2, a3, v27);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, a2);
  v29 = v28;
  v30 = AssociatedConformanceWitness;
  sub_100066AE8(v36, v35, v29, (uint64_t)v41);
  sub_100062B34((uint64_t)v41, AssociatedTypeWitness, v30, (uint64_t)v13);
  swift_getWitnessTable(&unk_10010BEA0, v11);
  v31 = v39;
  v32 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v32(v16, v13, v11);
  v33 = *(void (**)(char *, uint64_t))(v31 + 8);
  v33(v13, v11);
  v32(v40, v16, v11);
  return ((uint64_t (*)(char *, uint64_t))v33)(v16, v11);
}

uint64_t sub_10004DA4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100073F48();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004DA78(char *a1)
{
  return sub_100073F5C(*a1);
}

uint64_t sub_10004DA9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[7];
  char v38;

  v37[0] = a5;
  v8 = type metadata accessor for EventView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)v37 - v11;
  v13 = sub_100007D50(&qword_10015A568);
  v14 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100109020;
  v17 = sub_100044988(v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v15, v16);
  *(_QWORD *)(v14 + 56) = type metadata accessor for URL(0);
  sub_10002BA68((_QWORD *)(v14 + 32));
  sub_100073934();
  v18 = swift_release(v17);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v18);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(&unk_100149E40, v20 + v10, v19 | 7);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  v22 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, v12, v8);
  v23 = static SafeAreaRegions.all.getter(v22);
  v24 = static Edge.Set.all.getter(v23);
  v37[1] = v14;
  v37[2] = 0;
  v37[3] = 0;
  v37[4] = sub_10004F6F4;
  v37[5] = v21;
  v37[6] = v23;
  v38 = v24;
  v25 = sub_100007D50(&qword_100158678);
  v26 = type metadata accessor for PresentationDetent(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 72);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v25, v30 + 2 * v28, v29 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_100108810;
  v32 = static PresentationDetent.medium.getter(v31);
  static PresentationDetent.large.getter(v32);
  v33 = sub_100098A00(v31);
  swift_setDeallocating(v31);
  swift_arrayDestroy(v31 + v30, 2, v26);
  swift_deallocClassInstance(v31, 32, 7);
  v34 = sub_100007D50(&qword_10015A4F8);
  v35 = sub_10001E0A8(&qword_10015A500, &qword_10015A4F8, (void (*)(void))sub_10004EC0C);
  View.presentationDetents(_:)(v33, v34, v35);
  swift_release(v21);
  swift_bridgeObjectRelease(v14);
  return swift_bridgeObjectRelease(v33);
}

double sub_10004DCFC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  if ((a2 & 1) != 0)
  {
    v7 = type metadata accessor for EventView(0, a6, a7, a4);
    v10 = sub_100044988(v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v8, v9);
    sub_100073F70();
    *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  }
  return result;
}

uint64_t sub_10004DD48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100073F98();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004DD74(char *a1)
{
  return sub_100074034(*a1);
}

uint64_t sub_10004DD98@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = type metadata accessor for EventView(0, a1, a2, a3);
  v8 = sub_100044988(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = *(_QWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 + 168));
  swift_retain(v9);
  swift_release(v8);
  v10 = type metadata accessor for RemoteViewConfiguration();
  v11 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  result = EnvironmentObject.init()(v10, v11);
  *a4 = v9;
  a4[1] = result;
  a4[2] = v13;
  return result;
}

void sub_10004DE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[24];

  v6 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for EventView(0, a2, a3, v9);
  v13 = sub_100044988(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v11, v12);
  v14 = *(_QWORD *)(a1 + 72);
  if (!v14)
    goto LABEL_6;
  v15 = v13;
  swift_retain(*(_QWORD *)(a1 + 72));
  v16 = sub_100075020();
  swift_release(v15);
  swift_release(v14);
  if ((v16 & 1) != 0)
    sub_10004DFE8(v10);
  v19 = sub_100044988(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v17, v18);
  sub_100018474((uint64_t)v8);
  v20 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 176);
  swift_beginAccess(v20, v31, 33, 0);
  sub_10004F2DC((uint64_t)v8, v20);
  swift_endAccess(v31);
  swift_release(v19);
  v23 = sub_100044988(v10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v21, v22);
  v24 = *(_QWORD *)(a1 + 72);
  if (v24)
  {
    v25 = v23;
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_1000740D4(v26);
    swift_release(v25);
    swift_release(v24);
  }
  else
  {
LABEL_6:
    v27 = *(_QWORD *)(a1 + 80);
    v28 = type metadata accessor for RemoteViewConfiguration();
    v29 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v27, v28, v29);
    __break(1u);
  }
}

double sub_10004DFE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100044988(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  v13 = sub_100074170();
  v15 = v14;
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  if (v15)
  {
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
    type metadata accessor for MainActor(0);
    v19 = static MainActor.shared.getter(v18);
    v20 = *(unsigned __int8 *)(v4 + 80);
    v21 = (v20 + 48) & ~v20;
    v22 = (v5 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_100149E18, v22 + 16, v20 | 7);
    *(_QWORD *)(v23 + 16) = v19;
    *(_QWORD *)(v23 + 24) = &protocol witness table for MainActor;
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(a1 + 16);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v23 + v21, v6, a1);
    v24 = (uint64_t *)(v23 + v22);
    *v24 = v13;
    v24[1] = v15;
    v25 = sub_1000C8730((uint64_t)v9, (uint64_t)&unk_10015A548, v23);
    *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  }
  return result;
}

void sub_10004E180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for EventView(0, a2, a3, a4);
  v8 = sub_100044988(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = v8;
    swift_retain(*(_QWORD *)(a1 + 72));
    sub_100073A78(0, 2, 0, 3u, v9);
    swift_release(v10);
    swift_release(v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 80);
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
}

double sub_10004E238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;
  _QWORD v5[6];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a1;
  v3 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v3, sub_10004F2C0, v5, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_10004E298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  _BYTE v16[24];

  v5 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v5);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for EventView(0, a2, a3, v8);
  v12 = sub_100044988(v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v10, v11);
  sub_100018474((uint64_t)v7);
  v13 = v12 + *(_QWORD *)(*(_QWORD *)v12 + 176);
  swift_beginAccess(v13, v16, 33, 0);
  sub_10004F2DC((uint64_t)v7, v13);
  swift_endAccess(v16);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10004E388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v6;
  v3[7] = v7;
  return swift_task_switch(sub_10004E3F8, v6, v7);
}

uint64_t sub_10004E3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  v5 = type metadata accessor for EventView(0, v4[3], v4[4], a4);
  v8 = sub_100044988(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, v6, v7);
  v9 = *(_QWORD *)(v8 + *(_QWORD *)(*(_QWORD *)v8 + 168));
  v4[8] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = (uint64_t **)swift_task_alloc(dword_10015F784);
  v4[9] = (uint64_t)v10;
  *v10 = v4;
  v10[1] = (uint64_t *)sub_10004E480;
  return sub_1000E96D8();
}

uint64_t sub_10004E480()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_10004E4D4, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10004E4D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for MainActor(0);
  v8[7] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v8[8] = v11;
  v8[9] = v12;
  return swift_task_switch(sub_10004E578, v11, v12);
}

uint64_t sub_10004E578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v4[10] = type metadata accessor for EventView(0, v4[5], v4[6], a4);
  v4[11] = sub_1000449F4();
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10015A550 + dword_10015A550);
  v5 = (_QWORD *)swift_task_alloc(unk_10015A554);
  v4[12] = v5;
  *v5 = v4;
  v5[1] = sub_10004E5F8;
  return v7(v4[3], v4[4]);
}

uint64_t sub_10004E5F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_release(v2);
  return swift_task_switch(sub_10004E64C, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10004E64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t **v5;

  v4[13] = sub_100044988(v4[10], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter, a3, a4);
  v5 = (uint64_t **)swift_task_alloc(dword_10015C224);
  v4[14] = (uint64_t)v5;
  *v5 = v4;
  v5[1] = (uint64_t *)sub_10004E6AC;
  return sub_1000742E8();
}

uint64_t sub_10004E6AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v2);
  return swift_task_switch(sub_10004E700, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10004E700()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100007D50(&qword_10015A3C8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v4);
  v3[12] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v3[13] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[14] = v7;
  v3[15] = v8;
  return swift_task_switch(sub_10004E7D4, v7, v8);
}

uint64_t sub_10004E7D4()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10015FBE4);
  v0[16] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10004E824;
  return sub_1000EDDAC(v0[12], v0[8], v0[9]);
}

uint64_t sub_10004E824()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10004E98C;
  else
    v4 = sub_10004E884;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_10004E884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t KeyPath;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 104));
  v4 = (_QWORD *)swift_task_alloc(16);
  *v4 = &type metadata for AppleMusicFetcher;
  v5 = sub_10004F6AC();
  v4[1] = v5;
  KeyPath = swift_getKeyPath(&unk_10010A960);
  swift_task_dealloc(v4);
  v7 = (_QWORD *)swift_task_alloc(16);
  *v7 = &type metadata for AppleMusicFetcher;
  v7[1] = v5;
  v8 = swift_getKeyPath(&unk_10010A998);
  swift_task_dealloc(v7);
  sub_100007E78(v1, v2, &qword_10015A3C8);
  swift_retain(v3);
  static Published.subscript.setter(v2, v3, KeyPath, v8);
  sub_100007F38(v1, &qword_10015A3C8);
  v9 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E98C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  swift_release(*(_QWORD *)(v0 + 104));
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = type metadata accessor for Logger(0);
  sub_100029E7C(v3, (uint64_t)qword_10016A5B0);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 72);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 64);
    v11 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v18 = v17;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 40) = sub_10003FCB4(v10, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue(v8, v0 + 48, v0 + 16);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v14 = v13;
    *(_QWORD *)(v0 + 56) = sub_10003FCB4(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to fetch artist with id %s. Error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 136));
    swift_bridgeObjectRelease_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v15 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10004EC0C()
{
  unint64_t result;

  result = qword_10015A508;
  if (!qword_10015A508)
  {
    result = swift_getWitnessTable(&unk_10011107C, &type metadata for ShareSheet);
    atomic_store(result, (unint64_t *)&qword_10015A508);
  }
  return result;
}

unint64_t sub_10004EC50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A510;
  if (!qword_10015A510)
  {
    v1 = sub_100007D00(&qword_100158970);
    sub_100007428((unint64_t *)&qword_100158AA8, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015A510);
  }
  return result;
}

uint64_t sub_10004ECCC@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_100047578(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10004ECD8()
{
  unint64_t result;

  result = qword_10015A518;
  if (!qword_10015A518)
  {
    result = swift_getWitnessTable(&unk_10010ACC8, &type metadata for EventViewHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015A518);
  }
  return result;
}

uint64_t sub_10004ED20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004FCF8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10004D718, a3, a4);
}

unint64_t sub_10004ED2C()
{
  unint64_t result;

  result = qword_10015A520;
  if (!qword_10015A520)
  {
    result = swift_getWitnessTable(&unk_10010AC80, &type metadata for EventViewSafeAreaPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015A520);
  }
  return result;
}

double sub_10004ED74(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v6, v7, a4) - 8) + 80);
  return sub_10004D77C(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t sub_10004EDCC()
{
  unint64_t result;

  result = qword_10015A528;
  if (!qword_10015A528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EdgeInsets, &type metadata for EdgeInsets);
    atomic_store(result, &qword_10015A528);
  }
  return result;
}

uint64_t sub_10004EE10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100073168();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004EE3C(char *a1)
{
  return sub_10007317C(*a1);
}

uint64_t sub_10004EE60()
{
  return 16;
}

__n128 sub_10004EE6C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004EE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004EF00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004D7E8, a2, a3, a4);
}

uint64_t sub_10004EE88@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100073F48();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004EEB4(char *a1)
{
  return sub_100073F5C(*a1);
}

uint64_t sub_10004EED8()
{
  return 16;
}

__n128 sub_10004EEE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004EEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004EF00((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004DA9C, a2, a3, a4);
}

uint64_t sub_10004EF00(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_10004EF68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100073F98();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004EF94(char *a1)
{
  return sub_100074034(*a1);
}

uint64_t sub_10004EFB8()
{
  return 16;
}

__n128 sub_10004EFC4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004EFD4@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  type metadata accessor for EventView(0, v4, v5, a1);
  return sub_10004DD98(v4, v5, v6, a2);
}

uint64_t sub_10004F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004FAE8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004DE30, a2, a3, a4);
}

uint64_t sub_10004F040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004FAE8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004E180, a2, a3, a4);
}

uint64_t sub_10004F04C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010A960);
  v3 = swift_getKeyPath(&unk_10010A998);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_10004F0E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  _QWORD v20[4];

  v6 = *(_QWORD *)(a4 + a3 - 16);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  swift_getAssociatedTypeWitness(255, v7, v6, &unk_100118C4C, &unk_100118C5C);
  v8 = type metadata accessor for Optional(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v20 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)v20 - v13, a1, v8);
  v16 = *a2;
  v20[2] = v6;
  v20[3] = v7;
  KeyPath = swift_getKeyPath(&unk_10010A960);
  v20[0] = v6;
  v20[1] = v7;
  v18 = swift_getKeyPath(&unk_10010A998);
  v15(v12, (uint64_t)v14, v8);
  swift_retain(v16);
  static Published.subscript.setter(v12, v16, KeyPath, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_10004F230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004FAE8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004E238, a2, a3, a4);
}

uint64_t sub_10004F240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_10015A534);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10003D1D4;
  return sub_10004E388(v9, v6, v7);
}

double sub_10004F2C0()
{
  uint64_t *v0;

  return sub_10004E298(v0[4], v0[2], v0[3]);
}

uint64_t sub_10004F2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_100158970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F324@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004F34C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

void sub_10004F374(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(a1 + 16);
}

void sub_10004F380(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  if (v6 != *(unsigned __int8 *)(a5 + 16))
  {
    v7 = sub_100007D50(&qword_100159A18);
    sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    v8 = ObservableObject<>.objectWillChange.getter(v7);
    ObservableObjectPublisher.send()();
    swift_release(v8);
  }
  *(_BYTE *)(a5 + 16) = v6;
}

uint64_t sub_10004F404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v5 = (int *)type metadata accessor for EventView(0, v4[4], v4[5], a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 48) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(v4[2]);
  v10 = (char *)v4 + v8;
  sub_1000189BC(*(_QWORD *)((char *)v4 + v8), *(_QWORD *)((char *)v4 + v8 + 8));
  sub_1000189BC(*((_QWORD *)v10 + 3), *((_QWORD *)v10 + 4));
  swift_release(*(_QWORD *)((char *)v4 + v8 + 56));
  swift_release(*(_QWORD *)((char *)v4 + v8 + 72));
  v11 = (_QWORD *)((char *)v4 + v8 + v5[13]);
  v12 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = &v10[v5[14]];
  v15 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*(_QWORD *)v14);
  }
  v17 = &v10[v5[15]];
  v18 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for UserInterfaceSizeClass(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  else
  {
    swift_release(*(_QWORD *)v17);
  }
  v21 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v21 + 8));
  return swift_deallocObject(v4, v22, v7 | 7);
}

uint64_t sub_10004F5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for EventView(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4[2];
  v12 = v4[3];
  v13 = (uint64_t)v4 + v10;
  v14 = (_QWORD *)((char *)v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  v15 = *v14;
  v16 = v14[1];
  v17 = (_QWORD *)swift_task_alloc(dword_10015A544);
  *(_QWORD *)(v5 + 16) = v17;
  *v17 = v5;
  v17[1] = sub_10000FAC0;
  return sub_10004E504(a1, v11, v12, v13, v15, v16, v7, v8);
}

uint64_t sub_10004F694()
{
  return 16;
}

__n128 sub_10004F6A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_10004F6AC()
{
  unint64_t result;

  result = qword_10015A558;
  if (!qword_10015A558)
  {
    result = swift_getWitnessTable(&unk_100112020, &type metadata for AppleMusicFetcher);
    atomic_store(result, (unint64_t *)&qword_10015A558);
  }
  return result;
}

double sub_10004F6F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v9, v10, a4) - 8) + 80);
  return sub_10004DCFC(a1, a2, a3, a4, v4 + ((v11 + 32) & ~v11), v9, v10);
}

uint64_t sub_10004F774@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100048160(v2[4], v2[2], v2[3], a1, a2);
}

void sub_10004F784(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)(v1 + 40) + 16);
}

uint64_t sub_10004F798()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10004F7C4(unsigned __int8 *a1)
{
  uint64_t *v1;

  sub_10004F380(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10004F7D0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10004CCA8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10004F7DC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10004CFDC(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_10004F7E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004D184(*(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10004F7F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015A588;
  if (!qword_10015A588)
  {
    v1 = sub_100007D00(&qword_10015A570);
    v2[0] = sub_100007D00(&qword_10015A590);
    v2[1] = sub_10004F888();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A588);
  }
  return result;
}

unint64_t sub_10004F888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A598;
  if (!qword_10015A598)
  {
    v1 = sub_100007D00(&qword_10015A590);
    sub_10004F90C();
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A598);
  }
  return result;
}

unint64_t sub_10004F90C()
{
  unint64_t result;

  result = qword_10015A5A0;
  if (!qword_10015A5A0)
  {
    result = swift_getWitnessTable(&unk_10010AF04, &type metadata for NavigationButton);
    atomic_store(result, (unint64_t *)&qword_10015A5A0);
  }
  return result;
}

unint64_t sub_10004F950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A5A8;
  if (!qword_10015A5A8)
  {
    v1 = sub_100007D00(&qword_10015A578);
    sub_10001DC68();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A5A8);
  }
  return result;
}

unint64_t sub_10004F9BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A5B0;
  if (!qword_10015A5B0)
  {
    v1 = sub_100007D00(&qword_10015A580);
    sub_10004F7F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A5B0);
  }
  return result;
}

uint64_t sub_10004FA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004FA88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004FAB0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10004FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004FAE8((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10004CEFC, a2, a3, a4);
}

uint64_t sub_10004FAE8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

void sub_10004FB48(double *a1@<X8>)
{
  *a1 = sub_100072F88();
}

uint64_t sub_10004FB70(double *a1)
{
  return sub_100072F9C(*a1);
}

uint64_t sub_10004FB94()
{
  return 16;
}

__n128 sub_10004FBA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004FBB4()
{
  return 16;
}

__n128 sub_10004FBC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004FBCC@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t *v2;

  return sub_1000490A4(v2[4], v2[2], v2[3], a1, a2);
}

void sub_10004FBDC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for EventView(0, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), a5);
  sub_10004CBCC(v7, a1, v8, v9, v10);
}

void sub_10004FC28(double *a1@<X8>)
{
  *a1 = sub_100072FB0();
}

uint64_t sub_10004FC50(double *a1)
{
  return sub_10007304C(*a1);
}

uint64_t sub_10004FC74()
{
  return 16;
}

__n128 sub_10004FC80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10004FC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000494D0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_10004FC98@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10004A108(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10004FCA4()
{
  unint64_t result;

  result = qword_10015A5C8;
  if (!qword_10015A5C8)
  {
    result = swift_getWitnessTable(&unk_10010AC38, &type metadata for HeaderContentHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015A5C8);
  }
  return result;
}

uint64_t sub_10004FCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004FCF8(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10004AD5C, a3, a4);
}

uint64_t sub_10004FCF8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v6, v7, a4) - 8) + 80);
  return a2(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_10004FD60@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10004ADB0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_10004FD6C()
{
  unint64_t result;

  result = qword_10015A5E0;
  if (!qword_10015A5E0)
  {
    result = swift_getWitnessTable(&unk_10010AD5C, &type metadata for PaddingModifier);
    atomic_store(result, (unint64_t *)&qword_10015A5E0);
  }
  return result;
}

unint64_t sub_10004FDC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A628;
  if (!qword_10015A628)
  {
    v1 = sub_100007D00(&qword_10015A5F8);
    sub_10000F4E0(&qword_10015A630, &qword_10015A5F0, (uint64_t)&unk_100112988);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A628);
  }
  return result;
}

uint64_t sub_10004FE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (int *)type metadata accessor for EventView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v4 + v8;
  sub_1000189BC(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8));
  sub_1000189BC(*(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
  swift_release(*(_QWORD *)(v4 + v8 + 56));
  swift_release(*(_QWORD *)(v4 + v8 + 72));
  v11 = (_QWORD *)(v4 + v8 + v5[13]);
  v12 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v10 + v5[14]);
  v15 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v10 + v5[15]);
  v18 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for UserInterfaceSizeClass(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_10004FFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8) + 80);
  return sub_10004CA3C(v4 + ((v7 + 32) & ~v7), v5, v6);
}

unint64_t sub_100050038()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015A638;
  if (!qword_10015A638)
  {
    v1 = sub_100007D00(&qword_10015A470);
    v2[0] = sub_100007D00(&qword_10015A640);
    v2[1] = sub_10001E0A8(&qword_10015A648, &qword_10015A640, (void (*)(void))sub_1000500EC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015A638);
  }
  return result;
}

uint64_t sub_1000500EC()
{
  return sub_10001E0A8(&qword_10015A650, &qword_10015A658, (void (*)(void))sub_100050110);
}

unint64_t sub_100050110()
{
  unint64_t result;

  result = qword_10015A660;
  if (!qword_10015A660)
  {
    result = swift_getWitnessTable(&unk_10011021C, &type metadata for PromotionalAssetsEntryView);
    atomic_store(result, (unint64_t *)&qword_10015A660);
  }
  return result;
}

unint64_t sub_100050154()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A668;
  if (!qword_10015A668)
  {
    v1 = sub_100007D00(&qword_10015A478);
    sub_100007428(&qword_10015A670, type metadata accessor for AttributionModule, (uint64_t)&unk_1001128D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015A668);
  }
  return result;
}

unint64_t sub_1000501D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A680;
  if (!qword_10015A680)
  {
    v1 = sub_100007D00(&qword_10015A600);
    sub_10004FDC8();
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A680);
  }
  return result;
}

unint64_t sub_100050254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A690;
  if (!qword_10015A690)
  {
    v1 = sub_100007D00(&qword_10015A5E8);
    sub_100007428(&qword_10015A698, type metadata accessor for AppModule, (uint64_t)&unk_100110E18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A690);
  }
  return result;
}

uint64_t sub_1000502D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

_QWORD *sub_100050310(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100050338(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100050360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v5 = (int *)type metadata accessor for EventView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v28 = *(_QWORD *)(v6 + 64);
  v9 = type metadata accessor for ArtistPromotionalAssets(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = v4 + v8;
  sub_1000189BC(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8));
  sub_1000189BC(*(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32));
  swift_release(*(_QWORD *)(v4 + v8 + 56));
  swift_release(*(_QWORD *)(v4 + v8 + 72));
  v14 = (_QWORD *)(v4 + v8 + v5[13]);
  v15 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v13 + v5[14]);
  v18 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v13 + v5[15]);
  v21 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for UserInterfaceSizeClass(0);
    v23 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v20, v22);
  }
  else
  {
    v24 = swift_release(*v20);
  }
  v25 = (v8 + v28 + v11) & ~v11;
  v26 = v25 + v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v4 + v25, v9, v24);
  return swift_deallocObject(v4, v26, v7 | v11 | 7);
}

void sub_100050550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for EventView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistPromotionalAssets(0) - 8) + 80);
  sub_10004C568(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_1000505CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10004A99C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000505D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10004A700(v1[4], v1[2], v1[3], a1);
}

ValueMetadata *type metadata accessor for EventViewSafeAreaPreferenceKey()
{
  return &type metadata for EventViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for EventViewHeightPreferenceKey()
{
  return &type metadata for EventViewHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for HeaderContentHeightPreferenceKey()
{
  return &type metadata for HeaderContentHeightPreferenceKey;
}

uint64_t sub_100050620(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t OpaqueTypeConformance2;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  ValueMetadata *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v2 = *a1;
  v3 = a1[1];
  v97 = type metadata accessor for NavigationPath(255, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v6 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v7 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v6, &unk_100119D18, &unk_100119D20);
  v8 = swift_getAssociatedTypeWitness(255, v7, v6, &unk_100117714, &unk_100117734);
  v9 = swift_getAssociatedConformanceWitness(v7, v6, v8, &unk_100117714, &unk_10011772C);
  type metadata accessor for HeroImage(255, v8, v9, v10);
  v12 = type metadata accessor for HeroImageLandscape(255, v2, v3, v11);
  type metadata accessor for ModifiedContent(255, v12, &type metadata for _FrameLayout);
  v96 = type metadata accessor for _ConditionalContent(255);
  v14 = type metadata accessor for EventDetailModule(255, v2, v3, v13);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for HeroImagePlaceholder, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  type metadata accessor for VStack(255, v16, WitnessTable);
  v18 = sub_100007D00(&qword_10015A458);
  v19 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  v20 = swift_getTupleTypeMetadata2(255, v18, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, v20);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v23 = type metadata accessor for HStack(255, v21, v22);
  type metadata accessor for ModifiedContent(255, v23, &type metadata for _FrameLayout);
  v24 = type metadata accessor for _ConditionalContent(255);
  v25 = type metadata accessor for Group(255, v24);
  v26 = sub_100007D00(&qword_10015A460);
  v27 = type metadata accessor for ModifiedContent(255, v25, v26);
  v28 = sub_100007D00(&qword_10015A468);
  v29 = type metadata accessor for ModifiedContent(255, v27, v28);
  sub_100007D00(&qword_10015A470);
  type metadata accessor for GuideModule(255, v2, v3, v30);
  v100 = sub_100007D00(&qword_10015A478);
  v32 = type metadata accessor for LineupModule(255, v6, v7, v31);
  type metadata accessor for ModifiedContent(255, v32, &type metadata for _PaddingLayout);
  v101 = type metadata accessor for Optional(255);
  v102 = sub_100007D00(&qword_10015A480);
  v103 = sub_100007D00(&qword_10015A488);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 6);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = type metadata accessor for ModifiedContent(255, v36, &type metadata for PaddingModifier);
  v38 = sub_100007D00(&qword_100158630);
  v39 = type metadata accessor for ModifiedContent(255, v37, v38);
  v40 = swift_getTupleTypeMetadata2(255, v29, v39, 0, 0);
  v41 = type metadata accessor for TupleView(255, v40);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v41);
  v43 = type metadata accessor for VStack(255, v41, v42);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v43);
  v46 = type metadata accessor for ObservableScrollView(255, v43, v44, v45);
  v47 = swift_getTupleTypeMetadata2(255, v96, v46, 0, 0);
  v48 = type metadata accessor for TupleView(255, v47);
  v49 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v48);
  v50 = type metadata accessor for ZStack(255, v48, v49);
  v51 = type metadata accessor for ModifiedContent(255, v50, &type metadata for _SafeAreaRegionsIgnoringLayout);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v50);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v51);
  v98 = v51;
  v99 = (ValueMetadata *)v52;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v54 = sub_100007D00(&qword_10015A490);
  v55 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v54);
  v56 = type metadata accessor for ModifiedContent(255, v55, v38);
  v57 = sub_100007D00(&qword_10015A498);
  v58 = type metadata accessor for ModifiedContent(255, v56, v57);
  v98 = v51;
  v99 = (ValueMetadata *)v52;
  swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  sub_10000F4E0(&qword_10015A4A0, &qword_10015A490, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
  sub_10000F4E0(&qword_10015A4A8, &qword_10015A498, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
  v60 = type metadata accessor for NavigationStack(255, v97, v58, v59);
  v61 = sub_100007D00(&qword_10015A4B0);
  v62 = type metadata accessor for ModifiedContent(255, v60, v61);
  v63 = sub_100007D00(&qword_10015A4B8);
  v64 = type metadata accessor for ModifiedContent(255, v62, v63);
  v65 = sub_100007D00(&qword_10015A4C0);
  v66 = type metadata accessor for ModifiedContent(255, v64, v65);
  v67 = sub_100007D00(&qword_10015A4C8);
  v68 = type metadata accessor for ModifiedContent(255, v66, v67);
  v69 = swift_getAssociatedTypeWitness(255, v3, v2, &unk_10011790C, &unk_100117974);
  v70 = swift_getAssociatedConformanceWitness(v3, v2, v69, &unk_10011790C, &unk_10011794C);
  v72 = type metadata accessor for TicketView(255, v69, v70, v71);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v60);
  sub_10000F4E0(&qword_10015A4D0, &qword_10015A4B0, (uint64_t)&unk_100108C38);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  sub_10000F4E0(&qword_10015A4D8, &qword_10015A4B8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  sub_10000F4E0(&qword_10015A4E0, &qword_10015A4C0, (uint64_t)&unk_10010C4A0);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  sub_10000F4E0(&qword_10015A4E8, &qword_10015A4C8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v73 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v74 = swift_getWitnessTable(&unk_10010BEA0, v72);
  v98 = v68;
  v99 = (ValueMetadata *)v72;
  v100 = v73;
  v101 = v74;
  v75 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v76 = sub_100007D00(&qword_10015A4F0);
  v98 = v68;
  v99 = (ValueMetadata *)v72;
  v100 = v73;
  v101 = v74;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v78 = sub_100007D00(&qword_10015A4F8);
  v79 = sub_10001E0A8(&qword_10015A500, &qword_10015A4F8, (void (*)(void))sub_10004EC0C);
  v98 = v78;
  v99 = (ValueMetadata *)v79;
  v80 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v98 = v75;
  v99 = (ValueMetadata *)v76;
  v100 = OpaqueTypeConformance2;
  v101 = v80;
  v81 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v98 = v75;
  v99 = (ValueMetadata *)v76;
  v100 = OpaqueTypeConformance2;
  v101 = v80;
  v82 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v83 = sub_1000188D0();
  v98 = v81;
  v99 = &type metadata for PromotionalAssetsContentView;
  v100 = v82;
  v101 = v83;
  v84 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v85 = type metadata accessor for ModifiedContent(255, v84, &type metadata for _AppearanceActionModifier);
  v86 = type metadata accessor for ModifiedContent(255, v85, &type metadata for _AppearanceActionModifier);
  v87 = sub_100007D00(&qword_100158970);
  v98 = v81;
  v99 = &type metadata for PromotionalAssetsContentView;
  v100 = v82;
  v101 = v83;
  swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v85);
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v86);
  v89 = sub_10004EC50();
  v98 = v86;
  v99 = (ValueMetadata *)v87;
  v100 = v88;
  v101 = v89;
  v90 = swift_getOpaqueTypeMetadata2(255, &v98, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v91 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v92 = type metadata accessor for ModifiedContent(255, v90, v91);
  v93 = type metadata accessor for _TaskModifier(255);
  v94 = type metadata accessor for ModifiedContent(255, v92, v93);
  v98 = v86;
  v99 = (ValueMetadata *)v87;
  v100 = v88;
  v101 = v89;
  swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v92);
  sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v94);
}

unint64_t sub_100051084(uint64_t a1)
{
  unint64_t result;

  result = sub_10004FCA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000510A8(uint64_t a1)
{
  unint64_t result;

  result = sub_10004ECD8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000510CC(uint64_t a1)
{
  unint64_t result;

  result = sub_10004ED2C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *sub_1000510F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[6];
  v3 = a1[12];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100020C7C(v4, v5);
  sub_100020C7C(v6, v7);
  return a1;
}

uint64_t sub_100051168(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

_QWORD *sub_1000511A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  swift_bridgeObjectRetain(a1[12]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_10005120C(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_100051234(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_10000F844(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_10000F844(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_1000512A4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000512E0(uint64_t a1)
{
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_100051310(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_10000F844(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100051364()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v2, 0.996078431, 0.231372549, 0.22745098, 1.0);
  qword_10016A4A0 = result;
  return result;
}

uint64_t sub_1000513FC(uint64_t a1)
{
  return sub_100051474(a1, (SEL *)&selRef_systemBackgroundColor, &qword_10016A4A8);
}

uint64_t sub_100051410(uint64_t a1)
{
  return sub_100051474(a1, (SEL *)&selRef_secondarySystemBackgroundColor, &qword_10016A4B0);
}

uint64_t sub_100051424(uint64_t a1)
{
  return sub_100051474(a1, (SEL *)&selRef_secondaryLabelColor, &qword_10016A4B8);
}

uint64_t sub_100051438(uint64_t a1)
{
  return sub_100051474(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_10016A4C0);
}

uint64_t sub_10005144C(uint64_t a1)
{
  return sub_100051474(a1, (SEL *)&selRef_secondarySystemGroupedBackgroundColor, &qword_10016A4C8);
}

uint64_t sub_100051460(uint64_t a1)
{
  return sub_100051474(a1, (SEL *)&selRef_tertiarySystemFillColor, &qword_10016A4D0);
}

uint64_t sub_100051474(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  result = Color.init(_:)(v4);
  *a3 = result;
  return result;
}

__n128 initializeWithCopy for PaddingModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PaddingModifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PaddingModifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PaddingModifier()
{
  return &type metadata for PaddingModifier;
}

uint64_t sub_100051530(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100116F2C, 1);
}

uint64_t sub_100051540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;

  v5 = sub_100007D50(&qword_10015A758);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)v2;
  v10 = static Edge.Set.top.getter(v9);
  v11 = v10;
  v12 = Edge.Set.init(rawValue:)(v10);
  v13 = Edge.Set.init(rawValue:)(v12 & v8);
  if (v13 == v11)
    v14 = v2[1];
  else
    v14 = 0;
  v15 = static Edge.Set.leading.getter(v13);
  v16 = v15;
  v17 = Edge.Set.init(rawValue:)(v15);
  v18 = Edge.Set.init(rawValue:)(v17 & v8);
  if (v18 == v16)
    v19 = v2[2];
  else
    v19 = 0;
  v20 = static Edge.Set.bottom.getter(v18);
  v21 = v20;
  v22 = Edge.Set.init(rawValue:)(v20);
  v23 = Edge.Set.init(rawValue:)(v22 & v8);
  if (v23 == v21)
    v24 = v2[3];
  else
    v24 = 0;
  v25 = static Edge.Set.trailing.getter(v23);
  v26 = v25;
  v27 = Edge.Set.init(rawValue:)(v25);
  v28 = Edge.Set.init(rawValue:)(v27 & v8);
  if (v28 == v26)
    v29 = v2[4];
  else
    v29 = 0;
  v30 = static Edge.Set.all.getter(v28);
  v31 = sub_100007D50(&qword_10015A760);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v7, a1, v31);
  v32 = &v7[*(int *)(v5 + 36)];
  *v32 = v30;
  *((_QWORD *)v32 + 1) = v14;
  *((_QWORD *)v32 + 2) = v19;
  *((_QWORD *)v32 + 3) = v24;
  *((_QWORD *)v32 + 4) = v29;
  v32[40] = 0;
  return sub_1000516C8((uint64_t)v7, a2);
}

uint64_t sub_1000516C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015A758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100051714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A768;
  if (!qword_10015A768)
  {
    v1 = sub_100007D00(&qword_10015A758);
    sub_100051780();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A768);
  }
  return result;
}

unint64_t sub_100051780()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A770;
  if (!qword_10015A770)
  {
    v1 = sub_100007D00(&qword_10015A760);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A770);
  }
  return result;
}

uint64_t sub_1000517D0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10005181C(&qword_10015A778, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhoneWallpaper);
  result = sub_10005181C(&qword_10015A780, (uint64_t)&protocol conformance descriptor for PromotionalAssets.PhoneWallpaper);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10005181C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PromotionalAssets.PhoneWallpaper(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10005185C()
{
  qword_10015A788 = 0x7473696C70;
  unk_10015A790 = 0xE500000000000000;
}

unint64_t sub_10005187C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  unint64_t v13;
  NSString v14;
  NSString v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  Class isa;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  _QWORD v44[3];
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  id v48[4];

  v2 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v2);
  v4 = (char *)&v44[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v44[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v44[-1] - v10;
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (a1)
  {
    if (a1 == 1)
      v13 = 0x8000000100113A40;
    else
      v13 = 0x8000000100113A20;
  }
  else
  {
    v13 = 0x8000000100113A60;
  }
  v43 = v11;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  if (qword_1001580C0 != -1)
    swift_once(&qword_1001580C0, sub_10005185C);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v12, "URLForResource:withExtension:", v14, v15);

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_22;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

  v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v17(v4, v9, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_22:
    sub_100007F38((uint64_t)v4, &qword_100158658);
    return sub_1000FADF0((uint64_t)&_swiftEmptyArrayStorage);
  }
  v18 = v43;
  v17(v43, v4, v5);
  v28 = Data.init(contentsOf:options:)(v18, 0);
  v30 = v29;
  v31 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v48[0] = 0;
  v33 = objc_msgSend(v31, "propertyListWithData:options:format:error:", isa, 0, 0, v48);

  v34 = v48[0];
  if (v33)
  {
    v35 = v48[0];
    _bridgeAnyObjectToAny(_:)(v48, v33);
    swift_unknownObjectRelease(v33);
    v36 = sub_100007D50(&qword_10015A798);
    if (swift_dynamicCast(&v46, v48, (char *)&type metadata for Any + 8, v36, 6))
      v27 = v46;
    else
      v27 = sub_1000FADF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100029D7C(v28, v30);
  }
  else
  {
    v37 = v48[0];
    v38 = _convertNSErrorToError(_:)(v34);

    swift_willThrow();
    sub_100029D7C(v28, v30);
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v19 = type metadata accessor for Logger(0);
    sub_100029E7C(v19, (uint64_t)qword_10016A5B0);
    swift_errorRetain(v38);
    v20 = swift_errorRetain(v38);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = (void *)swift_slowAlloc(64, -1);
      v48[0] = v24;
      *(_DWORD *)v23 = 136315394;
      if (a1)
      {
        if (a1 == 1)
          v25 = 0xD000000000000019;
        else
          v25 = 0xD000000000000014;
        if (a1 == 1)
          v26 = 0x8000000100113A40;
        else
          v26 = 0x8000000100113A20;
      }
      else
      {
        v25 = 0xD000000000000016;
        v26 = 0x8000000100113A60;
      }
      v46 = sub_10003FCB4(v25, v26, (uint64_t *)v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      swift_getErrorValue(v38, v45, v44);
      v39 = Error.localizedDescription.getter(v44[1], v44[2]);
      v41 = v40;
      v46 = sub_10003FCB4(v39, v40, (uint64_t *)v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease(v41);
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error fetching allow list for %s %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(v38);
      v18 = v43;
    }
    else
    {
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      swift_errorRelease(v38);

    }
    v27 = sub_1000FADF0((uint64_t)&_swiftEmptyArrayStorage);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  return v27;
}

unint64_t sub_100051E80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v4 = sub_10005187C(2);
  if (!*(_QWORD *)(v4 + 16) || (v5 = sub_100086E80(0xD000000000000032, 0x80000001001139E0), (v6 & 1) == 0))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease(v4);
    goto LABEL_10;
  }
  sub_1000402F4(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v14);
  swift_bridgeObjectRelease(v4);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_10:
    sub_100007F38((uint64_t)&v14, (uint64_t *)&unk_10015D4A0);
LABEL_11:
    v14 = 0u;
    v15 = 0u;
LABEL_12:
    sub_100007F38((uint64_t)&v14, (uint64_t *)&unk_10015D4A0);
    return sub_1000FADF0((uint64_t)&_swiftEmptyArrayStorage);
  }
  v7 = sub_100007D50(&qword_10015A798);
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_11;
  v8 = v13;
  if (!v13)
    goto LABEL_11;
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v9 = sub_100086E80(a1, a2);
    if ((v10 & 1) != 0)
    {
      sub_1000402F4(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v14);
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
    }
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  if (!*((_QWORD *)&v15 + 1))
    goto LABEL_12;
  v12 = sub_100007D50(&qword_10015A798);
  if (swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v12, 6))
    return v13;
  return sub_1000FADF0((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_100052010(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10010AE38;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_10010AE50;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_10010AE68;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 7, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000520B8()
{
  uint64_t v0;

  return *(double *)(v0 + 56) * 0.6;
}

double sub_1000520D0()
{
  uint64_t v0;
  double v1;

  v1 = *(double *)(v0 + 56) * 0.6;
  return v1 / (double)Array.count.getter(*(_QWORD *)(v0 + 32), *(_QWORD *)(*(_QWORD *)v0 + 80));
}

BOOL sub_100052114()
{
  _QWORD *v0;

  return Array.count.getter(v0[4], *(_QWORD *)(*v0 + 80)) > 1;
}

uint64_t sub_10005213C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v17;

  v17 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  ObservationRegistrar.init()();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_QWORD *)(v17 + 48) = a5;
  *(double *)(v17 + 56) = a7;
  *(double *)(v17 + 64) = a8;
  *(_BYTE *)(v17 + 72) = a6;
  return v17;
}

_QWORD *sub_1000521D0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = (char *)v0 + qword_10015A7A0;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10005222C()
{
  uint64_t v0;

  sub_1000521D0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for TourPhotosViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TourPhotosViewModel);
}

uint64_t destroy for NavigationButton(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp16NavigationButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for NavigationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for NavigationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton()
{
  return &type metadata for NavigationButton;
}

uint64_t sub_1000523B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117068, 1);
}

BOOL sub_1000523CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000523E0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100052424()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10005244C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10005248C(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;

  v6 = a1;
  v24[1] = a4;
  v7 = a1 >> 8;
  v8 = type metadata accessor for BorderlessButtonStyle(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015A828);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100007D50(&qword_10015A830);
  v24[0] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_10015A838);
  __chkstk_darwin(v17);
  v26 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[16] = v6;
  v29[17] = v7;
  v30 = a2;
  v31 = a3;
  swift_retain(a3);
  v19 = sub_100007D50(&qword_10015A840);
  v20 = sub_1000528D0();
  v21 = Button.init(action:label:)(a2, a3, sub_1000528C4, v29, v19, v20);
  BorderlessButtonStyle.init()(v21);
  v22 = sub_10000F4E0(&qword_10015A858, &qword_10015A828, (uint64_t)&protocol conformance descriptor for Button<A>);
  v23 = sub_100007428(&qword_10015A860, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  v27 = v16;
  View.buttonStyle<A>(_:)(v10, v11, v8, v22, v23);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  __asm { BR              X10 }
}

uint64_t sub_1000526AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000026, 0x8000000100113B80);
  v6 = *(_QWORD *)(v4 - 224);
  v7 = *(_QWORD *)(v4 - 216);
  v8 = v0;
  v12 = Text.init(_:tableName:bundle:comment:)(v5, v10, v9 & 1, v11, 0, 0, 0, 0, 0, 256);
  v14 = v13;
  v16 = v15;
  *(_QWORD *)(v4 - 120) = v1;
  *(_QWORD *)(v4 - 112) = v8;
  v18 = v17 & 1;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v3;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v4 - 120, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v21 = *(_QWORD *)(v4 - 200);
  v20 = *(_QWORD *)(v4 - 192);
  v22 = *(_QWORD *)(v4 - 184);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))View.accessibility(label:))(v12, v14, v18, v16, v22, OpaqueTypeConformance2);
  sub_100007D90(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v22);
  return sub_100018EB4(v21, v7, &qword_10015A838);
}

void sub_1000527F0(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10005283C(unsigned int a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1 >> 8;
  v3 = ((uint64_t (*)(unint64_t, unint64_t))Image.init(systemName:))(0xD000000000000011, 0x8000000100113BF0);
  result = swift_getKeyPath(&unk_10010AF58);
  *(_QWORD *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 24) = 0;
  return result;
}

void sub_1000528B8(uint64_t a1@<X8>)
{
  unsigned __int16 *v1;

  sub_10005248C(*v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), a1);
}

void sub_1000528C4()
{
  uint64_t v0;

  sub_1000527F0(*(_WORD *)(v0 + 16));
}

unint64_t sub_1000528D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A848;
  if (!qword_10015A848)
  {
    v1 = sub_100007D00(&qword_10015A840);
    sub_10005293C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A848);
  }
  return result;
}

unint64_t sub_10005293C()
{
  unint64_t result;

  result = qword_10015A850;
  if (!qword_10015A850)
  {
    result = swift_getWitnessTable(&unk_10010B088, &type metadata for NavigationImageStyle);
    atomic_store(result, (unint64_t *)&qword_10015A850);
  }
  return result;
}

uint64_t sub_100052980@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v111 = a2;
  v118 = a1;
  v119 = a5;
  v112 = sub_100007D50(&qword_10015A880);
  __chkstk_darwin(v112);
  v114 = (uint64_t)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100007D50(&qword_10015A888);
  __chkstk_darwin(v108);
  v109 = (uint64_t)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100007D50(&qword_10015A890);
  __chkstk_darwin(v113);
  v110 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100007D50(&qword_10015A898);
  __chkstk_darwin(v107);
  v105 = (uint64_t)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v106 = (uint64_t)&v102 - v12;
  v117 = sub_100007D50(&qword_10015A8A0);
  __chkstk_darwin(v117);
  v115 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100007D50(&qword_10015A8A8);
  __chkstk_darwin(v116);
  v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015A8B0);
  __chkstk_darwin(v16);
  v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100007D50(&qword_10015A8B8);
  __chkstk_darwin(v19);
  v21 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100007D50(&qword_10015A8C0);
  __chkstk_darwin(v22);
  v24 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v102 - v26;
  a4 &= 1u;
  sub_10001DD3C(a3, a4);
  v28 = sub_100018A60(a3, a4);
  v29 = sub_100018FA8(a3, a4);
  if ((v28 & 1) != 0)
  {
    static SymbolRenderingMode.palette.getter(v29);
    v30 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v18, 0, 1, v30);
    KeyPath = swift_getKeyPath(&unk_10010B0D8);
    v32 = (uint64_t *)&v21[*(int *)(v19 + 36)];
    v33 = sub_100007D50(&qword_10015A8C8);
    sub_100007E78((uint64_t)v18, (uint64_t)v32 + *(int *)(v33 + 28), &qword_10015A8B0);
    *v32 = KeyPath;
    v34 = sub_100007D50(&qword_10015A8D0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v21, v118, v34);
    v35 = sub_100007F38((uint64_t)v18, &qword_10015A8B0);
    v36 = static Color.white.getter(v35);
    v37 = static Color.gray.getter();
    sub_100007E78((uint64_t)v21, (uint64_t)v24, &qword_10015A8B8);
    v38 = (uint64_t *)&v24[*(int *)(v22 + 36)];
    *v38 = v36;
    v38[1] = v37;
    sub_100007F38((uint64_t)v21, &qword_10015A8B8);
    sub_100018EB4((uint64_t)v24, (uint64_t)v27, &qword_10015A8C0);
    sub_100007E78((uint64_t)v27, (uint64_t)v15, &qword_10015A8C0);
    swift_storeEnumTagMultiPayload(v15, v116, 0);
    v39 = sub_100053BB0();
    v40 = sub_100053C34();
    _ConditionalContent<>.init(storage:)(v15, v22, v117, v39, v40);
    v41 = (uint64_t)v27;
    v42 = &qword_10015A8C0;
  }
  else
  {
    v103 = v22;
    v104 = v15;
    v43 = v118;
    if ((_BYTE)v111)
    {
      if (v111 == 1)
      {
        static SymbolRenderingMode.palette.getter(v29);
        v44 = type metadata accessor for SymbolRenderingMode(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v18, 0, 1, v44);
        v45 = swift_getKeyPath(&unk_10010B0D8);
        v46 = (uint64_t *)&v21[*(int *)(v19 + 36)];
        v47 = sub_100007D50(&qword_10015A8C8);
        sub_100007E78((uint64_t)v18, (uint64_t)v46 + *(int *)(v47 + 28), &qword_10015A8B0);
        *v46 = v45;
        v48 = sub_100007D50(&qword_10015A8D0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v21, v43, v48);
        v49 = sub_100007F38((uint64_t)v18, &qword_10015A8B0);
        v50 = static Color.white.getter(v49);
        v51 = static Color.white.getter(v50);
        v52 = Color.opacity(_:)(0.2);
        swift_release(v51);
        sub_100007E78((uint64_t)v21, (uint64_t)v24, &qword_10015A8B8);
        v53 = v103;
        v54 = (uint64_t *)&v24[*(int *)(v103 + 36)];
        *v54 = v50;
        v54[1] = v52;
        sub_100007F38((uint64_t)v21, &qword_10015A8B8);
        v55 = v27;
        sub_100018EB4((uint64_t)v24, (uint64_t)v27, &qword_10015A8C0);
        v56 = (uint64_t)v27;
        v57 = v109;
        sub_100007E78(v56, v109, &qword_10015A8C0);
        swift_storeEnumTagMultiPayload(v57, v108, 1);
        v58 = sub_100053A90();
        v59 = sub_100053BB0();
        v60 = (uint64_t)v110;
        _ConditionalContent<>.init(storage:)(v57, v107, v53, v58, v59);
        v61 = v114;
        sub_100007E78(v60, v114, &qword_10015A890);
        swift_storeEnumTagMultiPayload(v61, v112, 0);
        v62 = sub_100053A6C();
        v63 = (uint64_t)v115;
        _ConditionalContent<>.init(storage:)(v61, v113, v53, v62, v59);
        sub_100007F38(v60, &qword_10015A890);
        v64 = (uint64_t)v55;
      }
      else
      {
        static SymbolRenderingMode.palette.getter(v29);
        v81 = type metadata accessor for SymbolRenderingMode(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v18, 0, 1, v81);
        v82 = swift_getKeyPath(&unk_10010B0D8);
        v83 = (uint64_t *)&v21[*(int *)(v19 + 36)];
        v84 = sub_100007D50(&qword_10015A8C8);
        sub_100007E78((uint64_t)v18, (uint64_t)v83 + *(int *)(v84 + 28), &qword_10015A8B0);
        *v83 = v82;
        v85 = sub_100007D50(&qword_10015A8D0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v21, v43, v85);
        v86 = sub_100007F38((uint64_t)v18, &qword_10015A8B0);
        v87 = static Color.white.getter(v86);
        v88 = static Color.primary.getter(v87);
        v89 = Color.opacity(_:)(0.2);
        swift_release(v88);
        sub_100007E78((uint64_t)v21, (uint64_t)v24, &qword_10015A8B8);
        v53 = v103;
        v90 = (uint64_t *)&v24[*(int *)(v103 + 36)];
        *v90 = v87;
        v90[1] = v89;
        sub_100007F38((uint64_t)v21, &qword_10015A8B8);
        v91 = v27;
        sub_100018EB4((uint64_t)v24, (uint64_t)v27, &qword_10015A8C0);
        v92 = (uint64_t)v27;
        v93 = v114;
        sub_100007E78(v92, v114, &qword_10015A8C0);
        swift_storeEnumTagMultiPayload(v93, v112, 1);
        v94 = sub_100053A6C();
        v95 = sub_100053BB0();
        v63 = (uint64_t)v115;
        _ConditionalContent<>.init(storage:)(v93, v113, v53, v94, v95);
        v64 = (uint64_t)v91;
      }
      v80 = &qword_10015A8C0;
    }
    else
    {
      static SymbolRenderingMode.hierarchical.getter(v29);
      v65 = type metadata accessor for SymbolRenderingMode(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v18, 0, 1, v65);
      v66 = swift_getKeyPath(&unk_10010B0D8);
      v67 = (uint64_t *)&v21[*(int *)(v19 + 36)];
      v68 = sub_100007D50(&qword_10015A8C8);
      sub_100007E78((uint64_t)v18, (uint64_t)v67 + *(int *)(v68 + 28), &qword_10015A8B0);
      *v67 = v66;
      v69 = sub_100007D50(&qword_10015A8D0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v21, v43, v69);
      sub_100007F38((uint64_t)v18, &qword_10015A8B0);
      if (qword_1001580A0 != -1)
        swift_once(&qword_1001580A0, sub_100051424);
      v70 = qword_10016A4B8;
      v71 = v105;
      sub_100007E78((uint64_t)v21, v105, &qword_10015A8B8);
      v72 = v107;
      *(_QWORD *)(v71 + *(int *)(v107 + 36)) = v70;
      swift_retain(v70);
      sub_100007F38((uint64_t)v21, &qword_10015A8B8);
      v73 = v106;
      sub_100018EB4(v71, v106, &qword_10015A898);
      v74 = v109;
      sub_100007E78(v73, v109, &qword_10015A898);
      swift_storeEnumTagMultiPayload(v74, v108, 0);
      v75 = sub_100053A90();
      v76 = sub_100053BB0();
      v77 = (uint64_t)v110;
      v53 = v103;
      _ConditionalContent<>.init(storage:)(v74, v72, v103, v75, v76);
      v78 = v114;
      sub_100007E78(v77, v114, &qword_10015A890);
      swift_storeEnumTagMultiPayload(v78, v112, 0);
      v79 = sub_100053A6C();
      v63 = (uint64_t)v115;
      _ConditionalContent<>.init(storage:)(v78, v113, v53, v79, v76);
      sub_100007F38(v77, &qword_10015A890);
      v64 = v73;
      v80 = &qword_10015A898;
    }
    sub_100007F38(v64, v80);
    v96 = v116;
    v97 = v117;
    v98 = (uint64_t)v104;
    sub_100007E78(v63, (uint64_t)v104, &qword_10015A8A0);
    swift_storeEnumTagMultiPayload(v98, v96, 1);
    v99 = sub_100053BB0();
    v100 = sub_100053C34();
    _ConditionalContent<>.init(storage:)(v98, v53, v97, v99, v100);
    v41 = v63;
    v42 = &qword_10015A8A0;
  }
  return sub_100007F38(v41, v42);
}

uint64_t sub_100053360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;

  return sub_100052980(a1, *v2, *((_QWORD *)v2 + 1), v2[16], a2);
}

uint64_t sub_100053370@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t destroy for NavigationImageStyle(uint64_t a1)
{
  return sub_100018FA8(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp20NavigationImageStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_10001DD3C(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_10001DD3C(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100018FA8(v5, v6);
  return a1;
}

__n128 initializeWithTake for RemoteViewConfiguration.Service(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for NavigationImageStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100018FA8(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PromotionalAssetsController.PromotionalAssetsType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationImageStyle()
{
  return &type metadata for NavigationImageStyle;
}

_BYTE *initializeBufferWithCopyOfBuffer for RemoteViewConfiguration.Service.Name(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationButton.ColorScheme(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationButton.ColorScheme(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100053630 + 4 * byte_10010AEDD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100053664 + 4 * byte_10010AED8[v4]))();
}

uint64_t sub_100053664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005366C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053674);
  return result;
}

uint64_t sub_100053680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053688);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10005368C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000536A0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000536A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.ColorScheme()
{
  return &type metadata for NavigationButton.ColorScheme;
}

uint64_t getEnumTagSinglePayload for PlaybackStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationButton.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10005379C + 4 * byte_10010AEE7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000537D0 + 4 * byte_10010AEE2[v4]))();
}

uint64_t sub_1000537D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000537D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000537E0);
  return result;
}

uint64_t sub_1000537EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000537F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000537F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053800(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton.Style()
{
  return &type metadata for NavigationButton.Style;
}

unint64_t sub_100053820()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10015A868;
  if (!qword_10015A868)
  {
    v1 = sub_100007D00(&qword_10015A838);
    v2[0] = sub_100007D00(&qword_10015A828);
    v2[1] = type metadata accessor for BorderlessButtonStyle(255);
    v2[2] = sub_10000F4E0(&qword_10015A858, &qword_10015A828, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100007428(&qword_10015A860, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A868);
  }
  return result;
}

unint64_t sub_10005392C()
{
  unint64_t result;

  result = qword_10015A870;
  if (!qword_10015A870)
  {
    result = swift_getWitnessTable(&unk_10010AFF8, &type metadata for NavigationButton.Style);
    atomic_store(result, (unint64_t *)&qword_10015A870);
  }
  return result;
}

unint64_t sub_100053974()
{
  unint64_t result;

  result = qword_10015A878;
  if (!qword_10015A878)
  {
    result = swift_getWitnessTable(&unk_10010B060, &type metadata for NavigationButton.ColorScheme);
    atomic_store(result, (unint64_t *)&qword_10015A878);
  }
  return result;
}

uint64_t sub_1000539B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117090, 1);
}

uint64_t sub_1000539C8()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_1000539E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100007D50(&qword_10015A8B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E78(a1, (uint64_t)v4, &qword_10015A8B0);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

uint64_t sub_100053A6C()
{
  return sub_10001881C(&qword_10015A8D8, &qword_10015A890, (void (*)(void))sub_100053A90, (void (*)(void))sub_100053BB0);
}

unint64_t sub_100053A90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A8E0;
  if (!qword_10015A8E0)
  {
    v1 = sub_100007D00(&qword_10015A898);
    sub_100053B14();
    sub_10000F4E0(&qword_100158618, &qword_100158620, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A8E0);
  }
  return result;
}

unint64_t sub_100053B14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A8E8;
  if (!qword_10015A8E8)
  {
    v1 = sub_100007D00(&qword_10015A8B8);
    sub_10000F4E0(&qword_10015A8F0, &qword_10015A8D0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000F4E0(&qword_10015A8F8, &qword_10015A8C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A8E8);
  }
  return result;
}

unint64_t sub_100053BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A900;
  if (!qword_10015A900)
  {
    v1 = sub_100007D00(&qword_10015A8C0);
    sub_100053B14();
    sub_10000F4E0(&qword_10015A908, &qword_10015A910, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A900);
  }
  return result;
}

uint64_t sub_100053C34()
{
  return sub_10001881C(&qword_10015A918, &qword_10015A8A0, (void (*)(void))sub_100053A6C, (void (*)(void))sub_100053BB0);
}

uint64_t sub_100053C58()
{
  return sub_10001881C(&qword_10015A920, &qword_10015A928, (void (*)(void))sub_100053BB0, (void (*)(void))sub_100053C34);
}

uint64_t getEnumTagSinglePayload for BezelBackground(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BezelBackground(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BezelBackground()
{
  return &type metadata for BezelBackground;
}

uint64_t destroy for RemoteViewConfiguration.Service(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s15ShazamEventsApp5BezelVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for Bezel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for Bezel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for Bezel()
{
  return &type metadata for Bezel;
}

uint64_t *sub_100053DD8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100053E74(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100053EA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100053F18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100053F8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100053FFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10005406C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054078);
}

uint64_t sub_100054078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000540B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000540C0);
}

uint64_t sub_1000540C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ScrollAsset(uint64_t a1)
{
  uint64_t result;

  result = qword_10015A988;
  if (!qword_10015A988)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScrollAsset);
  return result;
}

uint64_t sub_10005413C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetHeader()
{
  return &type metadata for AssetHeader;
}

uint64_t sub_1000541C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001171AC, 1);
}

void sub_1000541D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[10];
  uint64_t v49;

  static HorizontalAlignment.leading.getter(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v10 = Text.init(_:tableName:bundle:comment:)(a1, a2, a3, a4, 0, 0, 0, 0, 0, 256);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Font.title2.getter(v10);
  static Font.Weight.bold.getter();
  v18 = Font.weight(_:)(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  sub_100007D90(v10, v12, v16);
  v26 = swift_bridgeObjectRelease(v14);
  v27 = static Alignment.leading.getter(v26);
  sub_1000437A8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v48, 0.0, 1, 0.0, 1, v27, v28);
  sub_100007D90(v19, v21, v23 & 1);
  v29 = swift_bridgeObjectRelease(v25);
  v30 = static Edge.Set.horizontal.getter(v29);
  v31 = EdgeInsets.init(_all:)(20.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  LOBYTE(v25) = static Edge.Set.bottom.getter(v38);
  v39 = EdgeInsets.init(_all:)(32.0);
  v40 = v48[9];
  *(_OWORD *)(a5 + 128) = v48[8];
  *(_OWORD *)(a5 + 144) = v40;
  *(_QWORD *)(a5 + 160) = v49;
  v41 = v48[5];
  *(_OWORD *)(a5 + 64) = v48[4];
  *(_OWORD *)(a5 + 80) = v41;
  v42 = v48[7];
  *(_OWORD *)(a5 + 96) = v48[6];
  *(_OWORD *)(a5 + 112) = v42;
  v43 = v48[1];
  *(_OWORD *)a5 = v48[0];
  *(_OWORD *)(a5 + 16) = v43;
  v44 = v48[3];
  *(_OWORD *)(a5 + 32) = v48[2];
  *(_OWORD *)(a5 + 48) = v44;
  *(_BYTE *)(a5 + 168) = v30;
  *(double *)(a5 + 176) = v31;
  *(_QWORD *)(a5 + 184) = v33;
  *(_QWORD *)(a5 + 192) = v35;
  *(_QWORD *)(a5 + 200) = v37;
  *(_BYTE *)(a5 + 208) = 0;
  *(_BYTE *)(a5 + 216) = v25;
  *(double *)(a5 + 224) = v39;
  *(_QWORD *)(a5 + 232) = v45;
  *(_QWORD *)(a5 + 240) = v46;
  *(_QWORD *)(a5 + 248) = v47;
  *(_BYTE *)(a5 + 256) = 0;
}

void sub_100054408(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000541D4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100054418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];

  v2 = v1;
  v50 = a1;
  v49 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v49);
  v4 = (uint64_t *)((char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100007D50(&qword_10015A9C8);
  v8 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100007D50(&qword_10015A9D0);
  __chkstk_darwin(v45);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100007D50(&qword_10015A9D8);
  __chkstk_darwin(v46);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100007D50(&qword_10015A9E0);
  __chkstk_darwin(v48);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v7, v2, v17);
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v7, 0, 1, v17);
  v20 = static Animation.easeInOut.getter(v19);
  v21 = Transaction.init(animation:)(v20);
  v22 = sub_100007D50(&qword_10015A9E8);
  v23 = sub_100054F48();
  AsyncImage.init(url:scale:transaction:content:)(v7, v21, sub_1000547E4, 0, v22, v23, 1.0);
  v24 = (int *)type metadata accessor for ScrollAsset(0);
  v25 = *(_QWORD *)(v2 + v24[5]);
  v26 = *(_QWORD *)(v2 + v24[6]);
  v27 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(v51, v25, 0, v26, 0, v27, v28);
  v29 = v47;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v47);
  v30 = &v12[*(int *)(v45 + 36)];
  v31 = v51[1];
  *(_OWORD *)v30 = v51[0];
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v51[2];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v29);
  sub_100007E78((uint64_t)v12, (uint64_t)v14, &qword_10015A9D0);
  *(_WORD *)&v14[*(int *)(v46 + 36)] = 0;
  sub_100007F38((uint64_t)v12, &qword_10015A9D0);
  v32 = *(_QWORD *)(v2 + v24[7]);
  v33 = (char *)v4 + *(int *)(v49 + 20);
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  *v4 = v32;
  v4[1] = v32;
  v36 = v48;
  v37 = (uint64_t)&v16[*(int *)(v48 + 36)];
  sub_10000F760((uint64_t)v4, v37);
  *(_WORD *)(v37 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_10015A9D8);
  sub_10000F854((uint64_t)v4);
  v38 = sub_100007F38((uint64_t)v14, &qword_10015A9D8);
  v39 = static Axis.Set.horizontal.getter(v38);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = sub_1000550BC();
  View.containerRelativeFrame(_:alignment:)(v39, v40, v42, v36, v43);
  return sub_100007F38((uint64_t)v16, &qword_10015A9E0);
}

void sub_1000547E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  char v41;
  __int128 v42;
  int v43;
  char v44;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AsyncImagePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v10);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v12, v8);
    v14 = *v12;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v15 = Image.resizable(capInsets:resizingMode:)(v7, v14, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v39 = (unint64_t)v15;
    v40 = 65793;
    swift_retain(v15);
    v16 = sub_100007D50(&qword_10015AA10);
    v17 = sub_100007D50(&qword_100158D48);
    v18 = sub_100055050(&qword_10015AA08, &qword_10015AA10, (void (*)(void))sub_100020844);
    v19 = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(&v39, v16, v17, v18, v19);
    v20 = v42;
    if (HIBYTE(v43))
      v21 = 0x1000000;
    else
      v21 = 0;
    v39 = v42;
    v40 = v21 | (unsigned __int16)v43 | (BYTE2(v43) << 16);
    v41 = 0;
    j__swift_retain(v42);
    v22 = sub_100007D50(&qword_10015AA00);
    v23 = sub_100054FB4();
    _ConditionalContent<>.init(storage:)(&v39, v22, &type metadata for EmptyView, v23, &protocol witness table for EmptyView);
    swift_release(v14);
    j__swift_release(v20);
    v24 = v15;
  }
  else
  {
    if (v13 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v9 + 96))(v12, v8);
      swift_errorRelease(*v12);
    }
    else if (v13 != enum case for AsyncImagePhase.empty(_:))
    {
      v39 = 0uLL;
      v40 = 0;
      v41 = 1;
      v36 = sub_100007D50(&qword_10015AA00);
      v37 = sub_100054FB4();
      _ConditionalContent<>.init(storage:)(&v39, v36, &type metadata for EmptyView, v37, &protocol witness table for EmptyView);
      v38 = v42;
      v34 = v43;
      v35 = v44;
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
      v33 = v38;
      goto LABEL_16;
    }
    if (qword_1001580A8 != -1)
      swift_once(&qword_1001580A8, sub_100051438);
    v25 = qword_10016A4C0;
    *(_QWORD *)&v39 = qword_10016A4C0;
    *((_QWORD *)&v39 + 1) = 256;
    v40 = 0x1000000;
    swift_retain_n(qword_10016A4C0, 2);
    v26 = sub_100007D50(&qword_10015AA10);
    v27 = sub_100007D50(&qword_100158D48);
    v28 = sub_100055050(&qword_10015AA08, &qword_10015AA10, (void (*)(void))sub_100020844);
    v29 = sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    _ConditionalContent<>.init(storage:)(&v39, v26, v27, v28, v29);
    if (HIBYTE(v43))
      v30 = 0x1000000;
    else
      v30 = 0;
    v39 = v42;
    v40 = v30 | (unsigned __int16)v43 | (BYTE2(v43) << 16);
    v41 = 0;
    v31 = sub_100007D50(&qword_10015AA00);
    v32 = sub_100054FB4();
    _ConditionalContent<>.init(storage:)(&v39, v31, &type metadata for EmptyView, v32, &protocol witness table for EmptyView);
    v24 = v25;
  }
  swift_release(v24);
  v33 = v42;
  v34 = v43;
  v35 = v44;
LABEL_16:
  *(_OWORD *)a2 = v33;
  *(_DWORD *)(a2 + 16) = v34;
  *(_BYTE *)(a2 + 20) = v35;
}

void sub_100054C5C(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for Image.ResizingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v9 = v1[2];
  swift_bridgeObjectRetain(v8);
  v10 = Image.init(_:bundle:)(*(_QWORD *)&v7, v8, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
  v11 = Image.resizable(capInsets:resizingMode:)(v6, v10, 0.0, 0.0, 0.0, 0.0);
  swift_release(v10);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOBYTE(v10) = static Edge.Set.all.getter(v12);
  v13 = EdgeInsets.init(_all:)(v9);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 24) = v10;
  *(double *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 65) = 0;
  *(_BYTE *)(a1 + 67) = 1;
}

uint64_t sub_100054D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD v23[3];

  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100007D50(&qword_10015AA48);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = (char *)v5 + *(int *)(v3 + 20);
  v13 = enum case for RoundedCornerStyle.continuous(_:);
  v14 = type metadata accessor for RoundedCornerStyle(0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  *v5 = v11;
  v5[1] = v11;
  v16 = static Color.black.getter(v15);
  sub_10000F760((uint64_t)v5, (uint64_t)v8);
  *(_QWORD *)&v8[*(int *)(v6 + 52)] = v16;
  *(_WORD *)&v8[*(int *)(v6 + 56)] = 256;
  v17 = sub_10000F854((uint64_t)v5);
  v18 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(v23, v9, 0, v10, 0, v18, v19);
  sub_100007E78((uint64_t)v8, a1, &qword_10015AA48);
  v20 = (_OWORD *)(a1 + *(int *)(sub_100007D50(&qword_10015AA50) + 36));
  v21 = v23[1];
  *v20 = v23[0];
  v20[1] = v21;
  v20[2] = v23[2];
  return sub_100007F38((uint64_t)v8, &qword_10015AA48);
}

uint64_t sub_100054F18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117184, 1);
}

uint64_t sub_100054F28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011715C, 1);
}

uint64_t sub_100054F38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117134, 1);
}

unint64_t sub_100054F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A9F0;
  if (!qword_10015A9F0)
  {
    v1 = sub_100007D00(&qword_10015A9E8);
    sub_100054FB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A9F0);
  }
  return result;
}

unint64_t sub_100054FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A9F8;
  if (!qword_10015A9F8)
  {
    v1 = sub_100007D00(&qword_10015AA00);
    sub_100055050(&qword_10015AA08, &qword_10015AA10, (void (*)(void))sub_100020844);
    sub_10000F4E0(&qword_100158D40, &qword_100158D48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015A9F8);
  }
  return result;
}

uint64_t sub_100055050(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007D00(a2);
    a3();
    sub_10001BEB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000550BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AA18;
  if (!qword_10015AA18)
  {
    v1 = sub_100007D00(&qword_10015A9E0);
    sub_100055140();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AA18);
  }
  return result;
}

unint64_t sub_100055140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AA20;
  if (!qword_10015AA20)
  {
    v1 = sub_100007D00(&qword_10015A9D8);
    sub_1000551C4();
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AA20);
  }
  return result;
}

unint64_t sub_1000551C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AA28;
  if (!qword_10015AA28)
  {
    v1 = sub_100007D00(&qword_10015A9D0);
    sub_10000F4E0(&qword_10015AA30, &qword_10015A9C8, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AA28);
  }
  return result;
}

uint64_t sub_100055250()
{
  _QWORD v1[2];

  v1[0] = sub_100007D00(&qword_10015A9E0);
  v1[1] = sub_1000550BC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
}

uint64_t sub_10005529C()
{
  return sub_10000F31C(&qword_10015AA58, &qword_10015AA60, (void (*)(void))sub_1000552C8);
}

uint64_t sub_1000552C8()
{
  return sub_10000F31C(&qword_10015AA68, &qword_10015AA70, (void (*)(void))sub_1000552E4);
}

unint64_t sub_1000552E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AA78;
  if (!qword_10015AA78)
  {
    v1 = sub_100007D00(&qword_10015AA80);
    sub_10000F4E0(&qword_10015AA88, &qword_10015AA90, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AA78);
  }
  return result;
}

uint64_t sub_100055368()
{
  return sub_100055050(&qword_10015AA98, &qword_10015AAA0, (void (*)(void))sub_100055394);
}

unint64_t sub_100055394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AAA8;
  if (!qword_10015AAA8)
  {
    v1 = sub_100007D00(&qword_10015AAB0);
    sub_10000F31C(&qword_10015AAB8, &qword_10015AAC0, (void (*)(void))sub_100020844);
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AAA8);
  }
  return result;
}

unint64_t sub_100055434()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AAC8;
  if (!qword_10015AAC8)
  {
    v1 = sub_100007D00(&qword_10015AA50);
    sub_10000F4E0(&qword_10015AAD0, &qword_10015AA48, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AAC8);
  }
  return result;
}

uint64_t sub_1000554B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1[3] = v0;
  v2 = sub_100007D50(&qword_10015AC78);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MusicSubscription(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[7] = v5;
  v1[8] = type metadata accessor for MainActor(0);
  v1[9] = static MainActor.shared.getter();
  v6 = (_QWORD *)swift_task_alloc(async function pointer to static MusicSubscription.current.getter[1]);
  v1[10] = v6;
  *v6 = v1;
  v6[1] = sub_100055574;
  return static MusicSubscription.current.getter(v5);
}

uint64_t sub_100055574()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 64), &protocol witness table for MainActor);
  if (v0)
    v6 = sub_100055744;
  else
    v6 = sub_1000555F8;
  return swift_task_switch(v6, v5, v4);
}

void sub_1000555F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 72));
  v3 = *(_QWORD *)(v2 + 16);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v1;
  v5 = (uint64_t *)(v3 + 16);
  v6 = (os_unfair_lock_s *)(v3 + 24);
  if (os_unfair_lock_trylock(v6))
  {
    sub_100055AD8(*(_QWORD *)(v4 + 16));
    os_unfair_lock_unlock(v6);
  }
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(v4);
  os_unfair_lock_lock(v6);
  sub_100055968(v5, v8);
  os_unfair_lock_unlock(v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
    {
      sub_1000567F0(v11);
    }
    else
    {
      v12 = MusicSubscription.canBecomeSubscriber.getter();
      v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v13(v11, v9);
      if ((v12 & 1) == 0)
      {
LABEL_8:
        v13(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
        v15 = *(_QWORD *)(v0 + 32);
        swift_task_dealloc(*(_QWORD *)(v0 + 56));
        swift_task_dealloc(v15);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
    }
    v14 = *(_QWORD *)(v0 + 48);
    sub_100055C20();
    v13 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    goto LABEL_8;
  }
}

uint64_t sub_100055744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_100029E7C(v2, (uint64_t)qword_10016A5B0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching Apple Music subscription status with error: %@", v8, 0xCu);
    v11 = sub_100007D50(&qword_10015AC88);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005592C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100056398();
  qword_10016A4D8 = v1;
  return result;
}

uint64_t sub_100055968@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B320);
  v8[0] = v3;
  v5 = sub_100007428(&qword_10015ACA8, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_10010B300);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess(v3 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription, v8, 0, 0);
  return sub_100056930(v6, a2);
}

uint64_t sub_100055A28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_10010B320);
  v7[0] = v1;
  v4 = sub_100007428(&qword_10015ACA8, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_10010B300);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = v1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription, v7, 0, 0);
  return sub_100056930(v5, a1);
}

void sub_100055AD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v3 = sub_100007D50(&qword_10015AC78);
  __chkstk_darwin(v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (os_unfair_lock_s *)(*(_QWORD *)(v1
                                      + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater_lock)
                          + 16);
  os_unfair_lock_lock(v6);
  v7 = type metadata accessor for MusicSubscription(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v5, a1, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  KeyPath = swift_getKeyPath(&unk_10010B320);
  v12 = v1;
  v13 = v5;
  v14 = v1;
  v10 = sub_100007428(&qword_10015ACA8, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_10010B300);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_1000568D0, v11, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  sub_1000567F0((uint64_t)v5);
  os_unfair_lock_unlock(v6);
}

uint64_t sub_100055C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v5 = type metadata accessor for Logger(0);
  sub_100029E7C(v5, (uint64_t)qword_10016A5B0);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Started observing subscription updates", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = (_QWORD *)swift_allocObject(&unk_10014A760, 40, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v10;
  swift_retain(v10);
  v12 = sub_1000C8730((uint64_t)v4, (uint64_t)&unk_10015AC98, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_100055D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[3] = a4;
  v5 = type metadata accessor for MusicSubscription(0);
  v4[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015AC78);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MusicSubscription.Updates(0);
  v4[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[9] = v9;
  v4[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MusicSubscription.Updates.Iterator(0);
  v4[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[12] = v11;
  v4[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100055E70, 0, 0);
}

uint64_t sub_100055E70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v4 = static MusicSubscription.subscriptionUpdates.getter();
  MusicSubscription.Updates.makeAsyncIterator()(v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100007428(&qword_10015ACA0, (uint64_t (*)(uint64_t))&type metadata accessor for MusicSubscription.Updates.Iterator, (uint64_t)&protocol conformance descriptor for MusicSubscription.Updates.Iterator);
  v0[14] = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_100055F28;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[7], v0[11], v5);
}

uint64_t sub_100055F28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_1000561E4;
  }
  else
  {
    v3 = sub_100055F8C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100055F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0 + 40;
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = (_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v4) == 1)
  {
    v1 = v0 + 96;
    v6 = (_QWORD *)(v0 + 104);
    v5 = (_QWORD *)(v0 + 88);
  }
  else
  {
    v6 = (_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 24) + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v3, v4);
    v9 = swift_task_alloc(32);
    *(_QWORD *)(v9 + 16) = v7;
    if (os_unfair_lock_trylock(v8))
    {
      v10 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 24) + 24);
      sub_100055AD8(*(_QWORD *)(v9 + 16));
      os_unfair_lock_unlock(v10);
    }
    v11 = swift_task_dealloc(v9);
    if ((MusicSubscription.canBecomeSubscriber.getter(v11) & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
      v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 136) = v12;
      *v12 = v0;
      v12[1] = sub_100056244;
      return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 112));
    }
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100029E7C(v14, (uint64_t)qword_10016A5B0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopped observing subscription updates for already subscribed user.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    v20 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v3 = *(_QWORD *)(v0 + 56);
  }
  v22 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 8))(*v6, *v5);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v3);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000561E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 128);
  v1 = sub_100007D50(&qword_100159698);
  v2 = swift_dynamicCast(v1, v0 + 16, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_100056244()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 136));
  if (v0)
  {
    *(_QWORD *)(v2 + 128) = v0;
    v3 = sub_1000561E4;
  }
  else
  {
    v3 = sub_100055F8C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000562A8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp36AppleMusicSubscriptionStatusProvider___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100056300()
{
  return type metadata accessor for AppleMusicSubscriptionStatusProvider(0);
}

uint64_t type metadata accessor for AppleMusicSubscriptionStatusProvider(uint64_t a1)
{
  return sub_100025D84(a1, qword_10015AB08, (uint64_t)&nominal type descriptor for AppleMusicSubscriptionStatusProvider);
}

uint64_t sub_10005631C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100056398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SubscriptionUpdater(0);
  v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v3 = v2 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  v4 = type metadata accessor for MusicSubscription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater_lock;
  v6 = sub_100007D50(&qword_10015A0D8);
  v7 = swift_allocObject(v6, 20, 7);
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v2 + v5) = v7;
  ObservationRegistrar.init()();
  v8 = sub_100007D50(&qword_10015ACB0);
  v9 = swift_allocObject(v8, 28, 7);
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v0 + 16) = v9;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t sub_100056470@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B320);
  v8[0] = v3;
  v5 = sub_100007428(&qword_10015ACA8, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_10010B300);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess(v3 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription, v8, 0, 0);
  return sub_100056930(v6, a2);
}

uint64_t sub_100056520(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = sub_100007D50(&qword_10015AC78);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100056930(a1, (uint64_t)v6);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B320);
  v12 = v7;
  v13 = v6;
  v14 = v7;
  v9 = sub_100007428(&qword_10015ACA8, type metadata accessor for SubscriptionUpdater, (uint64_t)&unk_10010B300);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_100056978, v11, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath);
  return sub_1000567F0((uint64_t)v6);
}

uint64_t sub_100056614(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription;
  swift_beginAccess(a1 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription, v5, 33, 0);
  sub_1000568E8(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_10005667C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000567F0(v0 + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater__subscription);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater_lock));
  v1 = v0
     + OBJC_IVAR____TtC15ShazamEventsAppP33_1C7073CF0CC1C2E3B987F96E1178132819SubscriptionUpdater___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000566EC()
{
  return type metadata accessor for SubscriptionUpdater(0);
}

uint64_t type metadata accessor for SubscriptionUpdater(uint64_t a1)
{
  return sub_100025D84(a1, (uint64_t *)&unk_10015ABD8, (uint64_t)&nominal type descriptor for SubscriptionUpdater);
}

void sub_100056708(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10005679C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_10005679C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_10015ABE8)
  {
    type metadata accessor for MusicSubscription(255);
    v2 = type metadata accessor for Optional(a1);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_10015ABE8);
  }
}

uint64_t sub_1000567F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015AC78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100056830()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005685C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10015AC94);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10000FAC0;
  return sub_100055D9C(a1, v4, v5, v6);
}

uint64_t sub_1000568D0()
{
  uint64_t v0;

  return sub_100056614(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000568E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015AC78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015AC78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056978()
{
  return sub_1000568D0();
}

uint64_t sub_10005698C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a7;
  v26 = a9;
  v27 = a5;
  v24 = a1;
  v25 = a3;
  v13 = type metadata accessor for CoordinateSpace(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SizeModifier(0, a6, a8, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v24 - v21);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v16, a2, v13, v20);
  sub_10001584C(v24, (uint64_t)v16, v25, a4, a6, a8, v22);
  swift_retain(a4);
  View.modifier<A>(_:)(v22, v27, v18, v28);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
}

uint64_t sub_100056AB8(char a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  _BYTE v8[8];
  double v9;
  double v10;
  double v11;
  double v12;

  v8[0] = a1;
  v9 = a4;
  v10 = a5;
  v11 = a6;
  v12 = a7;
  return View.modifier<A>(_:)(v8, a2, &type metadata for PaddingModifier, a3);
}

uint64_t sub_100056AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t OpaqueTypeConformance2;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t WitnessTable;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  _QWORD v170[12];
  _QWORD v171[25];
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  void *v177;

  v155 = a8;
  v136 = a7;
  v137 = a6;
  v147 = a4;
  v148 = a5;
  v162 = a3;
  v160 = a1;
  v161 = a2;
  v163 = a9;
  v153 = a10;
  v165 = a11;
  v120 = a18;
  v121 = a14;
  v138 = a17;
  v125 = a16;
  v167 = a12;
  v18 = sub_100007D50(&qword_10015ACB8);
  __chkstk_darwin(v18);
  v157 = (uint64_t *)((char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v159 = sub_100007D50(&qword_10015ACC0);
  __chkstk_darwin(v159);
  v158 = (uint64_t)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = *(_QWORD *)(a13 - 8);
  v166 = a13;
  __chkstk_darwin(v21);
  v123 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ModifiedContent(0, v23, &type metadata for _PaddingLayout);
  v25 = *(_QWORD *)(v24 - 8);
  v126 = v24;
  v133 = v25;
  __chkstk_darwin(v24);
  v122 = (char *)&v119 - v26;
  v28 = type metadata accessor for ModifiedContent(0, v27, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v139 = *(_QWORD *)(v28 - 8);
  v124 = v28;
  __chkstk_darwin(v28);
  v168 = (char *)&v119 - v29;
  v30 = type metadata accessor for ModifiedContent(255, a12, &type metadata for _PaddingLayout);
  v132 = v30;
  v176 = a16;
  v177 = &protocol witness table for _PaddingLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v135 = type metadata accessor for _InsetViewModifier(255, v30, WitnessTable);
  v31 = type metadata accessor for ModifiedContent(0, v28, v135);
  v140 = *(_QWORD *)(v31 - 8);
  v128 = v31;
  __chkstk_darwin(v31);
  v169 = (char *)&v119 - v32;
  v33 = type metadata accessor for ModifiedContent(255, a14, &type metadata for _PaddingLayout);
  v134 = v33;
  v174 = a18;
  v175 = &protocol witness table for _PaddingLayout;
  v131 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  v143 = type metadata accessor for _InsetViewModifier(255, v33, v131);
  v34 = type metadata accessor for ModifiedContent(0, v31, v143);
  v149 = *(_QWORD *)(v34 - 8);
  v142 = v34;
  __chkstk_darwin(v34);
  v129 = (char *)&v119 - v35;
  v36 = sub_100007D00(&qword_10015ACC8);
  v37 = type metadata accessor for ModifiedContent(0, v34, v36);
  v38 = *(_QWORD *)(v37 - 8);
  v146 = v37;
  v151 = v38;
  __chkstk_darwin(v37);
  v141 = (char *)&v119 - v39;
  v154 = type metadata accessor for ModifiedContent(0, v40, &type metadata for _FlexFrameLayout);
  v156 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v145 = (char *)&v119 - v41;
  v42 = v165;
  v172 = v165;
  v173 = a15;
  v164 = a15;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v172, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v152 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v144 = (char *)&v119 - v43;
  v44 = sub_100007D50(&qword_10015ACD0);
  v45 = type metadata accessor for ToolbarPlacement(0);
  v46 = swift_allocObject(v44, ((*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v45 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) | 7);
  *(_OWORD *)(v46 + 16) = xmmword_100109020;
  static ToolbarPlacement.navigationBar.getter();
  View.toolbar(_:for:)(2, v46, v42, a15);
  v47 = swift_bridgeObjectRelease(v46);
  v48 = v123;
  v49 = v137(v47);
  v50 = static Edge.Set.vertical.getter(v49);
  v51 = v122;
  v52 = v166;
  v53 = v138;
  View.padding(_:_:)(v50, 0x4027000000000000, 0, v166, v138);
  v54 = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v48, v52);
  v55 = static Edge.Set.all.getter(v54);
  v56 = static SafeAreaRegions.all.getter(v55);
  v171[23] = v53;
  v171[24] = &protocol witness table for _PaddingLayout;
  v57 = v126;
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v126);
  View.ignoresSafeArea(_:edges:)(v56, v55, v57, v58);
  v59 = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v51, v57);
  v60 = v42;
  v171[2] = v42;
  v171[3] = v167;
  v171[4] = v52;
  v61 = v120;
  v62 = v121;
  v171[5] = v121;
  v63 = v164;
  v171[6] = v164;
  v64 = v125;
  v171[7] = v125;
  v171[8] = v53;
  v171[9] = v120;
  v171[10] = v147;
  v171[11] = v148;
  v65 = static VerticalAlignment.center.getter(v59);
  v171[21] = v58;
  v171[22] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v66 = v124;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v124);
  v68 = v65;
  v69 = v168;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)(0, v68, 0, 1, sub_100057A08, v171, v66, v132, v67, WitnessTable);
  v70 = (*(uint64_t (**)(char *, uint64_t))(v139 + 8))(v69, v66);
  v170[2] = v60;
  v170[3] = v167;
  v170[4] = v166;
  v170[5] = v62;
  v170[6] = v63;
  v170[7] = v64;
  v170[8] = v53;
  v170[9] = v61;
  v170[10] = v155;
  v170[11] = v153;
  v71 = static VerticalAlignment.center.getter(v70);
  v72 = swift_getWitnessTable(&protocol conformance descriptor for _InsetViewModifier<A>, v135);
  v171[19] = v67;
  v171[20] = v72;
  v73 = v128;
  v74 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v128);
  v75 = v129;
  v76 = v71;
  v77 = v169;
  View.safeAreaInset<A>(edge:alignment:spacing:content:)(1, v76, 0, 1, sub_100057A14, v170, v73, v134, v74, v131);
  v78 = (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v77, v73);
  v79 = static HorizontalAlignment.center.getter(v78);
  v80 = (uint64_t)v157;
  *v157 = v79;
  *(_QWORD *)(v80 + 8) = 0;
  *(_BYTE *)(v80 + 16) = 0;
  v81 = sub_100007D50(&qword_10015ACD8);
  v82 = sub_100057794(v160, v161, v162, (double *)(v80 + *(int *)(v81 + 44)));
  v83 = static Edge.Set.all.getter(v82);
  LOBYTE(v77) = v83;
  v84 = static SafeAreaRegions.all.getter(v83);
  v85 = v158;
  sub_100007E78(v80, v158, &qword_10015ACB8);
  v86 = v159;
  v87 = v85 + *(int *)(v159 + 36);
  *(_QWORD *)v87 = v84;
  *(_BYTE *)(v87 + 8) = (_BYTE)v77;
  v88 = sub_100007F38(v80, &qword_10015ACB8);
  v89 = static Alignment.center.getter(v88);
  v91 = v90;
  v92 = swift_getWitnessTable(&protocol conformance descriptor for _InsetViewModifier<A>, v143);
  v171[17] = v74;
  v171[18] = v92;
  v93 = v142;
  v94 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v142);
  v95 = sub_100057A58();
  v96 = v141;
  View.background<A>(_:alignment:)(v85, v89, v91, v93, v86, v94, v95);
  sub_100007F38(v85, &qword_10015ACC0);
  v97 = (*(uint64_t (**)(char *, uint64_t))(v149 + 8))(v75, v93);
  v98 = static Alignment.top.getter(v97);
  v100 = v99;
  v101 = sub_10000F4E0(&qword_10015ACF0, &qword_10015ACC8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v171[15] = v94;
  v171[16] = v101;
  v102 = v146;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v146);
  v118 = 0;
  v117 = 1;
  v104 = v145;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0, 1, 0, 1, 0x7FF0000000000000, 0, 0, 1, 0, v117, 0x7FF0000000000000, v118, v98, v100, v102, v103);
  v105 = (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v96, v102);
  v106 = static Alignment.center.getter(v105);
  v108 = v107;
  v172 = v165;
  v173 = v164;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v172, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v171[13] = v103;
  v171[14] = &protocol witness table for _FlexFrameLayout;
  v110 = v154;
  v111 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v154);
  v112 = v106;
  v113 = v108;
  v114 = OpaqueTypeMetadata2;
  v115 = v144;
  View.overlay<A>(_:alignment:)(v104, v112, v113, OpaqueTypeMetadata2, v110, OpaqueTypeConformance2, v111);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v104, v110);
  return (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v115, v114);
}

double sub_1000573F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  _QWORD v19[3];

  v12 = nullsub_1(a1, a2, a3, a5, a7);
  v14 = v13;
  v19[0] = v12;
  v19[1] = v15;
  v19[2] = v13;
  v17 = type metadata accessor for SafeAreaModifier(0, a5, a7, v16);
  swift_retain(a3);
  View.modifier<A>(_:)(v19, a4, v17, a6);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_100057494@<X0>(uint64_t (*a1)(__n128)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v24 = a4;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v23 - v17;
  v19 = a1(v16);
  v20 = static Edge.Set.vertical.getter(v19);
  View.padding(_:_:)(v20, 0x4027000000000000, 0, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v25 = a3;
  v26 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_10005135C((uint64_t)v14, v11, (uint64_t)v18);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v14, v11);
  sub_1000424BC((uint64_t)v18, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v11);
}

uint64_t sub_100057614@<X0>(uint64_t (*a1)(__n128)@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v24 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent(0, v10, &type metadata for _PaddingLayout);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v23 - v17;
  v19 = a1(v16);
  v20 = static Edge.Set.vertical.getter(v19);
  View.padding(_:_:)(v20, 0x4027000000000000, 0, a2, a5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v25 = a5;
  v26 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_10005135C((uint64_t)v14, v11, (uint64_t)v18);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v14, v11);
  sub_1000424BC((uint64_t)v18, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v11);
}

uint64_t sub_100057794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v30 = a4;
  v29 = type metadata accessor for Divider(0);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100007D50(&qword_10015ACF8);
  __chkstk_darwin(v28);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - v16;
  v31 = a1;
  v32 = a2;
  v18 = a2;
  v33 = a3;
  v19 = sub_100007D50(&qword_10015CE00);
  v20 = Binding.wrappedValue.getter(v19);
  v21 = 0.0;
  if (v34)
    v22 = 1.0;
  else
    v22 = 0.0;
  Divider.init()(v20);
  v31 = a1;
  v32 = v18;
  v33 = a3;
  Binding.wrappedValue.getter(v19);
  if (v34)
    v21 = 1.0;
  v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v9, v29);
  *(double *)&v14[*(int *)(v28 + 36)] = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  sub_100057ADC((uint64_t)v14, (uint64_t)v17);
  sub_100007E78((uint64_t)v17, (uint64_t)v11, &qword_10015ACF8);
  v24 = v30;
  *(_QWORD *)v30 = 8;
  v24[1] = v22;
  v25 = v24;
  v26 = sub_100007D50(&qword_10015AD00);
  sub_100007E78((uint64_t)v11, (uint64_t)v25 + *(int *)(v26 + 48), &qword_10015ACF8);
  sub_100007F38((uint64_t)v17, &qword_10015ACF8);
  return sub_100007F38((uint64_t)v11, &qword_10015ACF8);
}

void sub_1000579A8()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v0, "sendAction:to:from:forEvent:", "resignFirstResponder", 0, 0, 0);

}

uint64_t sub_100057A08()
{
  return sub_100057A20((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100057494);
}

uint64_t sub_100057A14()
{
  return sub_100057A20((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100057614);
}

uint64_t sub_100057A20(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

unint64_t sub_100057A58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015ACE0;
  if (!qword_10015ACE0)
  {
    v1 = sub_100007D00(&qword_10015ACC0);
    sub_10000F4E0(&qword_10015ACE8, &qword_10015ACB8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015ACE0);
  }
  return result;
}

uint64_t sub_100057ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015ACF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057B24()
{
  uint64_t v0;

  v0 = type metadata accessor for ArtistController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_100072574();
}

uint64_t sub_100057B58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  __n128 v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (**v111)();
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v152;
  char *v153;
  _OWORD *v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t (**v192)();
  _OWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t (**v199)();
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  void (*v213)(uint64_t, char *, uint64_t);
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;

  v216 = a1;
  v182 = type metadata accessor for TaskPriority(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v172 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100007D50(&qword_100158EB8);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v172 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100007D50(&qword_10015AD08);
  __chkstk_darwin(v197);
  v176 = (char *)&v172 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v183 = (uint64_t)&v172 - v6;
  v195 = sub_100007D50(&qword_10015AD10);
  __chkstk_darwin(v195);
  v196 = (uint64_t)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_100007D50(&qword_10015AD18);
  __chkstk_darwin(v215);
  v198 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for ErrorView(0);
  __chkstk_darwin(v184);
  v185 = (uint64_t *)((char *)&v172 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v187 = (uint64_t)&v172 - v11;
  v194 = sub_100007D50(&qword_10015AD20);
  __chkstk_darwin(v194);
  v186 = (uint64_t)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v188 = (uint64_t)&v172 - v14;
  v207 = sub_100007D50(&qword_10015AD28);
  __chkstk_darwin(v207);
  v199 = (uint64_t (**)())((char *)&v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v200 = (uint64_t)&v172 - v17;
  v217 = sub_100007D50(&qword_10015AD30);
  __chkstk_darwin(v217);
  v219 = (uint64_t)&v172 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100007D50(&qword_10015AD38);
  __chkstk_darwin(v204);
  v206 = (uint64_t)&v172 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_100007D50(&qword_10015AD40);
  __chkstk_darwin(v218);
  v208 = (char *)&v172 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100007D50(&qword_10015AD48);
  __chkstk_darwin(v205);
  v192 = (uint64_t (**)())((char *)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v189 = (uint64_t)&v172 - v23;
  v24 = sub_100007D50(&qword_10015AD50);
  __chkstk_darwin(v24);
  v203 = (char *)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for Artist(0);
  v201 = *(_QWORD *)(v202 - 8);
  v26 = *(_QWORD *)(v201 + 64);
  __chkstk_darwin(v202);
  v191 = (char *)&v172 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v211 = (char *)&v172 - v28;
  v29 = sub_100007D50(&qword_10015AD58);
  __chkstk_darwin(v29);
  v31 = (char *)&v172 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100007D50(&qword_10015AD60);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_QWORD *)(v33 + 64);
  __chkstk_darwin(v32);
  v190 = (char *)&v172 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v37 = (char *)&v172 - v36;
  v39 = *(_QWORD *)(v1 + 16);
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v1 + 24);
  v193 = (_OWORD *)v1;
  v40 = *(unsigned __int8 *)(v1 + 32);
  v41 = type metadata accessor for ArtistController(0);
  v42 = sub_100007428(&qword_10015AD68, type metadata accessor for ArtistController, (uint64_t)&unk_10010D014);
  v212 = v39;
  v213 = v38;
  LODWORD(v214) = v40;
  v209 = v42;
  v210 = v41;
  v43 = StateObject.wrappedValue.getter(v39, v38, v40, v41, v42);
  KeyPath = swift_getKeyPath(&unk_10010B3B8);
  v45 = swift_getKeyPath(&unk_10010B3E0);
  static Published.subscript.getter(v43, KeyPath, v45);
  swift_release(v43);
  swift_release(KeyPath);
  v46 = swift_release(v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v33 + 48))(v31, 1, v32, v46) == 1)
  {
    v47 = &qword_10015AD58;
    v48 = (uint64_t)v31;
  }
  else
  {
    v174 = v34;
    v49 = v203;
    v175 = v26;
    v50 = v201;
    v51 = v202;
    v52 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v52(v37, v31, v32);
    v53 = sub_10000F4E0(&qword_10015ADB8, &qword_10015AD60, (uint64_t)&unk_10010CD10);
    v54 = v37;
    v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 40))(v32, v53);
    v56 = v55;
    if (*(_QWORD *)(v55 + 16))
    {
      v57 = (uint64_t)v49;
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v49, v55 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80)), v51);
      v58 = 0;
    }
    else
    {
      v58 = 1;
      v57 = (uint64_t)v49;
    }
    v59 = v211;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v57, v58, 1, v51);
    swift_bridgeObjectRelease(v56);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v57, 1, v51) != 1)
    {
      v120 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
      v120(v59, v57, v51);
      v121 = v59;
      v122 = v191;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v191, v121, v51);
      v123 = v190;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v190, v54, v32);
      v124 = *(unsigned __int8 *)(v50 + 80);
      v213 = (void (*)(uint64_t, char *, uint64_t))v52;
      v125 = v32;
      v173 = v33;
      v214 = v54;
      v126 = (v124 + 16) & ~v124;
      v127 = *(unsigned __int8 *)(v33 + 80);
      v128 = (v175 + v127 + v126) & ~v127;
      v129 = swift_allocObject(&unk_10014A868, v128 + v174, v124 | v127 | 7);
      v120((char *)(v129 + v126), (uint64_t)v122, v51);
      v130 = v123;
      v131 = v125;
      v213(v129 + v128, v130, v125);
      v132 = (uint64_t)v192;
      *v192 = sub_10005991C;
      *(_QWORD *)(v132 + 8) = v129;
      *(_BYTE *)(v132 + 16) = 0;
      v133 = sub_100007D50(&qword_100159A18);
      v134 = swift_allocObject(v133, 17, 7);
      *(_BYTE *)(v134 + 16) = 0;
      v135 = sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
      *(_QWORD *)(v132 + 24) = ObservedObject.init(wrappedValue:)(v134, v133, v135);
      *(_QWORD *)(v132 + 32) = v136;
      v137 = type metadata accessor for RemoteViewConfiguration();
      v138 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
      *(_QWORD *)(v132 + 40) = EnvironmentObject.init()(v137, v138);
      *(_QWORD *)(v132 + 48) = v139;
      v140 = v205;
      v141 = (_QWORD *)(v132 + *(int *)(v205 + 60));
      *v141 = swift_getKeyPath(&unk_10010B490);
      v142 = sub_100007D50(qword_100158AC8);
      swift_storeEnumTagMultiPayload(v141, v142, 0);
      v143 = v189;
      sub_100018EB4(v132, v189, &qword_10015AD48);
      v144 = v206;
      sub_100007E78(v143, v206, &qword_10015AD48);
      swift_storeEnumTagMultiPayload(v144, v204, 0);
      v145 = sub_10000F4E0(&qword_10015ADA0, &qword_10015AD48, (uint64_t)&unk_100111828);
      v146 = sub_10000F4E0(&qword_10015ADA8, &qword_10015AD28, (uint64_t)&unk_100111828);
      v147 = (uint64_t)v208;
      _ConditionalContent<>.init(storage:)(v144, v140, v207, v145, v146);
      v148 = v219;
      sub_100007E78(v147, v219, &qword_10015AD40);
      swift_storeEnumTagMultiPayload(v148, v217, 0);
      v149 = sub_100059708();
      v150 = sub_1000597AC();
      _ConditionalContent<>.init(storage:)(v148, v218, v215, v149, v150);
      sub_100007F38(v147, &qword_10015AD40);
      sub_100007F38(v143, &qword_10015AD48);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v211, v51);
      return (*(uint64_t (**)(char *, uint64_t))(v173 + 8))(v214, v131);
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v54, v32);
    v47 = &qword_10015AD50;
    v48 = v57;
  }
  sub_100007F38(v48, v47);
  v60 = v215;
  v61 = v214;
  v62 = v212;
  v63 = (uint64_t)v213;
  v65 = v209;
  v64 = v210;
  v66 = StateObject.wrappedValue.getter(v212, v213, v214, v210, v209);
  v67 = swift_getKeyPath(&unk_10010B400);
  v68 = swift_getKeyPath(&unk_10010B428);
  static Published.subscript.getter(v66, v67, v68);
  swift_release(v66);
  swift_release(v67);
  swift_release(v68);
  v69 = v221;
  if ((_QWORD)v221)
  {
    v70 = (uint64_t)v199;
    *v199 = sub_10005985C;
    *(_QWORD *)(v70 + 8) = v69;
    *(_BYTE *)(v70 + 16) = 0;
    v71 = sub_100007D50(&qword_100159A18);
    v72 = swift_allocObject(v71, 17, 7);
    *(_BYTE *)(v72 + 16) = 0;
    v73 = sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    swift_retain(v69);
    *(_QWORD *)(v70 + 24) = ObservedObject.init(wrappedValue:)(v72, v71, v73);
    *(_QWORD *)(v70 + 32) = v74;
    v75 = type metadata accessor for RemoteViewConfiguration();
    v76 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    *(_QWORD *)(v70 + 40) = EnvironmentObject.init()(v75, v76);
    *(_QWORD *)(v70 + 48) = v77;
    v78 = v207;
    v79 = (_QWORD *)(v70 + *(int *)(v207 + 60));
    *v79 = swift_getKeyPath(&unk_10010B490);
    v80 = sub_100007D50(qword_100158AC8);
    swift_storeEnumTagMultiPayload(v79, v80, 0);
    v81 = &qword_10015AD28;
    v82 = v200;
    sub_100018EB4(v70, v200, &qword_10015AD28);
    v83 = v206;
    sub_100007E78(v82, v206, &qword_10015AD28);
    swift_storeEnumTagMultiPayload(v83, v204, 1);
    v84 = sub_10000F4E0(&qword_10015ADA0, &qword_10015AD48, (uint64_t)&unk_100111828);
    v85 = sub_10000F4E0(&qword_10015ADA8, &qword_10015AD28, (uint64_t)&unk_100111828);
    v86 = (uint64_t)v208;
    _ConditionalContent<>.init(storage:)(v83, v205, v78, v84, v85);
    v87 = v219;
    sub_100007E78(v86, v219, &qword_10015AD40);
    swift_storeEnumTagMultiPayload(v87, v217, 0);
    v88 = sub_100059708();
    v89 = sub_1000597AC();
    _ConditionalContent<>.init(storage:)(v87, v218, v60, v88, v89);
    swift_release(v69);
    sub_100007F38(v86, &qword_10015AD40);
    v90 = v82;
  }
  else
  {
    v91 = StateObject.wrappedValue.getter(v62, v63, v61, v64, v65);
    v92 = swift_getKeyPath(&unk_10010B448);
    v93 = swift_getKeyPath(&unk_10010B470);
    static Published.subscript.getter(v91, v92, v93);
    swift_release(v91);
    swift_release(v92);
    swift_release(v93);
    v94 = v221;
    v95 = swift_errorRelease(v221);
    if (v94)
    {
      v96 = swift_getKeyPath(&unk_10010B490);
      v97 = v185;
      *v185 = v96;
      v98 = sub_100007D50(qword_100158AC8);
      swift_storeEnumTagMultiPayload(v97, v98, 0);
      v99 = (uint64_t *)((char *)v97 + *(int *)(v184 + 20));
      v100 = type metadata accessor for RemoteViewConfiguration();
      v101 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
      *v99 = EnvironmentObject.init()(v100, v101);
      v99[1] = v102;
      v103 = (uint64_t)v97;
      v104 = v187;
      sub_1000597D4(v103, v187);
      v105 = v193;
      v106 = *v193;
      v220 = *(_OWORD *)((char *)v193 + 40);
      v221 = v106;
      v107 = swift_allocObject(&unk_10014A840, 72, 7);
      v108 = v105[1];
      *(_OWORD *)(v107 + 16) = *v105;
      *(_OWORD *)(v107 + 32) = v108;
      *(_OWORD *)(v107 + 48) = v105[2];
      *(_QWORD *)(v107 + 64) = *((_QWORD *)v105 + 6);
      v109 = v186;
      sub_10001BFB8(v104, v186, type metadata accessor for ErrorView);
      v110 = v194;
      v111 = (uint64_t (**)())(v109 + *(int *)(v194 + 36));
      *v111 = sub_100059854;
      v111[1] = (uint64_t (*)())v107;
      v111[2] = 0;
      v111[3] = 0;
      sub_100027618((uint64_t)&v221);
      sub_10002BE30(v62, v63);
      sub_10005120C(&v220);
      sub_10001E24C(v104, type metadata accessor for ErrorView);
      v81 = &qword_10015AD20;
      v112 = v188;
      sub_100018EB4(v109, v188, &qword_10015AD20);
      v113 = v196;
      sub_100007E78(v112, v196, &qword_10015AD20);
      swift_storeEnumTagMultiPayload(v113, v195, 0);
      v114 = sub_1000595E8();
      v115 = sub_10005966C();
      v116 = (uint64_t)v198;
      v117 = v113;
      v118 = v110;
      v119 = v197;
    }
    else
    {
      v152 = v62;
      v153 = v177;
      ProgressView<>.init<>()(v95);
      v154 = v193;
      v155 = *v193;
      v220 = *(_OWORD *)((char *)v193 + 40);
      v221 = v155;
      v156 = swift_allocObject(&unk_10014A818, 72, 7);
      v157 = v154[1];
      *(_OWORD *)(v156 + 16) = *v154;
      *(_OWORD *)(v156 + 32) = v157;
      *(_OWORD *)(v156 + 48) = v154[2];
      *(_QWORD *)(v156 + 64) = *((_QWORD *)v154 + 6);
      sub_10002BE30(v152, v63);
      sub_100027618((uint64_t)&v221);
      v158 = sub_10005120C(&v220);
      v159 = v180;
      static TaskPriority.userInitiated.getter(v158);
      v160 = v197;
      v161 = (uint64_t)v176;
      v162 = &v176[*(int *)(v197 + 36)];
      v163 = type metadata accessor for _TaskModifier(0);
      v164 = v181;
      v165 = v182;
      (*(void (**)(char *, char *, uint64_t))(v181 + 16))(&v162[*(int *)(v163 + 20)], v159, v182);
      *(_QWORD *)v162 = &unk_10015AD78;
      *((_QWORD *)v162 + 1) = v156;
      v166 = v178;
      v167 = v179;
      (*(void (**)(uint64_t, char *, uint64_t))(v178 + 16))(v161, v153, v179);
      (*(void (**)(char *, uint64_t))(v164 + 8))(v159, v165);
      (*(void (**)(char *, uint64_t))(v166 + 8))(v153, v167);
      v81 = &qword_10015AD08;
      v112 = v183;
      sub_100018EB4(v161, v183, &qword_10015AD08);
      v168 = v196;
      sub_100007E78(v112, v196, &qword_10015AD08);
      swift_storeEnumTagMultiPayload(v168, v195, 1);
      v114 = sub_1000595E8();
      v115 = sub_10005966C();
      v116 = (uint64_t)v198;
      v117 = v168;
      v118 = v194;
      v119 = v160;
    }
    _ConditionalContent<>.init(storage:)(v117, v118, v119, v114, v115);
    v169 = v219;
    sub_100007E78(v116, v219, &qword_10015AD18);
    swift_storeEnumTagMultiPayload(v169, v217, 1);
    v170 = sub_100059708();
    v171 = sub_1000597AC();
    _ConditionalContent<>.init(storage:)(v169, v218, v60, v170, v171);
    sub_100007F38(v116, &qword_10015AD18);
    v90 = v112;
  }
  return sub_100007F38(v90, v81);
}

uint64_t sub_100058C50(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for Artist(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  v7 = sub_10000F4E0(&qword_10015ADB8, &qword_10015AD60, (uint64_t)&unk_10010CD10);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  v9 = sub_100007D50(&qword_10015AD60);
  v10 = v8(v9, v7);
  v11 = sub_100007D50(&qword_10015ADC0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  return sub_10005A0F0((uint64_t)v5, v10);
}

uint64_t sub_100058D30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = type metadata accessor for ArtistController(0);
  v6 = sub_100007428(&qword_10015AD68, type metadata accessor for ArtistController, (uint64_t)&unk_10010D014);
  v7 = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = v7;
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    swift_retain(v8);
    swift_bridgeObjectRetain(v10);
    sub_10008AB1C(v11, v10, 3, v8);
    swift_release(v9);
    swift_release(v8);
    return swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for RemoteViewConfiguration();
    v15 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

uint64_t sub_100058E30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v4;
  v1[5] = v5;
  return swift_task_switch(sub_100058E9C, v4, v5);
}

uint64_t sub_100058E9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[2];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(unsigned __int8 *)(v1 + 32);
  v5 = type metadata accessor for ArtistController(0);
  v6 = sub_100007428(&qword_10015AD68, type metadata accessor for ArtistController, (uint64_t)&unk_10010D014);
  v0[6] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_10015C12C);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_100058F50;
  return sub_100071988(v7, v8);
}

uint64_t sub_100058F50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release(v2);
  return swift_task_switch(sub_100058FA4, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100058FA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058FD8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;

  v1 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010B3B8);
  v3 = swift_getKeyPath(&unk_10010B3E0);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(KeyPath);
  return swift_release(v3);
}

uint64_t sub_100059040(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100007D50(&qword_10015AD58);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - v8;
  sub_100007E78(a1, (uint64_t)&v14 - v8, &qword_10015AD58);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B3B8);
  v12 = swift_getKeyPath(&unk_10010B3E0);
  sub_100007E78((uint64_t)v9, (uint64_t)v6, &qword_10015AD58);
  swift_retain(v10);
  static Published.subscript.setter(v6, v10, KeyPath, v12);
  return sub_100007F38((uint64_t)v9, &qword_10015AD58);
}

uint64_t sub_100059138@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000591D8(a1, (uint64_t)&unk_10010B448, (uint64_t)&unk_10010B470, a2);
}

uint64_t sub_10005914C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B448);
  v5 = swift_getKeyPath(&unk_10010B470);
  v7 = v2;
  swift_errorRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_1000591C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000591D8(a1, (uint64_t)&unk_10010B400, (uint64_t)&unk_10010B428, a2);
}

uint64_t sub_1000591D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_100059250(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010B400);
  v5 = swift_getKeyPath(&unk_10010B428);
  v7 = v2;
  swift_retain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

double destroy for ArtistEventContentView(_QWORD *a1)
{
  double result;

  swift_bridgeObjectRelease(a1[1]);
  sub_1000189BC(a1[2], a1[3]);
  *(_QWORD *)&result = swift_release(a1[5]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  sub_10002BE30(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10002BE30(v6, v7);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000189BC(v9, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_retain(v12);
  swift_release(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ArtistEventContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000189BC(v7, v8);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArtistEventContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArtistEventContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArtistEventContentView()
{
  return &type metadata for ArtistEventContentView;
}

uint64_t sub_100059530(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117288, 1);
}

uint64_t sub_100059548@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000591D8(a1, (uint64_t)&unk_10010B400, (uint64_t)&unk_10010B428, a2);
}

uint64_t sub_100059570@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000591D8(a1, (uint64_t)&unk_10010B448, (uint64_t)&unk_10010B470, a2);
}

uint64_t sub_10005959C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10015AD74);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10000FAC0;
  return sub_100058E30(v0 + 16);
}

unint64_t sub_1000595E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AD80;
  if (!qword_10015AD80)
  {
    v1 = sub_100007D00(&qword_10015AD20);
    sub_100007428(&qword_10015AD88, type metadata accessor for ErrorView, (uint64_t)&unk_100112318);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AD80);
  }
  return result;
}

unint64_t sub_10005966C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AD90;
  if (!qword_10015AD90)
  {
    v1 = sub_100007D00(&qword_10015AD08);
    sub_10000F4E0(&qword_100158EC0, &qword_100158EB8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AD90);
  }
  return result;
}

unint64_t sub_100059708()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AD98;
  if (!qword_10015AD98)
  {
    v1 = sub_100007D00(&qword_10015AD40);
    sub_10000F4E0(&qword_10015ADA0, &qword_10015AD48, (uint64_t)&unk_100111828);
    sub_10000F4E0(&qword_10015ADA8, &qword_10015AD28, (uint64_t)&unk_100111828);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AD98);
  }
  return result;
}

uint64_t sub_1000597AC()
{
  return sub_10001881C(&qword_10015ADB0, &qword_10015AD18, (void (*)(void))sub_1000595E8, (void (*)(void))sub_10005966C);
}

uint64_t sub_1000597D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ErrorView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005981C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  sub_1000189BC(v0[4], v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100059854()
{
  uint64_t v0;

  return sub_100058D30(v0 + 16);
}

uint64_t sub_10005985C()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100059864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Artist(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_100007D50(&qword_10015AD60);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10005991C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for Artist(0);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  sub_100007D50(&qword_10015AD60);
  return sub_100058C50(v0 + v2);
}

uint64_t sub_100059980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  _QWORD v94[3];

  v86 = a2;
  v87 = (uint64_t *)a1;
  v3 = sub_100007D50(&qword_10015ADC8);
  __chkstk_darwin(v3);
  v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100007D50(&qword_10015A6A0);
  v6 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_100159248);
  v90 = *(_QWORD *)(v9 - 8);
  v91 = v9;
  __chkstk_darwin(v9);
  v89 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015ADD0);
  v84 = *(_QWORD *)(v11 - 8);
  v85 = v11;
  __chkstk_darwin(v11);
  v88 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100007D50(&qword_10015ADD8);
  v13 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015ADE0);
  __chkstk_darwin(v16);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v80 - v21;
  v23 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  v82 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)&v80 - v21, 1, 1, v92, v20);
  sub_100007E78((uint64_t)v22, (uint64_t)v18, &qword_10015ADE0);
  Published.init(initialValue:)(v18, v16);
  sub_100007F38((uint64_t)v22, &qword_10015ADE0);
  v24 = v15;
  v25 = v86;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v23, v24, v83);
  v26 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 152);
  v94[0] = 0;
  v94[1] = 0;
  v27 = v88;
  Published.init(initialValue:)(v94, &type metadata for Tab);
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v26, v27, v85);
  v28 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  LOBYTE(v94[0]) = 0;
  v29 = v89;
  Published.init(initialValue:)(v94, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v28, v29, v91);
  v30 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(v2 + v30) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationManager(0)), "init");
  v31 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 184);
  *(_QWORD *)v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100113CE0);
  *(_QWORD *)(v31 + 8) = v32;
  *(_BYTE *)(v31 + 16) = v33 & 1;
  *(_QWORD *)(v31 + 24) = v34;
  v35 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 192);
  *(_QWORD *)v35 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100113D10);
  *(_QWORD *)(v35 + 8) = v36;
  *(_BYTE *)(v35 + 16) = v37 & 1;
  *(_QWORD *)(v35 + 24) = v38;
  v39 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 200);
  *(_QWORD *)v39 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100113D40);
  *(_QWORD *)(v39 + 8) = v40;
  *(_BYTE *)(v39 + 16) = v41 & 1;
  *(_QWORD *)(v39 + 24) = v42;
  sub_10001BFB8((uint64_t)v87, v2 + *(_QWORD *)(*(_QWORD *)v2 + 112), type metadata accessor for AppleMusicFetcher.MusicArtist);
  v43 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v83 = v2;
  *(_QWORD *)(v2 + v43) = v25;
  v44 = *(_QWORD *)(v25 + 16);
  if (!v44)
  {
    swift_bridgeObjectRetain(v25);
    v49 = (char *)&_swiftEmptyArrayStorage;
    v64 = v83;
    v65 = v87;
    goto LABEL_18;
  }
  v81 = v26;
  v45 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
  v90 = *(_QWORD *)(v45 + 216);
  v91 = v45;
  v46 = v82;
  v47 = v25 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
  v48 = *(char **)(v82 + 72);
  v88 = *(char **)(v82 + 16);
  v89 = v48;
  swift_bridgeObjectRetain_n(v25, 2);
  v49 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    v50 = v92;
    ((void (*)(char *, uint64_t, uint64_t))v88)(v8, v47, v92);
    v51 = ((uint64_t (*)(uint64_t, uint64_t))v90)(v50, v91);
    v52 = *(_QWORD *)(v51 + 16);
    v53 = type metadata accessor for Venue(0);
    v54 = *(_QWORD *)(v53 - 8);
    if (v52)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v5, v51 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80)), v53);
      v55 = 0;
    }
    else
    {
      v55 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v5, v55, 1, v53);
    swift_bridgeObjectRelease(v51);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v5, 1, v53) == 1)
    {
      sub_100007F38((uint64_t)v5, &qword_10015ADC8);
LABEL_4:
      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v92);
      goto LABEL_5;
    }
    v56 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v5, v53);
    if (!v56)
      goto LABEL_4;
    v57 = objc_msgSend(v56, "country");

    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v92);
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      v49 = sub_100089E20(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
    v62 = *((_QWORD *)v49 + 2);
    v61 = *((_QWORD *)v49 + 3);
    if (v62 >= v61 >> 1)
      v49 = sub_100089E20((char *)(v61 > 1), v62 + 1, 1, v49);
    *((_QWORD *)v49 + 2) = v62 + 1;
    v63 = &v49[16 * v62];
    *((_QWORD *)v63 + 4) = v58;
    *((_QWORD *)v63 + 5) = v60;
LABEL_5:
    v47 += (uint64_t)v89;
    --v44;
  }
  while (v44);
  v25 = v86;
  swift_bridgeObjectRelease(v86);
  v64 = v83;
  v65 = v87;
  v26 = v81;
LABEL_18:
  v66 = sub_10005C134((uint64_t)v49);
  swift_bridgeObjectRelease(v49);
  *(_QWORD *)(v64 + *(_QWORD *)(*(_QWORD *)v64 + 128)) = v66;
  if (*(_QWORD *)(v66 + 16) == 1)
  {
    v67 = sub_10008B380(v66);
    if (v68)
    {
      v69 = v67;
      v70 = v68;
      swift_beginAccess(v26, v94, 33, 0);
      (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v26, v85);
      v93[0] = v69;
      v93[1] = v70;
      Published.init(initialValue:)(v93, &type metadata for Tab);
      swift_endAccess(v94);
    }
  }
  swift_beginAccess(v64 + *(_QWORD *)(*(_QWORD *)v64 + 144), v94, 33, 0);
  v93[0] = v25;
  v71 = sub_100007D50(&qword_10015ADE8);
  Published.init(initialValue:)(v93, v71);
  swift_endAccess(v94);
  v72 = *v65;
  v73 = v65[1];
  v74 = type metadata accessor for PromotionalAssetsController(0);
  v75 = swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v76 = v75 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  v77 = type metadata accessor for ArtistPromotionalAssets(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v76, 1, 1, v77);
  *(_QWORD *)(v75 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v75 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  v78 = swift_bridgeObjectRetain(v73);
  ObservationRegistrar.init()(v78);
  *(_QWORD *)(v75 + 16) = v72;
  *(_QWORD *)(v75 + 24) = v73;
  *(_BYTE *)(v75 + 32) = 1;
  sub_10001E24C((uint64_t)v65, type metadata accessor for AppleMusicFetcher.MusicArtist);
  *(_QWORD *)(v64 + *(_QWORD *)(*(_QWORD *)v64 + 168)) = v75;
  return v64;
}

uint64_t sub_10005A0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  _QWORD v100[4];

  v92 = a2;
  v93 = a1;
  v3 = sub_100007D50(&qword_10015ADC8);
  __chkstk_darwin(v3);
  v5 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100007D50(&qword_10015A6A0);
  v6 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v8 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_100159248);
  v96 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  __chkstk_darwin(v9);
  v95 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015ADD0);
  v90 = *(_QWORD *)(v11 - 8);
  v91 = v11;
  __chkstk_darwin(v11);
  v94 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100007D50(&qword_10015ADD8);
  v13 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015ADE0);
  __chkstk_darwin(v16);
  v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v85 - v21;
  v23 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 136);
  v87 = v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))((char *)&v85 - v21, 1, 1, v98, v20);
  sub_100007E78((uint64_t)v22, (uint64_t)v18, &qword_10015ADE0);
  Published.init(initialValue:)(v18, v16);
  sub_100007F38((uint64_t)v22, &qword_10015ADE0);
  v24 = v15;
  v25 = v92;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v23, v24, v89);
  v26 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 152);
  v100[0] = 0;
  v100[1] = 0;
  v27 = v94;
  Published.init(initialValue:)(v100, &type metadata for Tab);
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v26, v27, v91);
  v28 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  LOBYTE(v100[0]) = 0;
  v29 = v95;
  Published.init(initialValue:)(v100, &type metadata for Bool);
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v28, v29, v97);
  v30 = *(_QWORD *)(*(_QWORD *)v2 + 176);
  *(_QWORD *)(v2 + v30) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationManager(0)), "init");
  v31 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 184);
  *(_QWORD *)v31 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100113CE0);
  *(_QWORD *)(v31 + 8) = v32;
  *(_BYTE *)(v31 + 16) = v33 & 1;
  *(_QWORD *)(v31 + 24) = v34;
  v35 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 192);
  *(_QWORD *)v35 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100113D10);
  *(_QWORD *)(v35 + 8) = v36;
  *(_BYTE *)(v35 + 16) = v37 & 1;
  *(_QWORD *)(v35 + 24) = v38;
  v39 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 200);
  *(_QWORD *)v39 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100113D40);
  *(_QWORD *)(v39 + 8) = v40;
  *(_BYTE *)(v39 + 16) = v41 & 1;
  *(_QWORD *)(v39 + 24) = v42;
  v43 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 112);
  v44 = type metadata accessor for Artist(0);
  v45 = *(_QWORD *)(v44 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v43, v93, v44);
  v46 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  v88 = v2;
  v89 = v45;
  *(_QWORD *)(v2 + v46) = v25;
  v47 = *(_QWORD *)(v25 + 16);
  if (!v47)
  {
    swift_bridgeObjectRetain(v25);
    v52 = (char *)&_swiftEmptyArrayStorage;
    v67 = v88;
    v68 = v93;
    goto LABEL_18;
  }
  v85 = v44;
  v86 = v26;
  v48 = sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
  v96 = *(_QWORD *)(v48 + 216);
  v97 = v48;
  v49 = v87;
  v50 = v25 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
  v51 = *(char **)(v87 + 72);
  v94 = *(char **)(v87 + 16);
  v95 = v51;
  swift_bridgeObjectRetain_n(v25, 2);
  v52 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    v53 = v98;
    ((void (*)(char *, uint64_t, uint64_t))v94)(v8, v50, v98);
    v54 = ((uint64_t (*)(uint64_t, uint64_t))v96)(v53, v97);
    v55 = *(_QWORD *)(v54 + 16);
    v56 = type metadata accessor for Venue(0);
    v57 = *(_QWORD *)(v56 - 8);
    if (v55)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v57 + 16))(v5, v54 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80)), v56);
      v58 = 0;
    }
    else
    {
      v58 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v5, v58, 1, v56);
    swift_bridgeObjectRelease(v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v5, 1, v56) == 1)
    {
      sub_100007F38((uint64_t)v5, &qword_10015ADC8);
LABEL_4:
      (*(void (**)(char *, uint64_t))(v49 + 8))(v8, v98);
      goto LABEL_5;
    }
    v59 = (void *)Venue.address.getter();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v5, v56);
    if (!v59)
      goto LABEL_4;
    v60 = objc_msgSend(v59, "country");

    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v63 = v62;

    (*(void (**)(char *, uint64_t))(v49 + 8))(v8, v98);
    if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      v52 = sub_100089E20(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
    v65 = *((_QWORD *)v52 + 2);
    v64 = *((_QWORD *)v52 + 3);
    if (v65 >= v64 >> 1)
      v52 = sub_100089E20((char *)(v64 > 1), v65 + 1, 1, v52);
    *((_QWORD *)v52 + 2) = v65 + 1;
    v66 = &v52[16 * v65];
    *((_QWORD *)v66 + 4) = v61;
    *((_QWORD *)v66 + 5) = v63;
LABEL_5:
    v50 += (uint64_t)v95;
    --v47;
  }
  while (v47);
  v25 = v92;
  swift_bridgeObjectRelease(v92);
  v67 = v88;
  v68 = v93;
  v44 = v85;
  v26 = v86;
LABEL_18:
  v69 = sub_10005C134((uint64_t)v52);
  swift_bridgeObjectRelease(v52);
  *(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 + 128)) = v69;
  if (*(_QWORD *)(v69 + 16) == 1)
  {
    v70 = sub_10008B380(v69);
    if (v71)
    {
      v72 = v70;
      v73 = v71;
      swift_beginAccess(v26, v100, 33, 0);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v26, v91);
      v99[0] = v72;
      v99[1] = v73;
      Published.init(initialValue:)(v99, &type metadata for Tab);
      swift_endAccess(v100);
    }
  }
  swift_beginAccess(v67 + *(_QWORD *)(*(_QWORD *)v67 + 144), v100, 33, 0);
  v99[0] = v25;
  v74 = sub_100007D50(&qword_10015ADE8);
  Published.init(initialValue:)(v99, v74);
  v75 = swift_endAccess(v100);
  v76 = Artist.id.getter(v75);
  v78 = v77;
  v79 = type metadata accessor for PromotionalAssetsController(0);
  v80 = swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
  v81 = v80 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  v82 = type metadata accessor for ArtistPromotionalAssets(0);
  v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 1, 1, v82);
  *(_QWORD *)(v80 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v80 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v83);
  *(_QWORD *)(v80 + 16) = v76;
  *(_QWORD *)(v80 + 24) = v78;
  *(_BYTE *)(v80 + 32) = 1;
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v68, v44);
  *(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 + 168)) = v80;
  return v67;
}

uint64_t sub_10005A878(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10005B2C8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10005AA24(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for Genre(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100007428(&qword_10015ADF8, v12, (uint64_t)&protocol conformance descriptor for Genre);
  swift_bridgeObjectRetain(v10);
  v34 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a1;
    v32 = ~v15;
    v33 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100007428(&qword_10015AE00, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v32;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v30;
        a1 = v31;
        v26 = v33;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(_QWORD *)(*v30 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v34;
    v20(v9, v34, v6);
    v35 = *v3;
    *v3 = 0x8000000000000000;
    sub_10005B460((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

void sub_10005AC80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100007D50(&qword_10015ADF0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10005AF5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for Genre(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100007D50(&qword_10015AE08);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v40 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v38 = v2;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  v15 = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v20 >= v39)
      goto LABEL_35;
    v21 = v40[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_35;
      v21 = v40[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v41 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v41 + 32);
    v26(v6, v24 + v25 * v19, v4, v15);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_100007428(&qword_10015ADF8, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    ((void (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v39)
  {
    v21 = v40[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

void sub_10005B2C8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10005AC80(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10005B664();
      goto LABEL_22;
    }
    sub_10005BA38(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_10005B460(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for Genre(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10005AF5C(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_10005B814();
      goto LABEL_12;
    }
    sub_10005BCE4(v13);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_100007428(&qword_10015ADF8, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_100007428(&qword_10015AE00, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10005B664()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100007D50(&qword_10015ADF0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10005B814()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for Genre(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007D50(&qword_10015AE08);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_30:
    *v1 = v8;
    return;
  }
  v25 = v1;
  v9 = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 56 + 8 * v11)
    memmove(v9, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

void sub_10005BA38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100007D50(&qword_10015ADF0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10005BCE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for Genre(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100007D50(&qword_10015AE08);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
LABEL_37:
    *v2 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v36 = v2;
  v37 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  v16 = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_35;
      v22 = *(_QWORD *)(v37 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v38)
          goto LABEL_35;
        v22 = *(_QWORD *)(v37 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4, v16);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_100007428(&qword_10015ADF8, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&protocol conformance descriptor for Genre);
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v38)
  {
LABEL_35:
    swift_release_n(v8, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_10005C00C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Genre(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100007428(&qword_10015ADF8, v10, (uint64_t)&protocol conformance descriptor for Genre);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v17 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v5, v13, v2);
      sub_10005AA24((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_10005C134(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10005A878(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10005C1C8()
{
  return sub_10001881C(&qword_10015AE10, &qword_10015AE18, (void (*)(void))sub_100059708, (void (*)(void))sub_1000597AC);
}

uint64_t sub_10005C1FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t WitnessTable;

  v2 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_10010D738, *a1);
  return ObservedObject.init(wrappedValue:)(a1, v2, WitnessTable);
}

uint64_t type metadata accessor for HeroImageLandscape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImageLandscape);
}

uint64_t sub_10005C244(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011731C, 1);
}

uint64_t sub_10005C278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  double v32;
  double *v33;
  double v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a1;
  v47 = a3;
  v50 = a5;
  v7 = sub_100007D50(&qword_10015AEC0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100007D50(&qword_10015A6B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015A6C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015AEC8);
  __chkstk_darwin(v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100007D50(&qword_10015AED0);
  __chkstk_darwin(v48);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100007D50(&qword_10015AED8);
  __chkstk_darwin(v49);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.center.getter(v23);
  v9[1] = v24;
  v25 = sub_100007D50(&qword_10015AEE0);
  sub_10005C65C(v46, a2, v47, a4, (uint64_t)v9 + *(int *)(v25 + 44));
  sub_100007E78((uint64_t)v9, (uint64_t)v12, &qword_10015AEC0);
  v12[*(int *)(v10 + 36)] = 0;
  v26 = sub_100007F38((uint64_t)v9, &qword_10015AEC0);
  v27 = static Alignment.center.getter(v26);
  sub_1000439A0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v27, v28);
  sub_100007F38((uint64_t)v12, &qword_10015A6B8);
  swift_retain(a2);
  v29 = sub_100079D8C();
  swift_release(a2);
  v30 = Color.init(_:)(v29);
  LOBYTE(v9) = static Edge.Set.all.getter(v30);
  sub_100007E78((uint64_t)v15, (uint64_t)v18, &qword_10015A6C0);
  v31 = &v18[*(int *)(v16 + 36)];
  *(_QWORD *)v31 = v30;
  v31[8] = (char)v9;
  sub_100007F38((uint64_t)v15, &qword_10015A6C0);
  swift_retain(a2);
  v32 = sub_100079F88();
  swift_release(a2);
  sub_100007E78((uint64_t)v18, (uint64_t)v20, &qword_10015AEC8);
  v33 = (double *)&v20[*(int *)(v48 + 36)];
  *v33 = 0.0;
  v33[1] = v32;
  sub_100007F38((uint64_t)v18, &qword_10015AEC8);
  swift_retain(a2);
  v34 = sub_100079FB8();
  swift_release(a2);
  v36 = static UnitPoint.top.getter(v35);
  v38 = v37;
  sub_100007E78((uint64_t)v20, (uint64_t)v22, &qword_10015AED0);
  v39 = (double *)&v22[*(int *)(v49 + 36)];
  *v39 = v34;
  v39[1] = v34;
  v39[2] = v36;
  *((_QWORD *)v39 + 3) = v38;
  v40 = sub_100007F38((uint64_t)v20, &qword_10015AED0);
  v41 = static SafeAreaRegions.all.getter(v40);
  LOBYTE(v30) = static Edge.Set.all.getter(v41);
  v42 = v50;
  sub_100007E78((uint64_t)v22, v50, &qword_10015AED8);
  v43 = v42 + *(int *)(sub_100007D50(&qword_10015AEE8) + 36);
  *(_QWORD *)v43 = v41;
  *(_BYTE *)(v43 + 8) = v30;
  return sub_100007F38((uint64_t)v22, &qword_10015AED8);
}

uint64_t sub_10005C65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v72 = a4;
  v67 = a2;
  v66 = a1;
  v71 = a5;
  v7 = sub_100007D50(&qword_10015A6C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007D50(&qword_10015A6D0);
  __chkstk_darwin(v10);
  v69 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v70 = (uint64_t)&v59 - v13;
  v14 = sub_100007D50(&qword_10015A6D8);
  __chkstk_darwin(v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_10015A6E0);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100007D50(&qword_10015AEF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100007D50(&qword_10015AEF8);
  __chkstk_darwin(v64);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100007D50(&qword_10015AF00);
  __chkstk_darwin(v68);
  v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v65 = (uint64_t)&v59 - v28;
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v29);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 0;
  v30 = &v16[*(int *)(sub_100007D50(&qword_10015AF08) + 44)];
  v63 = a3;
  v31 = sub_10005CC0C(a2, v30);
  v32 = static Alignment.leading.getter(v31);
  sub_1000439F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v32, v33);
  sub_100007F38((uint64_t)v16, &qword_10015A6D8);
  sub_100007E78((uint64_t)v19, (uint64_t)v22, &qword_10015A6E0);
  v34 = &v22[*(int *)(v20 + 36)];
  *(_QWORD *)v34 = 0x403E000000000000;
  v34[8] = 0;
  v35 = sub_100007F38((uint64_t)v19, &qword_10015A6E0);
  v36 = static Alignment.center.getter(v35);
  v38 = v37;
  sub_10005CD30(a3, (uint64_t)v73);
  v62 = v73[0];
  v61 = v73[1];
  v39 = v74;
  v40 = v75;
  v60 = v76;
  v41 = v77;
  v42 = v78;
  v43 = v79;
  v59 = v80;
  v44 = v81;
  v45 = v82;
  sub_100007E78((uint64_t)v22, (uint64_t)v24, &qword_10015AEF0);
  v46 = &v24[*(int *)(v64 + 36)];
  v47 = v61;
  *(_OWORD *)v46 = v62;
  *((_OWORD *)v46 + 1) = v47;
  *((_QWORD *)v46 + 4) = v39;
  *((_QWORD *)v46 + 5) = v40;
  *((_OWORD *)v46 + 3) = v60;
  *((_QWORD *)v46 + 8) = v41;
  *((_QWORD *)v46 + 9) = v42;
  *((_QWORD *)v46 + 10) = v43;
  *(_OWORD *)(v46 + 88) = v59;
  *((_QWORD *)v46 + 13) = v44;
  *((_QWORD *)v46 + 14) = v45;
  *((_QWORD *)v46 + 15) = v36;
  *((_QWORD *)v46 + 16) = v38;
  sub_100007F38((uint64_t)v22, &qword_10015AEF0);
  sub_100007E78((uint64_t)v24, (uint64_t)v26, &qword_10015AEF8);
  *(_WORD *)&v26[*(int *)(v68 + 36)] = 0;
  sub_100007F38((uint64_t)v24, &qword_10015AEF8);
  v48 = v65;
  v49 = sub_100018EB4((uint64_t)v26, v65, &qword_10015AF00);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v49);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v50 = sub_100007D50(&qword_10015AF10);
  v51 = sub_10005CEF4(v67, v72, (uint64_t)&v9[*(int *)(v50 + 44)]);
  v52 = static Alignment.leading.getter(v51);
  v53 = v69;
  sub_100043A50(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v69, 0.0, 1, 0.0, 1, v52, v54);
  sub_100007F38((uint64_t)v9, &qword_10015A6C8);
  v55 = v70;
  sub_100018EB4(v53, v70, &qword_10015A6D0);
  sub_100007E78(v48, (uint64_t)v26, &qword_10015AF00);
  sub_100007E78(v55, v53, &qword_10015A6D0);
  v56 = v71;
  sub_100007E78((uint64_t)v26, v71, &qword_10015AF00);
  v57 = sub_100007D50(&qword_10015AF18);
  sub_100007E78(v53, v56 + *(int *)(v57 + 48), &qword_10015A6D0);
  sub_100007F38(v55, &qword_10015A6D0);
  sub_100007F38(v48, &qword_10015AF00);
  sub_100007F38(v53, &qword_10015A6D0);
  return sub_100007F38((uint64_t)v26, &qword_10015AF00);
}

uint64_t sub_10005CC0C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t KeyPath;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v16[9];
  uint64_t v17;

  v4 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 1];
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain(a1);
  sub_100079B78((uint64_t)v6);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_10010B570);
  v9 = (int *)type metadata accessor for Artwork(0);
  v10 = (_QWORD *)((char *)a2 + v9[7]);
  *v10 = KeyPath;
  v11 = sub_100007D50(&qword_100158AC0);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  *a2 = v7;
  sub_100018EB4((uint64_t)v6, (uint64_t)a2 + v9[5], &qword_100158658);
  v12 = (char *)a2 + v9[6];
  v16[0] = 0;
  result = State.init(wrappedValue:)(v16, &type metadata for Bool);
  v14 = v17;
  *v12 = v16[1];
  *((_QWORD *)v12 + 1) = v14;
  return result;
}

__n128 sub_10005CD30@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_10005CDBC(a1, (uint64_t)&v15);
  v7 = v16;
  v8 = v17;
  v9 = v20;
  result = v18;
  v11 = v19;
  v12 = v21;
  v13 = v22;
  v14 = v15;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 88) = v12;
  *(_OWORD *)(a2 + 104) = v13;
  return result;
}

double sub_10005CDBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = static Alignment.center.getter(a1);
  v5 = v4;
  sub_10005D300((uint64_t)&v16, 1.0, 0.0, 0.2);
  v6 = v16;
  v15 = v17;
  v7 = v18;
  v8 = sub_100007D50(&qword_100159140);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100108810;
  v10 = static Color.black.getter(v9);
  v11 = Color.opacity(_:)(0.4);
  swift_release(v10);
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = static Color.clear.getter(v12);
  v16 = v9;
  specialized Array._endMutation()();
  Gradient.init(colors:)(v16);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v16, 0.0, 0.0, 0.0, 1.0);
  v13 = v16;
  *(_QWORD *)a2 = 17;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 64) = v13;
  *(_OWORD *)(a2 + 72) = v17;
  result = *(double *)&v18;
  *(_OWORD *)(a2 + 88) = v18;
  return result;
}

uint64_t sub_10005CEF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  *(_QWORD *)&v49 = a2;
  v50 = a3;
  v4 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for Artwork(0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100007D50(&qword_10015AF20);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015AF28);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  swift_retain(a1);
  sub_100079B78((uint64_t)v6);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_10010B570);
  v18 = (_QWORD *)((char *)v9 + v7[7]);
  *v18 = KeyPath;
  v19 = sub_100007D50(&qword_100158AC0);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  *v9 = v16;
  sub_100018EB4((uint64_t)v6, (uint64_t)v9 + v7[5], &qword_100158658);
  v20 = (char *)v9 + v7[6];
  v55 = 0;
  v21 = State.init(wrappedValue:)(&v55, &type metadata for Bool);
  v22 = v52;
  *v20 = v51;
  *((_QWORD *)v20 + 1) = v22;
  v23 = static Alignment.center.getter(v21);
  v25 = v24;
  sub_10005D300((uint64_t)&v51, 0.6, 0.0, 1.0);
  v26 = v51;
  v48 = v52;
  v27 = v53;
  v28 = v54;
  sub_10005E0A8((uint64_t)v9, (uint64_t)v12);
  v29 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v29 = v23;
  *((_QWORD *)v29 + 1) = v25;
  *((_QWORD *)v29 + 2) = v26;
  *(_OWORD *)(v29 + 24) = v48;
  *((_QWORD *)v29 + 5) = v27;
  *((_QWORD *)v29 + 6) = v28;
  v30 = sub_10005E0EC((uint64_t)v9);
  v31 = static Alignment.center.getter(v30);
  v33 = v32;
  sub_10005D23C((uint64_t)&v51);
  v34 = v51;
  v48 = v52;
  v35 = v53;
  v36 = v54;
  sub_100007E78((uint64_t)v12, (uint64_t)v15, &qword_10015AF20);
  v37 = &v15[*(int *)(v13 + 36)];
  *(_QWORD *)v37 = v31;
  *((_QWORD *)v37 + 1) = v33;
  *((_QWORD *)v37 + 2) = v34;
  *(_OWORD *)(v37 + 24) = v48;
  *((_QWORD *)v37 + 5) = v35;
  *((_QWORD *)v37 + 6) = v36;
  v38 = sub_100007F38((uint64_t)v12, &qword_10015AF20);
  v39 = static Alignment.center.getter(v38);
  v41 = v40;
  sub_10005D300((uint64_t)&v51, 0.0, 0.3, 0.0);
  v43 = v50;
  v42 = v51;
  v49 = v52;
  v44 = v53;
  v45 = v54;
  sub_100007E78((uint64_t)v15, v50, &qword_10015AF28);
  v46 = v43 + *(int *)(sub_100007D50(&qword_10015AF30) + 36);
  *(_QWORD *)v46 = v39;
  *(_QWORD *)(v46 + 8) = v41;
  *(_QWORD *)(v46 + 16) = v42;
  *(_OWORD *)(v46 + 24) = v49;
  *(_QWORD *)(v46 + 40) = v44;
  *(_QWORD *)(v46 + 48) = v45;
  return sub_100007F38((uint64_t)v15, &qword_10015AF28);
}

double sub_10005D23C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  v2 = sub_100007D50(&qword_100159140);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100108810;
  v4 = static Color.white.getter(v3);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = static Color.white.getter(v4);
  v6 = Color.opacity(_:)(0.2);
  v7 = swift_release(v5);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)&v10[0] = v3;
  specialized Array._endMutation()(v7);
  Gradient.init(colors:)(v3);
  LinearGradient.init(gradient:startPoint:endPoint:)(v10, 0.8, 0.0, 1.0, 0.0);
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v11;
  return result;
}

double sub_10005D300@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v8 = sub_100007D50(&qword_100159140);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100108810;
  v10 = static Color.white.getter(v9);
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = static Color.clear.getter(v10);
  *(_QWORD *)&v13[0] = v9;
  specialized Array._endMutation()();
  Gradient.init(colors:)(v9);
  LinearGradient.init(gradient:startPoint:endPoint:)(v13, a2, a3, a4, 0.0);
  result = *(double *)v13;
  v12 = v13[1];
  *(_OWORD *)a1 = v13[0];
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v14;
  return result;
}

uint64_t sub_10005D3B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10005C278(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

double sub_10005D3C8()
{
  double result;

  if (qword_1001580A8 != -1)
    swift_once(&qword_1001580A8, sub_100051438);
  qword_10015AE30 = qword_10016A4C0;
  *(_QWORD *)&result = swift_retain(qword_10016A4C0).n128_u64[0];
  return result;
}

uint64_t sub_10005D410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.white.getter();
  v1 = Color.opacity(_:)(0.01);
  result = swift_release(v0);
  qword_10015AE38 = v1;
  return result;
}

__n128 sub_10005D450@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __n128 result;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char **v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __n128 v104;
  __int128 v105;
  __int128 v106;
  int64x2_t v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  char v111;
  uint64_t v112[2];
  __int128 v113;
  __int128 v114;
  __n128 v115;
  __int128 v116;
  __int128 v117;
  int64x2_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  char v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __n128 v130;
  __int128 v131;
  __int128 v132;
  int64x2_t v133;
  __int128 v134;
  __int128 v135;
  _OWORD v136[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  int64x2_t v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __int128 v152;
  int64x2_t v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __n128 v160;
  __int128 v161;
  __int128 v162;
  int64x2_t v163;
  __int128 v164;
  __int128 v165;
  _OWORD v166[2];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __n128 v170;
  __int128 v171;
  __int128 v172;
  int64x2_t v173;
  __int128 v174;
  __int128 v175;
  _OWORD v176[3];

  v100 = a2;
  v96 = a3;
  v97 = a1;
  v3 = type metadata accessor for ColorScheme(0);
  v91 = *(_QWORD *)(v3 - 8);
  v92 = v3;
  __chkstk_darwin(v3);
  v90 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v89 = (uint64_t)&v89 - v6;
  v99 = type metadata accessor for Artwork(0);
  v93 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v94 = v7;
  v95 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SlideTransition(0);
  v98 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v89 - v12;
  v14 = type metadata accessor for Image.ResizingMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AsyncImagePhase(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v97, v18, v20);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v22, v18);
    v97 = *v22;
    v24 = v97;
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Image.ResizingMode.stretch(_:), v14);
    v92 = Image.resizable(capInsets:resizingMode:)(v17, v24, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v25 = off_10015AE28;
    v26 = (uint64_t)v100;
    v90 = *v100;
    v91 = qword_10015AE20;
    v27 = swift_bridgeObjectRetain(off_10015AE28);
    v28 = static MatchedGeometryProperties.position.getter(v27);
    LODWORD(v89) = v28;
    v29 = static UnitPoint.center.getter(v28);
    v31 = v30;
    SlideTransition.init()();
    v32 = v98;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v10, v13, v8);
    v33 = sub_10005F410();
    v34 = AnyTransition.init<A>(_:)(v10, v8, v33);
    v126 = 1;
    v125 = 0;
    v124 = 1;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v8);
    v35 = v126;
    v36 = v125;
    v37 = v124;
    v38 = v26 + *(int *)(v99 + 24);
    v39 = *(_BYTE *)v38;
    v40 = *(_QWORD *)(v38 + 8);
    LOBYTE(v167) = v39;
    *((_QWORD *)&v167 + 1) = v40;
    v41 = sub_100007D50(&qword_100158470);
    v42 = State.wrappedValue.getter(&v157, v41);
    if ((_BYTE)v157)
      v43 = 1.0;
    else
      v43 = 0.0;
    v44 = static UnitPoint.leading.getter(v42);
    v46 = v45;
    v111 = v35;
    v47 = v95;
    sub_10005E0A8(v26, v95);
    v48 = *(unsigned __int8 *)(v93 + 80);
    v49 = (v48 + 16) & ~v48;
    v50 = swift_allocObject(&unk_10014A968, v49 + v94, v48 | 7);
    sub_10005EF48(v47, v50 + v49);
    v112[0] = v92;
    v112[1] = 0;
    LOBYTE(v113) = v35;
    BYTE1(v113) = v36;
    *((_QWORD *)&v113 + 1) = v91;
    *(_QWORD *)&v114 = v25;
    *((_QWORD *)&v114 + 1) = v90;
    v115.n128_u32[0] = v89;
    v115.n128_f64[1] = v29;
    *(_QWORD *)&v116 = v31;
    BYTE8(v116) = v37;
    *(_QWORD *)&v117 = v34;
    v118 = vdupq_n_s64(0x3FF199999999999AuLL);
    *((double *)&v117 + 1) = v43;
    *(double *)&v119 = v44;
    *((_QWORD *)&v119 + 1) = v46;
    LOWORD(v120) = 0;
    *((_QWORD *)&v120 + 1) = sub_10005F578;
    v121 = v50;
    v122 = 0;
    v123 = 0;
    v131 = v116;
    v132 = v117;
    v129 = v114;
    v130 = v115;
    v127 = (unint64_t)v92;
    v128 = v113;
    *(_QWORD *)&v136[1] = 0;
    v135 = v120;
    v136[0] = (unint64_t)v50;
    v133 = v118;
    v134 = v119;
    sub_10005F5A4((uint64_t)&v127);
    sub_100018EB4((uint64_t)&v127, (uint64_t)&v167, &qword_10015B0B8);
    sub_10005F5AC(v112);
    v51 = sub_100007D50(&qword_10015B030);
    v52 = sub_100007D50(&qword_10015B0A0);
    v53 = sub_10005F0B0();
    v54 = sub_10005F380();
    _ConditionalContent<>.init(storage:)(&v167, v51, v52, v53, v54);
    v145 = v109;
    v146[0] = v110[0];
    *(_OWORD *)((char *)v146 + 9) = *(_OWORD *)((char *)v110 + 9);
    v141 = v105;
    v142 = v106;
    v143 = v107;
    v144 = v108;
    v137 = v101;
    v138 = v102;
    v139 = v103;
    v140 = v104;
    v165 = v109;
    v166[0] = v110[0];
    *(_OWORD *)((char *)v166 + 9) = *(_OWORD *)((char *)v110 + 9);
    v161 = v105;
    v162 = v106;
    v164 = v108;
    v163 = v107;
    v157 = v101;
    v158 = v102;
    v160 = v104;
    v159 = v103;
    sub_10005F464((uint64_t)&v157);
    sub_100018EB4((uint64_t)&v157, (uint64_t)&v167, &qword_10015B0A8);
    sub_10005F6AC((uint64_t)&v137, sub_10005F624);
    v55 = sub_100007D50(&qword_10015B020);
    v56 = sub_10005F044();
    _ConditionalContent<>.init(storage:)(&v167, v55, &type metadata for EmptyView, v56, &protocol witness table for EmptyView);
    swift_release(v97);
    sub_10005F6AC((uint64_t)&v137, sub_10005F718);
    sub_10005F7A8(v112);
    v175 = v155;
    v176[0] = v156[0];
    *(_OWORD *)((char *)v176 + 10) = *(_OWORD *)((char *)v156 + 10);
    v171 = v151;
    v172 = v152;
    v174 = v154;
    v173 = v153;
    v167 = v147;
    v168 = v148;
    v170 = v150;
    v169 = v149;
    v57 = v96;
  }
  else
  {
    v58 = v98;
    v59 = v8;
    if (v23 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v22, v18);
      swift_errorRelease(*v22);
      v60 = v13;
    }
    else
    {
      v60 = v13;
      if (v23 != enum case for AsyncImagePhase.empty(_:))
      {
        sub_10005F404((uint64_t)&v147);
        sub_100018EB4((uint64_t)&v147, (uint64_t)&v167, &qword_10015B0A8);
        v82 = sub_100007D50(&qword_10015B020);
        v83 = sub_10005F044();
        _ConditionalContent<>.init(storage:)(&v167, v82, &type metadata for EmptyView, v83, &protocol witness table for EmptyView);
        (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
        v175 = v165;
        v176[0] = v166[0];
        *(_OWORD *)((char *)v176 + 10) = *(_OWORD *)((char *)v166 + 10);
        v171 = v161;
        v172 = v162;
        v174 = v164;
        v173 = v163;
        v167 = v157;
        v168 = v158;
        v170 = v160;
        v169 = v159;
        v57 = v96;
        goto LABEL_18;
      }
    }
    v61 = v89;
    sub_100018C18(v89);
    v63 = v90;
    v62 = v91;
    v64 = v92;
    (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v90, enum case for ColorScheme.light(_:), v92);
    v65 = static ColorScheme.== infix(_:_:)(v61, v63);
    v66 = *(void (**)(char *, uint64_t))(v62 + 8);
    v66(v63, v64);
    v66((char *)v61, v64);
    if ((v65 & 1) != 0)
    {
      v67 = v10;
      if (qword_1001580D0 != -1)
        swift_once(&qword_1001580D0, sub_10005D3C8);
      v68 = &qword_10015AE30;
    }
    else
    {
      v67 = v10;
      if (qword_1001580D8 != -1)
        swift_once(&qword_1001580D8, sub_10005D410);
      v68 = &qword_10015AE38;
    }
    v57 = v96;
    v69 = *v68;
    swift_retain(*v68);
    v71 = static Edge.Set.all.getter(v70);
    SlideTransition.init()();
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v67, v60, v59);
    v72 = sub_10005F410();
    v73 = AnyTransition.init<A>(_:)(v67, v59, v72);
    v74 = v60;
    v75 = v73;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v74, v59);
    *(_QWORD *)&v137 = v69;
    BYTE8(v137) = v71;
    *(_QWORD *)&v138 = v75;
    sub_10005F458((uint64_t)&v137);
    sub_100018EB4((uint64_t)&v137, (uint64_t)&v167, &qword_10015B0B8);
    swift_retain(v69);
    swift_retain(v75);
    v76 = sub_100007D50(&qword_10015B030);
    v77 = sub_100007D50(&qword_10015B0A0);
    v78 = sub_10005F0B0();
    v79 = sub_10005F380();
    _ConditionalContent<>.init(storage:)(&v167, v76, v77, v78, v79);
    v165 = v135;
    v166[0] = v136[0];
    *(_OWORD *)((char *)v166 + 9) = *(_OWORD *)((char *)v136 + 9);
    v161 = v131;
    v162 = v132;
    v164 = v134;
    v163 = v133;
    v157 = v127;
    v158 = v128;
    v160 = v130;
    v159 = v129;
    sub_10005F464((uint64_t)&v157);
    sub_100018EB4((uint64_t)&v157, (uint64_t)&v167, &qword_10015B0A8);
    v80 = sub_100007D50(&qword_10015B020);
    v81 = sub_10005F044();
    _ConditionalContent<>.init(storage:)(&v167, v80, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    swift_release(v75);
    swift_release(v69);
    v175 = v155;
    v176[0] = v156[0];
    *(_OWORD *)((char *)v176 + 10) = *(_OWORD *)((char *)v156 + 10);
    v171 = v151;
    v172 = v152;
    v174 = v154;
    v173 = v153;
    v167 = v147;
    v168 = v148;
    v170 = v150;
    v169 = v149;
  }
LABEL_18:
  v84 = v176[0];
  *(_OWORD *)(v57 + 128) = v175;
  *(_OWORD *)(v57 + 144) = v84;
  *(_OWORD *)(v57 + 154) = *(_OWORD *)((char *)v176 + 10);
  v85 = v172;
  *(_OWORD *)(v57 + 64) = v171;
  *(_OWORD *)(v57 + 80) = v85;
  v86 = v174;
  *(int64x2_t *)(v57 + 96) = v173;
  *(_OWORD *)(v57 + 112) = v86;
  v87 = v168;
  *(_OWORD *)v57 = v167;
  *(_OWORD *)(v57 + 16) = v87;
  result = v170;
  *(_OWORD *)(v57 + 32) = v169;
  *(__n128 *)(v57 + 48) = result;
  return result;
}

double sub_10005DE68(uint64_t a1)
{
  uint64_t v1;
  double result;
  _QWORD v3[4];

  v3[2] = a1;
  v1 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v1, sub_10005F820, v3, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_10005DEC4(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for Artwork(0) + 24));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100007D50(&qword_100158470);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10005DF34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(a1);
  v5 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E78(v1 + *(int *)(a1 + 20), (uint64_t)v7, &qword_100158658);
  sub_10005E0A8(v1, (uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10014A940, v9 + v4, v8 | 7);
  sub_10005EF48((uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  v11 = sub_100007D50(&qword_10015B008);
  v12 = sub_10005EFD8();
  return AsyncImage.init(url:scale:transaction:content:)(v7, 0, sub_10005EF8C, v10, v11, v12, 1.0);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  uint64_t result;

  result = qword_10015AF90;
  if (!qword_10015AF90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Artwork);
  return result;
}

uint64_t sub_10005E0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E0EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10005E128(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100007D50(&qword_100158658);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)v4 + v14;
    v17 = (char *)a2 + v14;
    *v16 = *v17;
    v18 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v16 + 1) = v18;
    v19 = (uint64_t *)((char *)v4 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    swift_retain(v18);
    v21 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return v4;
}

double sub_10005E2B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)(a1 + a2[6] + 8));
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10005E390(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100007D50(&qword_100158658);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *v14 = *v15;
  v16 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 1) = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  swift_retain(v16);
  v19 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  return a1;
}

_QWORD *sub_10005E4EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100007D50(&qword_100158658);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  v18 = *((_QWORD *)v16 + 1);
  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v16 + 1) = v19;
  swift_retain(v19);
  swift_release(v18);
  if (a1 != a2)
  {
    v20 = a3[7];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    sub_100007F38((uint64_t)a1 + v20, &qword_100158AC0);
    v23 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  return a1;
}

_QWORD *sub_10005E6BC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100007D50(&qword_100158658);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_10005E808(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100007D50(&qword_100158658);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  v18 = *((_QWORD *)v16 + 1);
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_release(v18);
  if (a1 != a2)
  {
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    sub_100007F38((uint64_t)a1 + v19, &qword_100158AC0);
    v22 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005E9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E9E0);
}

uint64_t sub_10005E9E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = sub_100007D50(&qword_100158658);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = sub_100007D50(qword_100158F60);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t sub_10005EA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EAA8);
}

uint64_t sub_10005EAA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_100007D50(&qword_100158658);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = a2;
      return result;
    }
    v10 = sub_100007D50(qword_100158F60);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[7];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_10005EB54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10005EC20(319, (unint64_t *)&qword_1001593D8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_10010B5A8;
    sub_10005EC20(319, (unint64_t *)&qword_100158FE8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_10005EC20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_10005EC7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AFD0;
  if (!qword_10015AFD0)
  {
    v1 = sub_100007D00(&qword_10015AEE8);
    sub_10005ECE8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AFD0);
  }
  return result;
}

unint64_t sub_10005ECE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AFD8;
  if (!qword_10015AFD8)
  {
    v1 = sub_100007D00(&qword_10015AED8);
    sub_10005ED54();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AFD8);
  }
  return result;
}

unint64_t sub_10005ED54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AFE0;
  if (!qword_10015AFE0)
  {
    v1 = sub_100007D00(&qword_10015AED0);
    sub_10005EDC0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AFE0);
  }
  return result;
}

unint64_t sub_10005EDC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AFE8;
  if (!qword_10015AFE8)
  {
    v1 = sub_100007D00(&qword_10015AEC8);
    sub_10005EE44();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AFE8);
  }
  return result;
}

unint64_t sub_10005EE44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AFF0;
  if (!qword_10015AFF0)
  {
    v1 = sub_100007D00(&qword_10015A6C0);
    sub_10005EEB0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AFF0);
  }
  return result;
}

unint64_t sub_10005EEB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015AFF8;
  if (!qword_10015AFF8)
  {
    v1 = sub_100007D00(&qword_10015A6B8);
    sub_10000F4E0(&qword_10015B000, &qword_10015AEC0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000E2C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015AFF8);
  }
  return result;
}

uint64_t sub_10005EF34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117350, 1);
}

uint64_t sub_10005EF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_10005EF8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 80);
  *(_QWORD *)&result = sub_10005D450(a1, (char **)(v2 + ((v5 + 16) & ~v5)), a2).n128_u64[0];
  return result;
}

unint64_t sub_10005EFD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B010;
  if (!qword_10015B010)
  {
    v1 = sub_100007D00(&qword_10015B008);
    sub_10005F044();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B010);
  }
  return result;
}

unint64_t sub_10005F044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B018;
  if (!qword_10015B018)
  {
    v1 = sub_100007D00(&qword_10015B020);
    sub_10005F0B0();
    sub_10005F380();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B018);
  }
  return result;
}

unint64_t sub_10005F0B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B028;
  if (!qword_10015B028)
  {
    v1 = sub_100007D00(&qword_10015B030);
    sub_10005F11C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B028);
  }
  return result;
}

unint64_t sub_10005F11C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B038;
  if (!qword_10015B038)
  {
    v1 = sub_100007D00(&qword_10015B040);
    sub_10005F1A0();
    sub_10000F4E0(&qword_10015AA38, &qword_10015AA40, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B038);
  }
  return result;
}

unint64_t sub_10005F1A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B048;
  if (!qword_10015B048)
  {
    v1 = sub_100007D00(&qword_10015B050);
    sub_10005F20C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B048);
  }
  return result;
}

unint64_t sub_10005F20C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B058;
  if (!qword_10015B058)
  {
    v1 = sub_100007D00(&qword_10015B060);
    sub_10005F278();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B058);
  }
  return result;
}

unint64_t sub_10005F278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B068;
  if (!qword_10015B068)
  {
    v1 = sub_100007D00(&qword_10015B070);
    sub_10005F2FC();
    sub_10000F4E0(&qword_10015B088, &qword_10015B090, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B068);
  }
  return result;
}

unint64_t sub_10005F2FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B078;
  if (!qword_10015B078)
  {
    v1 = sub_100007D00(&qword_10015B080);
    sub_100020844();
    sub_10000F4E0(&qword_1001590D8, &qword_1001590E0, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B078);
  }
  return result;
}

unint64_t sub_10005F380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B098;
  if (!qword_10015B098)
  {
    v1 = sub_100007D00(&qword_10015B0A0);
    sub_1000208A8();
    sub_10000F4E0(&qword_10015B088, &qword_10015B090, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B098);
  }
  return result;
}

uint64_t sub_10005F404(uint64_t result)
{
  *(_BYTE *)(result + 169) = 1;
  return result;
}

unint64_t sub_10005F410()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B0B0;
  if (!qword_10015B0B0)
  {
    v1 = type metadata accessor for SlideTransition(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SlideTransition, v1);
    atomic_store(result, (unint64_t *)&qword_10015B0B0);
  }
  return result;
}

uint64_t sub_10005F458(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

uint64_t sub_10005F464(uint64_t result)
{
  *(_BYTE *)(result + 169) = 0;
  return result;
}

uint64_t sub_10005F470()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for Artwork(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_release(*(_QWORD *)(v6 + v1[6] + 8));
  v10 = (_QWORD *)(v6 + v1[7]);
  v11 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_10005F578()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Artwork(0) - 8) + 80);
  return sub_10005DE68(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10005F5A4(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

_QWORD *sub_10005F5AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[10];
  v4 = a1[17];
  v5 = a1[18];
  v6 = a1[19];
  v7 = a1[20];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_100020C7C(v4, v5);
  sub_100020C7C(v6, v7);
  return a1;
}

void sub_10005F624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if ((a22 & 1) != 0)
  {
    swift_retain(a1);
    swift_retain(a3);
  }
  else
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(a5);
    swift_retain(a11);
    sub_100020C7C(a18, a19);
    sub_100020C7C(a20, a21);
  }
}

uint64_t sub_10005F6AC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 168);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    v4);
  return a1;
}

void sub_10005F718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  swift_release(a1);
  if ((a22 & 1) != 0)
  {
    swift_release(a3);
  }
  else
  {
    swift_bridgeObjectRelease(a5);
    swift_release(a11);
    sub_100020BA0(a18, a19);
    sub_100020BA0(a20, a21);
  }
}

uint64_t *sub_10005F7A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[4];
  v4 = a1[17];
  v5 = a1[18];
  v6 = a1[19];
  v7 = a1[20];
  swift_release(a1[10]);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  sub_100020BA0(v4, v5);
  sub_100020BA0(v6, v7);
  return a1;
}

uint64_t sub_10005F820()
{
  uint64_t v0;

  return sub_10005DEC4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10005F838()
{
  return sub_10000F4E0(&qword_10015B0C0, &qword_10015B0C8, (uint64_t)&protocol conformance descriptor for AsyncImage<A>);
}

uint64_t initializeBufferWithCopyOfBuffer for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for ViewModulesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration()
{
  return &type metadata for ViewModulesConfiguration;
}

uint64_t sub_10005F924(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aLocationmusic[v2];
  v4 = *(_QWORD *)&aCalendar_1[v2 + 8];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aLocationmusic[v5];
  v7 = *(_QWORD *)&aCalendar_1[v5 + 8];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aCalendar_1[8 * a2 + 8], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_10005F9A8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7368801;
  else
    v3 = 0x6C61646F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7368801;
  else
    v5 = 0x6C61646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10005FA3C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aDefault_2[v2 * 8];
  v4 = qword_10010BD50[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aDefault_2[v5 * 8];
  v7 = qword_10010BD50[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_10010BD50[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_10005FAC0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x73656C75646F6DLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x8000000100112D20;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x73656C75646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0x8000000100112D20;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10005FB64(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6449707061;
  else
    v3 = 0x7972746E756F63;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6449707061;
  else
    v5 = 0x7972746E756F63;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10005FC00(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10005FC4C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10005FCBC + 4 * byte_10010B615[a2]))(0x746E657665);
}

uint64_t sub_10005FCBC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E657665 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E657665, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_10005FD74(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)((char *)&unk_10010BC80 + v2 * 8);
  v4 = qword_10010BCA8[v2];
  v5 = a2;
  v6 = *(_QWORD *)((char *)&unk_10010BC80 + v5 * 8);
  v7 = qword_10010BCA8[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_10010BCA8[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

Swift::Int sub_10005FDF8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = a1;
  v3 = qword_10010BCA8[v2];
  String.hash(into:)(v5, *(_QWORD *)((char *)&unk_10010BC80 + v2 * 8), v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10005FE60(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10005FEB8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E657665, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_10005FF3C(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x6449707061;
  else
    v2 = 0x7972746E756F63;
  if ((a1 & 1) != 0)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10005FFB8(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0xD000000000000011;
  else
    v2 = 0x73656C75646F6DLL;
  if ((a1 & 1) != 0)
    v3 = 0x8000000100112D20;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10006003C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = a1;
  v3 = qword_10010BD50[v2];
  String.hash(into:)(v5, *(_QWORD *)&aDefault_2[v2 * 8], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000600A4(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 7368801;
  else
    v2 = 0x6C61646F6DLL;
  if ((a1 & 1) != 0)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_100060118(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aCalendar_1[v2 + 8];
  String.hash(into:)(v5, *(_QWORD *)&aLocationmusic[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100060180(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aCalendar_1[v2 + 8];
  String.hash(into:)(a1, *(_QWORD *)&aLocationmusic[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000601C0(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 7368801;
  else
    v3 = 0x6C61646F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10006020C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = qword_10010BD50[v2];
  String.hash(into:)(a1, *(_QWORD *)&aDefault_2[v2 * 8], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10006024C(uint64_t a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x73656C75646F6DLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x8000000100112D20;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000602A8(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x6449707061;
  else
    v3 = 0x7972746E756F63;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_1000602FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100060340(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E657665, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

uint64_t sub_1000603A8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = qword_10010BCA8[v2];
  String.hash(into:)(a1, *(_QWORD *)((char *)&unk_10010BC80 + v2 * 8), v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000603E8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = a2;
  v4 = qword_10010BCA8[v3];
  String.hash(into:)(v6, *(_QWORD *)((char *)&unk_10010BC80 + v3 * 8), v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10006044C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000604A0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E657665, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_100060524(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x6449707061;
  else
    v3 = 0x7972746E756F63;
  if ((a2 & 1) != 0)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10006059C(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x73656C75646F6DLL;
  if ((a2 & 1) != 0)
    v4 = 0x8000000100112D20;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10006061C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = a2;
  v4 = qword_10010BD50[v3];
  String.hash(into:)(v6, *(_QWORD *)&aDefault_2[v3 * 8], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100060680(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 7368801;
  else
    v3 = 0x6C61646F6DLL;
  if ((a2 & 1) != 0)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1000606F0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aCalendar_1[v3 + 8];
  String.hash(into:)(v6, *(_QWORD *)&aLocationmusic[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100060754(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 0x73656C75646F6DLL;
}

uint64_t sub_100060790(char *a1, char *a2)
{
  return sub_10005FAC0(*a1, *a2);
}

Swift::Int sub_10006079C()
{
  char *v0;

  return sub_10005FFB8(*v0);
}

uint64_t sub_1000607A4(uint64_t a1)
{
  char *v1;

  return sub_10006024C(a1, *v1);
}

Swift::Int sub_1000607AC(uint64_t a1)
{
  char *v1;

  return sub_10006059C(a1, *v1);
}

uint64_t sub_1000607B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100147888;
  return sub_100060ACC(v2, a1, a2);
}

uint64_t sub_1000607C0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100060754(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000607E8()
{
  char *v0;

  return sub_100060754(*v0);
}

uint64_t sub_1000607F0@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147888, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100060850()
{
  return 0;
}

void sub_10006085C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100060868(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000618F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060890(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000618F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000608B8(char a1)
{
  return *(_QWORD *)&aLocationmusic[8 * a1];
}

uint64_t sub_1000608D8(char a1)
{
  return *(_QWORD *)&aDefault_2[8 * a1];
}

uint64_t sub_1000608F8(char a1)
{
  if ((a1 & 1) != 0)
    return 7368801;
  else
    return 0x6C61646F6DLL;
}

uint64_t sub_100060924(char *a1, char *a2)
{
  return sub_10005F924(*a1, *a2);
}

Swift::Int sub_100060930()
{
  char *v0;

  return sub_100060118(*v0);
}

uint64_t sub_100060938(uint64_t a1)
{
  char *v1;

  return sub_100060180(a1, *v1);
}

Swift::Int sub_100060940(uint64_t a1)
{
  char *v1;

  return sub_1000606F0(a1, *v1);
}

unint64_t sub_100060948@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100061598(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100060974@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000608B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006099C(char *a1, char *a2)
{
  return sub_10005FA3C(*a1, *a2);
}

Swift::Int sub_1000609A8()
{
  char *v0;

  return sub_10006003C(*v0);
}

uint64_t sub_1000609B0(uint64_t a1)
{
  char *v1;

  return sub_10006020C(a1, *v1);
}

Swift::Int sub_1000609B8(uint64_t a1)
{
  char *v1;

  return sub_10006061C(a1, *v1);
}

unint64_t sub_1000609C0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000615E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000609EC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000608D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100060A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100061628(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_100060A40(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100060A4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061D10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060A74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061D10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100060A9C(char *a1, char *a2)
{
  return sub_10005F9A8(*a1, *a2);
}

Swift::Int sub_100060AA8()
{
  char *v0;

  return sub_1000600A4(*v0);
}

uint64_t sub_100060AB0(uint64_t a1)
{
  char *v1;

  return sub_1000601C0(a1, *v1);
}

Swift::Int sub_100060AB8(uint64_t a1)
{
  char *v1;

  return sub_100060680(a1, *v1);
}

uint64_t sub_100060AC0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_100147A08;
  return sub_100060ACC(v2, a1, a2);
}

uint64_t sub_100060ACC@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_100060B24@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000608F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100060B4C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  unint64_t result;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;

  v4 = type metadata accessor for DecodingError.Context(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = (void *)a1[1];
  swift_bridgeObjectRetain(v9);
  v20._countAndFlagsBits = v8;
  v20._object = v9;
  result = sub_100061598(v20);
  if (result == 6)
  {
    v18 = 0;
    v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(v19);
    v18 = 0xD000000000000018;
    v19 = 0x8000000100113D70;
    v11._countAndFlagsBits = v8;
    v11._object = v9;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0x6F6E2073656F6420;
    v12._object = (void *)0xEF74736978652074;
    String.append(_:)(v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(&_swiftEmptyArrayStorage, v18, v19, 0);
    v13 = type metadata accessor for DecodingError(0);
    swift_allocError(v13, &protocol witness table for DecodingError, 0, 0);
    v15 = v14;
    v16 = (char *)v14 + *(int *)(sub_100007D50(&qword_10015B108) + 48);
    *v15 = &type metadata for ViewModulesConfiguration.Name;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v16, v7, v4);
    v17.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, enum case for DecodingError.valueNotFound(_:), v13);
    swift_willThrow(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100060D08(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v7 = sub_100007D50(&qword_10015B110);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001BF94(a1, v11);
  v13 = sub_1000618F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.CodingKeys, &type metadata for ViewModulesConfiguration.CodingKeys, v13, v11, v12);
  v22 = a3;
  v21 = 0;
  v14 = sub_100007D50(&qword_10015B118);
  v15 = sub_100061A74();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, v14, v15);
  if (!v3)
  {
    v20 = a2 & 1;
    v19 = 1;
    v16 = sub_100061B68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v7, &type metadata for ViewModulesConfiguration.PresentationStyle, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

_QWORD *sub_100060E60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1000616D0(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_100060E90(_QWORD *a1)
{
  uint64_t v1;

  return sub_100060D08(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_100060EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061BAC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100060F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061BAC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100060F54(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v4 = sub_100007D50(&qword_10015B160);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001BF94(a1, v8);
  v10 = sub_100061D10();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, v10, v8, v9);
  v15 = a2;
  v11 = sub_100061D98();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v4, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10006104C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_100061BF0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100061074(_QWORD *a1)
{
  char *v1;

  return sub_100060F54(a1, *v1);
}

uint64_t sub_10006108C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061DDC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000610E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061DDC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100061134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061E20();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100061190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061E20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000611DC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  Class isa;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v27[3];
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  id v31;

  if (!a2)
    return 0;
  swift_bridgeObjectRetain(a2);
  v4 = sub_100051E80(a1, a2);
  v5 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  v31 = 0;
  v7 = objc_msgSend(v5, "dataWithPropertyList:format:options:error:", isa, 100, 0, &v31);

  v8 = v31;
  if (v7)
  {
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v13 = PropertyListDecoder.init()();
    v14 = sub_100062548();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v31, &type metadata for ViewModulesConfiguration, v9, v11, &type metadata for ViewModulesConfiguration, v14);
    swift_release(v13);
    sub_100029D7C(v9, v11);
    swift_bridgeObjectRelease(a2);
    return v31;
  }
  else
  {
    v15 = v8;
    v16 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    if (qword_1001581A8 != -1)
      swift_once(&qword_1001581A8, sub_1001046AC);
    v17 = type metadata accessor for Logger(0);
    sub_100029E7C(v17, (uint64_t)qword_10016A5B0);
    swift_errorRetain(v16);
    swift_bridgeObjectRetain(a2);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (void *)swift_slowAlloc(64, -1);
      v31 = v22;
      *(_DWORD *)v21 = 136315394;
      swift_bridgeObjectRetain(a2);
      v29 = sub_10003FCB4(a1, a2, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v21 + 12) = 2080;
      swift_getErrorValue(v16, v28, v27);
      v23 = Error.localizedDescription.getter(v27[1], v27[2]);
      v25 = v24;
      v29 = sub_10003FCB4(v23, v24, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Empty or invalid view module configuration for ID: %s. Error: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
    return 0;
  }
}

unint64_t sub_100061598(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001478D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_1000615E0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147988, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100061628(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6E61726165707061 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease(a2);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E61726165707061, 0xEA00000000006563, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_1000616B4()
{
  return 0x6E61726165707061;
}

_QWORD *sub_1000616D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_100007D50(&qword_10015B0D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001BF94(a1, v7);
  v10 = sub_1000618F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.CodingKeys, &type metadata for ViewModulesConfiguration.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_1000228FC(a1);
  }
  else
  {
    v11 = sub_100007D50(&qword_10015B0E0);
    HIBYTE(v18) = 0;
    v12 = sub_10006193C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v11, (char *)&v18 + 7, v3, v11, v12);
    v13 = v19;
    v14 = sub_1000619EC();
    v16 = Dictionary.mapKeys<A>(_:)(sub_100060B4C, 0, v13, &type metadata for String, &type metadata for ViewModulesConfiguration.ModuleSettings, &type metadata for ViewModulesConfiguration.Name, &protocol witness table for String, v14);
    swift_bridgeObjectRelease(v13);
    BYTE5(v18) = 1;
    v17 = sub_100061A30();
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 6), &type metadata for ViewModulesConfiguration.PresentationStyle, (char *)&v18 + 5, v3, &type metadata for ViewModulesConfiguration.PresentationStyle, v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)BYTE6(v18);
    sub_1000228FC(a1);
    swift_bridgeObjectRelease(v16);
  }
  return v9;
}

unint64_t sub_1000618F8()
{
  unint64_t result;

  result = qword_10015B0D8;
  if (!qword_10015B0D8)
  {
    result = swift_getWitnessTable(&unk_10010BC2C, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B0D8);
  }
  return result;
}

unint64_t sub_10006193C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B0E8;
  if (!qword_10015B0E8)
  {
    v1 = sub_100007D00(&qword_10015B0E0);
    sub_1000619A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015B0E8);
  }
  return result;
}

unint64_t sub_1000619A8()
{
  unint64_t result;

  result = qword_10015B0F0;
  if (!qword_10015B0F0)
  {
    result = swift_getWitnessTable(&unk_10010B744, &type metadata for ViewModulesConfiguration.ModuleSettings);
    atomic_store(result, (unint64_t *)&qword_10015B0F0);
  }
  return result;
}

unint64_t sub_1000619EC()
{
  unint64_t result;

  result = qword_10015B0F8;
  if (!qword_10015B0F8)
  {
    result = swift_getWitnessTable(&unk_10010BBEC, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015B0F8);
  }
  return result;
}

unint64_t sub_100061A30()
{
  unint64_t result;

  result = qword_10015B100;
  if (!qword_10015B100)
  {
    result = swift_getWitnessTable(&unk_10010B6A4, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015B100);
  }
  return result;
}

unint64_t sub_100061A74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B120;
  if (!qword_10015B120)
  {
    v1 = sub_100007D00(&qword_10015B118);
    sub_100061AE0();
    sub_100061B24();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10015B120);
  }
  return result;
}

unint64_t sub_100061AE0()
{
  unint64_t result;

  result = qword_10015B128;
  if (!qword_10015B128)
  {
    result = swift_getWitnessTable(&unk_10010B76C, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015B128);
  }
  return result;
}

unint64_t sub_100061B24()
{
  unint64_t result;

  result = qword_10015B130;
  if (!qword_10015B130)
  {
    result = swift_getWitnessTable(&unk_10010B71C, &type metadata for ViewModulesConfiguration.ModuleSettings);
    atomic_store(result, (unint64_t *)&qword_10015B130);
  }
  return result;
}

unint64_t sub_100061B68()
{
  unint64_t result;

  result = qword_10015B138;
  if (!qword_10015B138)
  {
    result = swift_getWitnessTable(&unk_10010B67C, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015B138);
  }
  return result;
}

unint64_t sub_100061BAC()
{
  unint64_t result;

  result = qword_10015B140;
  if (!qword_10015B140)
  {
    result = swift_getWitnessTable(&unk_10010BBB4, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015B140);
  }
  return result;
}

unint64_t sub_100061BF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_100007D50(&qword_10015B148);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = (unint64_t)sub_10001BF94(a1, v7);
  v10 = sub_100061D10();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_1000228FC(a1);
  }
  else
  {
    v11 = sub_100061D54();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance, v12, v3, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v15;
    sub_1000228FC(a1);
  }
  return v9;
}

unint64_t sub_100061D10()
{
  unint64_t result;

  result = qword_10015B150;
  if (!qword_10015B150)
  {
    result = swift_getWitnessTable(&unk_10010BB64, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B150);
  }
  return result;
}

unint64_t sub_100061D54()
{
  unint64_t result;

  result = qword_10015B158;
  if (!qword_10015B158)
  {
    result = swift_getWitnessTable(&unk_10010B6F4, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015B158);
  }
  return result;
}

unint64_t sub_100061D98()
{
  unint64_t result;

  result = qword_10015B168;
  if (!qword_10015B168)
  {
    result = swift_getWitnessTable(&unk_10010B6CC, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015B168);
  }
  return result;
}

unint64_t sub_100061DDC()
{
  unint64_t result;

  result = qword_10015B170;
  if (!qword_10015B170)
  {
    result = swift_getWitnessTable(&unk_10010BB2C, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015B170);
  }
  return result;
}

unint64_t sub_100061E20()
{
  unint64_t result;

  result = qword_10015B178;
  if (!qword_10015B178)
  {
    result = swift_getWitnessTable(&unk_10010BAF4, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015B178);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration.ModuleSettings.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100061EA4 + 4 * byte_10010B629[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100061EC4 + 4 * byte_10010B62E[v4]))();
}

_BYTE *sub_100061EA4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100061EC4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100061ECC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100061ED4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100061EDC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100061EE4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys;
}

_BYTE *sub_100061F08(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.CodingKeys()
{
  return &type metadata for ViewModulesConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings.Appearance()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance;
}

uint64_t _s15ShazamEventsApp24ViewModulesConfigurationV14ModuleSettingsV10AppearanceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100061F88 + 4 * byte_10010B638[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100061FBC + 4 * byte_10010B633[v4]))();
}

uint64_t sub_100061FBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061FC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061FCCLL);
  return result;
}

uint64_t sub_100061FD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061FE0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100061FE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061FEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.ModuleSettings()
{
  return &type metadata for ViewModulesConfiguration.ModuleSettings;
}

uint64_t getEnumTagSinglePayload for ViewModulesConfiguration.Name(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewModulesConfiguration.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000620E4 + 4 * byte_10010B642[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100062118 + 4 * byte_10010B63D[v4]))();
}

uint64_t sub_100062118(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062120(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062128);
  return result;
}

uint64_t sub_100062134(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006213CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100062140(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062148(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.Name()
{
  return &type metadata for ViewModulesConfiguration.Name;
}

uint64_t getEnumTagSinglePayload for PhoneWallpapersWatchFacesConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15ShazamEventsApp24ViewModulesConfigurationV17PresentationStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100062240 + 4 * byte_10010B64C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100062274 + 4 * byte_10010B647[v4]))();
}

uint64_t sub_100062274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006227C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062284);
  return result;
}

uint64_t sub_100062290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100062298);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006229C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000622A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewModulesConfiguration.PresentationStyle()
{
  return &type metadata for ViewModulesConfiguration.PresentationStyle;
}

unint64_t sub_1000622C4()
{
  unint64_t result;

  result = qword_10015B180;
  if (!qword_10015B180)
  {
    result = swift_getWitnessTable(&unk_10010B894, &type metadata for ViewModulesConfiguration.PresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10015B180);
  }
  return result;
}

unint64_t sub_10006230C()
{
  unint64_t result;

  result = qword_10015B188;
  if (!qword_10015B188)
  {
    result = swift_getWitnessTable(&unk_10010B924, &type metadata for ViewModulesConfiguration.ModuleSettings.Appearance);
    atomic_store(result, (unint64_t *)&qword_10015B188);
  }
  return result;
}

unint64_t sub_100062354()
{
  unint64_t result;

  result = qword_10015B190;
  if (!qword_10015B190)
  {
    result = swift_getWitnessTable(&unk_10010BA14, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B190);
  }
  return result;
}

unint64_t sub_10006239C()
{
  unint64_t result;

  result = qword_10015B198;
  if (!qword_10015B198)
  {
    result = swift_getWitnessTable(&unk_10010BACC, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B198);
  }
  return result;
}

unint64_t sub_1000623E4()
{
  unint64_t result;

  result = qword_10015B1A0;
  if (!qword_10015B1A0)
  {
    result = swift_getWitnessTable(&unk_10010BA3C, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B1A0);
  }
  return result;
}

unint64_t sub_10006242C()
{
  unint64_t result;

  result = qword_10015B1A8;
  if (!qword_10015B1A8)
  {
    result = swift_getWitnessTable(&unk_10010BA64, &type metadata for ViewModulesConfiguration.ModuleSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B1A8);
  }
  return result;
}

unint64_t sub_100062474()
{
  unint64_t result;

  result = qword_10015B1B0;
  if (!qword_10015B1B0)
  {
    result = swift_getWitnessTable(&unk_10010B8BC, &type metadata for ViewModulesConfiguration.Name);
    atomic_store(result, (unint64_t *)&qword_10015B1B0);
  }
  return result;
}

unint64_t sub_1000624BC()
{
  unint64_t result;

  result = qword_10015B1B8;
  if (!qword_10015B1B8)
  {
    result = swift_getWitnessTable(&unk_10010B94C, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B1B8);
  }
  return result;
}

unint64_t sub_100062504()
{
  unint64_t result;

  result = qword_10015B1C0;
  if (!qword_10015B1C0)
  {
    result = swift_getWitnessTable(&unk_10010B974, &type metadata for ViewModulesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10015B1C0);
  }
  return result;
}

unint64_t sub_100062548()
{
  unint64_t result;

  result = qword_10015B1C8;
  if (!qword_10015B1C8)
  {
    result = swift_getWitnessTable(&unk_10010B7E4, &type metadata for ViewModulesConfiguration);
    atomic_store(result, (unint64_t *)&qword_10015B1C8);
  }
  return result;
}

uint64_t sub_100062594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD v39[3];

  v3 = sub_100007D50(&qword_10015A610);
  __chkstk_darwin(v3);
  v5 = (char *)&v39[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015B290);
  __chkstk_darwin(v6);
  v8 = (char *)&v39[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015B298);
  __chkstk_darwin(v9);
  v11 = (char *)&v39[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(qword_10015B2A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v1 + 16);
  KeyPath = swift_getKeyPath(&unk_10010BDC0);
  v39[0] = v15;
  v17 = sub_100062A08();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, KeyPath, v17);
  swift_release(KeyPath);
  v18 = v15 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  swift_beginAccess(v15 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets, v39, 0, 0);
  sub_100062A50(v18, (uint64_t)v5);
  v19 = type metadata accessor for ArtistPromotionalAssets(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v19) == 1)
  {
    v21 = &qword_10015A610;
    v22 = (uint64_t)v5;
LABEL_16:
    sub_100007F38(v22, v21);
    goto LABEL_17;
  }
  ArtistPromotionalAssets.promotionalAssets.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v19);
  v23 = type metadata accessor for PromotionalAssets(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v23) == 1)
  {
    v21 = &qword_10015B290;
    v22 = (uint64_t)v8;
    goto LABEL_16;
  }
  v25 = PromotionalAssets.photoAlbums.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v23);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 16);
    v27 = type metadata accessor for PromotionalAssets.PhotoAlbum(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (v26)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v11, v25 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v27);
      v29 = 0;
    }
    else
    {
      v29 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v11, v29, 1, v27);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1, v27) == 1)
    {
      v21 = &qword_10015B298;
      v22 = (uint64_t)v11;
    }
    else
    {
      v30 = PromotionalAssets.PhotoAlbum.photos.getter();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v27);
      v31 = *(_QWORD *)(v30 + 16);
      v32 = type metadata accessor for PromotionalAssets.PhotoAlbum.Photo(0);
      v33 = *(_QWORD *)(v32 - 8);
      if (v31)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v14, v30 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)), v32);
        v34 = 0;
      }
      else
      {
        v34 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v14, v34, 1, v32);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v14, 1, v32) != 1)
      {
        PromotionalAssets.PhotoAlbum.Photo.url.getter();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v32);
        v37 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a1, 0, 1, v37);
      }
      v21 = qword_10015B2A0;
      v22 = (uint64_t)v14;
    }
    goto LABEL_16;
  }
LABEL_17:
  v35 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a1, 1, 1, v35);
}

uint64_t sub_100062964()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC15ShazamEventsApp31PromotionalAssetsEntryViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000629BC()
{
  return type metadata accessor for PromotionalAssetsEntryViewModel(0);
}

uint64_t type metadata accessor for PromotionalAssetsEntryViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B200;
  if (!qword_10015B200)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PromotionalAssetsEntryViewModel);
  return result;
}

unint64_t sub_100062A08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A618;
  if (!qword_10015A618)
  {
    v1 = type metadata accessor for PromotionalAssetsController(255);
    result = swift_getWitnessTable(&unk_100111BC8, v1);
    atomic_store(result, (unint64_t *)&qword_10015A618);
  }
  return result;
}

uint64_t sub_100062A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015A610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100062A98()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_100062AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for OpenURLAction(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.openURL.setter(v4);
}

uint64_t sub_100062B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a4 + 112) = v7;
  *(_QWORD *)(a4 + 128) = *(_QWORD *)(a1 + 128);
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v8;
  v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v10;
  v11 = type metadata accessor for RemoteViewConfiguration();
  v12 = sub_10001F9C0();
  *(_QWORD *)(a4 + 136) = EnvironmentObject.init()(v11, v12);
  *(_QWORD *)(a4 + 144) = v13;
  v15 = type metadata accessor for TicketView(0, a2, a3, v14);
  v16 = (_QWORD *)(a4 + *(int *)(v15 + 40));
  *v16 = swift_getKeyPath(&unk_10010BDF0);
  v17 = sub_100007D50(qword_100158AC8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  v18 = (_QWORD *)(a4 + *(int *)(v15 + 44));
  *v18 = swift_getKeyPath(&unk_10010BE20);
  v19 = sub_100007D50(&qword_1001582E8);
  return swift_storeEnumTagMultiPayload(v18, v19, 0);
}

uint64_t type metadata accessor for TicketView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TicketView);
}

uint64_t sub_100062C30()
{
  return EnvironmentValues.openURL.getter();
}

void sub_100062C54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_10010BE60;
  v6[1] = &unk_10010BE78;
  sub_10003C940(319, (unint64_t *)&qword_100159888, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003C940(319, (unint64_t *)&qword_100158BE8, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
    }
  }
}

uint64_t sub_100062D0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v24);
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v8 = a2[2];
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
    v9 = a2[4];
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v11 = a2[6];
    v10 = a2[7];
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v10;
    v12 = a2[8];
    *(_QWORD *)(a1 + 64) = v12;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v14 = a2[10];
    v13 = a2[11];
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v13;
    v15 = a2[12];
    *(_QWORD *)(a1 + 96) = v15;
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v17 = a2[14];
    v16 = a2[15];
    *(_QWORD *)(a1 + 112) = v17;
    *(_QWORD *)(a1 + 120) = v16;
    v18 = a2[16];
    v38 = a2[17];
    v19 = a2[18];
    *(_QWORD *)(a1 + 136) = v38;
    *(_QWORD *)(a1 + 144) = v19;
    v20 = *(int *)(a3 + 40);
    v36 = (uint64_t *)((char *)a2 + v20);
    v37 = (uint64_t *)(a1 + v20);
    *(_QWORD *)(a1 + 128) = v18;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_retain(v38);
    v21 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v36, v21) == 1)
    {
      v22 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v37, v36, v22);
      v23 = 1;
    }
    else
    {
      v25 = *v36;
      *v37 = *v36;
      swift_retain(v25);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v21, v23);
    v26 = *(int *)(a3 + 44);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v28;
      *v27 = *v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  return a1;
}

double sub_100062F3C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  swift_release(a1[17]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 40));
  v5 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 44));
  v8 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_100063058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v12;
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v15;
  v18 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v17;
  *(_QWORD *)(a1 + 144) = v19;
  v20 = *(int *)(a3 + 40);
  v35 = v17;
  v36 = (uint64_t *)(a1 + v20);
  v34 = (uint64_t *)(a2 + v20);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  swift_retain(v35);
  v21 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v34, v21) == 1)
  {
    v22 = type metadata accessor for DismissAction(0);
    v23 = v36;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v36, v34, v22);
    v24 = 1;
  }
  else
  {
    v25 = *v34;
    v23 = v36;
    *v36 = *v34;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v21, v24);
  v26 = *(int *)(a3 + 44);
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    v31 = 1;
  }
  else
  {
    v32 = *v28;
    *v27 = *v28;
    swift_retain(v32);
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v29, v31);
  return a1;
}

uint64_t sub_10006325C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v25;
  swift_retain(v25);
  swift_release(v24);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  if (a1 != a2)
  {
    v26 = *(int *)(a3 + 40);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)(a2 + v26);
    sub_100007F38(a1 + v26, qword_100158AC8);
    v29 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = 1;
    }
    else
    {
      v32 = *v28;
      *v27 = *v28;
      swift_retain(v32);
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v29, v31);
    v33 = *(int *)(a3 + 44);
    v34 = (uint64_t *)(a1 + v33);
    v35 = (uint64_t *)(a2 + v33);
    sub_100007F38(a1 + v33, &qword_1001582E8);
    v36 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
  }
  return a1;
}

uint64_t sub_1000634DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(int *)(a3 + 40);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v13 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = *(int *)(a3 + 44);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100063634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v20);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 40);
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_100007F38(a1 + v21, qword_100158AC8);
    v24 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    v26 = *(int *)(a3 + 44);
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    sub_100007F38(a1 + v26, &qword_1001582E8);
    v29 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100063844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100063850);
}

uint64_t sub_100063850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158B78);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000638F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063904);
}

uint64_t sub_100063904(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158670);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158B78);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000639A8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1001174F4, 1);
}

uint64_t sub_1000639DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t TupleTypeMetadata3;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;

  v90 = a2;
  v2 = *(_QWORD *)(a1 - 8);
  v87 = a1;
  v89 = *(_QWORD *)(v2 + 64);
  v4 = __chkstk_darwin(a1);
  v88 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NavigationPath(255, v4);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for Array(255, v7);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, v7, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v13 = sub_100007D00(&qword_10015B328);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v7, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v100 = (void *)v8;
  v101 = AssociatedTypeWitness;
  v102 = (void *)v13;
  v103 = (void *)WitnessTable;
  v104 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(255, &v100);
  v17 = sub_100007D00(&qword_10015B330);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v16, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v100 = &type metadata for Never;
  v101 = v19;
  v102 = &protocol witness table for Never;
  v103 = (void *)v20;
  v21 = type metadata accessor for List(255, &v100);
  v22 = type metadata accessor for PlainListStyle(255);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v21);
  v100 = (void *)v21;
  v101 = v22;
  v102 = (void *)v23;
  v103 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v25 = sub_100007D00(&qword_10015B338);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, OpaqueTypeMetadata2, &type metadata for Spacer, v25, 0, 0);
  v27 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v27);
  v29 = type metadata accessor for VStack(255, v27, v28);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v29);
  v100 = (void *)v29;
  v101 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v100 = (void *)v29;
  v101 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v100 = (void *)v31;
  v101 = OpaqueTypeConformance2;
  v33 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v34 = sub_100007D00(&qword_10015B340);
  v100 = (void *)v31;
  v101 = OpaqueTypeConformance2;
  v35 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v36 = sub_100007D00(&qword_10015B348);
  v37 = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v100 = (void *)v36;
  v101 = v37;
  v38 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v100 = (void *)v33;
  v101 = v34;
  v102 = (void *)v35;
  v103 = (void *)v38;
  v39 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v100 = (void *)v33;
  v101 = v34;
  v102 = (void *)v35;
  v103 = (void *)v38;
  v40 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v41 = type metadata accessor for NavigationStack(0, v6, v39, v40);
  v81 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v43 = (char *)&v76 - v42;
  v44 = type metadata accessor for ModifiedContent(0, v41, &type metadata for _AppearanceActionModifier);
  v85 = *(_QWORD *)(v44 - 8);
  v82 = v44;
  __chkstk_darwin(v44);
  v79 = (char *)&v76 - v45;
  v84 = type metadata accessor for ModifiedContent(0, v46, &type metadata for _AppearanceActionModifier);
  v86 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v80 = (char *)&v76 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v48);
  v83 = (uint64_t)&v76 - v50;
  v51 = v7;
  v76 = v7;
  v93 = v7;
  v94 = v11;
  v52 = v11;
  v77 = v11;
  v53 = v91;
  v95 = v91;
  NavigationStack.init<>(root:)(sub_100065BCC, v92, v39, v40, v49);
  v54 = v2;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v56 = v87;
  v55 = v88;
  v78(v88, v53, v87);
  v57 = *(unsigned __int8 *)(v54 + 80);
  v58 = (v57 + 32) & ~v57;
  v89 += v58;
  v59 = v57 | 7;
  v60 = swift_allocObject(&unk_10014AED8, v89, v57 | 7);
  *(_QWORD *)(v60 + 16) = v51;
  *(_QWORD *)(v60 + 24) = v52;
  v61 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
  v62 = v55;
  v61(v60 + v58, v55, v56);
  v63 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v41);
  v64 = v79;
  View.onAppear(perform:)(sub_100065BDC, v60, v41, v63);
  v65 = swift_release(v60);
  (*(void (**)(char *, uint64_t, __n128))(v81 + 8))(v43, v41, v65);
  v78(v62, v91, v56);
  v66 = swift_allocObject(&unk_10014AF00, v89, v59);
  v67 = v77;
  *(_QWORD *)(v66 + 16) = v76;
  *(_QWORD *)(v66 + 24) = v67;
  v61(v66 + v58, v62, v56);
  v98 = v63;
  v99 = &protocol witness table for _AppearanceActionModifier;
  v68 = v82;
  v69 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v82);
  v70 = (uint64_t)v80;
  View.onDisappear(perform:)(sub_100065BEC, v66, v68, v69);
  v71 = swift_release(v66);
  (*(void (**)(char *, uint64_t, __n128))(v85 + 8))(v64, v68, v71);
  v96 = v69;
  v97 = &protocol witness table for _AppearanceActionModifier;
  v72 = v84;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v84);
  v73 = v83;
  sub_10005135C(v70, v72, v83);
  v74 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v74(v70, v72);
  sub_1000424BC(v73, v72, v90);
  return ((uint64_t (*)(uint64_t, uint64_t))v74)(v73, v72);
}

uint64_t sub_1000640A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v22;
  uint64_t TupleTypeMetadata3;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96[16];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;

  v91 = a3;
  v85 = a1;
  v89 = a4;
  v88 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Array(255, a2);
  v8 = *(_QWORD *)(a3 + 16);
  v90 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v10 = sub_100007D00(&qword_10015B328);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v100 = (void *)v7;
  v101 = AssociatedTypeWitness;
  v102 = (void *)v10;
  v103 = (void *)WitnessTable;
  v104 = AssociatedConformanceWitness;
  v13 = type metadata accessor for ForEach(255, &v100);
  v14 = sub_100007D00(&qword_10015B330);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v100 = &type metadata for Never;
  v101 = v16;
  v102 = &protocol witness table for Never;
  v103 = (void *)v17;
  v18 = type metadata accessor for List(255, &v100);
  v19 = type metadata accessor for PlainListStyle(255);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v18);
  v100 = (void *)v18;
  v101 = v19;
  v102 = (void *)v20;
  v103 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v100, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v22 = sub_100007D00(&qword_10015B338);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, OpaqueTypeMetadata2, &type metadata for Spacer, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for VStack(0, v24, v25);
  v84 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v70 - v27;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v26);
  v100 = (void *)v26;
  v101 = v29;
  v30 = v29;
  v81 = v29;
  v31 = swift_getOpaqueTypeMetadata2(0, &v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v83 = *(_QWORD *)(v31 - 8);
  v32 = (void *)v31;
  __chkstk_darwin(v31);
  v80 = (char *)&v70 - v33;
  v100 = (void *)v26;
  v101 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v100 = v32;
  v101 = OpaqueTypeConformance2;
  v35 = v32;
  v76 = v32;
  v36 = OpaqueTypeConformance2;
  v77 = OpaqueTypeConformance2;
  v37 = swift_getOpaqueTypeMetadata2(0, &v100, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v82 = *(_QWORD *)(v37 - 8);
  v38 = (void *)v37;
  v75 = v37;
  __chkstk_darwin(v37);
  v79 = (char *)&v70 - v39;
  v40 = sub_100007D00(&qword_10015B340);
  v74 = v40;
  v100 = v35;
  v101 = v36;
  v41 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v73 = v41;
  v42 = sub_100007D00(&qword_10015B348);
  v43 = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v100 = (void *)v42;
  v101 = v43;
  v72 = swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v100 = v38;
  v101 = v40;
  v102 = (void *)v41;
  v103 = (void *)v72;
  v44 = swift_getOpaqueTypeMetadata2(0, &v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v78 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v46 = (char *)&v70 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v71 = (uint64_t)&v70 - v48;
  v97 = v90;
  v98 = v91;
  v49 = v85;
  v99 = v85;
  v51 = static HorizontalAlignment.center.getter(v50);
  VStack.init(alignment:spacing:content:)(v51, 0, 1, sub_100065C54, v96, v24, v25);
  v52 = v87;
  v53 = v86;
  v54 = v88;
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v88);
  v55 = v80;
  View.navigationBarTitleDisplayMode(_:)(v53, v26, v81);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v28, v26);
  v56 = *(_QWORD *)(v49 + 24);
  v57 = *(_QWORD *)(v49 + 32);
  v58 = *(unsigned __int8 *)(v49 + 40);
  v59 = *(_QWORD *)(v49 + 48);
  v60 = v49;
  v61 = v79;
  v62 = v76;
  View.navigationTitle(_:)(v56, v57, v58, v59, v76, v77);
  (*(void (**)(char *, void *))(v83 + 8))(v55, v62);
  v93 = v90;
  v94 = v91;
  v95 = v60;
  v63 = (void *)v75;
  v64 = v74;
  v65 = (void *)v73;
  v66 = (void *)v72;
  View.toolbar<A>(content:)(sub_100065C60, v92, v75, v74, v73, v72);
  (*(void (**)(char *, void *))(v82 + 8))(v61, v63);
  v100 = v63;
  v101 = v64;
  v102 = v65;
  v103 = v66;
  swift_getOpaqueTypeConformance2(&v100, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v67 = v71;
  sub_10005135C((uint64_t)v46, v44, v71);
  v68 = *(void (**)(char *, uint64_t))(v78 + 8);
  v68(v46, v44);
  sub_1000424BC(v67, v44, v89);
  return ((uint64_t (*)(uint64_t, uint64_t))v68)(v67, v44);
}

uint64_t sub_10006471C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void *v60;
  void *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  void *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *OpaqueTypeConformance2;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[16];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  unint64_t v95;
  _QWORD v96[3];
  void *v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  char v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110[3];

  v83 = a3;
  v85 = a1;
  v87 = a4;
  v6 = type metadata accessor for PlainListStyle(0);
  v86 = *(_QWORD *)(v6 - 8);
  v7 = v6;
  v78 = v6;
  __chkstk_darwin(v6);
  OpaqueTypeConformance2 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)type metadata accessor for Array(255, a2);
  v10 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v12 = sub_100007D00(&qword_10015B328);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v97 = v9;
  v98 = AssociatedTypeWitness;
  v99 = (void *)v12;
  v100 = (void *)WitnessTable;
  v101 = AssociatedConformanceWitness;
  v15 = type metadata accessor for ForEach(255, &v97);
  v16 = sub_100007D00(&qword_10015B330);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v15, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v97 = &type metadata for Never;
  v98 = v18;
  v99 = &protocol witness table for Never;
  v100 = (void *)v19;
  v20 = (_QWORD *)type metadata accessor for List(0, &v97);
  v79 = *(v20 - 1);
  __chkstk_darwin(v20);
  v22 = (char *)&v77 - v21;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v20);
  v97 = v20;
  v98 = v7;
  v99 = (void *)v23;
  v100 = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v97, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v88 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v26 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v77 - v29;
  v82 = (char *)&v77 - v29;
  v90 = a2;
  v91 = v83;
  v31 = v85;
  v92 = v85;
  v32 = List<>.init(content:)(sub_100065FAC, v89, v18, v19, v28);
  v33 = OpaqueTypeConformance2;
  PlainListStyle.init()(v32);
  v34 = v78;
  View.listStyle<A>(_:)(v33, v20, v78, v23, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v33, v34);
  (*(void (**)(char *, _QWORD *))(v79 + 8))(v22, v20);
  v97 = v20;
  v98 = v34;
  v99 = (void *)v23;
  v100 = &protocol witness table for PlainListStyle;
  OpaqueTypeConformance2 = (char *)swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v80 = v26;
  v81 = OpaqueTypeMetadata2;
  sub_10005135C((uint64_t)v26, OpaqueTypeMetadata2, (uint64_t)v30);
  v86 = *(_QWORD *)(v88 + 8);
  ((void (*)(char *, uint64_t))v86)(v26, OpaqueTypeMetadata2);
  v35 = *(_QWORD *)(v31 + 56);
  v36 = *(_QWORD *)(v31 + 64);
  v37 = *(unsigned __int8 *)(v31 + 72);
  v38 = *(_QWORD *)(v31 + 80);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v38);
  v39 = Text.init(_:tableName:bundle:comment:)(v35, v36, v37, v38, 0, 0, 0, 0, 0, 256);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v46 = static Font.Weight.regular.getter();
  v47 = Text.fontWeight(_:)(*(_QWORD *)&v46, 0, v39, v41, v45, v43);
  v49 = v48;
  v51 = v50;
  v53 = v52 & 1;
  sub_100007D90(v39, v41, v45);
  v54 = swift_bridgeObjectRelease(v43);
  v55 = static Font.footnote.getter(v54);
  v56 = (void *)Text.font(_:)(v55, v47, v49, v53, v51);
  v58 = v57;
  LOBYTE(v41) = v59;
  v61 = v60;
  swift_release(v55);
  sub_100007D90(v47, v49, v53);
  v62 = swift_bridgeObjectRelease(v51);
  LOBYTE(v55) = static Edge.Set.bottom.getter(v62);
  v63 = EdgeInsets.init(_all:)(25.0);
  v65 = v64;
  v67 = v66;
  v69 = v68;
  v70 = (uint64_t)v80;
  v71 = v82;
  v72 = v81;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v80, v82, v81);
  v108 = 0;
  v109 = 1;
  v110[0] = v70;
  v110[1] = (uint64_t)&v108;
  v97 = v56;
  v98 = v58;
  LOBYTE(v99) = v41 & 1;
  v100 = v61;
  v101 = 0x3FE0000000000000;
  v102 = v55;
  v103 = v63;
  v104 = v65;
  v105 = v67;
  v106 = v69;
  v107 = 0;
  v110[2] = (uint64_t)&v97;
  sub_10000F844((uint64_t)v56, v58, v41 & 1);
  swift_bridgeObjectRetain(v61);
  v96[0] = v72;
  v96[1] = &type metadata for Spacer;
  v96[2] = sub_100007D50(&qword_10015B338);
  v93 = OpaqueTypeConformance2;
  v94 = &protocol witness table for Spacer;
  v95 = sub_100065FB8();
  sub_100042510(v110, 3uLL, (uint64_t)v96);
  sub_100007D90((uint64_t)v56, v58, v41 & 1);
  swift_bridgeObjectRelease(v61);
  v73 = v71;
  v74 = (uint64_t (*)(uint64_t, uint64_t))v86;
  ((void (*)(char *, uint64_t))v86)(v73, v72);
  v75 = v100;
  sub_100007D90((uint64_t)v97, v98, (char)v99);
  swift_bridgeObjectRelease(v75);
  return v74(v70, v72);
}

uint64_t sub_100064D54@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, __int128 *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v73;
  char *v74;
  char *v75;
  void (*v76)(char *, __int128 *, uint64_t);
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD v106[2];
  uint64_t v107[3];
  _OWORD v108[8];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v99 = a3;
  v96 = a4;
  v7 = type metadata accessor for Optional(0);
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  __chkstk_darwin(v7);
  v90 = (char *)&v75 - v8;
  v89 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v9);
  v82 = v10;
  v83 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v92 = (char *)&v75 - v12;
  v93 = sub_100007D50(&qword_10015B330);
  __chkstk_darwin(v93);
  v95 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v94 = (char *)&v75 - v15;
  v98 = type metadata accessor for TicketView(0, a2, a3, v16);
  v17 = *(_QWORD *)(v98 - 8);
  v91 = *(char **)(v17 + 64);
  __chkstk_darwin(v98);
  v97 = (char *)&v75 - v18;
  v19 = type metadata accessor for Array(255, a2);
  v86 = v19;
  v20 = *(_QWORD *)(a3 + 16);
  v88 = v20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v20, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v85 = AssociatedTypeWitness;
  v22 = sub_100007D00(&qword_10015B328);
  v101 = v22;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  v87 = (void (*)(char *, char *, uint64_t))WitnessTable;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v20, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  *(_QWORD *)&v110 = v19;
  *((_QWORD *)&v110 + 1) = AssociatedTypeWitness;
  *(_QWORD *)&v111 = v22;
  *((_QWORD *)&v111 + 1) = WitnessTable;
  *(_QWORD *)&v112 = AssociatedConformanceWitness;
  v102 = type metadata accessor for ForEach(0, &v110);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v103 = (uint64_t)&v75 - v28;
  v29 = a1[7];
  v116 = a1[6];
  v117 = v29;
  v118 = *((_QWORD *)a1 + 16);
  v30 = a1[3];
  v112 = a1[2];
  v113 = v30;
  v31 = a1[5];
  v114 = a1[4];
  v115 = v31;
  v32 = a1[1];
  v110 = *a1;
  v111 = v32;
  v33 = v99;
  v84 = type metadata accessor for TicketViewModel(0, a2, v99, v34);
  *(_QWORD *)&v108[0] = sub_100066C80(v84);
  v35 = v17;
  v36 = *(void (**)(char *, __int128 *, uint64_t))(v17 + 16);
  v37 = v97;
  v38 = v98;
  v76 = v36;
  v36(v97, a1, v98);
  v39 = *(unsigned __int8 *)(v35 + 80);
  v40 = (v39 + 32) & ~v39;
  v75 = &v91[v40];
  v77 = v39 | 7;
  v41 = swift_allocObject(&unk_10014AF50, &v91[v40], v39 | 7);
  *(_QWORD *)(v41 + 16) = a2;
  *(_QWORD *)(v41 + 24) = v33;
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
  v43 = a2;
  v78 = v42;
  v79 = v40;
  v42(v41 + v40, v37, v38);
  v44 = sub_10000F4E0(&qword_10015B378, &qword_10015B328, (uint64_t)&protocol conformance descriptor for Button<A>);
  v45 = v89;
  ForEach<>.init(_:content:)(v108, sub_1000661E0, v41, v86, v85, v101, v87, v44, v88);
  v107[2] = v44;
  v46 = v102;
  v88 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v102);
  sub_10005135C((uint64_t)v26, v46, v103);
  v47 = *(void (**)(char *, uint64_t))(v100 + 8);
  v91 = v26;
  v47(v26, v46);
  v48 = a1[6];
  v49 = a1[7];
  v50 = a1[4];
  v108[5] = a1[5];
  v108[6] = v48;
  v108[7] = v49;
  v109 = *((_QWORD *)a1 + 16);
  v51 = a1[3];
  v108[2] = a1[2];
  v108[3] = v51;
  v108[4] = v50;
  v52 = a1[1];
  v108[0] = *a1;
  v108[1] = v52;
  v53 = v90;
  sub_100066F80(v84);
  v54 = v53;
  v55 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v54, 1, v43) == 1)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v81);
    v56 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v94, 1, 1);
  }
  else
  {
    v87 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v57 = v92;
    v87(v92, v54, v43);
    v58 = v97;
    v59 = v98;
    v76(v97, a1, v98);
    v60 = v83;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v83, v57, v43);
    v61 = *(unsigned __int8 *)(v55 + 80);
    v90 = (char *)v47;
    v62 = (unint64_t)&v75[v61] & ~v61;
    v63 = swift_allocObject(&unk_10014AF78, v62 + v82, v77 | v61);
    v64 = v99;
    *(_QWORD *)(v63 + 16) = v43;
    *(_QWORD *)(v63 + 24) = v64;
    v78(v63 + v79, v58, v59);
    v65 = ((uint64_t (*)(unint64_t, char *, uint64_t))v87)(v63 + v62, v60, v43);
    __chkstk_darwin(v65);
    *(&v75 - 4) = (char *)v43;
    *(&v75 - 3) = (char *)v64;
    v66 = v92;
    v73 = a1;
    v74 = v92;
    v67 = sub_100066320();
    v56 = (uint64_t)v94;
    Button.init(action:label:)(sub_100066310, v63, sub_100066314, &v75 - 6, &type metadata for TicketProviderRow, v67);
    v47 = (void (*)(char *, uint64_t))v90;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v56, 0, 1);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v66, v43);
  }
  v68 = (uint64_t)v91;
  v70 = v102;
  v69 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v91, v103, v102);
  v107[0] = v68;
  v71 = v95;
  sub_100066248(v56, v95);
  v107[1] = v71;
  v106[0] = v70;
  v106[1] = v93;
  v104 = v88;
  v105 = sub_100066290();
  sub_100042510(v107, 2uLL, (uint64_t)v106);
  sub_100007F38(v56, &qword_10015B330);
  v47((char *)v69, v70);
  sub_100007F38(v71, &qword_10015B330);
  return ((uint64_t (*)(uint64_t, uint64_t))v47)(v68, v70);
}

uint64_t sub_1000653C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a1;
  v29 = a4;
  v30 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(a1);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TicketView(0, v11, v12, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v27 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)&v27 - v17, a2, v13, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  v19 = *(unsigned __int8 *)(v14 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = *(unsigned __int8 *)(v8 + 80);
  v22 = (v15 + v21 + v20) & ~v21;
  v23 = swift_allocObject(&unk_10014AFA0, v22 + v9, v19 | v21 | 7);
  v24 = v29;
  *(_QWORD *)(v23 + 16) = a3;
  *(_QWORD *)(v23 + 24) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23 + v20, v18, v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v23 + v22, v10, a3);
  v32 = a3;
  v33 = v24;
  v34 = v28;
  v25 = sub_100066320();
  return Button.init(action:label:)(sub_100066310, v23, sub_1000665C0, v31, &type metadata for TicketProviderRow, v25);
}

void sub_10006554C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v29 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OpenURLAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TicketView(0, a3, a4, v14);
  sub_100018A2C((uint64_t)v13);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  OpenURLAction.callAsFunction(_:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v29);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = a1[7];
  v36 = a1[6];
  v37 = v15;
  v38 = *((_QWORD *)a1 + 16);
  v16 = a1[3];
  v32 = a1[2];
  v33 = v16;
  v17 = a1[5];
  v34 = a1[4];
  v35 = v17;
  v18 = a1[1];
  v30 = *a1;
  v31 = v18;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v22 = *((_QWORD *)a1 + 17);
  if (v22)
  {
    v23 = v19;
    v24 = v20;
    type metadata accessor for TicketViewModel(0, a3, a4, v21);
    swift_retain(v22);
    sub_100066D30(v23, v24, v22);
    swift_bridgeObjectRelease(v24);
    swift_release(v22);
  }
  else
  {
    v25 = *((_QWORD *)a1 + 18);
    v26 = type metadata accessor for RemoteViewConfiguration();
    v27 = sub_10001F9C0();
    EnvironmentObject.error()(0, v25, v26, v27);
    __break(1u);
  }
}

uint64_t sub_10006572C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = sub_100007D50(qword_100159268);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100109020;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v13 = v12;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_100066364();
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v13;
  result = String.init(format:_:)(v7, v8, v10);
  *a4 = result;
  a4[1] = v15;
  return result;
}

uint64_t sub_1000657DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100007D50(&qword_10015B348);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.navigationBarTrailing.getter(v11);
  v19 = a2;
  v20 = a3;
  v21 = a1;
  v14 = sub_100007D50(&qword_100158648);
  v15 = sub_10000F4E0(&qword_10015B358, &qword_100158648, (uint64_t)&protocol conformance descriptor for Button<A>);
  ToolbarItem<>.init(placement:content:)(v8, sub_100065C6C, v18, v14, v15);
  v16 = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v13, v9, v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_100065938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19[1] = a4;
  v7 = type metadata accessor for DismissAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v19 - v12;
  type metadata accessor for TicketView(0, a2, a3, v14);
  sub_100018E80((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_10014AF28, v16 + v9, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v17 + v16, v10, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v21 = a2;
  v22 = a3;
  v23 = a1;
  return Button.init(action:label:)(sub_100032FDC, v17, sub_100065FA0, v20, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_100065A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(unsigned __int8 *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  result = Text.init(_:tableName:bundle:comment:)(v3, v4, v5, v6, 0, 0, 0, 0, 0, 256);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v9 & 1;
  *(_QWORD *)(a2 + 24) = v10;
  return result;
}

void sub_100065B20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128))
{
  uint64_t v4;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 136);
  if (v4)
  {
    type metadata accessor for TicketViewModel(0, a2, a3, (uint64_t)a4);
    v6 = swift_retain(v4);
    a4(v6);
    swift_release(v4);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = type metadata accessor for RemoteViewConfiguration();
    v9 = sub_10001F9C0();
    EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
}

uint64_t sub_100065BCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000640A0(v1[4], v1[2], v1[3], a1);
}

void sub_100065BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100065BF8((void (*)(__n128))sub_100066FE8, a2, a3, a4);
}

void sub_100065BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100065BF8((void (*)(__n128))sub_100067030, a2, a3, a4);
}

void sub_100065BF8(void (*a1)(__n128), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TicketView(0, v6, v7, a4) - 8) + 80);
  sub_100065B20(v4 + ((v8 + 32) & ~v8), v6, v7, a1);
}

uint64_t sub_100065C54@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006471C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100065C60()
{
  uint64_t *v0;

  return sub_1000657DC(v0[4], v0[2], v0[3]);
}

uint64_t sub_100065C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100065938(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100065C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v31;
  _QWORD v32[2];

  v6 = sub_100007D50(&qword_10015A8B0);
  __chkstk_darwin(v6);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = a1;
  v32[1] = a2;
  sub_10001DB0C();
  swift_bridgeObjectRetain(a2);
  v9 = Text.init<A>(_:)(v32, &type metadata for String);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Font.callout.getter();
  v17 = Text.font(_:)(v16, v9, v11, v15, v13);
  v19 = v18;
  LOBYTE(a2) = v20;
  v31 = v21;
  swift_release(v16);
  LOBYTE(v16) = a2 & 1;
  sub_100007D90(v9, v11, v15);
  swift_bridgeObjectRelease(v13);
  v22 = Image.init(systemName:)(0xD00000000000001CLL, 0x8000000100113DF0);
  static SymbolRenderingMode.hierarchical.getter(v22);
  v23 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 0, 1, v23);
  v24 = Image.symbolRenderingMode(_:)(v8, v22);
  swift_release(v22);
  v25 = sub_100007F38((uint64_t)v8, &qword_10015A8B0);
  v26 = static Color.blue.getter(v25);
  v27 = static Font.title3.getter();
  KeyPath = swift_getKeyPath(&unk_10010BF58);
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v16;
  v29 = v31;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = v24;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = KeyPath;
  *(_QWORD *)(a3 + 72) = v27;
  sub_10000F844(v17, v19, v16);
  swift_bridgeObjectRetain(v29);
  sub_100007D90(v17, v19, v16);
  return swift_bridgeObjectRelease(v29);
}

void sub_100065E64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *v2;
  v4 = v2[1];
  v20 = static VerticalAlignment.center.getter(a1);
  v6 = sub_100065C78(v5, v4, (uint64_t)v21);
  v7 = v21[0];
  v8 = v21[1];
  v9 = v22;
  v10 = v23;
  v11 = v24;
  v12 = v25;
  v14 = v27;
  v13 = v28;
  v19 = v26;
  LOBYTE(v4) = static Edge.Set.vertical.getter(v6);
  v15 = EdgeInsets.init(_all:)(31.0);
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v11;
  *(_BYTE *)(a2 + 64) = v12;
  *(_OWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v13;
  *(_BYTE *)(a2 + 104) = v4;
  *(double *)(a2 + 112) = v15;
  *(_QWORD *)(a2 + 120) = v16;
  *(_QWORD *)(a2 + 128) = v17;
  *(_QWORD *)(a2 + 136) = v18;
  *(_BYTE *)(a2 + 144) = 0;
}

uint64_t sub_100065F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for DismissAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100065FA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100065A90(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100065FAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100064D54(*(__int128 **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100065FB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B360;
  if (!qword_10015B360)
  {
    v1 = sub_100007D00(&qword_10015B338);
    sub_100066024();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B360);
  }
  return result;
}

unint64_t sub_100066024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B368;
  if (!qword_10015B368)
  {
    v1 = sub_100007D00(&qword_10015B370);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B368);
  }
  return result;
}

uint64_t sub_10006608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = type metadata accessor for TicketView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8 + 128));
  swift_release(*(_QWORD *)(v4 + v8 + 136));
  v10 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 40));
  v11 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v4 + v8 + *(int *)(v5 + 44));
  v14 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_1000661E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TicketView(0, v6, v7, a2) - 8) + 80);
  return sub_1000653C0(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_100066248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015B330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100066290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B380;
  if (!qword_10015B380)
  {
    v1 = sub_100007D00(&qword_10015B330);
    sub_10000F4E0(&qword_10015B378, &qword_10015B328, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015B380);
  }
  return result;
}

uint64_t sub_100066314@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_10006572C(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100066320()
{
  unint64_t result;

  result = qword_10015B388;
  if (!qword_10015B388)
  {
    result = swift_getWitnessTable(&unk_10010BF04, &type metadata for TicketProviderRow);
    atomic_store(result, (unint64_t *)&qword_10015B388);
  }
  return result;
}

unint64_t sub_100066364()
{
  unint64_t result;

  result = qword_10015B390;
  if (!qword_10015B390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10015B390);
  }
  return result;
}

uint64_t sub_1000663AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TicketView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v23 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 128));
  swift_release(*(_QWORD *)(v4 + v9 + 136));
  v13 = (_QWORD *)(v4 + v9 + *(int *)(v6 + 40));
  v14 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v4 + v9 + *(int *)(v6 + 44));
  v17 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    v19 = swift_release(*v16);
  }
  v20 = (v9 + v23 + v11) & ~v11;
  v21 = v20 + v12;
  (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v4 + v20, v5, v19);
  return swift_deallocObject(v4, v21, v8 | v11 | 7);
}

void sub_100066550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for TicketView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  sub_10006554C((__int128 *)(v4 + v8), v4 + ((v8 + *(_QWORD *)(v7 + 64) + v9) & ~v9), v5, v6);
}

uint64_t sub_1000665C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v1 + 24) + 32))(*(_QWORD *)(v1 + 16));
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TicketProviderRow(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for TicketProviderRow(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for TicketProviderRow(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for TicketProviderRow()
{
  return &type metadata for TicketProviderRow;
}

uint64_t sub_10006669C(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v16;
  uint64_t TupleTypeMetadata3;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  uint64_t AssociatedTypeWitness;
  void *v38;
  void *WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v2 = *a1;
  v3 = a1[1];
  v4 = type metadata accessor for NavigationPath(255, a2);
  v5 = type metadata accessor for Array(255, v2);
  v6 = *(_QWORD *)(v3 + 16);
  v36 = (void *)v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v38 = (void *)sub_100007D00(&qword_10015B328);
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v7 = type metadata accessor for ForEach(255, &v36);
  v8 = sub_100007D00(&qword_10015B330);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v36 = &type metadata for Never;
  AssociatedTypeWitness = v10;
  v38 = &protocol witness table for Never;
  WitnessTable = (void *)v11;
  v12 = type metadata accessor for List(255, &v36);
  v13 = type metadata accessor for PlainListStyle(255);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v12);
  v36 = (void *)v12;
  AssociatedTypeWitness = v13;
  v38 = (void *)v14;
  WitnessTable = &protocol witness table for PlainListStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v36, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
  v16 = sub_100007D00(&qword_10015B338);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, OpaqueTypeMetadata2, &type metadata for Spacer, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for VStack(255, v18, v19);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v20);
  v36 = (void *)v20;
  AssociatedTypeWitness = v21;
  v22 = swift_getOpaqueTypeMetadata2(255, &v36, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v36 = (void *)v20;
  AssociatedTypeWitness = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v36 = (void *)v22;
  AssociatedTypeWitness = OpaqueTypeConformance2;
  v24 = swift_getOpaqueTypeMetadata2(255, &v36, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
  v25 = sub_100007D00(&qword_10015B340);
  v36 = (void *)v22;
  AssociatedTypeWitness = OpaqueTypeConformance2;
  v26 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v27 = sub_100007D00(&qword_10015B348);
  v28 = sub_10000F4E0(&qword_10015B350, &qword_10015B348, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v36 = (void *)v27;
  AssociatedTypeWitness = v28;
  v29 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v36 = (void *)v24;
  AssociatedTypeWitness = v25;
  v38 = (void *)v26;
  WitnessTable = (void *)v29;
  v30 = swift_getOpaqueTypeMetadata2(255, &v36, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v36 = (void *)v24;
  AssociatedTypeWitness = v25;
  v38 = (void *)v26;
  WitnessTable = (void *)v29;
  v31 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v32 = type metadata accessor for NavigationStack(255, v4, v30, v31);
  v33 = type metadata accessor for ModifiedContent(255, v32, &type metadata for _AppearanceActionModifier);
  v34 = type metadata accessor for ModifiedContent(255, v33, &type metadata for _AppearanceActionModifier);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v32);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v34);
}

uint64_t sub_100066A44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117528, 1);
}

unint64_t sub_100066A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B398;
  if (!qword_10015B398)
  {
    v1 = sub_100007D00(&qword_10015B3A0);
    sub_10000F4E0(&qword_10015B3A8, qword_10015B3B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015B398);
  }
  return result;
}

void sub_100066AE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v35;

  v5 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x8000000100113E10);
  v30 = v6;
  v31 = v5;
  v28 = v7;
  v29 = v8;
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000024, 0x8000000100113E40);
  v26 = v10;
  v27 = v9;
  v12 = v11;
  v14 = v13;
  v15 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000023, 0x8000000100113D10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v35._object = (void *)0xE000000000000000;
  v23._object = (void *)0x8000000100113E70;
  v23._countAndFlagsBits = 0xD00000000000001DLL;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v35);

  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = v31;
  *(_QWORD *)(a4 + 32) = v30;
  *(_BYTE *)(a4 + 40) = v28 & 1;
  *(_QWORD *)(a4 + 48) = v29;
  *(_QWORD *)(a4 + 56) = v27;
  *(_QWORD *)(a4 + 64) = v12;
  *(_BYTE *)(a4 + 72) = v14 & 1;
  *(_QWORD *)(a4 + 80) = v26;
  *(_QWORD *)(a4 + 88) = v15;
  *(_QWORD *)(a4 + 96) = v17;
  *(_BYTE *)(a4 + 104) = v19 & 1;
  *(_QWORD *)(a4 + 112) = v21;
  *(Swift::String *)(a4 + 120) = v25;
}

uint64_t sub_100066C80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  _OWORD v9[2];

  *(_QWORD *)&v8[0] = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Array(0, v2);
  swift_bridgeObjectRetain(*(_QWORD *)&v8[0]);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3);
  Collection.dropFirst(_:)(v9, 1, v3, WitnessTable);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v5 = type metadata accessor for ArraySlice(0, v2);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v5);
  return Array.init<A>(_:)(v8, v2, v5, v6);
}

void sub_100066D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  ValueWitnessTable *v17;
  uint64_t v18;
  char *v19;
  NSString v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void **aBlock;
  uint64_t v26;
  Class (*v27)(uint64_t);
  ValueMetadata *v28;
  _QWORD *(*v29)();
  _QWORD *v30;
  char *v31;

  v7 = sub_100007D50(&qword_100159260);
  v8 = swift_allocObject(v7, 152, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10010BF90;
  v10 = *v3;
  v9 = v3[1];
  *(_QWORD *)(v8 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v8 + 64) = &off_10015BAD8;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v10;
  *(_QWORD *)(v8 + 48) = v9;
  *(_QWORD *)(v8 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v8 + 104) = &off_10015BAB0;
  *(_BYTE *)(v8 + 72) = 6;
  *(_QWORD *)(v8 + 136) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v8 + 144) = &off_10015BB10;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a2;
  *(_BYTE *)(v8 + 128) = 1;
  v11 = *(_QWORD *)(a3 + 72);
  if (v11)
  {
    v12 = *(_QWORD *)(a3 + 64);
    v13 = *(_QWORD *)(a3 + 72);
  }
  else
  {
    v12 = 0;
    v13 = 0xE000000000000000;
  }
  v28 = &type metadata for AnalyticsString;
  v29 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v26 = v12;
  v27 = (Class (*)(uint64_t))v13;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v11);
  v31 = sub_100089D00((char *)1, 4, 1, (char *)v8);
  v14 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v17->initializeWithCopy)((uint64_t)v16, v18);
  sub_10008A6F0(3, (uint64_t)v16, (uint64_t *)&v31, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v19 = v31;
  v20 = String._bridgeToObjectiveC()();
  v21 = (_QWORD *)swift_allocObject(&unk_10014B0F0, 40, 7);
  v21[2] = 0xD00000000000001ELL;
  v21[3] = 0x80000001001131B0;
  v21[4] = v19;
  v29 = sub_100067720;
  v30 = v21;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_100089C8C;
  v28 = (ValueMetadata *)&unk_10014B108;
  v22 = _Block_copy(&aBlock);
  v23 = v30;
  swift_bridgeObjectRetain(v19);
  swift_release(v23);
  AnalyticsSendEventLazy(v20, v22);
  _Block_release(v22);
  swift_bridgeObjectRelease(v19);

}

uint64_t sub_100066F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t WitnessTable;

  v1 = type metadata accessor for Array(0, *(_QWORD *)(a1 + 16));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
  return Collection.first.getter(v1, WitnessTable);
}

uint64_t sub_100066FE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  sub_10008AB1C(v4, v3, 6, a1);
  return swift_bridgeObjectRelease(v3);
}

void sub_100067030(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  ValueWitnessTable *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void **aBlock;
  uint64_t v22;
  Class (*v23)(uint64_t);
  ValueMetadata *v24;
  _QWORD *(*v25)();
  _QWORD *v26;
  char *v27;

  v3 = sub_100007D50(&qword_100159260);
  v4 = swift_allocObject(v3, 192, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100109440;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(v4 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v4 + 64) = &off_10015BAD8;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v4 + 104) = &off_10015BAB0;
  *(_BYTE *)(v4 + 72) = 6;
  *(_QWORD *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v4 + 144) = &off_10015BB38;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v4 + 184) = &off_10015BB10;
  *(_OWORD *)(v4 + 152) = xmmword_10010BFA0;
  *(_BYTE *)(v4 + 168) = 3;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  v24 = &type metadata for AnalyticsString;
  v25 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v22 = v8;
  v23 = (Class (*)(uint64_t))v9;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v27 = sub_100089D00((char *)1, 5, 1, (char *)v4);
  v10 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v13->initializeWithCopy)((uint64_t)v12, v14);
  sub_10008A6F0(4, (uint64_t)v12, (uint64_t *)&v27, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v15 = v27;
  v16 = String._bridgeToObjectiveC()();
  v17 = (_QWORD *)swift_allocObject(&unk_10014B0A0, 40, 7);
  v17[2] = 0xD00000000000001ELL;
  v17[3] = 0x80000001001131B0;
  v17[4] = v15;
  v25 = sub_100022948;
  v26 = v17;
  aBlock = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_100089C8C;
  v24 = (ValueMetadata *)&unk_10014B0B8;
  v18 = _Block_copy(&aBlock);
  v19 = v26;
  swift_bridgeObjectRetain(v15);
  swift_release(v19);
  AnalyticsSendEventLazy(v16, v18);
  _Block_release(v18);
  swift_bridgeObjectRelease(v15);

}

uint64_t sub_100067294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000672A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000672B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000672DC(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t sub_10006733C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v10;
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v13;
  v15 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v15;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100067420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 sub_100067564(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100067598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100067664(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000676AC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for TicketViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TicketViewModel);
}

uint64_t sub_100067724()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010C0A0);
  v2 = swift_getKeyPath(&unk_10010C0C8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100067794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  _QWORD v34[2];

  v33 = a6;
  v32 = a5;
  v11 = sub_100007D50(&qword_10015B538);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID);
  *v15 = 0x3534333939343832;
  v15[1] = 0xE900000000000039;
  v16 = (_QWORD *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID);
  *v16 = 0xD000000000000024;
  v16[1] = 0x8000000100113F50;
  v17 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle;
  *(_QWORD *)v17 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x8000000100113F80);
  *(_QWORD *)(v17 + 8) = v18;
  *(_BYTE *)(v17 + 16) = v19 & 1;
  *(_QWORD *)(v17 + 24) = v20;
  v21 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle;
  *(_QWORD *)v21 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000030, 0x8000000100113FB0);
  *(_QWORD *)(v21 + 8) = v22;
  *(_BYTE *)(v21 + 16) = v23 & 1;
  *(_QWORD *)(v21 + 24) = v24;
  v25 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel__metricsQuery;
  v34[0] = 0;
  v34[1] = 0;
  v26 = sub_100007D50((uint64_t *)&unk_10015CE10);
  Published.init(initialValue:)(v34, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v25, v14, v11);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v27 = v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_eventURL;
  v28 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a3, v28);
  v29 = (_QWORD *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID);
  v30 = v32;
  *v29 = a4;
  v29[1] = v30;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shouldShowDiscoveryDetail) = v33;
  return v6;
}

uint64_t sub_10006797C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v1[24] = v0;
  v1[25] = *v0;
  v2 = type metadata accessor for URLComponents(0);
  v1[26] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[27] = v3;
  v1[28] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v1[29] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[30] = v6;
  v1[31] = v7;
  return swift_task_switch(sub_100067A18, v6, v7);
}

uint64_t sub_100067A18()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 200));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = objc_msgSend(v2, "bundleIdentifier");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015E670 + dword_10015E670);
  v7 = (_QWORD *)swift_task_alloc(unk_10015E674);
  *(_QWORD *)(v0 + 256) = v7;
  *v7 = v0;
  v7[1] = sub_100067B00;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_100067B00()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  return swift_task_switch(sub_100067B4C, *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248));
}

uint64_t sub_100067B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = v0 + 16;
  swift_release(*(_QWORD *)(v0 + 232));
  sub_1000684E4(v0 + 32, v0 + 80);
  sub_1000684E4(v0 + 80, v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  if (v2 && (v3 = *(_QWORD *)(v0 + 56)) != 0)
  {
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = sub_100007D50(&qword_10015B548);
    v7 = type metadata accessor for URLQueryItem(0);
    v8 = (_QWORD *)swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
    *((_OWORD *)v8 + 1) = xmmword_100108810;
    if (qword_100158160 != -1)
      swift_once(&qword_100158160, sub_1000C7B8C);
    URLQueryItem.init(name:value:)(qword_10015E650, *(_QWORD *)algn_10015E658, v4, v2);
    if (qword_100158168 != -1)
      swift_once(&qword_100158168, sub_1000C7BA4);
    URLQueryItem.init(name:value:)(qword_10015E660, *(_QWORD *)algn_10015E668, v5, v3);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  v9 = v8[2];
  swift_bridgeObjectRelease();
  if (v9)
  {
    URLComponents.init()(v10);
    sub_1000684E4(v0 + 80, v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    if (v11 && (v12 = *(_QWORD *)(v0 + 56)) != 0)
    {
      v27 = *(_QWORD *)(v0 + 64);
      v28 = *(_QWORD *)(v0 + 48);
      v13 = sub_100007D50(&qword_10015B548);
      v14 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
      v15 = (_QWORD *)swift_allocObject(v13, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ 2 * *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
      *((_OWORD *)v15 + 1) = xmmword_100108810;
      if (qword_100158160 != -1)
        swift_once(&qword_100158160, sub_1000C7B8C);
      URLQueryItem.init(name:value:)(qword_10015E650, *(_QWORD *)algn_10015E658, v27, v11);
      v1 = v0 + 16;
      if (qword_100158168 != -1)
        swift_once(&qword_100158168, sub_1000C7BA4);
      URLQueryItem.init(name:value:)(qword_10015E660, *(_QWORD *)algn_10015E668, v28, v12);
    }
    else
    {
      v15 = _swiftEmptyArrayStorage;
    }
    v17 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 192);
    sub_1000684E4(v1, v0 + 96);
    sub_100050338(v0 + 96);
    sub_100050338(v0 + 80);
    sub_1000684E4(v0 + 48, v0 + 112);
    sub_100050338(v0 + 112);
    v20 = URLComponents.queryItems.setter(v15);
    v21 = URLComponents.percentEncodedQuery.getter(v20);
    v23 = v22;
    KeyPath = swift_getKeyPath(&unk_10010C0A0);
    v25 = swift_getKeyPath(&unk_10010C0C8);
    *(_QWORD *)(v0 + 176) = v21;
    *(_QWORD *)(v0 + 184) = v23;
    swift_retain(v19);
    static Published.subscript.setter(v0 + 176, v19, KeyPath, v25);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  else
  {
    sub_1000684E4(v0 + 16, v0 + 128);
    sub_100050338(v0 + 128);
    sub_100050338(v0 + 80);
    sub_1000684E4(v0 + 48, v0 + 144);
    sub_100050338(v0 + 144);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100067EE8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  ValueWitnessTable *v21;
  uint64_t v22;
  char *v23;
  NSString v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  void **aBlock;
  uint64_t v30;
  Class (*v31)(uint64_t);
  ValueMetadata *v32;
  _QWORD *(*v33)();
  _QWORD *v34;
  char *v35;

  v9 = sub_100007D50(&qword_100159260);
  v10 = swift_allocObject(v9, 192, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100109440;
  v12 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v10 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v10 + 64) = &off_10015BAD8;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v12;
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v10 + 104) = &off_10015BAB0;
  *(_BYTE *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v10 + 144) = &off_10015BB38;
  *(_BYTE *)(v10 + 112) = 6;
  *(_QWORD *)(v10 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v10 + 184) = &off_10015BB10;
  *(_QWORD *)(v10 + 152) = a1;
  *(_QWORD *)(v10 + 160) = a2;
  *(_BYTE *)(v10 + 168) = a3;
  v13 = *(_QWORD *)(a4 + 72);
  if (v13)
  {
    v14 = *(_QWORD *)(a4 + 64);
    v15 = *(_QWORD *)(a4 + 72);
  }
  else
  {
    v14 = 0;
    v15 = 0xE000000000000000;
  }
  v32 = &type metadata for AnalyticsString;
  v33 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v30 = v14;
  v31 = (Class (*)(uint64_t))v15;
  swift_bridgeObjectRetain(v11);
  sub_1000227F8(a1, a2, a3);
  v35 = (char *)v10;
  v17 = *(_QWORD *)(v10 + 16);
  v16 = *(_QWORD *)(v10 + 24);
  swift_bridgeObjectRetain(v13);
  if (v17 >= v16 >> 1)
    v35 = sub_100089D00((char *)(v16 > 1), v17 + 1, 1, (char *)v10);
  v18 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v21->initializeWithCopy)((uint64_t)v20, v22);
  sub_10008A6F0(v17, (uint64_t)v20, (uint64_t *)&v35, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v23 = v35;
  v24 = String._bridgeToObjectiveC()();
  v25 = (_QWORD *)swift_allocObject(&unk_10014B1A0, 40, 7);
  v25[2] = 0xD00000000000001ELL;
  v25[3] = 0x80000001001131B0;
  v25[4] = v23;
  v33 = sub_100022948;
  v34 = v25;
  aBlock = _NSConcreteStackBlock;
  v30 = 1107296256;
  v31 = sub_100089C8C;
  v32 = (ValueMetadata *)&unk_10014B1B8;
  v26 = _Block_copy(&aBlock);
  v27 = v34;
  swift_bridgeObjectRetain(v23);
  swift_release(v27);
  AnalyticsSendEventLazy(v24, v26);
  _Block_release(v26);
  swift_bridgeObjectRelease();

}

uint64_t sub_10006817C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_eventURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_queryAppID + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_shazamItemID + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_productVariantID + 8));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_subheaderTitle + 24));
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel_descriptionTitle + 24));
  swift_bridgeObjectRelease(v4);
  v5 = v0 + OBJC_IVAR____TtC15ShazamEventsApp12AppViewModel__metricsQuery;
  v6 = sub_100007D50(&qword_10015B538);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_100068270()
{
  uint64_t v0;

  sub_10006817C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100068294()
{
  return type metadata accessor for AppViewModel(0);
}

uint64_t type metadata accessor for AppViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B468;
  if (!qword_10015B468)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppViewModel);
  return result;
}

void sub_1000682D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = &unk_10010C008;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_10010C020;
    v6[3] = &unk_10010C038;
    v6[4] = &unk_10010C008;
    v6[5] = &unk_10010C008;
    v6[6] = &unk_10010C050;
    v6[7] = &unk_10010C050;
    sub_100068390(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_100068390(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015B478)
  {
    v2 = sub_100007D00((uint64_t *)&unk_10015CE10);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015B478);
  }
}

double sub_1000683E8@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010C0A0);
  v5 = swift_getKeyPath(&unk_10010C0C8);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_100068464(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010C0A0);
  v6 = swift_getKeyPath(&unk_10010C0C8);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_1000684E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50((uint64_t *)&unk_10015CE10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100068534()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100068560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100068570(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100068578(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = " ";
  v4[2] = &unk_10010C1B0;
  v4[3] = " ";
  v4[4] = " ";
  v4[5] = " ";
  v4[6] = " ";
  v4[7] = " ";
  v4[8] = &unk_10010C1B0;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = &unk_10010C1C8;
  v4[13] = &unk_10010C1C8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(result - 8) + 64;
    return swift_initClassMetadata2(a1, 0, 15, v4, a1 + 96);
  }
  return result;
}

uint64_t sub_100068638()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C228);
  sub_100068A04(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 264);
}

double sub_100068688()
{
  return sub_1000689B4() * 0.5075 * 0.87;
}

double sub_1000686B4()
{
  return sub_1000689B4() * 0.96;
}

double sub_1000686D8()
{
  double v0;

  v0 = sub_100068AFC();
  return (v0 + sub_1000689B4() * -0.5075) * 0.5;
}

BOOL sub_100068714()
{
  _QWORD *v0;

  return Array.count.getter(v0[30], *(_QWORD *)(*v0 + 80)) > 1;
}

double sub_100068740()
{
  return sub_1000689B4() * -0.022;
}

double sub_100068760()
{
  return sub_1000689B4() * 0.5075 * 0.9;
}

double sub_10006878C()
{
  return sub_1000689B4() * 0.97;
}

double sub_1000687AC()
{
  return sub_1000689B4() * 0.5075 * 0.87 * 0.14;
}

uint64_t sub_1000687E4(char a1)
{
  return sub_100068BC8(a1, (uint64_t)&unk_10010C2D0, (uint64_t)sub_100069080);
}

uint64_t sub_1000687F8()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C2D0);
  sub_100068A04(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 265);
}

uint64_t sub_100068848()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;

  v0 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v0 = v4;

  }
  else
  {
    v3 = 0;
  }
  v5._countAndFlagsBits = v3;
  v5._object = v0;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v0);
  URL.init(string:)(0xD00000000000001FLL, 0x80000001001142A0);
  return swift_bridgeObjectRelease(0x80000001001142A0);
}

uint64_t sub_100068938(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  sub_100068C44(a1, a2, a3, a4, a5, a6);
  return v13;
}

double sub_1000689B4()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C260);
  sub_100068A04(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 248);
}

uint64_t sub_100068A04(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_10010C208, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_100068A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_10010C208, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_100068AFC()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010C298);
  sub_100068A04(KeyPath);
  swift_release(KeyPath);
  return *(double *)(v0 + 256);
}

void sub_100068B4C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a1);
  v8 = v3;
  v9 = a3;
  sub_100068A64(KeyPath, a2, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
}

uint64_t sub_100068BC8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)v3 + 80);
  KeyPath = swift_getKeyPath(a2);
  v9 = v3;
  v10 = a1;
  sub_100068A64(KeyPath, a3, (uint64_t)&v8, (uint64_t)&type metadata for () + 8);
  return swift_release(KeyPath);
}

uint64_t sub_100068C44(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  *(_QWORD *)(v6 + 16) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x8000000100114110);
  *(_QWORD *)(v6 + 24) = v13;
  *(_BYTE *)(v6 + 32) = v14 & 1;
  *(_QWORD *)(v6 + 40) = v15;
  *(_QWORD *)(v6 + 48) = 0x7A6542656E6F6870;
  *(_QWORD *)(v6 + 56) = 0xEA00000000006C65;
  *(_QWORD *)(v6 + 64) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x8000000100114140);
  *(_QWORD *)(v6 + 72) = v16;
  *(_BYTE *)(v6 + 80) = v17 & 1;
  *(_QWORD *)(v6 + 88) = v18;
  *(_QWORD *)(v6 + 96) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100114170);
  *(_QWORD *)(v6 + 104) = v19;
  *(_BYTE *)(v6 + 112) = v20 & 1;
  *(_QWORD *)(v6 + 120) = v21;
  *(_QWORD *)(v6 + 128) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000041, 0x80000001001141B0);
  *(_QWORD *)(v6 + 136) = v22;
  *(_BYTE *)(v6 + 144) = v23 & 1;
  *(_QWORD *)(v6 + 152) = v24;
  *(_QWORD *)(v6 + 160) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000048, 0x8000000100114200);
  *(_QWORD *)(v6 + 168) = v25;
  *(_BYTE *)(v6 + 176) = v26 & 1;
  *(_QWORD *)(v6 + 184) = v27;
  *(_QWORD *)(v6 + 192) = LocalizedStringKey.init(stringLiteral:)(0xD000000000000047, 0x8000000100114250);
  *(_QWORD *)(v6 + 200) = v28;
  *(_BYTE *)(v6 + 208) = v29 & 1;
  *(_QWORD *)(v6 + 216) = v30;
  *(_BYTE *)(v6 + 265) = 0;
  ObservationRegistrar.init()();
  *(_QWORD *)(v6 + 224) = a1;
  *(_QWORD *)(v6 + 232) = a2;
  *(_QWORD *)(v6 + 240) = a3;
  *(double *)(v6 + 248) = a5;
  *(double *)(v6 + 256) = a6;
  *(_BYTE *)(v6 + 264) = a4;
  return v6;
}

_QWORD *sub_100068DCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = v0[3];
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[7]);
  v2 = v0[9];
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v2);
  v3 = v0[13];
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v3);
  v4 = v0[17];
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v4);
  v5 = v0[21];
  swift_bridgeObjectRelease(v0[23]);
  swift_bridgeObjectRelease(v5);
  v6 = v0[25];
  swift_bridgeObjectRelease(v0[27]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v0[29]);
  swift_bridgeObjectRelease(v0[30]);
  v7 = (char *)v0 + qword_10015B550;
  v8 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return v0;
}

uint64_t sub_100068EA0()
{
  uint64_t v0;

  sub_100068DCC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for PhoneWallpaperViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhoneWallpaperViewModel);
}

uint64_t sub_100068ED0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100068638();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100068EFC(char *a1)
{
  return sub_100068BC8(*a1, (uint64_t)&unk_10010C228, (uint64_t)sub_100068F48);
}

uint64_t sub_100068F30()
{
  return 16;
}

__n128 sub_100068F3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100068F48()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 264) = *(_BYTE *)(v0 + 24);
}

void sub_100068F58(double *a1@<X8>)
{
  *a1 = sub_1000689B4();
}

void sub_100068F80(double *a1)
{
  sub_100068B4C((uint64_t)&unk_10010C260, (uint64_t)sub_100068FCC, *a1);
}

uint64_t sub_100068FB4()
{
  return 16;
}

__n128 sub_100068FC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100068FCC()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 248) = result;
  return result;
}

void sub_100068FDC(double *a1@<X8>)
{
  *a1 = sub_100068AFC();
}

void sub_100069004(double *a1)
{
  sub_100068B4C((uint64_t)&unk_10010C298, (uint64_t)sub_100069050, *a1);
}

uint64_t sub_100069038()
{
  return 16;
}

__n128 sub_100069044(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_100069050()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 256) = result;
  return result;
}

uint64_t sub_100069068()
{
  return 16;
}

__n128 sub_100069074(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100069080()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 265) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100069090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[11] = v6;
  v3[12] = v7;
  return swift_task_switch(sub_100069100, v6, v7);
}

uint64_t sub_100069100()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 40) = v5;
  v2 = sub_10002BA68((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v2, v1);
  v3 = (_QWORD *)swift_task_alloc(dword_100159684);
  *(_QWORD *)(v0 + 104) = v3;
  *v3 = v0;
  v3[1] = sub_100069184;
  return sub_100028B38(v0 + 16);
}

uint64_t sub_100069184()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_100069224;
  }
  else
  {
    sub_1000228FC(v2 + 2);
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000691F0;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000691F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069224()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  sub_1000228FC((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069270()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v0 = Venue.address.getter();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  v2 = objc_msgSend((id)objc_opt_self(CNPostalAddressFormatter), "stringFromPostalAddress:style:", v0, 0);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

unint64_t sub_1000692F4(uint64_t a1)
{
  unint64_t result;

  result = sub_100069318();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100069318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B5E0[0];
  if (!qword_10015B5E0[0])
  {
    v1 = type metadata accessor for Venue(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Venue, v1);
    atomic_store(result, qword_10015B5E0);
  }
  return result;
}

uint64_t sub_100069360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  _QWORD v10[2];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    swift_getAssociatedTypeWitness(255, *(_QWORD *)(a1 + 88), v2, &unk_100118C4C, &unk_100118C5C);
    v5 = type metadata accessor for Optional(255);
    v6 = type metadata accessor for Published(319, v5);
    v3 = v6;
    if (v7 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v6 - 8) + 64;
      inited = swift_initClassMetadata2(a1, 0, 2, v10, a1 + 96);
      if (inited)
        return inited;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t sub_100069424()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010C3A0);
  v2 = swift_getKeyPath(&unk_10010C3D8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t *sub_1000694B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 96), v2);
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  swift_getAssociatedTypeWitness(255, *(_QWORD *)(v1 + 88), v2, &unk_100118C4C, &unk_100118C5C);
  v4 = type metadata accessor for Optional(255);
  v5 = type metadata accessor for Published(0, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  return v0;
}

uint64_t sub_100069550()
{
  uint64_t v0;

  sub_1000694B4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for MusicController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MusicController);
}

uint64_t sub_100069588()
{
  return 16;
}

__n128 sub_100069594(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000695A0()
{
  return sub_100007428(&qword_10015B668, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&unk_10010A678);
}

uint64_t sub_1000695D8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007428(&qword_10015B6B0, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
  result = sub_100007428(qword_10015B6B8, (uint64_t (*)(uint64_t))&type metadata accessor for Artist, (uint64_t)&protocol conformance descriptor for Artist);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100069634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *sub_100069668(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[2];
  v4 = a1[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_1000696A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTabViewModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTabViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SafeAreaModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SafeAreaModifier);
}

uint64_t sub_100069774(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100117808, 1);
}

uint64_t sub_1000697A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];

  v42 = a3;
  v43 = a4;
  v41 = a2;
  v44 = a1;
  v45 = a7;
  v39 = a6;
  v9 = type metadata accessor for SafeAreaModifier(255, a5, a6, a4);
  WitnessTable = swift_getWitnessTable(&unk_10010C4A0, v9);
  v11 = type metadata accessor for _ViewModifier_Content(255, v9, WitnessTable);
  v12 = sub_100007D00(&qword_100158898);
  v13 = type metadata accessor for _PreferenceWritingModifier(255, a5, a6);
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v48[2] = sub_100015DCC();
  v48[3] = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v13);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v16 = type metadata accessor for GeometryReader(255, v14, v15);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v16);
  v38 = type metadata accessor for _BackgroundModifier(255, v16, v17);
  v18 = type metadata accessor for ModifiedContent(0, v11, v38);
  v40 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - v22;
  v24 = (_QWORD *)swift_allocObject(&unk_10014B470, 56, 7);
  v25 = v39;
  v24[2] = a5;
  v24[3] = v25;
  v26 = v42;
  v24[4] = v41;
  v24[5] = v26;
  v27 = v43;
  v24[6] = v43;
  swift_retain(v27);
  v28 = GeometryReader.init(content:)(sub_100069CA4, v24, v14, v15);
  v30 = v29;
  v48[0] = v28;
  v48[1] = v29;
  v31 = static Alignment.center.getter(v28);
  v33 = v32;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
  View.background<A>(_:alignment:)(v48, v31, v33, v11, v16, v34, v17);
  swift_release(v30);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v38);
  v46 = v34;
  v47 = v35;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  sub_10005135C((uint64_t)v20, v18, (uint64_t)v23);
  v36 = *(void (**)(char *, uint64_t))(v40 + 8);
  v36(v20, v18);
  sub_1000424BC((uint64_t)v23, v18, v45);
  return ((uint64_t (*)(char *, uint64_t))v36)(v23, v18);
}

uint64_t sub_100069A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t WitnessTable;
  void (*v26)(char *, uint64_t);
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;

  v28[1] = a1;
  v28[2] = a4;
  v32 = a2;
  v33 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5, &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value);
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)v28 - v11;
  v13 = sub_100007D00(&qword_100158898);
  v14 = type metadata accessor for _PreferenceWritingModifier(255, a5, a6);
  v15 = type metadata accessor for ModifiedContent(0, v13, v14);
  v31 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)v28 - v19;
  v22 = static Color.clear.getter(v21);
  KeyPath = swift_getKeyPath(&unk_10010C4F0);
  v37 = v22;
  v23 = GeometryProxy.safeAreaInsets.getter();
  a3(v23);
  v24 = sub_100015DCC();
  View.preference<A>(key:value:)(v32, v12, v13, a5, v24, a6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  swift_release(KeyPath);
  swift_release(v37);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v14);
  v34 = v24;
  v35 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  sub_10005135C((uint64_t)v17, v15, (uint64_t)v20);
  v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v17, v15);
  sub_1000424BC((uint64_t)v20, v15, v33);
  return ((uint64_t (*)(char *, uint64_t))v26)(v20, v15);
}

uint64_t sub_100069C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_1000697A8(a1, *v3, v3[1], v3[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_100069C80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100069CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100069A5C(a1, *(_QWORD *)(v2 + 32), *(void (**)(uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100069CBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SafeAreaModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_10010C4A0, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_100007D00(&qword_100158898);
  v10 = type metadata accessor for _PreferenceWritingModifier(255, v4, v5);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  sub_100015DCC();
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v10);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for GeometryReader(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v13);
  v15 = type metadata accessor for _BackgroundModifier(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v8, v15);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

uint64_t sub_100069E14()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010C568);
  v2 = swift_getKeyPath(&unk_10010C590);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_100069E78()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010C5B0);
  v2 = swift_getKeyPath(&unk_10010C5D8);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100069EE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100007D50(&qword_10015B838);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015B790);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10010C568);
  v12 = swift_getKeyPath(&unk_10010C590);
  static Published.subscript.getter(v2, KeyPath, v12);
  swift_release(KeyPath);
  v13 = swift_release(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v10, 1, v4, v13))
  {
    sub_10006A7E8((uint64_t)v10);
    v14 = type metadata accessor for Venue(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    sub_10006A7E8((uint64_t)v10);
    VenueSchedule.venue.getter(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = type metadata accessor for Venue(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
}

uint64_t sub_10006A078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100007D50(&qword_10015B790) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v4);
  v3[8] = swift_task_alloc(v4);
  v3[9] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v3[11] = v7;
  v3[12] = v8;
  return swift_task_switch(sub_10006A128, v7, v8);
}

uint64_t sub_10006A128()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[6];
  v4 = sub_100007D50(&qword_10015B838);
  v0[13] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v0[14] = v5;
  v5(v1, 1, 1, v4);
  KeyPath = swift_getKeyPath(&unk_10010C568);
  v7 = swift_getKeyPath(&unk_10010C590);
  sub_10006A7A0(v1, v2);
  swift_retain(v3);
  static Published.subscript.setter(v2, v3, KeyPath, v7);
  sub_10006A7E8(v1);
  v8 = swift_getKeyPath(&unk_10010C5B0);
  v9 = swift_getKeyPath(&unk_10010C5D8);
  v0[2] = 0;
  swift_retain(v3);
  static Published.subscript.setter(v0 + 2, v3, v8, v9);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to static Venue.schedule(id:)[1]);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_10006A258;
  return static Venue.schedule(id:)(v0[7], v0[4], v0[5]);
}

uint64_t sub_10006A258()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10006A380;
  else
    v4 = sub_10006A2B8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_10006A2B8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = swift_release(*(_QWORD *)(v0 + 80));
  v2(v4, 0, 1, v1, v6);
  KeyPath = swift_getKeyPath(&unk_10010C568);
  v8 = swift_getKeyPath(&unk_10010C590);
  sub_10006A7A0(v4, v3);
  swift_retain(v5);
  static Published.subscript.setter(v3, v5, KeyPath, v8);
  sub_10006A7E8(v4);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  KeyPath = swift_getKeyPath(&unk_10010C5B0);
  v4 = swift_getKeyPath(&unk_10010C5D8);
  *(_QWORD *)(v0 + 24) = v1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 24, v2, KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__schedule;
  v2 = sub_100007D50(&qword_10015B828);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__error;
  v4 = sub_100007D50(&qword_10015B830);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006A4A8()
{
  return type metadata accessor for VenueController(0);
}

uint64_t type metadata accessor for VenueController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015B778;
  if (!qword_10015B778)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VenueController);
  return result;
}

void sub_10006A4EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10006A594(319, &qword_10015B788, &qword_10015B790);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006A594(319, &qword_10015B798, (uint64_t *)&unk_10015B7A0);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_10006A594(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100007D00(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10006A5E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = sub_100007D50(&qword_10015B830);
  v1 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015B828);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015B790);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__schedule;
  v15 = sub_100007D50(&qword_10015B838);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  sub_10006A7A0((uint64_t)v13, (uint64_t)v11);
  Published.init(initialValue:)(v11, v8);
  sub_10006A7E8((uint64_t)v13);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  v16 = v0 + OBJC_IVAR____TtC15ShazamEventsApp15VenueController__error;
  v20 = 0;
  v17 = sub_100007D50((uint64_t *)&unk_10015B7A0);
  Published.init(initialValue:)(&v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v16, v3, v19);
  return v0;
}

uint64_t sub_10006A7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015B790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A7E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015B790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006A838()
{
  return sub_100007428(&qword_10015B848, (uint64_t (*)(uint64_t))&type metadata accessor for Genre, (uint64_t)&unk_10010F6E8);
}

uint64_t sub_10006A864(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117A30, 1);
}

uint64_t sub_10006A874()
{
  return sub_100007428(&qword_10015B850, (uint64_t (*)(uint64_t))&type metadata accessor for Playlist, (uint64_t)&unk_10010F8C0);
}

uint64_t sub_10006A8A0()
{
  return sub_100007428((unint64_t *)&qword_10015B858, (uint64_t (*)(uint64_t))&type metadata accessor for PromotionalAssets, (uint64_t)&unk_10010A780);
}

uint64_t sub_10006A8CC()
{
  return sub_100007428(&qword_10015B860, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist, (uint64_t)&unk_10010CE0C);
}

uint64_t sub_10006A8F8()
{
  return sub_100007428(&qword_10015B868, (uint64_t (*)(uint64_t))&type metadata accessor for Ticket, (uint64_t)&unk_10010FB80);
}

_UNKNOWN **sub_10006A924()
{
  return &off_10014D670;
}

uint64_t sub_10006A930()
{
  return sub_100007428(&qword_10015B870, (uint64_t (*)(uint64_t))&type metadata accessor for Venue, (uint64_t)&unk_10010C304);
}

uint64_t sub_10006A970(uint64_t a1)
{
  return Event<>.tickets.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_10006A980(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007428(&qword_10015B998, (uint64_t (*)(uint64_t))&type metadata accessor for LiveMusic, (uint64_t)&protocol conformance descriptor for LiveMusic);
  return Event<>.participants.getter(a1, v2);
}

uint64_t sub_10006A9D0(uint64_t a1)
{
  return Event<>.venues.getter(a1, &protocol witness table for LiveMusic);
}

uint64_t sub_10006A9E8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10000F4E0(&qword_10015B978, &qword_10015A6A0, (uint64_t)&protocol conformance descriptor for Event<A>);
  result = sub_10000F4E0(&qword_10015B980, &qword_10015A6A0, (uint64_t)&protocol conformance descriptor for Event<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10006AA44()
{
  return sub_10000F4E0(&qword_10015B988, &qword_10015B990, (uint64_t)&unk_100112CB0);
}

uint64_t sub_10006AA70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - v8;
  v27 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &unk_10011790C, &unk_100117964);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v26 - v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(a2 + 200))(a1, a2, v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_10011790C, &unk_100117954);
  sub_100093160(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v12);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  DateInterval.end.getter(v19);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v27);
  static Date.now.getter(v20);
  v21 = static Date.< infix(_:_:)(v9, v6);
  v22 = *(void (**)(char *, uint64_t))(v28 + 8);
  v23 = v6;
  v24 = v29;
  v22(v23, v29);
  v22(v9, v24);
  return v21 & 1;
}

uint64_t *sub_10006AC44(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Artwork(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100007D50(&qword_10015B9A0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[7];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for URL(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100007D50(&qword_100158658);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[8];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v26);
  }
  return v4;
}

uint64_t sub_10006ADF8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Artwork(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_QWORD *sub_10006AEC4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Artwork(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100007D50(&qword_10015B9A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100007D50(&qword_100158658);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  return a1;
}

_QWORD *sub_10006B04C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Artwork(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100007D50(&qword_10015B9A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = sub_100007D50(&qword_100158658);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_10006B288(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Artwork(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100007D50(&qword_10015B9A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100007D50(&qword_100158658);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

_QWORD *sub_10006B3EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Artwork(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100007D50(&qword_10015B9A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = sub_100007D50(&qword_100158658);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_13:
  v27 = a3[8];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_10006B600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B60C);
}

uint64_t sub_10006B60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_10015B9A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158658);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10006B6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B6C0);
}

uint64_t sub_10006B6C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_10015B9A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100007D50(&qword_100158658);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AppleMusicSetlist(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BA00;
  if (!qword_10015BA00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleMusicSetlist);
  return result;
}

void sub_10006B7A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_10010C6C8;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10006B85C(319, (unint64_t *)&unk_10015BA10, (void (*)(uint64_t))&type metadata accessor for Artwork);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006B85C(319, (unint64_t *)&qword_1001593D8, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_10010C6C8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_10006B85C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    a3(255);
    v5 = type metadata accessor for Optional(a1);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_10006B8A8()
{
  return sub_100007428(&qword_10015BA50, (uint64_t (*)(uint64_t))&type metadata accessor for Artwork, (uint64_t)&unk_100111EEC);
}

uint64_t sub_10006B8D4()
{
  return sub_100007428(&qword_10015BA58, (uint64_t (*)(uint64_t))&type metadata accessor for Song, (uint64_t)&unk_100111ED0);
}

uint64_t sub_10006B900()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10006B92C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006B934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007E78(v2 + *(int *)(a1 + 24), a2, &qword_10015B9A0);
}

uint64_t sub_10006B95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100007E78(v2 + *(int *)(a1 + 28), a2, &qword_100158658);
}

uint64_t sub_10006B984(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 32));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10006B9B8(char a1)
{
  return qword_10010CA38[a1];
}

ValueMetadata *type metadata accessor for AnalyticsPageName()
{
  return &type metadata for AnalyticsPageName;
}

uint64_t destroy for RemoteViewConfiguration.QueryItem(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp23RemoteViewConfigurationC9QueryItemVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.QueryItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for AnalyticsString()
{
  return &type metadata for AnalyticsString;
}

uint64_t sub_10006BAC0(char *a1, char *a2)
{
  return sub_10005FD74(*a1, *a2);
}

Swift::Int sub_10006BACC()
{
  char *v0;

  return sub_10005FDF8(*v0);
}

uint64_t sub_10006BAD4(uint64_t a1)
{
  char *v1;

  return sub_1000603A8(a1, *v1);
}

Swift::Int sub_10006BADC(uint64_t a1)
{
  char *v1;

  return sub_1000603E8(a1, *v1);
}

unint64_t sub_10006BAE4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006C9DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006BB10@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10006B9B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006BB38(char a1)
{
  return *(_QWORD *)&aEvent_12[8 * a1];
}

uint64_t sub_10006BB58()
{
  unsigned __int8 *v0;

  return *v0;
}

id sub_10006BB60()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithString:", v3);

  return v4;
}

uint64_t sub_10006BBD4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10006C1A8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10006BB38);
}

Swift::Int sub_10006BBE0(uint64_t a1, uint64_t a2)
{
  return sub_10006C240(a1, a2, (uint64_t (*)(uint64_t))sub_10006BB38);
}

uint64_t sub_10006BBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C2B0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10006BB38);
}

Swift::Int sub_10006BBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C2FC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10006BB38);
}

unint64_t sub_10006BC04@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006CA24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006BC30@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10006BB38(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006BC58(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006BC90 + 4 * byte_10010C700[a1]))(0xD000000000000011, 0x8000000100112E50);
}

uint64_t sub_10006BC90()
{
  return 0x7261626C6F6F74;
}

uint64_t sub_10006BCA8()
{
  return 0x726564616568;
}

uint64_t sub_10006BCBC()
{
  return 0x7261646E656C6163;
}

uint64_t sub_10006BD18()
{
  return 0x6C75646F4D707061;
}

uint64_t sub_10006BD34()
{
  return 0x737265746C6966;
}

uint64_t sub_10006BD4C()
{
  return 0x694C73746E657665;
}

uint64_t sub_10006BD68()
{
  return 0x646F4D636973756DLL;
}

uint64_t sub_10006BD9C()
{
  return 0x7473694C746573;
}

uint64_t sub_10006BDB4()
{
  return 0x507473694C746573;
}

uint64_t sub_10006BDD8()
{
  return 0x736F65646976;
}

uint64_t sub_10006BDEC()
{
  return 2;
}

id sub_10006BDF4(uint64_t a1, uint64_t a2)
{
  return sub_10006C558(a1, a2, (void (*)(_QWORD))sub_10006BB38);
}

uint64_t sub_10006BE04(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction()
{
  return &type metadata for AnalyticsModuleAction;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName()
{
  return &type metadata for AnalyticsModuleName;
}

uint64_t _s15ShazamEventsApp17AnalyticsPageNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15ShazamEventsApp17AnalyticsPageNameV9ValueTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10006BF30 + 4 * byte_10010C713[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10006BF64 + 4 * byte_10010C70E[v4]))();
}

uint64_t sub_10006BF64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006BF6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006BF74);
  return result;
}

uint64_t sub_10006BF80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006BF88);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10006BF8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006BF94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsPageName.ValueType()
{
  return &type metadata for AnalyticsPageName.ValueType;
}

uint64_t getEnumTagSinglePayload for RemoteViewConfiguration.Service.Name(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006C08C + 4 * byte_10010C71D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006C0C0 + 4 * byte_10010C718[v4]))();
}

uint64_t sub_10006C0C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C0C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006C0D0);
  return result;
}

uint64_t sub_10006C0DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006C0E4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006C0E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C0F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsKey()
{
  return &type metadata for AnalyticsKey;
}

unint64_t sub_10006C110()
{
  unint64_t result;

  result = qword_10015BB00;
  if (!qword_10015BB00)
  {
    result = swift_getWitnessTable(&unk_10010C884, &type metadata for AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_10015BB00);
  }
  return result;
}

unint64_t sub_10006C158()
{
  unint64_t result;

  result = qword_10015BB08;
  if (!qword_10015BB08)
  {
    result = swift_getWitnessTable(&unk_10010C924, &type metadata for AnalyticsPageName.ValueType);
    atomic_store(result, (unint64_t *)&qword_10015BB08);
  }
  return result;
}

uint64_t sub_10006C19C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10006C1A8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_10006BC58);
}

uint64_t sub_10006C1A8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    v14 = 1;
    v13 = v9;
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_10006C234(uint64_t a1, uint64_t a2)
{
  return sub_10006C240(a1, a2, (uint64_t (*)(uint64_t))sub_10006BC58);
}

Swift::Int sub_10006C240(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v5 = *v3;
  Hasher.init(_seed:)(v10, 0);
  v6 = a3(v5);
  v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_10006C2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C2B0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_10006BC58);
}

uint64_t sub_10006C2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a4(*v4);
  v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_10006C2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006C2FC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10006BC58);
}

Swift::Int sub_10006C2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v6 = *v4;
  Hasher.init(_seed:)(v11, a1);
  v7 = a4(v6);
  v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

unint64_t sub_10006C35C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006CDCC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006C388@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10006BC58(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006C3B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006C3E8 + 4 * byte_10010C722[a1]))(0xD000000000000011, 0x8000000100112E50);
}

uint64_t sub_10006C3E8()
{
  return 0x7261626C6F6F74;
}

uint64_t sub_10006C400()
{
  return 0x726564616568;
}

uint64_t sub_10006C414()
{
  return 0x7261646E656C6163;
}

uint64_t sub_10006C470()
{
  return 0x6C75646F4D707061;
}

uint64_t sub_10006C48C()
{
  return 0x737265746C6966;
}

uint64_t sub_10006C4A4()
{
  return 0x694C73746E657665;
}

uint64_t sub_10006C4C0()
{
  return 0x646F4D636973756DLL;
}

uint64_t sub_10006C4F4()
{
  return 0x7473694C746573;
}

uint64_t sub_10006C50C()
{
  return 0x507473694C746573;
}

uint64_t sub_10006C530()
{
  return 0x736F65646976;
}

uint64_t sub_10006C544()
{
  return 3;
}

id sub_10006C54C(uint64_t a1, uint64_t a2)
{
  return sub_10006C558(a1, a2, (void (*)(_QWORD))sub_10006C3B0);
}

id sub_10006C558(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;

  a3(*v3);
  v5 = v4;
  v6 = objc_allocWithZone((Class)NSString);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend(v6, "initWithString:", v7);

  return v8;
}

uint64_t sub_10006C5D0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >= 3u)
    __asm { BR              X9 }
  sub_1000227F8(a1, a2, a3);
  return a1;
}

void sub_10006C638()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C64C()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C660()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C678()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C698()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C6BC()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C6DC()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C6F4()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C718()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C730()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C750()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C770()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C790()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C870()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C888()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C8A8()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C8C8()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C8E4()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C908()
{
  JUMPOUT(0x10006C5F0);
}

void sub_10006C92C()
{
  JUMPOUT(0x10006C5F0);
}

uint64_t sub_10006C94C()
{
  uint64_t v0;

  return sub_10006C5D0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10006C958()
{
  return 4;
}

id sub_10006C960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;

  sub_10006C5D0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  v2 = v1;
  v3 = objc_allocWithZone((Class)NSString);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithString:", v4);

  return v5;
}

unint64_t sub_10006C9DC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147A58, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_10006CA24(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147AF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t destroy for AnalyticsModuleAction.ValueType(uint64_t a1)
{
  return sub_10006BE04(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000227F8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000227F8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10006BE04(v6, v7, v8);
  return a1;
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10006BE04(v4, v5, v6);
  return a1;
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s15ShazamEventsApp21AnalyticsModuleActionV9ValueTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10006CBE8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_10006CC00(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleAction.ValueType()
{
  return &type metadata for AnalyticsModuleAction.ValueType;
}

uint64_t _s15ShazamEventsApp19AnalyticsModuleNameV9ValueTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15ShazamEventsApp19AnalyticsModuleNameV9ValueTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_10006CD04 + 4 * byte_10010C752[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10006CD38 + 4 * byte_10010C74D[v4]))();
}

uint64_t sub_10006CD38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006CD40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006CD48);
  return result;
}

uint64_t sub_10006CD54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006CD5CLL);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_10006CD60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006CD68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsModuleName.ValueType()
{
  return &type metadata for AnalyticsModuleName.ValueType;
}

unint64_t sub_10006CD88()
{
  unint64_t result;

  result = qword_10015BB60;
  if (!qword_10015BB60)
  {
    result = swift_getWitnessTable(&unk_10010C9E4, &type metadata for AnalyticsModuleName.ValueType);
    atomic_store(result, (unint64_t *)&qword_10015BB60);
  }
  return result;
}

unint64_t sub_10006CDCC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100147C00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

uint64_t sub_10006CE18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v22 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v22);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    v9 = (void *)a2[8];
    v8 = a2[9];
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v8;
    v10 = a2[10];
    *(_QWORD *)(a1 + 80) = v10;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v11 = a2[12];
    v12 = a2[13];
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v12;
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)a2 + v13);
    v15 = (uint64_t *)(a1 + v13);
    *(_QWORD *)(a1 + 112) = a2[14];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v16 = v9;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_retain(v12);
    v17 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v14, v17) == 1)
    {
      v18 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v14, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v23 = *v14;
      *v15 = *v14;
      swift_retain(v23);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

double sub_10006CF78(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 104));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_10006D020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(void **)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v7;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t *)(a2 + v12);
  v14 = (uint64_t *)(a1 + v12);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v15 = v8;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  v16 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v13, v16) == 1)
  {
    v17 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v13, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v13;
    *v14 = *v13;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  return a1;
}

uint64_t sub_10006D14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(void **)(a1 + 64);
  v13 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = v13;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v20;
  swift_retain(v20);
  swift_release(v19);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 24);
    v22 = (uint64_t *)(a1 + v21);
    v23 = (uint64_t *)(a2 + v21);
    sub_100007F38(a1 + v21, &qword_1001582E8);
    v24 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  return a1;
}

uint64_t sub_10006D2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v10 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10006D3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (a1 != a2)
  {
    v17 = *(int *)(a3 + 24);
    v18 = (void *)(a1 + v17);
    v19 = (const void *)(a2 + v17);
    sub_100007F38(a1 + v17, &qword_1001582E8);
    v20 = sub_100007D50(&qword_1001582E8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10006D4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006D508);
}

uint64_t sub_10006D508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_100158B78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10006D588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006D594);
}

uint64_t sub_10006D594(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_100158B78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LocationModule(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BBC0;
  if (!qword_10015BBC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationModule);
  return result;
}

void sub_10006D648(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "h";
  v4[1] = &unk_10010CB50;
  sub_1000198CC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10006D6C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117BCC, 1);
}

uint64_t sub_10006D6D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t KeyPath;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  v2 = v1;
  v75 = a1;
  v3 = sub_100007D50(&qword_10015A250);
  __chkstk_darwin(v3);
  v71 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100007D50(&qword_100158640);
  __chkstk_darwin(v69);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (__int128 *)((char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100007D50(&qword_10015BC00);
  __chkstk_darwin(v10);
  v70 = (uint64_t *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_100007D50(&qword_10015BC08);
  __chkstk_darwin(v72);
  v74 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007D50(&qword_10015BC10);
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_10015BC18);
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v15 = static HorizontalAlignment.leading.getter(v19);
  *((_QWORD *)v15 + 1) = 0x4030000000000000;
  v15[16] = 0;
  v20 = sub_100007D50(&qword_10015BC20);
  v21 = sub_10006DC30(v2, (uint64_t)&v15[*(int *)(v20 + 44)]);
  v22 = static Edge.Set.all.getter(v21);
  sub_100007E78((uint64_t)v15, (uint64_t)v18, &qword_10015BC10);
  v23 = *(int *)(v16 + 36);
  v73 = v18;
  v24 = &v18[v23];
  *v24 = v22;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v24[40] = 1;
  sub_100007F38((uint64_t)v15, &qword_10015BC10);
  if (qword_1001580B0 != -1)
    swift_once(&qword_1001580B0, sub_10005144C);
  v25 = qword_10016A4C8;
  KeyPath = swift_getKeyPath(&unk_10010CBB8);
  v27 = (char *)v9 + *(int *)(v7 + 20);
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  v30 = v7;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104);
  v31(v27, v28, v29);
  __asm { FMOV            V0.2D, #12.0 }
  v68 = _Q0;
  *v9 = _Q0;
  sub_10001BFB8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v6[*(int *)(v69 + 36)] = 256;
  v37 = *(int *)(v10 + 36);
  v38 = v70;
  sub_100007E78((uint64_t)v6, (uint64_t)v70 + v37, &qword_100158640);
  *v38 = KeyPath;
  v38[1] = v25;
  swift_retain_n(v25, 2);
  swift_retain(KeyPath);
  sub_100007F38((uint64_t)v6, &qword_100158640);
  sub_10000F854((uint64_t)v9);
  swift_release(v25);
  v39 = swift_release(KeyPath);
  v40 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v31)((char *)v9 + *(int *)(v30 + 20), v28, v29, v39);
  *v9 = v68;
  v41 = static Color.black.getter(v40);
  v42 = Color.opacity(_:)(0.1);
  swift_release(v41);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v76, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v43 = v71;
  sub_10001BFB8((uint64_t)v9, v71, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v44 = v43 + *(int *)(sub_100007D50(&qword_10015A258) + 36);
  v45 = v76[1];
  *(_OWORD *)v44 = v76[0];
  *(_OWORD *)(v44 + 16) = v45;
  *(_QWORD *)(v44 + 32) = v77;
  v46 = sub_100007D50(&qword_10015A260);
  *(_QWORD *)(v43 + *(int *)(v46 + 52)) = v42;
  *(_WORD *)(v43 + *(int *)(v46 + 56)) = 256;
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  v50 = (uint64_t *)(v43 + *(int *)(sub_100007D50(&qword_10015A268) + 36));
  *v50 = v47;
  v50[1] = v49;
  v51 = sub_10000F854((uint64_t)v9);
  v52 = static Alignment.center.getter(v51);
  v54 = v53;
  v55 = (uint64_t)v74;
  v56 = (uint64_t)&v74[*(int *)(v72 + 36)];
  sub_100007E78(v43, v56, &qword_10015A250);
  v57 = (uint64_t *)(v56 + *(int *)(sub_100007D50(&qword_10015A248) + 36));
  *v57 = v52;
  v57[1] = v54;
  sub_100007E78((uint64_t)v38, v55, &qword_10015BC00);
  sub_100007F38(v43, &qword_10015A250);
  v58 = sub_100007F38((uint64_t)v38, &qword_10015BC00);
  v59 = static Alignment.center.getter(v58);
  v61 = v60;
  v62 = sub_100007D50(&qword_10015BC28);
  v63 = v75;
  v64 = v75 + *(int *)(v62 + 36);
  sub_100007E78(v55, v64, &qword_10015BC08);
  v65 = (uint64_t *)(v64 + *(int *)(sub_100007D50(&qword_10015BC30) + 36));
  *v65 = v59;
  v65[1] = v61;
  v66 = (uint64_t)v73;
  sub_100007E78((uint64_t)v73, v63, &qword_10015BC18);
  sub_100007F38(v55, &qword_10015BC08);
  return sub_100007F38(v66, &qword_10015BC18);
}

uint64_t sub_10006DC30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = a2;
  v3 = type metadata accessor for LocationModule(0);
  v66 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015BC38);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  __chkstk_darwin(v6);
  v67 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100007D50(&qword_10015BC40);
  __chkstk_darwin(v8);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v73 = (uint64_t)&v64 - v12;
  v74 = type metadata accessor for Divider(0);
  v71 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v68 = (char *)&v64 - v15;
  v16 = sub_100007D50(&qword_10015BC48);
  __chkstk_darwin(v16);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v64 - v20;
  v22 = sub_100007D50(&qword_10015BC50);
  __chkstk_darwin(v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v64 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v64 - v29;
  *(_QWORD *)v27 = static HorizontalAlignment.leading.getter(v31);
  *((_QWORD *)v27 + 1) = 0x4024000000000000;
  v27[16] = 0;
  v32 = sub_100007D50(&qword_10015BC58);
  sub_10006E220(a1, (uint64_t)&v27[*(int *)(v32 + 44)]);
  sub_100018EB4((uint64_t)v27, (uint64_t)v30, &qword_10015BC50);
  v33 = *(_QWORD *)(a1 + 104);
  if (v33)
  {
    swift_retain(*(_QWORD *)(a1 + 104));
    v34 = sub_10007A93C();
    swift_release(v33);
    if ((v34 & 1) != 0)
    {
      v36 = sub_100007D50(&qword_10015BC80);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v21, 1, 1, v36);
    }
    else
    {
      v64 = v24;
      v65 = v21;
      v37 = v68;
      Divider.init()(v35);
      sub_10001BFB8(a1, (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationModule);
      v38 = *(unsigned __int8 *)(v66 + 80);
      v39 = (v38 + 16) & ~v38;
      v40 = swift_allocObject(&unk_10014BA08, v39 + v4, v38 | 7);
      v41 = sub_100007F7C((uint64_t)v5, v40 + v39);
      __chkstk_darwin(v41);
      *(&v64 - 2) = (char *)a1;
      v42 = sub_100007D50(&qword_10015BC60);
      v43 = sub_10000F4E0(&qword_10015BC68, &qword_10015BC60, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v44 = v67;
      Button.init(action:label:)(sub_10006F768, v40, sub_10006F794, &v64 - 4, v42, v43);
      if (qword_1001580F8 != -1)
        swift_once(&qword_1001580F8, sub_100075394);
      v45 = qword_10016A550;
      v46 = *(_QWORD *)algn_10016A558;
      v47 = sub_10000F4E0(&qword_10015BC70, &qword_10015BC38, (uint64_t)&protocol conformance descriptor for Button<A>);
      v48 = v45;
      v49 = v70;
      View.accessibilityIdentifier(_:)(v48, v46, v70, v47);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v44, v49);
      v50 = v73;
      sub_100018EB4((uint64_t)v10, v73, &qword_10015BC40);
      v51 = v71;
      v52 = v72;
      v53 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
      v54 = v74;
      v53(v72, v37, v74);
      sub_100007E78(v50, (uint64_t)v10, &qword_10015BC40);
      v53(v18, v52, v54);
      v55 = sub_100007D50(&qword_10015BC78);
      sub_100007E78((uint64_t)v10, (uint64_t)&v18[*(int *)(v55 + 48)], &qword_10015BC40);
      sub_100007F38(v50, &qword_10015BC40);
      v56 = *(void (**)(char *, uint64_t))(v51 + 8);
      v56(v37, v54);
      sub_100007F38((uint64_t)v10, &qword_10015BC40);
      v56(v52, v54);
      v57 = sub_100007D50(&qword_10015BC80);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v18, 0, 1, v57);
      v21 = v65;
      sub_100018EB4((uint64_t)v18, (uint64_t)v65, &qword_10015BC48);
      v24 = v64;
    }
    sub_100007E78((uint64_t)v30, (uint64_t)v24, &qword_10015BC50);
    sub_100007E78((uint64_t)v21, (uint64_t)v18, &qword_10015BC48);
    v58 = v75;
    sub_100007E78((uint64_t)v24, v75, &qword_10015BC50);
    v59 = sub_100007D50(&qword_10015BC88);
    sub_100007E78((uint64_t)v18, v58 + *(int *)(v59 + 48), &qword_10015BC48);
    sub_100007F38((uint64_t)v21, &qword_10015BC48);
    sub_100007F38((uint64_t)v30, &qword_10015BC50);
    sub_100007F38((uint64_t)v18, &qword_10015BC48);
    return sub_100007F38((uint64_t)v24, &qword_10015BC50);
  }
  else
  {
    v61 = *(_QWORD *)(a1 + 112);
    v62 = type metadata accessor for RemoteViewConfiguration();
    v63 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v61, v62, v63);
    __break(1u);
  }
  return result;
}

uint64_t sub_10006E220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  _OWORD v194[3];
  _OWORD v195[6];
  uint64_t v196;

  v187 = a2;
  v182 = type metadata accessor for EnabledTextSelectability(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v148 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100007D50(&qword_10015BC90);
  v184 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v185 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v183 = (char *)&v148 - v6;
  v177 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v177);
  v8 = (_OWORD *)((char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for MapInteractionModes(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v176 = (char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_1001594C8);
  __chkstk_darwin(v12);
  v174 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MapCamera(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v164 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for MapCameraPosition(0);
  v163 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v162 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100007D50(&qword_1001594D0);
  __chkstk_darwin(v18);
  v166 = (char *)&v148 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100007D50(&qword_10015BC98);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v148 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100007D50(&qword_10015BCA0);
  __chkstk_darwin(v167);
  v175 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100007D50(&qword_10015BCA8);
  __chkstk_darwin(v168);
  v173 = (char *)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100007D50(&qword_10015BCB0);
  __chkstk_darwin(v172);
  v189 = (uint64_t)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v179 = (uint64_t)&v148 - v25;
  v26 = sub_100007D50(&qword_100159638);
  __chkstk_darwin(v26);
  v158 = (uint64_t *)((char *)&v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v28);
  v30 = (char *)&v148 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100007D50(&qword_100159648);
  __chkstk_darwin(v155);
  v32 = (char *)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100007D50(&qword_10015BCB8);
  __chkstk_darwin(v157);
  v159 = (uint64_t)&v148 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100007D50(&qword_10015BCC0);
  v161 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v156 = (uint64_t)&v148 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100007D50(&qword_10015BCC8);
  __chkstk_darwin(v35);
  v178 = (uint64_t)&v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v38 = __chkstk_darwin(v37).n128_u64[0];
  v40 = (char *)&v148 - v39;
  v41 = *(void **)(a1 + 64);
  v188 = (char *)&v148 - v39;
  if (v41)
  {
    v42 = objc_msgSend(v41, "city", v38);
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v152 = v9;
    v44 = v43;
    v154 = a1;
    v46 = v45;

    *(_QWORD *)&v195[0] = v44;
    *((_QWORD *)&v195[0] + 1) = v46;
    sub_10001DB0C();
    v47 = Text.init<A>(_:)(v195, &type metadata for String);
    v49 = v48;
    v149 = v26;
    v51 = v50;
    LOBYTE(v42) = v52 & 1;
    v150 = v15;
    v53 = enum case for Text.Case.uppercase(_:);
    v54 = type metadata accessor for Text.Case(0);
    v153 = v8;
    v55 = v54;
    v151 = v14;
    v56 = v10;
    v57 = *(_QWORD *)(v54 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 104))(v30, v53, v54);
    v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56);
    v10 = v56;
    v58(v30, 0, 1, v55);
    KeyPath = swift_getKeyPath(&unk_10010CC18);
    v60 = v158;
    sub_100007E78((uint64_t)v30, (uint64_t)v158 + *(int *)(v149 + 28), &qword_100159640);
    *v60 = KeyPath;
    sub_100007E78((uint64_t)v60, (uint64_t)&v32[*(int *)(v155 + 36)], &qword_100159638);
    *(_QWORD *)v32 = v47;
    *((_QWORD *)v32 + 1) = v49;
    v32[16] = (char)v42;
    *((_QWORD *)v32 + 3) = v51;
    sub_10000F844(v47, v49, (char)v42);
    swift_bridgeObjectRetain(v51);
    v8 = v153;
    sub_100007F38((uint64_t)v60, &qword_100159638);
    v15 = v150;
    sub_100007F38((uint64_t)v30, &qword_100159640);
    v61 = v47;
    a1 = v154;
    sub_100007D90(v61, v49, (char)v42);
    v62 = swift_bridgeObjectRelease(v51);
    v63 = static Font.subheadline.getter(v62);
    v64 = swift_getKeyPath(&unk_10010CC48);
    v65 = v159;
    sub_100007E78((uint64_t)v32, v159, &qword_100159648);
    v66 = (uint64_t *)(v65 + *(int *)(v157 + 36));
    *v66 = v64;
    v66[1] = v63;
    v14 = v151;
    v9 = v152;
    sub_100007F38((uint64_t)v32, &qword_100159648);
    v67 = v156;
    sub_100007E78(v65, v156, &qword_10015BCB8);
    v68 = v160;
    *(_QWORD *)(v67 + *(int *)(v160 + 36)) = 0x3FE0000000000000;
    v40 = v188;
    sub_100007F38(v65, &qword_10015BCB8);
    sub_100018EB4(v67, (uint64_t)v40, &qword_10015BCC0);
    v69 = 0;
    v70 = v68;
  }
  else
  {
    v69 = 1;
    v70 = v160;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v40, v69, 1, v70);
  v71 = v164;
  MapCamera.init(centerCoordinate:distance:heading:pitch:)(*(double *)(a1 + 16), *(double *)(a1 + 24), 1000.0, 0.0, 60.0);
  v72 = v162;
  static MapCameraPosition.camera(_:)(v71);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v71, v14);
  v73 = v166;
  v74 = v165;
  static Binding.constant(_:)(v72, v165);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v72, v74);
  v75 = type metadata accessor for MapCameraBounds(0);
  v76 = v174;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v174, 1, 1, v75);
  v77 = sub_100007D50(&qword_10015BCD0);
  v78 = swift_allocObject(v77, ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 2 * *(_QWORD *)(v10 + 72), *(unsigned __int8 *)(v10 + 80) | 7);
  *(_OWORD *)(v78 + 16) = xmmword_100108810;
  v79 = static MapInteractionModes.zoom.getter();
  static MapInteractionModes.pitch.getter(v79);
  *(_QWORD *)&v195[0] = v78;
  v80 = sub_100007428(&qword_10015BCD8, (uint64_t (*)(uint64_t))&type metadata accessor for MapInteractionModes, (uint64_t)&protocol conformance descriptor for MapInteractionModes);
  v81 = sub_100007D50(&qword_10015BCE0);
  v82 = sub_10000F4E0(&qword_10015BCE8, &qword_10015BCE0, (uint64_t)&protocol conformance descriptor for [A]);
  v83 = v176;
  v84 = dispatch thunk of SetAlgebra.init<A>(_:)(v195, v81, v82, v9, v80);
  __chkstk_darwin(v84);
  v85 = sub_100007D50(&qword_10015BCF0);
  v86 = sub_10000F4E0(&qword_10015BCF8, &qword_10015BCF0, (uint64_t)&protocol conformance descriptor for Marker<A>);
  v87 = v169;
  v88 = Map.init<A>(position:bounds:interactionModes:scope:content:)(v73, v76, v83, 0, 1, sub_10006F7A4, &v148 - 4, v85, v86);
  v89 = static Alignment.center.getter(v88);
  _FrameLayout.init(width:height:alignment:)(v194, 0, 1, 0x4069000000000000, 0, v89, v90);
  v91 = v170;
  v92 = (uint64_t)v175;
  v93 = v171;
  (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v175, v87, v171);
  v94 = (_OWORD *)(v92 + *(int *)(v167 + 36));
  v95 = v194[1];
  *v94 = v194[0];
  v94[1] = v95;
  v94[2] = v194[2];
  (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v93);
  v96 = (char *)v8 + *(int *)(v177 + 20);
  v97 = enum case for RoundedCornerStyle.continuous(_:);
  v98 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v96, v97, v98);
  __asm { FMOV            V0.2D, #10.0 }
  *v8 = _Q0;
  v104 = (uint64_t)v173;
  v105 = (uint64_t)&v173[*(int *)(v168 + 36)];
  sub_10001BFB8((uint64_t)v8, v105, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v105 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78(v92, v104, &qword_10015BCA0);
  sub_10000F854((uint64_t)v8);
  sub_100007F38(v92, &qword_10015BCA0);
  v106 = v189;
  sub_100007E78(v104, v189, &qword_10015BCA8);
  *(_BYTE *)(v106 + *(int *)(v172 + 36)) = 1;
  sub_100007F38(v104, &qword_10015BCA8);
  v107 = v179;
  sub_100018EB4(v106, v179, &qword_10015BCB0);
  v108 = *(_OWORD *)(a1 + 80);
  v195[4] = *(_OWORD *)(a1 + 64);
  v195[5] = v108;
  v196 = *(_QWORD *)(a1 + 96);
  v109 = *(_OWORD *)(a1 + 16);
  v195[0] = *(_OWORD *)a1;
  v195[1] = v109;
  v110 = *(_OWORD *)(a1 + 48);
  v195[2] = *(_OWORD *)(a1 + 32);
  v195[3] = v110;
  v190 = sub_10007A36C();
  v191 = v111;
  sub_10001DB0C();
  v112 = Text.init<A>(_:)(&v190, &type metadata for String);
  v114 = v113;
  v116 = v115;
  v118 = v117 & 1;
  v119 = static Font.headline.getter();
  v120 = Text.font(_:)(v119, v112, v114, v118, v116);
  v122 = v121;
  LOBYTE(v87) = v123;
  v125 = v124;
  swift_release(v119);
  sub_100007D90(v112, v114, v118);
  v126 = swift_bridgeObjectRelease(v116);
  v127 = static Font.Weight.medium.getter(v126);
  v128 = Text.fontWeight(_:)(*(_QWORD *)&v127, 0, v120, v122, v87 & 1, v125);
  v130 = v129;
  LOBYTE(v116) = v131;
  v133 = v132;
  sub_100007D90(v120, v122, v87 & 1);
  v134 = swift_bridgeObjectRelease(v125);
  v190 = v128;
  v191 = v130;
  v192 = v116 & 1;
  v193 = v133;
  v135 = v180;
  EnabledTextSelectability.init()(v134);
  v136 = v185;
  v137 = v182;
  View.textSelection<A>(_:)(v135, &type metadata for Text, v182, &protocol witness table for Text, &protocol witness table for EnabledTextSelectability);
  (*(void (**)(char *, uint64_t))(v181 + 8))(v135, v137);
  sub_100007D90(v190, v191, v192);
  swift_bridgeObjectRelease(v193);
  v138 = v184;
  v139 = v183;
  v140 = v186;
  (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v183, v136, v186);
  v141 = v178;
  sub_100007E78((uint64_t)v188, v178, &qword_10015BCC8);
  v142 = v189;
  sub_100007E78(v107, v189, &qword_10015BCB0);
  v143 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
  v143(v136, v139, v140);
  v144 = v187;
  sub_100007E78(v141, v187, &qword_10015BCC8);
  v145 = sub_100007D50(&qword_10015BD00);
  sub_100007E78(v142, v144 + *(int *)(v145 + 48), &qword_10015BCB0);
  v143((char *)(v144 + *(int *)(v145 + 64)), v136, v140);
  v146 = *(void (**)(char *, uint64_t))(v138 + 8);
  v146(v139, v140);
  sub_100007F38(v107, &qword_10015BCB0);
  sub_100007F38((uint64_t)v188, &qword_10015BCC8);
  v146(v136, v140);
  sub_100007F38(v189, &qword_10015BCB0);
  return sub_100007F38(v141, &qword_10015BCC8);
}

uint64_t sub_10006F0CC(double *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  unint64_t v4;
  _QWORD v6[2];

  v1 = *((_QWORD *)a1 + 5);
  *(double *)v6 = a1[4];
  v6[1] = v1;
  v2 = a1[2];
  v3 = a1[3];
  v4 = sub_10001DB0C();
  swift_bridgeObjectRetain(v1);
  return Marker.init<A>(_:systemImage:coordinate:)(v6, 0x662E74656B636974, 0xEB000000006C6C69, &type metadata for String, v4, v2, v3);
}

uint64_t sub_10006F158(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[6];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = type metadata accessor for OpenURLAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[5];
  v32 = a1[4];
  v33 = v13;
  v34 = *((_QWORD *)a1 + 12);
  v14 = a1[1];
  v28 = *a1;
  v29 = v14;
  v15 = a1[3];
  v30 = a1[2];
  v31 = v15;
  sub_10007A3FC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100007F38((uint64_t)v8, &qword_100158658);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  type metadata accessor for LocationModule(0);
  sub_100018A2C((uint64_t)v5);
  OpenURLAction.callAsFunction(_:)(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17 = *((_QWORD *)a1 + 13);
  v27 = *((_QWORD *)a1 + 12);
  v18 = a1[5];
  v26[4] = a1[4];
  v26[5] = v18;
  v19 = a1[1];
  v26[0] = *a1;
  v26[1] = v19;
  v20 = a1[2];
  v26[3] = a1[3];
  v26[2] = v20;
  if (v17)
  {
    swift_retain(v17);
    sub_10007A630(v21);
    v22 = swift_release(v17);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v22);
  }
  else
  {
    v23 = *((_QWORD *)a1 + 14);
    v24 = type metadata accessor for RemoteViewConfiguration();
    v25 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

double sub_10006F38C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[8];
  char v11;
  _BYTE v12[136];

  v4 = static VerticalAlignment.center.getter(a1);
  sub_10006F470(a1, (uint64_t)v10);
  *(_OWORD *)&v12[103] = v10[6];
  *(_OWORD *)&v12[87] = v10[5];
  *(_OWORD *)&v12[39] = v10[2];
  *(_OWORD *)&v12[23] = v10[1];
  *(_OWORD *)&v12[119] = v10[7];
  v12[135] = v11;
  *(_OWORD *)&v12[55] = v10[3];
  *(_OWORD *)&v12[71] = v10[4];
  *(_OWORD *)&v12[7] = v10[0];
  v5 = *(_OWORD *)&v12[64];
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v12[80];
  v6 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a2 + 129) = v6;
  v7 = *(_OWORD *)v12;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v12[16];
  result = *(double *)&v12[32];
  v9 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v12[32];
  *(_OWORD *)(a2 + 65) = v9;
  *(_OWORD *)(a2 + 81) = v5;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0x4022000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 145) = *(_QWORD *)&v12[128];
  *(_OWORD *)(a2 + 17) = v7;
  return result;
}

uint64_t sub_10006F470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = Image.init(systemName:)(0x637269632E70616DLL, 0xEF6C6C69662E656CLL);
  v30 = static Edge.Set.all.getter(v31);
  v4 = EdgeInsets.init(_all:)(8.0);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if (qword_1001580B8 != -1)
    swift_once(&qword_1001580B8, sub_100051460);
  v11 = qword_10016A4D0;
  KeyPath = swift_getKeyPath(&unk_10010CBB8);
  swift_retain(v11);
  v29 = static Alignment.center.getter(v13);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(unsigned __int8 *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  v20 = Text.init(_:tableName:bundle:comment:)(v16, v17, v18, v19, 0, 0, 0, 0, 0, 256);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = swift_getKeyPath(&unk_10010CBE8);
  *(_QWORD *)a2 = v31;
  *(_BYTE *)(a2 + 8) = v30;
  *(double *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v10;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v29;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v22;
  *(_BYTE *)(a2 + 104) = v26;
  *(_QWORD *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 120) = v27;
  *(_BYTE *)(a2 + 128) = 0;
  swift_retain(v31);
  swift_retain(KeyPath);
  swift_retain(v11);
  sub_10000F844(v20, v22, v26);
  swift_bridgeObjectRetain(v24);
  swift_retain(v27);
  sub_100007D90(v20, v22, v26);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v31);
  swift_release(v27);
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_10006F688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationModule(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 96));
  swift_release(*(_QWORD *)(v0 + v4 + 104));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006F768()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationModule(0) - 8) + 80);
  return sub_10006F158((__int128 *)(v0 + ((v1 + 16) & ~v1)));
}

double sub_10006F794@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006F38C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10006F7A4()
{
  uint64_t v0;

  return sub_10006F0CC(*(double **)(v0 + 16));
}

unint64_t sub_10006F7C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BD08;
  if (!qword_10015BD08)
  {
    v1 = sub_100007D00(&qword_10015BC28);
    sub_10006F844();
    sub_10000F4E0(&qword_10015BD20, &qword_10015BC30, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BD08);
  }
  return result;
}

unint64_t sub_10006F844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BD10;
  if (!qword_10015BD10)
  {
    v1 = sub_100007D00(&qword_10015BC18);
    sub_10000F4E0(&qword_10015BD18, &qword_10015BC10, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BD10);
  }
  return result;
}

uint64_t *sub_10006F8C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    swift_retain(v5);
    v9 = sub_100007D50(&qword_10015BD28);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_10006F950(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_100007D50(&qword_10015BD28);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_10006F99C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  swift_retain(v4);
  v8 = sub_100007D50(&qword_10015BD28);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10006FA00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_100007D50(&qword_10015BD28);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_10006FA78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100007D50(&qword_10015BD28);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_10006FAD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100007D50(&qword_10015BD28);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10006FB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006FB54);
}

uint64_t sub_10006FB54(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100007D50(&qword_10015BD28);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10006FBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006FBE0);
}

char *sub_10006FBE0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100007D50(&qword_10015BD28);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CircularProgressViewStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_10015BD88;
  if (!qword_10015BD88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CircularProgressViewStyle);
  return result;
}

void sub_10006FC94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10006FD0C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10006FD0C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015BD98)
  {
    v2 = sub_10001E208();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for Double, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015BD98);
  }
}

uint64_t sub_10006FD64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117C1C, 1);
}

uint64_t sub_10006FD74@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  _OWORD v22[14];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;

  v2 = v1;
  v4 = sub_100007D50(&qword_10015BDC8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for LayoutDirection(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006FF84(v2, (uint64_t)v22);
  v36 = v22[12];
  v37 = v22[13];
  v38 = v23;
  v32 = v22[8];
  v33 = v22[9];
  v34 = v22[10];
  v35 = v22[11];
  v28 = v22[4];
  v29 = v22[5];
  v30 = v22[6];
  v31 = v22[7];
  v24 = v22[0];
  v25 = v22[1];
  v26 = v22[2];
  v27 = v22[3];
  KeyPath = swift_getKeyPath(&unk_10010CCD8);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LayoutDirection.leftToRight(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v10, v7);
  *v6 = KeyPath;
  v12 = sub_100007D50(&qword_10015BDD0);
  sub_1000703EC((uint64_t)v6, a1 + *(int *)(v12 + 36));
  v13 = v37;
  *(_OWORD *)(a1 + 192) = v36;
  *(_OWORD *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 224) = v38;
  v14 = v33;
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 144) = v14;
  v15 = v35;
  *(_OWORD *)(a1 + 160) = v34;
  *(_OWORD *)(a1 + 176) = v15;
  v16 = v29;
  *(_OWORD *)(a1 + 64) = v28;
  *(_OWORD *)(a1 + 80) = v16;
  v17 = v31;
  *(_OWORD *)(a1 + 96) = v30;
  *(_OWORD *)(a1 + 112) = v17;
  v18 = v25;
  *(_OWORD *)a1 = v24;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = v27;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v19;
  sub_1000704D4((uint64_t)&v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100070434);
  sub_100070494((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return sub_1000704D4((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100070550);
}

__n128 sub_10006FF84@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  char v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 result;
  _OWORD v32[8];
  uint64_t v33;
  char v34;
  _BYTE v35[209];
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  double v53;
  uint64_t v54;
  _OWORD v55[14];
  char v56;

  *(double *)&v4 = COERCE_DOUBLE(ProgressViewStyleConfiguration.fractionCompleted.getter());
  if ((v5 & 1) != 0)
  {
    sub_1000705B0((uint64_t)v36);
  }
  else
  {
    v6 = *(double *)&v4;
    v7 = static Alignment.center.getter(v4);
    v9 = v8;
    sub_1000701BC(a1, (uint64_t)v32, v6);
    type metadata accessor for CircularProgressViewStyle(0);
    sub_100007D50(&qword_10015BD28);
    v10 = ScaledMetric.wrappedValue.getter(v55);
    v11 = *(double *)v55 * 0.5;
    v12 = static Edge.Set.all.getter(v10);
    v13 = EdgeInsets.init(_all:)(v11);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v34 = 0;
    v21 = static UnitPoint.center.getter(v20);
    v36[0] = v7;
    v36[1] = v9;
    v43 = v32[6];
    v44 = v32[7];
    v45 = v33;
    v39 = v32[2];
    v40 = v32[3];
    v41 = v32[4];
    v42 = v32[5];
    v37 = v32[0];
    v38 = v32[1];
    v46 = v12;
    v47 = v13;
    v48 = v15;
    v49 = v17;
    v50 = v19;
    v51 = v34;
    v52 = 0xBFF921FB54442D18;
    v53 = v21;
    v54 = v22;
    sub_1000706F4((uint64_t)v36);
  }
  sub_1000705BC((uint64_t)v36, (uint64_t)v35);
  v23 = sub_100007D50(&qword_10015BDE0);
  v24 = sub_100070604();
  _ConditionalContent<>.init(storage:)(v35, v23, &type metadata for EmptyView, v24, &protocol witness table for EmptyView);
  v25 = v55[13];
  *(_OWORD *)(a2 + 192) = v55[12];
  *(_OWORD *)(a2 + 208) = v25;
  *(_BYTE *)(a2 + 224) = v56;
  v26 = v55[9];
  *(_OWORD *)(a2 + 128) = v55[8];
  *(_OWORD *)(a2 + 144) = v26;
  v27 = v55[11];
  *(_OWORD *)(a2 + 160) = v55[10];
  *(_OWORD *)(a2 + 176) = v27;
  v28 = v55[5];
  *(_OWORD *)(a2 + 64) = v55[4];
  *(_OWORD *)(a2 + 80) = v28;
  v29 = v55[7];
  *(_OWORD *)(a2 + 96) = v55[6];
  *(_OWORD *)(a2 + 112) = v29;
  v30 = v55[1];
  *(_OWORD *)a2 = v55[0];
  *(_OWORD *)(a2 + 16) = v30;
  result = (__n128)v55[3];
  *(_OWORD *)(a2 + 32) = v55[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1000701BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  _QWORD v24[5];
  double v25[5];

  v6 = static HierarchicalShapeStyle.primary.getter();
  type metadata accessor for CircularProgressViewStyle(0);
  sub_100007D50(&qword_10015BD28);
  ScaledMetric.wrappedValue.getter(v25);
  v7 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v24, 1, 1, &_swiftEmptyArrayStorage, v25[0], 10.0, 0.0);
  v8 = v24[0];
  v9 = v24[2];
  v10 = v24[3];
  v11 = v24[4];
  v12 = static Alignment.center.getter(v7);
  v14 = v13;
  v15 = *a1;
  v16 = Color.opacity(_:)(0.3);
  ScaledMetric.wrappedValue.getter(v25);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v25, 1, 1, &_swiftEmptyArrayStorage, v25[0], 10.0, 0.0);
  v18 = v25[1];
  v17 = v25[2];
  v19 = v25[3];
  v20 = v25[4];
  v21 = v24[1];
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 40) = v6;
  *(_WORD *)(a2 + 44) = 256;
  *(_QWORD *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v14;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = 0;
  v22 = v25[0];
  *(double *)(a2 + 80) = a3;
  *(double *)(a2 + 88) = v22;
  *(double *)(a2 + 96) = v18;
  *(double *)(a2 + 104) = v17;
  *(double *)(a2 + 112) = v19;
  *(double *)(a2 + 120) = v20;
  *(_QWORD *)(a2 + 128) = v15;
  swift_bridgeObjectRetain(v10);
  swift_retain(v16);
  swift_retain(v15);
  swift_release(v16);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100070348(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for LayoutDirection(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.layoutDirection.setter(v4);
}

uint64_t sub_1000703C8()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000703EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015BDC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100070434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t result;

  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRetain(a6);
    swift_retain(a11);
    swift_bridgeObjectRetain(a17);
    return swift_retain(a19);
  }
  return result;
}

uint64_t sub_100070494(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_10015BDC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000704D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4);
  return a1;
}

uint64_t sub_100070550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t result;

  if ((a29 & 1) == 0)
  {
    swift_bridgeObjectRelease(a6);
    swift_release(a11);
    swift_bridgeObjectRelease(a17);
    return swift_release(a19);
  }
  return result;
}

uint64_t sub_1000705B0(uint64_t result)
{
  *(_BYTE *)(result + 224) = 1;
  return result;
}

uint64_t sub_1000705BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015BDD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100070604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BDE8;
  if (!qword_10015BDE8)
  {
    v1 = sub_100007D00(&qword_10015BDE0);
    sub_100070670();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BDE8);
  }
  return result;
}

unint64_t sub_100070670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BDF0;
  if (!qword_10015BDF0)
  {
    v1 = sub_100007D00(&qword_10015BDF8);
    sub_10000F4E0(&qword_10015BE00, &qword_10015BE08, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BDF0);
  }
  return result;
}

uint64_t sub_1000706F4(uint64_t result)
{
  *(_BYTE *)(result + 224) = 0;
  return result;
}

unint64_t sub_100070700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE10;
  if (!qword_10015BE10)
  {
    v1 = sub_100007D00(&qword_10015BDD0);
    sub_100070784();
    sub_10000F4E0(&qword_10015BE58, &qword_10015BDC8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BE10);
  }
  return result;
}

unint64_t sub_100070784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE18;
  if (!qword_10015BE18)
  {
    v1 = sub_100007D00(&qword_10015BE20);
    sub_100070808();
    sub_10000F4E0(&qword_10015BE48, &qword_10015BE50, (uint64_t)&protocol conformance descriptor for _ContainerShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BE18);
  }
  return result;
}

unint64_t sub_100070808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE28;
  if (!qword_10015BE28)
  {
    v1 = sub_100007D00(&qword_10015BE30);
    sub_10007086C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BE28);
  }
  return result;
}

unint64_t sub_10007086C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE38;
  if (!qword_10015BE38)
  {
    v1 = sub_100007D00(&qword_10015BE40);
    sub_100070604();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BE38);
  }
  return result;
}

unint64_t sub_1000708DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BE60;
  if (!qword_10015BE60)
  {
    v1 = type metadata accessor for Artist(255);
    result = swift_getWitnessTable(&unk_10010C400, v1);
    atomic_store(result, (unint64_t *)&qword_10015BE60);
  }
  return result;
}

unint64_t sub_100070928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015A6A8;
  if (!qword_10015A6A8)
  {
    v1 = sub_100007D00(&qword_10015A6A0);
    result = swift_getWitnessTable(&unk_10010C600, v1);
    atomic_store(result, (unint64_t *)&qword_10015A6A8);
  }
  return result;
}

uint64_t sub_100070980(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RemoteViewConfiguration.Service(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TourPhotosDefaultView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TourPhotosDefaultView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TourPhotosDefaultView()
{
  return &type metadata for TourPhotosDefaultView;
}

uint64_t sub_100070B04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117CC0, 1);
}

void sub_100070B14(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;

  v7 = static Alignment.bottom.getter();
  v55 = v8;
  v56 = v7;
  sub_100070D6C((uint64_t)&v58);
  v10 = v60;
  v11 = v61;
  v12 = v63;
  v53 = v64;
  v54 = v62;
  v13 = v65;
  v51 = v67;
  v52 = v66;
  if ((a3 & 1) != 0)
    v14 = -36.0;
  else
    v14 = 0.0;
  v49 = v58;
  v50 = v59;
  v15 = static Alignment.center.getter(v9);
  v17 = _FrameLayout.init(width:height:alignment:)(&v58, 0, 1, 0x4072800000000000, 0, v15, v16);
  v18 = BYTE8(v58);
  v44 = v59;
  v45 = v58;
  v19 = BYTE8(v59);
  v42 = v61;
  v43 = v60;
  v20 = static Alignment.center.getter(v17);
  v47 = v21;
  v48 = v20;
  swift_bridgeObjectRetain(a2);
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100114370);
  v40 = v23;
  v41 = v22;
  v25 = v24;
  v39 = v26;
  v27 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002ELL, 0x80000001001143A0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v38 = static Edge.Set.bottom.getter(v27);
  v34 = EdgeInsets.init(_all:)(v14);
  *(_QWORD *)a4 = v56;
  *(_QWORD *)(a4 + 8) = v55;
  *(_OWORD *)(a4 + 16) = v49;
  *(_OWORD *)(a4 + 32) = v50;
  *(_QWORD *)(a4 + 48) = v10;
  *(_QWORD *)(a4 + 56) = v11;
  *(_QWORD *)(a4 + 64) = v54;
  *(_BYTE *)(a4 + 72) = v12;
  *(_QWORD *)(a4 + 80) = v53;
  *(_BYTE *)(a4 + 88) = v13;
  *(_QWORD *)(a4 + 96) = v52;
  *(_QWORD *)(a4 + 104) = v51;
  *(_QWORD *)(a4 + 112) = v45;
  *(_BYTE *)(a4 + 120) = v18;
  *(_QWORD *)(a4 + 128) = v44;
  *(_BYTE *)(a4 + 136) = v19;
  *(_QWORD *)(a4 + 144) = v43;
  *(_QWORD *)(a4 + 152) = v42;
  *(_QWORD *)(a4 + 160) = v41;
  *(_QWORD *)(a4 + 168) = v40;
  *(_BYTE *)(a4 + 176) = v25 & 1;
  *(_QWORD *)(a4 + 184) = v39;
  *(_QWORD *)(a4 + 192) = v27;
  *(_QWORD *)(a4 + 200) = v29;
  *(_BYTE *)(a4 + 208) = v31 & 1;
  *(_QWORD *)(a4 + 216) = v33;
  *(_QWORD *)(a4 + 224) = a1;
  *(_QWORD *)(a4 + 232) = a2;
  *(_QWORD *)(a4 + 240) = v48;
  *(_QWORD *)(a4 + 248) = v47;
  *(_BYTE *)(a4 + 256) = v38;
  *(double *)(a4 + 264) = v34;
  *(_QWORD *)(a4 + 272) = v35;
  *(_QWORD *)(a4 + 280) = v36;
  *(_QWORD *)(a4 + 288) = v37;
  *(_BYTE *)(a4 + 296) = 0;
}

double sub_100070D6C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  double result;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  __int128 v42;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, __n128))(v6 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v3);
  v7 = Color.init(_:red:green:blue:opacity:)(v5, 0.109803922, 0.109803922, 0.117647059, 1.0);
  v8 = sub_100007D50(&qword_100159140);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100108810;
  v10 = static Color.clear.getter(v9);
  *(_QWORD *)(v9 + 32) = v10;
  v11 = static Color.white.getter(v10);
  v12 = Color.opacity(_:)(0.1);
  v13 = swift_release(v11);
  *(_QWORD *)(v9 + 40) = v12;
  v38 = v9;
  v14 = specialized Array._endMutation()(v13);
  v15 = v38;
  v16 = static UnitPoint.top.getter(v14);
  v18 = v17;
  v19 = static UnitPoint.bottom.getter();
  v21 = v20;
  Gradient.init(colors:)(v15);
  v22 = LinearGradient.init(gradient:startPoint:endPoint:)(&v34, v16, v18, v19, v21);
  v23 = v34;
  v33 = v35;
  v24 = v36;
  v25 = v37;
  v26 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v38, 0, 1, 0x4062800000000000, 0, v26, v27);
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v23;
  *(_OWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 32) = v24;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v28;
  *(_BYTE *)(a1 + 56) = v29;
  *(_QWORD *)(a1 + 64) = v30;
  *(_BYTE *)(a1 + 72) = v31;
  result = *(double *)&v42;
  *(_OWORD *)(a1 + 80) = v42;
  return result;
}

void sub_100070F38(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100070B14(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

unint64_t sub_100070F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BEA0;
  if (!qword_10015BEA0)
  {
    v1 = sub_100007D00(&qword_10015BEA8);
    sub_100070FB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BEA0);
  }
  return result;
}

unint64_t sub_100070FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BEB0;
  if (!qword_10015BEB0)
  {
    v1 = sub_100007D00(&qword_10015BEB8);
    sub_100071038();
    sub_10000F4E0(&qword_10015BEE0, &qword_10015BEE8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BEB0);
  }
  return result;
}

unint64_t sub_100071038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015BEC0;
  if (!qword_10015BEC0)
  {
    v1 = sub_100007D00(&qword_10015BEC8);
    sub_10000F4E0(&qword_10015BED0, &qword_10015BED8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015BEC0);
  }
  return result;
}

uint64_t sub_1000710C0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007428(&qword_10015BEF0, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist.Song, (uint64_t)&protocol conformance descriptor for Setlist.Song);
  result = sub_100007428(&qword_10015BEF8, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist.Song, (uint64_t)&protocol conformance descriptor for Setlist.Song);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10007111C()
{
  return sub_100007428(&qword_10015BF00, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist.Song, (uint64_t)&unk_10010CDF0);
}

uint64_t sub_10007114C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100007428(&qword_10015BF40, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist, (uint64_t)&protocol conformance descriptor for Setlist);
  result = sub_100007428(&qword_10015BF48, (uint64_t (*)(uint64_t))&type metadata accessor for Setlist, (uint64_t)&protocol conformance descriptor for Setlist);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000711A8()
{
  return sub_10000F4E0((unint64_t *)&qword_10015A6A8, &qword_10015A6A0, (uint64_t)&unk_10010C600);
}

unint64_t sub_1000711D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015B858;
  if (!qword_10015B858)
  {
    v1 = type metadata accessor for PromotionalAssets(255);
    result = swift_getWitnessTable(&unk_10010A780, v1);
    atomic_store(result, (unint64_t *)&qword_10015B858);
  }
  return result;
}

uint64_t sub_100071220()
{
  return sub_10000F4E0(&qword_10015ADB8, &qword_10015AD60, (uint64_t)&unk_10010CD10);
}

uint64_t sub_100071254(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10010CF18;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_10010CF30;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000712E4()
{
  uint64_t v0;
  double result;

  v0 = sub_10007172C();
  *(_QWORD *)&result = swift_bridgeObjectRetain(v0).n128_u64[0];
  return result;
}

uint64_t sub_1000712F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_10010CF90);
  v6 = v1;
  v7 = a1;
  sub_1000713D8(KeyPath, (uint64_t)sub_1000717E4, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100071378(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_10010CF70, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_1000713D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_10010CF70, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_100071470()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010CFC8);
  sub_100071378(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 40);
}

double sub_1000714C0(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_10010CFC8);
  v6 = v1;
  v7 = a1;
  sub_1000713D8(KeyPath, (uint64_t)sub_100071884, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10007153C()
{
  unint64_t v0;
  unint64_t v1;

  if (sub_10007159C())
  {
    v0 = 0xD000000000000029;
    v1 = 0x8000000100114440;
  }
  else
  {
    v1 = 0x8000000100114410;
    v0 = 0xD000000000000027;
  }
  return LocalizedStringKey.init(stringLiteral:)(v0, v1);
}

BOOL sub_10007159C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = sub_10007172C();
  v3 = *(_QWORD *)(v1 + 80);
  swift_bridgeObjectRetain(v2);
  v5 = Array.count.getter(v4, v3);
  swift_bridgeObjectRelease();
  return v5 > 1;
}

BOOL sub_1000715EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = sub_10007172C();
  v3 = *(_QWORD *)(v1 + 80);
  swift_bridgeObjectRetain(v2);
  v5 = Array.count.getter(v4, v3);
  swift_bridgeObjectRelease();
  return v5 == 1;
}

uint64_t sub_10007163C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  ObservationRegistrar.init()();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_BYTE *)(v9 + 40) = a4;
  return v9;
}

uint64_t sub_1000716A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = v0 + qword_10015BFA0;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000716FC()
{
  uint64_t v0;

  sub_1000716A8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for FeaturedVideosViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeaturedVideosViewModel);
}

uint64_t sub_10007172C()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10010CF90);
  sub_100071378(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + 32);
}

double sub_10007177C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = sub_10007172C();
  *a1 = v2;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000717A4(_QWORD *a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain(*a1);
  return sub_1000712F8(v1);
}

uint64_t sub_1000717CC()
{
  return 16;
}

__n128 sub_1000717D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000717E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10007181C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100071470();
  *a1 = result & 1;
  return result;
}

double sub_100071848(char *a1)
{
  return sub_1000714C0(*a1);
}

uint64_t sub_10007186C()
{
  return 16;
}

__n128 sub_100071878(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100071884()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 40) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100071894()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_10010D0E0);
  v2 = swift_getKeyPath(&unk_10010D108);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  return swift_release(v2);
}

uint64_t sub_1000718F8()
{
  return sub_100071920((uint64_t)&unk_10010D098, (uint64_t)&unk_10010D0C0);
}

uint64_t sub_10007190C()
{
  return sub_100071920((uint64_t)&unk_10010D050, (uint64_t)&unk_10010D078);
}

uint64_t sub_100071920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100071988(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_100007D50(&qword_10015A3C8);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  v8 = type metadata accessor for EventsError(0);
  v3[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[15] = v9;
  v3[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100007D50(&qword_10015AD58) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v10);
  v3[18] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v3[19] = v11;
  v3[20] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v3[21] = v13;
  v3[22] = v14;
  return swift_task_switch(sub_100071AB4, v13, v14);
}

uint64_t sub_100071AB4()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_100072230();
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to static Artist.schedule(id:) + 1));
  v0[23] = v1;
  *v1 = v0;
  v1[1] = sub_100071B10;
  return static Artist.schedule(id:)(v0[18], v0[6], v0[7]);
}

uint64_t sub_100071B10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100071C74;
  else
    v4 = sub_100071B70;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_100071B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 160));
  v4 = sub_100007D50(&qword_10015AD60);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  KeyPath = swift_getKeyPath(&unk_10010D0E0);
  v6 = swift_getKeyPath(&unk_10010D108);
  sub_1000727B8(v2, v1);
  swift_retain(v3);
  static Published.subscript.setter(v1, v3, KeyPath, v6);
  sub_100007F38(v2, &qword_10015AD58);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __n128 v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  swift_errorRetain(v1);
  v4 = sub_100007D50(&qword_100159698);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 88))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    *(_DWORD *)(v0 + 224) = v5;
    if (v5 == enum case for EventsError.missingData(_:))
    {
      swift_errorRelease(*(_QWORD *)(v0 + 192));
      *(_QWORD *)(v0 + 200) = static MainActor.shared.getter(v6);
      v7 = (_QWORD *)swift_task_alloc(dword_10015FBE4);
      *(_QWORD *)(v0 + 208) = v7;
      *v7 = v0;
      v7[1] = sub_100071E28;
      return sub_1000EDDAC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    }
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = swift_release(*(_QWORD *)(v0 + 160));
    (*(void (**)(uint64_t, uint64_t, __n128))(v10 + 8))(v9, v11, v12);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 160));
  }
  v13 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 64);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  KeyPath = swift_getKeyPath(&unk_10010D050);
  v16 = swift_getKeyPath(&unk_10010D078);
  *(_QWORD *)(v0 + 24) = v13;
  swift_retain(v14);
  static Published.subscript.setter(v0 + 24, v14, KeyPath, v16);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = *(_QWORD *)(v0 + 128);
  v20 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000720BC;
  else
    v6 = sub_100071EB0;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_100071EB0()
{
  _QWORD *v0;

  swift_release(v0[25]);
  return swift_task_switch(sub_100071EE8, v0[21], v0[22]);
}

uint64_t sub_100071EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_release(*(_QWORD *)(v0 + 160));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v2 + 48))(v3, 1, v1, v4) == 1)
  {
    v5 = *(unsigned int *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 64);
    sub_100007F38(*(_QWORD *)(v0 + 72), &qword_10015A3C8);
    v9 = sub_100072808();
    v10 = swift_allocError(v6, v9, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v11, v5, v6);
    KeyPath = swift_getKeyPath(&unk_10010D050);
    v13 = swift_getKeyPath(&unk_10010D078);
    *(_QWORD *)(v0 + 32) = v10;
    swift_retain(v8);
    static Published.subscript.setter(v0 + 32, v8, KeyPath, v13);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 64);
    sub_100072850(*(_QWORD *)(v0 + 72), v14);
    sub_100072894(v14, v15);
    v17 = sub_100007D50(&qword_10015C138);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = sub_100059980(v15, (uint64_t)&_swiftEmptyArrayStorage);
    v19 = swift_getKeyPath(&unk_10010D098);
    v20 = swift_getKeyPath(&unk_10010D0C0);
    *(_QWORD *)(v0 + 40) = v18;
    swift_retain(v16);
    static Published.subscript.setter(v0 + 40, v16, v19, v20);
    sub_1000728E0(v14);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 104);
  v25 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000720BC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[27];
  swift_release(v0[25]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_100072100, v0[21], v0[22]);
}

uint64_t sub_100072100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_release(*(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v2 + 56))(v3, 1, 1, v1, v4);
  v5 = *(unsigned int *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 64);
  sub_100007F38(*(_QWORD *)(v0 + 72), &qword_10015A3C8);
  v9 = sub_100072808();
  v10 = swift_allocError(v6, v9, 0, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v11, v5, v6);
  KeyPath = swift_getKeyPath(&unk_10010D050);
  v13 = swift_getKeyPath(&unk_10010D078);
  *(_QWORD *)(v0 + 32) = v10;
  swift_retain(v8);
  static Published.subscript.setter(v0 + 32, v8, KeyPath, v13);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_100007D50(&qword_10015AD58);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - v5;
  v7 = sub_100007D50(&qword_10015AD60);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  KeyPath = swift_getKeyPath(&unk_10010D0E0);
  v9 = swift_getKeyPath(&unk_10010D108);
  sub_1000727B8((uint64_t)v6, (uint64_t)v3);
  swift_retain(v0);
  static Published.subscript.setter(v3, v0, KeyPath, v9);
  sub_100007F38((uint64_t)v6, &qword_10015AD58);
  v10 = swift_getKeyPath(&unk_10010D098);
  v11 = swift_getKeyPath(&unk_10010D0C0);
  v16 = 0;
  swift_retain(v0);
  static Published.subscript.setter(&v16, v0, v10, v11);
  v12 = swift_getKeyPath(&unk_10010D050);
  v13 = swift_getKeyPath(&unk_10010D078);
  v16 = 0;
  swift_retain(v0);
  return static Published.subscript.setter(&v16, v0, v12, v13);
}

uint64_t sub_1000723B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__schedule;
  v2 = sub_100007D50(&qword_10015C118);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__error;
  v4 = sub_100007D50(&qword_10015B830);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__emptyScheduleViewModel;
  v6 = sub_100007D50(&qword_10015C120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100072460()
{
  return type metadata accessor for ArtistController(0);
}

uint64_t type metadata accessor for ArtistController(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C068;
  if (!qword_10015C068)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ArtistController);
  return result;
}

void sub_1000724A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_10006A594(319, &qword_10015C078, &qword_10015AD58);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006A594(319, &qword_10015B798, (uint64_t *)&unk_10015B7A0);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10006A594(319, &qword_10015C080, (uint64_t *)&unk_10015C088);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_100072574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = sub_100007D50(&qword_10015C120);
  v27 = *(_QWORD *)(v1 - 8);
  v28 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100007D50(&qword_10015B830);
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100007D50(&qword_10015C118);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015AD58);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v24 - v15;
  v17 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__schedule;
  v18 = sub_100007D50(&qword_10015AD60);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  sub_1000727B8((uint64_t)v16, (uint64_t)v14);
  Published.init(initialValue:)(v14, v11);
  sub_100007F38((uint64_t)v16, &qword_10015AD58);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v17, v10, v7);
  v19 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__error;
  v29 = 0;
  v20 = sub_100007D50((uint64_t *)&unk_10015B7A0);
  Published.init(initialValue:)(&v29, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v19, v6, v26);
  v21 = v0 + OBJC_IVAR____TtC15ShazamEventsApp16ArtistController__emptyScheduleViewModel;
  v29 = 0;
  v22 = sub_100007D50((uint64_t *)&unk_10015C088);
  Published.init(initialValue:)(&v29, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v21, v3, v28);
  return v0;
}

uint64_t sub_1000727B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_10015AD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100072808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C130;
  if (!qword_10015C130)
  {
    v1 = type metadata accessor for EventsError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EventsError, v1);
    atomic_store(result, (unint64_t *)&qword_10015C130);
  }
  return result;
}

uint64_t sub_100072850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100072894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000728E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppleMusicFetcher.MusicArtist(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100072924(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v15[0] = "0";
  sub_100022780(319, &qword_100159240, (uint64_t)&type metadata for CGFloat);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v15[1] = v4;
    sub_100022780(319, (unint64_t *)&qword_100159230, (uint64_t)&type metadata for Bool);
    if (v6 <= 0x3F)
    {
      v16 = *(_QWORD *)(v5 - 8) + 64;
      v17 = v16;
      v18 = v16;
      v19 = v4;
      sub_10005EC20(319, &qword_10015C1F8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v8 <= 0x3F)
      {
        v20 = *(_QWORD *)(v7 - 8) + 64;
        sub_100022780(319, &qword_10015C200, (uint64_t)&type metadata for EdgeInsets);
        if (v10 <= 0x3F)
        {
          v21 = *(_QWORD *)(v9 - 8) + 64;
          v11 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
          if (v12 <= 0x3F)
          {
            v22 = *(_QWORD *)(v11 - 8) + 64;
            v23 = (char *)&value witness table for Builtin.NativeObject + 64;
            sub_10005EC20(319, (unint64_t *)&qword_10015C208, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            if (v14 <= 0x3F)
            {
              v24 = *(_QWORD *)(v13 - 8) + 64;
              swift_initClassMetadata2(a1, 0, 11, v15, a1 + 96);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100072A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10007470C(a1);
  return v3;
}

BOOL sub_100072AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  id v21;
  id v22;
  _BYTE v24[24];

  v1 = type metadata accessor for UserInterfaceSizeClass(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_100007D50(&qword_100158A18);
  __chkstk_darwin(v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v8);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v13 = &v24[-v12 - 8];
  v14 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_beginAccess(v14, v24, 0, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v13, enum case for UserInterfaceSizeClass.compact(_:), v1);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v13, 0, 1, v1);
  v15 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_100075248(v14, (uint64_t)v7);
  sub_100075248((uint64_t)v13, v15);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v16((uint64_t)v7, 1, v1) == 1)
  {
    sub_100007F38((uint64_t)v13, &qword_100158970);
    if (v16(v15, 1, v1) == 1)
    {
      sub_100007F38((uint64_t)v7, &qword_100158970);
      return 0;
    }
    goto LABEL_6;
  }
  sub_100075248((uint64_t)v7, (uint64_t)v10);
  if (v16(v15, 1, v1) == 1)
  {
    sub_100007F38((uint64_t)v13, &qword_100158970);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v1);
LABEL_6:
    sub_100007F38((uint64_t)v7, &qword_100158A18);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v4, v15, v1);
  v17 = sub_100075290();
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v4, v1, v17);
  v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v19(v4, v1);
  sub_100007F38((uint64_t)v13, &qword_100158970);
  v19(v10, v1);
  sub_100007F38((uint64_t)v7, &qword_100158970);
  if ((v18 & 1) != 0)
    return 0;
LABEL_9:
  v21 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v22 = objc_msgSend(v21, "userInterfaceIdiom");

  return v22 == 0;
}

uint64_t sub_100072DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v4, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v8 = type metadata accessor for Optional(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - v10;
  sub_100074584();
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_100119D18, &unk_100119D20);
    v14 = swift_getAssociatedTypeWitness(0, v13, v7, &unk_100117714, &unk_100117734);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
  else
  {
    v16 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_100119D18, &unk_100119D20);
    (*(void (**)(uint64_t, uint64_t))(v16 + 56))(v7, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v11, v7);
  }
}

double sub_100072F88()
{
  return sub_100072FC4((uint64_t)&unk_10010D3D0, (uint64_t)&unk_10010D408);
}

uint64_t sub_100072F9C(double a1)
{
  return sub_100073060((uint64_t)&unk_10010D3D0, (uint64_t)&unk_10010D408, a1);
}

double sub_100072FB0()
{
  return sub_100072FC4((uint64_t)&unk_10010D378, (uint64_t)&unk_10010D3B0);
}

double sub_100072FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  double v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10007304C(double a1)
{
  return sub_100073060((uint64_t)&unk_10010D378, (uint64_t)&unk_10010D3B0, a1);
}

uint64_t sub_100073060(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  double v9;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  v9 = a3;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

double sub_1000730EC()
{
  id v0;
  id v1;
  double result;
  double v3;
  double v4;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  result = sub_1000744FC() * 0.5;
  v4 = v3 * 0.85;
  if (!v1)
    return v4;
  return result;
}

uint64_t sub_100073168()
{
  return sub_100073FAC((uint64_t)&unk_10010D270, (uint64_t)&unk_10010D2A8);
}

uint64_t sub_10007317C(char a1)
{
  return sub_100074048(a1, (uint64_t)&unk_10010D270, (uint64_t)&unk_10010D2A8);
}

double sub_100073190()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_10010D2C8);
  v2 = swift_getKeyPath(&unk_10010D300);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_10007321C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_100073190();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_100073248(double *a1)
{
  return sub_100073270(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_100073270(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[4];

  KeyPath = swift_getKeyPath(&unk_10010D2C8);
  v10 = swift_getKeyPath(&unk_10010D300);
  *(double *)v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  swift_retain(v4);
  return static Published.subscript.setter(v12, v4, KeyPath, v10);
}

uint64_t sub_100073314()
{
  return sub_100074048(1, (uint64_t)&unk_10010D1C0, (uint64_t)&unk_10010D1F8);
}

uint64_t sub_10007333C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 184))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_10007336C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 152))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_10007339C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 168))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_1000733CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &unk_10011790C, &unk_10011796C);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 208);
  v21 = (uint64_t)v0 + *(_QWORD *)(v1 + 160);
  v22 = v11;
  v11(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, AssociatedTypeWitness);
  v15 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v16 = *(_QWORD *)(swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v15, &unk_100119D18, &unk_100119D20)+ 8);
  v17 = Set.count.getter(v13, v15, v16);
  swift_bridgeObjectRelease(v13);
  v22(v3, v2);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v14(v8, AssociatedTypeWitness);
  v19 = Set.count.getter(v18, v15, v16);
  result = swift_bridgeObjectRelease(v18);
  if (!__OFADD__(v17, v19))
    return v17 + v19 > 1;
  __break(1u);
  return result;
}

uint64_t sub_1000735B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &unk_10011790C, &unk_10011796C);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)v20 - v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 208);
  v20[1] = (char *)v0 + *(_QWORD *)(v1 + 160);
  v21 = v8;
  v8(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v20[0] = *(_QWORD *)(v5 + 8);
  ((void (*)(char *, uint64_t))v20[0])(v7, AssociatedTypeWitness);
  v22 = v10;
  v11 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_100119D18, &unk_100119D20);
  v13 = type metadata accessor for Set(0, v11, *(_QWORD *)(v12 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v13);
  v15 = Array.init<A>(_:)(&v22, v11, v13, WitnessTable);
  v21(v3, v2);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(AssociatedTypeWitness, AssociatedConformanceWitness);
  ((void (*)(char *, uint64_t))v20[0])(v7, AssociatedTypeWitness);
  v22 = v16;
  v17 = Array.init<A>(_:)(&v22, v11, v13, WitnessTable);
  v18 = static Array.+ infix(_:_:)(v15, v17, v11);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v17);
  return v18;
}

void *sub_1000737C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[5];
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v2 = v0[3];
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v3 = v0[2];
  v4 = v0[4];
  v5 = v0[7];
  v6 = sub_100007D50(&qword_10015B548);
  v7 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ 2 * *(_QWORD *)(v7 + 72), *(unsigned __int8 *)(v7 + 80) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100108810;
  v9 = qword_100158150;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v1);
  if (v9 != -1)
    swift_once(&qword_100158150, sub_1000C7B4C);
  URLQueryItem.init(name:value:)(qword_10015E630, *(_QWORD *)algn_10015E638, v3, v2);
  if (qword_100158158 != -1)
    swift_once(&qword_100158158, sub_1000C7B6C);
  URLQueryItem.init(name:value:)(qword_10015E640, *(_QWORD *)algn_10015E648, v4, v1);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return (void *)v8;
}

uint64_t sub_100073934()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 176))(*(_QWORD *)(*(_QWORD *)v0 + 80));
}

uint64_t sub_100073964()
{
  _BOOL8 v0;
  unsigned int v2;
  uint64_t v3;
  int v4;

  v0 = sub_100072AD4();
  if (v0)
    return Edge.Set.init(_:)(2);
  v2 = static Edge.Set.all.getter(v0);
  v3 = Edge.Set.init(rawValue:)(0);
  v4 = Edge.Set.init(rawValue:)(v3);
  if (Edge.Set.init(rawValue:)(v4 & v2) == v2)
    return v3;
  else
    return Edge.Set.init(rawValue:)(v3 | v2);
}

uint64_t sub_1000739D4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void (*v3)(_BYTE *, _QWORD);
  BOOL *v4;
  _BYTE v6[32];

  KeyPath = swift_getKeyPath(&unk_10010D218);
  v2 = swift_getKeyPath(&unk_10010D250);
  v3 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v6, v0, KeyPath, v2);
  *v4 = !*v4;
  v3(v6, 0);
  swift_release(KeyPath);
  return swift_release(v2);
}

void sub_100073A78(char a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  ValueWitnessTable *v23;
  uint64_t v24;
  char *v25;
  NSString v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void **aBlock;
  uint64_t v32;
  Class (*v33)(uint64_t);
  ValueMetadata *v34;
  _QWORD *(*v35)();
  _QWORD *v36;
  char *v37;

  v11 = sub_100007D50(&qword_100159260);
  v12 = swift_allocObject(v11, 192, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100109440;
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v5 + 88) + 152))(*(_QWORD *)(*(_QWORD *)v5 + 80));
  *(_QWORD *)(v12 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v12 + 64) = &off_10015BAD8;
  *(_BYTE *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v12 + 104) = &off_10015BAB0;
  *(_BYTE *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v12 + 144) = &off_10015BB38;
  *(_BYTE *)(v12 + 112) = a1;
  *(_QWORD *)(v12 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v12 + 184) = &off_10015BB10;
  *(_QWORD *)(v12 + 152) = a2;
  *(_QWORD *)(v12 + 160) = a3;
  *(_BYTE *)(v12 + 168) = a4;
  v15 = *(_QWORD *)(a5 + 72);
  if (v15)
  {
    v16 = *(_QWORD *)(a5 + 64);
    v17 = *(_QWORD *)(a5 + 72);
  }
  else
  {
    v16 = 0;
    v17 = 0xE000000000000000;
  }
  v34 = &type metadata for AnalyticsString;
  v35 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v32 = v16;
  v33 = (Class (*)(uint64_t))v17;
  sub_1000227F8(a2, a3, a4);
  v37 = (char *)v12;
  v18 = *(_QWORD *)(v12 + 16);
  v19 = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain(v15);
  if (v18 >= v19 >> 1)
    v37 = sub_100089D00((char *)(v19 > 1), v18 + 1, 1, (char *)v12);
  v20 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v20);
  v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v23->initializeWithCopy)((uint64_t)v22, v24);
  sub_10008A6F0(v18, (uint64_t)v22, (uint64_t *)&v37, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v25 = v37;
  v26 = String._bridgeToObjectiveC()();
  v27 = (_QWORD *)swift_allocObject(&unk_10014BD78, 40, 7);
  v27[2] = 0xD00000000000001ELL;
  v27[3] = 0x80000001001131B0;
  v27[4] = v25;
  v35 = sub_100074F08;
  v36 = v27;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_100089C8C;
  v34 = (ValueMetadata *)&unk_10014BD90;
  v28 = _Block_copy(&aBlock);
  v29 = v36;
  swift_bridgeObjectRetain(v25);
  swift_release(v29);
  AnalyticsSendEventLazy(v26, v28);
  _Block_release(v28);
  swift_bridgeObjectRelease(v25);

}

uint64_t sub_100073D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v6 = type metadata accessor for Optional(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v14 - v8;
  sub_100074584();
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(v2, v1);
  }
  else
  {
    v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_100119D18, &unk_100119D20);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v5, v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  }
  return v11;
}

uint64_t sub_100073EB8(double a1, double a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  KeyPath = swift_getKeyPath(&unk_10010D320);
  v6 = swift_getKeyPath(&unk_10010D358);
  *(double *)v8 = a1;
  *(double *)&v8[1] = a2;
  swift_retain(v2);
  return static Published.subscript.setter(v8, v2, KeyPath, v6);
}

uint64_t sub_100073F48()
{
  return sub_100073FAC((uint64_t)&unk_10010D218, (uint64_t)&unk_10010D250);
}

uint64_t sub_100073F5C(char a1)
{
  return sub_100074048(a1, (uint64_t)&unk_10010D218, (uint64_t)&unk_10010D250);
}

uint64_t sub_100073F70()
{
  return sub_100074048(0, (uint64_t)&unk_10010D218, (uint64_t)&unk_10010D250);
}

uint64_t sub_100073F98()
{
  return sub_100073FAC((uint64_t)&unk_10010D1C0, (uint64_t)&unk_10010D1F8);
}

uint64_t sub_100073FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  unsigned __int8 v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_100074034(char a1)
{
  return sub_100074048(a1, (uint64_t)&unk_10010D1C0, (uint64_t)&unk_10010D1F8);
}

uint64_t sub_100074048(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

uint64_t sub_1000740D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 88) + 152))(*(_QWORD *)(*(_QWORD *)v1 + 80));
  v5 = v4;
  sub_10008AB1C(v3, v4, 0, a1);
  return swift_bridgeObjectRelease(v5);
}

BOOL sub_10007411C()
{
  BOOL v0;
  double v1;
  double v2;
  double v3;

  v0 = sub_100072AD4();
  v1 = -sub_100072F88();
  v2 = sub_100072FB0();
  v3 = 0.4;
  if (v0)
    v3 = 0.75;
  return v2 * v3 < v1;
}

uint64_t sub_100074170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v6 = type metadata accessor for Optional(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v14 - v8;
  sub_100074584();
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  else
  {
    v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_100119D18, &unk_100119D20);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v5, v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  }
  return v11;
}

uint64_t sub_1000742E8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v1[8] = v0;
  v1[9] = *v0;
  v2 = type metadata accessor for MainActor(0);
  v1[10] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[11] = v4;
  v1[12] = v5;
  return swift_task_switch(sub_10007435C, v4, v5);
}

uint64_t sub_10007435C()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*(_QWORD *)(v0 + 72));
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = objc_msgSend(v2, "bundleIdentifier");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10015E670 + dword_10015E670);
  v7 = (_QWORD *)swift_task_alloc(unk_10015E674);
  *(_QWORD *)(v0 + 104) = v7;
  *v7 = v0;
  v7[1] = sub_100074444;
  return v9(v0 + 16, v4, v6);
}

uint64_t sub_100074444()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  return swift_task_switch(sub_100074490, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_100074490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 80));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 32) = v6;
  *(_OWORD *)(v1 + 48) = v5;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1000744FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_10010D320);
  v2 = swift_getKeyPath(&unk_10010D358);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100074584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  _QWORD v14[2];

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v2, &unk_10011790C, &unk_10011796C);
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v6 = (char *)v14 - v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 208))(v2, v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  v14[1] = v8;
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v10 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v9, &unk_100119D18, &unk_100119D20);
  v11 = type metadata accessor for Set(0, v9, *(_QWORD *)(v10 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v11);
  Collection.first.getter(v11, WitnessTable);
  return swift_bridgeObjectRelease(v8);
}

_OWORD *sub_10007470C(uint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t WitnessTable;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _OWORD v76[3];

  v2 = v1;
  v70 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v68 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v66 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v68, v3, &unk_10011790C, &unk_10011796C);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v72 = AssociatedTypeWitness;
  v75 = v5;
  __chkstk_darwin(AssociatedTypeWitness);
  v73 = (char *)&v60 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v68, v3, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v63 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v7 = type metadata accessor for Optional(0);
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)&v60 - v8;
  v69 = sub_100007D50(&qword_10015C210);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v65 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100007D50(&qword_10015C218);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_100159248);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100007D50(&qword_100159258);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0u;
  v1[3] = 0u;
  v1[1] = 0u;
  v20 = (char *)v1 + qword_10015C140;
  *(_QWORD *)&v76[0] = 0;
  Published.init(initialValue:)(v76, &type metadata for CGFloat);
  v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v21(v20, v19, v16);
  v22 = (char *)v2 + qword_10015C148;
  LOBYTE(v76[0]) = 0;
  Published.init(initialValue:)(v76, &type metadata for Bool);
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v23(v22, v15, v12);
  v24 = (char *)v2 + qword_10015C150;
  LOBYTE(v76[0]) = 0;
  Published.init(initialValue:)(v76, &type metadata for Bool);
  v23(v24, v15, v12);
  v25 = (char *)v2 + qword_10015C158;
  LOBYTE(v76[0]) = 0;
  Published.init(initialValue:)(v76, &type metadata for Bool);
  v26 = v15;
  v27 = v63;
  v23(v25, v26, v12);
  v28 = v66;
  v29 = (char *)v2 + qword_10015C160;
  *(_QWORD *)&v76[0] = 0;
  Published.init(initialValue:)(v76, &type metadata for CGFloat);
  v30 = v19;
  v31 = v70;
  v21(v29, v30, v16);
  v32 = v68;
  v33 = (char *)v2 + qword_10015C168;
  type metadata accessor for CGSize(0);
  v76[0] = 0uLL;
  Published.init(initialValue:)(v76, v34);
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v33, v11, v64);
  v35 = (char *)v2 + qword_10015C170;
  memset(v76, 0, 32);
  v36 = v65;
  Published.init(initialValue:)(v76, &type metadata for EdgeInsets);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v35, v36, v69);
  v37 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 176);
  v38 = type metadata accessor for UserInterfaceSizeClass(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = (char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 160);
  v69 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v39, v31, v28);
  v40 = v73;
  (*(void (**)(uint64_t, uint64_t))(v32 + 208))(v28, v32);
  v42 = AssociatedConformanceWitness;
  v41 = v72;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v72, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v40, v41);
  *(_QWORD *)&v76[0] = v43;
  v44 = swift_getAssociatedConformanceWitness(v42, v41, v27, &unk_100119D18, &unk_100119D20);
  v45 = type metadata accessor for Set(0, v27, *(_QWORD *)(v44 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v45);
  v47 = v74;
  Collection.first.getter(v45, WitnessTable);
  swift_bridgeObjectRelease(v43);
  v48 = *(_QWORD *)(v27 - 8);
  v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v47, 1, v27);
  if (v49 == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v61);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 152))(v28, v32);
    v52 = v53;
  }
  else
  {
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 40))(v27, v44);
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v27);
  }
  v54 = type metadata accessor for PromotionalAssetsController(0);
  v55 = swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  v56 = v55 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__artistPromotionalAssets;
  v57 = type metadata accessor for ArtistPromotionalAssets(0);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
  *(_QWORD *)(v55 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__error) = 0;
  *(_QWORD *)(v55 + OBJC_IVAR____TtC15ShazamEventsApp27PromotionalAssetsController__emptyScheduleViewModel) = 0;
  ObservationRegistrar.init()(v58);
  *(_QWORD *)(v55 + 16) = v50;
  *(_QWORD *)(v55 + 24) = v52;
  *(_BYTE *)(v55 + 32) = v49 != 1;
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v31, v28);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 + 168)) = v55;
  return v2;
}

char *sub_100074D14()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = *(_QWORD *)v0;
  v2 = *((_QWORD *)v0 + 5);
  v3 = *((_QWORD *)v0 + 7);
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  v4 = &v0[qword_10015C140];
  v5 = sub_100007D50(&qword_100159258);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = &v0[qword_10015C148];
  v8 = sub_100007D50(&qword_100159248);
  v9 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(&v0[qword_10015C150], v8);
  v9(&v0[qword_10015C158], v8);
  v6(&v0[qword_10015C160], v5);
  v10 = &v0[qword_10015C168];
  v11 = sub_100007D50(&qword_10015C218);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = &v0[qword_10015C170];
  v13 = sub_100007D50(&qword_10015C210);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 160)]);
  swift_release(*(_QWORD *)&v0[*(_QWORD *)(*(_QWORD *)v0 + 168)]);
  sub_100007F38((uint64_t)&v0[*(_QWORD *)(*(_QWORD *)v0 + 176)], &qword_100158970);
  return v0;
}

uint64_t sub_100074EA4()
{
  uint64_t v0;

  sub_100074D14();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for EventViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventViewModel);
}

_QWORD *sub_100074ED4(uint64_t a1)
{
  return sub_10008AFAC(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100074EDC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

_QWORD *sub_100074F08()
{
  uint64_t v0;

  return sub_10008AFAC(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100074F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100074F20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100074F28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain_n(*(_QWORD *)(a1 + 40), 2);
  for (i = (_QWORD *)(v1 + 48); ; i += 3)
  {
    v5 = *(i - 1);
    v4 = *i;
    if (*((_BYTE *)i - 16) == 1)
    {
      swift_bridgeObjectRetain(*i);
      swift_bridgeObjectRelease_n(v1, 2);
      swift_bridgeObjectRelease(0xE500000000000000);
      return v5;
    }
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7972746E756F63, 0xE700000000000000, 0x6449707061, 0xE500000000000000, 0);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(0xE700000000000000);
    if ((v6 & 1) != 0)
      break;
    swift_bridgeObjectRelease(v4);
    if (!--v2)
    {
      swift_bridgeObjectRelease_n(v1, 2);
      return 0;
    }
  }
  swift_bridgeObjectRelease_n(v1, 2);
  return v5;
}

uint64_t sub_100075020()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  sub_1000DED48();
  if (v0)
  {
    v1 = v0;
    if (*(_QWORD *)(v0 + 16))
    {
      v2 = sub_100086F64(1);
      if ((v3 & 1) != 0)
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 56) + v2);
        swift_bridgeObjectRelease(v1);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease(v1);
  }
  return 1;
}

void sub_1000750C4()
{
  JUMPOUT(0x1000750D8);
}

void sub_100075108()
{
  swift_bridgeObjectRelease(0xE600000000000000);
  JUMPOUT(0x1000750B0);
}

uint64_t sub_100075120()
{
  return 16;
}

__n128 sub_10007512C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100075140()
{
  return 16;
}

__n128 sub_10007514C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100075160()
{
  return 16;
}

__n128 sub_10007516C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100075178(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = sub_100073190();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_1000751A4(double *a1)
{
  return sub_100073270(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000751CC()
{
  return 16;
}

__n128 sub_1000751D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1000751E4(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = sub_1000744FC();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_10007520C(double *a1)
{
  return sub_100073EB8(*a1, a1[1]);
}

uint64_t sub_100075230()
{
  return 16;
}

__n128 sub_10007523C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100075248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100007D50(&qword_100158970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100075290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100158AA8;
  if (!qword_100158AA8)
  {
    v1 = type metadata accessor for UserInterfaceSizeClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInterfaceSizeClass, v1);
    atomic_store(result, (unint64_t *)&qword_100158AA8);
  }
  return result;
}

uint64_t sub_1000752E0()
{
  return 16;
}

__n128 sub_1000752EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100075300()
{
  return 16;
}

__n128 sub_10007530C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100075318()
{
  qword_10016A520 = 0x615020746E657645;
  *(_QWORD *)algn_10016A528 = 0xEA00000000006567;
}

void sub_100075340()
{
  qword_10016A530 = 0x5020747369747241;
  *(_QWORD *)algn_10016A538 = 0xEB00000000656761;
}

void sub_10007536C()
{
  qword_10016A540 = 0x61502065756E6556;
  *(_QWORD *)algn_10016A548 = 0xEA00000000006567;
}

void sub_100075394()
{
  strcpy((char *)&qword_10016A550, "Open in Maps");
  algn_10016A558[5] = 0;
  *(_WORD *)&algn_10016A558[6] = -5120;
}

void sub_1000753C0()
{
  strcpy((char *)&qword_10016A560, "Music Module");
  algn_10016A568[5] = 0;
  *(_WORD *)&algn_10016A568[6] = -5120;
}

void sub_1000753EC()
{
  strcpy((char *)&qword_10016A570, "Setlist-Module");
  algn_10016A578[7] = -18;
}

uint64_t sub_10007541C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v9 = type metadata accessor for EventDetailViewModel(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a5, a1, v9);
  v11 = type metadata accessor for EventDetailModule(0, a2, a3, v10);
  v12 = (_QWORD *)(a5 + *(int *)(v11 + 36));
  v13 = type metadata accessor for RemoteViewConfiguration();
  v14 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  *v12 = EnvironmentObject.init()(v13, v14);
  v12[1] = v15;
  v16 = (_QWORD *)(a5 + *(int *)(v11 + 40));
  *v16 = swift_getKeyPath(&unk_10010D468);
  v17 = sub_100007D50(&qword_1001582E8);
  return swift_storeEnumTagMultiPayload(v16, v17, 0);
}

uint64_t type metadata accessor for EventDetailModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventDetailModule);
}

void sub_100075504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[3];

  v5 = type metadata accessor for EventDetailViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v5 - 8) + 64;
    v9[1] = &unk_10010D4B8;
    sub_1000198CC(319);
    if (v8 <= 0x3F)
    {
      v9[2] = *(_QWORD *)(v7 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v9, a1 + 32);
    }
  }
}

uint64_t *sub_100075594(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = ((v8 + ((v7 + 8) & ~(unint64_t)v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v10 = type metadata accessor for OpenURLAction(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8 | 7;
  v14 = (v12 & 0xF8) + 23;
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v11 + 64);
  v16 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7 || v16 != 0 || v15 + ((v14 + (v9 & 0xFFFFFFFFFFFFFFF8)) & ~v13) + 1 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v13 | v7) + 16) & ~(v13 | v7)));
LABEL_21:
    swift_retain(v19);
    return a1;
  }
  v39 = v10;
  v40 = ~v13;
  v41 = *(_QWORD *)(v10 - 8);
  *a1 = *a2;
  v20 = ((unint64_t)a1 + v7 + 8) & ~(unint64_t)v7;
  v21 = ((unint64_t)a2 + v7 + 8) & ~(unint64_t)v7;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v20, v21, v5);
  v22 = v20 + v8;
  v23 = (v20 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v26;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  v27 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v21 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v27 + 8) = v29;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  v30 = *(_QWORD *)(v28 + 24);
  *(_QWORD *)(v27 + 24) = v30;
  v31 = (_QWORD *)(((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8);
  v32 = (uint64_t *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v32;
  *v31 = *v32;
  v31[1] = v32[1];
  v34 = (_QWORD *)(((unint64_t)v31 + v14) & v40);
  v35 = (uint64_t *)(((unint64_t)v32 + v14) & v40);
  v36 = *((unsigned __int8 *)v35 + v15);
  swift_retain(v25);
  swift_retain(v26);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_retain(v33);
  if (v36 >= 2)
  {
    if (v15 <= 3)
      v37 = v15;
    else
      v37 = 4;
    __asm { BR              X11 }
  }
  if (v36 != 1)
  {
    v19 = *v35;
    *v34 = *v35;
    *((_BYTE *)v34 + v15) = 0;
    goto LABEL_21;
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v41 + 16))(v34, v35, v39);
  *((_BYTE *)v34 + v15) = 1;
  return a1;
}

uint64_t sub_100075840(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 8 + a1) & ~v4;
  (*(void (**)(uint64_t))(v3 + 8))(v5);
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v5 + v6;
  v8 = (_QWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v8);
  swift_release(v8[1]);
  v9 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  v10 = (_QWORD *)((a1 + ((v6 + ((v4 + 8) & ~v4) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v10);
  v11 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v13 = (_QWORD *)(((unint64_t)v10 + v12 + 16) & ~v12);
  v14 = *(_QWORD *)(v11 + 64);
  if (v14 <= 8)
    v14 = 8;
  v15 = *((unsigned __int8 *)v13 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 == 1)
    return (*(uint64_t (**)(void))(v11 + 8))();
  else
    return swift_release(*v13);
}

_QWORD *sub_1000759B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v10 + 8) = v13;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  v14 = (v7 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v16 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 8) = v16;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 24) = v17;
  v18 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v19 = (_QWORD *)(((unint64_t)a1 + v18) & 0xFFFFFFFFFFFFFFF8);
  v20 = (uint64_t *)(((unint64_t)a2 + v18) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  *v19 = *v20;
  v19[1] = v20[1];
  v22 = type metadata accessor for OpenURLAction(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  v25 = v24 + 23;
  v26 = (unint64_t)v19 + v24 + 23;
  v27 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  v36 = v22;
  v37 = (_QWORD *)(v26 & v27);
  v28 = (uint64_t *)(((unint64_t)v20 + v25) & v27);
  if (*(_QWORD *)(v23 + 64) <= 8uLL)
    v29 = 8;
  else
    v29 = *(_QWORD *)(v23 + 64);
  v30 = *((unsigned __int8 *)v28 + v29);
  swift_retain(v12);
  swift_retain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_retain(v21);
  if (v30 >= 2)
  {
    if (v29 <= 3)
      v31 = v29;
    else
      v31 = 4;
    __asm { BR              X11 }
  }
  if (v30 == 1)
  {
    v32 = v37;
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v23 + 16))(v37, v28, v36);
    v33 = 1;
  }
  else
  {
    v34 = *v28;
    v32 = v37;
    *v37 = *v28;
    swift_retain(v34);
    v33 = 0;
  }
  *((_BYTE *)v32 + v29) = v33;
  return a1;
}

_QWORD *sub_100075BEC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v7 + v9;
  v11 = v8 + v9;
  v12 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v12;
  v15 = *(_QWORD *)v13;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_retain(v15);
  swift_release(v14);
  v16 = *(_QWORD *)(v13 + 8);
  v17 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  v22 = *(_QWORD *)(v19 + 24);
  v23 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v25 = (uint64_t *)(((unint64_t)a1 + v24) & 0xFFFFFFFFFFFFFFF8);
  v26 = (uint64_t *)(((unint64_t)a2 + v24) & 0xFFFFFFFFFFFFFFF8);
  v27 = *v25;
  v28 = *v26;
  *v25 = *v26;
  swift_retain(v28);
  swift_release(v27);
  v25[1] = v26[1];
  v29 = type metadata accessor for OpenURLAction(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8;
  v32 = v31 + 23;
  v33 = (unint64_t)v25 + v31 + 23;
  v34 = ~v31 & 0xFFFFFFFFFFFFFFF8;
  v35 = (_QWORD *)(v33 & v34);
  v36 = (unint64_t)v26 + v32;
  v37 = (uint64_t *)(v36 & v34);
  if ((v33 & v34) != (v36 & v34))
  {
    v38 = v29;
    if (*(_QWORD *)(v30 + 64) <= 8uLL)
      v39 = 8;
    else
      v39 = *(_QWORD *)(v30 + 64);
    v40 = *((unsigned __int8 *)v35 + v39);
    if (v40 >= 2)
    {
      if (v39 <= 3)
        v41 = v39;
      else
        v41 = 4;
      __asm { BR              X12 }
    }
    if (v40 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v35, v29);
    else
      swift_release(*v35);
    v42 = *((unsigned __int8 *)v37 + v39);
    if (v42 >= 2)
    {
      if (v39 <= 3)
        v43 = v39;
      else
        v43 = 4;
      __asm { BR              X12 }
    }
    if (v42 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v30 + 16))(v35, v37, v38);
      *((_BYTE *)v35 + v39) = 1;
    }
    else
    {
      v44 = *v37;
      *v35 = *v37;
      *((_BYTE *)v35 + v39) = 0;
      swift_retain(v44);
    }
  }
  return a1;
}

_QWORD *sub_100075ED8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = (v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v10 = v12;
  v13 = (_OWORD *)((v7 + v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_OWORD *)((v8 + v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v17 = (_OWORD *)(((unint64_t)a1 + v16) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)(((unint64_t)a2 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  v21 = v20 + 23;
  v22 = (unint64_t)v17 + v20 + 23;
  v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  v24 = (_QWORD *)(v22 & v23);
  v25 = (_QWORD *)(((unint64_t)v18 + v21) & v23);
  if (*(_QWORD *)(v19 + 64) <= 8uLL)
    v26 = 8;
  else
    v26 = *(_QWORD *)(v19 + 64);
  v27 = *((unsigned __int8 *)v25 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X13 }
  }
  if (v27 == 1)
  {
    (*(void (**)(_QWORD *))(v19 + 32))(v24);
    v29 = 1;
  }
  else
  {
    v29 = 0;
    *v24 = *v25;
  }
  *((_BYTE *)v24 + v26) = v29;
  return a1;
}

_QWORD *sub_10007609C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char v39;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v7 + v9;
  v11 = v8 + v9;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release(v14);
  v15 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  swift_release(v15);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v16 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRelease(v19);
  v20 = ((v9 + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8) + 39;
  v21 = (uint64_t *)(((unint64_t)a1 + v20) & 0xFFFFFFFFFFFFFFF8);
  v22 = (uint64_t *)(((unint64_t)a2 + v20) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v21;
  *v21 = *v22;
  swift_release(v23);
  v21[1] = v22[1];
  v24 = type metadata accessor for OpenURLAction(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  v27 = v26 + 23;
  v28 = (unint64_t)v21 + v26 + 23;
  v29 = ~v26 & 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)(v28 & v29);
  v31 = (unint64_t)v22 + v27;
  v32 = (_QWORD *)(v31 & v29);
  if ((v28 & v29) != (v31 & v29))
  {
    v33 = v24;
    if (*(_QWORD *)(v25 + 64) <= 8uLL)
      v34 = 8;
    else
      v34 = *(_QWORD *)(v25 + 64);
    v35 = *((unsigned __int8 *)v30 + v34);
    if (v35 >= 2)
    {
      if (v34 <= 3)
        v36 = v34;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v30, v24);
    else
      swift_release(*v30);
    v37 = *((unsigned __int8 *)v32 + v34);
    if (v37 >= 2)
    {
      if (v34 <= 3)
        v38 = v34;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 32))(v30, v32, v33);
      v39 = 1;
    }
    else
    {
      v39 = 0;
      *v30 = *v32;
    }
    *((_BYTE *)v30 + v34) = v39;
  }
  return a1;
}

uint64_t sub_10007635C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v6 + 64);
  if (a2 <= v8)
    goto LABEL_27;
  v13 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v14 = v10
      + ((v13 + ((((v12 + ((v11 + 8) & ~v11) + 31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v13)
      + 1;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_27:
      v21 = (a1 + v11 + 8) & ~v11;
      if (v7 >= 0x7FFFFFFF)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v21, v7, v5);
      v22 = *(_QWORD *)(((v12 + v21 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v22 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      return (v22 + 1);
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_27;
LABEL_18:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v20 = v14;
    else
      v20 = 4;
    __asm { BR              X11 }
  }
  return v8 + v19 + 1;
}

void sub_100076548(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for OpenURLAction(0) - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v12 = v10
      + ((v11
        + ((((*(_QWORD *)(v7 + 64)
            + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + 31) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 16) & ~v11)
      + 1;
  if (a3 <= v8)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v8 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_100000004;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &_mh_execute_header.magic + 1;
  }
  if (v8 < a2)
  {
    v14 = ~v8 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1000767C0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100117F90, 1);
}

uint64_t sub_1000767F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v3 = type metadata accessor for SlideTransition(0);
  v45 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - v7;
  v9 = sub_100007D50(&qword_10015C2A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100007D50(&qword_10015C2B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100007D50(&qword_10015C2B8);
  __chkstk_darwin(v44);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100007D50(&qword_10015A6E8);
  __chkstk_darwin(v47);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v11 + 1) = 0x403C000000000000;
  v11[16] = 0;
  v22 = sub_100007D50(&qword_10015C2C0);
  v24 = sub_100076B64(v46, v20, v19, v23, (uint64_t)&v11[*(int *)(v22 + 44)]);
  SlideTransition.init()(v24);
  v25 = v45;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v5, v8, v3);
  v26 = sub_100007428((unint64_t *)&qword_10015B0B0, (uint64_t (*)(uint64_t))&type metadata accessor for SlideTransition, (uint64_t)&protocol conformance descriptor for SlideTransition);
  v27 = AnyTransition.init<A>(_:)(v5, v3, v26);
  sub_100007E78((uint64_t)v11, (uint64_t)v14, &qword_10015C2A8);
  *(_QWORD *)&v14[*(int *)(v12 + 36)] = v27;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v3);
  v28 = sub_100007F38((uint64_t)v11, &qword_10015C2A8);
  LOBYTE(v27) = static Edge.Set.top.getter(v28);
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_10015C2B0);
  v29 = &v16[*(int *)(v44 + 36)];
  *v29 = v27;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  v29[40] = 1;
  v30 = sub_100007F38((uint64_t)v14, &qword_10015C2B0);
  LOBYTE(v27) = static Edge.Set.bottom.getter(v30);
  v31 = EdgeInsets.init(_all:)(30.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_100007E78((uint64_t)v16, (uint64_t)v18, &qword_10015C2B8);
  v38 = &v18[*(int *)(v47 + 36)];
  *v38 = v27;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_100007F38((uint64_t)v16, &qword_10015C2B8);
  v40 = static Alignment.center.getter(v39);
  sub_100043AA8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v48, 0.0, 1, 0.0, 1, v40, v41);
  return sub_100007F38((uint64_t)v18, &qword_10015A6E8);
}

uint64_t sub_100076B64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char v116;
  _BYTE v117[7];
  char v118;
  _BYTE v119[168];
  _BYTE v120[168];
  _QWORD v121[2];
  char v122;
  _BYTE v123[7];
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  double v133;
  uint64_t v134;
  char v135;
  _BYTE v136[7];
  char v137;
  _BYTE v138[7];
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  unint64_t v145;

  v113 = a5;
  v8 = type metadata accessor for EventDetailModule(0, a2, a3, a4);
  v102 = *(_QWORD *)(v8 - 8);
  v103 = v8;
  v100 = *(_QWORD *)(v102 + 64);
  v9 = __chkstk_darwin(v8);
  v101 = (char *)&v99 - v10;
  v11 = type metadata accessor for AccessibilityChildBehavior(0, v9);
  v106 = *(_QWORD *)(v11 - 8);
  v107 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100007D50(&qword_10015C2C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_10015C2D0);
  __chkstk_darwin(v17);
  v19 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100007D50(&qword_10015C2D8);
  v21 = *(_QWORD *)(v20 - 8);
  v108 = v20;
  v109 = v21;
  __chkstk_darwin(v20);
  v114 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100007D50(&qword_10015C2E0);
  __chkstk_darwin(v111);
  v112 = (uint64_t)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v105 = (char *)&v99 - v25;
  __chkstk_darwin(v26);
  v110 = (char *)&v99 - v27;
  __chkstk_darwin(v28);
  v115 = (uint64_t)&v99 - v29;
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v30);
  *((_QWORD *)v16 + 1) = 0x4024000000000000;
  v16[16] = 0;
  v31 = sub_100007D50(&qword_10015C2E8);
  v32 = sub_100077278(a1, a2, a3, (uint64_t)&v16[*(int *)(v31 + 44)]);
  v33 = static Edge.Set.horizontal.getter(v32);
  sub_100007E78((uint64_t)v16, (uint64_t)v19, &qword_10015C2C8);
  v34 = &v19[*(int *)(v17 + 36)];
  *v34 = v33;
  *(_OWORD *)(v34 + 8) = 0u;
  *(_OWORD *)(v34 + 24) = 0u;
  v34[40] = 1;
  v35 = sub_100007F38((uint64_t)v16, &qword_10015C2C8);
  static AccessibilityChildBehavior.ignore.getter(v35);
  v36 = sub_1000782C4();
  View.accessibilityElement(children:)(v13, v17, v36);
  (*(void (**)(char *, unint64_t))(v106 + 8))(v13, v107);
  sub_100007F38((uint64_t)v19, &qword_10015C2D0);
  v104 = a2;
  v106 = a3;
  v38 = type metadata accessor for EventDetailViewModel(0, a2, a3, v37);
  v144 = sub_1000ECCBC(v38);
  v145 = v39;
  v107 = sub_10001DB0C();
  v40 = Text.init<A>(_:)(&v144, &type metadata for String);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v144 = v17;
  v145 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v144, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v48 = (uint64_t)v105;
  v49 = v108;
  v50 = v114;
  View.accessibility(label:)(v40, v42, v46, v44, v108, OpaqueTypeConformance2);
  v51 = v40;
  v52 = a1;
  sub_100007D90(v51, v42, v46);
  swift_bridgeObjectRelease(v44);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v50, v49);
  v53 = sub_100007D50(&qword_10015C300);
  v54 = swift_allocObject(v53, 64, 7);
  *(_OWORD *)(v54 + 16) = xmmword_100109020;
  v144 = sub_1000EC5FC(v38);
  v145 = v55;
  *(_QWORD *)(v54 + 32) = Text.init<A>(_:)(&v144, &type metadata for String);
  *(_QWORD *)(v54 + 40) = v56;
  *(_BYTE *)(v54 + 48) = v57 & 1;
  *(_QWORD *)(v54 + 56) = v58;
  v59 = (uint64_t)v110;
  ModifiedContent<>.accessibility(inputLabels:)(v54, v111);
  swift_bridgeObjectRelease(v54);
  sub_100007F38(v48, &qword_10015C2E0);
  sub_100018EB4(v59, v115, &qword_10015C2E0);
  if (sub_1000ED1C0(v38))
  {
    v60 = (char *)v52 + *(int *)(v38 + 44);
    v61 = *(_QWORD *)v60;
    v62 = *((_QWORD *)v60 + 1);
    v63 = v60[16];
    v64 = *((_QWORD *)v60 + 3);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v64);
    v65 = Text.init(_:tableName:bundle:comment:)(v61, v62, v63, v64, 0, 0, 0, 0, 0, 256);
    v109 = v66;
    v110 = (char *)v65;
    v68 = v67;
    v114 = v69;
    v111 = static Color.white.getter(v65);
    v70 = static Color.black.getter(v111);
    v72 = v101;
    v71 = v102;
    v73 = v103;
    (*(void (**)(char *, uint64_t *, uint64_t))(v102 + 16))(v101, v52, v103);
    v74 = *(unsigned __int8 *)(v71 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = swift_allocObject(&unk_10014BE48, v75 + v100, v74 | 7);
    v77 = v106;
    *(_QWORD *)(v76 + 16) = v104;
    *(_QWORD *)(v76 + 24) = v77;
    v78 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v71 + 32))(v76 + v75, v72, v73);
    v79 = *v52;
    v80 = static MatchedGeometryProperties.frame.getter(v78);
    LODWORD(v75) = v80;
    v81 = static UnitPoint.center.getter(v80);
    v83 = v82;
    v85 = static Edge.Set.horizontal.getter(v84);
    v86 = EdgeInsets.init(_all:)(50.0);
    v118 = v68 & 1;
    v116 = 0;
    v121[0] = v110;
    v121[1] = v109;
    v122 = v68 & 1;
    *(_DWORD *)v123 = *(_DWORD *)v120;
    *(_DWORD *)&v123[3] = *(_DWORD *)&v120[3];
    v124 = v114;
    v125 = v111;
    v126 = v70;
    v127 = sub_1000785D8;
    v128 = v76;
    v129 = 0xD000000000000017;
    v130 = 0x8000000100114580;
    v131 = v79;
    v132 = v75;
    v133 = v81;
    v134 = v83;
    v135 = 1;
    *(_DWORD *)&v136[3] = *(_DWORD *)&v119[3];
    *(_DWORD *)v136 = *(_DWORD *)v119;
    v137 = v85;
    *(_DWORD *)&v138[3] = *(_DWORD *)&v117[3];
    *(_DWORD *)v138 = *(_DWORD *)v117;
    v139 = v86;
    v140 = v87;
    v141 = v88;
    v142 = v89;
    v143 = 0;
    nullsub_1(v121, v90, v91, v92, v93);
  }
  else
  {
    sub_100078348((uint64_t)v121);
  }
  sub_100018EB4((uint64_t)v121, (uint64_t)&v144, &qword_10015C308);
  v94 = v115;
  v95 = v112;
  sub_100007E78(v115, v112, &qword_10015C2E0);
  sub_100018EB4((uint64_t)&v144, (uint64_t)v119, &qword_10015C308);
  v96 = v113;
  sub_100007E78(v95, v113, &qword_10015C2E0);
  v97 = v96 + *(int *)(sub_100007D50(&qword_10015C310) + 48);
  sub_100018EB4((uint64_t)v119, (uint64_t)v120, &qword_10015C308);
  sub_100018EB4((uint64_t)v120, v97, &qword_10015C308);
  sub_1000783D8((uint64_t)v120, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100078368);
  sub_100007F38(v94, &qword_10015C2E0);
  sub_100018EB4((uint64_t)v119, (uint64_t)v121, &qword_10015C308);
  sub_1000783D8((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100078444);
  return sub_100007F38(v95, &qword_10015C2E0);
}

uint64_t sub_100077278@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[13];
  char v100;
  _BYTE v101[216];
  char v102;
  __int128 v103;
  _OWORD v104[14];
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v96 = a2;
  v97 = a3;
  v5 = a2;
  v82 = a1;
  v98 = a4;
  v84 = sub_100007D50(&qword_100159638);
  __chkstk_darwin(v84);
  v83 = (uint64_t *)((char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v7);
  v80 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100007D50(&qword_100159648);
  __chkstk_darwin(v81);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100007D50(&qword_10015BCB8);
  __chkstk_darwin(v89);
  v85 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100007D50(&qword_10015C318);
  __chkstk_darwin(v92);
  v87 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100007D50(&qword_10015C320);
  __chkstk_darwin(v91);
  v86 = (uint64_t)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100007D50(&qword_10015C328);
  __chkstk_darwin(v93);
  v88 = (uint64_t)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100007D50(&qword_10015C330);
  __chkstk_darwin(v94);
  v90 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v95 = (uint64_t)&v80 - v17;
  v19 = type metadata accessor for EventDetailViewModel(0, v5, a3, v18);
  v105 = sub_1000EC51C(v19);
  v106 = v20;
  sub_10001DB0C();
  v21 = Text.init<A>(_:)(&v105, &type metadata for String);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = static Font.Weight.heavy.getter(v21);
  v29 = Text.fontWeight(_:)(*(_QWORD *)&v28, 0, v21, v23, v27, v25);
  v31 = v30;
  v33 = v32;
  LOBYTE(v5) = v34 & 1;
  sub_100007D90(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  v35 = enum case for Text.Case.uppercase(_:);
  v36 = type metadata accessor for Text.Case(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 104))(v80, v35, v36);
  v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56);
  v40 = (uint64_t)v38;
  v39(v38, 0, 1, v36);
  KeyPath = swift_getKeyPath(&unk_10010D530);
  v42 = v83;
  sub_100007E78(v40, (uint64_t)v83 + *(int *)(v84 + 28), &qword_100159640);
  *v42 = KeyPath;
  sub_100007E78((uint64_t)v42, (uint64_t)&v10[*(int *)(v81 + 36)], &qword_100159638);
  *(_QWORD *)v10 = v29;
  *((_QWORD *)v10 + 1) = v31;
  v10[16] = v5;
  *((_QWORD *)v10 + 3) = v33;
  sub_10000F844(v29, v31, v5);
  swift_bridgeObjectRetain(v33);
  sub_100007F38((uint64_t)v42, &qword_100159638);
  sub_100007F38(v40, &qword_100159640);
  sub_100007D90(v29, v31, v5);
  v43 = swift_bridgeObjectRelease(v33);
  v44 = static Font.subheadline.getter(v43);
  v45 = swift_getKeyPath(&unk_10010D560);
  v46 = v85;
  sub_100007E78((uint64_t)v10, v85, &qword_100159648);
  v47 = (uint64_t *)(v46 + *(int *)(v89 + 36));
  *v47 = v45;
  v47[1] = v44;
  v48 = sub_100007F38((uint64_t)v10, &qword_100159648);
  v49 = static Color.white.getter(v48);
  v50 = swift_getKeyPath(&unk_10010D590);
  v51 = v87;
  sub_100007E78(v46, v87, &qword_10015BCB8);
  v52 = (uint64_t *)(v51 + *(int *)(v92 + 36));
  *v52 = v50;
  v52[1] = v49;
  sub_100007F38(v46, &qword_10015BCB8);
  v53 = v86;
  sub_100007E78(v51, v86, &qword_10015C318);
  *(_QWORD *)(v53 + *(int *)(v91 + 36)) = 0x3FE999999999999ALL;
  sub_100007F38(v51, &qword_10015C318);
  v54 = swift_getKeyPath(&unk_10010D5C0);
  v55 = v88;
  sub_100007E78(v53, v88, &qword_10015C320);
  v56 = v55 + *(int *)(v93 + 36);
  *(_QWORD *)v56 = v54;
  *(_BYTE *)(v56 + 8) = 1;
  v57 = sub_100007F38(v53, &qword_10015C320);
  v58 = v82;
  v59 = *v82;
  v60 = static MatchedGeometryProperties.frame.getter(v57);
  LODWORD(v54) = v60;
  v61 = static UnitPoint.center.getter(v60);
  v63 = v62;
  v64 = v90;
  sub_100007E78(v55, v90, &qword_10015C328);
  v65 = v64 + *(int *)(v94 + 36);
  *(_QWORD *)v65 = 0xD000000000000017;
  *(_QWORD *)(v65 + 8) = 0x80000001001145E0;
  *(_QWORD *)(v65 + 16) = v59;
  *(_DWORD *)(v65 + 24) = v54;
  *(double *)(v65 + 32) = v61;
  *(_QWORD *)(v65 + 40) = v63;
  *(_BYTE *)(v65 + 48) = 1;
  sub_100007F38(v55, &qword_10015C328);
  v66 = v95;
  v67 = sub_100018EB4(v64, v95, &qword_10015C330);
  v68 = static HorizontalAlignment.center.getter(v67);
  sub_100077B2C(v58, v96, v97, v69, (uint64_t)v99);
  *(_OWORD *)&v101[167] = v99[10];
  *(_OWORD *)&v101[183] = v99[11];
  *(_OWORD *)&v101[199] = v99[12];
  *(_OWORD *)&v101[103] = v99[6];
  *(_OWORD *)&v101[119] = v99[7];
  *(_OWORD *)&v101[135] = v99[8];
  *(_OWORD *)&v101[151] = v99[9];
  *(_OWORD *)&v101[39] = v99[2];
  *(_OWORD *)&v101[55] = v99[3];
  *(_OWORD *)&v101[71] = v99[4];
  *(_OWORD *)&v101[87] = v99[5];
  *(_OWORD *)&v101[7] = v99[0];
  v102 = 0;
  v101[215] = v100;
  *(_OWORD *)&v101[23] = v99[1];
  sub_100007E78(v66, v64, &qword_10015C330);
  v70 = v98;
  sub_100007E78(v64, v98, &qword_10015C330);
  v71 = (_OWORD *)(v70 + *(int *)(sub_100007D50(&qword_10015C338) + 48));
  *(_QWORD *)&v103 = v68;
  *((_QWORD *)&v103 + 1) = 0x4014000000000000;
  LOBYTE(v104[0]) = 0;
  *(_OWORD *)((char *)&v104[10] + 1) = *(_OWORD *)&v101[160];
  *(_OWORD *)((char *)&v104[11] + 1) = *(_OWORD *)&v101[176];
  *(_OWORD *)((char *)&v104[12] + 1) = *(_OWORD *)&v101[192];
  *(_QWORD *)((char *)&v104[13] + 1) = *(_QWORD *)&v101[208];
  *(_OWORD *)((char *)&v104[6] + 1) = *(_OWORD *)&v101[96];
  *(_OWORD *)((char *)&v104[7] + 1) = *(_OWORD *)&v101[112];
  *(_OWORD *)((char *)&v104[8] + 1) = *(_OWORD *)&v101[128];
  *(_OWORD *)((char *)&v104[9] + 1) = *(_OWORD *)&v101[144];
  *(_OWORD *)((char *)&v104[2] + 1) = *(_OWORD *)&v101[32];
  *(_OWORD *)((char *)&v104[3] + 1) = *(_OWORD *)&v101[48];
  *(_OWORD *)((char *)&v104[4] + 1) = *(_OWORD *)&v101[64];
  *(_OWORD *)((char *)&v104[5] + 1) = *(_OWORD *)&v101[80];
  *(_OWORD *)((char *)&v104[1] + 1) = *(_OWORD *)&v101[16];
  *(_OWORD *)((char *)v104 + 1) = *(_OWORD *)v101;
  v72 = v104[12];
  v71[12] = v104[11];
  v71[13] = v72;
  *(_OWORD *)((char *)v71 + 217) = *(_OWORD *)((char *)&v104[12] + 9);
  v73 = v104[8];
  v71[8] = v104[7];
  v71[9] = v73;
  v74 = v104[10];
  v71[10] = v104[9];
  v71[11] = v74;
  v75 = v104[4];
  v71[4] = v104[3];
  v71[5] = v75;
  v76 = v104[6];
  v71[6] = v104[5];
  v71[7] = v76;
  v77 = v104[0];
  *v71 = v103;
  v71[1] = v77;
  v78 = v104[2];
  v71[2] = v104[1];
  v71[3] = v78;
  sub_100078EB8((uint64_t)&v103);
  sub_100007F38(v66, &qword_10015C330);
  v118 = *(_OWORD *)&v101[160];
  v119 = *(_OWORD *)&v101[176];
  v120 = *(_OWORD *)&v101[192];
  v114 = *(_OWORD *)&v101[96];
  v115 = *(_OWORD *)&v101[112];
  v116 = *(_OWORD *)&v101[128];
  v117 = *(_OWORD *)&v101[144];
  v110 = *(_OWORD *)&v101[32];
  v111 = *(_OWORD *)&v101[48];
  v112 = *(_OWORD *)&v101[64];
  v113 = *(_OWORD *)&v101[80];
  v108 = *(_OWORD *)v101;
  v105 = v68;
  v106 = 0x4014000000000000;
  v107 = 0;
  v121 = *(_QWORD *)&v101[208];
  v109 = *(_OWORD *)&v101[16];
  sub_100078F64((uint64_t)&v105);
  return sub_100007F38(v64, &qword_10015C330);
}

uint64_t sub_100077B2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  int v66;
  int v67;
  uint64_t v68;
  char v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t KeyPath;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[7];
  _BYTE v85[7];
  char v86;
  _BYTE v87[7];
  _BYTE v88[7];
  char v89;

  v72 = type metadata accessor for EventDetailViewModel(0, a2, a3, a4);
  v82 = sub_1000EC5FC(v72);
  v83 = v6;
  sub_10001DB0C();
  v7 = Text.init<A>(_:)(&v82, &type metadata for String);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.largeTitle.getter();
  v15 = Text.font(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14);
  sub_100007D90(v7, v9, v13);
  v22 = swift_bridgeObjectRelease(v11);
  v23 = static Font.Weight.heavy.getter(v22);
  v24 = Text.fontWeight(_:)(*(_QWORD *)&v23, 0, v15, v17, v19 & 1, v21);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_100007D90(v15, v17, v19 & 1);
  v31 = swift_bridgeObjectRelease(v21);
  v32 = static Color.white.getter(v31);
  v80 = Text.foregroundColor(_:)(v32, v24, v26, v30, v28);
  v81 = v33;
  v77 = v34;
  LOBYTE(v14) = v35;
  swift_release(v32);
  v70 = v14 & 1;
  sub_100007D90(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  KeyPath = swift_getKeyPath(&unk_10010D5C0);
  v76 = *a1;
  v36 = static MatchedGeometryProperties.frame.getter();
  v75 = v36;
  v37 = static UnitPoint.center.getter(v36);
  v39 = v38;
  v82 = sub_1000EC8C4(v72);
  v83 = v40;
  v41 = Text.init<A>(_:)(&v82, &type metadata for String);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Font.body.getter(v41);
  v49 = Text.font(_:)(v48, v41, v43, v47, v45);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  swift_release(v48);
  LOBYTE(v48) = v53 & 1;
  sub_100007D90(v41, v43, v47);
  v56 = swift_bridgeObjectRelease(v45);
  v57 = static Color.white.getter(v56);
  v58 = Text.foregroundColor(_:)(v57, v49, v51, v53 & 1, v55);
  v60 = v59;
  LOBYTE(v43) = v61;
  v73 = v62;
  swift_release(v57);
  LOBYTE(v43) = v43 & 1;
  sub_100007D90(v49, v51, v48);
  swift_bridgeObjectRelease(v55);
  v63 = swift_getKeyPath(&unk_10010D5C0);
  v79 = *a1;
  v64 = static MatchedGeometryProperties.frame.getter();
  v71 = v64;
  v65 = static UnitPoint.center.getter(v64);
  v89 = v70;
  v86 = v43;
  *(_DWORD *)(a5 + 17) = v82;
  *(_DWORD *)(a5 + 20) = *(_DWORD *)((char *)&v82 + 3);
  *(_DWORD *)(a5 + 41) = *(_DWORD *)v88;
  *(_DWORD *)(a5 + 44) = *(_DWORD *)&v88[3];
  *(_DWORD *)(a5 + 97) = *(_DWORD *)v87;
  *(_DWORD *)(a5 + 100) = *(_DWORD *)&v87[3];
  v66 = *(_DWORD *)v85;
  *(_DWORD *)(a5 + 124) = *(_DWORD *)&v85[3];
  *(_DWORD *)(a5 + 121) = v66;
  v67 = *(_DWORD *)v84;
  *(_DWORD *)(a5 + 156) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a5 + 153) = v67;
  *(_QWORD *)a5 = v80;
  *(_QWORD *)(a5 + 8) = v77;
  *(_BYTE *)(a5 + 16) = v70;
  *(_QWORD *)(a5 + 24) = v81;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_BYTE *)(a5 + 40) = 1;
  *(_QWORD *)(a5 + 48) = 0xD000000000000016;
  *(_QWORD *)(a5 + 56) = 0x80000001001145C0;
  *(_QWORD *)(a5 + 64) = v76;
  *(_DWORD *)(a5 + 72) = v75;
  *(double *)(a5 + 80) = v37;
  *(_QWORD *)(a5 + 88) = v39;
  *(_BYTE *)(a5 + 96) = 1;
  *(_QWORD *)(a5 + 104) = v58;
  *(_QWORD *)(a5 + 112) = v60;
  *(_BYTE *)(a5 + 120) = v43;
  *(_QWORD *)(a5 + 128) = v73;
  *(_QWORD *)(a5 + 136) = 0x3FE999999999999ALL;
  *(_QWORD *)(a5 + 144) = v63;
  *(_BYTE *)(a5 + 152) = 1;
  *(_QWORD *)(a5 + 160) = 0xD000000000000019;
  *(_QWORD *)(a5 + 168) = 0x80000001001145A0;
  *(_QWORD *)(a5 + 176) = v79;
  *(_DWORD *)(a5 + 184) = v71;
  *(double *)(a5 + 192) = v65;
  *(_QWORD *)(a5 + 200) = v68;
  *(_BYTE *)(a5 + 208) = 1;
  sub_10000F844(v80, v77, v70);
  swift_bridgeObjectRetain(v81);
  swift_retain(KeyPath);
  swift_bridgeObjectRetain(0x80000001001145C0);
  sub_10000F844(v58, v60, v43);
  swift_bridgeObjectRetain(v73);
  swift_retain(v63);
  swift_bridgeObjectRetain(0x80000001001145A0);
  sub_100007D90(v58, v60, v43);
  swift_bridgeObjectRelease(0x80000001001145A0);
  swift_release(v63);
  swift_bridgeObjectRelease(v73);
  sub_100007D90(v80, v77, v70);
  swift_bridgeObjectRelease(0x80000001001145C0);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v81);
}

void sub_100077F70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v37 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OpenURLAction(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v33 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v8, &unk_10011790C, &unk_100117974);
  v10 = type metadata accessor for Optional(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - v12;
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v14);
  v34 = (char *)&v33 - v15;
  v17 = type metadata accessor for EventDetailViewModel(0, v8, v7, v16);
  if (!sub_1000ED270(v17))
  {
    sub_1000ED618(v17);
    v18 = (uint64_t *)(v1 + *(int *)(a1 + 36));
    v19 = *v18;
    if (*v18)
    {
      swift_retain(*v18);
      sub_1000ED6C4(v20, v17);
      swift_release(v19);
      return;
    }
    goto LABEL_9;
  }
  sub_1000ED2F0(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return;
  }
  v21 = v34;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v34, v13, AssociatedTypeWitness);
  v22 = v33;
  sub_100018A2C(v33);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, AssociatedTypeWitness, &unk_10011790C, &unk_10011794C);
  v24 = v37;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  OpenURLAction.callAsFunction(_:)(v24);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v39);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v22, v36);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v27 = *v18;
  if (!*v18)
  {
LABEL_9:
    v30 = v18[1];
    v31 = type metadata accessor for RemoteViewConfiguration();
    v32 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v30, v31, v32);
    __break(1u);
    return;
  }
  v28 = v25;
  v29 = v26;
  swift_retain(*v18);
  sub_1000ED3A4(v28, v29, v27, v17);
  swift_bridgeObjectRelease(v29);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v21, AssociatedTypeWitness);
}

unint64_t sub_1000782C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C2F0;
  if (!qword_10015C2F0)
  {
    v1 = sub_100007D00(&qword_10015C2D0);
    sub_10000F4E0(&qword_10015C2F8, &qword_10015C2C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C2F0);
  }
  return result;
}

double sub_100078348(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_100078368(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  if (a4)
  {
    sub_10000F844(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a6);
    swift_retain(a8);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a10).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000783D8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 160);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_100078444(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    sub_100007D90(result, a2, a3 & 1);
    swift_bridgeObjectRelease(a10);
    swift_release(a8);
    swift_release(a6);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000784B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for EventDetailModule(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v13 = (int *)type metadata accessor for EventDetailViewModel(0, v5, v6, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v10 + v13[9], v5);
  v14 = (_QWORD *)(v4 + v10 + v13[10]);
  swift_release(*v14);
  swift_release(v14[1]);
  v15 = v4 + v10 + v13[11];
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + 24));
  swift_release(*(_QWORD *)(v4 + v10 + *(int *)(v7 + 36)));
  v16 = (_QWORD *)(v4 + v10 + *(int *)(v7 + 40));
  v17 = sub_100007D50(&qword_1001582E8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

void sub_1000785D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for EventDetailModule(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  sub_100077F70(v5);
}

uint64_t sub_100078614@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;

  v69 = a2;
  v73 = a1;
  v79 = a3;
  v75 = type metadata accessor for RoundedRectangle(0);
  v3 = __chkstk_darwin(v75);
  v78 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ButtonStyleConfiguration.Label(0, v3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100007D50(&qword_10015C380);
  __chkstk_darwin(v65);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100007D50(&qword_10015C388);
  __chkstk_darwin(v66);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100007D50(&qword_10015C390);
  __chkstk_darwin(v67);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100007D50(&qword_10015C398);
  __chkstk_darwin(v68);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100007D50(&qword_10015C3A0);
  __chkstk_darwin(v71);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100007D50(&qword_10015C3A8);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v72 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100007D50(&qword_10015C3B0);
  v20 = __chkstk_darwin(v70);
  v77 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ButtonStyleConfiguration.label.getter(v20);
  v23 = static Edge.Set.all.getter(v22);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v8, v5);
  v24 = &v10[*(int *)(v65 + 36)];
  *v24 = v23;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  v24[40] = 1;
  v25 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((ButtonStyleConfiguration.isPressed.getter(v25) & 1) != 0)
  {
    v26 = Color.opacity(_:)(0.3);
  }
  else
  {
    v26 = v69;
    swift_retain(v69);
  }
  KeyPath = swift_getKeyPath(&unk_10010D590);
  sub_100007E78((uint64_t)v10, (uint64_t)v12, &qword_10015C380);
  v28 = (uint64_t *)&v12[*(int *)(v66 + 36)];
  *v28 = KeyPath;
  v28[1] = v26;
  v29 = sub_100007F38((uint64_t)v10, &qword_10015C380);
  if ((ButtonStyleConfiguration.isPressed.getter(v29) & 1) != 0)
  {
    v30 = Color.opacity(_:)(0.3);
    v31 = v30;
  }
  else
  {
    v31 = v73;
    swift_retain(v73);
  }
  v32 = static Edge.Set.all.getter(v30);
  sub_100007E78((uint64_t)v12, (uint64_t)v14, &qword_10015C388);
  v33 = &v14[*(int *)(v67 + 36)];
  *(_QWORD *)v33 = v31;
  v33[8] = v32;
  sub_100007F38((uint64_t)v12, &qword_10015C388);
  v34 = v78;
  v35 = &v78[*(int *)(v75 + 20)];
  v36 = enum case for RoundedCornerStyle.continuous(_:);
  v37 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v35, v36, v37);
  __asm { FMOV            V0.2D, #10.0 }
  *v34 = _Q0;
  v43 = (uint64_t)&v16[*(int *)(v68 + 36)];
  sub_10000F760((uint64_t)v34, v43);
  *(_WORD *)(v43 + *(int *)(sub_100007D50(&qword_100158640) + 36)) = 256;
  sub_100007E78((uint64_t)v14, (uint64_t)v16, &qword_10015C390);
  sub_10000F854((uint64_t)v34);
  v44 = sub_100007F38((uint64_t)v14, &qword_10015C390);
  v45 = static Font.headline.getter(v44);
  v46 = swift_getKeyPath(&unk_10010D560);
  sub_100007E78((uint64_t)v16, (uint64_t)v18, &qword_10015C398);
  v47 = v71;
  v48 = (uint64_t *)&v18[*(int *)(v71 + 36)];
  *v48 = v46;
  v48[1] = v45;
  v49 = sub_100007F38((uint64_t)v16, &qword_10015C398);
  v50 = static Font.Weight.bold.getter(v49);
  v51 = sub_100079670();
  v52 = v72;
  View.fontWeight(_:)(*(_QWORD *)&v50, 0, v47, v51);
  sub_100007F38((uint64_t)v18, &qword_10015C3A0);
  v53 = swift_getKeyPath(&unk_10010D5C0);
  v54 = v74;
  v55 = v76;
  v56 = (uint64_t)v77;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v77, v52, v76);
  v57 = v56 + *(int *)(v70 + 36);
  *(_QWORD *)v57 = v53;
  *(_BYTE *)(v57 + 8) = 1;
  v58 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v52, v55);
  v59 = static Color.black.getter(v58);
  v60 = Color.opacity(_:)(0.1);
  swift_release(v59);
  v61 = v79;
  sub_100007E78(v56, v79, &qword_10015C3B0);
  v62 = v61 + *(int *)(sub_100007D50(&qword_10015C3E8) + 36);
  *(_QWORD *)v62 = v60;
  *(_OWORD *)(v62 + 8) = xmmword_1001087E0;
  *(_QWORD *)(v62 + 24) = 0x4010000000000000;
  return sub_100007F38(v56, &qword_10015C3B0);
}

uint64_t sub_100078BB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100078614(*v1, v1[1], a1);
}

__n128 sub_100078BC0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  _OWORD v14[9];

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  sub_10000F844(*(_QWORD *)a1, v4, v5);
  swift_bridgeObjectRetain(v6);
  v8 = static Alignment.center.getter(v7);
  sub_100042B7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v8, v9, v3, v4, v5, v6);
  sub_100007D90(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  v10 = v14[7];
  *(_OWORD *)(a2 + 96) = v14[6];
  *(_OWORD *)(a2 + 112) = v10;
  *(_OWORD *)(a2 + 128) = v14[8];
  v11 = v14[3];
  *(_OWORD *)(a2 + 32) = v14[2];
  *(_OWORD *)(a2 + 48) = v11;
  v12 = v14[5];
  *(_OWORD *)(a2 + 64) = v14[4];
  *(_OWORD *)(a2 + 80) = v12;
  result = (__n128)v14[1];
  *(_OWORD *)a2 = v14[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_100078CA8()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v13[16];
  _OWORD *v14;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;

  v1 = sub_100007D50(&qword_10015C368);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0[1];
  v16[0] = *v0;
  v16[1] = v5;
  v6 = v0[3];
  v17 = v0[2];
  v18 = v6;
  v7 = v6;
  v14 = v16;
  swift_retain(*((_QWORD *)&v6 + 1));
  v8 = sub_100007D50(&qword_100158E00);
  v9 = sub_10001DC68();
  Button.init(action:label:)(v7, *((_QWORD *)&v7 + 1), sub_100079410, v13, v8, v9);
  v15 = v17;
  v10 = sub_10000F4E0(&qword_10015C370, &qword_10015C368, (uint64_t)&protocol conformance descriptor for Button<A>);
  v11 = sub_100079418();
  View.buttonStyle<A>(_:)(&v15, v1, &type metadata for LargeButton.LargeButtonStyle, v10, v11);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100078DDC()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100078DFC()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100078E1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100007D50(&qword_100159640);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007E78(a1, (uint64_t)v4, &qword_100159640);
  return EnvironmentValues.textCase.setter(v4);
}

uint64_t sub_100078EB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_BYTE *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 192);
  sub_10000F844(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10000F844(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100078F64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_BYTE *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 192);
  sub_100007D90(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_100007D90(v5, v6, v7);
  swift_bridgeObjectRelease(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

double destroy for LargeButton(uint64_t a1)
{
  double result;

  sub_100007D90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 56)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000F844(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v11);
  swift_retain(v9);
  return a1;
}

uint64_t assignWithCopy for LargeButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000F844(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100007D90(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain(v14);
  swift_release(v15);
  v17 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v16;
  swift_retain(v16);
  swift_release(v18);
  return a1;
}

__n128 initializeWithTake for LargeButton(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LargeButton(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_100007D90(v5, v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v8);
  swift_release(*(_QWORD *)(a1 + 40));
  v9 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton()
{
  return &type metadata for LargeButton;
}

uint64_t sub_1000792E8()
{
  return sub_10001E0A8(&qword_10015C340, &qword_10015A6F0, (void (*)(void))sub_10007931C);
}

uint64_t sub_10007931C()
{
  return sub_10001E0A8(&qword_10015C348, &qword_10015A6E8, (void (*)(void))sub_100079340);
}

uint64_t sub_100079340()
{
  return sub_10001E0A8(&qword_10015C350, &qword_10015C2B8, (void (*)(void))sub_100079364);
}

unint64_t sub_100079364()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C358;
  if (!qword_10015C358)
  {
    v1 = sub_100007D00(&qword_10015C2B0);
    sub_10000F4E0(&qword_10015C360, &qword_10015C2A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10000F4E0(&qword_10015B088, &qword_10015B090, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C358);
  }
  return result;
}

uint64_t sub_100079400(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100117FE0, 1);
}

double sub_100079410@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_100078BC0(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

unint64_t sub_100079418()
{
  unint64_t result;

  result = qword_10015C378;
  if (!qword_10015C378)
  {
    result = swift_getWitnessTable(&unk_10010D664, &type metadata for LargeButton.LargeButtonStyle);
    atomic_store(result, (unint64_t *)&qword_10015C378);
  }
  return result;
}

uint64_t destroy for LargeButton.LargeButtonStyle(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s15ShazamEventsApp11LargeButtonV16LargeButtonStyleVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for LargeButton.LargeButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for LargeButton.LargeButtonStyle(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeButton.LargeButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeButton.LargeButtonStyle()
{
  return &type metadata for LargeButton.LargeButtonStyle;
}

uint64_t sub_1000795E8()
{
  _QWORD v1[4];

  v1[0] = sub_100007D00(&qword_10015C368);
  v1[1] = &type metadata for LargeButton.LargeButtonStyle;
  v1[2] = sub_10000F4E0(&qword_10015C370, &qword_10015C368, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[3] = sub_100079418();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

uint64_t sub_100079660(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118008, 1);
}

unint64_t sub_100079670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C3B8;
  if (!qword_10015C3B8)
  {
    v1 = sub_100007D00(&qword_10015C3A0);
    sub_1000796F4();
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C3B8);
  }
  return result;
}

unint64_t sub_1000796F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C3C0;
  if (!qword_10015C3C0)
  {
    v1 = sub_100007D00(&qword_10015C398);
    sub_100079778();
    sub_10000F4E0(&qword_100158638, &qword_100158640, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C3C0);
  }
  return result;
}

unint64_t sub_100079778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C3C8;
  if (!qword_10015C3C8)
  {
    v1 = sub_100007D00(&qword_10015C390);
    sub_1000797FC();
    sub_10000F4E0(&qword_100158628, &qword_100158630, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C3C8);
  }
  return result;
}

unint64_t sub_1000797FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C3D0;
  if (!qword_10015C3D0)
  {
    v1 = sub_100007D00(&qword_10015C388);
    sub_100079880();
    sub_10000F4E0((unint64_t *)&qword_1001588B0, &qword_1001588B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C3D0);
  }
  return result;
}

unint64_t sub_100079880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C3D8;
  if (!qword_10015C3D8)
  {
    v1 = sub_100007D00(&qword_10015C380);
    sub_100007428(&qword_10015C3E0, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C3D8);
  }
  return result;
}

uint64_t sub_100079904()
{
  return sub_10001E0A8(&qword_10015C3F0, &qword_10015C3E8, (void (*)(void))sub_100079938);
}

unint64_t sub_100079938()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015C3F8;
  if (!qword_10015C3F8)
  {
    v1 = sub_100007D00(&qword_10015C3B0);
    v2[0] = sub_100007D00(&qword_10015C3A0);
    v2[1] = sub_100079670();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000F4E0(&qword_10015C400, qword_10015C408, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C3F8);
  }
  return result;
}

uint64_t sub_1000799E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_10010D6C8;
    v4[4] = &unk_10010D6E0;
    v4[5] = &unk_10010D6F8;
    result = swift_initClassMetadata2(a1, 0, 6, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

char *sub_100079A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _OWORD *a8, double a9, double a10)
{
  uint64_t v10;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v21 = (char *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v22 = *(_QWORD *)v21;
  *((_QWORD *)v21 + 2) = a1;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 80) - 8) + 32))(&v21[*(_QWORD *)(v22 + 104)], a2);
  *(double *)&v21[*(_QWORD *)(*(_QWORD *)v21 + 112)] = a9;
  v23 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 120)];
  *(_QWORD *)v23 = a3;
  *((_QWORD *)v23 + 1) = a4;
  *((double *)v23 + 2) = a10;
  v24 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 128)];
  *(_QWORD *)v24 = a5;
  *((_QWORD *)v24 + 1) = a6;
  v24[16] = a7;
  v25 = &v21[*(_QWORD *)(*(_QWORD *)v21 + 136)];
  v26 = a8[1];
  *(_OWORD *)v25 = *a8;
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = a8[2];
  return v21;
}

uint64_t sub_100079B78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v4, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v8 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_100119D18, &unk_100119D20);
  v9 = swift_getAssociatedTypeWitness(255, v8, v7, &unk_100117714, &unk_100117734);
  v10 = type metadata accessor for Optional(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - v12;
  sub_10007A054((uint64_t)&v19 - v12);
  v14 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v15 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    if (qword_100158148 != -1)
      swift_once(&qword_100158148, sub_1000B75C0);
    v17 = qword_10016A598;
    v18 = swift_getAssociatedConformanceWitness(v8, v7, v9, &unk_100117714, &unk_10011772C);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 40))(v17, v17, v9, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v13, v9);
  }
}

id sub_100079D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  id v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &unk_10011790C, &unk_10011796C);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v5 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v6 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v5, &unk_100119D18, &unk_100119D20);
  v7 = swift_getAssociatedTypeWitness(255, v6, v5, &unk_100117714, &unk_100117734);
  v8 = type metadata accessor for Optional(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - v10;
  sub_10007A054((uint64_t)&v18 - v10);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v13 = swift_getAssociatedConformanceWitness(v6, v5, v7, &unk_100117714, &unk_10011772C);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v7, v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
    if (v14)
      return (id)v14;
  }
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v17 = objc_msgSend(v16, "CGColor");

  return v17;
}

double sub_100079F88()
{
  double v0;
  double result;

  v0 = sub_100079FFC();
  result = 0.0;
  if (v0 <= 0.0)
    return sub_100079FFC() * 0.125;
  return result;
}

double sub_100079FB8()
{
  uint64_t v0;
  double v1;
  double result;

  v1 = sub_100079FFC();
  result = 1.0;
  if (v1 > 0.0)
    return sub_100079FFC() * (1.0 / *(double *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112))) + 1.0;
  return result;
}

double sub_100079FFC()
{
  uint64_t v0;
  double v2;

  v0 = sub_100007D50(&qword_10015C490);
  Binding.wrappedValue.getter(v0);
  return v2;
}

uint64_t sub_10007A054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v3, &unk_10011790C, &unk_10011796C);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v20 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &unk_10011790C, &unk_10011792C);
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100119D18, &unk_100119D30);
  v10 = type metadata accessor for Optional(0);
  v20 = *(_QWORD *)(v10 - 8);
  v21 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - v11;
  (*(void (**)(uint64_t, uint64_t))(v2 + 208))(v3, v2);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  v23 = v13;
  v14 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v9, &unk_100119D18, &unk_100119D20);
  v15 = type metadata accessor for Set(0, v9, *(_QWORD *)(v14 + 8));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v15);
  Collection.first.getter(v15, WitnessTable);
  swift_bridgeObjectRelease(v13);
  v17 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
    v18 = swift_getAssociatedTypeWitness(0, v14, v9, &unk_100117714, &unk_100117734);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v22, 1, 1, v18);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 56))(v9, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v12, v9);
  }
}

uint64_t sub_10007A2B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  v2 = *v1;
  swift_release(v1[1]);
  swift_release(v2);
  v3 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v4 = *v3;
  swift_release(v3[1]);
  swift_release(v4);
  v5 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  v6 = *v5;
  swift_release(v5[1]);
  swift_release(v6);
  return v0;
}

uint64_t sub_10007A33C()
{
  uint64_t v0;

  sub_10007A2B0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for HeroImageLandscapeModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeroImageLandscapeModel);
}

uint64_t sub_10007A36C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v8 = *(_OWORD *)(v0 + 32);
    v7 = v8;
    swift_bridgeObjectRetain(v1);
    sub_100027618((uint64_t)&v8);
    v3._countAndFlagsBits = 10;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = v2;
    v4._object = v1;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(v1);
    return v7;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  }
  return v5;
}

uint64_t sub_10007A3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;

  v1 = v0;
  v2 = type metadata accessor for URLComponents(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()(v4);
  if (qword_100158110 != -1)
    swift_once(&qword_100158110, sub_10007A890);
  v7 = qword_10015C498;
  v8 = unk_10015C4A0;
  v9 = swift_bridgeObjectRetain(unk_10015C4A0);
  URLComponents.scheme.setter(v7, v8, v9);
  if (qword_100158118 != -1)
    swift_once(&qword_100158118, sub_10007A8B0);
  v10 = qword_10015C4A8;
  v11 = unk_10015C4B0;
  v12 = swift_bridgeObjectRetain(unk_10015C4B0);
  URLComponents.host.setter(v10, v11, v12);
  v13 = *(void **)(v1 + 56);
  if (v13)
  {
    v14 = *(_QWORD *)(v1 + 48);
    v24 = *(_OWORD *)(v1 + 32);
    v25 = v24;
    swift_bridgeObjectRetain(v13);
    sub_100027618((uint64_t)&v25);
    v15._countAndFlagsBits = 2106912;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v14;
    v16._object = v13;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v13);
    v17 = *((_QWORD *)&v24 + 1);
    v18 = v24;
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 32);
    v17 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain(v17);
  }
  v19 = sub_100007D50(&qword_10015B548);
  v20 = type metadata accessor for URLQueryItem(0);
  v21 = swift_allocObject(v19, ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100109020;
  if (qword_100158120 != -1)
    swift_once(&qword_100158120, sub_10007A8E0);
  URLQueryItem.init(name:value:)(qword_10015C4B8, unk_10015C4C0, v18, v17);
  swift_bridgeObjectRelease(v17);
  v22 = URLComponents.queryItems.setter(v21);
  URLComponents.url.getter(v22);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_10007A630(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  ValueWitnessTable *v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void **aBlock;
  uint64_t v22;
  Class (*v23)(uint64_t);
  ValueMetadata *v24;
  _QWORD *(*v25)();
  _QWORD *v26;
  char *v27;

  v3 = sub_100007D50(&qword_100159260);
  v4 = swift_allocObject(v3, 192, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100109440;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(v4 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v4 + 64) = &off_10015BAD8;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v4 + 104) = &off_10015BAB0;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v4 + 144) = &off_10015BB38;
  *(_BYTE *)(v4 + 112) = 4;
  *(_QWORD *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v4 + 184) = &off_10015BB10;
  *(_OWORD *)(v4 + 152) = xmmword_10010D770;
  *(_BYTE *)(v4 + 168) = 3;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  v24 = &type metadata for AnalyticsString;
  v25 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v22 = v8;
  v23 = (Class (*)(uint64_t))v9;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v27 = sub_100089D00((char *)1, 5, 1, (char *)v4);
  v10 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v13->initializeWithCopy)((uint64_t)v12, v14);
  sub_10008A6F0(4, (uint64_t)v12, (uint64_t *)&v27, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v15 = v27;
  v16 = String._bridgeToObjectiveC()();
  v17 = (_QWORD *)swift_allocObject(&unk_10014C0E0, 40, 7);
  v17[2] = 0xD00000000000001ELL;
  v17[3] = 0x80000001001131B0;
  v17[4] = v15;
  v25 = sub_100022948;
  v26 = v17;
  aBlock = _NSConcreteStackBlock;
  v22 = 1107296256;
  v23 = sub_100089C8C;
  v24 = (ValueMetadata *)&unk_10014C0F8;
  v18 = _Block_copy(&aBlock);
  v19 = v26;
  swift_bridgeObjectRetain(v15);
  swift_release(v19);
  AnalyticsSendEventLazy(v16, v18);
  _Block_release(v18);
  swift_bridgeObjectRelease(v15);

}

void sub_10007A890()
{
  qword_10015C498 = 0x7370747468;
  unk_10015C4A0 = 0xE500000000000000;
}

void sub_10007A8B0()
{
  strcpy((char *)&qword_10015C4A8, "maps.apple.com");
  unk_10015C4B7 = -18;
}

void sub_10007A8E0()
{
  qword_10015C4B8 = 113;
  unk_10015C4C0 = 0xE100000000000000;
}

uint64_t sub_10007A8F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007A924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007A934(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007A93C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  sub_1000DED48();
  if (v0)
  {
    v1 = v0;
    if (*(_QWORD *)(v0 + 16))
    {
      v2 = sub_100086F64(0);
      if ((v3 & 1) != 0)
      {
        v4 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 56) + v2);
        swift_bridgeObjectRelease(v1);
        __asm { BR              X9 }
      }
    }
    swift_bridgeObjectRelease(v1);
  }
  return 0;
}

uint64_t destroy for LocationViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
}

uint64_t initializeWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v7 = *(void **)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v6;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10 = v7;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 64);
  v11 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = v11;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

__n128 initializeWithTake for LocationViewModel(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for LocationViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v8 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationViewModel()
{
  return &type metadata for LocationViewModel;
}

void sub_10007AD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v6 - 8) + 64;
    v14[1] = &unk_10010D7C8;
    v14[2] = &unk_10010D7E0;
    sub_10003C940(319, (unint64_t *)&qword_100159888, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
    if (v9 <= 0x3F)
    {
      v14[3] = *(_QWORD *)(v8 - 8) + 64;
      sub_10003C940(319, (unint64_t *)&qword_100158FE8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v11 <= 0x3F)
      {
        v14[4] = *(_QWORD *)(v10 - 8) + 64;
        sub_1000175DC(319);
        if (v13 <= 0x3F)
        {
          v15 = *(_QWORD *)(v12 - 8) + 64;
          v16 = v15;
          swift_initStructMetadata(a1, 0, 7, v14, a1 + 32);
        }
      }
    }
  }
}

uint64_t *sub_10007AE68(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v25);
  }
  else
  {
    v8 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(a3 + 36);
    v11 = *(int *)(a3 + 40);
    v12 = (uint64_t *)((char *)a1 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (uint64_t *)((char *)a1 + v11);
    v16 = (uint64_t *)((char *)a2 + v11);
    v18 = *v16;
    v17 = v16[1];
    *v15 = v18;
    v15[1] = v17;
    v19 = *(int *)(a3 + 44);
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    swift_retain(v14);
    swift_retain(v18);
    v22 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v26 = *v21;
      *v20 = *v21;
      swift_retain(v26);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v27 = *(int *)(a3 + 48);
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 1;
    }
    else
    {
      v35 = *v29;
      *v28 = *v29;
      swift_retain(v35);
      v32 = v28;
      v33 = v30;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
    v36 = *(int *)(a3 + 52);
    v37 = (uint64_t *)((char *)a1 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for UserInterfaceSizeClass(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40))
      {
        v42 = sub_100007D50(&qword_100158970);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v41 + 16))(v37, v38, v40);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
      }
      v44 = v37;
      v45 = v39;
      v46 = 1;
    }
    else
    {
      v43 = *v38;
      *v37 = *v38;
      swift_retain(v43);
      v44 = v37;
      v45 = v39;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
    v47 = *(int *)(a3 + 56);
    v48 = (uint64_t *)((char *)a1 + v47);
    v49 = (uint64_t *)((char *)a2 + v47);
    if (swift_getEnumCaseMultiPayload(v49, v39) == 1)
    {
      v50 = type metadata accessor for UserInterfaceSizeClass(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = sub_100007D50(&qword_100158970);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v51 + 16))(v48, v49, v50);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v54 = v48;
      v55 = v39;
      v56 = 1;
    }
    else
    {
      v53 = *v49;
      *v48 = *v49;
      swift_retain(v53);
      v54 = v48;
      v55 = v39;
      v56 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v55, v56);
  }
  return a1;
}

void sub_10007B1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36) + 8));
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40)));
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 44));
  v9 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + *(int *)(a2 + 48));
  v12 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(a1 + *(int *)(a2 + 52));
  v15 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v18 = (_QWORD *)(a1 + *(int *)(a2 + 56));
  if (swift_getEnumCaseMultiPayload(v18, v15) == 1)
  {
    v19 = type metadata accessor for UserInterfaceSizeClass(0);
    v20 = *(_QWORD *)(v19 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v18, v19);
  }
  else
  {
    swift_release(*v18);
  }
}

uint64_t sub_10007B3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(a1 + v10);
  v15 = (uint64_t *)(a2 + v10);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  v18 = *(int *)(a3 + 44);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  swift_retain(v13);
  swift_retain(v17);
  v21 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
    v23 = 1;
  }
  else
  {
    v24 = *v20;
    *v19 = *v20;
    swift_retain(v24);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v21, v23);
  v25 = *(int *)(a3 + 48);
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    v30 = v26;
    v31 = v28;
    v32 = 1;
  }
  else
  {
    v33 = *v27;
    *v26 = *v27;
    swift_retain(v33);
    v30 = v26;
    v31 = v28;
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  v34 = *(int *)(a3 + 52);
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for UserInterfaceSizeClass(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38))
    {
      v40 = sub_100007D50(&qword_100158970);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(v35, v36, v38);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
    }
    v42 = v35;
    v43 = v37;
    v44 = 1;
  }
  else
  {
    v41 = *v36;
    *v35 = *v36;
    swift_retain(v41);
    v42 = v35;
    v43 = v37;
    v44 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v43, v44);
  v45 = *(int *)(a3 + 56);
  v46 = (uint64_t *)(a1 + v45);
  v47 = (uint64_t *)(a2 + v45);
  if (swift_getEnumCaseMultiPayload(v47, v37) == 1)
  {
    v48 = type metadata accessor for UserInterfaceSizeClass(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_100007D50(&qword_100158970);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v49 + 16))(v46, v47, v48);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v52 = v46;
    v53 = v37;
    v54 = 1;
  }
  else
  {
    v51 = *v47;
    *v46 = *v47;
    swift_retain(v51);
    v52 = v46;
    v53 = v37;
    v54 = 0;
  }
  swift_storeEnumTagMultiPayload(v52, v53, v54);
  return a1;
}

uint64_t sub_10007B6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v12 = v11[1];
  v13 = v10[1];
  v10[1] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(int *)(a3 + 40);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  v18 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v18;
  swift_retain(v18);
  swift_release(v17);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 44);
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)(a2 + v19);
    sub_100007F38(a1 + v19, qword_100158AC8);
    v22 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = *(int *)(a3 + 48);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)(a2 + v26);
    sub_100007F38(a1 + v26, &qword_100158AC0);
    v29 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *v28;
      *v27 = *v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    v35 = *(int *)(a3 + 52);
    v36 = (uint64_t *)(a1 + v35);
    v37 = (uint64_t *)(a2 + v35);
    sub_100007F38(a1 + v35, &qword_100158968);
    v38 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for UserInterfaceSizeClass(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      {
        v41 = sub_100007D50(&qword_100158970);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v40 + 16))(v36, v37, v39);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
      }
      v43 = v36;
      v44 = v38;
      v45 = 1;
    }
    else
    {
      v42 = *v37;
      *v36 = *v37;
      swift_retain(v42);
      v43 = v36;
      v44 = v38;
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v44, v45);
    v46 = *(int *)(a3 + 56);
    v47 = (uint64_t *)(a1 + v46);
    v48 = (uint64_t *)(a2 + v46);
    sub_100007F38(a1 + v46, &qword_100158968);
    v49 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
    {
      v50 = type metadata accessor for UserInterfaceSizeClass(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50))
      {
        v52 = sub_100007D50(&qword_100158970);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v51 + 16))(v47, v48, v50);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v47, 0, 1, v50);
      }
      v54 = v47;
      v55 = v49;
      v56 = 1;
    }
    else
    {
      v53 = *v48;
      *v47 = *v48;
      swift_retain(v53);
      v54 = v47;
      v55 = v49;
      v56 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v55, v56);
  }
  return a1;
}

uint64_t sub_10007BA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 40);
  *(_OWORD *)(a1 + *(int *)(a3 + 36)) = *(_OWORD *)(a2 + *(int *)(a3 + 36));
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = *(int *)(a3 + 44);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = *(int *)(a3 + 48);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v20 = *(int *)(a3 + 52);
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
    {
      v26 = sub_100007D50(&qword_100158970);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v21, v22, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
    }
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v27 = *(int *)(a3 + 56);
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (swift_getEnumCaseMultiPayload(v29, v23) == 1)
  {
    v30 = type metadata accessor for UserInterfaceSizeClass(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = sub_100007D50(&qword_100158970);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    swift_storeEnumTagMultiPayload(v28, v23, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10007BD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_release(v14);
  v15 = *(int *)(a3 + 40);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_release(v18);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 44);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_100007F38(a1 + v19, qword_100158AC8);
    v22 = sub_100007D50(qword_100158AC8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    v24 = *(int *)(a3 + 48);
    v25 = (void *)(a1 + v24);
    v26 = (const void *)(a2 + v24);
    sub_100007F38(a1 + v24, &qword_100158AC0);
    v27 = sub_100007D50(&qword_100158AC0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    v29 = *(int *)(a3 + 52);
    v30 = (void *)(a1 + v29);
    v31 = (const void *)(a2 + v29);
    sub_100007F38(a1 + v29, &qword_100158968);
    v32 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for UserInterfaceSizeClass(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33))
      {
        v35 = sub_100007D50(&qword_100158970);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v30, v31, v33);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      }
      swift_storeEnumTagMultiPayload(v30, v32, 1);
    }
    else
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    v36 = *(int *)(a3 + 56);
    v37 = (void *)(a1 + v36);
    v38 = (const void *)(a2 + v36);
    sub_100007F38(a1 + v36, &qword_100158968);
    v39 = sub_100007D50(&qword_100158968);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for UserInterfaceSizeClass(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40))
      {
        v42 = sub_100007D50(&qword_100158970);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v37, v38, v40);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
      }
      swift_storeEnumTagMultiPayload(v37, v39, 1);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10007C120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007C12C);
}

uint64_t sub_10007C12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
    return v11(v12, a2, v10);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v15 = sub_100007D50(&qword_100158670);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
    {
      v10 = v15;
      v17 = *(int *)(a3 + 44);
    }
    else
    {
      v18 = sub_100007D50(qword_100158F60);
      v16 = *(_QWORD *)(v18 - 8);
      if (*(_DWORD *)(v16 + 84) == (_DWORD)a2)
      {
        v10 = v18;
        v17 = *(int *)(a3 + 48);
      }
      else
      {
        v10 = sub_100007D50(&qword_100158978);
        v16 = *(_QWORD *)(v10 - 8);
        v17 = *(int *)(a3 + 52);
      }
    }
    v12 = a1 + v17;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    return v11(v12, a2, v10);
  }
  v13 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t sub_10007C23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007C248);
}

uint64_t sub_10007C248(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  result = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = result;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
      return result;
    }
    v14 = sub_100007D50(&qword_100158670);
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a3)
    {
      v11 = v14;
      v16 = *(int *)(a4 + 44);
    }
    else
    {
      v17 = sub_100007D50(qword_100158F60);
      v15 = *(_QWORD *)(v17 - 8);
      if (*(_DWORD *)(v15 + 84) == a3)
      {
        v11 = v17;
        v16 = *(int *)(a4 + 48);
      }
      else
      {
        v11 = sub_100007D50(&qword_100158978);
        v15 = *(_QWORD *)(v11 - 8);
        v16 = *(int *)(a4 + 52);
      }
    }
    v13 = a1 + v16;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  }
  return v12(v13, a2, a2, v11);
}

uint64_t type metadata accessor for PromotionalAssetsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007FC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PromotionalAssetsView);
}

uint64_t sub_10007C360(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100118174, 1);
}

uint64_t sub_10007C394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_10007C3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PromotionalAssetsViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  return Bindable.projectedValue.getter(v5);
}

uint64_t sub_10007C408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t TupleTypeMetadata2;
  uint64_t TupleTypeMetadata;
  uint64_t v49;
  uint64_t WitnessTable;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t OpaqueTypeConformance2;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  __n128 v144;
  char *v145;
  uint64_t v146;
  double v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  __n128 v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t KeyPath;
  uint64_t v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  __n128 v177;
  char *v178;
  void (*v179)(char *, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, char *, uint64_t);
  char *v185;
  uint64_t v186;
  char *v187;
  __n128 v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  __n128 v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t, char *, uint64_t);
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  __n128 v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  __n128 v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  __n128 v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  void (*v315)(char *, uint64_t, uint64_t);
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD v320[32];
  _QWORD v321[4];
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;

  v302 = a2;
  v307 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v307);
  v301 = (uint64_t)&v238 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  v299 = *(_QWORD *)(v4 - 8);
  v300 = v4;
  __chkstk_darwin(v4);
  v298 = (char *)&v238 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = a1;
  v308 = a1;
  v9 = v6;
  v10 = v7;
  v12 = type metadata accessor for PromotionalAssetsViewModel(255, v6, v7, v11);
  v13 = type metadata accessor for Bindable(0, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v296 = v13;
  v297 = v14;
  __chkstk_darwin(v13);
  v295 = (char *)&v238 - v15;
  v309 = *(_QWORD *)(v8 - 8);
  v314 = *(_QWORD *)(v309 + 64);
  __chkstk_darwin(v16);
  v312 = (char *)&v238 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for CoordinateSpace(0);
  v311 = *((_QWORD *)v315 - 1);
  v18 = __chkstk_darwin(v315);
  v310 = (uint64_t)&v238 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = (char *)type metadata accessor for NavigationPath(255, v18);
  v317 = v10;
  v316 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, v9, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v9, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v22 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v23 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v22, &unk_100116D14, &unk_100116D24);
  v24 = swift_getAssociatedTypeWitness(255, v23, v22, &unk_10011615C, &unk_10011617C);
  v25 = swift_getAssociatedConformanceWitness(v23, v22, v24, &unk_10011615C, &unk_100116174);
  type metadata accessor for TourPhotosView(255, v24, v25, v26);
  v27 = type metadata accessor for _ConditionalContent(255);
  v28 = type metadata accessor for Group(255, v27);
  v29 = sub_100007D00(&qword_10015C548);
  v30 = type metadata accessor for ModifiedContent(255, v28, v29);
  v31 = sub_100007D00(&qword_10015C550);
  v322 = type metadata accessor for ModifiedContent(255, v30, v31);
  v32 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v33 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v32, &unk_100116D14, &unk_100116D2C);
  v35 = type metadata accessor for FeaturedVideosView(255, v32, v33, v34);
  v36 = sub_100007D00(&qword_10015C558);
  v37 = type metadata accessor for ModifiedContent(255, v35, v36);
  v38 = sub_100007D00(&qword_10015C560);
  type metadata accessor for ModifiedContent(255, v37, v38);
  v323 = type metadata accessor for Optional(255);
  v324 = sub_100007D00(&qword_10015C568);
  v39 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
  v40 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
  v41 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v39, &unk_100116D14, &unk_100116D1C);
  v42 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v40, &unk_100116D14, &unk_100116D34);
  v321[0] = v39;
  v321[1] = v40;
  v321[2] = v41;
  v321[3] = v42;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v321);
  type metadata accessor for PhoneWallpaperView(255, v39, v41, v43);
  v44 = type metadata accessor for Optional(255);
  type metadata accessor for WatchFacesView(255, v40, v42, v45);
  v46 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v44, v46, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  type metadata accessor for _ConditionalContent(255);
  v325 = type metadata accessor for Optional(255);
  v326 = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v49 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v49);
  v51 = type metadata accessor for VStack(255, v49, WitnessTable);
  v52 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v51);
  v54 = type metadata accessor for ObservableScrollView(255, v51, v52, v53);
  v55 = type metadata accessor for ModifiedContent(255, v54, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v320[30] = swift_getWitnessTable(&unk_10010F020, v54);
  v320[31] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  v322 = v55;
  v323 = v56;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v322, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v58 = sub_100007D00(&qword_10015C570);
  v59 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v58);
  v60 = sub_100007D00(&qword_10015A498);
  v61 = type metadata accessor for ModifiedContent(255, v59, v60);
  v322 = v55;
  v323 = v56;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v322, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v63 = sub_10000F4E0(&qword_10015C578, &qword_10015C570, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v320[28] = OpaqueTypeConformance2;
  v320[29] = v63;
  v64 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v59);
  v65 = sub_10000F4E0(&qword_10015A4A8, &qword_10015A498, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v320[26] = v64;
  v320[27] = v65;
  v255 = v61;
  v256 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v61);
  v66 = type metadata accessor for NavigationStack(0, v306, v61, v256);
  v260 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v252 = (char *)&v238 - v67;
  v68 = sub_100007D00(&qword_10015C580);
  v240 = v66;
  v69 = type metadata accessor for ModifiedContent(0, v66, v68);
  v271 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v303 = (unint64_t)&v238 - v70;
  v71 = sub_100007D00(&qword_10015C588);
  v247 = v69;
  v72 = type metadata accessor for ModifiedContent(0, v69, v71);
  v270 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v258 = (char *)&v238 - v73;
  v74 = sub_100007D00(&qword_10015C590);
  v248 = v72;
  v75 = type metadata accessor for ModifiedContent(0, v72, v74);
  v282 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v259 = (char *)&v238 - v76;
  v77 = sub_100007D00(&qword_10015C598);
  v253 = v75;
  v78 = type metadata accessor for ModifiedContent(0, v75, v77);
  v292 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v306 = (char *)&v238 - v79;
  v80 = sub_100007D00(&qword_10015A4F0);
  v81 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v66);
  v239 = v81;
  v82 = sub_10000F4E0(&qword_10015C5A0, &qword_10015C580, (uint64_t)&unk_100108C38);
  v320[24] = v81;
  v320[25] = v82;
  v83 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v69);
  v244 = v83;
  v84 = sub_10000F4E0(&qword_10015C5A8, &qword_10015C588, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v320[22] = v83;
  v320[23] = v84;
  v85 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v72);
  v246 = v85;
  v86 = sub_10000F4E0(&qword_10015C5B0, &qword_10015C590, (uint64_t)&unk_10010C4A0);
  v320[20] = v85;
  v320[21] = v86;
  v87 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v75);
  v249 = v87;
  v88 = sub_10000F4E0(&qword_10015C5B8, &qword_10015C598, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v320[18] = v87;
  v320[19] = v88;
  v89 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v78);
  v90 = sub_100007D00(&qword_10015A4F8);
  v91 = sub_10001E0A8(&qword_10015A500, &qword_10015A4F8, (void (*)(void))sub_10004EC0C);
  v322 = v90;
  v323 = v91;
  v305 = swift_getOpaqueTypeConformance2(&v322, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v322 = v78;
  v323 = v80;
  v242 = v80;
  v243 = v78;
  v324 = v89;
  v325 = v305;
  v241 = v89;
  v92 = swift_getOpaqueTypeMetadata2(0, &v322, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v273 = *(_QWORD *)(v92 - 8);
  v264 = v92;
  __chkstk_darwin(v92);
  v304 = (char *)&v238 - v93;
  v95 = type metadata accessor for ModifiedContent(0, v94, &type metadata for _AppearanceActionModifier);
  v281 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v261 = (char *)&v238 - v96;
  v251 = v95;
  v97 = type metadata accessor for ModifiedContent(0, v95, &type metadata for _AppearanceActionModifier);
  v289 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v266 = (char *)&v238 - v98;
  v99 = type metadata accessor for _TaskModifier(255);
  v257 = v97;
  v100 = type metadata accessor for ModifiedContent(0, v97, v99);
  v291 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v277 = (char *)&v238 - v101;
  v263 = v100;
  v102 = type metadata accessor for ModifiedContent(0, v100, &type metadata for _AppearanceActionModifier);
  v293 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v284 = (char *)&v238 - v103;
  v276 = v102;
  v104 = type metadata accessor for ModifiedContent(0, v102, &type metadata for _AppearanceActionModifier);
  v294 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v290 = (char *)&v238 - v105;
  v322 = v78;
  v323 = v80;
  v324 = v89;
  v325 = v305;
  v245 = swift_getOpaqueTypeConformance2(&v322, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v320[16] = v245;
  v320[17] = &protocol witness table for _AppearanceActionModifier;
  v250 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v95);
  v320[14] = v250;
  v320[15] = &protocol witness table for _AppearanceActionModifier;
  v106 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v97);
  v254 = v106;
  v107 = sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v320[12] = v106;
  v320[13] = v107;
  v262 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v100);
  v320[10] = v262;
  v320[11] = &protocol witness table for _AppearanceActionModifier;
  v275 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v102);
  v320[8] = v275;
  v320[9] = &protocol witness table for _AppearanceActionModifier;
  v108 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v104);
  v109 = sub_10004EC50();
  v269 = v104;
  v110 = v307;
  v322 = v104;
  v323 = v307;
  v324 = v108;
  v325 = v109;
  v111 = v108;
  v272 = v108;
  v112 = v109;
  v113 = swift_getOpaqueTypeMetadata2(0, &v322, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v287 = *(_QWORD *)(v113 - 8);
  v114 = v113;
  v279 = v113;
  __chkstk_darwin(v113);
  v268 = (char *)&v238 - v115;
  v322 = v104;
  v323 = v110;
  v324 = v111;
  v325 = v112;
  v265 = v112;
  v278 = swift_getOpaqueTypeConformance2(&v322, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v322 = v114;
  v323 = v110;
  v324 = v278;
  v325 = v112;
  v116 = swift_getOpaqueTypeMetadata2(0, &v322, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v286 = *(_QWORD *)(v116 - 8);
  v280 = v116;
  __chkstk_darwin(v116);
  v267 = (char *)&v238 - v117;
  v118 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v285 = type metadata accessor for ModifiedContent(0, v116, v118);
  v288 = *(_QWORD *)(v285 - 8);
  __chkstk_darwin(v285);
  v274 = (char *)&v238 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __chkstk_darwin(v120);
  v283 = (uint64_t)&v238 - v122;
  v123 = v316;
  v320[2] = v316;
  v124 = v317;
  v320[3] = v317;
  v125 = v313;
  v320[4] = v313;
  v126 = v252;
  NavigationStack.init<>(root:)(sub_100082EF0, v320, v255, v256, v121);
  v127 = sub_100082EFC();
  v128 = v310;
  v130 = v239;
  v129 = v240;
  sub_100044784(v310);
  sub_10005698C((uint64_t)&type metadata for PromotionalAssetsViewSizePreferenceKey, v128, (uint64_t)sub_100051360, 0, v129, (uint64_t)&type metadata for PromotionalAssetsViewSizePreferenceKey, v130, v127, v303);
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v311 + 8))(v128, v315);
  (*(void (**)(char *, uint64_t))(v260 + 8))(v126, v129);
  v131 = v309;
  v315 = *(void (**)(char *, uint64_t, uint64_t))(v309 + 16);
  v132 = v312;
  v133 = v125;
  v134 = v308;
  v315(v312, v125, v308);
  v135 = *(unsigned __int8 *)(v131 + 80);
  v136 = v131;
  v314 += (v135 + 32) & ~v135;
  v137 = (v135 + 32) & ~v135;
  v311 = v137;
  v310 = v135 | 7;
  v138 = swift_allocObject(&unk_10014C218, v314, v135 | 7);
  *(_QWORD *)(v138 + 16) = v123;
  *(_QWORD *)(v138 + 24) = v124;
  v309 = *(_QWORD *)(v136 + 32);
  v139 = v134;
  ((void (*)(uint64_t, char *, uint64_t))v309)(v138 + v137, v132, v134);
  v140 = sub_100007428(&qword_100159938, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v141 = v258;
  v142 = v247;
  v143 = v303;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for PromotionalAssetsViewSizePreferenceKey, sub_100082F44, v138, v247, &type metadata for PromotionalAssetsViewSizePreferenceKey, v244, v127, v140);
  v144 = swift_release(v138);
  (*(void (**)(unint64_t, uint64_t, __n128))(v271 + 8))(v143, v142, v144);
  v303 = sub_100082F9C();
  v145 = v259;
  v146 = v248;
  v147 = sub_1000573F0((uint64_t)&type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, (uint64_t)sub_10004D770, 0, v248, (uint64_t)&type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, v246, v303);
  (*(void (**)(char *, uint64_t, double))(v270 + 8))(v141, v146, v147);
  v148 = v132;
  v149 = v132;
  v150 = v133;
  v151 = v139;
  v315(v149, v133, v139);
  v152 = swift_allocObject(&unk_10014C240, v314, v310);
  v153 = v316;
  v154 = v317;
  *(_QWORD *)(v152 + 16) = v316;
  *(_QWORD *)(v152 + 24) = v154;
  ((void (*)(uint64_t, char *, uint64_t))v309)(v152 + v311, v148, v139);
  v155 = sub_10004EDCC();
  v156 = v253;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, sub_100082FE4, v152, v253, &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey, v249, v303, v155);
  v157 = swift_release(v152);
  (*(void (**)(char *, uint64_t, __n128))(v282 + 8))(v145, v156, v157);
  v158 = v295;
  sub_10007C3D0(v139, v159, v160, v161);
  v318 = v153;
  v162 = v153;
  v319 = v154;
  KeyPath = swift_getKeyPath(&unk_10010D858);
  v164 = v296;
  Bindable<A>.subscript.getter(&v322, KeyPath, v296);
  v165 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v297 + 8))(v158, v164, v165);
  v166 = v322;
  v167 = v323;
  LODWORD(v303) = v324;
  v168 = v312;
  v169 = v150;
  v170 = v151;
  v315(v312, v169, v151);
  v171 = v314;
  v172 = v310;
  v173 = swift_allocObject(&unk_10014C268, v314, v310);
  *(_QWORD *)(v173 + 16) = v162;
  *(_QWORD *)(v173 + 24) = v154;
  v174 = v311;
  ((void (*)(uint64_t, char *, uint64_t))v309)(v173 + v311, v168, v170);
  v175 = v243;
  v176 = v306;
  View.sheet<A>(isPresented:onDismiss:content:)(v166, v167, v303, 0, 0, sub_1000830A8, v173, v243, v242, v241, v305);
  swift_release(v167);
  swift_release(v173);
  v177 = swift_release(v166);
  (*(void (**)(char *, uint64_t, __n128))(v292 + 8))(v176, v175, v177);
  v178 = v312;
  v179 = v315;
  v315(v312, v313, v170);
  v180 = swift_allocObject(&unk_10014C290, v171, v172);
  v181 = v317;
  *(_QWORD *)(v180 + 16) = v316;
  *(_QWORD *)(v180 + 24) = v181;
  v182 = v170;
  v183 = v170;
  v184 = (void (*)(uint64_t, char *, uint64_t))v309;
  ((void (*)(uint64_t, char *, uint64_t))v309)(v180 + v174, v178, v182);
  v185 = v261;
  v186 = v264;
  v187 = v304;
  View.onAppear(perform:)(sub_100083104, v180, v264, v245);
  v188 = swift_release(v180);
  (*(void (**)(char *, uint64_t, __n128))(v273 + 8))(v187, v186, v188);
  v189 = v178;
  v190 = v313;
  v191 = v183;
  v179(v178, v313, v183);
  v192 = swift_allocObject(&unk_10014C2B8, v314, v310);
  v193 = v316;
  v194 = v317;
  *(_QWORD *)(v192 + 16) = v316;
  *(_QWORD *)(v192 + 24) = v194;
  v195 = v311;
  v184(v192 + v311, v189, v191);
  v196 = v266;
  v197 = v251;
  View.onDisappear(perform:)(sub_100083114, v192, v251, v250);
  v198 = swift_release(v192);
  (*(void (**)(char *, uint64_t, __n128))(v281 + 8))(v185, v197, v198);
  v199 = v312;
  v200 = v308;
  v315(v312, v190, v308);
  v201 = swift_allocObject(&unk_10014C2E0, v314, v310);
  *(_QWORD *)(v201 + 16) = v193;
  *(_QWORD *)(v201 + 24) = v194;
  v202 = (void (*)(uint64_t, char *, uint64_t))v309;
  ((void (*)(uint64_t, char *, uint64_t))v309)(v201 + v195, v199, v200);
  v203 = v298;
  v204 = v257;
  v205 = v254;
  j___sScP13userInitiatedScPvgZ(v257);
  v206 = v277;
  View.task(priority:_:)(v203, &unk_10015C5D8, v201, v204, v205);
  v207 = swift_release(v201);
  (*(void (**)(char *, uint64_t, __n128))(v299 + 8))(v203, v300, v207);
  (*(void (**)(char *, uint64_t))(v289 + 8))(v196, v204);
  v208 = v312;
  v209 = v190;
  v210 = v308;
  v315(v312, v209, v308);
  v211 = v310;
  v212 = swift_allocObject(&unk_10014C308, v314, v310);
  v213 = v317;
  *(_QWORD *)(v212 + 16) = v316;
  *(_QWORD *)(v212 + 24) = v213;
  v202(v212 + v311, v208, v210);
  v214 = v284;
  v215 = v263;
  View.onAppear(perform:)(sub_1000831A8, v212, v263, v262);
  v216 = swift_release(v212);
  (*(void (**)(char *, uint64_t, __n128))(v291 + 8))(v206, v215, v216);
  v315(v208, v313, v210);
  v217 = swift_allocObject(&unk_10014C330, v314, v211);
  v218 = v317;
  *(_QWORD *)(v217 + 16) = v316;
  *(_QWORD *)(v217 + 24) = v218;
  v202(v217 + v311, v208, v210);
  v219 = v290;
  v220 = v276;
  View.onDisappear(perform:)(sub_1000831B8, v217, v276, v275);
  v221 = swift_release(v217);
  (*(void (**)(char *, uint64_t, __n128))(v293 + 8))(v214, v220, v221);
  v222 = v301;
  sub_100018474(v301);
  v223 = v268;
  v224 = v269;
  v225 = v307;
  v226 = v265;
  View.onChange<A>(of:initial:_:)(v222, 0, sub_100082E8C, 0, v269, v307, v272, v265);
  sub_100007F38(v222, &qword_100158970);
  (*(void (**)(char *, uint64_t))(v294 + 8))(v219, v224);
  sub_100018474(v222);
  v227 = v267;
  v229 = v278;
  v228 = v279;
  View.onChange<A>(of:initial:_:)(v222, 0, sub_100082E8C, 0, v279, v225, v278, v226);
  sub_100007F38(v222, &qword_100158970);
  (*(void (**)(char *, uint64_t))(v287 + 8))(v223, v228);
  v322 = v228;
  v323 = v225;
  v324 = v229;
  v325 = v226;
  v230 = swift_getOpaqueTypeConformance2(&v322, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v231 = (uint64_t)v274;
  v232 = v280;
  View.accessibilityIdentifier(_:)(0xD000000000000017, 0x8000000100114630, v280, v230);
  (*(void (**)(char *, uint64_t))(v286 + 8))(v227, v232);
  v233 = sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v320[6] = v230;
  v320[7] = v233;
  v234 = v285;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v285);
  v235 = v283;
  sub_10005135C(v231, v234, v283);
  v236 = *(void (**)(uint64_t, uint64_t))(v288 + 8);
  v236(v231, v234);
  sub_1000424BC(v235, v234, v302);
  return ((uint64_t (*)(uint64_t, uint64_t))v236)(v235, v234);
}

uint64_t sub_10007DA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t TupleTypeMetadata;
  uint64_t v39;
  uint64_t WitnessTable;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  _QWORD *v78;
  __n128 v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t OpaqueTypeConformance2;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  char v137[16];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  _QWORD v147[4];
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v124 = a3;
  v131 = a2;
  v133 = a1;
  v129 = a4;
  v128 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v128);
  v127 = (uint64_t)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for PromotionalAssetsView(0, a2, a3, v7);
  v8 = *(_QWORD *)(v132 - 8);
  v126 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v132);
  v125 = (char *)&v110 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v12 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v12, &unk_100116D14, &unk_100116D24);
  v14 = swift_getAssociatedTypeWitness(255, v13, v12, &unk_10011615C, &unk_10011617C);
  v15 = swift_getAssociatedConformanceWitness(v13, v12, v14, &unk_10011615C, &unk_100116174);
  type metadata accessor for TourPhotosView(255, v14, v15, v16);
  v17 = type metadata accessor for _ConditionalContent(255);
  v18 = type metadata accessor for Group(255, v17);
  v19 = sub_100007D00(&qword_10015C548);
  v20 = type metadata accessor for ModifiedContent(255, v18, v19);
  v21 = sub_100007D00(&qword_10015C550);
  v148 = type metadata accessor for ModifiedContent(255, v20, v21);
  v22 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v23 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v22, &unk_100116D14, &unk_100116D2C);
  v25 = type metadata accessor for FeaturedVideosView(255, v22, v23, v24);
  v26 = sub_100007D00(&qword_10015C558);
  v27 = type metadata accessor for ModifiedContent(255, v25, v26);
  v28 = sub_100007D00(&qword_10015C560);
  type metadata accessor for ModifiedContent(255, v27, v28);
  v149 = type metadata accessor for Optional(255);
  v150 = sub_100007D00(&qword_10015C568);
  v29 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
  v30 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
  v31 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v29, &unk_100116D14, &unk_100116D1C);
  v32 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v30, &unk_100116D14, &unk_100116D34);
  v147[0] = v29;
  v147[1] = v30;
  v147[2] = v31;
  v147[3] = v32;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v147);
  type metadata accessor for PhoneWallpaperView(255, v29, v31, v33);
  v34 = type metadata accessor for Optional(255);
  type metadata accessor for WatchFacesView(255, v30, v32, v35);
  v36 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v34, v36, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  type metadata accessor for _ConditionalContent(255);
  v151 = type metadata accessor for Optional(255);
  v152 = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v39 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v41 = type metadata accessor for VStack(255, v39, WitnessTable);
  v112 = v41;
  v111 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v41);
  v43 = type metadata accessor for ObservableScrollView(0, v41, v111, v42);
  v113 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v45 = (char *)&v110 - v44;
  v46 = type metadata accessor for ModifiedContent(0, v43, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v119 = *(_QWORD *)(v46 - 8);
  v116 = v46;
  __chkstk_darwin(v46);
  v130 = (char *)&v110 - v47;
  v110 = swift_getWitnessTable(&unk_10010F020, v43);
  v145 = v110;
  v146 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v115 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v148 = v46;
  v149 = v115;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v148, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v49 = sub_100007D00(&qword_10015C570);
  v50 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v49);
  v122 = *(_QWORD *)(v50 - 8);
  v118 = v50;
  __chkstk_darwin(v50);
  v114 = (uint64_t)&v110 - v51;
  v52 = sub_100007D00(&qword_10015A498);
  v121 = type metadata accessor for ModifiedContent(0, v50, v52);
  v123 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v117 = (char *)&v110 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v54);
  v120 = (uint64_t)&v110 - v56;
  v58 = v131;
  v57 = v132;
  v60 = v124;
  v59 = v125;
  v138 = v131;
  v139 = v124;
  v140 = v133;
  v61 = v8;
  (*(void (**)(char *, __n128))(v8 + 16))(v125, v55);
  v62 = *(unsigned __int8 *)(v8 + 80);
  v63 = (v62 + 32) & ~v62;
  v64 = swift_allocObject(&unk_10014C380, v63 + v126, v62 | 7);
  *(_QWORD *)(v64 + 16) = v58;
  *(_QWORD *)(v64 + 24) = v60;
  v65 = v60;
  v66 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v61 + 32))(v64 + v63, v59, v57);
  v67 = static Axis.Set.vertical.getter(v66);
  v68 = sub_10009D510(v67, 0, (void (*)(uint64_t))sub_100083248, (uint64_t)v137, (uint64_t)sub_100083258, v64, v112, v111, (uint64_t)v45);
  v69 = static Edge.Set.bottom.getter(v68);
  v70 = static SafeAreaRegions.all.getter(v69);
  View.ignoresSafeArea(_:edges:)(v70, v69, v43, v110);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v45, v43);
  v71 = *(int *)(v57 + 36);
  v72 = v133;
  v73 = (uint64_t *)(v133 + v71);
  v75 = *v73;
  v74 = v73[1];
  type metadata accessor for MainActor(0);
  v76 = swift_retain(v74);
  v77 = static MainActor.shared.getter(v76);
  v78 = (_QWORD *)swift_allocObject(&unk_10014C3A8, 48, 7);
  v78[2] = v77;
  v78[3] = &protocol witness table for MainActor;
  v78[4] = v75;
  v78[5] = v74;
  v79 = swift_retain(v74);
  v80 = static MainActor.shared.getter(v79);
  v81 = (_QWORD *)swift_allocObject(&unk_10014C3D0, 48, 7);
  v81[2] = v80;
  v81[3] = &protocol witness table for MainActor;
  v81[4] = v75;
  v81[5] = v74;
  Binding.init(get:set:)(&v148, sub_1000832BC, v78, sub_10004F7C4, v81, &type metadata for Bool);
  v82 = v148;
  v83 = v149;
  LODWORD(v80) = v150;
  v136[2] = v131;
  v136[3] = v65;
  v136[4] = v72;
  v135[2] = v131;
  v135[3] = v65;
  v135[4] = v72;
  v134[2] = v131;
  v134[3] = v65;
  v134[4] = v72;
  v84 = sub_100007D50(&qword_10015C5E8);
  v85 = sub_100007D50(&qword_10015C5F0);
  v86 = sub_10001E0A8(&qword_10015C5F8, &qword_10015C5E8, (void (*)(void))sub_10004F888);
  v87 = sub_1000832F0();
  v88 = v115;
  v109 = v84;
  v108 = v84;
  v89 = v116;
  v90 = v114;
  v91 = v80;
  v92 = v130;
  sub_100056AF0(v82, v83, v91, (uint64_t)sub_1000832CC, (uint64_t)v136, (uint64_t (*)(uint64_t))sub_1000832D8, (uint64_t)v135, (uint64_t)sub_1000832E4, v114, (uint64_t)v134, v116, v108, v85, v109, v115, v86, v87, v86);
  swift_release(v83);
  v93 = swift_release(v82);
  v94 = (*(uint64_t (**)(char *, uint64_t, __n128))(v119 + 8))(v92, v89, v93);
  v95 = static Animation.easeInOut.getter(v94);
  v96 = v127;
  sub_100018474(v127);
  v148 = v89;
  v149 = v88;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v148, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  v98 = sub_10000F4E0(&qword_10015C578, &qword_10015C570, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  v143 = OpaqueTypeConformance2;
  v144 = v98;
  v99 = v118;
  v100 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v118);
  v101 = sub_10004EC50();
  v102 = (uint64_t)v117;
  View.animation<A>(_:value:)(v95, v96, v99, v128, v100, v101);
  swift_release(v95);
  sub_100007F38(v96, &qword_100158970);
  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v90, v99);
  v103 = sub_10000F4E0(&qword_10015A4A8, &qword_10015A498, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v141 = v100;
  v142 = v103;
  v104 = v121;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v121);
  v105 = v120;
  sub_10005135C(v102, v104, v120);
  v106 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
  v106(v102, v104);
  sub_1000424BC(v105, v104, v129);
  return ((uint64_t (*)(uint64_t, uint64_t))v106)(v105, v104);
}

uint64_t sub_10007E42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t TupleTypeMetadata2;
  uint64_t TupleTypeMetadata;
  uint64_t v36;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[9];

  v50 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v9 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v10 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v9, &unk_100116D14, &unk_100116D24);
  v11 = swift_getAssociatedTypeWitness(255, v10, v9, &unk_10011615C, &unk_10011617C);
  v12 = swift_getAssociatedConformanceWitness(v10, v9, v11, &unk_10011615C, &unk_100116174);
  type metadata accessor for TourPhotosView(255, v11, v12, v13);
  v14 = type metadata accessor for _ConditionalContent(255);
  v15 = type metadata accessor for Group(255, v14);
  v16 = sub_100007D00(&qword_10015C548);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_100007D00(&qword_10015C550);
  v55[4] = type metadata accessor for ModifiedContent(255, v17, v18);
  v19 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v20 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v19, &unk_100116D14, &unk_100116D2C);
  v22 = type metadata accessor for FeaturedVideosView(255, v19, v20, v21);
  v23 = sub_100007D00(&qword_10015C558);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v25 = sub_100007D00(&qword_10015C560);
  type metadata accessor for ModifiedContent(255, v24, v25);
  v55[5] = type metadata accessor for Optional(255);
  v55[6] = sub_100007D00(&qword_10015C568);
  v26 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
  v27 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
  v28 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v26, &unk_100116D14, &unk_100116D1C);
  v29 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v27, &unk_100116D14, &unk_100116D34);
  v55[0] = v26;
  v55[1] = v27;
  v55[2] = v28;
  v55[3] = v29;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v55);
  type metadata accessor for PhoneWallpaperView(255, v26, v28, v30);
  v31 = type metadata accessor for Optional(255);
  type metadata accessor for WatchFacesView(255, v27, v29, v32);
  v33 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v31, v33, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  type metadata accessor for _ConditionalContent(255);
  v55[7] = type metadata accessor for Optional(255);
  v55[8] = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v36 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v36);
  v38 = type metadata accessor for VStack(0, v36, WitnessTable);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v41 = (char *)&v49 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v44 = (char *)&v49 - v43;
  v46 = static HorizontalAlignment.leading.getter(v45);
  v52 = a2;
  v53 = a3;
  v54 = a1;
  VStack.init(alignment:spacing:content:)(v46, 0x4042000000000000, 0, sub_10008340C, v51, v36, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v38);
  sub_10005135C((uint64_t)v41, v38, (uint64_t)v44);
  v47 = *(void (**)(char *, uint64_t))(v39 + 8);
  v47(v41, v38);
  sub_1000424BC((uint64_t)v44, v38, v50);
  return ((uint64_t (*)(char *, uint64_t))v47)(v44, v38);
}

uint64_t sub_10007E8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t WitnessTable;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void (*v135)(uint64_t, _QWORD *);
  void (*v136)(uint64_t, char *, uint64_t);
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (**v155)(char *, uint64_t, __n128);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  _QWORD *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t KeyPath;
  _QWORD *v189;
  uint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __n128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t OpaqueTypeConformance2;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __n128 v286;
  void (*v287)(char *, uint64_t, uint64_t);
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t (*v293)(uint64_t, char *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  char *v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  id v311;
  id v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  double v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  double v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  BOOL v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  double v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  double v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  BOOL v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void (*v402)(uint64_t, uint64_t);
  uint64_t v403;
  uint64_t v404;
  char v405;
  uint64_t v406;
  __n128 v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  double v426;
  double v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  double v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  BOOL v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  void (*v445)(uint64_t, uint64_t);
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char v452;
  uint64_t v453;
  __n128 v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  double v473;
  double v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  double v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  BOOL v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void (*v491)(uint64_t, uint64_t);
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  void (*v495)(uint64_t, uint64_t);
  uint64_t v496;
  void (*v497)(uint64_t, uint64_t);
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void (*v502)(uint64_t, uint64_t);
  void (*v503)(uint64_t, uint64_t);
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  void (*v518)(_QWORD, _QWORD);
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int *v533;
  void (*v534)(uint64_t, uint64_t);
  void (**v535)(char *, uint64_t, __n128);
  uint64_t result;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  _QWORD *v561;
  char *v562;
  uint64_t v563;
  char *v564;
  uint64_t v565;
  char *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  char *v572;
  char *v573;
  uint64_t v574;
  uint64_t v575;
  char *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  uint64_t v584;
  void (*v585)(uint64_t, _QWORD *);
  uint64_t v586;
  char *v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  char *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  char *v607;
  void (**v608)(char *, uint64_t, __n128);
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t (**v615)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v616)(uint64_t, uint64_t);
  void (*v617)(uint64_t, char *, uint64_t);
  uint64_t v618;
  void (*v619)(char *, uint64_t, uint64_t);
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  char *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  char *v641;
  uint64_t v642;
  char *v643;
  uint64_t v644;
  uint64_t v645;
  _QWORD v646[21];
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t v650;
  uint64_t v651;
  __int128 v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;

  v644 = a3;
  v643 = (char *)a2;
  v645 = a1;
  v614 = a4;
  v612 = (int *)type metadata accessor for AppModule(0);
  __chkstk_darwin(v612);
  v615 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v540 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v613 = (uint64_t)&v540 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v11 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
  v635 = AssociatedTypeWitness;
  v12 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v11, &unk_100116D14, &unk_100116D1C);
  v14 = type metadata accessor for PhoneWallpaperView(255, v11, v12, v13);
  v15 = type metadata accessor for Optional(255);
  v632 = AssociatedConformanceWitness;
  v16 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
  v17 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v16, &unk_100116D14, &unk_100116D34);
  v19 = type metadata accessor for WatchFacesView(255, v16, v17, v18);
  v20 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v15, v20, 0, 0);
  v22 = type metadata accessor for TupleView(0, TupleTypeMetadata2);
  v555 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v554 = (char *)&v540 - v23;
  v24 = type metadata accessor for Optional(0);
  __chkstk_darwin(v24);
  v543 = (char *)&v540 - v25;
  v553 = v19;
  v550 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v26);
  v544 = (uint64_t)&v540 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v545 = (uint64_t)&v540 - v29;
  v556 = v20;
  v551 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v30);
  v552 = (uint64_t)&v540 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v580 = (uint64_t)&v540 - v33;
  v34 = type metadata accessor for Optional(0);
  __chkstk_darwin(v34);
  v540 = (char *)&v540 - v35;
  v581 = v14;
  v546 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v36);
  v541 = (uint64_t)&v540 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v542 = (uint64_t)&v540 - v39;
  v582 = v15;
  v578 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v40);
  v579 = (uint64_t)&v540 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v600 = (uint64_t)&v540 - v43;
  v557 = v12;
  v558 = v11;
  v656 = v11;
  v657 = v16;
  v559 = v17;
  v560 = v16;
  v658 = v12;
  v659 = v17;
  v44 = type metadata accessor for PhoneWallpapersWatchFacesView(0, (uint64_t)&v656);
  v547 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v549 = (uint64_t)&v540 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v548 = (uint64_t)&v540 - v47;
  v630 = v48;
  v634 = v22;
  v49 = type metadata accessor for _ConditionalContent(0);
  v610 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v583 = (char *)&v540 - v50;
  v639 = v51;
  v611 = type metadata accessor for Optional(0);
  v629 = *(_QWORD *)(v611 - 8);
  __chkstk_darwin(v611);
  v631 = (uint64_t)&v540 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v640 = (uint64_t)&v540 - v54;
  v571 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v571);
  v576 = (char *)&v540 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for TaskPriority(0);
  v574 = *(_QWORD *)(v56 - 8);
  v575 = v56;
  __chkstk_darwin(v56);
  v573 = (char *)&v540 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v604 = sub_100007D50(&qword_10015C608);
  __chkstk_darwin(v604);
  v572 = (char *)&v540 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  v577 = (uint64_t)&v540 - v60;
  v602 = sub_100007D50(&qword_10015C610);
  v61 = __chkstk_darwin(v602);
  v603 = (uint64_t)&v540 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v565 = type metadata accessor for AccessibilityChildBehavior(0, v61);
  v563 = *(_QWORD *)(v565 - 8);
  __chkstk_darwin(v565);
  v562 = (char *)&v540 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v567 = type metadata accessor for SetlistView(0);
  __chkstk_darwin(v567);
  v561 = (char **)((char *)&v540 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_100007D50(&qword_10015C618);
  v568 = *(_QWORD *)(v65 - 8);
  v569 = v65;
  __chkstk_darwin(v65);
  v566 = (char *)&v540 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v601 = sub_100007D50(&qword_10015C620);
  __chkstk_darwin(v601);
  v564 = (char *)&v540 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v570 = (uint64_t)&v540 - v69;
  v609 = sub_100007D50(&qword_10015C568);
  __chkstk_darwin(v609);
  v633 = (uint64_t)&v540 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71);
  v638 = (uint64_t)&v540 - v72;
  v73 = v632;
  v74 = v635;
  v75 = swift_getAssociatedTypeWitness(255, v632, v635, &unk_100116D14, &unk_100116D3C);
  v76 = type metadata accessor for Optional(0);
  __chkstk_darwin(v76);
  v594 = (char *)&v540 - v77;
  v79 = type metadata accessor for Binding(0, v78);
  __chkstk_darwin(v79);
  v593 = (char **)((char *)&v540 - v80);
  v81 = (uint64_t)v643;
  v82 = v644;
  v84 = type metadata accessor for PromotionalAssetsViewModel(255, (uint64_t)v643, v644, v83);
  v85 = type metadata accessor for Bindable(0, v84);
  v589 = *(_QWORD *)(v85 - 8);
  v590 = v85;
  __chkstk_darwin(v85);
  v588 = (char *)&v540 - v86;
  v87 = swift_getAssociatedConformanceWitness(v73, v74, v75, &unk_100116D14, &unk_100116D2C);
  v595 = v75;
  v586 = v87;
  v89 = type metadata accessor for FeaturedVideosView(0, v75, v87, v88);
  v592 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v591 = (uint64_t)&v540 - v90;
  v91 = sub_100007D00(&qword_10015C558);
  v627 = v89;
  v92 = type metadata accessor for ModifiedContent(0, v89, v91);
  v597 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v596 = (uint64_t)&v540 - v93;
  v94 = sub_100007D00(&qword_10015C560);
  v626 = v92;
  v95 = type metadata accessor for ModifiedContent(0, v92, v94);
  v606 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v598 = (char *)&v540 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v97);
  v599 = (uint64_t)&v540 - v98;
  v625 = v99;
  v628 = type metadata accessor for Optional(0);
  v622 = *(_QWORD *)(v628 - 8);
  __chkstk_darwin(v628);
  v637 = (uint64_t)&v540 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v101);
  v636 = (uint64_t)&v540 - v102;
  v103 = v81;
  v642 = type metadata accessor for PromotionalAssetsView(0, v81, v82, v104);
  v617 = *(void (**)(uint64_t, char *, uint64_t))(v642 - 8);
  v618 = *((_QWORD *)v617 + 8);
  __chkstk_darwin(v642);
  v641 = (char *)&v540 - v105;
  v616 = (void (*)(uint64_t, uint64_t))type metadata accessor for CoordinateSpace(0);
  v620 = *((_QWORD *)v616 - 1);
  __chkstk_darwin(v616);
  v107 = (char *)&v540 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = v74;
  v109 = swift_getAssociatedTypeWitness(255, v73, v74, &unk_100116D14, &unk_100116D54);
  v110 = swift_getAssociatedConformanceWitness(v73, v108, v109, &unk_100116D14, &unk_100116D24);
  v111 = swift_getAssociatedTypeWitness(255, v110, v109, &unk_10011615C, &unk_10011617C);
  v112 = swift_getAssociatedConformanceWitness(v110, v109, v111, &unk_10011615C, &unk_100116174);
  v114 = type metadata accessor for TourPhotosView(255, v111, v112, v113);
  v115 = type metadata accessor for _ConditionalContent(255);
  v116 = type metadata accessor for Group(0, v115);
  v632 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v118 = (char *)&v540 - v117;
  v119 = sub_100007D00(&qword_10015C548);
  v120 = type metadata accessor for ModifiedContent(0, v116, v119);
  v608 = *(void (***)(char *, uint64_t, __n128))(v120 - 8);
  __chkstk_darwin(v120);
  v122 = (char *)&v540 - v121;
  v607 = (char *)&v540 - v121;
  v123 = sub_100007D00(&qword_10015C550);
  v624 = type metadata accessor for ModifiedContent(0, v120, v123);
  v621 = *(_QWORD *)(v624 - 8);
  __chkstk_darwin(v624);
  v623 = (char *)&v540 - ((v124 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v125);
  v605 = (uint64_t)&v540 - v126;
  __chkstk_darwin(v127);
  v635 = (uint64_t)&v540 - v128;
  v646[2] = v103;
  v646[3] = v644;
  v129 = v645;
  v646[4] = v645;
  WitnessTable = swift_getWitnessTable(&unk_10010FD68, v114);
  v131 = sub_100083424();
  v672 = WitnessTable;
  v673 = v131;
  v132 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v115);
  Group<A>.init(content:)(sub_100083418, v646, v115, v132);
  v671 = v132;
  v133 = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v116);
  v134 = sub_100083468();
  sub_100044784((uint64_t)v107);
  sub_10005698C((uint64_t)&type metadata for TourPhotosViewSizePreferenceKey, (uint64_t)v107, (uint64_t)sub_10001F8A8, 0, v116, (uint64_t)&type metadata for TourPhotosViewSizePreferenceKey, v133, v134, (uint64_t)v122);
  v135 = *(void (**)(uint64_t, _QWORD *))(v620 + 8);
  v587 = v107;
  v585 = v135;
  v135((uint64_t)v107, v616);
  (*(void (**)(char *, uint64_t))(v632 + 8))(v118, v116);
  v136 = v617;
  v137 = v641;
  v138 = v642;
  v619 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v617 + 2);
  v619(v641, v129, v642);
  v139 = *((unsigned __int8 *)v136 + 80);
  v140 = (v139 + 32) & ~v139;
  v618 += v140;
  v632 = v139 | 7;
  v141 = swift_allocObject(&unk_10014C448, v618, v139 | 7);
  v142 = v644;
  *(_QWORD *)(v141 + 16) = v643;
  *(_QWORD *)(v141 + 24) = v142;
  v143 = (void (*)(uint64_t, char *, uint64_t))v136[4];
  v143(v141 + v140, v137, v138);
  v144 = sub_10000F4E0(&qword_10015C638, &qword_10015C548, (uint64_t)&unk_100108C38);
  v669 = v133;
  v670 = v144;
  v145 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v120);
  v146 = sub_100007428(&qword_100159938, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v147 = v605;
  v148 = v134;
  v149 = v138;
  v584 = v146;
  v150 = v607;
  View.onPreferenceChange<A>(_:perform:)(&type metadata for TourPhotosViewSizePreferenceKey, sub_1000834B0, v141, v120, &type metadata for TourPhotosViewSizePreferenceKey, v145, v148, v146);
  v151 = swift_release(v141);
  v608[1](v150, v120, v151);
  v152 = sub_10000F4E0(&qword_10015C640, &qword_10015C550, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v667 = v145;
  v668 = v152;
  v153 = v624;
  v154 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v624);
  sub_10005135C(v147, v153, v635);
  v155 = *(void (***)(char *, uint64_t, __n128))(v621 + 8);
  ((void (*)(uint64_t, uint64_t))v155)(v147, v153);
  v159 = sub_10007C394(v149, v156, v157, v158);
  LOBYTE(v153) = sub_1000F85E8();
  v161 = swift_release(v159);
  v620 = v140;
  v617 = v143;
  v608 = v155;
  v607 = (char *)v154;
  if ((v153 & 1) != 0)
  {
    v162 = v595;
    type metadata accessor for FeaturedVideosViewModel(0, v595, v586, v160);
    v163 = v645;
    v167 = sub_10007C394(v149, v164, v165, v166);
    v168 = sub_1000F7C98();
    v170 = v169;
    swift_release(v167);
    v174 = sub_10007C394(v149, v171, v172, v173);
    v175 = sub_1000F86D4();
    swift_release(v174);
    v179 = sub_10007C394(v642, v176, v177, v178);
    v180 = sub_1000F886C();
    swift_release(v179);
    v181 = (_QWORD *)sub_10007163C(v168, v170, v175, v180);
    v182 = v588;
    v186 = sub_10007C3D0(v642, v183, v184, v185);
    __chkstk_darwin(v186);
    v187 = v644;
    *(&v540 - 2) = v643;
    *(&v540 - 1) = (char *)v187;
    KeyPath = swift_getKeyPath(&unk_10010D920);
    v189 = v593;
    v190 = v590;
    Bindable<A>.subscript.getter(v593, KeyPath, v590);
    v191 = swift_release(KeyPath);
    (*(void (**)(char *, uint64_t, __n128))(v589 + 8))(v182, v190, v191);
    v192 = (uint64_t)v594;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v162 - 8) + 56))(v594, 1, 1, v162);
    v193 = v591;
    sub_1000ADB80(v181, (uint64_t)v189, v192, v591);
    v194 = v627;
    v195 = swift_getWitnessTable(&unk_10010F7F0, v627);
    v196 = sub_100083974();
    v197 = (uint64_t)v587;
    sub_100044784((uint64_t)v587);
    v198 = v596;
    sub_10005698C((uint64_t)&type metadata for FeaturedVideosViewSizePreferenceKey, v197, (uint64_t)sub_100051360, 0, v194, (uint64_t)&type metadata for FeaturedVideosViewSizePreferenceKey, v195, v196, v596);
    v585(v197, v616);
    (*(void (**)(uint64_t, uint64_t))(v592 + 8))(v193, v194);
    v199 = v641;
    v619(v641, v163, v642);
    v200 = swift_allocObject(&unk_10014C4E8, v618, v632);
    v201 = v644;
    *(_QWORD *)(v200 + 16) = v643;
    *(_QWORD *)(v200 + 24) = v201;
    v617(v200 + v620, v199, v642);
    v202 = sub_10000F4E0(&qword_10015C648, &qword_10015C558, (uint64_t)&unk_100108C38);
    v646[7] = v195;
    v646[8] = v202;
    v203 = v626;
    v204 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v626);
    v205 = (uint64_t)v598;
    View.onPreferenceChange<A>(_:perform:)(&type metadata for FeaturedVideosViewSizePreferenceKey, sub_100083BEC, v200, v203, &type metadata for FeaturedVideosViewSizePreferenceKey, v204, v196, v584);
    v206 = swift_release(v200);
    (*(void (**)(uint64_t, uint64_t, __n128))(v597 + 8))(v198, v203, v206);
    v207 = sub_10000F4E0(&qword_10015C650, &qword_10015C560, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    v646[5] = v204;
    v646[6] = v207;
    v149 = v642;
    v208 = v625;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v625);
    v209 = v599;
    sub_10005135C(v205, v208, v599);
    v210 = v606;
    v211 = *(void (**)(uint64_t, uint64_t))(v606 + 8);
    v211(v205, v208);
    v212 = v637;
    sub_1000424BC(v209, v208, v637);
    v211(v209, v208);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v210 + 56))(v212, 0, 1, v208);
  }
  else
  {
    v212 = v637;
    v213 = v625;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v606 + 56))(v637, 1, 1, v625, v161);
    v214 = swift_getWitnessTable(&unk_10010F7F0, v627);
    v215 = sub_10000F4E0(&qword_10015C648, &qword_10015C558, (uint64_t)&unk_100108C38);
    v665 = v214;
    v666 = v215;
    v216 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v626);
    v217 = sub_10000F4E0(&qword_10015C650, &qword_10015C560, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    v663 = v216;
    v664 = v217;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v213);
  }
  sub_1000424D4(v212, v636);
  v218 = *(void (**)(uint64_t, uint64_t))(v622 + 8);
  v218(v212, v628);
  v222 = sub_10007C394(v149, v219, v220, v221);
  v223 = sub_1000F89C0();
  swift_release(v222);
  v227 = v634;
  v228 = v641;
  v616 = v218;
  if (v223)
  {
    v229 = sub_10007C394(v149, v224, v225, v226);
    sub_1000F8AB0((uint64_t)&v652);
    swift_release(v229);
    if (v654)
    {
      sub_10002BAA4(&v652, (uint64_t)&v656);
      v230 = type metadata accessor for SetlistViewModel(0);
      v234 = sub_10007C394(v149, v231, v232, v233);
      v235 = sub_1000F7C98();
      v237 = v236;
      swift_release(v234);
      sub_10003BC30((uint64_t)&v656, (uint64_t)&v652);
      v241 = sub_10007C394(v149, v238, v239, v240);
      v242 = sub_1000F8B60();
      swift_release(v241);
      v243 = v654;
      v244 = v655;
      v245 = sub_1000228D4((uint64_t)&v652, v654);
      v246 = sub_10002B9A0(v235, v237, v245, v242 & 1, v230, v243, v244);
      sub_1000228FC(&v652);
      v647 = v246;
      State.init(wrappedValue:)(&v647, v230);
      v247 = *((_QWORD *)&v652 + 1);
      v248 = v561;
      *v561 = v652;
      v248[1] = v247;
      v249 = type metadata accessor for RemoteViewConfiguration();
      v250 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
      v248[2] = EnvironmentObject.init()(v249, v250);
      v248[3] = v251;
      v252 = v567;
      v253 = (_QWORD *)((char *)v248 + *(int *)(v567 + 24));
      *v253 = swift_getKeyPath(&unk_10010D8C0);
      v254 = sub_100007D50(&qword_1001582E8);
      swift_storeEnumTagMultiPayload(v253, v254, 0);
      v255 = (_QWORD *)((char *)v248 + *(int *)(v252 + 28));
      *v255 = swift_getKeyPath(&unk_10010D8F0);
      v256 = sub_100007D50(&qword_100158968);
      v257 = swift_storeEnumTagMultiPayload(v255, v256, 0);
      v258 = v562;
      static AccessibilityChildBehavior.contain.getter(v257);
      v259 = sub_100007428(&qword_10015C678, type metadata accessor for SetlistView, (uint64_t)&unk_10010A1C0);
      v260 = v566;
      View.accessibilityElement(children:)(v258, v252, v259);
      (*(void (**)(char *, uint64_t))(v563 + 8))(v258, v565);
      sub_10001E24C((uint64_t)v248, type metadata accessor for SetlistView);
      if (qword_100158108 != -1)
        swift_once(&qword_100158108, sub_1000753EC);
      v261 = qword_10016A570;
      v262 = *(_QWORD *)algn_10016A578;
      *(_QWORD *)&v652 = v252;
      *((_QWORD *)&v652 + 1) = v259;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v652, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v264 = (uint64_t)v564;
      v265 = v569;
      View.accessibilityIdentifier(_:)(v261, v262, v569, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v568 + 8))(v260, v265);
      v266 = v570;
      sub_100018EB4(v264, v570, &qword_10015C620);
      v267 = v603;
      sub_100007E78(v266, v603, &qword_10015C620);
      swift_storeEnumTagMultiPayload(v267, v602, 0);
      v268 = sub_100083698();
      v269 = sub_100083758();
      v270 = v633;
      _ConditionalContent<>.init(storage:)(v267, v601, v604, v268, v269);
      sub_100007F38(v266, &qword_10015C620);
      sub_1000228FC(&v656);
      v271 = sub_100007D50(&qword_10015C658);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v271 - 8) + 56))(v270, 0, 1, v271);
      sub_100018EB4(v270, v638, &qword_10015C568);
      v149 = v642;
      goto LABEL_14;
    }
    sub_100007F38((uint64_t)&v652, &qword_10015C6A0);
  }
  v275 = v645;
  v276 = sub_10007C394(v149, v224, v225, v226);
  v277 = (_QWORD *)(v275 + *(int *)(v149 + 40));
  v278 = *v277;
  if (!*v277)
  {
    v537 = v277[1];
    v538 = type metadata accessor for RemoteViewConfiguration();
    v539 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v537, v538, v539);
    __break(1u);
    return result;
  }
  v279 = v276;
  swift_retain(*v277);
  v280 = sub_1000F8BAC();
  swift_release(v279);
  swift_release(v278);
  if ((v280 & 1) != 0)
  {
    v284 = v645;
    v285 = sub_10007C394(v149, v281, v282, v283);
    LODWORD(v606) = sub_1000F8CAC();
    v286 = swift_release(v285);
    v287 = v619;
    ((void (*)(char *, uint64_t, uint64_t, __n128))v619)(v228, v284, v149, v286);
    v288 = v618;
    v289 = swift_allocObject(&unk_10014C498, v618, v632);
    v290 = (uint64_t)v643;
    v291 = v644;
    *(_QWORD *)(v289 + 16) = v643;
    *(_QWORD *)(v289 + 24) = v291;
    v292 = v620;
    v293 = (uint64_t (*)(uint64_t, char *, uint64_t))v617;
    v617(v289 + v620, v228, v149);
    v287(v228, v645, v149);
    v294 = swift_allocObject(&unk_10014C4C0, v288, v632);
    *(_QWORD *)(v294 + 16) = v290;
    *(_QWORD *)(v294 + 24) = v291;
    v295 = v293(v294 + v292, v228, v149);
    v296 = v573;
    static TaskPriority.userInitiated.getter(v295);
    v298 = v575;
    v297 = v576;
    v299 = v574;
    (*(void (**)(char *, char *, uint64_t))(v574 + 16))(&v576[*(int *)(v571 + 20)], v296, v575);
    *v297 = &unk_10015C698;
    v297[1] = v294;
    v300 = v604;
    v301 = (uint64_t)v572;
    sub_10001BFB8((uint64_t)v297, (uint64_t)&v572[*(int *)(v604 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
    *(_BYTE *)v301 = v606 & 1;
    *(_QWORD *)(v301 + 8) = sub_100083824;
    *(_QWORD *)(v301 + 16) = v289;
    swift_retain(v289);
    sub_10001E24C((uint64_t)v297, (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
    (*(void (**)(char *, uint64_t))(v299 + 8))(v296, v298);
    swift_release(v289);
    v302 = v577;
    sub_100018EB4(v301, v577, &qword_10015C608);
    v303 = v603;
    sub_100007E78(v302, v603, &qword_10015C608);
    swift_storeEnumTagMultiPayload(v303, v602, 1);
    v304 = sub_100083698();
    v305 = sub_100083758();
    v306 = v633;
    v307 = v303;
    v227 = v634;
    _ConditionalContent<>.init(storage:)(v307, v601, v300, v304, v305);
    sub_100007F38(v302, &qword_10015C608);
    v308 = sub_100007D50(&qword_10015C658);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v308 - 8) + 56))(v306, 0, 1, v308);
    sub_100018EB4(v306, v638, &qword_10015C568);
  }
  else
  {
    v309 = sub_100007D50(&qword_10015C658);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v309 - 8) + 56))(v638, 1, 1, v309);
  }
LABEL_14:
  v310 = sub_10007C394(v149, v272, v273, v274);
  v311 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v312 = objc_msgSend(v311, "userInterfaceIdiom");
  swift_release(v310);

  if (v312)
  {
    v316 = v631;
    v317 = v639;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v610 + 56))(v631, 1, 1, v639);
    v318 = swift_getWitnessTable(&unk_1001121C8, v630);
    v319 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v227);
    v661 = v318;
    v662 = v319;
    swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v317);
    v320 = v612;
    v321 = v644;
    v322 = v637;
    v323 = (uint64_t)v643;
  }
  else
  {
    v324 = sub_10007C394(v149, v313, v314, v315);
    v325 = sub_1000F8E34();
    swift_release(v324);
    v329 = sub_10007C394(v149, v326, v327, v328);
    if ((v325 & 1) != 0)
    {
      v606 = sub_1000F7C98();
      v605 = v330;
      swift_release(v329);
      v334 = sub_10007C394(v149, v331, v332, v333);
      v335 = sub_1000F804C();
      v603 = v336;
      v604 = v335;
      swift_release(v334);
      type metadata accessor for PhoneWallpaperViewModel(0, v558, v557, v337);
      v341 = sub_10007C394(v149, v338, v339, v340);
      v342 = sub_1000F7C98();
      v344 = v343;
      swift_release(v341);
      v348 = sub_10007C394(v149, v345, v346, v347);
      v349 = sub_1000F8E90();
      swift_release(v348);
      v353 = sub_10007C394(v149, v350, v351, v352);
      sub_1000F9028();
      v355 = v354;
      swift_release(v353);
      v359 = sub_10007C394(v149, v356, v357, v358);
      v360 = sub_1000F820C();
      swift_release(v359);
      v364 = sub_10007C394(v149, v361, v362, v363);
      v365 = sub_1000F91F4();
      swift_release(v364);
      v366 = (_QWORD *)sub_100068938(v342, v344, v349, v365, v355, v360);
      type metadata accessor for WatchFacesViewModel(0, v560, v559, v367);
      v371 = sub_10007C394(v149, v368, v369, v370);
      v372 = sub_1000F7C98();
      v374 = v373;
      swift_release(v371);
      v378 = sub_10007C394(v149, v375, v376, v377);
      v379 = sub_1000F9210();
      swift_release(v378);
      v383 = sub_10007C394(v149, v380, v381, v382);
      sub_1000F9028();
      v385 = v384;
      swift_release(v383);
      v389 = sub_10007C394(v149, v386, v387, v388);
      v390 = sub_1000F820C();
      swift_release(v389);
      v394 = sub_10007C394(v149, v391, v392, v393);
      v395 = sub_1000F91F4();
      swift_release(v394);
      v396 = v634;
      v397 = (_QWORD *)sub_10008FBD8(v372, v374, v379, v395, v385, v390);
      v398 = v549;
      sub_1000F2CA4(v606, v605, v604, v603, v366, v397, v549);
      v399 = v630;
      v400 = swift_getWitnessTable(&unk_1001121C8, v630);
      v401 = v548;
      sub_10005135C(v398, v399, v548);
      v402 = *(void (**)(uint64_t, uint64_t))(v547 + 8);
      v402(v398, v399);
      sub_1000424BC(v401, v399, v398);
      v403 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v396);
      v404 = (uint64_t)v583;
      sub_1000426C4(v398, v399, v396, v400, v403);
      v402(v398, v399);
      v402(v401, v399);
    }
    else
    {
      v405 = sub_1000F93A8();
      v407 = swift_release(v329);
      if ((v405 & 1) != 0)
      {
        v408 = v558;
        type metadata accessor for PhoneWallpaperViewModel(0, v558, v557, v406);
        v412 = sub_10007C394(v149, v409, v410, v411);
        v413 = sub_1000F7C98();
        v415 = v414;
        swift_release(v412);
        v419 = sub_10007C394(v149, v416, v417, v418);
        v420 = v149;
        v421 = sub_1000F8E90();
        swift_release(v419);
        v425 = sub_10007C394(v420, v422, v423, v424);
        sub_1000F9028();
        v427 = v426;
        swift_release(v425);
        v431 = sub_10007C394(v420, v428, v429, v430);
        v432 = sub_1000F820C();
        swift_release(v431);
        v436 = sub_10007C394(v420, v433, v434, v435);
        v437 = sub_1000F91F4();
        swift_release(v436);
        v438 = v421;
        v149 = v420;
        v439 = (_QWORD *)sub_100068938(v413, v415, v438, v437, v427, v432);
        v440 = (uint64_t)v540;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v408 - 8) + 56))(v540, 1, 1, v408);
        v441 = v541;
        sub_10000B4F8(v439, v440, v541);
        v442 = v581;
        swift_getWitnessTable(&unk_100108860, v581);
        v443 = v542;
        sub_10005135C(v441, v442, v542);
        v444 = v546;
        v445 = *(void (**)(uint64_t, uint64_t))(v546 + 8);
        v445(v441, v442);
        v446 = v579;
        sub_1000424BC(v443, v442, v579);
        v445(v443, v442);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v444 + 56))(v446, 0, 1, v442);
      }
      else
      {
        v446 = v579;
        v447 = v581;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v546 + 56))(v579, 1, 1, v581, v407);
        swift_getWitnessTable(&unk_100108860, v447);
      }
      sub_1000424D4(v446, v600);
      v606 = *(_QWORD *)(v578 + 8);
      ((void (*)(uint64_t, uint64_t))v606)(v446, v582);
      v451 = sub_10007C394(v149, v448, v449, v450);
      v452 = sub_1000F9554();
      v454 = swift_release(v451);
      if ((v452 & 1) != 0)
      {
        v455 = v560;
        type metadata accessor for WatchFacesViewModel(0, v560, v559, v453);
        v459 = sub_10007C394(v149, v456, v457, v458);
        v460 = sub_1000F7C98();
        v462 = v461;
        swift_release(v459);
        v466 = sub_10007C394(v149, v463, v464, v465);
        v467 = v149;
        v468 = sub_1000F9210();
        swift_release(v466);
        v472 = sub_10007C394(v467, v469, v470, v471);
        sub_1000F9028();
        v474 = v473;
        swift_release(v472);
        v478 = sub_10007C394(v467, v475, v476, v477);
        v479 = sub_1000F820C();
        swift_release(v478);
        v483 = sub_10007C394(v467, v480, v481, v482);
        v484 = sub_1000F91F4();
        swift_release(v483);
        v485 = (_QWORD *)sub_10008FBD8(v460, v462, v468, v484, v474, v479);
        v486 = (uint64_t)v543;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v455 - 8) + 56))(v543, 1, 1, v455);
        v487 = v544;
        sub_100012CA0(v485, v486, v544);
        v488 = v553;
        swift_getWitnessTable(&unk_100108AC8, v553);
        v489 = v545;
        sub_10005135C(v487, v488, v545);
        v490 = v550;
        v491 = *(void (**)(uint64_t, uint64_t))(v550 + 8);
        v491(v487, v488);
        v492 = v552;
        sub_1000424BC(v489, v488, v552);
        v491(v489, v488);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v490 + 56))(v492, 0, 1, v488);
      }
      else
      {
        v492 = v552;
        v488 = v553;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v550 + 56))(v552, 1, 1, v553, v454);
        swift_getWitnessTable(&unk_100108AC8, v488);
      }
      v493 = v580;
      sub_1000424D4(v492, v580);
      v494 = v551;
      v495 = *(void (**)(uint64_t, uint64_t))(v551 + 8);
      v496 = v556;
      v495(v492, v556);
      v497 = v495;
      v498 = v579;
      v499 = v492;
      v500 = v582;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v578 + 16))(v579, v600, v582);
      v656 = v498;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v494 + 16))(v499, v493, v496);
      v657 = v499;
      *(_QWORD *)&v652 = v500;
      *((_QWORD *)&v652 + 1) = v496;
      v646[12] = swift_getWitnessTable(&unk_100108860, v581);
      v647 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v500);
      v646[11] = swift_getWitnessTable(&unk_100108AC8, v488);
      v648 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v496);
      v501 = (uint64_t)v554;
      sub_100042510(&v656, 2uLL, (uint64_t)&v652);
      v502 = v497;
      v497(v499, v496);
      v503 = (void (*)(uint64_t, uint64_t))v606;
      ((void (*)(uint64_t, uint64_t))v606)(v498, v500);
      v399 = v630;
      v504 = swift_getWitnessTable(&unk_1001121C8, v630);
      v505 = v634;
      v506 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v634);
      v404 = (uint64_t)v583;
      sub_100042788(v501, v399, v505, v504, v506);
      (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v501, v505);
      v502(v580, v496);
      v503(v600, v500);
      v396 = v505;
    }
    v507 = swift_getWitnessTable(&unk_1001121C8, v399);
    v508 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v396);
    v646[9] = v507;
    v646[10] = v508;
    v509 = v639;
    swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v639);
    v316 = v631;
    sub_1000424BC(v404, v509, v631);
    v510 = v610;
    (*(void (**)(uint64_t, uint64_t))(v610 + 8))(v404, v509);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v510 + 56))(v316, 0, 1, v509);
    v323 = (uint64_t)v643;
    v322 = v637;
    v149 = v642;
    v320 = v612;
    v321 = v644;
  }
  sub_1000424D4(v316, v640);
  v612 = *(int **)(v629 + 8);
  v511 = v611;
  ((void (*)(uint64_t, uint64_t))v612)(v316, v611);
  v512 = v641;
  v619(v641, v645, v149);
  v513 = swift_allocObject(&unk_10014C470, v618, v632);
  *(_QWORD *)(v513 + 16) = v323;
  *(_QWORD *)(v513 + 24) = v321;
  v617(v513 + v620, v512, v149);
  v514 = (uint64_t)v615;
  *v615 = sub_10008352C;
  *(_QWORD *)(v514 + 8) = v513;
  *(_BYTE *)(v514 + 16) = 0;
  v515 = type metadata accessor for RemoteViewConfiguration();
  v516 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
  *(_QWORD *)(v514 + 24) = EnvironmentObject.init()(v515, v516);
  *(_QWORD *)(v514 + 32) = v517;
  v518 = (void (*)(_QWORD, _QWORD))v320;
  v519 = (_QWORD *)(v514 + v320[6]);
  *v519 = swift_getKeyPath(&unk_10010D8C0);
  v520 = sub_100007D50(&qword_1001582E8);
  swift_storeEnumTagMultiPayload(v519, v520, 0);
  v521 = v613;
  sub_100083584(v514, v613);
  v522 = (uint64_t)v623;
  v523 = v624;
  (*(void (**)(char *, uint64_t, uint64_t))(v621 + 16))(v623, v635, v624);
  v656 = v522;
  v524 = v628;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v622 + 16))(v322, v636, v628);
  v657 = v322;
  v525 = v633;
  sub_100007E78(v638, v633, &qword_10015C568);
  v658 = v525;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v629 + 16))(v316, v640, v511);
  v659 = v316;
  v526 = v521;
  sub_10001BFB8(v521, v514, type metadata accessor for AppModule);
  v660 = v514;
  *(_QWORD *)&v652 = v523;
  *((_QWORD *)&v652 + 1) = v524;
  v653 = v609;
  v654 = v511;
  v655 = (uint64_t)v518;
  v647 = (uint64_t)v607;
  v527 = swift_getWitnessTable(&unk_10010F7F0, v627);
  v528 = sub_10000F4E0(&qword_10015C648, &qword_10015C558, (uint64_t)&unk_100108C38);
  v646[19] = v527;
  v646[20] = v528;
  v529 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v626);
  v530 = sub_10000F4E0(&qword_10015C650, &qword_10015C560, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v646[17] = v529;
  v646[18] = v530;
  v646[16] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v625);
  v648 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v524);
  v649 = sub_1000835C8();
  v531 = swift_getWitnessTable(&unk_1001121C8, v630);
  v532 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v634);
  v646[14] = v531;
  v646[15] = v532;
  v646[13] = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v639);
  v650 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v511);
  v651 = sub_100007428(&qword_10015A698, type metadata accessor for AppModule, (uint64_t)&unk_100110E18);
  sub_100042510(&v656, 5uLL, (uint64_t)&v652);
  sub_10001E24C(v526, type metadata accessor for AppModule);
  v533 = v612;
  ((void (*)(uint64_t, uint64_t))v612)(v640, v511);
  sub_100007F38(v638, &qword_10015C568);
  v534 = v616;
  v616(v636, v524);
  v535 = v608;
  ((void (*)(uint64_t, uint64_t))v608)(v635, v523);
  sub_10001E24C(v514, type metadata accessor for AppModule);
  ((void (*)(uint64_t, uint64_t))v533)(v631, v511);
  sub_100007F38(v633, &qword_10015C568);
  v534(v637, v524);
  return ((uint64_t (*)(char *, uint64_t))v535)(v623, v523);
}

uint64_t sub_100081058@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, uint64_t, __n128);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t WitnessTable;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t v121;
  unint64_t v122;

  v115 = a4;
  v6 = type metadata accessor for PromotionalAssetsViewModel(255, a1, a2, a3);
  v111 = type metadata accessor for Bindable(0, v6);
  v108 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v110 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v106 = (uint64_t)&v102 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v12 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v13 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v12, &unk_100116D14, &unk_100116D24);
  v14 = swift_getAssociatedTypeWitness(255, v13, v12, &unk_10011615C, &unk_10011617C);
  v15 = swift_getAssociatedConformanceWitness(v13, v12, v14, &unk_10011615C, &unk_100116174);
  v17 = type metadata accessor for TourPhotosView(0, v14, v15, v16);
  v107 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v109 = (uint64_t)&v102 - v21;
  v22 = type metadata accessor for _ConditionalContent(0);
  v113 = *(_QWORD *)(v22 - 8);
  v114 = v22;
  __chkstk_darwin(v22);
  v112 = (char *)&v102 - v23;
  v25 = type metadata accessor for PromotionalAssetsView(0, a1, a2, v24);
  v29 = sub_10007C394(v25, v26, v27, v28);
  v30 = sub_1000F7B64();
  swift_release(v29);
  if (v30)
  {
    v105 = (_QWORD *)type metadata accessor for TourPhotosViewModel(0, v14, v15, v33);
    v37 = sub_10007C394(v25, v34, v35, v36);
    v104 = sub_1000F7C98();
    v103 = v38;
    swift_release(v37);
    v42 = sub_10007C394(v25, v39, v40, v41);
    v102 = sub_1000F7D90();
    swift_release(v42);
    v46 = sub_10007C394(v25, v43, v44, v45);
    v47 = sub_1000F804C();
    v49 = v48;
    swift_release(v46);
    v53 = sub_10007C394(v25, v50, v51, v52);
    v54 = sub_1000F820C();
    swift_release(v53);
    v58 = sub_10007C394(v25, v55, v56, v57);
    sub_1000F8264();
    v60 = v59;
    swift_release(v58);
    v64 = sub_10007C394(v25, v61, v62, v63);
    v65 = sub_1000F8420();
    swift_release(v64);
    v105 = (_QWORD *)sub_10005213C(v104, v103, v102, v47, v49, v65 & 1, v54, v60);
    v66 = v106;
    v70 = sub_10007C3D0(v25, v67, v68, v69);
    __chkstk_darwin(v70);
    *(&v102 - 2) = a1;
    *(&v102 - 1) = a2;
    KeyPath = swift_getKeyPath(&unk_10010D958);
    v72 = v111;
    Bindable<A>.subscript.getter(&v117, KeyPath, v111);
    v73 = swift_release(KeyPath);
    v74 = *(void (**)(uint64_t, uint64_t, __n128))(v108 + 8);
    v74(v66, v72, v73);
    v108 = v117;
    v106 = v118;
    v104 = v119;
    LODWORD(v103) = v120;
    v75 = v110;
    v79 = sub_10007C3D0(v25, v76, v77, v78);
    __chkstk_darwin(v79);
    *(&v102 - 2) = a1;
    *(&v102 - 1) = a2;
    v80 = swift_getKeyPath(&unk_10010D990);
    Bindable<A>.subscript.getter(v116, v80, v72);
    v81 = swift_release(v80);
    v74((uint64_t)v75, v72, v81);
    sub_1000BC878(v105, v108, v106, v104, v103, v116[0], v116[1], (uint64_t)v19, *(double *)&v116[2]);
    WitnessTable = swift_getWitnessTable(&unk_10010FD68, v17);
    v83 = v109;
    sub_10005135C((uint64_t)v19, v17, v109);
    v84 = *(void (**)(char *, uint64_t))(v107 + 8);
    v84(v19, v17);
    sub_1000424BC(v83, v17, (uint64_t)v19);
    v85 = sub_100083424();
    v86 = (uint64_t)v112;
    sub_1000426C4((uint64_t)v19, v17, (uint64_t)&type metadata for TourPhotosDefaultView, WitnessTable, v85);
    v84(v19, v17);
    v84((char *)v83, v17);
  }
  else
  {
    v87 = sub_10007C394(v25, v31, v32, v33);
    v88 = sub_1000F804C();
    v90 = v89;
    swift_release(v87);
    v94 = sub_10007C394(v25, v91, v92, v93);
    v95 = sub_1000F8420();
    swift_release(v94);
    v117 = v88;
    v118 = v90;
    LOBYTE(v119) = v95 & 1;
    v96 = swift_getWitnessTable(&unk_10010FD68, v17);
    v97 = sub_100083424();
    v86 = (uint64_t)v112;
    sub_100042788((uint64_t)&v117, v17, (uint64_t)&type metadata for TourPhotosDefaultView, v96, v97);
    swift_bridgeObjectRelease(v90);
  }
  v98 = swift_getWitnessTable(&unk_10010FD68, v17);
  v99 = sub_100083424();
  v121 = v98;
  v122 = v99;
  v100 = v114;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v114);
  sub_1000424BC(v86, v100, v115);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 8))(v86, v100);
}

uint64_t sub_1000816C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1000F8484();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

double sub_1000816F8(uint64_t a1)
{
  return sub_1000F84E4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void sub_100081728(double *a1@<X8>)
{
  *a1 = sub_1000F8568();
}

void sub_100081750(double *a1)
{
  sub_1000F85C0(*a1);
}

uint64_t sub_100081774@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F88A4(a1);
}

double sub_100081794(uint64_t a1)
{
  return sub_1000FAC00(a1);
}

double sub_1000817B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(double))
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v6 = *(double *)(a1 + 8);
  v7 = type metadata accessor for PromotionalAssetsView(0, a3, a4, a4);
  v11 = sub_10007C394(v7, v8, v9, v10);
  a5(v6);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_100081804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v7 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = sub_100007D50(&qword_10015D460);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 48) & ~v18;
  v20 = (char *)swift_allocObject(&unk_10014C510, v19 + v9, v18 | 7);
  *((_QWORD *)v20 + 2) = v17;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v7);
  v21 = sub_1000C8730((uint64_t)v14, (uint64_t)&unk_10015C6B8, (uint64_t)v20);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_100081968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v9;
  v6[7] = v10;
  return swift_task_switch(sub_1000819D8, v9, v10);
}

uint64_t sub_1000819D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v5 = type metadata accessor for PromotionalAssetsView(0, v4[3], v4[4], a4);
  v4[8] = sub_10007C394(v5, v6, v7, v8);
  v9 = (uint64_t **)swift_task_alloc(dword_10015FFEC);
  v4[9] = (uint64_t)v9;
  *v9 = v4;
  v9[1] = (uint64_t *)sub_100081A38;
  return sub_1000F8D30();
}

uint64_t sub_100081A38()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v2);
  return swift_task_switch(sub_100084994, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100081A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v6;
  v3[7] = v7;
  return swift_task_switch(sub_100081AFC, v6, v7);
}

uint64_t sub_100081AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v5 = type metadata accessor for PromotionalAssetsView(0, v4[3], v4[4], a4);
  v4[8] = sub_10007C394(v5, v6, v7, v8);
  v9 = (uint64_t **)swift_task_alloc(dword_10015FFEC);
  v4[9] = (uint64_t)v9;
  *v9 = v4;
  v9[1] = (uint64_t *)sub_10004E480;
  return sub_1000F8D30();
}

uint64_t sub_100081B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  v50 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &unk_100117DE0, &unk_100117E08);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - v13;
  v16 = type metadata accessor for PromotionalAssetsView(0, a2, a3, v15);
  v20 = sub_10007C394(v16, v17, v18, v19);
  sub_1000F9700();
  swift_release(v20);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DE8);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26 = v14;
  v27 = (uint64_t)v50;
  v25(v26, AssociatedTypeWitness);
  v31 = sub_10007C394(v16, v28, v29, v30);
  sub_1000F9700();
  v32 = swift_release(v31);
  (*(void (**)(uint64_t, uint64_t, __n128))(AssociatedConformanceWitness + 176))(AssociatedTypeWitness, AssociatedConformanceWitness, v32);
  v25(v11, AssociatedTypeWitness);
  v36 = sub_10007C394(v16, v33, v34, v35);
  v37 = (_QWORD *)(a1 + *(int *)(v16 + 40));
  v38 = *v37;
  if (*v37)
  {
    v39 = v36;
    swift_retain(*v37);
    v41 = sub_100074F28(v40);
    v43 = v42;
    swift_release(v39);
    swift_release(v38);
    v44 = type metadata accessor for AppViewModel(0);
    swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
    return sub_100067794(v22, v24, v27, v41, v43, 1);
  }
  else
  {
    v46 = v37[1];
    v47 = type metadata accessor for RemoteViewConfiguration();
    v48 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    result = EnvironmentObject.error()(0, v46, v47, v48);
    __break(1u);
  }
  return result;
}

double sub_100081DD0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  double result;
  _QWORD v6[8];

  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  *(double *)&v6[5] = a4;
  v4 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v4, sub_1000833BC, v6, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

void sub_100081E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = v5;
  v9 = sub_10007C394(a1, a2, a3, a4);
  sub_1000F9A38(a5);
  swift_release(v9);
  v13 = sub_10007C394(a1, v10, v11, v12);
  v14 = sub_1000F9A4C();
  swift_release(v13);
  v15 = *(_QWORD *)(v6 + *(int *)(a1 + 36) + 8);
  if (v14 != *(unsigned __int8 *)(v15 + 16))
  {
    v16 = sub_100007D50(&qword_100159A18);
    sub_10000F4E0(&qword_100159A20, &qword_100159A18, (uint64_t)&unk_100109804);
    v17 = ObservableObject<>.objectWillChange.getter(v16);
    ObservableObjectPublisher.send()();
    swift_release(v17);
  }
  *(_BYTE *)(v15 + 16) = v14;
}

double sub_100081F08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  char v24;
  double result;
  uint64_t v26;

  v9 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v26 - v13;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(int *)(v15 + 36) + 8) + 16))
    v16 = 2;
  else
    v16 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v14, a1, v9, v12);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10014C420, v18 + v11, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + v18, v14, v9);
  v21 = static Font.title.getter(v20);
  static Font.Weight.medium.getter(v21);
  v22 = Font.weight(_:)(v21);
  swift_release(v21);
  KeyPath = swift_getKeyPath(&unk_10010D890);
  v24 = static Edge.Set.horizontal.getter(KeyPath);
  *(_BYTE *)a5 = 2;
  *(_BYTE *)(a5 + 1) = v16;
  *(_QWORD *)(a5 + 8) = sub_1000833B0;
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = KeyPath;
  *(_QWORD *)(a5 + 32) = v22;
  *(_BYTE *)(a5 + 40) = v24;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 1;
  return result;
}

void sub_10008205C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v9 = sub_10007C394(v5, v6, v7, v8);
  sub_1000F9730();
  swift_release(v9);
  v13 = sub_10007C394(v5, v10, v11, v12);
  v14 = sub_1000F7C98();
  v16 = v15;
  swift_release(v13);
  v17 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v18 = *v17;
  if (*v17)
  {
    swift_retain(*v17);
    sub_10008A874(v14, v16, 8, 0, 1, 0, 3u, v18);
    swift_bridgeObjectRelease(v16);
    swift_release(v18);
  }
  else
  {
    v19 = v17[1];
    v20 = type metadata accessor for RemoteViewConfiguration();
    v21 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

uint64_t sub_10008215C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v40;
  _OWORD v41[9];
  _OWORD v42[9];
  double v43;
  _QWORD v44[20];

  v7 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v11 = sub_10007C394(v7, v8, v9, v10);
  v12 = sub_1000F804C();
  v14 = v13;
  swift_release(v11);
  if (v14)
  {
    v44[0] = v12;
    v44[1] = v14;
    sub_10001DB0C();
    v15 = Text.init<A>(_:)(v44, &type metadata for String);
    v17 = v16;
    v19 = v18;
    v21 = v20 & 1;
    v22 = static Font.Weight.semibold.getter();
    v23 = Text.fontWeight(_:)(*(_QWORD *)&v22, 0, v15, v17, v21, v19);
    v25 = v24;
    v27 = v26;
    v40 = a5;
    v29 = v28 & 1;
    sub_100007D90(v15, v17, v21);
    v30 = swift_bridgeObjectRelease(v19);
    v31 = static Alignment.center.getter(v30);
    sub_100042B7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v41, 0.0, 1, 0.0, 1, v31, v32, v23, v25, v29, v27);
    v33 = v29;
    a5 = v40;
    sub_100007D90(v23, v25, v33);
    swift_bridgeObjectRelease(v27);
    v38 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + *(int *)(v7 + 36) + 8) + 16))
      v38 = 1.0;
    v42[6] = v41[6];
    v42[7] = v41[7];
    v42[8] = v41[8];
    v42[2] = v41[2];
    v42[3] = v41[3];
    v42[4] = v41[4];
    v42[5] = v41[5];
    v42[0] = v41[0];
    v42[1] = v41[1];
    v43 = v38;
    nullsub_1(v42, v34, v35, v36, v37);
  }
  else
  {
    sub_10008338C((uint64_t)v42);
  }
  sub_100018EB4((uint64_t)v42, (uint64_t)v44, &qword_10015C5F0);
  return sub_100018EB4((uint64_t)v44, a5, &qword_10015C5F0);
}

double sub_100082344@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  char v24;
  double result;
  uint64_t v26;

  v9 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v26 - v13;
  if (*(_BYTE *)(*(_QWORD *)(a1 + *(int *)(v15 + 36) + 8) + 16))
    v16 = 2;
  else
    v16 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v14, a1, v9, v12);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10014C3F8, v18 + v11, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + v18, v14, v9);
  v21 = static Font.title.getter(v20);
  static Font.Weight.medium.getter(v21);
  v22 = Font.weight(_:)(v21);
  swift_release(v21);
  KeyPath = swift_getKeyPath(&unk_10010D890);
  v24 = static Edge.Set.horizontal.getter(KeyPath);
  *(_BYTE *)a5 = 1;
  *(_BYTE *)(a5 + 1) = v16;
  *(_QWORD *)(a5 + 8) = sub_100083378;
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = KeyPath;
  *(_QWORD *)(a5 + 32) = v22;
  *(_BYTE *)(a5 + 40) = v24;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 1;
  return result;
}

uint64_t sub_100082494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for DismissAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PromotionalAssetsView(0, a2, a3, v9);
  sub_100018E80((uint64_t)v8);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10008253C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = sub_100007D50(&qword_100158970);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v13 = type metadata accessor for PromotionalAssetsView(0, a3, a4, v12);
  v17 = sub_10007C394(v13, v14, v15, v16);
  sub_1000F9738(v10);
  swift_release(v17);
  v21 = sub_10007C394(v13, v18, v19, v20);
  sub_1000F974C(v11);
  swift_release(v21);
  v25 = sub_10007C394(v13, v22, v23, v24);
  sub_100018474((uint64_t)v9);
  sub_1000F9760((uint64_t)v9);
  swift_release(v25);
}

double sub_100082640(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for PromotionalAssetsView(0, a3, a4, a4);
  v12 = sub_10007C394(v8, v9, v10, v11);
  sub_1000F97E8(v4, v5, v6, v7);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_1000826A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000F9884();
  *a1 = result & 1;
  return result;
}

double sub_1000826D0(char *a1)
{
  return sub_1000F98DC(*a1);
}

uint64_t sub_1000826F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double (*v52)(uint64_t, char, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;

  v43 = a1;
  v48 = a5;
  v7 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v47 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v46 = (char *)&v42 - v9;
  v44 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &unk_100117DE0, &unk_100117E08);
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v42 - v11;
  v13 = sub_100007D50(&qword_10015A568);
  v14 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100109020;
  v18 = sub_10007C394(v7, v15, v16, v17);
  sub_1000F9700();
  swift_release(v18);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DE8);
  v20 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 176);
  *(_QWORD *)(v14 + 56) = type metadata accessor for URL(0);
  sub_10002BA68((_QWORD *)(v14 + 32));
  v20(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, AssociatedTypeWitness);
  v21 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v46, v43, v7);
  v22 = *(unsigned __int8 *)(v8 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(&unk_10014C358, v23 + v47, v22 | 7);
  v25 = v44;
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = v25;
  v26 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24 + v23, v21, v7);
  v27 = static SafeAreaRegions.all.getter(v26);
  v28 = static Edge.Set.all.getter(v27);
  v29 = v14;
  v49 = v14;
  v50 = 0;
  v51 = 0;
  v52 = sub_1000831C8;
  v53 = v24;
  v54 = v27;
  v55 = v28;
  v30 = sub_100007D50(&qword_100158678);
  v31 = type metadata accessor for PresentationDetent(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 72);
  v34 = *(unsigned __int8 *)(v32 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v30, v35 + 2 * v33, v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_100108810;
  v37 = static PresentationDetent.medium.getter(v36);
  static PresentationDetent.large.getter(v37);
  v38 = sub_100098A00(v36);
  swift_setDeallocating(v36);
  swift_arrayDestroy(v36 + v35, 2, v31);
  swift_deallocClassInstance(v36, 32, 7);
  v39 = sub_100007D50(&qword_10015A4F8);
  v40 = sub_10001E0A8(&qword_10015A500, &qword_10015A4F8, (void (*)(void))sub_10004EC0C);
  View.presentationDetents(_:)(v38, v39, v40);
  swift_release(v24);
  swift_bridgeObjectRelease(v29);
  return swift_bridgeObjectRelease(v38);
}

double sub_100082A04(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if ((a2 & 1) != 0)
  {
    v7 = type metadata accessor for PromotionalAssetsView(0, a6, a7, a4);
    v11 = sub_10007C394(v7, v8, v9, v10);
    sub_1000F9958();
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  return result;
}

void sub_100082A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v9 = sub_10007C394(v5, v6, v7, v8);
  v10 = sub_1000F7C98();
  v12 = v11;
  swift_release(v9);
  v13 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v14 = *v13;
  if (*v13)
  {
    swift_retain(*v13);
    sub_10008AB1C(v10, v12, 8, v14);
    swift_bridgeObjectRelease(v12);
    swift_release(v14);
  }
  else
  {
    v15 = v13[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
}

void sub_100082B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v9 = sub_10007C394(v5, v6, v7, v8);
  v10 = sub_1000F7C98();
  v12 = v11;
  swift_release(v9);
  v13 = (uint64_t *)(a1 + *(int *)(v5 + 40));
  v14 = *v13;
  if (*v13)
  {
    swift_retain(*v13);
    sub_10008A874(v10, v12, 8, 0, 2, 0, 3u, v14);
    swift_bridgeObjectRelease(v12);
    swift_release(v14);
  }
  else
  {
    v15 = v13[1];
    v16 = type metadata accessor for RemoteViewConfiguration();
    v17 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
}

uint64_t sub_100082C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v6;
  v3[7] = v7;
  return swift_task_switch(sub_100082C70, v6, v7);
}

uint64_t sub_100082C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for PromotionalAssetsView(0, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
  v10 = sub_10007C394(v6, v7, v8, v9);
  v11 = (_QWORD *)(v5 + *(int *)(v6 + 40));
  v12 = *v11;
  if (*v11)
  {
    v13 = v10;
    swift_retain(*v11);
    v14 = sub_1000F8BAC();
    swift_release(v12);
    swift_release(v13);
    if ((v14 & 1) != 0)
    {
      *(_QWORD *)(v4 + 64) = sub_10007C394(v6, v15, v16, v17);
      v18 = (_QWORD *)swift_task_alloc(dword_10015FFEC);
      *(_QWORD *)(v4 + 72) = v18;
      *v18 = v4;
      v18[1] = sub_10004E480;
      return sub_1000F8D30();
    }
    else
    {
      v23 = swift_release(*(_QWORD *)(v4 + 40));
      return (*(uint64_t (**)(__n128))(v4 + 8))(v23);
    }
  }
  else
  {
    v20 = v11[1];
    v21 = type metadata accessor for RemoteViewConfiguration();
    v22 = sub_100007428((unint64_t *)&qword_1001582E0, (uint64_t (*)(uint64_t))type metadata accessor for RemoteViewConfiguration, (uint64_t)&unk_100111314);
    return EnvironmentObject.error()(0, v20, v21, v22);
  }
}

double sub_100082D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = sub_10007C394(v4, v5, v6, v7);
  sub_1000F9960();
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

double sub_100082DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  double result;
  void *v13;
  _BYTE v14[40];

  v4 = type metadata accessor for PromotionalAssetsView(0, a2, a3, a4);
  v8 = sub_10007C394(v4, v5, v6, v7);
  if (qword_100158170 != -1)
    swift_once(&qword_100158170, sub_1000D3328);
  sub_10003BC30(qword_10016A5A0 + 16, (uint64_t)v14);
  v9 = sub_100007D50(&qword_10015C5E0);
  v10 = type metadata accessor for MusicPreviewPlayer(0);
  if (swift_dynamicCast(&v13, v14, v9, v10, 6))
  {
    v11 = v13;
    sub_10003E2A4();
    swift_release(v8);

  }
  else
  {
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_100082E8C()
{
  return sub_100082E98((uint64_t)nullsub_1);
}

uint64_t sub_100082E98(uint64_t a1)
{
  uint64_t v2;

  v2 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v2, a1, 0, (char *)&type metadata for () + 8);
  return swift_release(v2);
}

uint64_t sub_100082EF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10007DA60(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100082EFC()
{
  unint64_t result;

  result = qword_10015C5C0;
  if (!qword_10015C5C0)
  {
    result = swift_getWitnessTable(&unk_10010DBC8, &type metadata for PromotionalAssetsViewSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015C5C0);
  }
  return result;
}

void sub_100082F44(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  sub_10008253C(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t sub_100082F9C()
{
  unint64_t result;

  result = qword_10015C5C8;
  if (!qword_10015C5C8)
  {
    result = swift_getWitnessTable(&unk_10010DB80, &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey);
    atomic_store(result, &qword_10015C5C8);
  }
  return result;
}

double sub_100082FE4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  return sub_100082640(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_10008303C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000F9884();
  *a1 = result & 1;
  return result;
}

double sub_100083068(char *a1)
{
  return sub_1000F98DC(*a1);
}

uint64_t sub_10008308C()
{
  return 16;
}

__n128 sub_100083098(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000830A8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v4, v5, a1) - 8) + 80);
  return sub_1000826F4(v2 + ((v6 + 32) & ~v6), v4, v5, v7, a2);
}

uint64_t sub_100083104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082A48, a2, a3, a4);
}

uint64_t sub_100083114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082B1C, a2, a3, a4);
}

uint64_t sub_100083124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_10015C5D4);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10003D1D4;
  return sub_100082C00(v9, v6, v7);
}

uint64_t sub_1000831A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082D94, a2, a3, a4);
}

uint64_t sub_1000831B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082DC8, a2, a3, a4);
}

double sub_1000831C8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v9, v10, a4) - 8) + 80);
  return sub_100082A04(a1, a2, a3, a4, v4 + ((v11 + 32) & ~v11), v9, v10);
}

uint64_t sub_100083248@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10007E42C(v1[4], v1[2], v1[3], a1);
}

double sub_100083258(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v7, v8, a5) - 8) + 80);
  return sub_100081DD0(v5 + ((v9 + 32) & ~v9), v7, v8, a1);
}

void sub_1000832BC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_10004F374(*(_QWORD *)(v1 + 40), a1);
}

double sub_1000832CC@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100081F08(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000832D8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10008215C(v2[4], v2[2], v2[3], a1, a2);
}

double sub_1000832E4@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100082344(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_1000832F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C600;
  if (!qword_10015C600)
  {
    v1 = sub_100007D00(&qword_10015C5F0);
    sub_10001E0A8((unint64_t *)&qword_10015A5A8, &qword_10015A578, (void (*)(void))sub_10001DC68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015C600);
  }
  return result;
}

uint64_t sub_100083378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830(sub_100082494, a2, a3, a4);
}

double sub_10008338C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000833B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008205C, a2, a3, a4);
}

void sub_1000833BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *((double *)v4 + 5);
  v6 = type metadata accessor for PromotionalAssetsView(0, v4[2], v4[3], a4);
  sub_100081E34(v6, v7, v8, v9, v5);
}

uint64_t sub_10008340C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10007E8B4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100083418@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100081058(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_100083424()
{
  unint64_t result;

  result = qword_10015C628;
  if (!qword_10015C628)
  {
    result = swift_getWitnessTable(&unk_10010CD98, &type metadata for TourPhotosDefaultView);
    atomic_store(result, (unint64_t *)&qword_10015C628);
  }
  return result;
}

unint64_t sub_100083468()
{
  unint64_t result;

  result = qword_10015C630;
  if (!qword_10015C630)
  {
    result = swift_getWitnessTable(&unk_10010DB38, &type metadata for TourPhotosViewSizePreferenceKey);
    atomic_store(result, (unint64_t *)&qword_10015C630);
  }
  return result;
}

double sub_1000834B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000834BC(a1, sub_1000F85D4, a3, a4);
}

double sub_1000834BC(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v7, v8, a4) - 8) + 80);
  return sub_1000817B4(a1, v4 + ((v9 + 32) & ~v9), v7, v8, a2);
}

uint64_t sub_10008352C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v5, v6, a4) - 8) + 80);
  return sub_100081B5C(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_100083584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppModule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000835C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C660;
  if (!qword_10015C660)
  {
    v1 = sub_100007D00(&qword_10015C568);
    sub_10008362C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10015C660);
  }
  return result;
}

unint64_t sub_10008362C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C668;
  if (!qword_10015C668)
  {
    v1 = sub_100007D00(&qword_10015C658);
    sub_100083698();
    sub_100083758();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C668);
  }
  return result;
}

unint64_t sub_100083698()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10015C670;
  if (!qword_10015C670)
  {
    v1 = sub_100007D00(&qword_10015C620);
    v2[0] = type metadata accessor for SetlistView(255);
    v2[1] = sub_100007428(&qword_10015C678, type metadata accessor for SetlistView, (uint64_t)&unk_10010A1C0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C670);
  }
  return result;
}

unint64_t sub_100083758()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C680;
  if (!qword_10015C680)
  {
    v1 = sub_100007D00(&qword_10015C608);
    sub_1000837DC();
    sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C680);
  }
  return result;
}

unint64_t sub_1000837DC()
{
  unint64_t result;

  result = qword_10015C688;
  if (!qword_10015C688)
  {
    result = swift_getWitnessTable(&unk_100112A24, &type metadata for SetlistLoadingView);
    atomic_store(result, &qword_10015C688);
  }
  return result;
}

uint64_t sub_100083824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100083830((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100081804, a2, a3, a4);
}

uint64_t sub_100083830(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t sub_100083894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_10015C694);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_10000FAC0;
  return sub_100081A8C(v9, v6, v7);
}

uint64_t sub_10008391C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F88A4(a1);
}

double sub_10008393C(uint64_t a1)
{
  return sub_1000FAC00(a1);
}

uint64_t sub_10008395C()
{
  return 16;
}

__n128 sub_100083968(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_100083974()
{
  unint64_t result;

  result = qword_10015C6A8;
  if (!qword_10015C6A8)
  {
    result = swift_getWitnessTable(&unk_10010DAF0, &type metadata for FeaturedVideosViewSizePreferenceKey);
    atomic_store(result, &qword_10015C6A8);
  }
  return result;
}

uint64_t sub_1000839BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for PromotionalAssetsView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  v14 = type metadata accessor for PromotionalAssetsViewModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v4 + v10, v15);
  swift_release(*(_QWORD *)(v4 + v10 + v7[9] + 8));
  swift_release(*(_QWORD *)(v4 + v10 + v7[10]));
  v16 = (_QWORD *)(v4 + v10 + v7[11]);
  v17 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (_QWORD *)(v12 + v7[12]);
  v20 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*v19);
  }
  v22 = (_QWORD *)(v12 + v7[13]);
  v23 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  v26 = (_QWORD *)(v12 + v7[14]);
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    swift_release(*v26);
  }
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

double sub_100083BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000834BC(a1, sub_1000F89AC, a3, a4);
}

uint64_t sub_100083BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *((_QWORD *)v4 + 4);
  v6 = *((_QWORD *)v4 + 5);
  v7 = (int *)type metadata accessor for PromotionalAssetsView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 48) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v4 + 2));
  v12 = &v4[v10];
  v14 = type metadata accessor for PromotionalAssetsViewModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(&v4[v10], v15);
  swift_release(*(_QWORD *)&v4[v10 + 8 + v7[9]]);
  swift_release(*(_QWORD *)&v4[v10 + v7[10]]);
  v16 = &v4[v10 + v7[11]];
  v17 = sub_100007D50(qword_100158AC8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*(_QWORD *)v16);
  }
  v19 = &v12[v7[12]];
  v20 = sub_100007D50(&qword_100158AC0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*(_QWORD *)v19);
  }
  v22 = &v12[v7[13]];
  v23 = sub_100007D50(&qword_100158968);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for UserInterfaceSizeClass(0);
    v25 = *(_QWORD *)(v24 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
  }
  else
  {
    swift_release(*(_QWORD *)v22);
  }
  v26 = &v12[v7[14]];
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v27 = type metadata accessor for UserInterfaceSizeClass(0);
    v28 = *(_QWORD *)(v27 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
  }
  else
  {
    swift_release(*(_QWORD *)v26);
  }
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

uint64_t sub_100083E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PromotionalAssetsView(0, v7, v8, a4) - 8) + 80);
  v10 = v4[2];
  v11 = v4[3];
  v12 = (uint64_t)v4 + ((v9 + 48) & ~v9);
  v13 = (_QWORD *)swift_task_alloc(dword_10015C6B4);
  *(_QWORD *)(v5 + 16) = v13;
  *v13 = v5;
  v13[1] = sub_10003D1D4;
  return sub_100081968(a1, v10, v11, v12, v7, v8);
}

uint64_t sub_100083ED0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1000F8484();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

double sub_100083F00(uint64_t a1)
{
  return sub_1000F84E4(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_100083F30()
{
  return 16;
}

__n128 sub_100083F3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100083F48(double *a1@<X8>)
{
  *a1 = sub_1000F8568();
}

void sub_100083F70(double *a1)
{
  sub_1000F85C0(*a1);
}

uint64_t sub_100083F94()
{
  return 16;
}

__n128 sub_100083FA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSafeAreaPreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for PromotionalAssetsViewSizePreferenceKey()
{
  return &type metadata for PromotionalAssetsViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for FeaturedVideosViewSizePreferenceKey()
{
  return &type metadata for FeaturedVideosViewSizePreferenceKey;
}

ValueMetadata *type metadata accessor for TourPhotosViewSizePreferenceKey()
{
  return &type metadata for TourPhotosViewSizePreferenceKey;
}

uint64_t sub_100083FEC(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata2;
  uint64_t TupleTypeMetadata;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t OpaqueTypeConformance2;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v78[4];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = *a1;
  v3 = a1[1];
  v4 = type metadata accessor for NavigationPath(255, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v2, &unk_100117DE0, &unk_100117E00);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, AssociatedTypeWitness, &unk_100117DE0, &unk_100117DF0);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D54);
  v8 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v7, &unk_100116D14, &unk_100116D24);
  v9 = swift_getAssociatedTypeWitness(255, v8, v7, &unk_10011615C, &unk_10011617C);
  v10 = swift_getAssociatedConformanceWitness(v8, v7, v9, &unk_10011615C, &unk_100116174);
  type metadata accessor for TourPhotosView(255, v9, v10, v11);
  v12 = type metadata accessor for _ConditionalContent(255);
  v13 = type metadata accessor for Group(255, v12);
  v14 = sub_100007D00(&qword_10015C548);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = sub_100007D00(&qword_10015C550);
  v79 = type metadata accessor for ModifiedContent(255, v15, v16);
  v17 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D3C);
  v18 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v17, &unk_100116D14, &unk_100116D2C);
  v20 = type metadata accessor for FeaturedVideosView(255, v17, v18, v19);
  v21 = sub_100007D00(&qword_10015C558);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v23 = sub_100007D00(&qword_10015C560);
  type metadata accessor for ModifiedContent(255, v22, v23);
  v80 = type metadata accessor for Optional(255);
  v81 = sub_100007D00(&qword_10015C568);
  v24 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D44);
  v25 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &unk_100116D14, &unk_100116D4C);
  v26 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v24, &unk_100116D14, &unk_100116D1C);
  v27 = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, v25, &unk_100116D14, &unk_100116D34);
  v78[0] = v24;
  v78[1] = v25;
  v78[2] = v26;
  v78[3] = v27;
  type metadata accessor for PhoneWallpapersWatchFacesView(255, (uint64_t)v78);
  type metadata accessor for PhoneWallpaperView(255, v24, v26, v28);
  v29 = type metadata accessor for Optional(255);
  type metadata accessor for WatchFacesView(255, v25, v27, v30);
  v31 = type metadata accessor for Optional(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v29, v31, 0, 0);
  type metadata accessor for TupleView(255, TupleTypeMetadata2);
  type metadata accessor for _ConditionalContent(255);
  v82 = type metadata accessor for Optional(255);
  v83 = type metadata accessor for AppModule(255);
  TupleTypeMetadata = swift_getTupleTypeMetadata(255, 5);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, WitnessTable);
  v37 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  v39 = type metadata accessor for ObservableScrollView(255, v36, v37, v38);
  v40 = type metadata accessor for ModifiedContent(255, v39, &type metadata for _SafeAreaRegionsIgnoringLayout);
  swift_getWitnessTable(&unk_10010F020, v39);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v40);
  v79 = v40;
  v80 = v41;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v79, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 0);
  v43 = sub_100007D00(&qword_10015C570);
  v44 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v43);
  v45 = sub_100007D00(&qword_10015A498);
  v46 = type metadata accessor for ModifiedContent(255, v44, v45);
  v79 = v40;
  v80 = v41;
  swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
  sub_10000F4E0(&qword_10015C578, &qword_10015C570, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  sub_10000F4E0(&qword_10015A4A8, &qword_10015A498, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v48 = type metadata accessor for NavigationStack(255, v4, v46, v47);
  v49 = sub_100007D00(&qword_10015C580);
  v50 = type metadata accessor for ModifiedContent(255, v48, v49);
  v51 = sub_100007D00(&qword_10015C588);
  v52 = type metadata accessor for ModifiedContent(255, v50, v51);
  v53 = sub_100007D00(&qword_10015C590);
  v54 = type metadata accessor for ModifiedContent(255, v52, v53);
  v55 = sub_100007D00(&qword_10015C598);
  v56 = type metadata accessor for ModifiedContent(255, v54, v55);
  v57 = sub_100007D00(&qword_10015A4F0);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v48);
  sub_10000F4E0(&qword_10015C5A0, &qword_10015C580, (uint64_t)&unk_100108C38);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v50);
  sub_10000F4E0(&qword_10015C5A8, &qword_10015C588, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
  sub_10000F4E0(&qword_10015C5B0, &qword_10015C590, (uint64_t)&unk_10010C4A0);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  sub_10000F4E0(&qword_10015C5B8, &qword_10015C598, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
  v59 = sub_100007D00(&qword_10015A4F8);
  v60 = sub_10001E0A8(&qword_10015A500, &qword_10015A4F8, (void (*)(void))sub_10004EC0C);
  v79 = v59;
  v80 = v60;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.presentationDetents(_:)>>, 1);
  v79 = v56;
  v80 = v57;
  v81 = v58;
  v82 = OpaqueTypeConformance2;
  v62 = swift_getOpaqueTypeMetadata2(255, &v79, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v63 = type metadata accessor for ModifiedContent(255, v62, &type metadata for _AppearanceActionModifier);
  v64 = type metadata accessor for ModifiedContent(255, v63, &type metadata for _AppearanceActionModifier);
  v65 = type metadata accessor for _TaskModifier(255);
  v66 = type metadata accessor for ModifiedContent(255, v64, v65);
  v67 = type metadata accessor for ModifiedContent(255, v66, &type metadata for _AppearanceActionModifier);
  v68 = type metadata accessor for ModifiedContent(255, v67, &type metadata for _AppearanceActionModifier);
  v69 = sub_100007D00(&qword_100158970);
  v79 = v56;
  v80 = v57;
  v81 = v58;
  v82 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v63);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v64);
  sub_100007428(&qword_100158AB8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v66);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v67);
  v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v68);
  v71 = sub_10004EC50();
  v79 = v68;
  v80 = v69;
  v81 = v70;
  v82 = v71;
  v72 = swift_getOpaqueTypeMetadata2(255, &v79, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v79 = v68;
  v80 = v69;
  v81 = v70;
  v82 = v71;
  v73 = swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v79 = v72;
  v80 = v69;
  v81 = v73;
  v82 = v71;
  v74 = swift_getOpaqueTypeMetadata2(255, &v79, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v75 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v76 = type metadata accessor for ModifiedContent(255, v74, v75);
  v79 = v72;
  v80 = v69;
  v81 = v73;
  v82 = v71;
  swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_100007428((unint64_t *)&qword_1001582C8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v76);
}

unint64_t sub_100084904(uint64_t a1)
{
  unint64_t result;

  result = sub_100083468();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100084928(uint64_t a1)
{
  unint64_t result;

  result = sub_100083974();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008494C(uint64_t a1)
{
  unint64_t result;

  result = sub_100082EFC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100084970(uint64_t a1)
{
  unint64_t result;

  result = sub_100082F9C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for SongRowViewModel(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    return sub_1000228FC((_QWORD *)(a1 + 32));
  return result;
}

uint64_t initializeWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2 + 32;
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
  }
  else
  {
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 32);
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    goto LABEL_8;
  }
  if (!v8)
  {
    sub_1000228FC((_QWORD *)(a1 + 32));
    goto LABEL_7;
  }
  sub_100084B54((_QWORD *)(a1 + 32), (_QWORD *)(a2 + 32));
LABEL_8:
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

_QWORD *sub_100084B54(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SongRowViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  if (*(_QWORD *)(a1 + 56))
    sub_1000228FC((_QWORD *)(a1 + 32));
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SongRowViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SongRowViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SongRow()
{
  return &type metadata for SongRow;
}

uint64_t sub_100084E04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001181C4, 1);
}

void sub_100084E14()
{
  qword_10015C6C0 = 0x6F6E2E636973756DLL;
  *(_QWORD *)algn_10015C6C8 = 0xEA00000000006574;
}

uint64_t sub_100084E3C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v2 = type metadata accessor for AccessibilityChildBehavior(0, a1);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015C6D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007D50(&qword_10015C6D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v8 + 1) = 0x4024000000000000;
  v8[16] = 0;
  v13 = sub_100007D50(&qword_10015C6E0);
  v14 = sub_100084FE4(v1, (uint64_t)&v8[*(int *)(v13 + 44)]);
  v15 = static Edge.Set.top.getter(v14);
  sub_100007E78((uint64_t)v8, (uint64_t)v11, &qword_10015C6D0);
  v16 = &v11[*(int *)(v9 + 36)];
  *v16 = v15;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  v16[40] = 1;
  v17 = sub_100007F38((uint64_t)v8, &qword_10015C6D0);
  static AccessibilityChildBehavior.ignore.getter(v17);
  v18 = sub_1000864AC();
  View.accessibilityElement(children:)(v5, v9, v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_100007F38((uint64_t)v11, &qword_10015C6D8);
}

uint64_t sub_100084FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v57 = a2;
  v3 = sub_100007D50(&qword_10015C6F8);
  __chkstk_darwin(v3);
  v58 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - v6;
  v8 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100007D50(&qword_10015C700);
  v53 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100007D50(&qword_10015C708);
  __chkstk_darwin(v50);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100007D50(&qword_10015C710);
  __chkstk_darwin(v52);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100007D50(&qword_10015C718);
  __chkstk_darwin(v51);
  v55 = (uint64_t)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v49 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v49 - v23;
  v56 = a1;
  sub_100007E78(a1 + 32, (uint64_t)&v59, &qword_100159A38);
  v25 = *((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v26 = v61;
    sub_10001BF94(&v59, *((uint64_t *)&v60 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 40))(100, 100, v25, v26);
    v27 = sub_1000228FC(&v59);
  }
  else
  {
    sub_100007F38((uint64_t)&v59, &qword_100159A38);
    v28 = type metadata accessor for URL(0);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
  }
  v29 = static Animation.easeInOut.getter(v27);
  v30 = Transaction.init(animation:)(v29);
  v31 = sub_100007D50(&qword_10015C720);
  v32 = sub_100086530();
  v33 = AsyncImage.init(url:scale:transaction:content:)(v10, v30, sub_100085480, 0, v31, v32, 1.0);
  v34 = static Alignment.center.getter(v33);
  _FrameLayout.init(width:height:alignment:)(&v59, 0x4048000000000000, 0, 0x4048000000000000, 0, v34, v35);
  v37 = v53;
  v36 = v54;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v15, v13, v54);
  v38 = &v15[*(int *)(v50 + 36)];
  v39 = v60;
  *(_OWORD *)v38 = v59;
  *((_OWORD *)v38 + 1) = v39;
  *((_OWORD *)v38 + 2) = v61;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v36);
  sub_100007E78((uint64_t)v15, (uint64_t)v17, &qword_10015C708);
  v17[*(int *)(v52 + 36)] = 1;
  v40 = sub_100007F38((uint64_t)v15, &qword_10015C708);
  LOBYTE(v36) = static Edge.Set.bottom.getter(v40);
  sub_100007E78((uint64_t)v17, (uint64_t)v21, &qword_10015C710);
  v41 = &v21[*(int *)(v51 + 36)];
  *v41 = v36;
  *(_OWORD *)(v41 + 8) = 0u;
  *(_OWORD *)(v41 + 24) = 0u;
  v41[40] = 1;
  sub_100007F38((uint64_t)v17, &qword_10015C710);
  v42 = sub_100018EB4((uint64_t)v21, (uint64_t)v24, &qword_10015C718);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v42);
  *((_QWORD *)v7 + 1) = 0x4030000000000000;
  v7[16] = 0;
  v43 = sub_100007D50(&qword_10015C770);
  sub_100085E38(v56, &v7[*(int *)(v43 + 44)]);
  v44 = v55;
  sub_100007E78((uint64_t)v24, v55, &qword_10015C718);
  v45 = v58;
  sub_100007E78((uint64_t)v7, v58, &qword_10015C6F8);
  v46 = v57;
  sub_100007E78(v44, v57, &qword_10015C718);
  v47 = sub_100007D50(&qword_10015C778);
  sub_100007E78(v45, v46 + *(int *)(v47 + 48), &qword_10015C6F8);
  sub_100007F38((uint64_t)v7, &qword_10015C6F8);
  sub_100007F38((uint64_t)v24, &qword_10015C718);
  sub_100007F38(v45, &qword_10015C6F8);
  return sub_100007F38(v44, &qword_10015C718);
}

uint64_t sub_100085480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v66 = a1;
  v73 = a2;
  v72 = sub_100007D50(&qword_10015C768);
  __chkstk_darwin(v72);
  v62 = (uint64_t *)((char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_100007D50(&qword_10015C788);
  __chkstk_darwin(v70);
  v71 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100007D50(&qword_10015C790);
  __chkstk_darwin(v65);
  v67 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100007D50(&qword_10015C738);
  __chkstk_darwin(v68);
  v69 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_10015C758);
  __chkstk_darwin(v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for Image.ResizingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100007D50(&qword_10015C748);
  __chkstk_darwin(v64);
  v17 = (uint64_t *)((char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v63 = (uint64_t)&v62 - v19;
  v20 = type metadata accessor for AsyncImagePhase(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (uint64_t **)((char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, v66, v20, v22);
  v25 = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 88))(v24, v20);
  if ((_DWORD)v25 == enum case for AsyncImagePhase.success(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v21 + 96))(v24, v20);
    v26 = *v24;
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v12);
    v27 = Image.resizable(capInsets:resizingMode:)(v15, v26, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v28 = (char *)v11 + *(int *)(v9 + 20);
    v29 = enum case for RoundedCornerStyle.continuous(_:);
    v30 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v28, v29, v30);
    __asm { FMOV            V0.2D, #4.0 }
    *v11 = _Q0;
    sub_10000F760((uint64_t)v11, (uint64_t)v8);
    v36 = v64;
    sub_100007E78((uint64_t)v8, (uint64_t)v17 + *(int *)(v64 + 36), &qword_10015C758);
    *v17 = v27;
    swift_retain(v27);
    sub_100007F38((uint64_t)v8, &qword_10015C758);
    sub_10000F854((uint64_t)v11);
    swift_release(v27);
    v37 = v63;
    sub_100018EB4((uint64_t)v17, v63, &qword_10015C748);
    v38 = v67;
    sub_100007E78(v37, v67, &qword_10015C748);
    swift_storeEnumTagMultiPayload(v38, v65, 0);
    v39 = sub_100086620();
    v40 = sub_10000F4E0(&qword_10015C760, &qword_10015C768, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v41 = (uint64_t)v69;
    _ConditionalContent<>.init(storage:)(v38, v36, v72, v39, v40);
    v42 = v71;
    sub_100007E78(v41, v71, &qword_10015C738);
    swift_storeEnumTagMultiPayload(v42, v70, 0);
    v43 = sub_10008659C();
    _ConditionalContent<>.init(storage:)(v42, v68, &type metadata for EmptyView, v43, &protocol witness table for EmptyView);
    swift_release(v26);
    sub_100007F38(v41, &qword_10015C738);
    v44 = v37;
    v45 = &qword_10015C748;
  }
  else
  {
    v46 = v67;
    v47 = v68;
    v48 = v71;
    v49 = v72;
    v51 = (uint64_t)v69;
    v50 = v70;
    if ((_DWORD)v25 == enum case for AsyncImagePhase.failure(_:))
    {
      (*(void (**)(_QWORD *, uint64_t))(v21 + 96))(v24, v20);
      v25 = swift_errorRelease(*v24);
    }
    else if ((_DWORD)v25 != enum case for AsyncImagePhase.empty(_:))
    {
      swift_storeEnumTagMultiPayload(v71, v70, 1);
      v61 = sub_10008659C();
      _ConditionalContent<>.init(storage:)(v48, v47, &type metadata for EmptyView, v61, &protocol witness table for EmptyView);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v24, v20);
    }
    v52 = static Alignment.center.getter(v25);
    v53 = (uint64_t)v62;
    *v62 = v52;
    *(_QWORD *)(v53 + 8) = v54;
    v55 = sub_100007D50(&qword_10015C798);
    sub_100085AB8(v53 + *(int *)(v55 + 44));
    sub_100007E78(v53, v46, &qword_10015C768);
    swift_storeEnumTagMultiPayload(v46, v65, 1);
    v56 = v46;
    v57 = sub_100086620();
    v58 = sub_10000F4E0(&qword_10015C760, &qword_10015C768, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v56, v64, v49, v57, v58);
    sub_100007E78(v51, v48, &qword_10015C738);
    swift_storeEnumTagMultiPayload(v48, v50, 0);
    v59 = sub_10008659C();
    _ConditionalContent<>.init(storage:)(v48, v47, &type metadata for EmptyView, v59, &protocol witness table for EmptyView);
    sub_100007F38(v51, &qword_10015C738);
    v44 = v53;
    v45 = &qword_10015C768;
  }
  return sub_100007F38(v44, v45);
}

uint64_t sub_100085AB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[12];
  int v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a1;
  v1 = type metadata accessor for Image.ResizingMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v45[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v5);
  v7 = &v45[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100007D50(&qword_10015C7A0);
  __chkstk_darwin(v8);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v13 = &v45[-v12];
  v14 = (char *)v7 + *(int *)(v5 + 20);
  v15 = enum case for RoundedCornerStyle.continuous(_:);
  v16 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  __asm { FMOV            V0.2D, #4.0 }
  *v7 = _Q0;
  if (qword_1001580A8 != -1)
    swift_once(&qword_1001580A8, sub_100051438);
  v22 = qword_10016A4C0;
  KeyPath = swift_getKeyPath(&unk_10010DC98);
  sub_10000F760((uint64_t)v7, (uint64_t)v10);
  v24 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v24 = KeyPath;
  v24[1] = v22;
  swift_retain(v22);
  sub_10000F854((uint64_t)v7);
  sub_100018EB4((uint64_t)v10, (uint64_t)v13, &qword_10015C7A0);
  v49 = v13;
  if (qword_100158128 != -1)
    swift_once(&qword_100158128, sub_100084E14);
  v25 = qword_10015C6C0;
  v26 = *(_QWORD *)algn_10015C6C8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10015C6C8);
  v27 = Image.init(systemName:)(v25, v26);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v1);
  v48 = Image.resizable(capInsets:resizingMode:)(v4, v27, 0.0, 0.0, 0.0, 0.0);
  v28 = swift_release(v27);
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v2 + 8))(v4, v1, v28);
  v30 = static Color.white.getter(v29);
  v31 = swift_getKeyPath(&unk_10010DC98);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(&v51, 0x4038000000000000, 0, 0x4038000000000000, 0, v32, v33);
  v34 = v51;
  v35 = v52;
  v36 = v53;
  v46 = v54;
  v37 = v55;
  v38 = v56;
  v39 = (uint64_t)v49;
  sub_100007E78((uint64_t)v49, (uint64_t)v10, &qword_10015C7A0);
  v40 = (uint64_t)v10;
  v47 = v10;
  v41 = v50;
  sub_100007E78(v40, v50, &qword_10015C7A0);
  v42 = v41 + *(int *)(sub_100007D50(&qword_10015C7A8) + 48);
  v43 = v48;
  *(_QWORD *)v42 = v48;
  *(_QWORD *)(v42 + 8) = 0;
  *(_WORD *)(v42 + 16) = 1;
  *(_QWORD *)(v42 + 24) = v31;
  *(_QWORD *)(v42 + 32) = v30;
  *(_QWORD *)(v42 + 40) = v34;
  *(_BYTE *)(v42 + 48) = v35;
  *(_QWORD *)(v42 + 56) = v36;
  *(_BYTE *)(v42 + 64) = v46;
  *(_QWORD *)(v42 + 72) = v37;
  *(_QWORD *)(v42 + 80) = v38;
  swift_retain(v43);
  swift_retain(v31);
  swift_retain(v30);
  sub_100007F38(v39, &qword_10015C7A0);
  swift_release(v30);
  swift_release(v31);
  swift_release(v43);
  return sub_100007F38((uint64_t)v47, &qword_10015C7A0);
}

uint64_t sub_100085E38@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  _BYTE v66[7];
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unsigned __int8 v71;
  _BYTE v72[7];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  unsigned __int8 v82;
  char v83;
  unsigned __int8 v84;
  char v85;
  _BYTE v86[7];
  _BYTE v87[7];
  _BYTE v88[7];
  _DWORD v89[3];

  v48 = type metadata accessor for Divider(0);
  v4 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100007D50(&qword_10015ACF8);
  __chkstk_darwin(v39);
  v45 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - v9;
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - v12;
  v49 = static HorizontalAlignment.leading.getter(v14);
  v15 = sub_100086224((uint64_t *)a1, (uint64_t)&v63);
  v50 = v64;
  v51 = v63;
  v16 = v65;
  v54 = v67;
  v37 = v68;
  v53 = v70;
  v52 = v71;
  v43 = v73;
  v17 = v74;
  v42 = v75;
  v40 = *((_QWORD *)&v69 + 1);
  v41 = v76;
  v38 = v77;
  v85 = 0;
  v84 = v65;
  v83 = v69;
  v82 = v71;
  v81 = v77;
  v18 = v69;
  v46 = v65;
  v47 = v69;
  Divider.init()(v15);
  if (*(_BYTE *)(a1 + 72))
    v19 = 1.0;
  else
    v19 = 0.0;
  v20 = v48;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v6, v48);
  *(double *)&v10[*(int *)(v39 + 36)] = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
  v44 = v13;
  sub_100018EB4((uint64_t)v10, (uint64_t)v13, &qword_10015ACF8);
  v21 = v45;
  sub_100007E78((uint64_t)v13, v45, &qword_10015ACF8);
  *(_QWORD *)&v55 = v49;
  *((_QWORD *)&v55 + 1) = 0x4014000000000000;
  LOBYTE(v56) = 0;
  *(_DWORD *)((char *)&v56 + 1) = v89[0];
  DWORD1(v56) = *(_DWORD *)((char *)v89 + 3);
  *((_QWORD *)&v56 + 1) = v51;
  *(_QWORD *)&v57 = v50;
  BYTE8(v57) = v16;
  *(_DWORD *)((char *)&v57 + 9) = *(_DWORD *)v88;
  HIDWORD(v57) = *(_DWORD *)&v88[3];
  v58 = v54;
  v22 = v37;
  *(_QWORD *)&v59 = v37;
  BYTE8(v59) = v18;
  *(_DWORD *)((char *)&v59 + 9) = *(_DWORD *)v87;
  HIDWORD(v59) = *(_DWORD *)&v87[3];
  v24 = v40;
  v23 = v41;
  *(_QWORD *)&v60 = v40;
  *((_QWORD *)&v60 + 1) = v53;
  LOBYTE(v61) = v52;
  *(_DWORD *)((char *)&v61 + 1) = *(_DWORD *)v86;
  DWORD1(v61) = *(_DWORD *)&v86[3];
  v26 = v42;
  v25 = v43;
  *((_QWORD *)&v61 + 1) = v43;
  *(_QWORD *)&v62[0] = v17;
  *((_QWORD *)&v62[0] + 1) = v42;
  *(_QWORD *)&v62[1] = v41;
  v27 = v38;
  BYTE8(v62[1]) = v38;
  v28 = v55;
  v29 = v56;
  v30 = v54;
  a2[2] = v57;
  a2[3] = v30;
  *a2 = v28;
  a2[1] = v29;
  v31 = v59;
  v32 = v60;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v62 + 9);
  v33 = v62[0];
  a2[6] = v61;
  a2[7] = v33;
  a2[4] = v31;
  a2[5] = v32;
  v34 = (uint64_t)a2 + *(int *)(sub_100007D50(&qword_10015C780) + 48);
  sub_100007E78(v21, v34, &qword_10015ACF8);
  sub_1000866A4((uint64_t)&v55);
  sub_100007F38((uint64_t)v44, &qword_10015ACF8);
  sub_100007F38(v21, &qword_10015ACF8);
  v63 = v49;
  v64 = 0x4014000000000000;
  v65 = 0;
  *(_DWORD *)v66 = v89[0];
  *(_DWORD *)&v66[3] = *(_DWORD *)((char *)v89 + 3);
  *(_QWORD *)&v67 = v51;
  *((_QWORD *)&v67 + 1) = v50;
  LOBYTE(v68) = v46;
  *(_DWORD *)((char *)&v68 + 1) = *(_DWORD *)v88;
  HIDWORD(v68) = *(_DWORD *)&v88[3];
  v69 = v54;
  v70 = v22;
  v71 = v47;
  *(_DWORD *)&v72[3] = *(_DWORD *)&v87[3];
  *(_DWORD *)v72 = *(_DWORD *)v87;
  v73 = v24;
  v74 = v53;
  LOBYTE(v75) = v52;
  *(_DWORD *)((char *)&v75 + 1) = *(_DWORD *)v86;
  HIDWORD(v75) = *(_DWORD *)&v86[3];
  v76 = v25;
  v77 = v17;
  v78 = v26;
  v79 = v23;
  v80 = v27;
  return sub_100086730((uint64_t)&v63);
}

uint64_t sub_100086224@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = a1[1];
  v48 = *a1;
  v49 = v4;
  sub_10001DB0C();
  swift_bridgeObjectRetain(v4);
  v5 = Text.init<A>(_:)(&v48, &type metadata for String);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.Weight.semibold.getter();
  v13 = Text.fontWeight(_:)(*(_QWORD *)&v12, 0, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  sub_100007D90(v5, v7, v11);
  v20 = swift_bridgeObjectRelease(v9);
  v21 = static Font.headline.getter(v20);
  v22 = Text.font(_:)(v21, v13, v15, v19, v17);
  v45 = v23;
  v46 = v22;
  LOBYTE(v11) = v24;
  v47 = v25;
  swift_release(v21);
  v44 = v11 & 1;
  sub_100007D90(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  KeyPath = swift_getKeyPath(&unk_10010DC68);
  v26 = a1[3];
  v48 = a1[2];
  v49 = v26;
  swift_bridgeObjectRetain(v26);
  v27 = Text.init<A>(_:)(&v48, &type metadata for String);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.subheadline.getter(v27);
  v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  v37 = v36;
  LOBYTE(v21) = v38;
  v40 = v39;
  swift_release(v34);
  LOBYTE(v34) = v21 & 1;
  sub_100007D90(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  v41 = swift_getKeyPath(&unk_10010DC68);
  LOBYTE(v48) = v44;
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v45;
  *(_BYTE *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = v47;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v35;
  *(_QWORD *)(a2 + 64) = v37;
  *(_BYTE *)(a2 + 72) = v34;
  *(_QWORD *)(a2 + 80) = v40;
  *(_QWORD *)(a2 + 88) = 0x3FE6666666666666;
  *(_QWORD *)(a2 + 96) = v41;
  *(_QWORD *)(a2 + 104) = 1;
  *(_BYTE *)(a2 + 112) = 0;
  sub_10000F844(v46, v45, v44);
  swift_bridgeObjectRetain(v47);
  swift_retain(KeyPath);
  sub_10000F844(v35, v37, v34);
  swift_bridgeObjectRetain(v40);
  swift_retain(v41);
  sub_100007D90(v35, v37, v34);
  swift_release(v41);
  swift_bridgeObjectRelease(v40);
  sub_100007D90(v46, v45, v48);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v47);
}

unint64_t sub_1000864AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C6E8;
  if (!qword_10015C6E8)
  {
    v1 = sub_100007D00(&qword_10015C6D8);
    sub_10000F4E0(&qword_10015C6F0, &qword_10015C6D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C6E8);
  }
  return result;
}

unint64_t sub_100086530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C728;
  if (!qword_10015C728)
  {
    v1 = sub_100007D00(&qword_10015C720);
    sub_10008659C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C728);
  }
  return result;
}

unint64_t sub_10008659C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C730;
  if (!qword_10015C730)
  {
    v1 = sub_100007D00(&qword_10015C738);
    sub_100086620();
    sub_10000F4E0(&qword_10015C760, &qword_10015C768, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C730);
  }
  return result;
}

unint64_t sub_100086620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C740;
  if (!qword_10015C740)
  {
    v1 = sub_100007D00(&qword_10015C748);
    sub_10000F4E0(&qword_10015C750, &qword_10015C758, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C740);
  }
  return result;
}

uint64_t sub_1000866A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  sub_10000F844(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_10000F844(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t sub_100086730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  sub_100007D90(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_100007D90(v4, v5, v6);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1000867CC()
{
  _QWORD v1[2];

  v1[0] = sub_100007D00(&qword_10015C6D8);
  v1[1] = sub_1000864AC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_100086818()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_10010DD38);
  v2 = swift_getKeyPath(&unk_10010DD60);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void sub_100086888(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;

  v2 = v1;
  v3 = objc_msgSend(a1, "userInfo");
  if (!v3)
  {
    v24 = 0u;
    v25 = 0u;
LABEL_10:
    sub_100086D4C((uint64_t)&v24);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v22[0] = 0xD000000000000013;
  v22[1] = 0x80000001001146C0;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_100086FE0((uint64_t)v23), (v7 & 1) != 0))
  {
    sub_1000402F4(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  sub_100087010((uint64_t)v23);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_10;
  if ((swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
  {
    v9 = v23[0];
    v8 = v23[1];
    v10 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = JSONDecoder.init()();
    v12 = type metadata accessor for RemoteViewConfiguration();
    v13 = sub_100087044();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v23, v12, v9, v8, v12, v13);
    swift_release(v11);
    v19 = v23[0];
    KeyPath = swift_getKeyPath(&unk_10010DD38);
    v21 = swift_getKeyPath(&unk_10010DD60);
    v23[0] = v19;
    swift_retain(v2);
    static Published.subscript.setter(v23, v2, KeyPath, v21);
    sub_100029D7C(v9, v8);
    return;
  }
LABEL_11:
  if (qword_1001581A8 != -1)
    swift_once(&qword_1001581A8, sub_1001046AC);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100029E7C(v14, (uint64_t)qword_10016A5B0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "User activity missing remote configuration", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

uint64_t sub_100086BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC15ShazamEventsApp20ShazamEventsAppModel__remoteViewConfiguration;
  v2 = sub_100007D50(&qword_10015C888);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC15ShazamEventsApp20ShazamEventsAppModel_userActivityType + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100086C3C()
{
  return type metadata accessor for ShazamEventsAppModel(0);
}

uint64_t type metadata accessor for ShazamEventsAppModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C7E0;
  if (!qword_10015C7E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShazamEventsAppModel);
  return result;
}

void sub_100086C80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100086CF4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_10010DCE8;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100086CF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10015C7F0)
  {
    v2 = sub_100007D00((uint64_t *)&unk_10015C7F8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10015C7F0);
  }
}

uint64_t sub_100086D4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50((uint64_t *)&unk_10015D4A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100086D8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10010DD38);
  v5 = swift_getKeyPath(&unk_10010DD60);
  static Published.subscript.getter(v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100086E08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10010DD38);
  v5 = swift_getKeyPath(&unk_10010DD60);
  v7 = v2;
  swift_retain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

unint64_t sub_100086E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100087094(a1, a2, v5);
}

unint64_t sub_100086EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100087174(a1, v7);
}

unint64_t sub_100086F64(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = 8 * a1;
  v4 = *(_QWORD *)&aCalendar_2[v3 + 8];
  String.hash(into:)(v7, *(_QWORD *)&aLocationmusic_0[v3], v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_1000872E8(a1, v5);
}

unint64_t sub_100086FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000873F8(a1, v4);
}

uint64_t sub_100087010(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_100087044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C880;
  if (!qword_10015C880)
  {
    v1 = type metadata accessor for RemoteViewConfiguration();
    result = swift_getWitnessTable(&unk_1001112EC, v1);
    atomic_store(result, (unint64_t *)&qword_10015C880);
  }
  return result;
}

unint64_t sub_100087094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100087174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000872E8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = 8 * a1;
    v7 = *(_QWORD *)&aLocationmusic_0[v6];
    v8 = *(_QWORD *)&aCalendar_2[v6 + 8];
    while (1)
    {
      v9 = 8 * *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aLocationmusic_0[v9];
      v11 = *(_QWORD *)&aCalendar_2[v9 + 8];
      if (v10 == v7 && v11 == v8)
        break;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, *(_QWORD *)&aCalendar_2[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 8], v7, v8, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v8);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(*(_QWORD *)&aCalendar_2[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 8]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t sub_1000873F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000874BC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100087010((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000874BC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t destroy for GenericErrorView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for GenericErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericErrorView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericErrorView()
{
  return &type metadata for GenericErrorView;
}

uint64_t sub_10008776C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118250, 1);
}

uint64_t sub_10008777C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = a1[3];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v8 = Text.init(_:tableName:bundle:comment:)(v4, v5, v6, v7, 0, 0, 0, 0, 0, 256);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.title.getter(v8);
  static Font.Weight.bold.getter(v15);
  v16 = Font.weight(_:)(v15);
  swift_release(v15);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  v19 = v18;
  v21 = v20;
  v58 = v22;
  swift_release(v16);
  sub_100007D90(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  if (qword_1001580A0 != -1)
    swift_once(&qword_1001580A0, sub_100051424);
  v23 = qword_10016A4B8;
  *(_QWORD *)v63 = qword_10016A4B8;
  swift_retain(qword_10016A4B8);
  v24 = Text.foregroundStyle<A>(_:)(v63, v17, v19, v21 & 1, v58, &type metadata for Color, &protocol witness table for Color);
  v60 = v25;
  v61 = v24;
  v62 = v26;
  v59 = v27 & 1;
  sub_100007D90(v17, v19, v21 & 1);
  swift_release(v23);
  swift_bridgeObjectRelease(v58);
  v28 = a1[4];
  v29 = a1[5];
  v30 = *((unsigned __int8 *)a1 + 48);
  v31 = a1[7];
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v31);
  LOWORD(v57) = 256;
  v32 = Text.init(_:tableName:bundle:comment:)(v28, v29, v30, v31, 0, 0, 0, 0, 0, v57);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = static Font.subheadline.getter(v32);
  static Font.Weight.regular.getter();
  v40 = Font.weight(_:)(v39);
  swift_release(v39);
  v41 = Text.font(_:)(v40, v32, v34, v38, v36);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release(v40);
  v48 = v45 & 1;
  sub_100007D90(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  v49 = qword_10016A4B8;
  *(_QWORD *)v63 = qword_10016A4B8;
  swift_retain(qword_10016A4B8);
  v50 = Text.foregroundStyle<A>(_:)(v63, v41, v43, v48, v47, &type metadata for Color, &protocol witness table for Color);
  v52 = v51;
  v54 = v53;
  LOBYTE(v38) = v55 & 1;
  sub_100007D90(v41, v43, v48);
  swift_release(v49);
  swift_bridgeObjectRelease(v47);
  v63[0] = v59;
  *(_QWORD *)a2 = v61;
  *(_QWORD *)(a2 + 8) = v60;
  *(_BYTE *)(a2 + 16) = v59;
  *(_QWORD *)(a2 + 24) = v62;
  *(_QWORD *)(a2 + 32) = v50;
  *(_QWORD *)(a2 + 40) = v52;
  *(_BYTE *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v54;
  sub_10000F844(v61, v60, v59);
  swift_bridgeObjectRetain(v62);
  sub_10000F844(v50, v52, v38);
  swift_bridgeObjectRetain(v54);
  sub_100007D90(v50, v52, v38);
  swift_bridgeObjectRelease(v54);
  sub_100007D90(v61, v60, v63[0]);
  return swift_bridgeObjectRelease(v62);
}

__n128 sub_100087ADC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  _OWORD v19[4];

  v4 = v2[1];
  v19[0] = *v2;
  v19[1] = v4;
  v5 = v2[3];
  v19[2] = v2[2];
  v19[3] = v5;
  v6 = static HorizontalAlignment.center.getter(a1);
  sub_10008777C((uint64_t *)v19, (uint64_t)&v13);
  v7 = v14;
  v8 = v15;
  v9 = v17;
  v10 = v18;
  result = v13;
  v12 = v16;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = 0x4018000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_OWORD *)(a2 + 56) = v12;
  *(_BYTE *)(a2 + 72) = v9;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

unint64_t sub_100087B64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C890;
  if (!qword_10015C890)
  {
    v1 = sub_100007D00(&qword_10015C898);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C890);
  }
  return result;
}

_QWORD *sub_100087BB0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)((char *)a2 + v14 + 24);
    if (v17)
    {
      v18 = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 3) = v17;
      *((_QWORD *)v15 + 4) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
    }
    v21 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v19 = *(_QWORD *)((char *)a2 + v21);
    *(_QWORD *)((char *)v4 + v21) = v19;
  }
  swift_retain(v19);
  return v4;
}

double sub_100087CC4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (_QWORD *)(a1 + a2[7]);
  if (v6[3])
    sub_1000228FC(v6);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[9])).n128_u64[0];
  return result;
}

_QWORD *sub_100087D3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 24);
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 3) = v16;
    *((_QWORD *)v14 + 4) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    v18 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  }
  v19 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v20 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  return a1;
}

_QWORD *sub_100087E28(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)((char *)a2 + v14 + 24);
  if (!*(_QWORD *)((char *)a1 + v14 + 24))
  {
    if (v17)
    {
      *((_QWORD *)v15 + 3) = v17;
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      (**(void (***)(char *, char *))(v17 - 8))(v15, v16);
      goto LABEL_8;
    }
LABEL_7:
    v18 = *(_OWORD *)v16;
    v19 = *((_OWORD *)v16 + 1);
    *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
    *(_OWORD *)v15 = v18;
    *((_OWORD *)v15 + 1) = v19;
    goto LABEL_8;
  }
  if (!v17)
  {
    sub_1000228FC(v15);
    goto LABEL_7;
  }
  sub_100084B54(v15, v16);
LABEL_8:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v20 = a3[9];
  v21 = *(_QWORD *)((char *)a1 + v20);
  v22 = *(_QWORD *)((char *)a2 + v20);
  *(_QWORD *)((char *)a1 + v20) = v22;
  swift_retain(v22);
  swift_release(v21);
  return a1;
}

_OWORD *sub_100087F60(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  v12 = a3[8];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  v15 = *(_OWORD *)v14;
  v16 = *((_OWORD *)v14 + 1);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *(_OWORD *)v13 = v15;
  *((_OWORD *)v13 + 1) = v16;
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *sub_100087FFC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  if (*(_QWORD *)((char *)a1 + v14 + 24))
    sub_1000228FC((_QWORD *)((char *)a1 + v14));
  v16 = *(_OWORD *)((char *)a2 + v14 + 16);
  *(_OWORD *)v15 = *(_OWORD *)((char *)a2 + v14);
  *((_OWORD *)v15 + 1) = v16;
  *((_QWORD *)v15 + 4) = *(_QWORD *)((char *)a2 + v14 + 32);
  v17 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v18 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_release(v18);
  return a1;
}

uint64_t sub_1000880C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000880D4);
}

uint64_t sub_1000880D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100088150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008815C);
}

uint64_t sub_10008815C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for EventRowViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015C8F8;
  if (!qword_10015C8F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventRowViewModel);
  return result;
}

uint64_t sub_10008820C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_10010DE78;
  v4[1] = &unk_10010DE78;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_10010DE90;
    v4[4] = &unk_10010DEA8;
    v4[5] = &unk_10010DEC0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10008829C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = type metadata accessor for EventRowViewModel(0);
  sub_100007E78(v1 + *(int *)(v3 + 28), (uint64_t)v16, &qword_100159A38);
  v4 = v17;
  if (v17)
  {
    v5 = v18;
    v15 = sub_10001BF94(v16, v17);
    v6 = (void *)objc_opt_self(UIDevice);
    v7 = objc_msgSend(v6, "currentDevice");
    v8 = objc_msgSend(v7, "userInterfaceIdiom");

    if (v8 == (id)1)
      v9 = 200;
    else
      v9 = 100;
    v10 = objc_msgSend(v6, "currentDevice", v15);
    v11 = objc_msgSend(v10, "userInterfaceIdiom");

    if (v11 == (id)1)
      v12 = 200;
    else
      v12 = 100;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40))(v9, v12, v4, v5);
    return sub_1000228FC(v16);
  }
  else
  {
    sub_100007F38((uint64_t)v16, &qword_100159A38);
    v14 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_1000883F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  id v13;
  Class isa;
  uint64_t v15;
  Class v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for TimeZone(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100007D50(&qword_1001588C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v31 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))((char *)&v31 - v11, 1, 1, v2, v10);
  v13 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v13, "setDateStyle:", 2);
  sub_100007E78((uint64_t)v12, (uint64_t)v8, &qword_1001588C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_100007F38((uint64_t)v8, &qword_1001588C0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    isa = TimeZone._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v13, "setTimeZone:", isa);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_100007F38((uint64_t)v12, &qword_1001588C0);
  v15 = type metadata accessor for EventRowViewModel(0);
  v16 = Date._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v13, "stringFromDate:", v16);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  if (*((_BYTE *)v1 + *(int *)(v15 + 32)) == 1)
  {
    swift_bridgeObjectRelease();
    v21 = v1[3];
    v31 = v1[2];
    v32 = v21;
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v31 = v18;
    v32 = v20;
    v22._countAndFlagsBits = 8236;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    v23 = v1[2];
    v24 = (void *)v1[3];
    swift_bridgeObjectRetain(v24);
    v25._countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
  }
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v28 = *v1;
  v27 = (void *)v1[1];
  swift_bridgeObjectRetain(v27);
  v29._countAndFlagsBits = v28;
  v29._object = v27;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t getEnumTagSinglePayload for ConditionalFrameModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[40])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConditionalFrameModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier()
{
  return &type metadata for ConditionalFrameModifier;
}

uint64_t sub_100088730(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011832C, 1);
}

uint64_t sub_100088740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  _OWORD v19[3];

  v5 = sub_100007D50(&qword_10015C940);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2 + 1;
  if (*(_BYTE *)v2)
    v10 = v2 + 4;
  else
    v10 = v2 + 3;
  if (*(_BYTE *)v2)
    v9 = v2 + 2;
  v11 = *v9;
  v12 = *v10;
  v13 = static Alignment.center.getter(v6);
  _FrameLayout.init(width:height:alignment:)(v19, v11, 0, v12, 0, v13, v14);
  v15 = sub_100007D50(&qword_10015C948);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, a1, v15);
  v16 = &v8[*(int *)(v5 + 36)];
  v17 = v19[1];
  *(_OWORD *)v16 = v19[0];
  *((_OWORD *)v16 + 1) = v17;
  *((_OWORD *)v16 + 2) = v19[2];
  return sub_100018EB4((uint64_t)v8, a2, &qword_10015C940);
}

uint64_t destroy for ConditionalFontModifier(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t _s15ShazamEventsApp23ConditionalFontModifierVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for ConditionalFontModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ConditionalFontModifier()
{
  return &type metadata for ConditionalFontModifier;
}

ValueMetadata *type metadata accessor for ConditionalFrameModifier.Size()
{
  return &type metadata for ConditionalFrameModifier.Size;
}

unint64_t sub_10008898C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C950;
  if (!qword_10015C950)
  {
    v1 = sub_100007D00(&qword_10015C940);
    sub_10000F4E0(&qword_10015C958, &qword_10015C948, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C950);
  }
  return result;
}

uint64_t sub_100088A10(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100118370, 1);
}

double sub_100088A20@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t *v15;
  double result;
  uint64_t v17;

  v5 = sub_100007D50(&qword_10015C988);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - v9;
  if (*v2)
    v11 = (uint64_t *)(v2 + 16);
  else
    v11 = (uint64_t *)(v2 + 8);
  v12 = *v11;
  KeyPath = swift_getKeyPath(&unk_10010E010);
  v14 = sub_100007D50(&qword_10015C990);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, a1, v14);
  v15 = (uint64_t *)&v7[*(int *)(v5 + 36)];
  *v15 = KeyPath;
  v15[1] = v12;
  sub_100018EB4((uint64_t)v7, (uint64_t)v10, &qword_10015C988);
  sub_100018EB4((uint64_t)v10, a2, &qword_10015C988);
  *(_QWORD *)&result = swift_retain(v12).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for ConditionalFontModifier.Font()
{
  return &type metadata for ConditionalFontModifier.Font;
}

unint64_t sub_100088B54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C998;
  if (!qword_10015C998)
  {
    v1 = sub_100007D00(&qword_10015C988);
    sub_10000F4E0(&qword_10015C9A0, &qword_10015C990, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000F4E0(&qword_100158608, &qword_100158610, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C998);
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingStateView()
{
  return &type metadata for LoadingStateView;
}

uint64_t sub_100088C04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001183B4, 1);
}

uint64_t sub_100088C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v4 = *v2;
  v5 = v2[1];
  v6 = *((unsigned __int8 *)v2 + 16);
  v7 = v2[3];
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4018000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  sub_100007D50(&qword_10015C9D0);
  swift_bridgeObjectRetain(v5);
  v8 = swift_bridgeObjectRetain(v7);
  return ProgressView<>.init<>(_:)(v4, v5, v6, v7, v8);
}

unint64_t sub_100088C9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10015C9D8;
  if (!qword_10015C9D8)
  {
    v1 = sub_100007D00(&qword_10015C9E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10015C9D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PlaybackStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100088D34 + 4 * byte_10010E0C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100088D68 + 4 * byte_10010E0C4[v4]))();
}

uint64_t sub_100088D68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100088D70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100088D78);
  return result;
}

uint64_t sub_100088D84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100088D8CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100088D90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100088D98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaybackStatus()
{
  return &type metadata for PlaybackStatus;
}

unint64_t sub_100088DB8()
{
  unint64_t result;

  result = qword_10015C9E8;
  if (!qword_10015C9E8)
  {
    result = swift_getWitnessTable(&unk_10010E12C, &type metadata for PlaybackStatus);
    atomic_store(result, (unint64_t *)&qword_10015C9E8);
  }
  return result;
}

uint64_t *sub_100088DFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_100088EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100088F00(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

_QWORD *sub_100088F88(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100089024(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *sub_100089080(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000890FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100089108);
}

uint64_t sub_100089108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100089184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100089190);
}

uint64_t sub_100089190(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AttributionViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10015CA48;
  if (!qword_10015CA48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttributionViewModel);
  return result;
}

uint64_t sub_100089240(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10010E178;
  v4[1] = &unk_10010E178;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000892B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;

  v2 = v1;
  v44 = a1;
  v3 = type metadata accessor for AttributionViewModel(0);
  v4 = __chkstk_darwin(v3);
  v49 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy(0, v4);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax(0, v7);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString.MarkdownParsingOptions(0, v11);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100007D50(&qword_100158658);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100007D50(&qword_1001597C8);
  __chkstk_darwin(v20);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v51._object = (void *)0xE000000000000000;
  v24._object = (void *)0x80000001001146E0;
  v24._countAndFlagsBits = 0xD00000000000001FLL;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v51._countAndFlagsBits = 0;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v51);

  v50 = v26;
  v27._countAndFlagsBits = 23328;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28 = *(_QWORD *)(v2 + 16);
  v29 = *(void **)(v2 + 24);
  swift_bridgeObjectRetain(v29);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 10333;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32 = type metadata accessor for URL(0);
  v33 = sub_100029E94();
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v38 = v50;
  object = v38._object;
  countAndFlagsBits = v38._countAndFlagsBits;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v19, 1, 1, v32);
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v13, enum case for AttributedString.MarkdownParsingOptions.InterpretedSyntax.full(_:), v46);
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v9, enum case for AttributedString.MarkdownParsingOptions.FailurePolicy.throwError(_:), v48);
  AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)(0, v13, v9, 0, 0);
  AttributedString.init(markdown:options:baseURL:)(countAndFlagsBits, object, v16, v19);
  v39 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v22, 0, 1, v39);
  v40 = v49;
  sub_100089A74(v2, v49);
  type metadata accessor for AttributedString(0);
  v41 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v22, 1, v39) == 1)
  {
    sub_100089698();
    sub_100089AB8(v40);
    return sub_100089AF4((uint64_t)v22);
  }
  else
  {
    sub_100089AB8(v40);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v44, v22, v39);
  }
}

uint64_t sub_100089698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v16;
  Swift::String v18;
  Swift::String v19;

  v1 = v0;
  v2 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001001146E0;
  v6._countAndFlagsBits = 0xD00000000000001FLL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v19);

  v18 = v8;
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v11 = *(_QWORD *)(v1 + 16);
  v10 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain(v10);
  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  v13 = swift_bridgeObjectRelease(v10);
  v16 = v18;
  object = v16._object;
  countAndFlagsBits = v16._countAndFlagsBits;
  AttributeContainer.init()(v13);
  return AttributedString.init(_:attributes:)(countAndFlagsBits, object, v4);
}

void sub_1000897C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  ValueWitnessTable *v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void **aBlock;
  uint64_t v24;
  Class (*v25)(uint64_t);
  ValueMetadata *v26;
  _QWORD *(*v27)();
  _QWORD *v28;
  char *v29;

  v3 = sub_100007D50(&qword_100159260);
  v4 = swift_allocObject(v3, 192, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100109440;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(v4 + 56) = &type metadata for AnalyticsString;
  *(_QWORD *)(v4 + 64) = &off_10015BAD8;
  *(_BYTE *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 96) = &type metadata for AnalyticsPageName;
  *(_QWORD *)(v4 + 104) = &off_10015BAB0;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 136) = &type metadata for AnalyticsModuleName;
  *(_QWORD *)(v4 + 144) = &off_10015BB38;
  *(_BYTE *)(v4 + 112) = 5;
  v7 = v1[2];
  v8 = v1[3];
  *(_QWORD *)(v4 + 176) = &type metadata for AnalyticsModuleAction;
  *(_QWORD *)(v4 + 184) = &off_10015BB10;
  *(_QWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 160) = v8;
  *(_BYTE *)(v4 + 168) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v10 = 0;
    v11 = 0xE000000000000000;
  }
  v26 = &type metadata for AnalyticsString;
  v27 = (_QWORD *(*)())&off_10015BAD8;
  LOBYTE(aBlock) = 1;
  v24 = v10;
  v25 = (Class (*)(uint64_t))v11;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v29 = sub_100089D00((char *)1, 5, 1, (char *)v4);
  v12 = sub_1000228D4((uint64_t)&aBlock, (uint64_t)&type metadata for AnalyticsString);
  __chkstk_darwin(v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v15->initializeWithCopy)((uint64_t)v14, v16);
  sub_10008A6F0(4, (uint64_t)v14, (uint64_t *)&v29, (uint64_t)&type metadata for AnalyticsString, (uint64_t)&off_10015BAD8);
  sub_1000228FC(&aBlock);
  v17 = v29;
  v18 = String._bridgeToObjectiveC()();
  v19 = (_QWORD *)swift_allocObject(&unk_10014CC00, 40, 7);
  v19[2] = 0xD00000000000001ELL;
  v19[3] = 0x80000001001131B0;
  v19[4] = v17;
  v27 = sub_100022948;
  v28 = v19;
  aBlock = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_100089C8C;
  v26 = (ValueMetadata *)&unk_10014CC18;
  v20 = _Block_copy(&aBlock);
  v21 = v28;
  swift_bridgeObjectRetain(v17);
  swift_release(v21);
  AnalyticsSendEventLazy(v18, v20);
  _Block_release(v20);
  swift_bridgeObjectRelease();

}

uint64_t sub_100089A30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100089A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100089A6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100089A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributionViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100089AB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributionViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100089AF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100007D50(&qword_1001597C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

