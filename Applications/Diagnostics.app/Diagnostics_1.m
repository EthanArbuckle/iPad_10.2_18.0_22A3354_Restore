void sub_1000AAE08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int v20;
  uint64_t v21;
  DARootViewController *v22;
  SEL v23;
  id v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD v40[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D770);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v39 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_42;
        v18 = v8[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_42;
          v18 = v8[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_42;
            v18 = v8[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_42:
                swift_release(v3);
                v2 = v39;
                v38 = 1 << *(_BYTE *)(v3 + 32);
                if (v38 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v38;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_48;
                  if (v13 >= v11)
                    goto LABEL_42;
                  v18 = v8[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v40, *(_QWORD *)(v6 + 40));
      if (v20)
        v21 = 0x776569766572;
      else
        v21 = 0;
      if (v20)
        v22 = (DARootViewController *)0xE600000000000000;
      else
        v22 = (DARootViewController *)0xE000000000000000;
      String.hash(into:)(v40, v21, v22);
      swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
      v30 = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(v6 + 32);
      v32 = v30 & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v12 + 8 * v33);
        }
        while (v37 == -1);
        v14 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

unint64_t sub_1000AB0E8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000AB168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t result;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(a2 + 40));
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator + 8);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1000AB22C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  unint64_t result;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, *(_QWORD *)(a2 + 40));
  v4 = objc_msgSend(*(id *)(a1 + 40), "serialNumber");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  String.hash(into:)(v10, v5, v7);
  swift_bridgeObjectRelease(v7);
  v8 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v8 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1000AB30C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000A9C50(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000AC608();
      goto LABEL_14;
    }
    sub_1000AD504(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

uint64_t sub_1000AB490(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[9];

  v45 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v7 = *(_QWORD *)(v45 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v42 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v42 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v42 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v42 - v20;
  v22 = *(_QWORD *)(*v3 + 16);
  v23 = *(_QWORD *)(*v3 + 24);
  v43 = v7;
  v44 = v3;
  if (v23 > v22 && (a3 & 1) != 0)
    goto LABEL_17;
  v24 = v22 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000A98C4(v24);
  }
  else
  {
    if (v23 > v22)
    {
      sub_1000AC410();
      goto LABEL_17;
    }
    sub_1000AD1B4(v24);
  }
  v25 = *v3;
  Hasher.init(_seed:)(v49, *(_QWORD *)(*v3 + 40));
  v26 = *(id *)a1;
  NSObject.hash(into:)(v49);

  Hasher._combine(_:)(*(unsigned __int8 *)(a1 + 8));
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  v27 = type metadata accessor for Date(0);
  v28 = sub_1000AF8CC();
  dispatch thunk of Hashable.hash(into:)(v49, v27, v28);
  v29 = Hasher._finalize()();
  v30 = -1 << *(_BYTE *)(v25 + 32);
  a2 = v29 & ~v30;
  v47 = v25 + 56;
  v48 = v25;
  if (((*(_QWORD *)(v25 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v46 = ~v30;
    v31 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_100037010(*(_QWORD *)(v48 + 48) + v31 * a2, (uint64_t)v21);
      v32 = v21[8];
      v33 = *(unsigned __int8 *)(a1 + 8);
      sub_100037010((uint64_t)v21, (uint64_t)v19);
      sub_100037010(a1, (uint64_t)v16);
      if (v32 != v33)
        break;
      v34 = *((_QWORD *)v19 + 2);
      v35 = *((_QWORD *)v16 + 2);
      sub_100036DC0((uint64_t)v16);
      sub_100036DC0((uint64_t)v19);
      sub_100037010((uint64_t)v21, (uint64_t)v13);
      sub_100037010(a1, (uint64_t)v10);
      if (v34 != v35)
        goto LABEL_11;
      v36 = static Date.== infix(_:_:)(&v13[*(int *)(v45 + 28)], &v10[*(int *)(v45 + 28)]);
      sub_100036DC0((uint64_t)v10);
      sub_100036DC0((uint64_t)v13);
      sub_100036DC0((uint64_t)v21);
      if ((v36 & 1) != 0)
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v45);
        __break(1u);
        goto LABEL_17;
      }
LABEL_12:
      a2 = (a2 + 1) & v46;
      if (((*(_QWORD *)(v47 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_17;
    }
    sub_100036DC0((uint64_t)v16);
    sub_100036DC0((uint64_t)v19);
    sub_100037010((uint64_t)v21, (uint64_t)v13);
    sub_100037010(a1, (uint64_t)v10);
LABEL_11:
    sub_100036DC0((uint64_t)v10);
    sub_100036DC0((uint64_t)v13);
    sub_100036DC0((uint64_t)v21);
    goto LABEL_12;
  }
LABEL_17:
  v37 = *v44;
  *(_QWORD *)(*v44 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_100036D7C(a1, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v43 + 72) * a2);
  v39 = *(_QWORD *)(v37 + 16);
  v40 = __OFADD__(v39, 1);
  v41 = v39 + 1;
  if (v40)
    __break(1u);
  else
    *(_QWORD *)(v37 + 16) = v41;
  return result;
}

void sub_1000AB7D4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000A9EEC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000AC960(&qword_10016D720);
      goto LABEL_22;
    }
    sub_1000AD77C(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v32, *(_QWORD *)(*v3 + 40));
  v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator + 8);
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(v32, v12, v13);
  swift_bridgeObjectRelease(v13);
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v14 & ~v15;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v17 = type metadata accessor for ImageLoader(0);
    v18 = *(_QWORD *)(v10 + 48);
    v19 = (_QWORD *)(*(_QWORD *)(v18 + 8 * a2) + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    v20 = v19[1];
    v21 = *v11;
    v22 = v11[1];
    v23 = *v19 == v21 && v20 == v22;
    if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, v21, v22, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v17);
      __break(1u);
    }
    else
    {
      v24 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v24;
        if (((*(_QWORD *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v25 = (_QWORD *)(*(_QWORD *)(v18 + 8 * a2) + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
        v26 = v25[1];
        v27 = *v25 == v21 && v26 == v22;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v21, v22, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v28 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v28 + 48) + 8 * a2) = a1;
  v29 = *(_QWORD *)(v28 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
    __break(1u);
  else
    *(_QWORD *)(v28 + 16) = v31;
}

void sub_1000AB9B8(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD v26[9];

  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  if (v8 > v7 && (a4 & 1) != 0)
    goto LABEL_21;
  v9 = v7 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000AA1E0(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000AC7B0();
      goto LABEL_21;
    }
    sub_1000ADA40(v9);
  }
  v10 = *v4;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v4 + 40));
  if (a2 >= 9)
    String.hash(into:)(v26, a1, a2);
  else
    Hasher._combine(_:)(qword_10010E198[a2]);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a3 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * a3);
      v15 = *v14;
      v16 = v14[1];
      Hasher.init(_seed:)(v26, 0);
      if (v16 >= 9)
      {
        swift_bridgeObjectRetain(v16);
        String.hash(into:)(v26, v15, v16);
      }
      else
      {
        Hasher._combine(_:)(qword_10010E198[v16]);
        sub_1000582D0(v15, v16);
      }
      v17 = Hasher._finalize()();
      Hasher.init(_seed:)(v26, 0);
      if (a2 >= 9)
        String.hash(into:)(v26, a1, a2);
      else
        Hasher._combine(_:)(qword_10010E198[a2]);
      v18 = Hasher._finalize()();
      sub_100058234(v15, v16);
      if (v17 == v18)
        goto LABEL_24;
      a3 = (a3 + 1) & v13;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_21:
  v19 = *v24;
  *(_QWORD *)(*v24 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v20 = (_QWORD *)(*(_QWORD *)(v19 + 48) + 16 * a3);
  *v20 = a1;
  v20[1] = a2;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    *(_QWORD *)(v19 + 16) = v23;
    return;
  }
  __break(1u);
LABEL_24:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DeviceType);
  __break(1u);
}

void sub_1000ABBE0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v34[9];

  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_16;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000AA4DC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000AC960(&qword_10016D740);
      goto LABEL_16;
    }
    sub_1000ADD18(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v34, *(_QWORD *)(*v3 + 40));
  v11 = objc_msgSend(*(id *)(a1 + 40), "serialNumber");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v4 = v13;

  String.hash(into:)(v34, v12, v4);
  swift_bridgeObjectRelease(v4);
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v31 = type metadata accessor for CardState();
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      v17 = *(void **)(v4 + 40);
      swift_retain(v4);
      v18 = objc_msgSend(v17, "serialNumber");
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v5 = v20;

      v21 = objc_msgSend(*(id *)(a1 + 40), "serialNumber");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      if (v19 == v22 && v5 == v24)
        goto LABEL_19;
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v5, v22, v24, 0);
      swift_release(v4);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v24);
      if ((v26 & 1) != 0)
        goto LABEL_20;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_16:
  v27 = *v32;
  *(_QWORD *)(*v32 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * a2) = a1;
  v28 = *(_QWORD *)(v27 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    *(_QWORD *)(v27 + 16) = v30;
    return;
  }
  __break(1u);
LABEL_19:
  swift_release(v4);
  swift_bridgeObjectRelease_n(v5, 2);
LABEL_20:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v31);
  __break(1u);
}

void sub_1000ABE30(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000AA7FC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1000ACB00();
      goto LABEL_22;
    }
    sub_1000AE00C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_1000ABFC8(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  DARootViewController **v12;
  uint64_t v13;
  DARootViewController *v14;
  SEL v15;
  id v16;
  int v17;
  id v18;
  id v19;
  id v20;
  id v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v40;
  Swift::UInt v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD v54[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000AAAD8(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_1000ACCB0();
        goto LABEL_41;
      }
      sub_1000AE2B8(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v54, *(_QWORD *)(*v3 + 40));
    v10 = a1[2];
    Hasher._combine(_:)(v10);
    v11 = a1[2];
    if (v11)
    {
      v12 = (DARootViewController **)(a1 + 5);
      do
      {
        v13 = (uint64_t)*(v12 - 1);
        v14 = *v12;
        swift_bridgeObjectRetain(*v12);
        String.hash(into:)(v54, v13, v14);
        swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v9 + 32);
    a2 = v22 & ~v23;
    v24 = v9 + 56;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v25 = ~v23;
      v26 = *(_QWORD *)(v9 + 48);
      while (1)
      {
        v27 = *(_QWORD **)(v26 + 8 * a2);
        if (v27[2] == v10)
        {
          if (!v10 || v27 == a1)
            goto LABEL_48;
          v28 = a1[2];
          if (!v28)
            goto LABEL_45;
          v29 = v27[4];
          v30 = v27[5];
          v31 = a1[4];
          v32 = a1[5];
          v33 = v29 == v31 && v30 == v32;
          if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v31, v32, 0) & 1) != 0)
          {
            if (v10 == 1)
              goto LABEL_48;
            v34 = v28 - 2;
            if (v28 < 2)
              goto LABEL_46;
            v35 = v27[6];
            v36 = v27[7];
            v37 = a1[6];
            v38 = a1[7];
            v39 = v35 == v37 && v36 == v38;
            if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v37, v38, 0) & 1) != 0)
              break;
          }
        }
LABEL_13:
        a2 = (a2 + 1) & v25;
        if (((*(_QWORD *)(v24 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_41;
      }
      if (v10 == 2)
        goto LABEL_48;
      v40 = v27 + 9;
      v42 = a1 + 9;
      v41 = v10 - 2;
      while (v41)
      {
        if (!v34)
          goto LABEL_44;
        v43 = *(v40 - 1);
        v44 = *v40;
        v45 = *(v42 - 1);
        v46 = *v42;
        v47 = v43 == v45 && v44 == v46;
        if (!v47 && (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v45, v46, 0) & 1) == 0)
          goto LABEL_13;
        --v34;
        v42 += 2;
        v40 += 2;
        if (!--v41)
          goto LABEL_48;
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
  }
LABEL_41:
  v48 = *v53;
  *(_QWORD *)(*v53 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * a2) = a1;
  v49 = *(_QWORD *)(v48 + 16);
  v50 = __OFADD__(v49, 1);
  v51 = v49 + 1;
  if (!v50)
  {
    *(_QWORD *)(v48 + 16) = v51;
    return;
  }
LABEL_47:
  __break(1u);
LABEL_48:
  v52 = sub_100035CA4(&qword_10016C1D0);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v52);
  __break(1u);
}

void sub_1000AC238(char a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  DARootViewController *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  DARootViewController *v23;
  char v25;
  SEL v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  int v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  char v45;
  _QWORD v46[9];

  v6 = a1 & 1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  v45 = a1 & 1;
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_28;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000AAE08(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000ACE58();
      goto LABEL_28;
    }
    sub_1000AE5BC(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v46, *(_QWORD *)(*v3 + 40));
  if (v6)
    v11 = 0x776569766572;
  else
    v11 = 0;
  if (v6)
    v4 = (DARootViewController *)0xE600000000000000;
  else
    v4 = (DARootViewController *)0xE000000000000000;
  String.hash(into:)(v46, v11, v4);
  swift_bridgeObjectRelease(v4, v12, v13, v14, v15, v16, v17, v18);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v19 & ~v20;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v21 = ~v20;
    do
    {
      v22 = *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) ? 0x776569766572 : 0;
      v23 = (DARootViewController *)(*(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) ? 0xE600000000000000 : 0xE000000000000000);
      if (v22 == v11 && v23 == v4)
        goto LABEL_31;
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v11, v4, 0);
      swift_bridgeObjectRelease(v23, v26, v27, v28, v29, v30, v31, v32);
      swift_bridgeObjectRelease(v4, v33, v34, v35, v36, v37, v38, v39);
      if ((v25 & 1) != 0)
        goto LABEL_32;
      a2 = (a2 + 1) & v21;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  v40 = *v44;
  *(_QWORD *)(*v44 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v40 + 48) + a2) = v45;
  v41 = *(_QWORD *)(v40 + 16);
  v42 = __OFADD__(v41, 1);
  v43 = v41 + 1;
  if (!v42)
  {
    *(_QWORD *)(v40 + 16) = v43;
    return;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n(v4, 2);
LABEL_32:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for LaunchURL.EnhancedLoggingStateAction);
  __break(1u);
}

void sub_1000AC410()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = *(_QWORD *)(type metadata accessor for ModalPresentationCoordinator.QueueEntry(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035CA4(&qword_10016D730);
  v5 = *v0;
  v6 = static _SetStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_28:
    swift_release(v5);
    *v1 = v7;
    return;
  }
  v8 = (void *)(v6 + 56);
  v9 = v5 + 56;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 56 + 8 * v10)
    memmove(v8, (const void *)(v5 + 56), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v16)
      goto LABEL_28;
    v21 = *(_QWORD *)(v9 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_28;
      v21 = *(_QWORD *)(v9 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v16)
          goto LABEL_28;
        v21 = *(_QWORD *)(v9 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v2 + 72) * v18;
    sub_100037010(*(_QWORD *)(v5 + 48) + v19, (uint64_t)v4);
    sub_100036D7C((uint64_t)v4, *(_QWORD *)(v7 + 48) + v19);
  }
  v22 = v20 + 3;
  if (v22 >= v16)
    goto LABEL_28;
  v21 = *(_QWORD *)(v9 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_28;
    v21 = *(_QWORD *)(v9 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000AC608()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_100035CA4(&qword_10016D760);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_28;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v13)
          goto LABEL_28;
        v20 = *(_QWORD *)(v6 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v18 = v17;
  }
  v21 = v19 + 3;
  if (v21 >= v13)
    goto LABEL_28;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000AC7B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100035CA4(&qword_10016D768);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1000582D0(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000AC960(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100035CA4(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    swift_retain(v18);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000ACB00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100035CA4(&qword_10016D750);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000ACCB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100035CA4(&qword_10016D758);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000ACE58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100035CA4(&qword_10016D770);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000ACFE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_100035CA4(&qword_10016D748);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_100074074(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000AD1B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = v1;
  v4 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin();
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4(&qword_10016D730);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
LABEL_37:
    *v2 = v9;
    return;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v34 = v2;
  v35 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_26;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v19 >= v36)
      goto LABEL_35;
    v20 = *(_QWORD *)(v35 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_35;
      v20 = *(_QWORD *)(v35 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v36)
          goto LABEL_35;
        v20 = *(_QWORD *)(v35 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_26:
    v22 = *(_QWORD *)(v37 + 72);
    sub_100037010(*(_QWORD *)(v7 + 48) + v22 * v18, (uint64_t)v6);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    v23 = *(id *)v6;
    NSObject.hash(into:)(v39);

    Hasher._combine(_:)(v6[8]);
    Hasher._combine(_:)(*((_QWORD *)v6 + 2));
    v24 = type metadata accessor for Date(0);
    v25 = sub_1000AF8CC();
    dispatch thunk of Hashable.hash(into:)(v39, v24, v25);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v9 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    sub_100036D7C((uint64_t)v6, *(_QWORD *)(v9 + 48) + v16 * v22);
    ++*(_QWORD *)(v9 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_35:
    swift_release_n(v7, 2);
    v2 = v34;
    goto LABEL_37;
  }
  v20 = *(_QWORD *)(v35 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v36)
      goto LABEL_35;
    v20 = *(_QWORD *)(v35 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

void sub_1000AD504(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::Int v20;
  id v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D760);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v11)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v11)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v6 + 40);
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v22 = NSObject._rawHashValue(seed:)(v20);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v11)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000AD77C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D720);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v30 = v2;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v31)
      goto LABEL_36;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v31)
        goto LABEL_36;
      v17 = *(_QWORD *)(v8 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_36;
        v17 = *(_QWORD *)(v8 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    v20 = *(_QWORD *)(v19 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    v21 = *(_QWORD *)(v19 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator + 8);
    swift_retain(v19);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v32, v20, v21);
    swift_bridgeObjectRelease(v21);
    v22 = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v31)
      goto LABEL_36;
    v17 = *(_QWORD *)(v8 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000ADA40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D768);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_41:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v32)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_39;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_39;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    if (v21 >= 9)
    {
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(v33, v22, v21);
    }
    else
    {
      Hasher._combine(_:)(qword_10010E198[v21]);
      sub_1000582D0(v22, v21);
    }
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v22;
    v14[1] = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_39:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_1000ADD18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D740);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v32 = v2;
  v33 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v34 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v34)
      goto LABEL_36;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v34)
        goto LABEL_36;
      v16 = *(_QWORD *)(v33 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v34)
          goto LABEL_36;
        v16 = *(_QWORD *)(v33 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    Hasher.init(_seed:)(v35, *(_QWORD *)(v6 + 40));
    v19 = *(void **)(v18 + 40);
    swift_retain(v18);
    v20 = objc_msgSend(v19, "serialNumber");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    String.hash(into:)(v35, v21, v23);
    swift_bridgeObjectRelease(v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v10 + 8 * v27);
      }
      while (v31 == -1);
      v12 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v34)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v32;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v34)
      goto LABEL_36;
    v16 = *(_QWORD *)(v33 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000AE00C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D750);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000AE2B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  DARootViewController **v20;
  uint64_t v21;
  DARootViewController *v22;
  SEL v23;
  id v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  _QWORD v41[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D758);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_43:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v38 = v2;
  v39 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v40 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v15 >= v40)
      goto LABEL_41;
    v16 = *(_QWORD *)(v39 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v40)
        goto LABEL_41;
      v16 = *(_QWORD *)(v39 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v40)
          goto LABEL_41;
        v16 = *(_QWORD *)(v39 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    Hasher.init(_seed:)(v41, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(*(_QWORD *)(v18 + 16));
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      swift_bridgeObjectRetain(v18);
      v20 = (DARootViewController **)(v18 + 40);
      do
      {
        v21 = (uint64_t)*(v20 - 1);
        v22 = *v20;
        swift_bridgeObjectRetain(*v20);
        String.hash(into:)(v41, v21, v22);
        swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    else
    {
      swift_bridgeObjectRetain(v18);
    }
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v6 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v10 + 8 * (v32 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v10 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v10 + 8 * v33);
      }
      while (v37 == -1);
      v12 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v40)
  {
LABEL_41:
    swift_release_n(v3, 2);
    v2 = v38;
    goto LABEL_43;
  }
  v16 = *(_QWORD *)(v39 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v40)
      goto LABEL_41;
    v16 = *(_QWORD *)(v39 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_45:
  __break(1u);
}

void sub_1000AE5BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int v20;
  uint64_t v21;
  DARootViewController *v22;
  SEL v23;
  id v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD v39[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100035CA4(&qword_10016D770);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_44:
    *v2 = v6;
    return;
  }
  v38 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v17 >= v11)
      goto LABEL_42;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v11)
        goto LABEL_42;
      v18 = *(_QWORD *)(v8 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v11)
          goto LABEL_42;
        v18 = *(_QWORD *)(v8 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v6 + 40));
    if (v20)
      v21 = 0x776569766572;
    else
      v21 = 0;
    if (v20)
      v22 = (DARootViewController *)0xE600000000000000;
    else
      v22 = (DARootViewController *)0xE000000000000000;
    String.hash(into:)(v39, v21, v22);
    swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v6 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v12 + 8 * v33);
      }
      while (v37 == -1);
      v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_42:
    swift_release_n(v3, 2);
    v2 = v38;
    goto LABEL_44;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v11)
      goto LABEL_42;
    v18 = *(_QWORD *)(v8 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_46:
  __break(1u);
}

void sub_1000AE868(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  Swift::Int v18;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_1000A7208(v7, v6);
  v18 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_1000AF178(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v3 = v18;
        return;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  swift_release(v8);
  __break(1u);
}

void sub_1000AEA00(uint64_t a1, const char *a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  DARootViewController **v8;
  DARootViewController **v9;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  DARootViewController *v16;
  SEL v17;
  id v18;
  int v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  DARootViewController *v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  DARootViewController *v33;
  BOOL v34;
  DARootViewController *v35;
  BOOL v36;
  _QWORD v37[9];
  DARootViewController *v38;

  v9 = v8;
  swift_bridgeObjectRelease(*v9, a2, a3, a4, a5, a6, a7, a8);
  v12 = __CocoaSet.count.getter(a1);
  v13 = swift_unknownObjectRetain(a1);
  v14 = sub_1000A73FC(v13, v12);
  v38 = (DARootViewController *)v14;
  Hasher.init(_seed:)(v37, *(_QWORD *)(v14 + 40));
  v15 = *(_QWORD *)&a2[OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator];
  v16 = *(DARootViewController **)&a2[OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator + 8];
  swift_retain(v14);
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(v37, v15, v16);
  swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
  v24 = Hasher._finalize()();
  v25 = -1 << *(_BYTE *)(v14 + 32);
  v26 = v24 & ~v25;
  if (((*(_QWORD *)(v14 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
  {
    v27 = *(_QWORD *)(v14 + 48);
    v28 = (_QWORD *)(*(_QWORD *)(v27 + 8 * v26) + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    v29 = (DARootViewController *)v28[1];
    v30 = *v28 == v15 && v29 == v16;
    if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v15, v16, 0) & 1) != 0)
    {
LABEL_14:
      swift_release(v14);
      v14 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v26);
      sub_1000AF4E0(v26);
      v35 = *(DARootViewController **)(v14 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator + 8);
      v36 = v15 == *(_QWORD *)(v14 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator) && v16 == v35;
      if (v36
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *(_QWORD *)(v14 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator), v35, 0) & 1) != 0)
      {
        *v9 = v38;
        return;
      }
      __break(1u);
    }
    else
    {
      v31 = ~v25;
      while (1)
      {
        v26 = (v26 + 1) & v31;
        if (((*(_QWORD *)(v14 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
          break;
        v32 = (_QWORD *)(*(_QWORD *)(v27 + 8 * v26) + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
        v33 = (DARootViewController *)v32[1];
        v34 = *v32 == v15 && v33 == v16;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v32, v33, v15, v16, 0) & 1) != 0)
          goto LABEL_14;
      }
    }
    swift_release(v14);
    __break(1u);
  }
  swift_release(v14);
  __break(1u);
}

void sub_1000AEBE0(uint64_t a1, uint64_t a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  DARootViewController **v8;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  void *v14;
  id v15;
  uint64_t v16;
  DARootViewController *v17;
  DARootViewController *v18;
  SEL v19;
  id v20;
  int v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  DARootViewController *v34;
  DARootViewController *v35;
  id v36;
  uint64_t v37;
  DARootViewController *v38;
  DARootViewController *v39;
  char v41;
  SEL v42;
  id v43;
  int v44;
  id v45;
  id v46;
  id v47;
  id v48;
  SEL v49;
  id v50;
  int v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  DARootViewController *v59;
  DARootViewController *v60;
  id v61;
  uint64_t v62;
  DARootViewController *v63;
  DARootViewController *v64;
  char v66;
  SEL v67;
  id v68;
  int v69;
  id v70;
  id v71;
  id v72;
  id v73;
  SEL v74;
  id v75;
  int v76;
  id v77;
  id v78;
  id v79;
  id v80;
  Swift::Int *v81;
  _QWORD v82[9];
  Swift::Int v83;

  swift_bridgeObjectRelease(*v8, (SEL)a2, a3, a4, a5, a6, a7, a8);
  v11 = __CocoaSet.count.getter(a1);
  v12 = swift_unknownObjectRetain(a1);
  v13 = sub_1000A7624(v12, v11);
  v83 = v13;
  Hasher.init(_seed:)(v82, *(_QWORD *)(v13 + 40));
  v14 = *(void **)(a2 + 40);
  swift_retain(v13);
  v15 = objc_msgSend(v14, "serialNumber");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  String.hash(into:)(v82, v16, v18);
  swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
  v26 = Hasher._finalize()();
  v27 = -1 << *(_BYTE *)(v13 + 32);
  v28 = v26 & ~v27;
  if (((*(_QWORD *)(v13 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
  {
    v29 = ~v27;
    while (1)
    {
      v30 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v28);
      v31 = *(void **)(v30 + 40);
      swift_retain(v30);
      v32 = objc_msgSend(v31, "serialNumber");
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      v36 = objc_msgSend(v14, "serialNumber");
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      if (v33 == v37 && v35 == v39)
        goto LABEL_10;
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v39, 0);
      swift_release(v30);
      swift_bridgeObjectRelease(v35, v42, v43, v44, v45, v46, v47, v48);
      swift_bridgeObjectRelease(v39, v49, v50, v51, v52, v53, v54, v55);
      if ((v41 & 1) != 0)
        break;
      v28 = (v28 + 1) & v29;
      if (((*(_QWORD *)(v13 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      {
        swift_release(v13);
        __break(1u);
LABEL_10:
        swift_release(v13);
        swift_release(v30);
        swift_bridgeObjectRelease_n(v35, 2);
        goto LABEL_12;
      }
    }
    swift_release(v13);
LABEL_12:
    v56 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v28);
    sub_1000AF6C8(v28);
    v57 = objc_msgSend(v14, "serialNumber");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v61 = objc_msgSend(*(id *)(v56 + 40), "serialNumber");
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v64 = v63;

    if (v58 != v62 || v60 != v64)
    {
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, v62, v64, 0);
      swift_bridgeObjectRelease(v60, v67, v68, v69, v70, v71, v72, v73);
      swift_bridgeObjectRelease(v64, v74, v75, v76, v77, v78, v79, v80);
      if ((v66 & 1) != 0)
      {
LABEL_19:
        *v81 = v83;
        return;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n(v60, 2);
    goto LABEL_19;
  }
  swift_release(v13);
  __break(1u);
}

void sub_1000AEEB8(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[9];

  v33 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v3 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *v1 + 56;
  v8 = -1 << *(_BYTE *)(*v1 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    v31 = v1;
    v10 = ~v8;
    swift_retain(v6);
    v11 = _HashTable.previousHole(before:)(a1, v7, v10);
    if ((*(_QWORD *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v32 = (v11 + 1) & v10;
      v12 = *(_QWORD *)(v3 + 72);
      v13 = v10;
      do
      {
        v14 = v7;
        v15 = v12;
        v16 = v12 * v9;
        v17 = v13;
        sub_100037010(*(_QWORD *)(v6 + 48) + v12 * v9, (uint64_t)v5);
        Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
        v18 = *(id *)v5;
        NSObject.hash(into:)(v34);

        Hasher._combine(_:)(v5[8]);
        Hasher._combine(_:)(*((_QWORD *)v5 + 2));
        v19 = type metadata accessor for Date(0);
        v20 = sub_1000AF8CC();
        dispatch thunk of Hashable.hash(into:)(v34, v19, v20);
        v21 = Hasher._finalize()();
        sub_100036DC0((uint64_t)v5);
        v13 = v17;
        v22 = v21 & v17;
        if (a1 >= (uint64_t)v32)
        {
          if (v22 < v32)
          {
            v7 = v14;
            v12 = v15;
            goto LABEL_5;
          }
          v7 = v14;
          v12 = v15;
          if (a1 < v22)
            goto LABEL_5;
        }
        else
        {
          v7 = v14;
          v12 = v15;
          if (v22 < v32 && a1 < v22)
            goto LABEL_5;
        }
        v23 = *(_QWORD *)(v6 + 48);
        v24 = v12 * a1;
        v25 = v23 + v12 * a1;
        v26 = v23 + v16;
        if (v12 * a1 < v16 || v25 >= v26 + v12)
        {
          swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v33);
          goto LABEL_17;
        }
        a1 = v9;
        if (v24 != v16)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_17:
          v13 = v17;
          a1 = v9;
        }
LABEL_5:
        v9 = (v9 + 1) & v13;
      }
      while (((*(_QWORD *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release(v6);
    v1 = v31;
  }
  else
  {
    *(_QWORD *)(v7 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v27 = *v1;
  v28 = *(_QWORD *)(*v1 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v27 + 16) = v30;
    ++*(_DWORD *)(v27 + 36);
  }
}

unint64_t sub_1000AF178(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1000AF318(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _BYTE v24[40];

  v2 = v1;
  v3 = a1;
  v4 = *v1;
  v5 = *v1 + 56;
  v6 = -1 << *(_BYTE *)(*v1 + 32);
  v7 = (a1 + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    v8 = ~v6;
    swift_retain(*v1);
    v9 = _HashTable.previousHole(before:)(v3, v5, v8);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (v9 + 1) & v8;
      do
      {
        sub_100074074(*(_QWORD *)(v4 + 48) + 40 * v7, (uint64_t)v24);
        v13 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        sub_100036FDC((uint64_t)v24);
        v14 = v13 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v14 >= v10 && v3 >= v14)
          {
LABEL_16:
            v17 = *(_QWORD *)(v4 + 48);
            v18 = v17 + 40 * v3;
            v19 = (__int128 *)(v17 + 40 * v7);
            if (v3 != v7 || (v3 = v7, v18 >= (unint64_t)v19 + 40))
            {
              v11 = *v19;
              v12 = v19[1];
              *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
              *(_OWORD *)v18 = v11;
              *(_OWORD *)(v18 + 16) = v12;
              v3 = v7;
            }
          }
        }
        else if (v14 >= v10 || v3 >= v14)
        {
          goto LABEL_16;
        }
        v7 = (v7 + 1) & v8;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(_QWORD *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    swift_release(v4);
  }
  else
  {
    *(_QWORD *)(v5 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v20 = *v2;
  v21 = *(_QWORD *)(*v2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v20 + 16) = v23;
    ++*(_DWORD *)(v20 + 36);
  }
}

unint64_t sub_1000AF4E0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
        v12 = *(_QWORD *)(v10 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator + 8);
        swift_retain(v10);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        swift_bridgeObjectRelease(v12);
        v13 = Hasher._finalize()();
        swift_release(v10);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_QWORD *)(v15 + 8 * v2);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000AF6C8(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v24, *(_QWORD *)(v3 + 40));
        v11 = *(void **)(v10 + 40);
        swift_retain(v10);
        v12 = objc_msgSend(v11, "serialNumber");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        String.hash(into:)(v24, v13, v15);
        swift_bridgeObjectRelease(v15);
        v16 = Hasher._finalize()();
        swift_release(v10);
        v17 = v16 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v17 < v9)
            goto LABEL_5;
        }
        else if (v17 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(v3 + 48);
          v19 = (_QWORD *)(v18 + 8 * v2);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v19 >= v20 + 1))
          {
            *v19 = *v20;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000AF8CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016D728;
  if (!qword_10016D728)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_10016D728);
  }
  return result;
}

uint64_t sub_1000AF914(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23;
  NSObject *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t i;
  uint64_t v69;
  void *v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  dispatch_group_t v100;
  NSObject *v101;
  _QWORD v102[3];
  char v103[8];
  uint64_t v104;
  uint64_t v105;
  char v106;

  v8 = sub_100035CA4(&qword_10016D710);
  v97 = *(_QWORD *)(v8 - 8);
  v98 = v8;
  __chkstk_darwin(v8);
  v96 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DispatchTime(0);
  v88 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v86 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v87 = (char *)&v77 - v17;
  v100 = dispatch_group_create();
  v18 = swift_allocObject(&unk_10013AAB0, 24, 7);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = sub_1000A68BC(0, v19);
  v91 = v18;
  *(_QWORD *)(v18 + 16) = v20;
  v85 = (uint64_t *)(v18 + 16);
  if (v19)
  {
    v78 = v13;
    v80 = v11;
    v81 = v14;
    v82 = v10;
    v83 = a3;
    v84 = a4;
    v93 = a2 + 24;
    v94 = a2 + 16;
    v95 = a2;
    v21 = *(void **)(a2 + 40);
    swift_bridgeObjectRetain(a1);
    v22 = 0;
    v99 = v19 - 1;
    v79 = a1;
    v23 = (unint64_t *)(a1 + 40);
    v90 = 0x8000000100118130;
    v89 = xmmword_10010BE30;
    v24 = v100;
    v25 = v91;
    v92 = v21;
    while (1)
    {
      v27 = *(v23 - 1);
      v26 = *v23;
      swift_bridgeObjectRetain(*v23);
      dispatch_group_enter(v24);
      v28 = (_QWORD *)swift_allocObject(&unk_10013AB28, 40, 7);
      v28[2] = v25;
      v28[3] = v22;
      v28[4] = v24;
      swift_retain_n(v25, 2);
      v101 = v24;
      objc_msgSend(v21, "lock");
      v29 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0)
        v29 = v27 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
        v30 = type metadata accessor for ImageLoader(0);
        v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
        v105 = 0;
        v106 = 2;
        swift_bridgeObjectRetain(v26);
        Published.init(initialValue:)(&v105, &type metadata for AsyncImagePhase);
        v32 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
        *(_QWORD *)(v31 + v32) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
        *(_BYTE *)(v31 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
        v33 = (_QWORD *)(v31 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
        *v33 = v27;
        v33[1] = v26;
        swift_beginAccess(v31 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v105, 33, 0);
        v34 = sub_100035CA4(&qword_10016C120);
        v35 = v22;
        v36 = v96;
        Published.projectedValue.getter(v34);
        swift_endAccess(&v105);
        v37 = (_QWORD *)swift_allocObject(&unk_10013AB50, 48, 7);
        v37[2] = sub_1000B1FE0;
        v37[3] = v28;
        v38 = v25;
        v39 = v23;
        v40 = v95;
        v37[4] = v95;
        v37[5] = v31;
        v41 = sub_1000A71BC();
        swift_retain(v28);
        swift_retain(v40);
        swift_retain(v31);
        v42 = v98;
        v43 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v37, v98, v41);
        v44 = swift_release(v37);
        v45 = v42;
        v23 = v39;
        v25 = v38;
        (*(void (**)(char *, uint64_t, __n128))(v97 + 8))(v36, v45, v44);
        v46 = v94;
        swift_beginAccess(v94, &v105, 33, 0);
        v47 = v46;
        v21 = v92;
        v22 = v35;
        v24 = v100;
        AnyCancellable.store(in:)(v47);
        swift_endAccess(&v105);
        swift_release(v43);
        swift_beginAccess(v93, &v105, 33, 0);
        swift_retain(v31);
        sub_1000A89F8(&v104, v31);
        swift_endAccess(&v105);
        swift_release(v104);
        sub_100065014();
        objc_msgSend(v21, "unlock", swift_release(v31).n128_f64[0]);
        swift_bridgeObjectRelease(v26);

      }
      else
      {
        v48 = sub_10006630C();
        v49 = swift_allocError(&type metadata for String, v48, 0, 0);
        *v50 = 0xD000000000000032;
        v50[1] = v90;
        v51 = swift_errorRetain(v49);
        v52 = static os_log_type_t.error.getter(v51);
        v53 = sub_100035CA4((uint64_t *)&unk_10016BE40);
        v54 = swift_allocObject(v53, 72, 7);
        *(_OWORD *)(v54 + 16) = v89;
        swift_getErrorValue(v49, v103, v102);
        v55 = Error.localizedDescription.getter(v102[1], v102[2]);
        v57 = v56;
        *(_QWORD *)(v54 + 56) = &type metadata for String;
        *(_QWORD *)(v54 + 64) = sub_100047048();
        *(_QWORD *)(v54 + 32) = v55;
        *(_QWORD *)(v54 + 40) = v57;
        v24 = v100;
        v58 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
        v59 = (void *)static OS_os_log.default.getter(v58);
        os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v59, "Icon loading error occurred: %@", 31, 2, v54);
        v60 = v54;
        v25 = v91;
        swift_bridgeObjectRelease(v60);

        swift_errorRelease(v49);
        v61 = v101;
        dispatch_group_leave(v101);
        swift_errorRelease(v49);
        objc_msgSend(v21, "unlock");
        swift_bridgeObjectRelease(v26);

      }
      swift_release(v25);
      swift_release(v28);
      if (v99 == v22)
        break;
      v23 += 2;
      ++v22;
    }
    swift_bridgeObjectRelease(v79);
    a3 = v83;
    v10 = v82;
    v14 = v81;
    v11 = v80;
    v13 = v78;
  }
  v62 = v86;
  static DispatchTime.now()();
  *v13 = 10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  v63 = v87;
  + infix(_:_:)(v62, v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  v64 = *(void (**)(char *, uint64_t))(v88 + 8);
  v64(v62, v14);
  OS_dispatch_group.wait(timeout:)(v63);
  v64(v63, v14);
  v65 = v85;
  swift_beginAccess(v85, &v105, 0, 0);
  v66 = *v65;
  v104 = (uint64_t)_swiftEmptyArrayStorage;
  v67 = *(_QWORD *)(v66 + 16);
  if (v67)
  {
    swift_bridgeObjectRetain_n(v66, 2);
    for (i = 0; i != v67; ++i)
    {
      v70 = *(void **)(v66 + 8 * i + 32);
      if (v70)
      {
        v71 = v70;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        v73 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v72 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v73 >= v72 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1);
        v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
        specialized Array._endMutation()(v69);
      }
    }
    swift_bridgeObjectRelease(v66);
    v74 = (_QWORD *)v104;
  }
  else
  {
    swift_bridgeObjectRetain(v66);
    v74 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v66);
  v75 = *a3;
  *a3 = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  OS_dispatch_semaphore.signal()();

  swift_release(v91);
  return swift_bridgeObjectRelease(v74);
}

double sub_1000B00DC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  double v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v50 = a8;
  v51 = a6;
  v52 = a1;
  v49 = a13;
  v18 = sub_100035CA4(&qword_10016D710);
  v46 = *(_QWORD *)(v18 - 8);
  v47 = v18;
  __chkstk_darwin(v18);
  v45 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject(&unk_10013ABC8, 96, 7);
  v43 = a4;
  *(_DWORD *)(v20 + 16) = a4;
  v21 = v50;
  v22 = v51;
  *(_QWORD *)(v20 + 24) = a5;
  *(_QWORD *)(v20 + 32) = v22;
  v44 = a7;
  *(_QWORD *)(v20 + 40) = a7;
  *(_QWORD *)(v20 + 48) = v21;
  v41 = a9;
  v42 = a12;
  *(_QWORD *)(v20 + 56) = a9;
  *(_QWORD *)(v20 + 64) = a10;
  *(_QWORD *)(v20 + 72) = a11;
  *(_QWORD *)(v20 + 80) = a12;
  v23 = v49;
  *(_QWORD *)(v20 + 88) = v49;
  v48 = a3;
  v24 = *(void **)(a3 + 40);
  swift_bridgeObjectRetain(a10);
  swift_bridgeObjectRetain(a11);
  swift_retain(v23);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  v53 = v24;
  v25 = v52;
  objc_msgSend(v24, "lock");
  v26 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v26 = v25 & 0xFFFFFFFFFFFFLL;
  if (v26)
  {
    v27 = type metadata accessor for ImageLoader(0);
    v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v55 = 0;
    v56 = 2;
    swift_bridgeObjectRetain(a2);
    Published.init(initialValue:)(&v55, &type metadata for AsyncImagePhase);
    v29 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
    *(_QWORD *)(v28 + v29) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
    *(_BYTE *)(v28 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
    v30 = (_QWORD *)(v28 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    *v30 = v25;
    v30[1] = a2;
    swift_beginAccess(v28 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v55, 33, 0);
    v31 = sub_100035CA4(&qword_10016C120);
    v32 = v45;
    Published.projectedValue.getter(v31);
    swift_endAccess(&v55);
    v33 = (_QWORD *)swift_allocObject(&unk_10013ABF0, 48, 7);
    v33[2] = sub_1000B1F60;
    v33[3] = v20;
    v34 = v48;
    v33[4] = v48;
    v33[5] = v28;
    v35 = sub_1000A71BC();
    swift_retain(v20);
    swift_retain(v34);
    swift_retain(v28);
    v36 = v47;
    v37 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v33, v47, v35);
    v38 = swift_release(v33);
    (*(void (**)(char *, uint64_t, __n128))(v46 + 8))(v32, v36, v38);
    swift_beginAccess(v34 + 16, &v55, 33, 0);
    AnyCancellable.store(in:)(v34 + 16);
    swift_endAccess(&v55);
    swift_release(v37);
    swift_beginAccess(v34 + 24, &v55, 33, 0);
    swift_retain(v28);
    sub_1000A89F8(&v54, v28);
    swift_endAccess(&v55);
    swift_release(v54);
    sub_100065014();
    *(_QWORD *)&v39 = swift_release(v28).n128_u64[0];
    objc_msgSend(v53, "unlock", v39);
  }
  else
  {
    sub_10004D360(0, v43, a5, v22, v44, v21, v41, a10, a11, v42, v23);
    objc_msgSend(v53, "unlock");
  }
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

double sub_1000B048C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  char v52;

  v8 = sub_100035CA4(&qword_10016D710);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_10013AB78, 24, 7);
  *(_QWORD *)(v12 + 16) = a4;
  v13 = *(void **)(a3 + 40);
  v14 = a4;
  objc_msgSend(v13, "lock");
  v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v15 = a1 & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    v16 = type metadata accessor for ImageLoader(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v47 = v9;
    v51 = 0;
    v52 = 2;
    swift_bridgeObjectRetain(a2);
    Published.init(initialValue:)(&v51, &type metadata for AsyncImagePhase);
    v18 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
    *(_QWORD *)(v17 + v18) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
    *(_BYTE *)(v17 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
    v19 = (_QWORD *)(v17 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    *v19 = a1;
    v19[1] = a2;
    swift_beginAccess(v17 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v51, 33, 0);
    v20 = sub_100035CA4(&qword_10016C120);
    Published.projectedValue.getter(v20);
    swift_endAccess(&v51);
    v21 = (_QWORD *)swift_allocObject(&unk_10013ABA0, 48, 7);
    v21[2] = sub_1000B1F08;
    v21[3] = v12;
    v21[4] = a3;
    v21[5] = v17;
    v22 = sub_1000A71BC();
    swift_retain(v12);
    swift_retain(a3);
    swift_retain(v17);
    v23 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v21, v8, v22);
    v24 = swift_release(v21);
    (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v11, v8, v24);
    swift_beginAccess(a3 + 16, &v51, 33, 0);
    AnyCancellable.store(in:)(a3 + 16);
    swift_endAccess(&v51);
    swift_release(v23);
    swift_beginAccess(a3 + 24, &v51, 33, 0);
    swift_retain(v17);
    sub_1000A89F8(&v50, v17);
    swift_endAccess(&v51);
    swift_release(v50);
    sub_100065014();
    *(_QWORD *)&v25 = swift_release(v17).n128_u64[0];
  }
  else
  {
    v26 = sub_10006630C();
    v27 = swift_allocError(&type metadata for String, v26, 0, 0);
    *v28 = 0xD000000000000032;
    v28[1] = 0x8000000100118130;
    v29 = swift_errorRetain(v27);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v32 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v32 + 16) = xmmword_10010BE30;
    swift_getErrorValue(v27, v49, v48);
    v33 = Error.localizedDescription.getter(v48[1], v48[2]);
    v35 = v34;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = sub_100047048();
    *(_QWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 40) = v35;
    v36 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
    v37 = (void *)static OS_os_log.default.getter(v36);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v37, "Icon loading error occurred: %@", 31, 2, v32);
    swift_bridgeObjectRelease((DARootViewController *)v32, v38, v39, v40, v41, v42, v43, v44);

    swift_errorRelease(v27);
    swift_errorRelease(v27);
  }
  objc_msgSend(v13, "unlock", v25);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

double sub_1000B0854(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  double v26;
  double result;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v10 = sub_100035CA4(&qword_10016D710);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_10013A9C0, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = *(void **)(a3 + 40);
  swift_retain(a5);
  objc_msgSend(v15, "lock");
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v17 = type metadata accessor for ImageLoader(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v29 = v15;
    v31 = 0;
    v32 = 2;
    swift_bridgeObjectRetain(a2);
    Published.init(initialValue:)(&v31, &type metadata for AsyncImagePhase);
    v19 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
    *(_QWORD *)(v18 + v19) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
    *(_BYTE *)(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
    v20 = (_QWORD *)(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    *v20 = a1;
    v20[1] = a2;
    swift_beginAccess(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v31, 33, 0);
    v21 = sub_100035CA4(&qword_10016C120);
    Published.projectedValue.getter(v21);
    swift_endAccess(&v31);
    v22 = (_QWORD *)swift_allocObject(&unk_10013A9E8, 48, 7);
    v22[2] = sub_1000B0ED8;
    v22[3] = v14;
    v22[4] = a3;
    v22[5] = v18;
    v23 = sub_1000A71BC();
    swift_retain(v14);
    swift_retain(a3);
    swift_retain(v18);
    v24 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v22, v10, v23);
    v25 = swift_release(v22);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v25);
    swift_beginAccess(a3 + 16, &v31, 33, 0);
    AnyCancellable.store(in:)(a3 + 16);
    swift_endAccess(&v31);
    swift_release(v24);
    swift_beginAccess(a3 + 24, &v31, 33, 0);
    swift_retain(v18);
    sub_1000A89F8(&v30, v18);
    swift_endAccess(&v31);
    swift_release(v30);
    sub_100065014();
    *(_QWORD *)&v26 = swift_release(v18).n128_u64[0];
    objc_msgSend(v29, "unlock", v26);
  }
  else
  {
    a4(0, 1);
    objc_msgSend(v15, "unlock");
  }
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

double sub_1000B0B4C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, void (*a6)(_QWORD, uint64_t), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  double v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v14 = sub_100035CA4(&qword_10016D710);
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_10013A970, 48, 7);
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  v17[5] = a7;
  v18 = *(void **)(a3 + 40);
  v19 = a4;
  v20 = a5;
  swift_retain(a7);
  v37 = v18;
  objc_msgSend(v18, "lock");
  v21 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v21 = a1 & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    v22 = type metadata accessor for ImageLoader(0);
    v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v39 = 0;
    v40 = 2;
    swift_bridgeObjectRetain(a2);
    Published.init(initialValue:)(&v39, &type metadata for AsyncImagePhase);
    v24 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
    *(_QWORD *)(v23 + v24) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
    *(_BYTE *)(v23 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
    v25 = (_QWORD *)(v23 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    *v25 = a1;
    v25[1] = a2;
    swift_beginAccess(v23 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v39, 33, 0);
    v26 = sub_100035CA4(&qword_10016C120);
    Published.projectedValue.getter(v26);
    swift_endAccess(&v39);
    v27 = (_QWORD *)swift_allocObject(&unk_10013A998, 48, 7);
    v27[2] = sub_1000B0EA4;
    v27[3] = v17;
    v27[4] = a3;
    v27[5] = v23;
    v28 = sub_1000A71BC();
    swift_retain(v17);
    swift_retain(a3);
    swift_retain(v23);
    v29 = v36;
    v30 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v27, v36, v28);
    v31 = swift_release(v27);
    (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v16, v29, v31);
    swift_beginAccess(a3 + 16, &v39, 33, 0);
    AnyCancellable.store(in:)(a3 + 16);
    swift_endAccess(&v39);
    swift_release(v30);
    swift_beginAccess(a3 + 24, &v39, 33, 0);
    swift_retain(v23);
    sub_1000A89F8(&v38, v23);
    swift_endAccess(&v39);
    swift_release(v38);
    sub_100065014();
    *(_QWORD *)&v32 = swift_release(v23).n128_u64[0];
    objc_msgSend(v37, "unlock", v32);
  }
  else
  {
    sub_100083E48(0, (uint64_t)v19, v20, a6, a7);
    objc_msgSend(v37, "unlock");
  }
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_1000B0E70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B0EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100083948(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void (**)(_QWORD, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000B0EB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10008395C(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

double sub_1000B0EE4(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  char v52;

  v10 = sub_100035CA4(&qword_10016D710);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_10013AA60, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = *(void **)(a3 + 40);
  swift_retain(a5);
  objc_msgSend(v15, "lock");
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v17 = type metadata accessor for ImageLoader(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v47 = v11;
    v51 = 0;
    v52 = 2;
    swift_bridgeObjectRetain(a2);
    Published.init(initialValue:)(&v51, &type metadata for AsyncImagePhase);
    v19 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
    *(_QWORD *)(v18 + v19) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
    *(_BYTE *)(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
    v20 = (_QWORD *)(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    *v20 = a1;
    v20[1] = a2;
    swift_beginAccess(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v51, 33, 0);
    v21 = sub_100035CA4(&qword_10016C120);
    Published.projectedValue.getter(v21);
    swift_endAccess(&v51);
    v22 = (_QWORD *)swift_allocObject(&unk_10013AA88, 48, 7);
    v22[2] = sub_1000B16B4;
    v22[3] = v14;
    v22[4] = a3;
    v22[5] = v18;
    v23 = sub_1000A71BC();
    swift_retain(v14);
    swift_retain(a3);
    swift_retain(v18);
    v24 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v22, v10, v23);
    v25 = swift_release(v22);
    (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v13, v10, v25);
    swift_beginAccess(a3 + 16, &v51, 33, 0);
    AnyCancellable.store(in:)(a3 + 16);
    swift_endAccess(&v51);
    swift_release(v24);
    swift_beginAccess(a3 + 24, &v51, 33, 0);
    swift_retain(v18);
    sub_1000A89F8(&v50, v18);
    swift_endAccess(&v51);
    swift_release(v50);
    sub_100065014();
    *(_QWORD *)&v26 = swift_release(v18).n128_u64[0];
  }
  else
  {
    v27 = sub_10006630C();
    v28 = swift_allocError(&type metadata for String, v27, 0, 0);
    *v29 = 0xD000000000000032;
    v29[1] = 0x8000000100118130;
    v30 = swift_errorRetain(v28);
    if (qword_10016A678 != -1)
      v30 = swift_once(&qword_10016A678, sub_10008BF34);
    v31 = qword_100172378;
    v32 = static os_log_type_t.error.getter(v30);
    v33 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_10010BE30;
    swift_getErrorValue(v28, v49, v48);
    v35 = Error.localizedDescription.getter(v48[1], v48[2]);
    v37 = v36;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_100047048();
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v37;
    os_log(_:dso:log:type:_:)("Instructional prompt icon loading error: %@", 43, 2, &_mh_execute_header, v31, v32, v34);
    swift_bridgeObjectRelease((DARootViewController *)v34, v38, v39, v40, v41, v42, v43, v44);
    swift_errorRelease(v28);
    a4(0);
    swift_errorRelease(v28);
  }
  objc_msgSend(v15, "unlock", v26);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

double sub_1000B12CC(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  char v52;

  v10 = sub_100035CA4(&qword_10016D710);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_10013AA10, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = *(void **)(a3 + 40);
  swift_retain(a5);
  objc_msgSend(v15, "lock");
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v17 = type metadata accessor for ImageLoader(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v47 = v11;
    v51 = 0;
    v52 = 2;
    swift_bridgeObjectRetain(a2);
    Published.init(initialValue:)(&v51, &type metadata for AsyncImagePhase);
    v19 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
    *(_QWORD *)(v18 + v19) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
    *(_BYTE *)(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
    v20 = (_QWORD *)(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
    *v20 = a1;
    v20[1] = a2;
    swift_beginAccess(v18 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v51, 33, 0);
    v21 = sub_100035CA4(&qword_10016C120);
    Published.projectedValue.getter(v21);
    swift_endAccess(&v51);
    v22 = (_QWORD *)swift_allocObject(&unk_10013AA38, 48, 7);
    v22[2] = sub_1000B16B4;
    v22[3] = v14;
    v22[4] = a3;
    v22[5] = v18;
    v23 = sub_1000A71BC();
    swift_retain(v14);
    swift_retain(a3);
    swift_retain(v18);
    v24 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v22, v10, v23);
    v25 = swift_release(v22);
    (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v13, v10, v25);
    swift_beginAccess(a3 + 16, &v51, 33, 0);
    AnyCancellable.store(in:)(a3 + 16);
    swift_endAccess(&v51);
    swift_release(v24);
    swift_beginAccess(a3 + 24, &v51, 33, 0);
    swift_retain(v18);
    sub_1000A89F8(&v50, v18);
    swift_endAccess(&v51);
    swift_release(v50);
    sub_100065014();
    *(_QWORD *)&v26 = swift_release(v18).n128_u64[0];
  }
  else
  {
    v27 = sub_10006630C();
    v28 = swift_allocError(&type metadata for String, v27, 0, 0);
    *v29 = 0xD000000000000032;
    v29[1] = 0x8000000100118130;
    v30 = swift_errorRetain(v28);
    if (qword_10016A678 != -1)
      v30 = swift_once(&qword_10016A678, sub_10008BF34);
    v31 = qword_100172378;
    v32 = static os_log_type_t.error.getter(v30);
    v33 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_10010BE30;
    swift_getErrorValue(v28, v49, v48);
    v35 = Error.localizedDescription.getter(v48[1], v48[2]);
    v37 = v36;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_100047048();
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v37;
    os_log(_:dso:log:type:_:)("Instructional prompt icon loading error: %@", 43, 2, &_mh_execute_header, v31, v32, v34);
    swift_bridgeObjectRelease((DARootViewController *)v34, v38, v39, v40, v41, v42, v43, v44);
    swift_errorRelease(v28);
    a4(0);
    swift_errorRelease(v28);
  }
  objc_msgSend(v15, "unlock", v26);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_1000B16B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100091448(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1000B16C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  DARootViewController *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  SEL v48;
  id v49;
  int v50;
  id v51;
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  DARootViewController *v67;
  SEL v68;
  id v69;
  int v70;
  id v71;
  id v72;
  id v73;
  id v74;
  NSObject *v75;
  SEL v76;
  id v77;
  int v78;
  id v79;
  id v80;
  id v81;
  id v82;
  const char *v83;
  void *v84;
  int v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  char *v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  void *v97;
  int v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t i;
  uint64_t v104;
  void *v105;
  id v106;
  unint64_t v107;
  unint64_t v108;
  const char *v109;
  void *v110;
  int v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  DARootViewController *v116;
  SEL v117;
  id v118;
  int v119;
  id v120;
  id v121;
  id v122;
  id v123;
  uint64_t v124;
  _QWORD *v125;
  DARootViewController *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  unint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  dispatch_group_t v147;
  NSObject *v148;
  _QWORD v149[3];
  char v150[8];
  DARootViewController *v151;
  uint64_t v152;
  char v153;

  v8 = sub_100035CA4(&qword_10016D710);
  v144 = *(_QWORD *)(v8 - 8);
  v145 = v8;
  __chkstk_darwin(v8);
  v143 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DispatchTime(0);
  v135 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v133 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v134 = (char *)&v124 - v17;
  v147 = dispatch_group_create();
  v18 = swift_allocObject(&unk_10013AAB0, 24, 7);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = sub_1000A68BC(0, v19);
  v138 = v18;
  *(_QWORD *)(v18 + 16) = v20;
  v132 = (uint64_t *)(v18 + 16);
  if (v19)
  {
    v125 = v13;
    v127 = v11;
    v128 = v14;
    v129 = v10;
    v130 = a3;
    v131 = a4;
    v140 = a2 + 24;
    v141 = a2 + 16;
    v142 = a2;
    v21 = *(void **)(a2 + 40);
    swift_bridgeObjectRetain(a1);
    v22 = 0;
    v146 = v19 - 1;
    v126 = (DARootViewController *)a1;
    v23 = (_QWORD *)(a1 + 40);
    v137 = 0x8000000100118130;
    v136 = xmmword_10010BE30;
    v24 = v147;
    v25 = v138;
    v139 = v21;
    while (1)
    {
      v27 = *(v23 - 1);
      v26 = (DARootViewController *)*v23;
      swift_bridgeObjectRetain(*v23);
      dispatch_group_enter(v24);
      v28 = (_QWORD *)swift_allocObject(&unk_10013AAD8, 40, 7);
      v28[2] = v25;
      v28[3] = v22;
      v28[4] = v24;
      swift_retain_n(v25, 2);
      v148 = v24;
      objc_msgSend(v21, "lock");
      v29 = ((unint64_t)v26 >> 56) & 0xF;
      if (((unint64_t)v26 & 0x2000000000000000) == 0)
        v29 = v27 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
        v30 = type metadata accessor for ImageLoader(0);
        v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
        v152 = 0;
        v153 = 2;
        swift_bridgeObjectRetain(v26);
        Published.init(initialValue:)(&v152, &type metadata for AsyncImagePhase);
        v32 = OBJC_IVAR____TtC11Diagnostics11ImageLoader_lock;
        *(_QWORD *)(v31 + v32) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
        *(_BYTE *)(v31 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_loading) = 0;
        v33 = (_QWORD *)(v31 + OBJC_IVAR____TtC11Diagnostics11ImageLoader_assetLocator);
        *v33 = v27;
        v33[1] = v26;
        swift_beginAccess(v31 + OBJC_IVAR____TtC11Diagnostics11ImageLoader__phase, &v152, 33, 0);
        v34 = sub_100035CA4(&qword_10016C120);
        v35 = v22;
        v36 = v143;
        Published.projectedValue.getter(v34);
        swift_endAccess(&v152);
        v37 = (_QWORD *)swift_allocObject(&unk_10013AB00, 48, 7);
        v37[2] = sub_1000B1EA0;
        v37[3] = v28;
        v38 = v25;
        v39 = v23;
        v40 = v142;
        v37[4] = v142;
        v37[5] = v31;
        v41 = sub_1000A71BC();
        swift_retain(v28);
        swift_retain(v40);
        swift_retain(v31);
        v42 = v145;
        v43 = Publisher<>.sink(receiveValue:)(sub_1000B1FD4, v37, v145, v41);
        v44 = swift_release(v37);
        v45 = v42;
        v23 = v39;
        v25 = v38;
        (*(void (**)(char *, uint64_t, __n128))(v144 + 8))(v36, v45, v44);
        v46 = v141;
        swift_beginAccess(v141, &v152, 33, 0);
        v47 = v46;
        v21 = v139;
        v22 = v35;
        v24 = v147;
        AnyCancellable.store(in:)(v47);
        swift_endAccess(&v152);
        swift_release(v43);
        swift_beginAccess(v140, &v152, 33, 0);
        swift_retain(v31);
        sub_1000A89F8((uint64_t *)&v151, v31);
        swift_endAccess(&v152);
        swift_release(v151);
        sub_100065014();
        objc_msgSend(v21, "unlock", swift_release(v31).n128_f64[0]);
        swift_bridgeObjectRelease(v26, v48, v49, v50, v51, v52, v53, v54);

      }
      else
      {
        v55 = sub_10006630C();
        v56 = swift_allocError(&type metadata for String, v55, 0, 0);
        *v57 = 0xD000000000000032;
        v57[1] = v137;
        v58 = swift_errorRetain(v56);
        v59 = static os_log_type_t.error.getter(v58);
        v60 = sub_100035CA4((uint64_t *)&unk_10016BE40);
        v61 = swift_allocObject(v60, 72, 7);
        *(_OWORD *)(v61 + 16) = v136;
        swift_getErrorValue(v56, v150, v149);
        v62 = Error.localizedDescription.getter(v149[1], v149[2]);
        v64 = v63;
        *(_QWORD *)(v61 + 56) = &type metadata for String;
        *(_QWORD *)(v61 + 64) = sub_100047048();
        *(_QWORD *)(v61 + 32) = v62;
        *(_QWORD *)(v61 + 40) = v64;
        v24 = v147;
        v65 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
        v66 = (void *)static OS_os_log.default.getter(v65);
        os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v66, "Icon loading error occurred: %@", 31, 2, v61);
        v67 = (DARootViewController *)v61;
        v25 = v138;
        swift_bridgeObjectRelease(v67, v68, v69, v70, v71, v72, v73, v74);

        swift_errorRelease(v56);
        v75 = v148;
        dispatch_group_leave(v148);
        swift_errorRelease(v56);
        objc_msgSend(v21, "unlock");
        swift_bridgeObjectRelease(v26, v76, v77, v78, v79, v80, v81, v82);

      }
      swift_release(v25);
      swift_release(v28);
      if (v146 == v22)
        break;
      v23 += 2;
      ++v22;
    }
    swift_bridgeObjectRelease(v126, v83, v84, v85, v86, v87, v88, v89);
    a4 = v131;
    a3 = v130;
    v10 = v129;
    v14 = v128;
    v11 = v127;
    v13 = v125;
  }
  v90 = v133;
  static DispatchTime.now()(v20);
  *v13 = 10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  v91 = v134;
  + infix(_:_:)(v90, v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  v92 = *(void (**)(char *, uint64_t))(v135 + 8);
  v92(v90, v14);
  OS_dispatch_group.wait(timeout:)(v91);
  v92(v91, v14);
  v93 = v132;
  swift_beginAccess(v132, &v152, 0, 0);
  v94 = *v93;
  v151 = &_swiftEmptyArrayStorage;
  v95 = *(_QWORD *)(v94 + 16);
  if (v95)
  {
    swift_bridgeObjectRetain_n(v94, 2);
    for (i = 0; i != v95; ++i)
    {
      v105 = *(void **)(v94 + 8 * i + 32);
      if (v105)
      {
        v106 = v105;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v106);
        v108 = *(_QWORD *)(((unint64_t)v151 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v107 = *(_QWORD *)(((unint64_t)v151 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v108 >= v107 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v108 + 1, 1);
        v104 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v108, v106);
        specialized Array._endMutation()(v104);
      }
    }
    swift_bridgeObjectRelease((DARootViewController *)v94, v96, v97, v98, v99, v100, v101, v102);
    v116 = v151;
  }
  else
  {
    swift_bridgeObjectRetain(v94);
    v116 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease((DARootViewController *)v94, v109, v110, v111, v112, v113, v114, v115);
  sub_1000936F4(a3, a4);

  swift_release(v138);
  swift_bridgeObjectRelease(v116, v117, v118, v119, v120, v121, v122, v123);
}

uint64_t sub_1000B1E78()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B1EA0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000A69AC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(NSObject **)(v2 + 32));
}

uint64_t sub_1000B1EB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B1EE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B1F08(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100070FEC(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1000B1F14()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000B1F60(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10004A528(a1, a2, *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_1000B1FA0()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B1FE4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BYTE v5[24];
  _QWORD v6[5];

  sub_10007992C();
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceInformationView];
  v6[3] = type metadata accessor for DeviceSelectorCell();
  v6[4] = &off_10013AC08;
  v6[0] = v0;
  v2 = v1 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_delegate;
  swift_beginAccess(v2, v5, 33, 0);
  v3 = v0;
  sub_1000B2B58((uint64_t)v6, v2);
  return swift_endAccess(v5);
}

void sub_1000B2064()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackViewContainer];
  v3 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView];
  objc_msgSend(v2, "addSubview:", v3);
  v4 = objc_msgSend(v1, "contentView");
  objc_msgSend(v4, "addSubview:", v2);

  v5 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceInformationView];
  v6 = objc_msgSend(v3, "arrangedSubviews");
  v7 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v16 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease((DARootViewController *)v8, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease((DARootViewController *)v8, v9, v10, v11, v12, v13, v14, v15);
  sub_10008D7DC(v5, v16, 0);
}

void sub_1000B21D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  double v5;
  id v6;
  uint64_t v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Class isa;

  sub_100079ABC();
  v1 = (void *)objc_opt_self(NSLayoutConstraint);
  v2 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10010C200;
  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackViewContainer), "widthAnchor"));
  sub_10007AB28();
  v6 = objc_msgSend(v4, "constraintEqualToConstant:", v5 + -30.0);

  *(_QWORD *)(v3 + 32) = v6;
  specialized Array._endMutation()(v7);
  sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v3, v8, v9, v10, v11, v12, v13, v14);
  objc_msgSend(v1, "activateConstraints:", isa);

}

double sub_1000B22F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceInformationView);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_state);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_state) = v2;
  swift_retain_n(v2, 2);
  swift_release(v3);
  sub_1000375D4();
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

void sub_1000B2360(uint64_t a1)
{
  sub_1000383B0(a1);
}

uint64_t sub_1000B2388(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceInformationView);
  v4 = objc_msgSend(a1, "displayDeviceIdentifier");
  *(_BYTE *)(v3 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_deviceIdentifierVisible) = v4;
  sub_100037FA4();
  v5 = objc_msgSend(a1, "deviceIdentifier");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  return sub_100037D74(v6, v8);
}

double sub_1000B2410(double a1)
{
  id v1;
  NSString v2;
  unsigned int v3;
  double v4;
  double result;
  id v6;
  unsigned __int8 v7;
  double v8;

  sub_10003B9C0(6, 0, a1);
  sub_10003C028();
  sub_10003C27C();
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  if (v3)
    return sub_10003B9C0(0, 1, v4);
  v6 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v7 = objc_msgSend(v6, "isInBoxUpdateModeActive");
  swift_unknownObjectRelease(v6);
  result = sub_10003B9C0(v7 ^ 1u, 1, v8);
  if ((v7 & 1) == 0)
    return sub_10003BEF4();
  return result;
}

double sub_1000B2518(double a1)
{
  id v1;
  NSString v2;
  unsigned __int8 v3;
  double v4;
  id v5;

  sub_10003B9C0(3, 0, a1);
  sub_10003C028();
  sub_10003C27C();
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  if ((v3 & 1) == 0)
  {
    v5 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
    objc_msgSend(v5, "isInBoxUpdateModeActive");
    swift_unknownObjectRelease(v5);
  }
  sub_10003B9C0(4, 1, v4);
  return sub_10003BEF4();
}

double sub_1000B2608(double a1)
{
  id v1;
  NSString v2;
  unsigned __int8 v3;
  double v4;
  id v5;
  unsigned int v6;

  sub_10003B9C0(5, 0, a1);
  sub_10003C028();
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  if ((v3 & 1) != 0)
    return sub_10003B9C0(0, 1, v4);
  v5 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v6 = objc_msgSend(v5, "isInBoxUpdateModeActive");
  swift_unknownObjectRelease(v5);
  if (v6)
    return sub_10003B9C0(0, 1, v4);
  sub_10003B9C0(2, 1, v4);
  return sub_10003C150();
}

id sub_1000B270C(uint64_t a1, uint64_t a2, DARootViewController *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  NSString v10;
  SEL v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  objc_super v20;

  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceViewController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_dedDevice] = 0;
  v6 = OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceInformationView;
  v7 = type metadata accessor for DeviceInformationView();
  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v9 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v8, "init");

  if (a3)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = 0;
  }
  v20.receiver = v9;
  v20.super_class = (Class)type metadata accessor for DeviceSelectorCell();
  v18 = objc_msgSendSuper2(&v20, "initWithStyle:reuseIdentifier:", a1, v10);

  return v18;
}

id sub_1000B283C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char *v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_dedDevice] = 0;
  v3 = OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceInformationView;
  v4 = type metadata accessor for DeviceInformationView();
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  v6 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v5, "init");

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for DeviceSelectorCell();
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

void sub_1000B2910()
{
  uint64_t v0;

}

id sub_1000B294C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceSelectorCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceSelectorCell()
{
  return objc_opt_self(_TtC11Diagnostics18DeviceSelectorCell);
}

void sub_1000B29E4(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000B2A2C(a3 & 1);
}

double sub_1000B2A08(uint64_t a1, uint64_t a2)
{
  return sub_1000B2AA4(a2);
}

void sub_1000B2A2C(char a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  if ((a1 & 1) == 0)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceViewController);
    if (v2)
    {
      v3 = *(void **)(v1 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_dedDevice);
      if (v3)
      {
        v4 = v2;
        v5 = v3;
        sub_1000BFB78(v5);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

double sub_1000B2AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
  if (v2)
  {
    v4 = type metadata accessor for CardState();
    swift_allocObject(v4, 89, 7);
    v5 = swift_retain_n(v2, 2);
    v6 = sub_100050A84(v5);
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = a1;
    if (v8 != a1)
    {
      v9 = *(_QWORD *)(v6 + 80);
      if ((v9 & 0x10) == 0)
        *(_QWORD *)(v6 + 80) = v9 | 0x10;
      sub_100051044();
    }
    sub_10005139C(v7);
    swift_release(v2);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000B2B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100035CA4(&qword_10016ACF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double sub_1000B2BA0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel);
  v2 = (void *)objc_opt_self(UIFontMetrics);
  v3 = objc_msgSend(v2, "defaultMetrics");
  v4 = (void *)objc_opt_self(UIFont);
  v5 = objc_msgSend(v4, "boldSystemFontOfSize:", 14.0);
  v6 = objc_msgSend(v3, "scaledFontForFont:", v5);

  objc_msgSend(v1, "setFont:", v6);
  objc_msgSend(v1, "setNumberOfLines:", 0);
  v7 = (void *)objc_opt_self(UIColor);
  v8 = objc_msgSend(v7, "labelColor");
  objc_msgSend(v1, "setTextColor:", v8);

  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v9 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel);
  v10 = objc_msgSend(v2, "defaultMetrics");
  v11 = objc_msgSend(v4, "systemFontOfSize:", 14.0);
  v12 = objc_msgSend(v10, "scaledFontForFont:", v11);

  objc_msgSend(v9, "setFont:", v12);
  v13 = objc_msgSend(v7, "secondaryLabelColor");
  objc_msgSend(v9, "setTextColor:", v13);

  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return sub_1000B32BC();
}

void sub_1000B2DA0()
{
  char *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "contentView");
  objc_msgSend(v1, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel]);

  v2 = objc_msgSend(v0, "contentView");
  objc_msgSend(v2, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel]);

}

void sub_1000B2E30()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  SEL v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel];
  v44 = v1;
  v2 = objc_msgSend(v1, "leadingAnchor");
  v3 = objc_msgSend(v0, "contentView");
  v4 = objc_msgSend(v3, "leadingAnchor");

  v42 = objc_msgSend(v2, "constraintEqualToAnchor:constant:", v4, 15.0);
  v5 = objc_msgSend(v1, "trailingAnchor");
  v6 = objc_msgSend(v0, "contentView");
  v7 = objc_msgSend(v6, "trailingAnchor");

  v8 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v7, -15.0);
  v9 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel];
  v10 = objc_msgSend(v9, "leadingAnchor");
  v11 = objc_msgSend(v0, "leadingAnchor");
  v47 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v11, 15.0);

  v12 = objc_msgSend(v9, "trailingAnchor");
  v13 = objc_msgSend(v0, "trailingAnchor");
  v45 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v13, -15.0);

  LODWORD(v14) = 1148829696;
  objc_msgSend(v42, "setPriority:", v14);
  LODWORD(v15) = 1148829696;
  objc_msgSend(v8, "setPriority:", v15);
  LODWORD(v16) = 1148829696;
  objc_msgSend(v47, "setPriority:", v16);
  LODWORD(v17) = 1148829696;
  objc_msgSend(v45, "setPriority:", v17);
  v46 = (void *)objc_opt_self(NSLayoutConstraint);
  v18 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v19 = swift_allocObject(v18, 88, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10010E220;
  v20 = objc_msgSend(v44, "topAnchor");
  v21 = objc_msgSend(v0, "contentView");
  v22 = objc_msgSend(v21, "topAnchor");

  v23 = objc_msgSend(v20, "constraintEqualToAnchor:constant:", v22, 12.0);
  *(_QWORD *)(v19 + 32) = v23;
  *(_QWORD *)(v19 + 40) = v42;
  *(_QWORD *)(v19 + 48) = v8;
  v43 = v42;
  v24 = v8;
  v25 = objc_msgSend(v9, "topAnchor");
  v26 = objc_msgSend(v44, "bottomAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, 2.0);

  *(_QWORD *)(v19 + 56) = v27;
  v28 = objc_msgSend(v9, "bottomAnchor");
  v29 = objc_msgSend(v0, "contentView");
  v30 = objc_msgSend(v29, "bottomAnchor");

  v31 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v30, -12.0);
  *(_QWORD *)(v19 + 64) = v31;
  *(_QWORD *)(v19 + 72) = v47;
  *(_QWORD *)(v19 + 80) = v45;
  specialized Array._endMutation()(v32);
  sub_100053B64();
  v33 = v47;
  v34 = v45;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v19, v35, v36, v37, v38, v39, v40, v41);
  objc_msgSend(v46, "activateConstraints:", isa);

}

double sub_1000B32BC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel], "setAlpha:", 0.0);
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel], "setAlpha:", 0.0);
  v1 = swift_allocObject(&unk_10013AC90, 24, 7);
  *(_QWORD *)(v1 + 16) = v0;
  v2 = (void *)objc_opt_self(UIView);
  v7[4] = sub_1000B3740;
  v8 = v1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100030658;
  v7[3] = &unk_10013ACA8;
  v3 = _Block_copy(v7);
  v4 = v8;
  v5 = v0;
  swift_retain(v1);
  swift_release(v4);
  objc_msgSend(v2, "animateWithDuration:delay:options:animations:completion:", 0x10000, v3, 0, 0.375, 0.0);
  _Block_release(v3);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

id sub_1000B33DC(uint64_t a1, uint64_t a2, DARootViewController *a3)
{
  char *v3;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  NSString v10;
  SEL v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  objc_super v20;

  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_fontSizeSuiteTitle] = 0x402C000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_fontSizeDate] = 0x402C000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_verticalMargin] = 0x4028000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_verticalPadding] = 0x4000000000000000;
  v6 = OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel;
  v7 = objc_allocWithZone((Class)UILabel);
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, "init");
  v9 = OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel;
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  if (a3)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v10 = 0;
  }
  v20.receiver = v8;
  v20.super_class = (Class)type metadata accessor for HistoryTableViewCell();
  v18 = objc_msgSendSuper2(&v20, "initWithStyle:reuseIdentifier:", a1, v10);

  return v18;
}

id sub_1000B3550(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_fontSizeSuiteTitle] = 0x402C000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_fontSizeDate] = 0x402C000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_verticalMargin] = 0x4028000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_verticalPadding] = 0x4000000000000000;
  v3 = OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel;
  v4 = objc_allocWithZone((Class)UILabel);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v6 = OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for HistoryTableViewCell();
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

void sub_1000B3668()
{
  uint64_t v0;

}

id sub_1000B3694()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HistoryTableViewCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HistoryTableViewCell()
{
  return objc_opt_self(_TtC11Diagnostics20HistoryTableViewCell);
}

uint64_t sub_1000B371C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000B3740()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel), "setAlpha:", 1.0);
}

uint64_t sub_1000B378C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B379C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B37A4(uint64_t a1, uint64_t a2)
{
  return sub_1000B37B8(a1, a2, (uint64_t)&qword_10016D860, UIView_ptr);
}

uint64_t sub_1000B37B8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v8 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v9 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v10 = v9;
      a4 = (_QWORD *)sub_100037118(0, (unint64_t *)a3, a4);
      a3 = static NSObject.== infix(_:_:)(v10);

      if ((a3 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v7 == 1)
        goto LABEL_18;
      if (v8)
        break;
      v8 = 5;
      while (1)
      {
        v16 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        a3 = (uint64_t)*(id *)(a2 + 8 * v8);
        v17 = static NSObject.== infix(_:_:)(a3);

        if ((v17 & 1) != 0)
          goto LABEL_6;
        ++v8;
        if (v16 == v7)
          goto LABEL_18;
      }
      __break(1u);
    }
    a3 = 1;
    while (1)
    {
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a2);
      v13 = a3 + 1;
      if (__OFADD__(a3, 1))
        break;
      v14 = v12;
      v15 = static NSObject.== infix(_:_:)(v12);
      swift_unknownObjectRelease(v14);
      if ((v15 & 1) != 0)
        goto LABEL_6;
      ++a3;
      if (v13 == v7)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_1000B393C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B39A0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE v9[24];
  _QWORD v10[3];
  uint64_t v11;
  _UNKNOWN **v12;

  sub_10007992C();
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView];
  v2 = type metadata accessor for CardViewSessionCell();
  v11 = v2;
  v12 = &off_10013AD08;
  v10[0] = v0;
  v3 = v1 + OBJC_IVAR____TtC11Diagnostics14TestRunnerView_delegate;
  swift_beginAccess(v3, v9, 33, 0);
  v4 = v0;
  sub_1000B95DC((uint64_t)v10, v3, &qword_10016AFE0);
  swift_endAccess(v9);
  v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_deviceInformationView];
  v11 = v2;
  v12 = &off_10013ACF0;
  v10[0] = v4;
  v6 = v5 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_delegate;
  swift_beginAccess(v5 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_delegate, v9, 33, 0);
  v7 = v4;
  sub_1000B95DC((uint64_t)v10, v6, &qword_10016ACF0);
  return swift_endAccess(v9);
}

void sub_1000B3A98()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackViewContainer];
  v3 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView];
  objc_msgSend(v2, "addSubview:", v3);
  v4 = objc_msgSend(v1, "contentView");
  objc_msgSend(v4, "addSubview:", v2);

  v5 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_deviceInformationView];
  v6 = objc_msgSend(v3, "arrangedSubviews");
  v7 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v17 = v8;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v16 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease((DARootViewController *)v8, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease((DARootViewController *)v8, v9, v10, v11, v12, v13, v14, v15);
  sub_10008D7DC(v5, v16, 0);
}

double sub_1000B3BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_deviceInformationView);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_state);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_state) = v2;
  swift_retain_n(v2, 2);
  swift_release(v3);
  sub_1000375D4();
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

void sub_1000B3C3C(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  id i;
  const char *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  __n128 v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t v55;
  SEL v56;
  id v57;
  int v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  SEL v82;
  id v83;
  int v84;
  id v85;
  id v86;
  id v87;
  id v88;
  const char *v89;
  void *v90;
  int v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  SEL v99;
  id v100;
  int v101;
  id v102;
  id v103;
  id v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  uint64_t v109;
  DARootViewController *v110;
  DARootViewController *v111;
  const char *v112;
  void *v113;
  int v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void (*v119)(uint64_t);
  uint64_t v120;
  id v121;
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  const char *v127;
  void *v128;
  int v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  SEL v134;
  id v135;
  int v136;
  id v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  SEL v142;
  id v143;
  int v144;
  id v145;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154[24];
  _QWORD aBlock[5];
  uint64_t v156;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v152 = *(_QWORD *)(v8 - 8);
  v153 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v149 - v16;
  v18 = type metadata accessor for ModalPresentationCoordinator(0);
  v19 = __chkstk_darwin(v18);
  if (*(_BYTE *)(a1 + 19) != 1)
  {
    v44 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
    v151 = v5;
    v45 = (void *)static OS_dispatch_queue.main.getter(v44);
    static DispatchTime.now()(v45);
    + infix(_:_:)(v15, 0.5);
    v150 = *(void (**)(char *, uint64_t))(v12 + 8);
    v150(v15, v11);
    v46 = swift_allocObject(&unk_10013AF30, 24, 7);
    *(_QWORD *)(v46 + 16) = v2;
    aBlock[4] = sub_1000B9590;
    v156 = v46;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100030658;
    aBlock[3] = &unk_10013AF48;
    v47 = _Block_copy(aBlock);
    v48 = v156;
    v49 = v2;
    v50 = swift_release(v48);
    static DispatchQoS.unspecified.getter(v50);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v51 = sub_100035C5C();
    v52 = sub_100035CA4((uint64_t *)&unk_10016AD10);
    v53 = sub_100035CE4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v52, v53, v4, v51);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v10, v7, v47);
    _Block_release(v47);

    (*(void (**)(char *, uint64_t))(v151 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v10, v153);
    v150(v17, v11);
    return;
  }
  v152 = v19;
  v153 = (uint64_t)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (void *)qword_10016B3C0;
  if (qword_10016B3C0)
  {
    v22 = type metadata accessor for SelfServiceDestinationPickerViewController();
    if (!swift_dynamicCastClass(v21, v22))
    {
      v54 = v21;
LABEL_23:
      v43 = v54;
      goto LABEL_24;
    }
  }
  if (qword_10016A600 != -1)
    swift_once(&qword_10016A600, sub_1000490B8);
  v23 = objc_msgSend((id)qword_100172310, "viewControllers");
  v24 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if (!((unint64_t)v25 >> 62))
  {
    v33 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v33)
      goto LABEL_8;
    goto LABEL_20;
  }
  if (v25 < 0)
    v55 = v25;
  else
    v55 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  v33 = _CocoaArrayWrapper.endIndex.getter(v55);
  swift_bridgeObjectRelease((DARootViewController *)v25, v56, v57, v58, v59, v60, v61, v62);
  if (!v33)
  {
LABEL_20:
    swift_bridgeObjectRelease((DARootViewController *)v25, v26, v27, v28, v29, v30, v31, v32);
    if (qword_10016A5F8 != -1)
      swift_once(&qword_10016A5F8, sub_100048E78);
    v54 = (id)qword_100172300;
    goto LABEL_23;
  }
LABEL_8:
  v34 = v33 - 1;
  if (__OFSUB__(v33, 1))
    goto LABEL_40;
  if ((v25 & 0xC000000000000001) != 0)
    goto LABEL_41;
  if ((v34 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v34 >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_43:
    __break(1u);
LABEL_44:
    v78 = swift_once(&qword_10016A678, sub_10008BF34);
LABEL_31:
    v79 = qword_100172378;
    v80 = static os_log_type_t.error.getter(v78);
    os_log(_:dso:log:type:_:)("Attempted to update card session cell full screen when not in a card session!", 77, 2, &_mh_execute_header, v79, v80, &_swiftEmptyArrayStorage);
    return;
  }
  for (i = *(id *)(v25 + 8 * v34 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v25))
  {
    v43 = i;
    swift_bridgeObjectRelease((DARootViewController *)v25, v36, v37, v38, v39, v40, v41, v42);
LABEL_24:
    v63 = type metadata accessor for DashboardViewController();
    v64 = swift_dynamicCastClass(v43, v63);
    if (!v64)
    {

      if (qword_10016A678 != -1)
        goto LABEL_44;
      goto LABEL_31;
    }
    v65 = (_QWORD *)(*(_QWORD *)(v64 + OBJC_IVAR____TtC11Diagnostics23DashboardViewController_cardManager)
                   + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
    swift_beginAccess(v65, aBlock, 0, 0);
    v66 = *v65;
    if (!*(_QWORD *)(*v65 + 16))
      break;
    v67 = sub_100072B40(1u);
    if ((v68 & 1) != 0)
    {
      v69 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67);
      if ((unint64_t)v69 >> 62)
      {
        if (v69 < 0)
          v98 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67);
        else
          v98 = v69 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v69);
        v70 = _CocoaArrayWrapper.endIndex.getter(v98);
        swift_bridgeObjectRelease((DARootViewController *)v69, v99, v100, v101, v102, v103, v104, v105);
        if (!*(_QWORD *)(v66 + 16))
          goto LABEL_49;
      }
      else
      {
        v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v66);
        if (!*(_QWORD *)(v66 + 16))
          goto LABEL_49;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v66);
      v70 = 0;
      if (!*(_QWORD *)(v66 + 16))
        goto LABEL_49;
    }
    v81 = sub_100072B40(0);
    if ((v71 & 1) == 0)
      goto LABEL_49;
    v25 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v81);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease((DARootViewController *)v66, v82, v83, v84, v85, v86, v87, v88);
    if ((unint64_t)v25 >> 62)
    {
      if (v25 < 0)
        v141 = v25;
      else
        v141 = v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v96 = _CocoaArrayWrapper.endIndex.getter(v141);
      swift_bridgeObjectRelease((DARootViewController *)v25, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      v96 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease((DARootViewController *)v25, v89, v90, v91, v92, v93, v94, v95);
    v97 = __OFADD__(v70, v96);
    v70 += v96;
    if (!v97)
      goto LABEL_50;
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    ;
  }
  swift_bridgeObjectRetain(*v65);
  v70 = 0;
LABEL_49:
  swift_bridgeObjectRelease((DARootViewController *)v66, v71, v72, v73, v74, v75, v76, v77);
LABEL_50:
  v106 = *(void **)(a1 + 40);
  v107 = objc_msgSend(v106, "suiteName");
  if (!v107)
  {

    return;
  }
  v108 = v107;
  v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
  v111 = v110;

  v119 = *(void (**)(uint64_t))(a1 + 56);
  if (!v119)
  {
    swift_bridgeObjectRelease(v111, v112, v113, v114, v115, v116, v117, v118);

    return;
  }
  v120 = *(_QWORD *)(a1 + 64);
  swift_retain(v120);
  v121 = objc_msgSend(v106, "sessionSettings");
  v122 = objc_msgSend(v121, "fullscreenPromptsEnabled");

  if ((v122 & 1) != 0)
  {
LABEL_60:
    sub_1000B7204(v109, (uint64_t)v111, (uint64_t)v119, v120);
    sub_100035D74((uint64_t)v119, v120);

    swift_bridgeObjectRelease(v111, v134, v135, v136, v137, v138, v139, v140);
    return;
  }
  if (qword_10016A6D8 != -1)
    swift_once(&qword_10016A6D8, sub_1000C6380);
  v123 = sub_100036D34(v152, (uint64_t)qword_1001723D0);
  swift_beginAccess(v123, v154, 0, 0);
  v124 = v123;
  v125 = v153;
  sub_1000B9598(v124, v153);
  v126 = sub_1000C6400();
  if (v126)
  {

    sub_1000604B4(v125, type metadata accessor for ModalPresentationCoordinator);
    goto LABEL_60;
  }
  sub_1000604B4(v125, type metadata accessor for ModalPresentationCoordinator);
  if (v70 >= 2)
    goto LABEL_60;
  swift_bridgeObjectRelease(v111, v127, v128, v129, v130, v131, v132, v133);
  v119(1);

  sub_100035D74((uint64_t)v119, v120);
}

void sub_1000B43E0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v1 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView;
  v2 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView);
  if (v2)
  {
    v4 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
    v8 = v2;
    sub_10008DF14(v4, v8, 1);
    v5 = *(void **)(a1 + v1);
    *(_QWORD *)(a1 + v1) = 0;

    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
    if (v6 && *(_BYTE *)(v6 + 19) == 1)
    {
      *(_BYTE *)(v6 + 19) = 0;
      v7 = *(_QWORD *)(v6 + 80);
      if ((v7 & 8) == 0)
        *(_QWORD *)(v6 + 80) = v7 | 8;
      swift_retain(v6);
      sub_100051044();
      swift_release(v6);
    }

  }
}

void sub_1000B44BC(uint64_t a1)
{
  sub_1000383B0(a1);
}

void sub_1000B44E4(void *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  uint64_t v4;
  void *v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD aBlock[5];
  uint64_t v14;

  if (a1)
  {
    v12 = a1;
    objc_msgSend(v12, "floatValue");
    v3 = v2 / 100.0;
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
    if (v3 >= 0.0)
    {
      LOBYTE(aBlock[0]) = 0;
      sub_100042238(1, LODWORD(v3), 0, 1);
    }
    else
    {
      sub_100062FF8(0);
      v5 = *(void **)(v4 + OBJC_IVAR____TtC11Diagnostics14TestRunnerView_progressIndicatorView);
      objc_msgSend(v5, "alpha");
      if (v6 == 1.0)
      {
        v7 = swift_allocObject(&unk_10013AEE0, 24, 7);
        *(_QWORD *)(v7 + 16) = v5;
        v8 = (void *)objc_opt_self(UIView);
        aBlock[4] = sub_10003D030;
        v14 = v7;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100030658;
        aBlock[3] = &unk_10013AEF8;
        v9 = _Block_copy(aBlock);
        v10 = v14;
        v11 = v5;
        swift_retain(v7);
        swift_release(v10);
        objc_msgSend(v8, "animateWithDuration:delay:options:animations:completion:", 0x20000, v9, 0, 0.125, 0.0);
        _Block_release(v9);

        swift_release(v7);
        return;
      }
    }

  }
}

void sub_1000B46A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000426B4(1);
  }
  else
  {
    sub_1000426B4(0);
    sub_1000B8508();
  }
}

uint64_t sub_1000B46F8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_deviceInformationView);
  v4 = objc_msgSend(a1, "displayDeviceIdentifier");
  *(_BYTE *)(v3 + OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_deviceIdentifierVisible) = v4;
  sub_100037FA4();
  v5 = objc_msgSend(a1, "deviceIdentifier");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  return sub_100037D74(v6, v8);
}

double sub_1000B4784()
{
  double v0;

  sub_1000B8508();
  sub_1000B5580(1);
  return sub_10003B870(1, 6, v0);
}

double sub_1000B47C0()
{
  double v0;
  id v1;
  NSString v2;
  unsigned __int8 v3;
  double v4;
  id v5;

  sub_1000B8508();
  sub_1000B5580(1);
  sub_10003B9C0(3, 0, v0);
  sub_10003C028();
  sub_10003C27C();
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  if ((v3 & 1) == 0)
  {
    v5 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
    objc_msgSend(v5, "isInBoxUpdateModeActive");
    swift_unknownObjectRelease(v5);
  }
  sub_10003B9C0(4, 1, v4);
  return sub_10003BEF4();
}

double sub_1000B48BC()
{
  uint64_t v0;
  char *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  double v16;
  id v17;
  NSString v18;
  unsigned __int8 v19;
  double v20;
  id v21;
  unsigned int v22;
  uint64_t v24;
  SEL v25;
  id v26;
  int v27;
  id v28;
  id v29;
  id v30;
  id v31;

  sub_1000B8508();
  v1 = *(char **)(v0 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView), "arrangedSubviews");
  v3 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v24 = v4;
    else
      v24 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v12 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_bridgeObjectRelease((DARootViewController *)v4, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease((DARootViewController *)v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10008D7DC(v1, v12, 1);
  v13 = *(void (**)(uint64_t))&v1[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler];
  if (v13)
  {
    v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler + 8];
    v15 = swift_retain(v14);
    v13(v15);
    sub_100035D74((uint64_t)v13, v14);
  }
  sub_1000426B4(0);
  sub_10003B9C0(5, 0, v16);
  sub_10003C028();
  v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "BOOLForKey:", v18);

  if ((v19 & 1) != 0)
    return sub_10003B9C0(0, 1, v20);
  v21 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v22 = objc_msgSend(v21, "isInBoxUpdateModeActive");
  swift_unknownObjectRelease(v21);
  if (v22)
    return sub_10003B9C0(0, 1, v20);
  sub_10003B9C0(2, 1, v20);
  return sub_10003C150();
}

double sub_1000B4AD0()
{
  uint64_t v0;
  char *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  double v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  unsigned __int8 v19;
  double v20;
  id v21;
  unsigned int v22;
  void *v23;
  double result;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _QWORD v38[5];
  uint64_t v39;

  sub_1000B8508();
  v1 = *(char **)(v0 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView), "arrangedSubviews");
  v3 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v30 = v4;
    else
      v30 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v12 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease((DARootViewController *)v4, v31, v32, v33, v34, v35, v36, v37);
  }
  else
  {
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease((DARootViewController *)v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10008D7DC(v1, v12, 1);
  v14 = *(void (**)(uint64_t))&v1[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler];
  if (v14)
  {
    v15 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler + 8];
    v16 = swift_retain(v15);
    v14(v16);
    sub_100035D74((uint64_t)v14, v15);
  }
  sub_10003B9C0(5, 0, v13);
  sub_10003C028();
  v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "BOOLForKey:", v18);

  if ((v19 & 1) != 0
    || (v21 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform"),
        v22 = objc_msgSend(v21, "isInBoxUpdateModeActive"),
        swift_unknownObjectRelease(v21),
        v22))
  {
    sub_10003B9C0(0, 1, v20);
  }
  else
  {
    sub_10003B9C0(2, 1, v20);
    sub_10003C150();
  }
  sub_1000426B4(4);
  sub_100062FF8(0);
  v23 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_progressIndicatorView];
  objc_msgSend(v23, "alpha");
  if (result == 1.0)
  {
    v25 = swift_allocObject(&unk_10013AE90, 24, 7);
    *(_QWORD *)(v25 + 16) = v23;
    v26 = (void *)objc_opt_self(UIView);
    v38[4] = sub_10003D030;
    v39 = v25;
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 1107296256;
    v38[2] = sub_100030658;
    v38[3] = &unk_10013AEA8;
    v27 = _Block_copy(v38);
    v28 = v39;
    v29 = v23;
    swift_retain(v25);
    swift_release(v28);
    objc_msgSend(v26, "animateWithDuration:delay:options:animations:completion:", 0x20000, v27, 0, 0.125, 0.0);
    _Block_release(v27);
    *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  }
  return result;
}

double sub_1000B4DF4()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  const char *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  SEL v27;
  id v28;
  int v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  double v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  void *v56;
  double v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  double result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  SEL v68;
  id v69;
  int v70;
  id v71;
  id v72;
  id v73;
  id v74;
  _QWORD v75[5];
  uint64_t v76;

  v1 = v0;
  v2 = (void *)qword_10016B3C0;
  if (qword_10016B3C0
    && (v3 = type metadata accessor for SelfServiceDestinationPickerViewController(), !swift_dynamicCastClass(v2, v3)))
  {
    v25 = v2;
  }
  else
  {
    if (qword_10016A600 != -1)
      swift_once(&qword_10016A600, sub_1000490B8);
    v4 = objc_msgSend((id)qword_100172310, "viewControllers");
    v5 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v26 = v6;
      else
        v26 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v14 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease((DARootViewController *)v6, v27, v28, v29, v30, v31, v32, v33);
      if (v14)
      {
LABEL_7:
        v15 = v14 - 1;
        if (__OFSUB__(v14, 1))
        {
          __break(1u);
        }
        else if ((v6 & 0xC000000000000001) == 0)
        {
          if ((v15 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v15 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v16 = *(id *)(v6 + 8 * v15 + 32);
LABEL_12:
            v24 = v16;
            swift_bridgeObjectRelease((DARootViewController *)v6, v17, v18, v19, v20, v21, v22, v23);
            goto LABEL_22;
          }
          __break(1u);
          goto LABEL_40;
        }
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v6);
        goto LABEL_12;
      }
    }
    else
    {
      v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease((DARootViewController *)v6, v7, v8, v9, v10, v11, v12, v13);
    if (qword_10016A5F8 != -1)
      swift_once(&qword_10016A5F8, sub_100048E78);
    v25 = (id)qword_100172300;
  }
  v24 = v25;
LABEL_22:
  v34 = type metadata accessor for DashboardViewController();
  v35 = swift_dynamicCastClass(v24, v34);
  if (!v35)
  {

    if (qword_10016A678 == -1)
    {
LABEL_30:
      v65 = qword_100172378;
      v66 = static os_log_type_t.error.getter(v64);
      os_log(_:dso:log:type:_:)("Attempted to archive layout when not in card session!", 53, 2, &_mh_execute_header, v65, v66, &_swiftEmptyArrayStorage);
      return result;
    }
LABEL_40:
    v64 = swift_once(&qword_10016A678, sub_10008BF34);
    goto LABEL_30;
  }
  v36 = v35;
  sub_1000B8508();
  v37 = *(char **)&v1[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView];
  v38 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView], "arrangedSubviews");
  v39 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
  v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

  if ((unint64_t)v40 >> 62)
  {
    if (v40 < 0)
      v67 = v40;
    else
      v67 = v40 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v40);
    v48 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease((DARootViewController *)v40, v68, v69, v70, v71, v72, v73, v74);
  }
  else
  {
    v48 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease((DARootViewController *)v40, v41, v42, v43, v44, v45, v46, v47);
  sub_10008D7DC(v37, v48, 1);
  v50 = *(void (**)(uint64_t))&v37[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler];
  if (v50)
  {
    v51 = *(_QWORD *)&v37[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler + 8];
    v52 = swift_retain(v51);
    v50(v52);
    sub_100035D74((uint64_t)v50, v51);
  }
  sub_10003B870(3, 4, v49);
  sub_1000426B4(3);
  v53 = swift_allocObject(&unk_10013ADA0, 32, 7);
  *(_QWORD *)(v53 + 16) = v1;
  *(_QWORD *)(v53 + 24) = v36;
  v54 = v1;
  v55 = v24;
  sub_100062FF8(1);
  v56 = *(void **)&v37[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_progressIndicatorView];
  objc_msgSend(v56, "alpha");
  if (v57 == 1.0)
  {
    v58 = swift_allocObject(&unk_10013ADC8, 24, 7);
    *(_QWORD *)(v58 + 16) = v56;
    v59 = (void *)objc_opt_self(UIView);
    v75[4] = sub_10003CDF4;
    v76 = v58;
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 1107296256;
    v75[2] = sub_100030658;
    v75[3] = &unk_10013ADE0;
    v60 = _Block_copy(v75);
    v61 = v76;
    v62 = v56;
    swift_retain(v58);
    swift_release(v61);
    objc_msgSend(v59, "animateWithDuration:delay:options:animations:completion:", 0x20000, v60, 0, 0.125, 0.0);
    _Block_release(v60);

    swift_release(v53);
    *(_QWORD *)&result = swift_release(v58).n128_u64[0];
  }
  else
  {

    *(_QWORD *)&result = swift_release(v53).n128_u64[0];
  }
  return result;
}

void sub_1000B52DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  unsigned __int8 v6;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  DARootViewController *v14;
  NSString v15;
  SEL v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v5 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v6 = objc_msgSend(v5, "isCheckerBoardActive");
  swift_unknownObjectRelease(v5);
  if ((v6 & 1) == 0
    && (byte_100172309 & 1) == 0
    && (*(_BYTE *)(a2 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_pauseStateAnimation) & 1) == 0)
  {
    v7 = swift_allocObject(&unk_10013AE18, 24, 7);
    *(_QWORD *)(v7 + 16) = a3;
    v8 = (void *)objc_opt_self(CBSUtilities);
    v9 = a3;
    v10 = objc_msgSend(v8, "isSSRBootIntentSet");
    if ((_DWORD)v10)
    {
      byte_10016CC90 = 2;
      *(_BYTE *)(*(_QWORD *)&v9[OBJC_IVAR____TtC11Diagnostics23DashboardViewController_cardManager]
               + OBJC_IVAR____TtC11Diagnostics11CardManager_persistentOnly) = 1;
      sub_1000E16E4();

      swift_release(v7);
    }
    else
    {
      if (qword_10016A678 != -1)
        v10 = (id)swift_once(&qword_10016A678, sub_10008BF34);
      v11 = qword_100172378;
      v12 = static os_log_type_t.default.getter(v10);
      os_log(_:dso:log:type:_:)("Checking AST 2 activity", 23, 2, &_mh_execute_header, v11, v12, &_swiftEmptyArrayStorage);
      v13 = objc_msgSend(objc_allocWithZone((Class)DADiagnosticsSessionAvailability), "init");
      v14 = (DARootViewController *)qword_100172388;
      if (qword_100172388)
      {
        swift_bridgeObjectRetain(qword_100172388);
        v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        v15 = 0;
      }
      v23 = swift_allocObject(&unk_10013AE40, 32, 7);
      *(_QWORD *)(v23 + 16) = sub_1000B951C;
      *(_QWORD *)(v23 + 24) = v7;
      v26[4] = sub_1000370A8;
      v27 = v23;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 1107296256;
      v26[2] = sub_1000A2514;
      v26[3] = &unk_10013AE58;
      v24 = _Block_copy(v26);
      v25 = v27;
      swift_retain(v7);
      swift_release(v25);
      objc_msgSend(v13, "checkAvailabilityWithTicketNumber:timeout:exitWhenDone:completion:", v15, 0, v24, 30.0);
      _Block_release(v24);

      swift_release(v7);
    }
  }
}

void sub_1000B5580(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  SEL v27;
  id v28;
  int v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  char v35;
  SEL v36;
  id v37;
  int v38;
  id v39;
  id v40;
  id v41;
  id v42;

  v2 = v1;
  v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView), "arrangedSubviews");
  v5 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v26 = v6;
    else
      v26 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease((DARootViewController *)v6, v27, v28, v29, v30, v31, v32, v33);
    if (!v14)
      goto LABEL_17;
  }
  else
  {
    v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      goto LABEL_17;
  }
  specialized ContiguousArray.reserveCapacity(_:)(v14);
  if (v14 < 0)
  {
    __break(1u);
    return;
  }
  v15 = 0;
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v6);
    else
      v19 = *(id *)(v6 + 8 * v15 + 32);
    v20 = v19;
    v21 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v22 = type metadata accessor for CardStackSubviewContainer();
    v23 = swift_dynamicCastClass(v20, v22);
    if (v23)
    {
      v24 = *(void **)(v23 + OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedView);
      if (v24)
      {
        v25 = v24;

        v20 = v21;
        v21 = v25;
      }
    }

    ++v15;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v17 = *(_QWORD *)_swiftEmptyArrayStorage.remoteCardFilter;
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
    v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v21);
    specialized ContiguousArray._endMutation()(v18);
  }
  while (v14 != v15);
LABEL_17:
  swift_bridgeObjectRelease((DARootViewController *)v6, v7, v8, v9, v10, v11, v12, v13);
  v34 = *(id *)(v2 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
  v35 = sub_1000B37B8((uint64_t)v34, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)&qword_10016D860, UIView_ptr);
  swift_bridgeObjectRelease(&_swiftEmptyArrayStorage, v36, v37, v38, v39, v40, v41, v42);

  if ((v35 & 1) != 0)
    sub_10008D9A8(v34, a1 & 1);
}

void sub_1000B57DC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  DARootViewController *v16;
  DARootViewController *v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  const char *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  SEL v64;
  id v65;
  int v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  SEL v77;
  id v78;
  int v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  SEL v87;
  id v88;
  int v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  const char *v95;
  void *v96;
  int v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  id v102;
  id v103;
  void *v104;
  const char *v105;
  void *v106;
  int v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  id v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  DARootViewController *v125;
  void *v126;
  int v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  DARootViewController *v132;
  unint64_t v133;
  const char *v134;
  void *v135;
  int v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  SEL v142;
  id v143;
  int v144;
  id v145;
  id v146;
  id v147;
  id v148;
  SEL v149;
  id v150;
  int v151;
  id v152;
  id v153;
  id v154;
  id v155;
  DARootViewController *v156;
  const char *v157;
  void *v158;
  int v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  uint64_t v164;
  const char *v165;
  void *v166;
  int v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  id v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  int v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  DARootViewController *v190;
  unint64_t v191;
  void *v192;
  SEL v193;
  id v194;
  int v195;
  id v196;
  id v197;
  id v198;
  id v199;
  SEL v200;
  id v201;
  int v202;
  id v203;
  id v204;
  id v205;
  id v206;
  DARootViewController *v207;
  id v208;
  char v209;
  SEL v210;
  id v211;
  int v212;
  id v213;
  id v214;
  id v215;
  id v216;
  uint64_t v217;
  id v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _OWORD *v224;
  id v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  int v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  DARootViewController *v237;
  unint64_t v238;
  void *v239;
  SEL v240;
  id v241;
  int v242;
  id v243;
  id v244;
  id v245;
  id v246;
  SEL v247;
  id v248;
  int v249;
  id v250;
  id v251;
  id v252;
  id v253;
  DARootViewController *v254;
  uint64_t v255;
  id v256;
  void *v257;
  void *v258;
  SEL v259;
  id v260;
  int v261;
  id v262;
  id v263;
  id v264;
  id v265;
  _OWORD *v266;
  SEL v267;
  id v268;
  int v269;
  id v270;
  id v271;
  id v272;
  id v273;
  _OWORD *v274;
  SEL v275;
  id v276;
  int v277;
  id v278;
  id v279;
  id v280;
  id v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  SEL v286;
  id v287;
  int v288;
  id v289;
  id v290;
  id v291;
  id v292;
  uint64_t v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  void *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  id v304;
  __n128 v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  _OWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  id v320;
  uint64_t v321;
  Swift::Int v322;
  uint64_t v323;
  int v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __n128 v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  char v334;
  SEL v335;
  id v336;
  int v337;
  id v338;
  id v339;
  id v340;
  id v341;
  char v342;
  SEL v343;
  id v344;
  int v345;
  id v346;
  id v347;
  id v348;
  id v349;
  uint64_t v350;
  uint64_t v351;
  char v352;
  char *v353;
  id v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  void *v358;
  int v359;
  void *v360;
  void *v361;
  void *v362;
  void *v363;
  uint64_t v364;
  void (*v365)(uint64_t);
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  char v372;
  char *v373;
  id v374;
  uint64_t v375;
  uint64_t v376;
  const char *v377;
  void *v378;
  int v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  uint64_t v384;
  void (*v385)(uint64_t);
  uint64_t v386;
  uint64_t v387;
  DARootViewController *v388;
  DARootViewController *v389;
  SEL v390;
  id v391;
  int v392;
  id v393;
  id v394;
  id v395;
  id v396;
  id v397;
  id v398;
  uint64_t v399;
  uint64_t v400;
  char v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  int DeviceClass;
  unint64_t v406;
  DARootViewController *v407;
  uint64_t v408;
  DARootViewController *v409;
  char *v410;
  id v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  void *v415;
  int v416;
  void *v417;
  void *v418;
  void *v419;
  void *v420;
  uint64_t v421;
  void (*v422)(uint64_t);
  uint64_t v423;
  uint64_t v424;
  DARootViewController *v425;
  DARootViewController *v426;
  SEL v427;
  id v428;
  int v429;
  id v430;
  id v431;
  id v432;
  id v433;
  SEL v434;
  id v435;
  int v436;
  id v437;
  id v438;
  id v439;
  id v440;
  uint64_t v441;
  id v442;
  id v443;
  void *v444;
  uint64_t v445;
  DARootViewController *v446;
  DARootViewController *v447;
  uint64_t v448;
  uint64_t v449;
  SEL v450;
  id v451;
  int v452;
  id v453;
  id v454;
  id v455;
  id v456;
  void *v457;
  uint64_t v458;
  SEL v459;
  id v460;
  int v461;
  id v462;
  id v463;
  id v464;
  id v465;
  uint64_t v466;
  SEL v467;
  id v468;
  int v469;
  id v470;
  id v471;
  id v472;
  id v473;
  uint64_t v474;
  SEL v475;
  id v476;
  int v477;
  id v478;
  id v479;
  id v480;
  id v481;
  uint64_t v482;
  SEL v483;
  id v484;
  int v485;
  id v486;
  id v487;
  id v488;
  id v489;
  SEL v490;
  id v491;
  int v492;
  id v493;
  id v494;
  id v495;
  id v496;
  int v497;
  uint64_t v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _OWORD *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  _OWORD *v516;
  _OWORD *v517;
  _OWORD *v518;
  _OWORD *v519;
  _OWORD *v520;
  uint64_t v521;
  uint64_t v522;
  __int128 v523;
  const __CFString *v524;
  unint64_t v525;
  uint64_t v526;
  unsigned __int8 *v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  __int128 v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  id v536;
  uint64_t v537;
  uint64_t v538;
  id v539;
  DARootViewController *v540;
  uint64_t v541;
  uint64_t (*v542)(uint64_t);
  void *v543;
  void (*v544)();
  uint64_t v545;
  id v546[4];
  _QWORD v547[4];
  _BYTE v548[48];
  uint64_t v549;
  _BYTE v550[48];
  uint64_t v551;
  _BYTE v552[48];
  uint64_t v553;
  _BYTE v554[48];
  uint64_t v555;
  _BYTE v556[48];
  unint64_t v557;
  _BYTE v558[56];

  v3 = 0;
  v4 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v5 = __chkstk_darwin(v4);
  v506 = (uint64_t)&v497 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v510 = (uint64_t)&v497 - v7;
  v8 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v508 = *(_QWORD *)(v8 - 8);
  v509 = v8;
  __chkstk_darwin(v8);
  v505 = (uint64_t)&v497 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v503 = *(_QWORD *)(v10 - 8);
  v504 = v10;
  __chkstk_darwin(v10);
  v502 = (char *)&v497 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v500 = *(_QWORD *)(v12 - 8);
  v501 = v12;
  __chkstk_darwin(v12);
  v499 = (char *)&v497 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v536 = a1;
  v14 = objc_msgSend(a1, "errors");
  v15 = sub_100035CA4(&qword_10016D600);
  v16 = (DARootViewController *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  v17 = (DARootViewController *)sub_1000A1DA0((uint64_t)v16);
  swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
  v528 = OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState;
  v529 = v1;
  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
  v26 = (uint64_t)&_swiftEmptyArrayStorage;
  if (v25)
  {
    swift_beginAccess(v25 + 72, v547, 0, 0);
    v27 = *(_QWORD *)(v25 + 72);
    swift_bridgeObjectRetain(v17);
    v28 = swift_bridgeObjectRetain(v27);
    sub_1000B9050(v28, (uint64_t)v17);
    v26 = v29;
    swift_bridgeObjectRelease(v17, v30, v31, v32, v33, v34, v35, v36);
  }
  v557 = v26;
  swift_bridgeObjectRetain(v26);
  sub_1000BA31C((uint64_t)v17);
  v44 = v557;
  v530 = v557;
  if (v557 >> 62)
    goto LABEL_223;
  v45 = *(_QWORD *)((v557 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v45)
  {
LABEL_5:
    if (v45 < 1)
    {
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
      JUMPOUT(0x1000B71D0);
    }
    v46 = 0;
    v533 = v530 & 0xC000000000000001;
    v521 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView;
    v522 = OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView;
    v515 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView;
    v47 = v26 & 0xFFFFFFFFFFFFFF8;
    v526 = v26 & 0xFFFFFFFFFFFFFF8;
    v527 = (unsigned __int8 *)(v530 + 32);
    if (v26 < 0)
      v47 = v26;
    v498 = v47;
    v525 = v26 & 0xC000000000000001;
    v518 = v556;
    v519 = v558;
    v524 = CFSTR("productClass");
    v516 = v552;
    v517 = v554;
    v507 = v550;
    v520 = v548;
    v532 = xmmword_10010C3D0;
    v523 = xmmword_10010BE30;
    v513 = 0x8000000100118420;
    v514 = 0x8000000100118480;
    v511 = 0x8000000100118460;
    v512 = 0x8000000100118440;
    v534 = v26;
    v531 = v45;
    while (2)
    {
      v537 = v46;
      if (v533)
        v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v530);
      else
        v48 = *(id *)&v527[8 * v46];
      v49 = v48;
      v538 = v3;
      v50 = objc_msgSend(v48, "code");
      v51 = static os_log_type_t.error.getter(v50);
      if (qword_10016A668 != -1)
        swift_once(&qword_10016A668, sub_10008BDE4);
      v52 = qword_100172368;
      v535 = sub_100035CA4((uint64_t *)&unk_10016BE40);
      v53 = swift_allocObject(v535, 112, 7);
      *(_OWORD *)(v53 + 16) = v532;
      v54 = v49;
      v55 = objc_msgSend(v54, "description");
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v58 = v57;
      v539 = v54;

      *(_QWORD *)(v53 + 56) = &type metadata for String;
      v59 = sub_100047048();
      *(_QWORD *)(v53 + 64) = v59;
      *(_QWORD *)(v53 + 32) = v56;
      *(_QWORD *)(v53 + 40) = v58;
      v60 = objc_msgSend(v536, "serialNumber");
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v62;

      *(_QWORD *)(v53 + 96) = &type metadata for String;
      *(_QWORD *)(v53 + 104) = v59;
      *(_QWORD *)(v53 + 72) = v61;
      *(_QWORD *)(v53 + 80) = v63;
      os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "Displaying error %@ for device %@", 33, 2, v53);
      swift_bridgeObjectRelease((DARootViewController *)v53, v64, v65, v66, v67, v68, v69, v70);
      v3 = v538;
      switch((unint64_t)v50)
      {
        case 0uLL:
        case 1uLL:
          v547[3] = 2;
          v72 = v520;
          *v520 = 0u;
          v72[1] = 0u;
          *((_QWORD *)v72 + 4) = 0;
          v548[40] = 2;
          goto LABEL_73;
        case 2uLL:
          v26 = v534;
          if (v534 >> 62)
          {
            swift_bridgeObjectRetain(v534);
            v94 = _CocoaArrayWrapper.endIndex.getter(v498);
            if (v94)
              goto LABEL_22;
          }
          else
          {
            v94 = *(_QWORD *)(v526 + 16);
            swift_bridgeObjectRetain(v534);
            if (v94)
            {
LABEL_22:
              v102 = v539;
              if (v525)
                v103 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
              else
                v103 = *(id *)(v26 + 32);
              v104 = v103;
              sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
              v44 = static NSObject.== infix(_:_:)(v104);

              if ((v44 & 1) != 0)
              {
LABEL_25:
                swift_bridgeObjectRelease((DARootViewController *)v26, v105, v106, v107, v108, v109, v110, v111);
                v112 = v529;
                v113 = *(void **)(v529 + v515);
                if (v113)
                {
                  v114 = *(void **)(v529 + v521);
                  v115 = v529;
                  v116 = v113;
                  sub_10008DF14(v114, v116, 1);
                  v117 = *(void **)(v115 + v515);
                  *(_QWORD *)(v115 + v515) = 0;

                  v118 = *(_QWORD *)(v115 + v528);
                  if (v118 && *(_BYTE *)(v118 + 19) == 1)
                  {
                    *(_BYTE *)(v118 + 19) = 0;
                    v119 = *(_QWORD *)(v118 + 80);
                    if ((v119 & 8) == 0)
                      *(_QWORD *)(v118 + 80) = v119 | 8;
                    swift_retain(v118);
                    sub_100051044();
                    swift_release(v118);
                  }

                  v112 = v529;
                }
                v120 = *(_QWORD *)(v112 + v528);
                if (v120)
                  goto LABEL_91;
                goto LABEL_9;
              }
              if (v94 != 1)
              {
                if (!v525)
                {
                  v399 = 5;
                  while (1)
                  {
                    v400 = v399 - 3;
                    if (__OFADD__(v399 - 4, 1))
                      goto LABEL_221;
                    v44 = (uint64_t)*(id *)(v26 + 8 * v399);
                    v401 = static NSObject.== infix(_:_:)(v44);

                    if ((v401 & 1) != 0)
                      goto LABEL_25;
                    ++v399;
                    if (v400 == v94)
                      goto LABEL_163;
                  }
                }
                v282 = 1;
                while (1)
                {
                  v283 = specialized _ArrayBuffer._getElementSlowPath(_:)(v282, v26);
                  v284 = v282 + 1;
                  if (__OFADD__(v282, 1))
                    break;
                  v285 = v283;
                  v44 = static NSObject.== infix(_:_:)(v283);
                  swift_unknownObjectRelease(v285);
                  if ((v44 & 1) != 0)
                    goto LABEL_25;
                  ++v282;
                  if (v284 == v94)
                    goto LABEL_163;
                }
LABEL_217:
                __break(1u);
                goto LABEL_218;
              }
LABEL_163:
              swift_bridgeObjectRelease((DARootViewController *)v26, v105, v106, v107, v108, v109, v110, v111);
              goto LABEL_187;
            }
          }
          swift_bridgeObjectRelease((DARootViewController *)v26, v95, v96, v97, v98, v99, v100, v101);
          v102 = v539;
LABEL_187:
          v443 = objc_msgSend(v536, "suiteName");
          if (v443)
          {
            v444 = v443;
            v445 = static String._unconditionallyBridgeFromObjectiveC(_:)(v443);
            v447 = v446;

          }
          else
          {
            v445 = 0;
            v447 = (DARootViewController *)0xE000000000000000;
          }
          v448 = v445;
          v449 = v529;
          sub_1000B7714(v448, (uint64_t)v447);
          swift_bridgeObjectRelease(v447, v450, v451, v452, v453, v454, v455, v456);
          v314 = *(_QWORD *)(v449 + v528);
          if (v314)
          {
LABEL_191:
            swift_beginAccess(v314 + 72, &v540, 33, 0);
            v398 = v102;
            goto LABEL_192;
          }
          goto LABEL_9;
        case 3uLL:
          v121 = objc_msgSend(v536, "attributes");
          v122 = sub_100035CA4((uint64_t *)&unk_10016ACD0);
          v123 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v121, &type metadata for String, v122, &protocol witness table for String);

          v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v524);
          v132 = v125;
          if (*(_QWORD *)(v123 + 16))
          {
            v133 = sub_100072A94(v124, (uint64_t)v125);
            v26 = v534;
            if ((v134 & 1) != 0)
            {
              v141 = *(void **)(*(_QWORD *)(v123 + 56) + 8 * v133);
              swift_unknownObjectRetain(v141);
              swift_bridgeObjectRelease(v132, v142, v143, v144, v145, v146, v147, v148);
              swift_bridgeObjectRelease((DARootViewController *)v123, v149, v150, v151, v152, v153, v154, v155);
              v546[0] = v141;
              if ((swift_dynamicCast(&v540, v546, v122, &type metadata for String, 6) & 1) != 0)
              {
                v156 = (DARootViewController *)v541;
                v102 = v539;
                if (v540 == (DARootViewController *)0x646F50656D6F48 && v541 == 0xE700000000000000)
                {

                  goto LABEL_83;
                }
                v334 = _stringCompareWithSmolCheck(_:_:expecting:)(v540, v541, 0x646F50656D6F48, 0xE700000000000000, 0);
                swift_bridgeObjectRelease(v156, v335, v336, v337, v338, v339, v340, v341);
                if ((v334 & 1) != 0)
                {
LABEL_9:

                  goto LABEL_10;
                }
LABEL_109:
                if ((sub_1000B37B8((uint64_t)v102, v26, (uint64_t)&unk_10016D870, NSError_ptr) & 1) != 0)
                {
                  if (!qword_100172358)
                    goto LABEL_90;
                  v293 = qword_10016A6D8;
                  v294 = (id)qword_100172358;
                  if (v293 != -1)
                    swift_once(&qword_10016A6D8, sub_1000C6380);
                  v295 = type metadata accessor for ModalPresentationCoordinator(0);
                  v296 = sub_100036D34(v295, (uint64_t)qword_1001723D0);
                  swift_beginAccess(v296, v546, 33, 0);
                  v297 = sub_1000C6400();
                  if (v297)
                  {
                    v298 = v297;
                    sub_100037118(0, &qword_10016D880, NSObject_ptr);
                    if ((static NSObject.== infix(_:_:)(v294) & 1) != 0)
                    {
                      v299 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
                      v300 = (void *)static OS_dispatch_queue.main.getter(v299);
                      v301 = swift_allocObject(&unk_10013B070, 64, 7);
                      *(_QWORD *)(v301 + 16) = 0;
                      *(_BYTE *)(v301 + 24) = 1;
                      *(_QWORD *)(v301 + 32) = v294;
                      *(_BYTE *)(v301 + 40) = 1;
                      *(_QWORD *)(v301 + 48) = 0;
                      *(_QWORD *)(v301 + 56) = 0;
                      v544 = sub_100037088;
                      v545 = v301;
                      v540 = (DARootViewController *)_NSConcreteStackBlock;
                      v541 = 1107296256;
                      v542 = sub_100030658;
                      v543 = &unk_10013B088;
                      v302 = _Block_copy(&v540);
                      v303 = v545;
                      v304 = v294;
                      v305 = swift_release(v303);
                      v535 = (uint64_t)v294;
                      v306 = v499;
                      static DispatchQoS.unspecified.getter(v305);
                      v540 = &_swiftEmptyArrayStorage;
                      v307 = sub_100035C5C();
                      v308 = sub_100035CA4((uint64_t *)&unk_10016AD10);
                      v309 = sub_100035CE4();
                      v310 = v502;
                      v311 = v504;
                      dispatch thunk of SetAlgebra.init<A>(_:)(&v540, v308, v309, v504, v307);
                      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v306, v310, v302);
                      _Block_release(v302);

                      (*(void (**)(char *, uint64_t))(v503 + 8))(v310, v311);
                      v312 = v306;
                      v294 = (id)v535;
                      (*(void (**)(char *, uint64_t))(v500 + 8))(v312, v501);
                      v26 = v534;
                      v102 = v539;
LABEL_133:
                      swift_endAccess(v546);
                      v333 = (void *)qword_100172358;
                      qword_100172358 = 0;

                      goto LABEL_90;
                    }

                  }
                  v319 = *(_QWORD *)(v296 + *(int *)(v295 + 24));
                  v320 = v294;
                  v321 = swift_bridgeObjectRetain(v319);
                  v322 = sub_1000C8C58(v321, v320);

                  v323 = sub_1000C80C8(v322);
                  if ((v325 & 1) != 0)
                    goto LABEL_230;
                  v326 = v510;
                  v26 = v534;
                  v102 = v539;
                  if (*(_DWORD *)(v322 + 36) != v324)
                    goto LABEL_229;
                  v327 = 1;
                  if (v323 != 1 << *(_BYTE *)(v322 + 32))
                  {
                    sub_1000C816C(v323, v324, v322, v510);
                    v327 = 0;
                  }
                  v329 = v508;
                  v328 = v509;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v508 + 56))(v326, v327, 1, v509);
                  v330 = swift_release(v322);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v329 + 48))(v326, 1, v328, v330) == 1)
                  {
                    sub_100036FA0(v326, (uint64_t *)&unk_10016AE90);
                  }
                  else
                  {
                    v331 = v505;
                    sub_100036D7C(v326, v505);
                    v332 = v506;
                    sub_1000A7860(v331, v506);
                    sub_100036FA0(v332, (uint64_t *)&unk_10016AE90);
                    sub_1000604B4(v331, type metadata accessor for ModalPresentationCoordinator.QueueEntry);
                  }
                  goto LABEL_133;
                }
                v549 = 1;
                v313 = v507;
                *v507 = 0u;
                v313[1] = 0u;
                *((_QWORD *)v313 + 4) = 0;
                v550[40] = 2;
                sub_100066B64(0);
                v314 = *(_QWORD *)(v529 + v528);
                if (v314)
                  goto LABEL_191;
                goto LABEL_9;
              }
            }
            else
            {
              swift_bridgeObjectRelease(v132, v134, v135, v136, v137, v138, v139, v140);
              swift_bridgeObjectRelease((DARootViewController *)v123, v286, v287, v288, v289, v290, v291, v292);
            }
          }
          else
          {
            swift_bridgeObjectRelease(v125, (SEL)v125, v126, v127, v128, v129, v130, v131);
            swift_bridgeObjectRelease((DARootViewController *)v123, v275, v276, v277, v278, v279, v280, v281);
            v26 = v534;
          }
          v102 = v539;
          goto LABEL_109;
        case 4uLL:
          v26 = v534;
          if (v534 >> 62)
          {
            swift_bridgeObjectRetain(v534);
            v164 = _CocoaArrayWrapper.endIndex.getter(v498);
            if (v164)
            {
LABEL_42:
              v102 = v539;
              if (v525)
                v172 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
              else
                v172 = *(id *)(v26 + 32);
              v173 = v172;
              sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
              v44 = static NSObject.== infix(_:_:)(v173);

              if ((v44 & 1) != 0)
                goto LABEL_89;
              if (v164 != 1)
              {
                if (!v525)
                {
                  v350 = 5;
                  while (1)
                  {
                    v351 = v350 - 3;
                    if (__OFADD__(v350 - 4, 1))
                      goto LABEL_219;
                    v44 = (uint64_t)*(id *)(v26 + 8 * v350);
                    v352 = static NSObject.== infix(_:_:)(v44);

                    if ((v352 & 1) != 0)
                      goto LABEL_89;
                    ++v350;
                    if (v351 == v164)
                      goto LABEL_142;
                  }
                }
                v174 = 1;
                while (1)
                {
                  v175 = specialized _ArrayBuffer._getElementSlowPath(_:)(v174, v26);
                  v176 = v174 + 1;
                  if (__OFADD__(v174, 1))
                    break;
                  v177 = v175;
                  v44 = static NSObject.== infix(_:_:)(v175);
                  swift_unknownObjectRelease(v177);
                  if ((v44 & 1) != 0)
                    goto LABEL_89;
                  ++v174;
                  if (v176 == v164)
                    goto LABEL_142;
                }
                __break(1u);
LABEL_216:
                __break(1u);
                goto LABEL_217;
              }
            }
          }
          else
          {
            v164 = *(_QWORD *)(v526 + 16);
            swift_bridgeObjectRetain(v534);
            if (v164)
              goto LABEL_42;
          }
LABEL_142:
          swift_bridgeObjectRelease((DARootViewController *)v26, v165, v166, v167, v168, v169, v170, v171);
          v353 = *(char **)(v529 + v521);
          v354 = objc_msgSend(*(id *)(v529 + v522), "arrangedSubviews");
          v355 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
          v356 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v354, v355);

          if ((unint64_t)v356 >> 62)
          {
            if (v356 < 0)
              v458 = v356;
            else
              v458 = v356 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v356);
            v364 = _CocoaArrayWrapper.endIndex.getter(v458);
            swift_bridgeObjectRelease((DARootViewController *)v356, v459, v460, v461, v462, v463, v464, v465);
          }
          else
          {
            v364 = *(_QWORD *)((v356 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease((DARootViewController *)v356, v357, v358, v359, v360, v361, v362, v363);
          sub_10008D7DC(v353, v364, 1);
          v365 = *(void (**)(uint64_t))&v353[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler];
          if (v365)
          {
            v366 = *(_QWORD *)&v353[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler + 8];
            v367 = swift_retain(v366);
            v365(v367);
            sub_100035D74((uint64_t)v365, v366);
          }
          v368 = 0x5F4E574F4E4B4E55;
          v369 = (void *)0xED0000524F525245;
LABEL_156:
          sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, v368, v369);
          v389 = v388;
          sub_1000426B4(5);
          swift_bridgeObjectRelease(v389, v390, v391, v392, v393, v394, v395, v396);
          LOBYTE(v540) = 1;
          sub_100042238(3, 0x100000000, 0, 1);
          v314 = *(_QWORD *)(v529 + v528);
          v397 = v539;
          if (v314)
          {
            swift_beginAccess(v314 + 72, &v540, 33, 0);
            v398 = v397;
LABEL_192:
            v457 = v398;
            swift_retain(v314);
            sub_1000A83B8((Swift::Int *)v546, v457);
            swift_endAccess(&v540);
            swift_release(v314);

            goto LABEL_10;
          }

LABEL_10:
          v46 = v537 + 1;
          if (v537 + 1 == v531)
            break;
          continue;
        case 5uLL:
          v555 = 5;
          v178 = v518;
          *v518 = 0u;
          v178[1] = 0u;
          *((_QWORD *)v178 + 4) = 0;
          v556[40] = 2;
          goto LABEL_73;
        case 6uLL:
          v179 = objc_msgSend(v536, "attributes");
          v180 = sub_100035CA4((uint64_t *)&unk_10016ACD0);
          v181 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v179, &type metadata for String, v180, &protocol witness table for String);

          v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v524);
          v190 = (DARootViewController *)v183;
          if (!*(_QWORD *)(v181 + 16) || (v191 = sub_100072A94(v182, v183), (v183 & 1) == 0))
          {
            swift_bridgeObjectRelease(v190, (SEL)v183, v184, v185, v186, v187, v188, v189);
            swift_bridgeObjectRelease((DARootViewController *)v181, v267, v268, v269, v270, v271, v272, v273);
LABEL_96:
            v26 = v534;
            v208 = v539;
LABEL_97:
            v551 = 3;
            v274 = v516;
            *v516 = 0u;
            v274[1] = 0u;
            *((_QWORD *)v274 + 4) = 0;
            v552[40] = 2;
            goto LABEL_98;
          }
          v192 = *(void **)(*(_QWORD *)(v181 + 56) + 8 * v191);
          swift_unknownObjectRetain(v192);
          swift_bridgeObjectRelease(v190, v193, v194, v195, v196, v197, v198, v199);
          swift_bridgeObjectRelease((DARootViewController *)v181, v200, v201, v202, v203, v204, v205, v206);
          v546[0] = v192;
          if ((swift_dynamicCast(&v540, v546, v180, &type metadata for String, 6) & 1) == 0)
            goto LABEL_96;
          v207 = (DARootViewController *)v541;
          v26 = v534;
          v208 = v539;
          if (v540 != (DARootViewController *)0x646F50656D6F48 || v541 != 0xE700000000000000)
          {
            v209 = _stringCompareWithSmolCheck(_:_:expecting:)(v540, v541, 0x646F50656D6F48, 0xE700000000000000, 0);
            swift_bridgeObjectRelease(v207, v210, v211, v212, v213, v214, v215, v216);
            if ((v209 & 1) != 0)
              goto LABEL_137;
            goto LABEL_97;
          }
LABEL_82:

LABEL_83:
          swift_bridgeObjectRelease((DARootViewController *)0xE700000000000000, v157, v158, v159, v160, v161, v162, v163);
          goto LABEL_10;
        case 7uLL:
          v26 = v534;
          if (v534 >> 62)
          {
            swift_bridgeObjectRetain(v534);
            v217 = _CocoaArrayWrapper.endIndex.getter(v498);
            if (v217)
              goto LABEL_62;
          }
          else
          {
            v217 = *(_QWORD *)(v526 + 16);
            swift_bridgeObjectRetain(v534);
            if (v217)
            {
LABEL_62:
              v102 = v539;
              if (v525)
                v218 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
              else
                v218 = *(id *)(v26 + 32);
              v219 = v218;
              sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
              v44 = static NSObject.== infix(_:_:)(v219);

              if ((v44 & 1) != 0)
              {
LABEL_89:
                swift_bridgeObjectRelease((DARootViewController *)v26, v165, v166, v167, v168, v169, v170, v171);
LABEL_90:
                v120 = *(_QWORD *)(v529 + v528);
                if (v120)
                {
LABEL_91:
                  swift_beginAccess(v120 + 72, &v540, 33, 0);
                  swift_retain(v120);
                  v258 = (void *)sub_1000A7BD4(v102);
                  swift_endAccess(&v540);

                  swift_release(v120);
                  goto LABEL_10;
                }
                goto LABEL_9;
              }
              if (v217 != 1)
              {
                if (!v525)
                {
                  v370 = 5;
                  while (1)
                  {
                    v371 = v370 - 3;
                    if (__OFADD__(v370 - 4, 1))
                      goto LABEL_220;
                    v44 = (uint64_t)*(id *)(v26 + 8 * v370);
                    v372 = static NSObject.== infix(_:_:)(v44);

                    if ((v372 & 1) != 0)
                      goto LABEL_89;
                    ++v370;
                    if (v371 == v217)
                      goto LABEL_151;
                  }
                }
                v220 = 1;
                do
                {
                  v221 = specialized _ArrayBuffer._getElementSlowPath(_:)(v220, v26);
                  v222 = v220 + 1;
                  if (__OFADD__(v220, 1))
                    goto LABEL_216;
                  v223 = v221;
                  v44 = static NSObject.== infix(_:_:)(v221);
                  swift_unknownObjectRelease(v223);
                  if ((v44 & 1) != 0)
                    goto LABEL_89;
                  ++v220;
                }
                while (v222 != v217);
              }
            }
          }
LABEL_151:
          swift_bridgeObjectRelease((DARootViewController *)v26, v165, v166, v167, v168, v169, v170, v171);
          v373 = *(char **)(v529 + v521);
          v374 = objc_msgSend(*(id *)(v529 + v522), "arrangedSubviews");
          v375 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
          v376 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v374, v375);

          if ((unint64_t)v376 >> 62)
          {
            if (v376 < 0)
              v466 = v376;
            else
              v466 = v376 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v376);
            v384 = _CocoaArrayWrapper.endIndex.getter(v466);
            swift_bridgeObjectRelease((DARootViewController *)v376, v467, v468, v469, v470, v471, v472, v473);
          }
          else
          {
            v384 = *(_QWORD *)((v376 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease((DARootViewController *)v376, v377, v378, v379, v380, v381, v382, v383);
          sub_10008D7DC(v373, v384, 1);
          v385 = *(void (**)(uint64_t))&v373[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler];
          if (v385)
          {
            v386 = *(_QWORD *)&v373[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler + 8];
            v387 = swift_retain(v386);
            v385(v387);
            sub_100035D74((uint64_t)v385, v386);
          }
          v368 = 0xD000000000000015;
          v369 = (void *)v514;
          goto LABEL_156;
        case 8uLL:
          v557 = 6;
          v224 = v519;
          *v519 = 0u;
          v224[1] = 0u;
          *((_QWORD *)v224 + 4) = 0;
          v558[40] = 2;
LABEL_73:
          sub_100066B64(0);
          goto LABEL_74;
        case 9uLL:
        case 0xAuLL:
          v73 = swift_allocObject(v535, 72, 7);
          *(_OWORD *)(v73 + 16) = v523;
          v74 = (void *)qword_100172368;
          *(_QWORD *)(v73 + 56) = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
          *(_QWORD *)(v73 + 64) = sub_10009BB5C((unint64_t *)&qword_10016B690, (unint64_t *)&qword_10016B180, OS_os_log_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
          *(_QWORD *)(v73 + 32) = v74;
          v75 = (void *)static OS_os_log.default.getter(v74);
          v76 = static os_log_type_t.default.getter(v75);
          os_log(_:dso:log:type:_:)("Unimplemented Error Code cases", 30, 2, &_mh_execute_header, v75, v76, v73);
          swift_bridgeObjectRelease((DARootViewController *)v73, v77, v78, v79, v80, v81, v82, v83);

          goto LABEL_74;
        case 0xBuLL:
          v226 = objc_msgSend(v536, "attributes");
          v227 = sub_100035CA4((uint64_t *)&unk_10016ACD0);
          v228 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v226, &type metadata for String, v227, &protocol witness table for String);

          v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(v524);
          v237 = (DARootViewController *)v230;
          if (!*(_QWORD *)(v228 + 16) || (v238 = sub_100072A94(v229, v230), (v230 & 1) == 0))
          {
            swift_bridgeObjectRelease(v237, (SEL)v230, v231, v232, v233, v234, v235, v236);
            swift_bridgeObjectRelease((DARootViewController *)v228, v259, v260, v261, v262, v263, v264, v265);
LABEL_93:
            v26 = v534;
            v208 = v539;
            goto LABEL_94;
          }
          v239 = *(void **)(*(_QWORD *)(v228 + 56) + 8 * v238);
          swift_unknownObjectRetain(v239);
          swift_bridgeObjectRelease(v237, v240, v241, v242, v243, v244, v245, v246);
          swift_bridgeObjectRelease((DARootViewController *)v228, v247, v248, v249, v250, v251, v252, v253);
          v546[0] = v239;
          if ((swift_dynamicCast(&v540, v546, v227, &type metadata for String, 6) & 1) == 0)
            goto LABEL_93;
          v254 = (DARootViewController *)v541;
          v26 = v534;
          v208 = v539;
          if (v540 == (DARootViewController *)0x646F50656D6F48 && v541 == 0xE700000000000000)
            goto LABEL_82;
          v342 = _stringCompareWithSmolCheck(_:_:expecting:)(v540, v541, 0x646F50656D6F48, 0xE700000000000000, 0);
          swift_bridgeObjectRelease(v254, v343, v344, v345, v346, v347, v348, v349);
          if ((v342 & 1) != 0)
          {
LABEL_137:

            goto LABEL_10;
          }
LABEL_94:
          v553 = 4;
          v266 = v517;
          *v517 = 0u;
          v266[1] = 0u;
          *((_QWORD *)v266 + 4) = 0;
          v554[40] = 2;
LABEL_98:
          sub_100066B64(0);

          goto LABEL_10;
        case 0xCuLL:
          v26 = v534;
          if (v534 >> 62)
          {
            swift_bridgeObjectRetain(v534);
            v255 = _CocoaArrayWrapper.endIndex.getter(v498);
            if (!v255)
              goto LABEL_168;
          }
          else
          {
            v255 = *(_QWORD *)(v526 + 16);
            swift_bridgeObjectRetain(v534);
            if (!v255)
              goto LABEL_168;
          }
          if (v525)
            v256 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
          else
            v256 = *(id *)(v26 + 32);
          v257 = v256;
          v102 = v539;
          sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
          v44 = static NSObject.== infix(_:_:)(v257);

          if ((v44 & 1) != 0)
            goto LABEL_89;
          if (v255 == 1)
          {
LABEL_168:
            swift_bridgeObjectRelease((DARootViewController *)v26, v165, v166, v167, v168, v169, v170, v171);
            DeviceClass = GestaltGetDeviceClass();
            if (DeviceClass == 3)
              v406 = 0xD00000000000001CLL;
            else
              v406 = 0xD00000000000001DLL;
            v407 = (DARootViewController *)v513;
            if (DeviceClass == 3)
              v407 = (DARootViewController *)v511;
            if (DeviceClass == 2)
              v408 = 0xD00000000000001CLL;
            else
              v408 = v406;
            if (DeviceClass == 2)
              v409 = (DARootViewController *)v512;
            else
              v409 = v407;
            v410 = *(char **)(v529 + v521);
            v411 = objc_msgSend(*(id *)(v529 + v522), "arrangedSubviews");
            v412 = sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
            v413 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v411, v412);

            if ((unint64_t)v413 >> 62)
            {
              if (v413 < 0)
                v474 = v413;
              else
                v474 = v413 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v413);
              v421 = _CocoaArrayWrapper.endIndex.getter(v474);
              swift_bridgeObjectRelease((DARootViewController *)v413, v475, v476, v477, v478, v479, v480, v481);
            }
            else
            {
              v421 = *(_QWORD *)((v413 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease((DARootViewController *)v413, v414, v415, v416, v417, v418, v419, v420);
            sub_10008D7DC(v410, v421, 1);
            v422 = *(void (**)(uint64_t))&v410[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler];
            if (v422)
            {
              v423 = *(_QWORD *)&v410[OBJC_IVAR____TtC11Diagnostics14TestRunnerView_containerLayoutUpdateHandler + 8];
              v424 = swift_retain(v423);
              v422(v424);
              sub_100035D74((uint64_t)v422, v423);
            }
            sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, v408, v409);
            v426 = v425;
            sub_1000426B4(5);
            swift_bridgeObjectRelease(v426, v427, v428, v429, v430, v431, v432, v433);
            LOBYTE(v540) = 1;
            sub_100042238(3, 0x100000000, 0, 1);
            swift_bridgeObjectRelease(v409, v434, v435, v436, v437, v438, v439, v440);
            v441 = *(_QWORD *)(v529 + v528);
            if (v441)
            {
              swift_beginAccess(v441 + 72, &v540, 33, 0);
              v442 = v539;
              swift_retain(v441);
              sub_1000A83B8((Swift::Int *)v546, v442);
              swift_endAccess(&v540);
              swift_release(v441);

              v225 = v546[0];
            }
            else
            {
LABEL_74:
              v225 = v539;
            }

LABEL_76:
            v26 = v534;
            goto LABEL_10;
          }
          if (v525)
          {
            v315 = 1;
            while (1)
            {
              v316 = specialized _ArrayBuffer._getElementSlowPath(_:)(v315, v26);
              v317 = v315 + 1;
              if (__OFADD__(v315, 1))
                break;
              v318 = v316;
              v44 = static NSObject.== infix(_:_:)(v316);
              swift_unknownObjectRelease(v318);
              if ((v44 & 1) != 0)
                goto LABEL_89;
              ++v315;
              if (v317 == v255)
                goto LABEL_168;
            }
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
          }
          else
          {
            v402 = 5;
            while (1)
            {
              v403 = v402 - 3;
              if (__OFADD__(v402 - 4, 1))
                break;
              v44 = (uint64_t)*(id *)(v26 + 8 * v402);
              v404 = static NSObject.== infix(_:_:)(v44);

              if ((v404 & 1) != 0)
                goto LABEL_89;
              ++v402;
              if (v403 == v255)
                goto LABEL_168;
            }
          }
          __break(1u);
LABEL_223:
          if (v44 < 0)
            v482 = v44;
          else
            v482 = v44 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v44);
          v45 = _CocoaArrayWrapper.endIndex.getter(v482);
          swift_bridgeObjectRelease((DARootViewController *)v44, v483, v484, v485, v486, v487, v488, v489);
          if (!v45)
            goto LABEL_227;
          goto LABEL_5;
        default:
          v84 = static os_log_type_t.fault.getter(v71);
          v85 = qword_100172368;
          v86 = swift_allocObject(v535, 72, 7);
          *(_OWORD *)(v86 + 16) = v523;
          *(_QWORD *)(v86 + 56) = &type metadata for Int;
          *(_QWORD *)(v86 + 64) = &protocol witness table for Int;
          *(_QWORD *)(v86 + 32) = v50;
          os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "Unknown DeviceStateErrorCode: %d", v497);
          swift_bridgeObjectRelease((DARootViewController *)v86, v87, v88, v89, v90, v91, v92, v93);

          v3 = v538;
          goto LABEL_76;
      }
      break;
    }
  }
LABEL_227:
  swift_bridgeObjectRelease((DARootViewController *)v26, v37, v38, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease((DARootViewController *)v530, v490, v491, v492, v493, v494, v495, v496);
}

void sub_1000B7204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  DARootViewController *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  DARootViewController *v17;
  DARootViewController *v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  const char *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  SEL v46;
  id v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;
  char *v53;
  id v54;
  uint64_t v56;
  uint64_t v58;
  DARootViewController *v59;
  id v60;
  id v61;
  uint64_t v62;

  v5 = v4;
  if (!*(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView])
  {
    v62 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView;
    v8 = swift_allocObject(&unk_10013AF80, 17, 7);
    *(_BYTE *)(v8 + 16) = 0;
    v9 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0x5452415453, (void *)0xE500000000000000);
    v59 = v10;
    v60 = (id)v9;
    v11 = (_QWORD *)swift_allocObject(&unk_10013B020, 40, 7);
    v11[2] = v8;
    v11[3] = a3;
    v11[4] = a4;
    v12 = (void *)objc_opt_self(UIFontMetrics);
    swift_retain(v8);
    swift_retain(a4);
    v13 = objc_msgSend(v12, "defaultMetrics");
    v14 = (void *)objc_opt_self(UIFont);
    v15 = objc_msgSend(v14, "systemFontOfSize:", 20.0);
    v54 = objc_msgSend(v13, "scaledFontForFont:", v15);

    v16 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 1346980691, (void *)0xE400000000000000);
    v18 = v17;
    v19 = (_QWORD *)swift_allocObject(&unk_10013B048, 48, 7);
    v19[2] = v8;
    v19[3] = a3;
    v19[4] = a4;
    v19[5] = v5;
    swift_retain(v8);
    swift_retain(a4);
    v53 = v5;
    v20 = objc_msgSend(v12, "defaultMetrics");
    v21 = objc_msgSend(v14, "systemFontOfSize:", 20.0);
    v22 = objc_msgSend(v20, "scaledFontForFont:", v21);

    v23 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10010BE30;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_100047048();
    *(_QWORD *)(v24 + 32) = a1;
    *(_QWORD *)(v24 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    v25 = sub_10003FFA0(0, 0, v24, 0xD000000000000016, (void *)0x80000001001183B0);
    v56 = (uint64_t)v26;
    v58 = v25;
    swift_bridgeObjectRelease((DARootViewController *)v24, v26, v27, v28, v29, v30, v31, v32);
    v33 = sub_100035CA4(&qword_10016C728);
    v34 = swift_allocObject(v33, 128, 7);
    *(_OWORD *)(v34 + 16) = xmmword_10010C3D0;
    *(_QWORD *)(v34 + 32) = v16;
    *(_QWORD *)(v34 + 40) = v18;
    *(_QWORD *)(v34 + 48) = v22;
    *(_BYTE *)(v34 + 56) = 6;
    *(_QWORD *)(v34 + 64) = sub_1000B9768;
    *(_QWORD *)(v34 + 72) = v19;
    *(_QWORD *)(v34 + 80) = v60;
    *(_QWORD *)(v34 + 88) = v59;
    *(_QWORD *)(v34 + 96) = v54;
    *(_BYTE *)(v34 + 104) = 4;
    *(_QWORD *)(v34 + 112) = sub_1000B9728;
    *(_QWORD *)(v34 + 120) = v11;
    v35 = objc_allocWithZone((Class)type metadata accessor for PromptView());
    swift_bridgeObjectRetain(v18);
    v61 = v22;
    swift_retain(v19);
    swift_bridgeObjectRetain(v59);
    v36 = v54;
    swift_retain(v11);
    v37 = sub_100076DCC(10.0, v58, v56, 0, 0, 0, 0, v34, 0, 1, 1);
    v45 = v37;
    if (!*(_QWORD *)&v5[v62])
    {
      *(_QWORD *)&v5[v62] = v37;
      sub_10008DF14(v37, *(void **)&v53[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView], 1);
    }
    swift_bridgeObjectRelease(v18, v38, v39, v40, v41, v42, v43, v44);

    swift_release(v8);
    swift_release(v11);

    swift_bridgeObjectRelease(v59, v46, v47, v48, v49, v50, v51, v52);
    swift_release(v19);

  }
}

uint64_t sub_1000B7610(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = (_BYTE *)(a2 + 16);
  result = swift_beginAccess(a2 + 16, v8, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess(v5, &v7, 1, 0);
    *v5 = 1;
    return a3(1);
  }
  return result;
}

void sub_1000B7688(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  _BYTE *v5;
  uint64_t v6;
  _BYTE v7[24];

  v5 = (_BYTE *)(a2 + 16);
  swift_beginAccess(a2 + 16, v7, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess(v5, &v6, 1, 0);
    *v5 = 1;
    a3(0);
    sub_1000B8508();
  }
}

void sub_1000B7714(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  void *v6;
  int wapiCapability;
  id v8;
  unsigned int v9;
  DARootViewController *v10;
  id v11;
  id v12;
  id v13;
  id (*v14)();
  DARootViewController *v15;
  int v16;
  const char *v17;
  DARootViewController *v18;
  id v19;
  DARootViewController *v20;
  DARootViewController *v21;
  id v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  id v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  SEL v45;
  id v46;
  int v47;
  id v48;
  id v49;
  id v50;
  id v51;
  SEL v52;
  id v53;
  int v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id (*v59)();
  uint64_t v60;
  DARootViewController *v61;
  uint64_t v62;
  uint64_t v63;

  v5 = (id)MobileGestalt_get_current_device(a1);
  if (!v5)
  {
    __break(1u);
    return;
  }
  v6 = v5;
  wapiCapability = MobileGestalt_get_wapiCapability();

  v8 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v9 = objc_msgSend(v8, "isCheckerBoardActive");
  swift_unknownObjectRelease(v8);
  v63 = a1;
  if (v9)
  {
    v60 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000017, (void *)0x80000001001141C0);
    v61 = v10;
    v11 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    v12 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 20.0);
    v13 = objc_msgSend(v11, "scaledFontForFont:", v12);
    v14 = (id (*)())sub_1000B7C44;
  }
  else
  {
    if (byte_100172309 != 1)
    {
      v17 = "OPEN_WIFI_SETTINGS";
      v16 = wapiCapability;
      if (wapiCapability)
        v17 = "OPEN_WLAN_SETTINGS";
      v60 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000012, (void *)((unint64_t)(v17 - 32) | 0x8000000000000000));
      v61 = v18;
      v11 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
      v12 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 20.0);
      v13 = objc_msgSend(v11, "scaledFontForFont:", v12);
      v59 = sub_10008B60C;
      goto LABEL_10;
    }
    v60 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000017, (void *)0x80000001001141C0);
    v61 = v15;
    v11 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    v12 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 20.0);
    v13 = objc_msgSend(v11, "scaledFontForFont:", v12);
    v14 = (id (*)())sub_1000B7C84;
  }
  v59 = v14;
  v16 = wapiCapability;
LABEL_10:
  v19 = v13;

  v62 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 1346980691, (void *)0xE400000000000000);
  v21 = v20;
  v22 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
  v23 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 20.0);
  v24 = objc_msgSend(v22, "scaledFontForFont:", v23);

  v25 = (_QWORD *)swift_allocObject(&unk_10013AFF8, 40, 7);
  v25[2] = v2;
  v25[3] = v63;
  v25[4] = a2;
  v26 = sub_100035CA4((uint64_t *)&unk_10016BE40);
  v27 = swift_allocObject(v26, 72, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10010BE30;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  *(_QWORD *)(v27 + 64) = sub_100047048();
  *(_QWORD *)(v27 + 32) = v63;
  *(_QWORD *)(v27 + 40) = a2;
  swift_bridgeObjectRetain_n(a2, 2);
  v28 = v2;
  if (v16)
    v29 = 0x5145525F4E414C57;
  else
    v29 = 0x5145525F49464957;
  v30 = sub_10003FFA0(0, 0, v27, v29, (void *)0xED00004445524955);
  v32 = (uint64_t)v31;
  swift_bridgeObjectRelease((DARootViewController *)v27, v31, v33, v34, v35, v36, v37, v38);
  v39 = sub_100035CA4(&qword_10016C728);
  v40 = swift_allocObject(v39, 128, 7);
  *(_OWORD *)(v40 + 16) = xmmword_10010C3D0;
  *(_QWORD *)(v40 + 32) = v60;
  *(_QWORD *)(v40 + 40) = v61;
  *(_QWORD *)(v40 + 48) = v19;
  *(_BYTE *)(v40 + 56) = 7;
  *(_QWORD *)(v40 + 64) = v59;
  *(_QWORD *)(v40 + 72) = 0;
  *(_QWORD *)(v40 + 80) = v62;
  *(_QWORD *)(v40 + 88) = v21;
  *(_QWORD *)(v40 + 96) = v24;
  *(_BYTE *)(v40 + 104) = 7;
  *(_QWORD *)(v40 + 112) = sub_1000B96D0;
  *(_QWORD *)(v40 + 120) = v25;
  objc_allocWithZone((Class)type metadata accessor for PromptView());
  swift_bridgeObjectRetain(v61);
  v41 = v19;
  swift_bridgeObjectRetain(v21);
  v42 = v24;
  swift_retain(v25);
  v43 = sub_100076DCC(10.0, v30, v32, 0, 0, 0, 0, v40, 1, 0, 2);
  v44 = v43;
  if (!*(_QWORD *)&v28[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView])
  {
    *(_QWORD *)&v28[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView] = v43;
    sub_10008DF14(v43, *(void **)&v28[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView], 1);
  }

  swift_bridgeObjectRelease(v61, v45, v46, v47, v48, v49, v50, v51);
  swift_release(v25);

  swift_bridgeObjectRelease(v21, v52, v53, v54, v55, v56, v57, v58);
}

void sub_1000B7C44()
{
  sub_100066B64(0);
}

void sub_1000B7C84(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100098BDC(8u, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

double sub_1000B7C8C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  char *v30;
  double result;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = swift_allocObject(&unk_10013AF80, 17, 7);
  *(_BYTE *)(v5 + 16) = 0;
  v37 = sub_10003FFA0(0, 0, (uint64_t)_swiftEmptyArrayStorage, 1346980691, (void *)0xE400000000000000);
  v38 = v6;
  v7 = (_QWORD *)swift_allocObject(&unk_10013AFA8, 48, 7);
  v7[2] = v5;
  v7[3] = v2;
  v35 = a1;
  v7[4] = a1;
  v7[5] = a2;
  v8 = (void *)objc_opt_self(UIFontMetrics);
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  v9 = v2;
  v10 = objc_msgSend(v8, "defaultMetrics");
  v11 = (void *)objc_opt_self(UIFont);
  v12 = objc_msgSend(v11, "systemFontOfSize:", 20.0);
  v34 = objc_msgSend(v10, "scaledFontForFont:", v12);

  v32 = sub_10003FFA0(0, 0, (uint64_t)_swiftEmptyArrayStorage, 0x4C45434E4143, (void *)0xE600000000000000);
  v14 = v13;
  v15 = swift_allocObject(&unk_10013AFD0, 32, 7);
  *(_QWORD *)(v15 + 16) = v5;
  *(_QWORD *)(v15 + 24) = v9;
  swift_retain(v5);
  v33 = (char *)v9;
  v16 = objc_msgSend(v8, "defaultMetrics");
  v17 = objc_msgSend(v11, "systemFontOfSize:", 20.0);
  v18 = objc_msgSend(v16, "scaledFontForFont:", v17);

  if (a2)
  {
    v19 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_10010BE30;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_100047048();
    *(_QWORD *)(v20 + 32) = v35;
    *(_QWORD *)(v20 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    v36 = sub_10003FFA0(0, 0, v20, 0x4955535F50494B53, (void *)0xEA00000000004554);
    v22 = v21;
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v36 = sub_10003FFA0(v35, 0, (uint64_t)_swiftEmptyArrayStorage, 0x4955535F50494B53, (void *)0xEA00000000004554);
    v22 = v23;
  }
  v24 = sub_100035CA4(&qword_10016C728);
  v25 = swift_allocObject(v24, 128, 7);
  *(_OWORD *)(v25 + 16) = xmmword_10010C3D0;
  *(_QWORD *)(v25 + 32) = v32;
  *(_QWORD *)(v25 + 40) = v14;
  *(_QWORD *)(v25 + 48) = v18;
  *(_BYTE *)(v25 + 56) = 5;
  *(_QWORD *)(v25 + 64) = sub_1000B969C;
  *(_QWORD *)(v25 + 72) = v15;
  *(_QWORD *)(v25 + 80) = v37;
  *(_QWORD *)(v25 + 88) = v38;
  *(_QWORD *)(v25 + 96) = v34;
  *(_BYTE *)(v25 + 104) = 6;
  *(_QWORD *)(v25 + 112) = sub_1000B9664;
  *(_QWORD *)(v25 + 120) = v7;
  objc_allocWithZone((Class)type metadata accessor for PromptView());
  swift_bridgeObjectRetain(v14);
  v26 = v18;
  swift_retain(v15);
  swift_bridgeObjectRetain(v38);
  v27 = v34;
  swift_retain(v7);
  v28 = sub_100076DCC(10.0, v36, v22, 0, 0, 0, 0, v25, 0, 1, 3);
  v29 = v28;
  v30 = v33;
  if (!*(_QWORD *)&v33[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView])
  {
    *(_QWORD *)&v33[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView] = v28;
    sub_10008DF14(v28, *(void **)&v30[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView], 1);
  }

  swift_bridgeObjectRelease(v14);
  swift_release(v5);

  swift_release(v7);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

void sub_1000B80B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v8;
  uint64_t v9;
  _BYTE v10[24];

  v8 = (_BYTE *)(a2 + 16);
  swift_beginAccess(a2 + 16, v10, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess(v8, &v9, 1, 0);
    *v8 = 1;
    sub_1000B81B8(1, a4, a5);
  }
}

void sub_1000B813C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  _BYTE v5[24];

  v3 = (_BYTE *)(a2 + 16);
  swift_beginAccess(a2 + 16, v5, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess(v3, &v4, 1, 0);
    *v3 = 1;
    sub_1000B81B8(0, 0, 0);
  }
}

void sub_1000B81B8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  id v33;
  char v34[24];
  _QWORD v35[5];
  char v36[24];
  _BYTE v37[24];
  uint64_t v38;

  v4 = v3;
  if ((a1 & 1) != 0)
  {
    if (a3)
    {
      v7 = sub_100035CA4((uint64_t *)&unk_10016BE40);
      v8 = swift_allocObject(v7, 72, 7);
      *(_OWORD *)(v8 + 16) = xmmword_10010BE30;
      *(_QWORD *)(v8 + 56) = &type metadata for String;
      *(_QWORD *)(v8 + 64) = sub_100047048();
      *(_QWORD *)(v8 + 32) = a2;
      *(_QWORD *)(v8 + 40) = a3;
      swift_bridgeObjectRetain(a3);
      v9 = sub_10003FFA0(0, 0, v8, 0x474E495050494B53, (void *)0xEE0045544955535FLL);
      v11 = v10;
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v9 = sub_10003FFA0(a2, 0, (uint64_t)_swiftEmptyArrayStorage, 0x474E495050494B53, (void *)0xEE0045544955535FLL);
      v11 = v18;
    }
    v19 = *(void **)(v4 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView);
    if (v19)
    {
      v20 = v19;
      sub_10007801C(v9, v11);

    }
    swift_bridgeObjectRelease(v11);
    v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
    if (v21)
    {
      v22 = objc_msgSend(*(id *)(v21 + 40), "serialNumber");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = v4 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_controller;
      swift_beginAccess(v26, v36, 0, 0);
      sub_1000B9008(v26, (uint64_t)v37);
      if (!v38)
      {
        swift_bridgeObjectRelease(v25);
        sub_100036FA0((uint64_t)v37, (uint64_t *)&unk_10016D850);
        return;
      }
      sub_10003CE84((uint64_t)v37, (uint64_t)v35);
      sub_100036FA0((uint64_t)v37, (uint64_t *)&unk_10016D850);
      v27 = *sub_10003CEC8(v35, v35[3]);
      swift_beginAccess(v27 + 56, v34, 0, 0);
      v28 = *(_QWORD *)(v27 + 56);
      if (*(_QWORD *)(v28 + 16))
      {
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v28);
        v29 = sub_100072A94(v23, v25);
        if ((v30 & 1) != 0)
        {
          v31 = *(void **)(*(_QWORD *)(v28 + 56) + 8 * v29);
          swift_unknownObjectRetain(v31);
          swift_bridgeObjectRelease(v25);
          swift_bridgeObjectRelease(v28);
          objc_msgSend(v31, "idle");
          swift_bridgeObjectRelease(v25);
          swift_unknownObjectRelease(v31);
LABEL_23:
          sub_10003CEEC(v35);
          return;
        }
        swift_bridgeObjectRelease_n(v25, 2);
        v32 = v28;
      }
      else
      {
        v32 = v25;
      }
      swift_bridgeObjectRelease(v32);
      goto LABEL_23;
    }
  }
  else
  {
    v12 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView;
    v13 = *(void **)(v3 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView);
    if (v13)
    {
      v14 = *(void **)(v3 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
      v33 = v13;
      sub_10008DF14(v14, v33, 1);
      v15 = *(void **)(v3 + v12);
      *(_QWORD *)(v3 + v12) = 0;

      v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
      if (v16 && (*(_BYTE *)(v16 + 19) & 1) != 0)
      {
        *(_BYTE *)(v16 + 19) = 0;
        v17 = *(_QWORD *)(v16 + 80);
        if ((v17 & 8) == 0)
          *(_QWORD *)(v16 + 80) = v17 | 8;
        swift_retain(v16);
        sub_100051044();
        swift_release(v16);
      }

    }
  }
}

void sub_1000B8508()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v1 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView);
  if (v2)
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView);
    v7 = v2;
    sub_10008DF14(v3, v7, 1);
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;

    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
    if (v5 && *(_BYTE *)(v5 + 19) == 1)
    {
      *(_BYTE *)(v5 + 19) = 0;
      v6 = *(_QWORD *)(v5 + 80);
      if ((v6 & 8) == 0)
        *(_QWORD *)(v5 + 80) = v6 | 8;
      swift_retain(v5);
      sub_100051044();
      swift_release(v5);
    }

  }
}

uint64_t sub_1000B85E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  DARootViewController *v5;
  DARootViewController *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  SEL v27;
  id v28;
  int v29;
  id v30;
  id v31;
  id v32;
  id v33;
  SEL v34;
  id v35;
  int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  SEL v41;
  id v42;
  int v43;
  id v44;
  id v45;
  id v46;
  id v47;
  DARootViewController *v48;
  uint64_t v49;
  _QWORD v50[5];
  _BYTE v51[24];
  _BYTE v52[24];
  uint64_t v53;

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
  if (v1)
  {
    v2 = result;
    v3 = objc_msgSend(*(id *)(v1 + 40), "serialNumber");
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = v2 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_controller;
    swift_beginAccess(v7, v51, 0, 0);
    sub_1000B9008(v7, (uint64_t)v52);
    if (!v53)
    {
      swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
      return sub_100036FA0((uint64_t)v52, (uint64_t *)&unk_10016D850);
    }
    sub_10003CE84((uint64_t)v52, (uint64_t)v50);
    sub_100036FA0((uint64_t)v52, (uint64_t *)&unk_10016D850);
    v15 = *sub_10003CEC8(v50, v50[3]);
    swift_beginAccess(v15 + 56, &v49, 0, 0);
    v23 = *(_QWORD *)(v15 + 56);
    if (*(_QWORD *)(v23 + 16))
    {
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v23);
      v24 = sub_100072A94(v4, (uint64_t)v6);
      if ((v25 & 1) != 0)
      {
        v26 = *(void **)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_unknownObjectRetain(v26);
        swift_bridgeObjectRelease(v6, v27, v28, v29, v30, v31, v32, v33);
        swift_bridgeObjectRelease((DARootViewController *)v23, v34, v35, v36, v37, v38, v39, v40);
        objc_msgSend(v26, "end");
        swift_bridgeObjectRelease(v6, v41, v42, v43, v44, v45, v46, v47);
        swift_unknownObjectRelease(v26);
        return sub_10003CEEC(v50);
      }
      swift_bridgeObjectRelease_n(v6, 2);
      v48 = (DARootViewController *)v23;
    }
    else
    {
      v48 = v6;
    }
    swift_bridgeObjectRelease(v48, v16, v17, v18, v19, v20, v21, v22);
    return sub_10003CEEC(v50);
  }
  return result;
}

void sub_1000B877C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
  if (v1)
  {
    v2 = objc_allocWithZone((Class)type metadata accessor for HistoryTableViewController());
    v3 = swift_retain(v1);
    v4 = sub_1000D6AF4(v3);
    v7 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v4);

    v5 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    if (v6 == (id)1)
      objc_msgSend(v7, "setModalPresentationStyle:", 2);
    objc_msgSend(v7, "scheduleModalPresentationWithPriority:animated:presentationCompletion:", 0, 1, 0);
    swift_release(v1);

  }
}

id sub_1000B888C(uint64_t a1, uint64_t a2, DARootViewController *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  objc_super v22;

  v6 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_deviceInformationView;
  v7 = type metadata accessor for DeviceInformationView();
  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v9 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v8, "init");
  v10 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView;
  v11 = type metadata accessor for TestRunnerView();
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11)), "init");
  *(_QWORD *)&v9[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView] = 0;

  if (a3)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v12 = 0;
  }
  v22.receiver = v9;
  v22.super_class = (Class)type metadata accessor for CardViewSessionCell();
  v20 = objc_msgSendSuper2(&v22, "initWithStyle:reuseIdentifier:", a1, v12);

  return v20;
}

id sub_1000B89D4(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  v3 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_deviceInformationView;
  v4 = type metadata accessor for DeviceInformationView();
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  v6 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v5, "init");
  v7 = OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_testRunnerView;
  v8 = type metadata accessor for TestRunnerView();
  *(_QWORD *)&v6[v7] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "init");
  *(_QWORD *)&v6[OBJC_IVAR____TtC11Diagnostics19CardViewSessionCell_promptView] = 0;

  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for CardViewSessionCell();
  v9 = objc_msgSendSuper2(&v11, "initWithCoder:", a1);

  return v9;
}

void sub_1000B8AC0()
{
  uint64_t v0;

}

id sub_1000B8AFC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardViewSessionCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardViewSessionCell()
{
  return objc_opt_self(_TtC11Diagnostics19CardViewSessionCell);
}

void sub_1000B8B94(double a1, uint64_t a2, void *a3, char a4)
{
  sub_1000B8BBC(a3, a4 & 1, a1);
}

void sub_1000B8BBC(void *a1, char a2, double a3)
{
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  DARootViewController *v7;
  DARootViewController *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  SEL v17;
  id v18;
  int v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  NSString v30;
  unsigned int v31;
  double v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  char *v37;
  id v38;
  _QWORD v39[5];
  char v40[24];
  void *v41;
  uint64_t v42;
  uint64_t (*v43)();
  uint64_t v44;
  void (*v45)();
  uint64_t v46;
  char v47;

  if ((a2 & 1) != 0)
  {
    v24 = objc_msgSend(a1, "imageView");
    if (!v24)
      return;
    v25 = v24;
    v26 = *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState];
    if (v26 && *(_BYTE *)(v26 + 32) == 4)
    {
      v27 = swift_allocObject(&unk_10013AD78, 24, 7);
      *(_QWORD *)(v27 + 16) = v3;
      v41 = v25;
      v42 = v26;
      v43 = 0;
      v44 = 0;
      v45 = sub_1000B97D8;
      v46 = v27;
      v47 = 1;
      v28 = v3;
      v38 = v25;
      swift_retain(v26);
      sub_100066B64(0);
    }
    else
    {
      v27 = swift_allocObject(&unk_10013AD28, 24, 7);
      *(_QWORD *)(v27 + 16) = v3;
      v36 = swift_allocObject(&unk_10013AD50, 24, 7);
      *(_QWORD *)(v36 + 16) = v3;
      v41 = v25;
      v42 = v26;
      v43 = sub_1000B8FF8;
      v44 = v27;
      v45 = sub_1000B9000;
      v46 = v36;
      v47 = 1;
      v37 = v3;
      v38 = v25;
      swift_retain(v26);
      sub_100066B64(0);
      swift_release(v36);
    }
    swift_release(v27);
    swift_release(v26);

    v35 = v38;
    goto LABEL_21;
  }
  if (qword_10016A5E0 != -1)
    swift_once(&qword_10016A5E0, sub_10002F774);
  if (*(_BYTE *)(qword_1001722E0 + OBJC_IVAR____TtC11Diagnostics19SetupViewController_termsAndConditionsAccepted) != 1)
  {
    sub_10003B9C0(3, 0, a3);
    sub_10003C028();
    sub_10003C27C();
    v29 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "BOOLForKey:", v30);

    if (!v31)
    {
      v33 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
      objc_msgSend(v33, "isInBoxUpdateModeActive");
      swift_unknownObjectRelease(v33);
    }
    sub_10003B9C0(4, 1, v32);
    sub_10003BEF4();
    if (qword_10016A5F8 != -1)
      swift_once(&qword_10016A5F8, sub_100048E78);
    v34 = (void *)qword_10016B3C0;
    qword_10016B3C0 = 0;

    *(_BYTE *)(qword_1001722E0 + OBJC_IVAR____TtC11Diagnostics19SetupViewController_entryReason) = 2;
    if (qword_10016A600 != -1)
      swift_once(&qword_10016A600, sub_1000490B8);
    v35 = objc_msgSend((id)qword_100172310, "popToRootViewControllerAnimated:", 1);
LABEL_21:

    return;
  }
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState];
  if (v4)
  {
    v5 = objc_msgSend(*(id *)(v4 + 40), "serialNumber");
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = (uint64_t)&v3[OBJC_IVAR____TtC11Diagnostics12CardViewCell_controller];
    swift_beginAccess(v9, v40, 0, 0);
    sub_1000B9008(v9, (uint64_t)&v41);
    if (v44)
    {
      sub_10003CE84((uint64_t)&v41, (uint64_t)v39);
      sub_100036FA0((uint64_t)&v41, (uint64_t *)&unk_10016D850);
      sub_10003CEC8(v39, v39[3]);
      sub_1000A20FC(v6, (uint64_t)v8);
      swift_bridgeObjectRelease(v8, v17, v18, v19, v20, v21, v22, v23);
      sub_10003CEEC(v39);
    }
    else
    {
      swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
      sub_100036FA0((uint64_t)&v41, (uint64_t *)&unk_10016D850);
    }
  }
}

uint64_t sub_1000B8FD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B8FF8()
{
  uint64_t v0;

  return sub_1000B85E4(*(_QWORD *)(v0 + 16));
}

void sub_1000B9000()
{
  uint64_t v0;

  sub_1000B877C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000B9008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100035CA4((uint64_t *)&unk_10016D850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000B9050(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  SEL v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  const char *v52;
  void *v53;
  int v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  char v62;
  SEL v63;
  id v64;
  int v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD v78[5];
  DARootViewController *v79;

  v3 = a1;
  v79 = &_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = __CocoaSet.makeIterator()(a1);
    v5 = sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
    v6 = sub_10009BB5C((unint64_t *)&qword_10016CD80, (unint64_t *)&unk_10016D870, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v78, v4, v5, v6);
    v3 = v78[0];
    v7 = v78[1];
    v8 = v78[2];
    v9 = v78[3];
    v10 = v78[4];
  }
  else
  {
    v9 = 0;
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v7 = a1 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a1 + 56);
    v8 = v12;
  }
  v73 = (unint64_t)(v8 + 64) >> 6;
  v15 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v15 = a2;
  v70 = v15;
  v74 = a2 & 0xC000000000000001;
  v72 = v3;
  v71 = v7;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_15;
LABEL_35:
  v30 = __CocoaSet.Iterator.next()(a1);
  if (!v30)
    goto LABEL_61;
  v31 = v30;
  v76 = v30;
  v32 = sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
  swift_unknownObjectRetain(v31);
  swift_dynamicCast(&v77, &v76, (char *)&type metadata for Swift.AnyObject + 8, v32, 7);
  v29 = v77;
  swift_unknownObjectRelease(v31);
  v25 = v9;
  v23 = v10;
  if (!v29)
    goto LABEL_61;
  while (1)
  {
    if ((unint64_t)a2 >> 62)
    {
      swift_bridgeObjectRetain(a2);
      v33 = _CocoaArrayWrapper.endIndex.getter(v70);
      v75 = v25;
      if (!v33)
        goto LABEL_43;
    }
    else
    {
      v33 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a2);
      v75 = v25;
      if (!v33)
        goto LABEL_43;
    }
    if (v74)
      v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    else
      v41 = *(id *)(a2 + 32);
    v42 = v41;
    sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
    v43 = static NSObject.== infix(_:_:)(v42);

    if ((v43 & 1) != 0)
    {

      swift_bridgeObjectRelease((DARootViewController *)a2, v16, v17, v18, v19, v20, v21, v22);
      goto LABEL_14;
    }
    if (v33 != 1)
    {
      if (v74)
      {
        v47 = 1;
        while (1)
        {
          v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(v47, a2);
          v49 = v47 + 1;
          if (__OFADD__(v47, 1))
            break;
          v50 = v48;
          v51 = static NSObject.== infix(_:_:)(v48);
          swift_unknownObjectRelease(v50);
          if ((v51 & 1) != 0)
            goto LABEL_56;
          ++v47;
          if (v49 == v33)
            goto LABEL_55;
        }
        __break(1u);
      }
      else
      {
        v59 = 5;
        while (1)
        {
          v60 = v59 - 3;
          if (__OFADD__(v59 - 4, 1))
            break;
          v61 = *(id *)(a2 + 8 * v59);
          v62 = static NSObject.== infix(_:_:)(v61);

          if ((v62 & 1) != 0)
          {
LABEL_56:

            swift_bridgeObjectRelease((DARootViewController *)a2, v63, v64, v65, v66, v67, v68, v69);
            v9 = v75;
            v10 = v23;
            v7 = v71;
            v3 = v72;
            if ((v72 & 0x8000000000000000) == 0)
              goto LABEL_15;
            goto LABEL_35;
          }
          ++v59;
          if (v60 == v33)
          {
LABEL_55:
            swift_bridgeObjectRelease((DARootViewController *)a2, v52, v53, v54, v55, v56, v57, v58);
            v7 = v71;
            v3 = v72;
            goto LABEL_44;
          }
        }
      }
      __break(1u);
LABEL_64:
      __break(1u);
      return;
    }
LABEL_43:
    swift_bridgeObjectRelease((DARootViewController *)a2, v34, v35, v36, v37, v38, v39, v40);
LABEL_44:
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v44);
    v45 = *(_QWORD *)v79->remoteCardFilter;
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v45);
    v46 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v29);
    a1 = specialized ContiguousArray._endMutation()(v46);
LABEL_14:
    v9 = v75;
    v10 = v23;
    if (v3 < 0)
      goto LABEL_35;
LABEL_15:
    if (!v10)
      break;
    v23 = (v10 - 1) & v10;
    v24 = __clz(__rbit64(v10)) | (v9 << 6);
    v25 = v9;
LABEL_33:
    v29 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v24);
    if (!v29)
      goto LABEL_61;
  }
  v26 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_64;
  if (v26 >= v73)
    goto LABEL_61;
  v27 = *(_QWORD *)(v7 + 8 * v26);
  v25 = v9 + 1;
  if (v27)
    goto LABEL_32;
  v25 = v9 + 2;
  if (v9 + 2 >= v73)
    goto LABEL_61;
  v27 = *(_QWORD *)(v7 + 8 * v25);
  if (v27)
    goto LABEL_32;
  v25 = v9 + 3;
  if (v9 + 3 >= v73)
    goto LABEL_61;
  v27 = *(_QWORD *)(v7 + 8 * v25);
  if (v27)
    goto LABEL_32;
  v25 = v9 + 4;
  if (v9 + 4 >= v73)
    goto LABEL_61;
  v27 = *(_QWORD *)(v7 + 8 * v25);
  if (v27)
    goto LABEL_32;
  v25 = v9 + 5;
  if (v9 + 5 >= v73)
    goto LABEL_61;
  v27 = *(_QWORD *)(v7 + 8 * v25);
  if (v27)
  {
LABEL_32:
    v23 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v25 << 6);
    goto LABEL_33;
  }
  v28 = v9 + 6;
  while (v73 != v28)
  {
    v27 = *(_QWORD *)(v7 + 8 * v28++);
    if (v27)
    {
      v25 = v28 - 1;
      goto LABEL_32;
    }
  }
LABEL_61:
  sub_100040800(v3);
}

uint64_t sub_1000B94D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B94FC(uint64_t a1)
{
  uint64_t v1;

  sub_1000B52DC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000B9504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B9514(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B951C(uint64_t result)
{
  uint64_t v1;

  if (result != 1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC11Diagnostics23DashboardViewController_cardManager)
             + OBJC_IVAR____TtC11Diagnostics11CardManager_persistentOnly) = 1;
    return sub_1000E16E4();
  }
  return result;
}

uint64_t sub_1000B956C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B9590()
{
  uint64_t v0;

  sub_1000B43E0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000B9598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModalPresentationCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B95DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100035CA4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B9620()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000B9630()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B9664(uint64_t a1)
{
  uint64_t *v1;

  sub_1000B80B0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000B9670()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000B969C(uint64_t a1)
{
  uint64_t v1;

  sub_1000B813C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000B96A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000B96D0()
{
  uint64_t v0;

  sub_1000B81B8(1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000B96FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B9728(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B7610(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000B9734()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B9768(uint64_t a1)
{
  uint64_t v1;

  sub_1000B7688(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24));
}

uint64_t sub_1000B9774()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1000B97F0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  const char *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;

  if (!a1)
    goto LABEL_22;
  v2 = objc_opt_self(UINavigationController);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = a1;
    v6 = objc_msgSend(v4, "visibleViewController");
    sub_1000B97F0(v6);

    return;
  }
  v7 = objc_opt_self(UITabBarController);
  v8 = swift_dynamicCastObjCClass(a1, v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = a1;
    v11 = objc_msgSend(v9, "selectedViewController");
    if (v11)
    {
      v12 = v11;
      v13 = v11;
      sub_1000B97F0(v12);

LABEL_10:
      return;
    }

  }
  v14 = objc_msgSend(a1, "presentedViewController");
  if (v14)
  {
    v15 = v14;
    v13 = v14;
    sub_1000B97F0(v15);
    goto LABEL_10;
  }
  v16 = objc_msgSend(a1, "childViewControllers");
  v17 = sub_100053F50();
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v36 = v18;
    else
      v36 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v37 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease((DARootViewController *)v18, v38, v39, v40, v41, v42, v43, v44);
    if (v37)
      goto LABEL_13;
    goto LABEL_21;
  }
  if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_21:
    swift_bridgeObjectRelease((DARootViewController *)v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_22:
    v45 = a1;
    return;
  }
LABEL_13:
  if ((v18 & 0xC000000000000001) != 0)
  {
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v26 = *(id *)(v18 + 32);
LABEL_16:
    v34 = v26;
    swift_bridgeObjectRelease((DARootViewController *)v18, v27, v28, v29, v30, v31, v32, v33);
    v35 = v34;
    sub_1000B97F0(v34);

    return;
  }
  __break(1u);
}

DARootViewController *sub_1000B9A00(uint64_t a1)
{
  DARootViewController **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  DARootViewController *result;
  const char *v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  SEL v46;
  id v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease((DARootViewController *)a1, v30, v31, v32, v33, v34, v35, v36);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = (uint64_t)*v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v37 = (uint64_t)*v1;
  else
    v37 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease((DARootViewController *)v4, v38, v39, v40, v41, v42, v43, v44);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = (uint64_t)*v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = (DARootViewController *)v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1, v10, v11, v12, v13, v14, v15, v16);
    *v1 = (DARootViewController *)v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = (DARootViewController *)sub_1000BCEE8(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v19 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v45 = v4;
    else
      v45 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease((DARootViewController *)v4, v46, v47, v48, v49, v50, v51, v52);
  }
  if (v19 < 1)
    goto LABEL_19;
  v25 = *(_QWORD *)(((unint64_t)*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v26 = __OFADD__(v25, v19);
  v27 = v25 + v19;
  if (!v26)
  {
    *(_QWORD *)(((unint64_t)*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v27;
LABEL_19:
    swift_bridgeObjectRelease(result, v18, (id)v19, v20, v21, v22, v23, v24);
    return (DARootViewController *)specialized Array._endMutation()(v28);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B9BB8(uint64_t result)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;

  v4 = v2;
  v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = __CocoaSet.count.getter(result);
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(result + 16);
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v7 < 0)
    v23 = *v4;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  result = swift_bridgeObjectRelease(v7);
  v9 = v24 + v6;
  if (__OFADD__(v24, v6))
    goto LABEL_30;
LABEL_8:
  v10 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v10;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v29 = v10;
    else
      v29 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9)
    v14 = v9;
  swift_bridgeObjectRetain(v10);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v14, 1, v10);
  swift_bridgeObjectRelease(*v4);
  *v4 = v15;
  v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (*(_QWORD *)(v13 + 24) >> 1) - v16;
  result = (uint64_t)sub_1000926A0(&v56, (uint64_t **)(v13 + 8 * v16 + 32), v17, v5);
  if (result < v6)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (result >= 1)
  {
    v18 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = __OFADD__(v18, result);
    v20 = v18 + result;
    if (v19)
    {
      __break(1u);
LABEL_42:
      v30 = __CocoaSet.Iterator.next()(result);
      if (!v30)
        goto LABEL_86;
      v31 = v30;
      v54 = v30;
      v32 = sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
      swift_unknownObjectRetain(v31);
      swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v32, 7);
      v28 = v55;
      result = swift_unknownObjectRelease(v31);
      while (2)
      {
        if (!v28)
        {
          v6 = v56;
LABEL_86:
          v21 = v6;
          goto LABEL_24;
        }
        while (1)
        {
          v33 = *v4 & 0xFFFFFFFFFFFFFF8;
          v34 = *(_QWORD *)(v33 + 0x18);
          if (v3 + 1 > (uint64_t)(v34 >> 1))
          {
            result = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v3 + 1, 1);
            v33 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          v35 = *(_QWORD *)(v33 + 24) >> 1;
          if (v3 < v35)
            break;
LABEL_46:
          *(_QWORD *)(v33 + 16) = v3;
        }
        v36 = v33 + 32;
        while (1)
        {
          *(_QWORD *)(v36 + 8 * v3++) = v28;
          v37 = v56;
          v38 = v59;
          if ((v56 & 0x8000000000000000) == 0)
            break;
          v41 = __CocoaSet.Iterator.next()(result);
          if (!v41)
            goto LABEL_84;
          v42 = v41;
          v54 = v41;
          v43 = sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
          swift_unknownObjectRetain(v42);
          swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v43, 7);
          v28 = v55;
          result = swift_unknownObjectRelease(v42);
LABEL_58:
          if (!v28)
          {
            v37 = v56;
LABEL_84:
            *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            v21 = v37;
            goto LABEL_24;
          }
          if (v3 >= v35)
          {
            v33 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_46;
          }
        }
        if (v60)
        {
          v39 = (v60 - 1) & v60;
          v40 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_54:
          v28 = *(void **)(*(_QWORD *)(v56 + 48) + 8 * v40);
          result = v28;
LABEL_55:
          v59 = v38;
          v60 = v39;
          goto LABEL_58;
        }
        v44 = v59 + 1;
        if (__OFADD__(v59, 1))
        {
          __break(1u);
LABEL_109:
          v28 = 0;
          v26 = 0;
          v25 = v1;
LABEL_36:
          v59 = v25;
          v60 = v26;
          continue;
        }
        break;
      }
      v45 = (unint64_t)(v58 + 64) >> 6;
      if (v44 >= v45)
      {
        v28 = 0;
        v39 = 0;
        goto LABEL_55;
      }
      v46 = *(_QWORD *)(v57 + 8 * v44);
      if (v46)
      {
LABEL_64:
        v39 = (v46 - 1) & v46;
        v40 = __clz(__rbit64(v46)) + (v44 << 6);
        v38 = v44;
        goto LABEL_54;
      }
      v47 = v59 + 2;
      if (v59 + 2 < v45)
      {
        v46 = *(_QWORD *)(v57 + 8 * v47);
        if (v46)
        {
LABEL_68:
          v44 = v47;
          goto LABEL_64;
        }
        v1 = v59 + 3;
        if (v59 + 3 >= v45)
          goto LABEL_81;
        v46 = *(_QWORD *)(v57 + 8 * v1);
        if (v46)
        {
          v44 = v59 + 3;
          goto LABEL_64;
        }
        v47 = v59 + 4;
        if (v59 + 4 >= v45)
        {
          v28 = 0;
          v39 = 0;
          v38 = v59 + 3;
          goto LABEL_55;
        }
        v46 = *(_QWORD *)(v57 + 8 * v47);
        if (v46)
          goto LABEL_68;
        v44 = v59 + 5;
        if (v59 + 5 >= v45)
        {
LABEL_81:
          v28 = 0;
          v39 = 0;
          v38 = v47;
          goto LABEL_55;
        }
        v46 = *(_QWORD *)(v57 + 8 * v44);
        if (v46)
          goto LABEL_64;
        v44 = v45 - 1;
        v48 = v59 + 6;
        while (v45 != v48)
        {
          v46 = *(_QWORD *)(v57 + 8 * v48++);
          if (v46)
          {
            v44 = v48 - 1;
            goto LABEL_64;
          }
        }
      }
      v28 = 0;
      v39 = 0;
      v38 = v44;
      goto LABEL_55;
    }
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
  }
  if (result != v17)
  {
    v21 = v56;
LABEL_24:
    v22 = sub_100040800(v21);
    return specialized Array._endMutation()(v22);
  }
LABEL_32:
  v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v56;
  v25 = v59;
  if (v56 < 0)
    goto LABEL_42;
  if (v60)
  {
    v26 = (v60 - 1) & v60;
    v27 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_35:
    v28 = *(void **)(*(_QWORD *)(v56 + 48) + 8 * v27);
    result = v28;
    goto LABEL_36;
  }
  v49 = v59 + 1;
  if (!__OFADD__(v59, 1))
  {
    v50 = (unint64_t)(v58 + 64) >> 6;
    if (v49 >= v50)
    {
      v28 = 0;
      v26 = 0;
      goto LABEL_36;
    }
    v51 = *(_QWORD *)(v57 + 8 * v49);
    if (v51)
      goto LABEL_90;
    v52 = v59 + 2;
    if (v59 + 2 >= v50)
    {
LABEL_106:
      v28 = 0;
      v26 = 0;
      v25 = v49;
      goto LABEL_36;
    }
    v51 = *(_QWORD *)(v57 + 8 * v52);
    if (v51)
      goto LABEL_94;
    v1 = v59 + 3;
    if (v59 + 3 < v50)
    {
      v51 = *(_QWORD *)(v57 + 8 * v1);
      if (v51)
      {
        v49 = v59 + 3;
        goto LABEL_90;
      }
      v52 = v59 + 4;
      if (v59 + 4 >= v50)
        goto LABEL_109;
      v51 = *(_QWORD *)(v57 + 8 * v52);
      if (v51)
      {
LABEL_94:
        v49 = v52;
LABEL_90:
        v26 = (v51 - 1) & v51;
        v27 = __clz(__rbit64(v51)) + (v49 << 6);
        v25 = v49;
        goto LABEL_35;
      }
      v49 = v59 + 5;
      if (v59 + 5 < v50)
      {
        v51 = *(_QWORD *)(v57 + 8 * v49);
        if (!v51)
        {
          v49 = v50 - 1;
          v53 = v59 + 6;
          do
          {
            if (v50 == v53)
              goto LABEL_106;
            v51 = *(_QWORD *)(v57 + 8 * v53++);
          }
          while (!v51);
          v49 = v53 - 1;
        }
        goto LABEL_90;
      }
    }
    v28 = 0;
    v26 = 0;
    v25 = v52;
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BA1B4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_100091CA0(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for URL(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

DARootViewController *sub_1000BA31C(uint64_t a1)
{
  DARootViewController **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  DARootViewController *result;
  const char *v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  SEL v46;
  id v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease((DARootViewController *)a1, v30, v31, v32, v33, v34, v35, v36);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = (uint64_t)*v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v37 = (uint64_t)*v1;
  else
    v37 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease((DARootViewController *)v4, v38, v39, v40, v41, v42, v43, v44);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = (uint64_t)*v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = (DARootViewController *)v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1, v10, v11, v12, v13, v14, v15, v16);
    *v1 = (DARootViewController *)v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = (DARootViewController *)sub_1000BD310(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v19 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v45 = v4;
    else
      v45 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease((DARootViewController *)v4, v46, v47, v48, v49, v50, v51, v52);
  }
  if (v19 < 1)
    goto LABEL_19;
  v25 = *(_QWORD *)(((unint64_t)*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v26 = __OFADD__(v25, v19);
  v27 = v25 + v19;
  if (!v26)
  {
    *(_QWORD *)(((unint64_t)*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v27;
LABEL_19:
    swift_bridgeObjectRelease(result, v18, (id)v19, v20, v21, v22, v23, v24);
    return (DARootViewController *)specialized Array._endMutation()(v28);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BA4D4(uint64_t a1)
{
  int64_t v1;
  DARootViewController *v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  unint64_t v15;
  unint64_t v16;
  DARootViewController *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[2];
  __int128 v29;
  _OWORD v30[2];
  _QWORD v31[2];
  _BYTE v32[32];
  _OWORD v33[2];
  uint64_t v34;
  DARootViewController *v35;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (!v1)
    return (uint64_t)v2;
  v35 = &_swiftEmptyArrayStorage;
  sub_1000572F4(0, v1, 0);
  result = sub_1000BD814(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v25 = v5;
  v26 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_26;
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = *v11;
    v12 = v11[1];
    sub_1000370B0(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)v32);
    v31[0] = v13;
    v31[1] = v12;
    *(_QWORD *)&v29 = v13;
    *((_QWORD *)&v29 + 1) = v12;
    sub_1000370B0((uint64_t)v32, (uint64_t)v30);
    v27 = v29;
    v28[0] = v30[0];
    v28[1] = v30[1];
    swift_bridgeObjectRetain_n(v12, 2);
    sub_1000BD89C((uint64_t)v31);
    v14 = String._bridgeToObjectiveC()();
    sub_1000370B0((uint64_t)v28, (uint64_t)v33 + 8);
    *(_QWORD *)&v33[0] = v14;
    sub_1000BD89C((uint64_t)&v27);
    v2 = v35;
    result = swift_isUniquelyReferenced_nonNull_native(v35);
    if ((result & 1) == 0)
    {
      result = sub_1000572F4(0, *(_QWORD *)v2->remoteCardFilter + 1, 1);
      v2 = v35;
    }
    v16 = *(_QWORD *)v2->remoteCardFilter;
    v15 = *(_QWORD *)&v2->remoteCardFilter[8];
    if (v16 >= v15 >> 1)
    {
      result = sub_1000572F4(v15 > 1, v16 + 1, 1);
      v2 = v35;
    }
    *(_QWORD *)v2->remoteCardFilter = v16 + 1;
    v17 = &v2[v16];
    v18 = v33[0];
    v19 = v33[1];
    *(_QWORD *)&v17[1].remoteCardFilter[8] = v34;
    *(_OWORD *)&v17->remoteCardFilter[16] = v18;
    *(_OWORD *)v17[1].responder = v19;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_27;
    v8 = a1 + 64;
    v20 = *(_QWORD *)(v26 + 8 * v10);
    if ((v20 & (1 << v6)) == 0)
      goto LABEL_28;
    v5 = v25;
    if (*(_DWORD *)(a1 + 36) != v25)
      goto LABEL_29;
    v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = v10 + 1;
      v23 = (unint64_t)(v9 + 63) >> 6;
      if (v10 + 1 < v23)
      {
        v24 = *(_QWORD *)(v26 + 8 * v22);
        if (v24)
        {
LABEL_22:
          v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v10)
          {
            v24 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v24)
            {
              v22 = v10 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v1)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

id sub_1000BA788()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  NSString v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  unsigned int v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  objc_class *v41;
  id v42;
  objc_super v44;
  uint64_t v45;
  unint64_t v46;

  v1 = sub_100035CA4((uint64_t *)&unk_10016E470);
  __chkstk_darwin(v1);
  v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UIButton.Configuration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v44 - v9;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_fontSizeBody] = 0x4034000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_padding] = 0x4039000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_safeAreaPadding] = 0x4030000000000000;
  v11 = OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_titleAndLegalText;
  v12 = objc_allocWithZone((Class)NSMutableAttributedString);
  v13 = v0;
  *(_QWORD *)&v0[v11] = objc_msgSend(v12, "init");
  v14 = &v13[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_legalTextRange];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_legalTextView;
  *(_QWORD *)&v13[v15] = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  v16 = OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_customButtonTray;
  *(_QWORD *)&v13[v16] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v13[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_buttonsShouldBeStacked] = 0;
  v17 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
  v18 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 20.0);
  v19 = objc_msgSend(v17, "scaledFontForFont:", v18);

  *(_QWORD *)&v13[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_buttonFont] = v19;
  v20 = v19;
  static UIButton.Configuration.plain()();
  v21 = swift_allocObject(&unk_10013B1A0, 24, 7);
  *(_QWORD *)(v21 + 16) = v20;
  v22 = v20;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_10003CF9C, v21);
  v23 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 0, 1, v23);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v3);

  sub_100037118(0, &qword_10016AD30, UIButton_ptr);
  v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v8, v10, v4);
  *(_QWORD *)&v13[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_disagreeButton] = UIButton.init(configuration:primaryAction:)(v8, 0);
  v24(v8, v10, v4);
  *(_QWORD *)&v13[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_agreeButton] = UIButton.init(configuration:primaryAction:)(v8, 0);

  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v25);

  if (v26)
  {
    v27 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationPreferringMulticolor");
    v28 = objc_msgSend(v26, "imageWithConfiguration:", v27);

  }
  else
  {
    v28 = 0;
  }
  if (objc_msgSend((id)objc_opt_self(CBSUtilities), "isSSRBootIntentSet"))
  {
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
    v31 = (unint64_t)v30;
    v32 = 0xD00000000000001FLL;
    v33 = (void *)0x80000001001186A0;
  }
  else
  {
    v34 = 0x474149445F4E5552;
    v31 = 0xEF53434954534F4ELL;
    v45 = 0x474149445F4E5552;
    v46 = 0xEF53434954534F4ELL;
    v35 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
    v36 = objc_msgSend(v35, "isCheckerBoardActive");
    swift_unknownObjectRelease(v35);
    if (v36)
    {
      v37._countAndFlagsBits = 4342623;
      v37._object = (void *)0xE300000000000000;
      String.append(_:)(v37);
      v34 = v45;
      v31 = v46;
    }
    v29 = 0;
    v30 = 0;
    v32 = v34;
    v33 = (void *)v31;
  }
  sub_10003FFA0(v29, v30, (uint64_t)_swiftEmptyArrayStorage, v32, v33);
  v39 = v38;
  swift_bridgeObjectRelease(v31);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  v41 = (objc_class *)type metadata accessor for TermsAndConditionsViewController();
  v44.receiver = v13;
  v44.super_class = v41;
  v42 = objc_msgSendSuper2(&v44, "initWithTitle:detailText:icon:contentLayout:", v40, 0, v28, 3);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v42;
}

void sub_1000BAD50()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  _BYTE *v23;
  id v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  DARootViewController *v28;
  DARootViewController *v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  DARootViewController *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  SEL v44;
  id v45;
  int v46;
  id v47;
  id v48;
  id v49;
  id v50;
  SEL v51;
  id v52;
  int v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  NSString v59;
  SEL v60;
  id v61;
  int v62;
  id v63;
  id v64;
  id v65;
  id v66;
  Class isa;
  id v68;
  _BYTE *v69;
  _QWORD *v70;
  id v71;
  id v72;
  id v73;
  double v74;
  double v75;
  id v76;
  unsigned __int8 v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  DARootViewController *v81;
  DARootViewController *v82;
  uint64_t v83;
  DARootViewController *v84;
  DARootViewController *v85;
  void *v86;
  NSString v87;
  void *v88;
  NSString v89;
  SEL v90;
  id v91;
  int v92;
  id v93;
  id v94;
  id v95;
  id v96;
  SEL v97;
  id v98;
  int v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108;
  _BYTE *v109;
  void *v110;
  uint64_t v111;
  id v112;
  id v113;
  uint64_t v114;
  _BYTE *v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  void *v121;
  char v122[136];

  v1 = v0;
  v2 = sub_100035CA4((uint64_t *)&unk_10016AD20);
  __chkstk_darwin(v2);
  v4 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, "view");
  if (!v5)
    goto LABEL_27;
  v6 = v5;
  v7 = (void *)objc_opt_self(UIColor);
  v8 = objc_msgSend(v7, "systemBackgroundColor");
  objc_msgSend(v6, "setBackgroundColor:", v8);

  v9 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_customButtonTray];
  v118 = v7;
  v10 = objc_msgSend(v7, "systemBackgroundColor");
  objc_msgSend(v9, "setBackgroundColor:", v10);

  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v11 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_legalTextView];
  objc_msgSend(v11, "setContentOffset:animated:", 0, 0.0, 0.0);
  v12 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v13 = objc_msgSend(v12, "userInterfaceIdiom");

  if (v13 == (id)6)
  {
    v14 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_agreeButton];
    sub_100037118(0, &qword_10016AD38, UIHoverStyle_ptr);
    static UIShape.capsule.getter();
    v15 = type metadata accessor for UIShape(0);
    v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v16(v4, 0, 1, v15);
    v17 = (void *)UIHoverStyle.init(shape:)(v4);
    objc_msgSend(v14, "setHoverStyle:", v17);

    v18 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_disagreeButton];
    static UIShape.capsule.getter();
    v16(v4, 0, 1, v15);
    v19 = (void *)UIHoverStyle.init(shape:)(v4);
    objc_msgSend(v18, "setHoverStyle:", v19);

  }
  v20 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  objc_msgSend(v20, "setAlignment:", 1);
  objc_msgSend(v20, "setParagraphSpacingBefore:", 25.0);
  v21 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
  v22 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_titleAndLegalText];
  v23 = objc_msgSend(v22, "length");
  v117 = (id)objc_opt_self(DAPlatform);
  v24 = objc_msgSend(v117, "currentPlatform");
  v25 = objc_msgSend(v24, "isCheckerBoardActive");
  swift_unknownObjectRelease(v24);
  if (v25)
  {
    v26 = (void *)0x80000001001185F0;
    v27 = 0xD000000000000017;
  }
  else
  {
    v27 = 0xD00000000000001ALL;
    v26 = (void *)0x80000001001185B0;
  }
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, v27, v26);
  v29 = v28;
  v30 = sub_100035CA4(&qword_10016D928);
  inited = swift_initStackObject(v30, v122);
  *(_OWORD *)(inited + 16) = xmmword_10010C3D0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSParagraphStyleAttributeName);
  *(_QWORD *)(inited + 40) = v32;
  *(_QWORD *)(inited + 72) = sub_100037118(0, &qword_10016D930, NSMutableParagraphStyle_ptr);
  *(_QWORD *)(inited + 48) = v20;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSFontAttributeName);
  *(_QWORD *)(inited + 88) = v33;
  *(_QWORD *)(inited + 120) = sub_100037118(0, &qword_10016D910, UIFont_ptr);
  *(_QWORD *)(inited + 96) = v21;
  v120 = v20;
  v119 = v21;
  v34 = (DARootViewController *)sub_10006DDFC(inited);
  v35 = sub_1000BA4D4((uint64_t)v34);
  v36 = *(_QWORD *)(v35 + 16);
  if (v36)
  {
    sub_100035CA4((uint64_t *)&unk_10016E5B0);
    v37 = (void *)static _DictionaryStorage.allocate(capacity:)(v36);
  }
  else
  {
    v37 = &_swiftEmptyDictionarySingleton;
  }
  v121 = v37;
  v38 = swift_bridgeObjectRetain(v35);
  sub_1000BCB48(v38, (const char *)1, &v121, v39, v40, v41, v42, v43);
  swift_bridgeObjectRelease(v34, v44, v45, v46, v47, v48, v49, v50);
  swift_bridgeObjectRelease((DARootViewController *)v35, v51, v52, v53, v54, v55, v56, v57);
  v58 = v121;
  v4 = (char *)objc_allocWithZone((Class)NSMutableAttributedString);
  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29, v60, v61, v62, v63, v64, v65, v66);
  type metadata accessor for Key(0);
  sub_1000BCB00();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v68 = objc_msgSend(v4, "initWithString:attributes:", v59, isa, swift_release(v58).n128_f64[0]);

  objc_msgSend(v22, "appendAttributedString:", v68);
  v69 = objc_msgSend(v22, "length");
  if (__OFSUB__(v69, v23))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    swift_unexpectedError(v4, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return;
  }
  v70 = &v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_legalTextRange];
  *v70 = v23;
  v70[1] = v69 - v23;
  v71 = v118;
  v72 = objc_msgSend(v118, "clearColor");
  objc_msgSend(v11, "setBackgroundColor:", v72);

  v73 = objc_msgSend(v11, "textContainer");
  objc_msgSend(v73, "lineFragmentPadding");
  v75 = v74;

  objc_msgSend(v11, "setTextContainerInset:", 0.0, -v75, 0.0, 0.0);
  objc_msgSend(v11, "setEditable:", 0);
  v76 = objc_msgSend(v117, "currentPlatform");
  v77 = objc_msgSend(v76, "isCheckerBoardActive");
  swift_unknownObjectRelease(v76);
  if (((v77 | byte_100172309) & 1) != 0)
    v78 = 0;
  else
    v78 = 2;
  objc_msgSend(v11, "setDataDetectorTypes:", v78);
  objc_msgSend(v11, "_setInteractiveTextSelectionDisabled:", 1);
  objc_msgSend(v11, "setScrollEnabled:", 0);
  objc_msgSend(v11, "setAttributedText:", v22);
  v79 = objc_msgSend(v71, "labelColor");
  objc_msgSend(v11, "setTextColor:", v79);

  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v80 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0x4545524741534944, (void *)0xE800000000000000);
  v82 = v81;
  v83 = sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0x4545524741, (void *)0xE500000000000000);
  v85 = v84;
  v86 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_disagreeButton];
  v87 = String._bridgeToObjectiveC()();
  objc_msgSend(v86, "setTitle:forState:", v87, 0);

  v88 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_agreeButton];
  v89 = String._bridgeToObjectiveC()();
  objc_msgSend(v88, "setTitle:forState:", v89, 0);

  LOBYTE(v83) = sub_1000BC75C(v80, (uint64_t)v82, v83, (uint64_t)v85);
  swift_bridgeObjectRelease(v82, v90, v91, v92, v93, v94, v95, v96);
  swift_bridgeObjectRelease(v85, v97, v98, v99, v100, v101, v102, v103);
  v104 = 0;
  v105 = OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_buttonsShouldBeStacked;
  v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_buttonsShouldBeStacked] = v83 & 1;
  if ((v83 & 1) == 0)
  {
    if (objc_msgSend((id)objc_opt_self(UIView), "userInterfaceLayoutDirectionForSemanticContentAttribute:", objc_msgSend(v86, "semanticContentAttribute")))
    {
      v106 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v107 = objc_msgSend(v106, "preferredContentSizeCategory");

      LOBYTE(v106) = UIContentSizeCategory.isAccessibilityCategory.getter(v107);
      if ((v106 & 1) != 0)
        v104 = 1;
      else
        v104 = 2;
    }
    else
    {
      v104 = 1;
    }
  }
  objc_msgSend(v86, "setContentHorizontalAlignment:", v104);
  sub_100037118(0, (unint64_t *)&qword_10016DFF0, UIAction_ptr);
  v108 = swift_allocObject(&unk_10013B150, 24, 7);
  *(_QWORD *)(v108 + 16) = v1;
  v109 = v1;
  v110 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000BD7BC, v108);
  objc_msgSend(v86, "addAction:forControlEvents:", v110, 64);

  objc_msgSend(v86, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v111 = 0;
  if ((v1[v105] & 1) == 0)
  {
    if (objc_msgSend((id)objc_opt_self(UIView), "userInterfaceLayoutDirectionForSemanticContentAttribute:", objc_msgSend(v88, "semanticContentAttribute"))|| (v112 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication"), v113 = objc_msgSend(v112, "preferredContentSizeCategory"), v112, LOBYTE(v112) = UIContentSizeCategory.isAccessibilityCategory.getter(v113), v113, (v112 & 1) != 0))
    {
      v111 = 1;
    }
    else
    {
      v111 = 2;
    }
  }
  objc_msgSend(v88, "setContentHorizontalAlignment:", v111);
  v114 = swift_allocObject(&unk_10013B178, 24, 7);
  *(_QWORD *)(v114 + 16) = v109;
  v115 = v109;
  v116 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000BD7C4, v114);
  objc_msgSend(v88, "addAction:forControlEvents:", v116, 64);

  objc_msgSend(v88, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
}

void sub_1000BB83C(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned int v4;
  uint64_t Strong;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  DARootViewController *v15;
  SEL v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Class isa;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v4 = objc_msgSend(v3, "isCheckerBoardActive");
  swift_unknownObjectRelease(v3);
  if (v4)
  {
    sub_100066B64(1);
  }
  else
  {
    Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_delegate);
    if (Strong)
    {
      v13 = Strong;
      *(_BYTE *)(Strong + OBJC_IVAR____TtC11Diagnostics19SetupViewController_termsAndConditionsAccepted) = 0;
      sub_1000306E4(Strong, v6, v7, v8, v9, v10, v11, v12, (uint64_t)v23, v25, v26, v27, v28, v29, v30, v31, v32, v33);
      swift_unknownObjectRelease(v13);
    }
  }
  v14 = (void *)objc_opt_self(DSAnalytics);
  v15 = (DARootViewController *)sub_10006DCBC((uint64_t)&_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15, v16, v17, v18, v19, v20, v21, v22);
  objc_msgSend(v14, "sendAnalyticsWithEvent:payloadDict:", 12, isa);

}

#error "1000BB9A4: call analysis failed (funcsize=47)"

void sub_1000BBA28()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, "contentView");
  objc_msgSend(v1, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_legalTextView]);

  v2 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_customButtonTray];
  objc_msgSend(v2, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_disagreeButton]);
  objc_msgSend(v2, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_agreeButton]);
  v3 = objc_msgSend(v0, "view");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "addSubview:", v2);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000BBAF8()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  double v7;
  id v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  double v28;
  double v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t inited;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  const char *v93;
  void *v94;
  int v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  DARootViewController *v100;
  id v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  id v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  id v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  id v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  DARootViewController *v122;
  SEL v123;
  id v124;
  int v125;
  id v126;
  id v127;
  id v128;
  id v129;
  void *v130;
  Class isa;
  SEL v132;
  id v133;
  int v134;
  id v135;
  id v136;
  id v137;
  id v138;
  uint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char v148[88];
  char v149[72];
  uint64_t v150;

  v1 = v0;
  v2 = (void *)objc_opt_self(UIDevice);
  v3 = objc_msgSend(v2, "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1
    || (v5 = objc_msgSend(v2, "currentDevice"),
        v6 = objc_msgSend(v5, "userInterfaceIdiom"),
        v5,
        v7 = 25.0,
        v6 == (id)6))
  {
    v8 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    sub_1000403CC();
    v10 = v9;

    v7 = v10 * 0.2;
  }
  v11 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_agreeButton];
  objc_msgSend(v11, "intrinsicContentSize");
  v13 = v12;
  objc_msgSend(v11, "intrinsicContentSize");
  v15 = v14;
  v147 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v16 = swift_allocObject(v147, 88, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10010E220;
  v17 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_legalTextView];
  v18 = objc_msgSend(v17, "topAnchor");
  v19 = objc_msgSend(v1, "contentView");
  v20 = objc_msgSend(v19, "safeAreaLayoutGuide");

  v21 = objc_msgSend(v20, "topAnchor");
  v22 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v21, 25.0);

  *(_QWORD *)(v16 + 32) = v22;
  v23 = objc_msgSend(v17, "bottomAnchor");
  v24 = objc_msgSend(v1, "contentView");
  v25 = objc_msgSend(v24, "bottomAnchor");

  v26 = objc_msgSend(v1, "view");
  if (!v26)
  {
    __break(1u);
    goto LABEL_31;
  }
  v27 = v26;
  objc_msgSend(v26, "safeAreaInsets");
  v29 = v28;

  v30 = objc_msgSend(v23, "constraintEqualToAnchor:constant:", v25, -(v15 + v29 + 25.0));
  *(_QWORD *)(v16 + 40) = v30;
  v31 = objc_msgSend(v17, "leadingAnchor");
  v32 = objc_msgSend(v1, "contentView");
  v33 = objc_msgSend(v32, "leadingAnchor");

  v34 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v33, v7);
  *(_QWORD *)(v16 + 48) = v34;
  v35 = objc_msgSend(v17, "trailingAnchor");
  v36 = objc_msgSend(v1, "contentView");
  v37 = objc_msgSend(v36, "trailingAnchor");

  v38 = objc_msgSend(v35, "constraintEqualToAnchor:constant:", v37, -v7);
  *(_QWORD *)(v16 + 56) = v38;
  v39 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_customButtonTray];
  v40 = objc_msgSend(v39, "bottomAnchor");
  v41 = objc_msgSend(v1, "view");
  if (!v41)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v42 = v41;
  v43 = objc_msgSend(v41, "bottomAnchor");

  v44 = objc_msgSend(v40, "constraintEqualToAnchor:", v43);
  *(_QWORD *)(v16 + 64) = v44;
  v45 = objc_msgSend(v39, "leadingAnchor");
  v46 = objc_msgSend(v1, "view");
  if (!v46)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v47 = v46;
  v48 = objc_msgSend(v46, "leadingAnchor");

  v49 = objc_msgSend(v45, "constraintEqualToAnchor:", v48);
  *(_QWORD *)(v16 + 72) = v49;
  v50 = objc_msgSend(v39, "trailingAnchor");
  v51 = objc_msgSend(v1, "view");
  v146 = v1;
  if (v51)
  {
    v52 = v51;
    v53 = objc_msgSend(v51, "trailingAnchor");

    v54 = objc_msgSend(v50, "constraintEqualToAnchor:", v53);
    *(_QWORD *)(v16 + 80) = v54;
    v150 = v16;
    specialized Array._endMutation()(v55);
    v145 = v16;
    inited = swift_initStackObject(v147, v149);
    *(_OWORD *)(inited + 16) = xmmword_10010CA80;
    v57 = objc_msgSend(v11, "topAnchor");
    v58 = objc_msgSend(v39, "topAnchor");
    v59 = objc_msgSend(v57, "constraintEqualToAnchor:", v58);

    v143 = v59;
    *(_QWORD *)(inited + 32) = v59;
    v60 = objc_msgSend(v11, "widthAnchor");
    v61 = objc_msgSend(v39, "widthAnchor");
    v62 = objc_msgSend(v60, "constraintEqualToAnchor:multiplier:", v61, 1.0);

    v142 = v62;
    *(_QWORD *)(inited + 40) = v62;
    v63 = *(void **)&v146[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_disagreeButton];
    v64 = objc_msgSend(v63, "topAnchor");
    v65 = objc_msgSend(v39, "topAnchor");
    v66 = objc_msgSend(v64, "constraintEqualToAnchor:constant:", v65, v15 + -16.0);

    v141 = v66;
    *(_QWORD *)(inited + 48) = v66;
    v67 = inited;
    v68 = objc_msgSend(v63, "widthAnchor");
    v69 = objc_msgSend(v39, "widthAnchor");
    v70 = objc_msgSend(v68, "constraintEqualToAnchor:multiplier:", v69, 1.0);

    v140 = v70;
    *(_QWORD *)(v67 + 56) = v70;
    v71 = objc_msgSend(v39, "heightAnchor");
    v72 = objc_msgSend(v71, "constraintGreaterThanOrEqualToConstant:", v15 + v15);

    v144 = v72;
    *(_QWORD *)(v67 + 64) = v72;
    v73 = swift_initStackObject(v147, v148);
    *(_OWORD *)(v73 + 16) = xmmword_10010E220;
    v74 = objc_msgSend(v63, "topAnchor");
    v75 = objc_msgSend(v39, "topAnchor");
    v76 = objc_msgSend(v74, "constraintEqualToAnchor:", v75);

    *(_QWORD *)(v73 + 32) = v76;
    v77 = objc_msgSend(v63, "leadingAnchor");
    v78 = objc_msgSend(v39, "leadingAnchor");
    v79 = objc_msgSend(v77, "constraintEqualToAnchor:constant:", v78, 16.0);

    *(_QWORD *)(v73 + 40) = v79;
    v80 = objc_msgSend(v63, "widthAnchor");
    v81 = objc_msgSend(v80, "constraintGreaterThanOrEqualToConstant:", v13);

    *(_QWORD *)(v73 + 48) = v81;
    v82 = objc_msgSend(v11, "topAnchor");
    v83 = objc_msgSend(v39, "topAnchor");
    v84 = objc_msgSend(v82, "constraintEqualToAnchor:", v83);

    *(_QWORD *)(v73 + 56) = v84;
    v85 = objc_msgSend(v11, "trailingAnchor");
    v86 = objc_msgSend(v39, "trailingAnchor");
    v87 = objc_msgSend(v85, "constraintEqualToAnchor:constant:", v86, -16.0);

    *(_QWORD *)(v73 + 64) = v87;
    v88 = objc_msgSend(v11, "widthAnchor");
    v89 = objc_msgSend(v88, "constraintGreaterThanOrEqualToConstant:", v13);

    *(_QWORD *)(v73 + 72) = v89;
    v90 = objc_msgSend(v39, "heightAnchor");
    v91 = objc_msgSend(v90, "constraintGreaterThanOrEqualToConstant:", v15 + 32.0);

    *(_QWORD *)(v73 + 80) = v91;
    v150 = v73;
    specialized Array._endMutation()(v92);
    v100 = (DARootViewController *)v150;
    if (v146[OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_buttonsShouldBeStacked] != 1)
    {
      swift_release(v67);
      v150 = v145;
      sub_1000B9A00((uint64_t)v100);
      v122 = (DARootViewController *)v150;
LABEL_22:
      v130 = (void *)objc_opt_self(NSLayoutConstraint);
      sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v122, v132, v133, v134, v135, v136, v137, v138);
      objc_msgSend(v130, "activateConstraints:", isa);

      return;
    }
    swift_bridgeObjectRelease((DARootViewController *)v150, v93, v94, v95, v96, v97, v98, v99);
    v150 = v145;
    if ((unint64_t)v145 >> 62)
    {
      if (v145 < 0)
        v139 = v145;
      else
        v139 = v145 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v145);
      v101 = (id)_CocoaArrayWrapper.endIndex.getter(v139);
      v103 = (uint64_t)v101 + 5;
      if (!__OFADD__(v101, 5))
      {
LABEL_11:
        v104 = sub_1000BD6DC(v103, 1);
        specialized Array._endMutation()(v104);
        v101 = v143;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v101);
        v100 = *(DARootViewController **)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v102 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if ((unint64_t)v100 < v102 >> 1)
        {
LABEL_12:
          v105 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v101);
          specialized Array._endMutation()(v105);
          v106 = v142;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v106);
          v108 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v107 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v108 >= v107 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v108 + 1, 1);
          v109 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v108, v106);
          specialized Array._endMutation()(v109);
          v110 = v141;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v110);
          v112 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v111 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v112 >= v111 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
          v113 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v112, v110);
          specialized Array._endMutation()(v113);
          v114 = v140;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v114);
          v116 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v115 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v116 >= v115 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
          v117 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v116, v114);
          specialized Array._endMutation()(v117);
          v118 = v144;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v118);
          v120 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v119 = *(_QWORD *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v120 >= v119 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v120 + 1, 1);
          v121 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v118);
          specialized Array._endMutation()(v121);
          v122 = (DARootViewController *)v150;
          swift_release(v67);
          swift_bridgeObjectRelease((DARootViewController *)v145, v123, v124, v125, v126, v127, v128, v129);
          goto LABEL_22;
        }
LABEL_29:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, (char *)&v100->super.super.super.super.isa + 1, 1);
        goto LABEL_12;
      }
    }
    else
    {
      v101 = *(id *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v145);
      v103 = (uint64_t)v101 + 5;
      if (!__OFADD__(v101, 5))
        goto LABEL_11;
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_33:
  __break(1u);
}

BOOL sub_1000BC75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BOOL8 result;
  id v6;
  NSString v7;
  uint64_t inited;
  uint64_t v9;
  id v10;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  DARootViewController *v19;
  Class isa;
  SEL v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v27;
  double v28;
  double v29;
  NSString v30;
  uint64_t v31;
  id v32;
  NSString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  DARootViewController *v41;
  Class v42;
  SEL v43;
  id v44;
  int v45;
  id v46;
  id v47;
  id v48;
  id v49;
  double v50;
  double v51;
  double v52;
  id v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  double Width;
  uint64_t v63;
  _BYTE v64[72];
  _BYTE v65[80];
  CGRect v66;

  result = 0;
  if (a2)
  {
    if (a4)
    {
      v6 = *(id *)(v4 + OBJC_IVAR____TtC11Diagnostics32TermsAndConditionsViewController_buttonFont);
      v7 = String._bridgeToObjectiveC()();
      v63 = sub_100035CA4(&qword_10016BBA8);
      inited = swift_initStackObject(v63, v65);
      *(_OWORD *)(inited + 16) = xmmword_10010BE30;
      *(_QWORD *)(inited + 32) = NSFontAttributeName;
      v9 = sub_100037118(0, &qword_10016D910, UIFont_ptr);
      *(_QWORD *)(inited + 64) = v9;
      *(_QWORD *)(inited + 40) = v6;
      v10 = v6;
      v11 = NSFontAttributeName;
      v19 = (DARootViewController *)sub_10006DF30(inited, v12, v13, v14, v15, v16, v17, v18);
      type metadata accessor for Key(0);
      sub_1000BCB00();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v19, v21, v22, v23, v24, v25, v26, v27);
      objc_msgSend(v7, "sizeWithAttributes:", isa);
      v29 = v28;

      v30 = String._bridgeToObjectiveC()();
      v31 = swift_initStackObject(v63, v64);
      *(_OWORD *)(v31 + 16) = xmmword_10010BE30;
      *(_QWORD *)(v31 + 64) = v9;
      *(_QWORD *)(v31 + 32) = v11;
      *(_QWORD *)(v31 + 40) = v10;
      v32 = v10;
      v33 = v11;
      v41 = (DARootViewController *)sub_10006DF30(v31, v34, v35, v36, v37, v38, v39, v40);
      v42 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v41, v43, v44, v45, v46, v47, v48, v49);
      objc_msgSend(v30, "sizeWithAttributes:", v42);
      v51 = v50;

      v52 = v29 + v51 + 100.0;
      v53 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      objc_msgSend(v53, "bounds");
      v55 = v54;
      v57 = v56;
      v59 = v58;
      v61 = v60;

      v66.origin.x = v55;
      v66.origin.y = v57;
      v66.size.width = v59;
      v66.size.height = v61;
      Width = CGRectGetWidth(v66);

      return Width < v52;
    }
  }
  return result;
}

id sub_1000BCA28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TermsAndConditionsViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TermsAndConditionsViewController()
{
  return objc_opt_self(_TtC11Diagnostics32TermsAndConditionsViewController);
}

unint64_t sub_1000BCB00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016AA18;
  if (!qword_10016AA18)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_10010BBD4, v1);
    atomic_store(result, (unint64_t *)&qword_10016AA18);
  }
  return result;
}

void sub_1000BCB48(uint64_t a1, const char *a2, _QWORD *a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  SEL v32;
  id v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];
  void *v67;

  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease((DARootViewController *)a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = (char)a2;
  swift_bridgeObjectRetain(a1);
  sub_1000BD7CC(a1 + 32, (uint64_t)&v65);
  v12 = v65;
  v67 = (void *)v65;
  sub_10006E2D0(v66, v64);
  v13 = (_QWORD *)*a3;
  v15 = sub_100072BD0(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
    goto LABEL_23;
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((v11 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000E8B14();
      if ((v19 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v39 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v39[6] + 8 * v15) = v12;
    sub_10006E2D0(v64, (_OWORD *)(v39[7] + 32 * v15));
    v40 = v39[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v39[2] = v42;
    v43 = v9 - 1;
    if (!v43)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v44 = a1 + 72;
    while (1)
    {
      sub_1000BD7CC(v44, (uint64_t)&v65);
      v45 = v65;
      v67 = (void *)v65;
      sub_10006E2D0(v66, v64);
      v46 = (_QWORD *)*a3;
      v47 = sub_100072BD0(v45);
      v49 = v46[2];
      v50 = (v48 & 1) == 0;
      v41 = __OFADD__(v49, v50);
      v51 = v49 + v50;
      if (v41)
        break;
      v52 = v48;
      if (v46[3] < v51)
      {
        sub_1000E6E30(v51, 1);
        v47 = sub_100072BD0(v45);
        if ((v52 & 1) != (v53 & 1))
          goto LABEL_25;
      }
      if ((v52 & 1) != 0)
        goto LABEL_10;
      v54 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v47 >> 6) + 64) |= 1 << v47;
      *(_QWORD *)(v54[6] + 8 * v47) = v45;
      sub_10006E2D0(v64, (_OWORD *)(v54[7] + 32 * v47));
      v55 = v54[2];
      v41 = __OFADD__(v55, 1);
      v56 = v55 + 1;
      if (v41)
        goto LABEL_24;
      v54[2] = v56;
      v44 += 40;
      if (!--v43)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000E6E30(v18, v11 & 1);
  v20 = sub_100072BD0(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v22 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow();
    v63 = v22;
    swift_errorRetain(v22);
    v23 = sub_100035CA4(&qword_10016D600);
    if ((swift_dynamicCast(v23, &v63, v23, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease((DARootViewController *)a1, v24, v25, v26, v27, v28, v29, v30);
      sub_10003CEEC(v64);
      v31 = v67;
      swift_bridgeObjectRelease((DARootViewController *)a1, v32, v33, v34, v35, v36, v37, v38);

      swift_errorRelease(v63);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for Key(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v57);
  __break(1u);
LABEL_26:
  v61 = 0;
  v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v58._object = (void *)0x8000000100118630;
  v58._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v58);
  type metadata accessor for Key(0);
  _print_unlocked<A, B>(_:_:)(&v67, &v61, v59, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v60._countAndFlagsBits = 39;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v61, v62, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

uint64_t sub_1000BCEE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unint64_t i;
  void (*v20)(_QWORD *);
  id *v21;
  id v22;
  const char *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t result;
  uint64_t (*v39[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v30 = a3;
    else
      v30 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease((DARootViewController *)a3, v31, v32, v33, v34, v35, v36, v37);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease((DARootViewController *)a3, v12, v13, v14, v15, v16, v17, v18);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BD8DC(&qword_10016D920, &qword_10016D918);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100035CA4(&qword_10016D918);
          v20 = sub_1000BD524(v39, i, a3);
          v22 = *v21;
          ((void (*)(uint64_t (**)(), _QWORD))v20)(v39, 0);
          *(_QWORD *)(a1 + 8 * i) = v22;
        }
        swift_bridgeObjectRelease((DARootViewController *)a3, v23, v24, v25, v26, v27, v28, v29);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000BD0FC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BD8DC(&qword_10016D958, &qword_10016D950);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100035CA4(&qword_10016D950);
          v13 = sub_1000BD57C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100037118(0, &qword_10016E1A0, &off_100131AA0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000BD310(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unint64_t i;
  void (*v20)(_QWORD *);
  id *v21;
  id v22;
  const char *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t result;
  uint64_t (*v39[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v30 = a3;
    else
      v30 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease((DARootViewController *)a3, v31, v32, v33, v34, v35, v36, v37);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease((DARootViewController *)a3, v12, v13, v14, v15, v16, v17, v18);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000BD8DC(&qword_10016D948, &qword_10016D940);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100035CA4(&qword_10016D940);
          v20 = sub_1000BD524(v39, i, a3);
          v22 = *v21;
          ((void (*)(uint64_t (**)(), _QWORD))v20)(v39, 0);
          *(_QWORD *)(a1 + 8 * i) = v22;
        }
        swift_bridgeObjectRelease((DARootViewController *)a3, v23, v24, v25, v26, v27, v28, v29);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100037118(0, (unint64_t *)&unk_10016D870, NSError_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_1000BD524(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000BD5FC(v6, a2, a3);
  return sub_1000BD578;
}

void (*sub_1000BD57C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000BD668(v6, a2, a3);
  return sub_1000BD578;
}

void sub_1000BD5D0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1000BD5FC(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000BD924;
  }
  __break(1u);
  return result;
}

void (*sub_1000BD668(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000BD6D4;
  }
  __break(1u);
  return result;
}

void sub_1000BD6D4(id *a1)
{

}

uint64_t sub_1000BD6DC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_1000BD798()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000BD7BC(uint64_t a1)
{
  uint64_t v1;

  sub_1000BB83C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000BD7C4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BB968(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000BD7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100035CA4(&qword_10016BBB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD814(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000BD89C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100035CA4(&qword_10016D938);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BD8DC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100035D30(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000BDA48()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BaseView()
{
  return objc_opt_self(_TtC11Diagnostics8BaseView);
}

void sub_1000BDA98()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;
  objc_super v15;

  v1 = v0;
  v15.receiver = v0;
  v15.super_class = (Class)type metadata accessor for DeviceSelector();
  objc_msgSendSuper2(&v15, "viewDidLoad");
  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    objc_msgSend(v3, "setBackgroundColor:", v4);

    sub_1000BDE6C();
    sub_1000BE8CC();
    v5 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
    v6 = (void *)static OS_os_log.default.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    os_log(_:dso:log:type:_:)("Getting DED Devices", 19, 2, &_mh_execute_header, v6, v7, &_swiftEmptyArrayStorage);

    v8 = objc_msgSend((id)objc_opt_self(DEDManager), "sharedInstance");
    objc_msgSend(v8, "start");
    v9 = swift_allocObject(&unk_10013B2E0, 24, 7);
    *(_QWORD *)(v9 + 16) = v1;
    v13[4] = sub_1000C0794;
    v14 = v9;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_1000BDDCC;
    v13[3] = &unk_10013B2F8;
    v10 = _Block_copy(v13);
    v11 = v14;
    v12 = v1;
    objc_msgSend(v8, "discoverDevicesWithCompletion:", v10, swift_release(v11).n128_f64[0]);
    _Block_release(v10);

  }
  else
  {
    __break(1u);
  }
}

id sub_1000BDC60(DARootViewController *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  DARootViewController *v27;
  id result;
  uint64_t v29;
  uint64_t v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;

  v4 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
  v5 = (void *)static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Got DED Devices", 15, 2, &_mh_execute_header, v5, v6, &_swiftEmptyArrayStorage);

  v7 = a2;
  v8 = swift_bridgeObjectRetain(a1);
  v9 = (uint64_t)sub_1000C079C(v8, (uint64_t)v7);
  swift_bridgeObjectRelease(a1, v10, v11, v12, v13, v14, v15, v16);

  if (!((unint64_t)v9 >> 62))
  {
    if (*(uint64_t *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v9 < 0)
    v29 = v9;
  else
    v29 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease((DARootViewController *)v9, v31, v32, v33, v34, v35, v36, v37);
  if (v30 >= 1)
  {
LABEL_3:
    v25 = (void *)static OS_os_log.default.getter(v17);
    v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:type:_:)("Got READY state DED Devices", 27, 2, &_mh_execute_header, v25, v26, &_swiftEmptyArrayStorage);

  }
LABEL_4:
  v27 = *(DARootViewController **)&v7[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_deviceCollection];
  *(_QWORD *)&v7[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_deviceCollection] = v9;
  swift_bridgeObjectRelease(v27, v18, v19, v20, v21, v22, v23, v24);
  result = *(id *)&v7[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView];
  if (result)
    return objc_msgSend(result, "reloadData");
  __break(1u);
  return result;
}

void sub_1000BDDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(DARootViewController *);
  uint64_t v5;
  DARootViewController *v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v4 = *(void (**)(DARootViewController *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_100037118(0, &qword_10016DA50, DEDDevice_ptr);
  v6 = (DARootViewController *)static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_1000BDE6C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  DARootViewController *v25;
  DARootViewController *v26;
  NSString v27;
  SEL v28;
  id v29;
  int v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  DARootViewController *v55;
  DARootViewController *v56;
  NSString v57;
  SEL v58;
  id v59;
  int v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  char *v79;
  uint64_t v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  DARootViewController *v95;
  DARootViewController *v96;
  NSString v97;
  SEL v98;
  id v99;
  int v100;
  id v101;
  id v102;
  id v103;
  id v104;
  void *v105;
  id v106;
  id v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  uint64_t v118;
  uint64_t ObjCClassFromMetadata;
  id v120;
  NSString v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  id v128;
  void *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  id v135;

  v1 = v0;
  v2 = sub_100035CA4((uint64_t *)&unk_10016E470);
  __chkstk_darwin(v2);
  v134 = (char *)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UIButton.Configuration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v130 - v9;
  v11 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v12 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView;
  v13 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView] = v11;

  v14 = *(void **)&v0[v12];
  if (!v14)
  {
    __break(1u);
    goto LABEL_40;
  }
  v15 = (void *)objc_opt_self(UIColor);
  v16 = v14;
  v135 = v15;
  v17 = objc_msgSend(v15, "systemBackgroundColor");
  objc_msgSend(v16, "setBackgroundColor:", v17);

  v18 = objc_msgSend(v1, "view");
  if (!v18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (!*(_QWORD *)&v1[v12])
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v19 = v18;
  v131 = v10;
  v132 = v5;
  v133 = v4;
  objc_msgSend(v18, "addSubview:");

  v20 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v21 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel;
  v22 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel] = v20;

  v23 = *(void **)&v1[v21];
  if (!v23)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v24 = v23;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000019, (void *)0x8000000100118870);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26, v28, v29, v30, v31, v32, v33, v34);
  objc_msgSend(v24, "setText:", v27);

  v35 = *(void **)&v1[v21];
  if (!v35)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  objc_msgSend(v35, "setTextAlignment:", 1);
  v36 = *(void **)&v1[v21];
  if (!v36)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v130 = v8;
  v37 = v36;
  v38 = objc_msgSend(v135, "systemBackgroundColor");
  objc_msgSend(v37, "setBackgroundColor:", v38);

  v39 = *(void **)&v1[v21];
  if (!v39)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v40 = (void *)objc_opt_self(UIFontMetrics);
  v41 = v39;
  v42 = objc_msgSend(v40, "defaultMetrics");
  v43 = (void *)objc_opt_self(UIFont);
  v44 = objc_msgSend(v43, "systemFontOfSize:weight:", 32.0, UIFontWeightBold);
  v45 = objc_msgSend(v42, "scaledFontForFont:", v44);

  objc_msgSend(v41, "setFont:", v45);
  v46 = *(void **)&v1[v21];
  if (!v46)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  objc_msgSend(v46, "sizeToFit");
  v47 = *(void **)&v1[v21];
  if (!v47)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(v47, "setAdjustsFontSizeToFitWidth:", 1);
  v48 = *(void **)&v1[v21];
  if (!v48)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  objc_msgSend(v48, "setNumberOfLines:", 2);
  v49 = *(void **)&v1[v12];
  if (!v49)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (!*(_QWORD *)&v1[v21])
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  objc_msgSend(v49, "addSubview:");
  v50 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v51 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel;
  v52 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel] = v50;

  v53 = *(void **)&v1[v51];
  if (!v53)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v54 = v53;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001CLL, (void *)0x8000000100118890);
  v56 = v55;
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v56, v58, v59, v60, v61, v62, v63, v64);
  objc_msgSend(v54, "setText:", v57);

  v65 = *(void **)&v1[v51];
  if (!v65)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v66 = v65;
  v67 = objc_msgSend(v40, "defaultMetrics");
  v68 = objc_msgSend(v43, "systemFontOfSize:weight:", 22.0, UIFontWeightRegular);
  v69 = objc_msgSend(v67, "scaledFontForFont:", v68);

  objc_msgSend(v66, "setFont:", v69);
  v70 = *(void **)&v1[v51];
  if (!v70)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  objc_msgSend(v70, "setNumberOfLines:", 2);
  v71 = *(void **)&v1[v51];
  if (!v71)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  objc_msgSend(v71, "sizeToFit");
  v72 = *(void **)&v1[v51];
  if (!v72)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  objc_msgSend(v72, "setAdjustsFontSizeToFitWidth:", 1);
  v73 = *(void **)&v1[v51];
  if (!v73)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  objc_msgSend(v73, "setTextAlignment:", 1);
  v74 = objc_msgSend(v1, "view");
  if (!v74)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (!*(_QWORD *)&v1[v51])
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v75 = v74;
  objc_msgSend(v74, "addSubview:");

  v76 = objc_msgSend(v40, "defaultMetrics");
  objc_msgSend(v43, "defaultFontSize");
  v77 = objc_msgSend(v43, "systemFontOfSize:");
  v78 = objc_msgSend(v76, "scaledFontForFont:", v77);

  v79 = v131;
  static UIButton.Configuration.plain()();
  v80 = swift_allocObject(&unk_10013B2B8, 24, 7);
  *(_QWORD *)(v80 + 16) = v78;
  v81 = v78;
  v82 = v134;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_10003CF9C, v80);
  v83 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v82, 0, 1, v83);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v82);

  sub_100037118(0, &qword_10016AD30, UIButton_ptr);
  v85 = v132;
  v84 = v133;
  v86 = v130;
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v130, v79, v133);
  v87 = UIButton.init(configuration:primaryAction:)(v86, 0);
  v88 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn;
  v89 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn] = v87;

  v90 = *(void **)&v1[v88];
  if (!v90)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v91 = v90;
  v92 = objc_msgSend(v135, "systemBackgroundColor");
  objc_msgSend(v91, "setBackgroundColor:", v92);

  v93 = *(void **)&v1[v88];
  if (!v93)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v94 = v93;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001ELL, (void *)0x80000001001188B0);
  v96 = v95;
  v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v96, v98, v99, v100, v101, v102, v103, v104);
  objc_msgSend(v94, "setTitle:forState:", v97, 0);

  v105 = *(void **)&v1[v88];
  if (!v105)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v106 = objc_allocWithZone((Class)UIColor);
  v107 = v105;
  v108 = objc_msgSend(v106, "initWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0);
  objc_msgSend(v107, "setTitleColor:forState:", v108, 0);

  v109 = *(void **)&v1[v88];
  if (!v109)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  objc_msgSend(v109, "addTarget:action:forControlEvents:", v1, "cancelConsent", 64);
  v110 = objc_msgSend(v1, "view");
  if (!v110)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (!*(_QWORD *)&v1[v88])
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v111 = v110;
  objc_msgSend(v110, "addSubview:");

  v112 = objc_msgSend(objc_allocWithZone((Class)UITableView), "init");
  v113 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView;
  v114 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView] = v112;

  v115 = *(void **)&v1[v113];
  if (!v115)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  objc_msgSend(v115, "setDataSource:", v1);
  v116 = *(void **)&v1[v113];
  if (!v116)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  objc_msgSend(v116, "setDelegate:", v1);
  v117 = *(void **)&v1[v113];
  if (!v117)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v118 = type metadata accessor for DeviceSelectorCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v118);
  v120 = v117;
  v121 = String._bridgeToObjectiveC()();
  objc_msgSend(v120, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v121);

  v122 = *(void **)&v1[v113];
  if (!v122)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  objc_msgSend(v122, "setSeparatorStyle:", 0);
  v123 = *(void **)&v1[v113];
  if (!v123)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  objc_msgSend(v123, "setAllowsSelection:", 0);
  v124 = *(void **)&v1[v113];
  if (!v124)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  objc_msgSend(v124, "setAlwaysBounceVertical:", 1);
  v125 = *(void **)&v1[v113];
  if (!v125)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  objc_msgSend(v125, "setShowsVerticalScrollIndicator:", 0);
  v126 = *(void **)&v1[v113];
  if (!v126)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  objc_msgSend(v126, "setRowHeight:", 110.0);
  v127 = *(void **)&v1[v113];
  if (!v127)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  objc_msgSend(v127, "setEstimatedSectionFooterHeight:", 0.0);
  v128 = objc_msgSend(v1, "view");
  if (!v128)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (*(_QWORD *)&v1[v113])
  {
    v129 = v128;
    objc_msgSend(v128, "addSubview:");

    (*(void (**)(char *, uint64_t))(v85 + 8))(v79, v84);
    return;
  }
LABEL_75:
  __break(1u);
}

void sub_1000BE8CC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  Class isa;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  uint64_t v66;
  Class v67;
  SEL v68;
  id v69;
  int v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  Class v97;
  SEL v98;
  id v99;
  int v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  id v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  id v120;
  void *v121;
  id v122;
  id v123;
  void *v124;
  id v125;
  id v126;
  void *v127;
  id v128;
  void *v129;
  id v130;
  id v131;
  uint64_t v132;
  Class v133;
  SEL v134;
  id v135;
  int v136;
  id v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  void *v142;
  id v143;
  void *v144;
  id v145;
  id v146;
  void *v147;
  id v148;
  id v149;
  void *v150;
  id v151;
  id v152;
  void *v153;
  id v154;
  id v155;
  uint64_t v156;
  SEL v157;
  id v158;
  int v159;
  id v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  Class v167;

  v1 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView];
  if (!v2)
  {
    __break(1u);
    goto LABEL_47;
  }
  v3 = v0;
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel;
  v5 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel];
  if (!v5)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v6 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel;
  v7 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel];
  if (!v7)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v164 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn;
  v8 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn];
  if (!v8)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v165 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView;
  v9 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView];
  if (!v9)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v166 = (id)sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v10 = swift_allocObject(v166, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10010BF30;
  v11 = *(void **)&v3[v1];
  if (!v11)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v12 = objc_msgSend(v11, "leadingAnchor");
  v13 = objc_msgSend(v3, "view");
  if (!v13)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "leadingAnchor");

  v16 = objc_msgSend(v12, "constraintEqualToAnchor:", v15);
  *(_QWORD *)(v10 + 32) = v16;
  v17 = *(void **)&v3[v1];
  if (!v17)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v18 = objc_msgSend(v17, "topAnchor");
  v19 = objc_msgSend(v3, "view");
  if (!v19)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v20 = v19;
  v21 = objc_msgSend(v19, "topAnchor");

  v22 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v21, 10.0);
  *(_QWORD *)(v10 + 40) = v22;
  v23 = *(void **)&v3[v1];
  if (!v23)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v24 = objc_msgSend(v23, "widthAnchor");
  v25 = objc_msgSend(v3, "view");
  if (!v25)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "widthAnchor");

  v28 = objc_msgSend(v24, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v10 + 48) = v28;
  v29 = *(void **)&v3[v1];
  if (!v29)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v30 = objc_msgSend(v29, "heightAnchor");
  v31 = objc_msgSend(v3, "view");
  if (!v31)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v32 = v31;
  v33 = (void *)objc_opt_self(NSLayoutConstraint);
  v34 = objc_msgSend(v32, "heightAnchor");

  v35 = objc_msgSend(v30, "constraintEqualToAnchor:multiplier:", v34, 0.1);
  *(_QWORD *)(v10 + 56) = v35;
  specialized Array._endMutation()(v36);
  sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v10, v38, v39, v40, v41, v42, v43, v44);
  objc_msgSend(v33, "activateConstraints:", isa);

  v45 = swift_allocObject(v166, 64, 7);
  *(_OWORD *)(v45 + 16) = xmmword_10010BF30;
  v46 = *(void **)&v3[v4];
  if (!v46)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v47 = objc_msgSend(v46, "centerXAnchor");
  v48 = *(void **)&v3[v1];
  if (!v48)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v49 = objc_msgSend(v48, "centerXAnchor");
  v50 = objc_msgSend(v47, "constraintEqualToAnchor:", v49);

  *(_QWORD *)(v45 + 32) = v50;
  v51 = *(void **)&v3[v4];
  if (!v51)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v52 = objc_msgSend(v51, "bottomAnchor");
  v53 = *(void **)&v3[v1];
  if (!v53)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v54 = objc_msgSend(v53, "bottomAnchor");
  v55 = objc_msgSend(v52, "constraintEqualToAnchor:", v54);

  *(_QWORD *)(v45 + 40) = v55;
  v56 = *(void **)&v3[v4];
  if (!v56)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v57 = objc_msgSend(v56, "heightAnchor");
  v58 = *(void **)&v3[v1];
  if (!v58)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v59 = objc_msgSend(v58, "heightAnchor");
  v60 = objc_msgSend(v57, "constraintEqualToAnchor:multiplier:", v59, 0.5);

  *(_QWORD *)(v45 + 48) = v60;
  v61 = *(void **)&v3[v4];
  if (!v61)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v62 = objc_msgSend(v61, "widthAnchor");
  v63 = *(void **)&v3[v1];
  if (!v63)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v64 = objc_msgSend(v63, "widthAnchor");
  v65 = objc_msgSend(v62, "constraintEqualToAnchor:multiplier:", v64, 0.8);

  *(_QWORD *)(v45 + 56) = v65;
  specialized Array._endMutation()(v66);
  v67 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v45, v68, v69, v70, v71, v72, v73, v74);
  objc_msgSend(v33, "activateConstraints:", v67);

  v75 = swift_allocObject(v166, 64, 7);
  *(_OWORD *)(v75 + 16) = xmmword_10010BF30;
  v76 = *(void **)&v3[v6];
  if (!v76)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v77 = objc_msgSend(v76, "centerXAnchor");
  v78 = *(void **)&v3[v4];
  if (!v78)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v79 = objc_msgSend(v78, "centerXAnchor");
  v80 = objc_msgSend(v77, "constraintEqualToAnchor:", v79);

  *(_QWORD *)(v75 + 32) = v80;
  v81 = *(void **)&v3[v6];
  if (!v81)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v82 = objc_msgSend(v81, "topAnchor");
  v83 = *(void **)&v3[v1];
  if (!v83)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v84 = objc_msgSend(v83, "bottomAnchor");
  v85 = objc_msgSend(v82, "constraintEqualToAnchor:constant:", v84, 30.0);

  *(_QWORD *)(v75 + 40) = v85;
  v86 = *(void **)&v3[v6];
  if (!v86)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v87 = objc_msgSend(v86, "heightAnchor");
  v88 = *(void **)&v3[v4];
  if (!v88)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v89 = objc_msgSend(v88, "heightAnchor");
  v90 = objc_msgSend(v87, "constraintEqualToAnchor:", v89);

  *(_QWORD *)(v75 + 48) = v90;
  v91 = *(void **)&v3[v6];
  if (!v91)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v92 = objc_msgSend(v91, "widthAnchor");
  v93 = *(void **)&v3[v4];
  if (!v93)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v94 = objc_msgSend(v93, "widthAnchor");
  v95 = objc_msgSend(v92, "constraintEqualToAnchor:", v94);

  *(_QWORD *)(v75 + 56) = v95;
  specialized Array._endMutation()(v96);
  v97 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v75, v98, v99, v100, v101, v102, v103, v104);
  objc_msgSend(v33, "activateConstraints:", v97);

  v105 = swift_allocObject(v166, 72, 7);
  *(_OWORD *)(v105 + 16) = xmmword_10010CA80;
  v106 = *(void **)&v3[v165];
  if (!v106)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v107 = objc_msgSend(v106, "leadingAnchor");
  v108 = *(void **)&v3[v1];
  if (!v108)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v109 = objc_msgSend(v108, "leadingAnchor");
  v110 = objc_msgSend(v107, "constraintEqualToAnchor:", v109);

  *(_QWORD *)(v105 + 32) = v110;
  v111 = *(void **)&v3[v165];
  if (!v111)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v112 = objc_msgSend(v111, "topAnchor");
  v113 = *(void **)&v3[v6];
  if (!v113)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v114 = objc_msgSend(v113, "bottomAnchor");
  v115 = objc_msgSend(v112, "constraintEqualToAnchor:constant:", v114, 20.0);

  *(_QWORD *)(v105 + 40) = v115;
  v116 = *(void **)&v3[v165];
  if (!v116)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v117 = objc_msgSend(v116, "leftAnchor");
  v118 = *(void **)&v3[v1];
  if (!v118)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v119 = objc_msgSend(v118, "leftAnchor");
  v120 = objc_msgSend(v117, "constraintEqualToAnchor:constant:", v119, 15.0);

  *(_QWORD *)(v105 + 48) = v120;
  v121 = *(void **)&v3[v165];
  if (!v121)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v122 = objc_msgSend(v121, "rightAnchor");
  v123 = objc_msgSend(v3, "view");
  if (!v123)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v124 = v123;
  v125 = objc_msgSend(v123, "rightAnchor");

  v126 = objc_msgSend(v122, "constraintEqualToAnchor:constant:", v125, -15.0);
  *(_QWORD *)(v105 + 56) = v126;
  v127 = *(void **)&v3[v165];
  if (!v127)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v128 = objc_msgSend(v127, "bottomAnchor");
  v129 = *(void **)&v3[v164];
  if (!v129)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  v130 = objc_msgSend(v129, "topAnchor");
  v131 = objc_msgSend(v128, "constraintEqualToAnchor:constant:", v130, -30.0);

  *(_QWORD *)(v105 + 64) = v131;
  specialized Array._endMutation()(v132);
  v133 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v105, v134, v135, v136, v137, v138, v139, v140);
  objc_msgSend(v33, "activateConstraints:", v133);

  v141 = swift_allocObject(v166, 56, 7);
  *(_OWORD *)(v141 + 16) = xmmword_10010D870;
  v142 = *(void **)&v3[v164];
  if (!v142)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v143 = objc_msgSend(v142, "centerXAnchor");
  v144 = *(void **)&v3[v165];
  if (!v144)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v145 = objc_msgSend(v144, "centerXAnchor");
  v146 = objc_msgSend(v143, "constraintEqualToAnchor:", v145);

  *(_QWORD *)(v141 + 32) = v146;
  v147 = *(void **)&v3[v164];
  if (!v147)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v148 = objc_msgSend(v147, "bottomAnchor");
  v149 = objc_msgSend(v3, "view");
  if (!v149)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v150 = v149;
  v151 = objc_msgSend(v149, "bottomAnchor");

  v152 = objc_msgSend(v148, "constraintEqualToAnchor:constant:", v151, -30.0);
  *(_QWORD *)(v141 + 40) = v152;
  v153 = *(void **)&v3[v164];
  if (v153)
  {
    v154 = objc_msgSend(v153, "heightAnchor");
    v155 = objc_msgSend(v154, "constraintEqualToConstant:", 42.0);

    *(_QWORD *)(v141 + 48) = v155;
    specialized Array._endMutation()(v156);
    v167 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((DARootViewController *)v141, v157, v158, v159, v160, v161, v162, v163);
    objc_msgSend(v33, "activateConstraints:", v167);

    return;
  }
LABEL_89:
  __break(1u);
}

unint64_t sub_1000BF5CC(void *a1)
{
  char *v1;
  char *v2;
  NSString v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  DARootViewController *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  void *v20;
  SEL v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v2 = v1;
  v4 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v4, isa);

  v7 = type metadata accessor for DeviceSelectorCell();
  v8 = swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
  result = IndexPath.row.getter(v8);
  v10 = result;
  v11 = *(DARootViewController **)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_deviceCollection];
  if (((unint64_t)v11 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_deviceCollection]);
    v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
    swift_bridgeObjectRelease(v11, v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_5;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(((unint64_t)v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)&v11->remoteCardFilter[8 * result + 16];
LABEL_5:
    v13 = objc_msgSend(objc_allocWithZone((Class)DADeviceState), "initWithDEDDevice:", v12);
    v14 = type metadata accessor for CardState();
    swift_allocObject(v14, 89, 7);
    v15 = v6;
    v16 = sub_100052384(v13);
    v17 = *(_QWORD *)(v8 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState) = v16;
    swift_retain(v16);
    swift_release(v17);
    sub_100079050();

    swift_release(v16);
    v18 = *(void **)(v8 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceViewController);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_deviceViewController) = v2;
    v19 = v2;

    v20 = *(void **)(v8 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_dedDevice);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC11Diagnostics18DeviceSelectorCell_dedDevice) = v12;

    return v8;
  }
  __break(1u);
  return result;
}

void sub_1000BF860()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  Swift::Int v24;
  __n128 v25;
  _BYTE v26[16];
  _QWORD aBlock[5];
  uint64_t v28;

  v1 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v2 = __chkstk_darwin(v1);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v26[-v5];
  v7 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0514();
  v11 = objc_msgSend((id)objc_opt_self(ELSManager), "sharedManager");
  v12 = swift_allocObject(&unk_10013B268, 56, 7);
  *(_QWORD *)(v12 + 16) = 6;
  *(_BYTE *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  aBlock[4] = sub_1000C073C;
  v28 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100040808;
  aBlock[3] = &unk_10013B280;
  v13 = _Block_copy(aBlock);
  objc_msgSend(v11, "transactionWithBlock:", v13, swift_release(v28).n128_f64[0]);
  _Block_release(v13);

  v14 = objc_msgSend(v0, "parentViewController");
  if (v14)
  {
    v15 = v14;
    v16 = objc_opt_self(UINavigationController);
    v17 = swift_dynamicCastObjCClass(v15, v16);
    if (v17)
    {
      v18 = (void *)v17;
      if (qword_10016A6D8 != -1)
        swift_once(&qword_10016A6D8, sub_1000C6380);
      v19 = type metadata accessor for ModalPresentationCoordinator(0);
      v20 = sub_100036D34(v19, (uint64_t)qword_1001723D0);
      swift_beginAccess(v20, aBlock, 33, 0);
      if ((sub_1000C65B4(v18, 1, 0, 1, 0, 0) & 1) == 0)
      {
        v21 = *(_QWORD *)(v20 + *(int *)(v19 + 24));
        v22 = v15;
        v23 = swift_bridgeObjectRetain(v21);
        v24 = sub_1000C8C58(v23, v18);

        sub_1000C4E10(v24, (uint64_t)v6);
        v25 = swift_release(v24);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v25) == 1)
        {
          sub_10003EEAC((uint64_t)v6);
        }
        else
        {
          sub_100036D7C((uint64_t)v6, (uint64_t)v10);
          sub_1000A7860((uint64_t)v10, (uint64_t)v4);
          sub_10003EEAC((uint64_t)v4);
          sub_100036DC0((uint64_t)v10);
        }
      }
      swift_endAccess(aBlock);
    }

  }
}

void sub_1000BFB78(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  Swift::Int v28;
  __n128 v29;
  _BYTE v30[16];
  _QWORD aBlock[5];
  uint64_t v32;

  v3 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v4 = __chkstk_darwin(v3);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v30[-v7];
  v9 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0514();
  objc_msgSend((id)objc_opt_self(ELSEvent), "createLoggingEventWith:", ELSEventTypeEnrollConsentApprovedWithReview);
  v13 = objc_msgSend((id)objc_opt_self(ELSManager), "sharedManager");
  v14 = swift_allocObject(&unk_10013B1F0, 56, 7);
  *(_QWORD *)(v14 + 16) = 3;
  *(_BYTE *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 1;
  *(_BYTE *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = a1;
  aBlock[4] = sub_1000C073C;
  v32 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100040808;
  aBlock[3] = &unk_10013B208;
  v15 = _Block_copy(aBlock);
  v16 = v32;
  v17 = a1;
  objc_msgSend(v13, "transactionWithBlock:", v15, swift_release(v16).n128_f64[0]);
  _Block_release(v15);

  v18 = objc_msgSend(v1, "parentViewController");
  if (v18)
  {
    v19 = v18;
    v20 = objc_opt_self(UINavigationController);
    v21 = swift_dynamicCastObjCClass(v19, v20);
    if (v21)
    {
      v22 = (void *)v21;
      if (qword_10016A6D8 != -1)
        swift_once(&qword_10016A6D8, sub_1000C6380);
      v23 = type metadata accessor for ModalPresentationCoordinator(0);
      v24 = sub_100036D34(v23, (uint64_t)qword_1001723D0);
      swift_beginAccess(v24, aBlock, 33, 0);
      if ((sub_1000C65B4(v22, 1, 0, 1, 0, 0) & 1) == 0)
      {
        v25 = *(_QWORD *)(v24 + *(int *)(v23 + 24));
        v26 = v19;
        v27 = swift_bridgeObjectRetain(v25);
        v28 = sub_1000C8C58(v27, v22);

        sub_1000C4E10(v28, (uint64_t)v8);
        v29 = swift_release(v28);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1, v9, v29) == 1)
        {
          sub_10003EEAC((uint64_t)v8);
        }
        else
        {
          sub_100036D7C((uint64_t)v8, (uint64_t)v12);
          sub_1000A7860((uint64_t)v12, (uint64_t)v6);
          sub_10003EEAC((uint64_t)v6);
          sub_100036DC0((uint64_t)v12);
        }
      }
      swift_endAccess(aBlock);
    }

  }
}

void sub_1000BFE8C()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(DEDManager), "sharedInstance");
  objc_msgSend(v0, "stopDiscovery");

}

void sub_1000BFED8(id a1, uint64_t a2, char a3, uint64_t a4, char a5, void *a6)
{
  id v10;
  Class isa;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSArray v20;
  SEL v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v27;
  SEL v28;
  id v29;
  int v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;

  if ((a3 & 1) != 0)
  {
    if ((a5 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(a1, "setStatus:", a2);
    if ((a5 & 1) != 0)
    {
LABEL_3:
      if (!a6)
        return;
      goto LABEL_7;
    }
  }
  objc_msgSend(a1, "setConsent:", a4);
  if (!a6)
    return;
LABEL_7:
  v10 = a6;
  isa = (Class)objc_msgSend(a1, "targetDevices");
  if (!isa)
  {
    sub_100037118(0, &qword_10016DA50, DEDDevice_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "setTargetDevices:", isa);
  }

  v12 = objc_msgSend(a1, "targetDevices");
  if (v12)
  {
    v13 = v12;
    v14 = sub_100037118(0, &qword_10016DA50, DEDDevice_ptr);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    v35 = v15;
    v16 = v10;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v18 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
    specialized Array._endMutation()(v19);
    if (v35)
    {
      v20.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease((DARootViewController *)v35, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      v20.super.isa = 0;
    }
    objc_msgSend(a1, "setTargetDevices:", v20.super.isa);

  }
  else
  {
    objc_msgSend(a1, "setTargetDevices:", 0);
    swift_bridgeObjectRelease(0, v28, v29, v30, v31, v32, v33, v34);

  }
}

id sub_1000C00CC(uint64_t a1, DARootViewController *a2, void *a3)
{
  char *v3;
  NSString v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_commonHeight] = 0x4045000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_componentPadding] = 0x403E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_topPadding] = 0x4024000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_topPaddingForLabel] = 0x4034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_commonParentViewPadding] = 0xC03E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_bottomButtonSpacer] = 0xC034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_fontSizeForLabels] = 0x4036000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_fontSizeForTitle] = 0x4040000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cardCellEstimatedHeight] = 0x407F400000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_tableViewPadding] = 0x402E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_tableRowHeight] = 0x405B800000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_deviceCollection] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_platformsFromQueue] = &_swiftEmptyArrayStorage;
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    v6 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for DeviceSelector();
  v14 = objc_msgSendSuper2(&v16, "initWithNibName:bundle:", v6, a3);

  return v14;
}

id sub_1000C02B8(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_commonHeight] = 0x4045000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_componentPadding] = 0x403E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_topPadding] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_topPaddingForLabel] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_commonParentViewPadding] = 0xC03E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_bottomButtonSpacer] = 0xC034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_fontSizeForLabels] = 0x4036000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_fontSizeForTitle] = 0x4040000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cardCellEstimatedHeight] = 0x407F400000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_tableViewPadding] = 0x402E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_tableRowHeight] = 0x405B800000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_headerView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_titleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_subtitleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_cancelBtn] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_devicesTableView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_deviceCollection] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_platformsFromQueue] = &_swiftEmptyArrayStorage;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for DeviceSelector();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_1000C043C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceSelector();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceSelector()
{
  return objc_opt_self(_TtC11Diagnostics14DeviceSelector);
}

uint64_t sub_1000C0514()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  static DispatchTime.now()(v11);
  aBlock[4] = sub_1000BFE8C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030658;
  aBlock[3] = &unk_10013B230;
  v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v14 = sub_100035C5C();
  v15 = sub_100035CA4((uint64_t *)&unk_10016AD10);
  v16 = sub_100035CE4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v0, v14);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v9, v5, v2, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000C0718()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C0740(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C0750(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000C0758(void *a1)
{
  uint64_t v1;

  sub_1000BFED8(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_1000C0770()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000C0794(DARootViewController *a1)
{
  uint64_t v1;

  return sub_1000BDC60(a1, *(void **)(v1 + 16));
}

_QWORD *sub_1000C079C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  char **v9;
  id v10;
  void *v11;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v30 = v3;
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v3 += 32;
      v8 = &selRef_setFill;
      v9 = &selRef_defaultMetrics;
      v32 = v4;
      v33 = a2;
      v31 = v6;
      v35 = v7;
      v36 = OBJC_IVAR____TtC11Diagnostics14DeviceSelector_platformsFromQueue;
      v34 = v3;
      while (1)
      {
        if (v6)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v30);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v7 + 16))
          {
            __break(1u);
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          v10 = *(id *)(v3 + 8 * v5);
        }
        v11 = v10;
        if (__OFADD__(v5++, 1))
          goto LABEL_34;
        if (objc_msgSend(v10, v8[130]) == (id)1
          && objc_msgSend(v11, v9[369]) != (id)3
          && !objc_msgSend(v11, "isCurrentDevice"))
        {
          break;
        }

LABEL_5:
        if (v5 == v4)
          return _swiftEmptyArrayStorage;
      }
      v3 = *(_QWORD *)(a2 + v36);
      swift_bridgeObjectRetain(v3);
      v13 = objc_msgSend(v11, "platform");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = *(_QWORD *)(v3 + 16);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v3 + 32);
      v19 = *(_QWORD *)(v3 + 40);
      if (v18 == v14 && v19 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v14, v16, 0) & 1) != 0)
      {
LABEL_17:
        swift_bridgeObjectRelease(v3);
        v20 = swift_bridgeObjectRelease(v16);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v21 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v11);
        specialized ContiguousArray._endMutation()(v22);
LABEL_18:
        v4 = v32;
        a2 = v33;
        v6 = v31;
        goto LABEL_21;
      }
      v4 = v32;
      a2 = v33;
      v6 = v31;
      if (v17 == 1)
        break;
      v23 = (uint64_t *)(v3 + 56);
      a2 = 1;
      while (1)
      {
        v24 = a2 + 1;
        if (__OFADD__(a2, 1))
          break;
        v25 = *(v23 - 1);
        v26 = *v23;
        v27 = v25 == v14 && v26 == v16;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v14, v16, 0) & 1) != 0)
          goto LABEL_17;
        v23 += 2;
        ++a2;
        if (v24 == v17)
        {

          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v16);
          goto LABEL_18;
        }
      }
LABEL_35:
      __break(1u);
LABEL_36:
      if (v3 < 0)
        v29 = v3;
      else
        v29 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v29);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v16);

LABEL_21:
    v3 = v34;
    v7 = v35;
    v8 = &selRef_setFill;
    v9 = &selRef_defaultMetrics;
    goto LABEL_5;
  }
  return _swiftEmptyArrayStorage;
}

id sub_1000C0B38()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseTableViewHeaderFooterView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BaseTableViewHeaderFooterView()
{
  return objc_opt_self(_TtC11Diagnostics29BaseTableViewHeaderFooterView);
}

uint64_t sub_1000C0B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1000C0BA0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

void sub_1000C0D54()
{
  uint64_t v0;

  sub_1000C0D70();
  qword_1001723C8 = v0;
}

void sub_1000C0D70()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  DARootViewController *v4;
  void *v5;
  void *v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  CGRect v22;
  CGRect v23;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1 = objc_msgSend(v0, "connectedScenes");

  v2 = sub_100037118(0, &qword_10016AF00, UIScene_ptr);
  v3 = sub_1000407A8();
  v4 = (DARootViewController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  sub_10009BEFC((uint64_t)v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4, v7, v8, v9, v10, v11, v12, v13);
  if (v6)
  {
    v14 = objc_opt_self(UIWindowScene);
    v15 = (void *)swift_dynamicCastObjCClass(v6, v14);
    if (!v15)

  }
  else
  {
    v15 = 0;
  }
  v16 = objc_msgSend(v15, "keyWindow");
  if (v16)
  {
    v17 = v16;
    v18 = (void *)objc_opt_self(UIDevice);
    v19 = v17;
    v20 = objc_msgSend(v18, "currentDevice");
    v21 = objc_msgSend(v20, "orientation");

    objc_msgSend(v19, "bounds");
    CGRectGetHeight(v22);
    objc_msgSend(v19, "bounds");
    CGRectGetWidth(v23);
    sub_1000B393C((uint64_t)v21, (uint64_t)&off_100133F18);

  }
  else
  {

  }
}

double sub_1000C0F48()
{
  id v0;
  id v1;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == (id)1 && (sub_100035CA4(&qword_10016D0A8), State.wrappedValue.getter(&v3), (v3 & 1) != 0))
    return 48.0;
  else
    return 24.0;
}

double sub_1000C0FE8()
{
  id v0;
  id v1;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 == (id)1 && (sub_100035CA4(&qword_10016D0A8), State.wrappedValue.getter(&v4), (v4 & 1) != 0))
    return 64.0;
  else
    return 32.0;
}

void sub_1000C1088()
{
  uint64_t v0;
  uint64_t v1;
  SEL v2;
  id v3;
  int v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  DARootViewController *v10;
  DARootViewController *v11;
  SEL v12;
  id v13;
  int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  SEL v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v27;
  char v28;
  unint64_t v29;
  unint64_t v30;

  v0 = sub_100035CA4(&qword_10016BBA0);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10010BE30;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease((DARootViewController *)0xE000000000000000, v2, v3, v4, v5, v6, v7, v8);
  v29 = 0xD000000000000013;
  v30 = 0x80000001001189B0;
  sub_100035CA4(&qword_10016D0A8);
  State.wrappedValue.getter(&v28);
  if (v28)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (v28)
    v10 = (DARootViewController *)0xE400000000000000;
  else
    v10 = (DARootViewController *)0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10, v12, v13, v14, v15, v16, v17, v18);
  v19 = v29;
  v20 = v30;
  *(_QWORD *)(v1 + 56) = &type metadata for String;
  *(_QWORD *)(v1 + 32) = v19;
  *(_QWORD *)(v1 + 40) = v20;
  print(_:separator:terminator:)(v1, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease((DARootViewController *)v1, v21, v22, v23, v24, v25, v26, v27);
}

void sub_1000C11A8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v1 + 56);
  v3 = a1;
  v2 = sub_100035CA4(&qword_10016D0A8);
  State.wrappedValue.setter(&v3, v2);
  sub_1000C1088();
}

void sub_1000C120C()
{
  uint64_t v0;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  DARootViewController *v6;
  void *v7;
  void *v8;
  SEL v9;
  id v10;
  int v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  _QWORD v20[2];
  unint64_t v21;
  char v22;

  sub_1000C496C(v0 + 96, (uint64_t)v20 + 1, &qword_10016DB88);
  sub_1000C496C((uint64_t)v20 + 1, (uint64_t)&v21, &qword_10016DB88);
  if ((v22 & 1) != 0)
  {
    sub_100035CA4(&qword_10016D0A8);
    State.wrappedValue.getter(v20);
  }
  else if (v21 <= 0x18 && ((1 << v21) & 0x1010100) != 0)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v3 = objc_msgSend(v2, "connectedScenes");

    v4 = sub_100037118(0, &qword_10016AF00, UIScene_ptr);
    v5 = sub_1000407A8();
    v6 = (DARootViewController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, v4, v5);

    sub_10009BEFC((uint64_t)v6);
    v8 = v7;
    swift_bridgeObjectRelease(v6, v9, v10, v11, v12, v13, v14, v15);
    if (v8)
    {
      v16 = objc_opt_self(UIWindowScene);
      v17 = (void *)swift_dynamicCastObjCClass(v8, v16);
      if (!v17)

    }
    else
    {
      v17 = 0;
    }
    v18 = objc_msgSend(v17, "keyWindow");
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v19, "safeAreaInsets");

    }
  }
}

id sub_1000C13F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id result;

  v3 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", a1);
  objc_msgSend(v3, "setContentMode:", 2);
  LODWORD(v4) = 1132068864;
  objc_msgSend(v3, "setContentHuggingPriority:forAxis:", 1, v4);
  LODWORD(v5) = 1132068864;
  objc_msgSend(v3, "setContentHuggingPriority:forAxis:", 0, v5);
  LODWORD(v6) = 1132068864;
  objc_msgSend(v3, "setContentCompressionResistancePriority:forAxis:", 1, v6);
  LODWORD(v7) = 1132068864;
  result = objc_msgSend(v3, "setContentCompressionResistancePriority:forAxis:", 0, v7);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v3;
  return result;
}

double sub_1000C14BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void (*v47)(void **, uint64_t *, uint64_t);
  __n128 v48;
  void *v49;
  double result;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;

  v3 = v2;
  v5 = (_OWORD *)swift_allocObject(&unk_10013B3B0, 137, 7);
  v51 = *(_OWORD *)(a1 + 16);
  v6 = v3[4];
  v7 = v3[5];
  v8 = v3[2];
  v5[5] = v3[3];
  v5[6] = v6;
  v5[7] = v7;
  *(_OWORD *)((char *)v5 + 121) = *(__int128 *)((char *)v3 + 89);
  v9 = *v3;
  v10 = v3[1];
  v5[1] = v51;
  v5[2] = v9;
  v5[3] = v10;
  v5[4] = v8;
  sub_1000C4568(v3);
  v53 = type metadata accessor for NSNotificationCenter.Publisher(255);
  v52 = sub_100035D30(&qword_10016DB00);
  v11 = sub_100035D30(&qword_10016C450);
  v12 = sub_100035D30(&qword_10016DB08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v51, &type metadata for Spacer, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for HStack(255, v14, WitnessTable);
  v17 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for VStack(255, v18, v19);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v20);
  v21 = type metadata accessor for _OverlayModifier(255, v20);
  v22 = type metadata accessor for ModifiedContent(255, v12, v21);
  v23 = sub_100035D30(&qword_10016DB10);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v25 = sub_100035D30(&qword_10016DB18);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _OffsetEffect);
  v66 = (void *)v11;
  v67 = &type metadata for Int;
  v68 = (void *)v27;
  v69 = (void *)sub_1000765C4();
  v70 = &protocol witness table for Int;
  v28 = type metadata accessor for ForEach(255, &v66);
  v64 = sub_1000C45D4();
  v65 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v21);
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v63 = sub_1000489C4(&qword_10016DB58, &qword_10016DB10, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v61 = sub_1000489C4(&qword_10016DB60, &qword_10016DB18, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v59 = &protocol witness table for _OffsetEffect;
  v57 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v28);
  v66 = &type metadata for Int;
  v67 = (void *)v28;
  v68 = &protocol witness table for Int;
  v69 = (void *)v29;
  v30 = type metadata accessor for TabView(255, &v66);
  v31 = type metadata accessor for PageTabViewStyle(255);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for TabView<A, B>, v30);
  v66 = (void *)v30;
  v67 = (void *)v31;
  v68 = (void *)v32;
  v69 = &protocol witness table for PageTabViewStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v66, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 0);
  v66 = (void *)v30;
  v67 = (void *)v31;
  v68 = (void *)v32;
  v69 = &protocol witness table for PageTabViewStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 1);
  v66 = (void *)OpaqueTypeMetadata2;
  v67 = &type metadata for Int;
  v68 = (void *)OpaqueTypeConformance2;
  v69 = &protocol witness table for Int;
  v35 = swift_getOpaqueTypeMetadata2(255, &v66, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v36 = sub_1000489C4(&qword_10016DB68, &qword_10016DB00, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  v66 = (void *)OpaqueTypeMetadata2;
  v67 = &type metadata for Int;
  v68 = (void *)OpaqueTypeConformance2;
  v69 = &protocol witness table for Int;
  v37 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v66 = (void *)v52;
  v67 = (void *)v35;
  v68 = (void *)v36;
  v69 = (void *)v37;
  v38 = type metadata accessor for SubscriptionView(255, &v66);
  v39 = sub_10002F158(&qword_10016DB70, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v38);
  v66 = (void *)v53;
  v67 = (void *)v38;
  v68 = (void *)v39;
  v69 = (void *)v40;
  v41 = type metadata accessor for SubscriptionView(0, &v66);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v41);
  v43 = GeometryReader.init(content:)(sub_1000C455C, v5, v41, v42);
  v45 = v44;
  v55 = v43;
  v56 = v44;
  v46 = type metadata accessor for GeometryReader(0, v41, v42);
  swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v46);
  v47 = *(void (**)(void **, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
  v47(&v66, &v55, v46);
  v48 = swift_release(v45);
  v49 = v67;
  v55 = (uint64_t)v66;
  v56 = v67;
  ((void (*)(uint64_t, uint64_t *, uint64_t, __n128))v47)(a2, &v55, v46, v48);
  *(_QWORD *)&result = swift_release(v49).n128_u64[0];
  return result;
}

uint64_t sub_1000C19BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  __n128 v78;
  id v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char v131[8];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  void *v148;
  void *v149;
  __int128 v150;

  v125 = a4;
  v120 = a3;
  v124 = a1;
  v128 = a5;
  v130 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v127 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v126 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PageTabViewStyle.IndexDisplayMode(0);
  __chkstk_darwin(v8);
  v122 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for PageTabViewStyle(0);
  v123 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v121 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100035D30(&qword_10016C450);
  v12 = sub_100035D30(&qword_10016DB08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, &type metadata for Spacer, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for HStack(255, v14, WitnessTable);
  v17 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for VStack(255, v18, v19);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v20);
  v21 = type metadata accessor for _OverlayModifier(255, v20);
  v22 = type metadata accessor for ModifiedContent(255, v12, v21);
  v23 = sub_100035D30(&qword_10016DB10);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v25 = sub_100035D30(&qword_10016DB18);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _OffsetEffect);
  v28 = sub_1000765C4();
  *(_QWORD *)&v146 = v11;
  *((_QWORD *)&v146 + 1) = &type metadata for Int;
  v147 = (void *)v27;
  v148 = (void *)v28;
  v149 = &protocol witness table for Int;
  v29 = type metadata accessor for ForEach(255, &v146);
  v30 = sub_1000C45D4();
  v31 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v21);
  v144 = v30;
  v145 = v31;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v33 = sub_1000489C4(&qword_10016DB58, &qword_10016DB10, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v142 = v32;
  v143 = v33;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v35 = sub_1000489C4(&qword_10016DB60, &qword_10016DB18, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v140 = v34;
  v141 = v35;
  v138 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v139 = &protocol witness table for _OffsetEffect;
  v137 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v103 = v29;
  v102 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v29);
  *(_QWORD *)&v146 = &type metadata for Int;
  *((_QWORD *)&v146 + 1) = v29;
  v147 = &protocol witness table for Int;
  v148 = (void *)v102;
  v36 = type metadata accessor for TabView(0, &v146);
  v105 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v100 = (char *)&v95 - v37;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for TabView<A, B>, v36);
  v39 = v129;
  *(_QWORD *)&v146 = v36;
  *((_QWORD *)&v146 + 1) = v129;
  v147 = (void *)v38;
  v148 = &protocol witness table for PageTabViewStyle;
  v40 = (void *)v38;
  v97 = v38;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v146, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 0);
  v111 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v96 = (char *)&v95 - v42;
  *(_QWORD *)&v146 = v36;
  *((_QWORD *)&v146 + 1) = v39;
  v147 = v40;
  v148 = &protocol witness table for PageTabViewStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v146, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 1);
  *(_QWORD *)&v146 = OpaqueTypeMetadata2;
  *((_QWORD *)&v146 + 1) = &type metadata for Int;
  v98 = OpaqueTypeMetadata2;
  v147 = (void *)OpaqueTypeConformance2;
  v148 = &protocol witness table for Int;
  v44 = (void *)OpaqueTypeConformance2;
  v99 = OpaqueTypeConformance2;
  v45 = swift_getOpaqueTypeMetadata2(0, &v146, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v115 = *(_QWORD *)(v45 - 8);
  v46 = v45;
  v106 = v45;
  __chkstk_darwin(v45);
  v101 = (char *)&v95 - v47;
  v48 = sub_100035D30(&qword_10016DB00);
  v109 = v48;
  v49 = sub_1000489C4(&qword_10016DB68, &qword_10016DB00, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  v108 = v49;
  *(_QWORD *)&v146 = OpaqueTypeMetadata2;
  *((_QWORD *)&v146 + 1) = &type metadata for Int;
  v147 = v44;
  v148 = &protocol witness table for Int;
  v107 = swift_getOpaqueTypeConformance2(&v146, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  *(_QWORD *)&v146 = v48;
  *((_QWORD *)&v146 + 1) = v46;
  v147 = (void *)v49;
  v148 = (void *)v107;
  v50 = type metadata accessor for SubscriptionView(0, &v146);
  v119 = *(_QWORD *)(v50 - 8);
  v113 = v50;
  __chkstk_darwin(v50);
  v104 = (char *)&v95 - v51;
  v52 = sub_10002F158(&qword_10016DB70, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v116 = v52;
  v114 = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v50);
  *(_QWORD *)&v146 = v130;
  *((_QWORD *)&v146 + 1) = v50;
  v147 = (void *)v52;
  v148 = (void *)v114;
  v110 = type metadata accessor for SubscriptionView(0, &v146);
  v118 = *(_QWORD *)(v110 - 8);
  v53 = __chkstk_darwin(v110);
  v112 = (char *)&v95 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v117 = (char *)&v95 - v55;
  v150 = *(_OWORD *)(a2 + 40);
  v136 = *(_OWORD *)(a2 + 40);
  sub_100035CA4(&qword_10016DB78);
  State.projectedValue.getter(&v146);
  v56 = v120;
  v132 = v120;
  v57 = v125;
  v133 = v125;
  v134 = a2;
  v135 = v124;
  v58 = v100;
  v59 = TabView.init(selection:content:)(&v146, sub_1000C4748, v131, &type metadata for Int, v103, &protocol witness table for Int, v102);
  v60 = v122;
  static PageTabViewStyle.IndexDisplayMode.automatic.getter(v59);
  v61 = v121;
  PageTabViewStyle.init(indexDisplayMode:)(v60);
  v62 = v96;
  v63 = v129;
  View.tabViewStyle<A>(_:)(v61, v36, v129, v97, &protocol witness table for PageTabViewStyle);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v61, v63);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v58, v36);
  v146 = v150;
  State.wrappedValue.getter(&v136);
  v64 = swift_allocObject(&unk_10013B3D8, 137, 7);
  *(_QWORD *)(v64 + 16) = v56;
  *(_QWORD *)(v64 + 24) = v57;
  v65 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v64 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v64 + 112) = v65;
  *(_OWORD *)(v64 + 121) = *(_OWORD *)(a2 + 89);
  v66 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v64 + 48) = v66;
  v67 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v64 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v64 + 80) = v67;
  sub_1000C4568((_QWORD *)a2);
  v68 = v101;
  v69 = v98;
  View.onChange<A>(of:initial:_:)(&v136, 0, sub_1000C4758, v64, v98, &type metadata for Int, v99, &protocol witness table for Int);
  v70 = swift_release(v64);
  (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v62, v69, v70);
  v146 = *(_OWORD *)(a2 + 24);
  sub_100035CA4(&qword_10016DB80);
  State.wrappedValue.getter(&v136);
  v71 = swift_allocObject(&unk_10013B400, 137, 7);
  *(_QWORD *)(v71 + 16) = v56;
  *(_QWORD *)(v71 + 24) = v57;
  v72 = v56;
  v73 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v71 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v71 + 112) = v73;
  *(_OWORD *)(v71 + 121) = *(_OWORD *)(a2 + 89);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v71 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v71 + 48) = v74;
  v75 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v71 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v71 + 80) = v75;
  sub_1000C4568((_QWORD *)a2);
  v76 = v104;
  v77 = v106;
  View.onReceive<A>(_:perform:)(&v136, sub_1000C4788, v71, v106, v109, v107, v108);
  swift_release(v71);
  v78 = swift_release(v136);
  (*(void (**)(char *, uint64_t, __n128))(v115 + 8))(v68, v77, v78);
  v79 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v80 = v126;
  NSNotificationCenter.publisher(for:object:)(UIDeviceOrientationDidChangeNotification, 0);

  v81 = swift_allocObject(&unk_10013B428, 137, 7);
  *(_QWORD *)(v81 + 16) = v72;
  *(_QWORD *)(v81 + 24) = v57;
  v82 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v81 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v81 + 112) = v82;
  *(_OWORD *)(v81 + 121) = *(_OWORD *)(a2 + 89);
  v83 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v81 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v81 + 48) = v83;
  v84 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v81 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v81 + 80) = v84;
  sub_1000C4568((_QWORD *)a2);
  v85 = v112;
  v86 = v113;
  v87 = v130;
  View.onReceive<A>(_:perform:)(v80, sub_1000C47E4, v81, v113, v130, v114, v116);
  v88 = swift_release(v81);
  (*(void (**)(char *, uint64_t, __n128))(v127 + 8))(v80, v87, v88);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v76, v86);
  v89 = v110;
  swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v110);
  v90 = v118;
  v91 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v92 = v117;
  v91(v117, v85, v89);
  v93 = *(void (**)(char *, uint64_t))(v90 + 8);
  v93(v85, v89);
  v91(v128, v92, v89);
  return ((uint64_t (*)(char *, uint64_t))v93)(v92, v89);
}

_QWORD *sub_1000C24C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, uint64_t);
  _QWORD *result;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;

  v63 = a4;
  v61 = a2;
  v65 = a5;
  v7 = type metadata accessor for GeometryProxy(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100035D30(&qword_10016C450);
  v12 = sub_100035D30(&qword_10016DB08);
  v62 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, &type metadata for Spacer, 0, 0);
  v14 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for HStack(255, v14, WitnessTable);
  v17 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v16, 0, 0);
  v18 = type metadata accessor for TupleView(255, v17);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v18);
  v20 = type metadata accessor for VStack(255, v18, v19);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v20);
  v55 = type metadata accessor for _OverlayModifier(255, v20);
  v21 = type metadata accessor for ModifiedContent(255, v12, v55);
  v22 = sub_100035D30(&qword_10016DB10);
  v56 = v21;
  v23 = type metadata accessor for ModifiedContent(255, v21, v22);
  v24 = sub_100035D30(&qword_10016DB18);
  v57 = v23;
  v58 = type metadata accessor for ModifiedContent(255, v23, v24);
  v25 = type metadata accessor for ModifiedContent(255, v58, &type metadata for _OffsetEffect);
  v26 = sub_1000765C4();
  v64 = v11;
  v75 = v11;
  v76 = &type metadata for Int;
  v77 = v25;
  v78 = v26;
  v59 = v26;
  v79 = &protocol witness table for Int;
  v27 = type metadata accessor for ForEach(0, &v75);
  v60 = *(_QWORD *)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&KeyPath - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&KeyPath - v31;
  v33 = *(_QWORD *)(a1 + 88);
  v80 = v33;
  if (!((unint64_t)v33 >> 62))
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
    v75 = 0;
    v76 = (void *)v34;
    KeyPath = swift_getKeyPath(&unk_10010E468);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v61, v7);
    v35 = *(unsigned __int8 *)(v8 + 80);
    v36 = (v35 + 137) & ~v35;
    v37 = swift_allocObject(&unk_10013B450, v36 + v9, v35 | 7);
    v38 = v63;
    *(_QWORD *)(v37 + 16) = v62;
    *(_QWORD *)(v37 + 24) = v38;
    v39 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v37 + 96) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v37 + 112) = v39;
    *(_OWORD *)(v37 + 121) = *(_OWORD *)(a1 + 89);
    v40 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v37 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v37 + 48) = v40;
    v41 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v37 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v37 + 80) = v41;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v37 + v36, v10, v7);
    sub_1000C4568((_QWORD *)a1);
    v42 = sub_1000C45D4();
    v43 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v55);
    v73 = v42;
    v74 = v43;
    v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
    v45 = sub_1000489C4(&qword_10016DB58, &qword_10016DB10, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    v71 = v44;
    v72 = v45;
    v46 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v57);
    v47 = sub_1000489C4(&qword_10016DB60, &qword_10016DB18, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    v69 = v46;
    v70 = v47;
    v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v58);
    v68 = &protocol witness table for _OffsetEffect;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
    ForEach<>.init(_:id:content:)(&v75, KeyPath, sub_1000C48C0, v37, v64, v25, v59, &protocol witness table for Int, v48);
    v66 = v48;
    swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v27);
    v49 = v60;
    v50 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
    v50(v32, v30, v27);
    v51 = *(void (**)(char *, uint64_t))(v49 + 8);
    v51(v30, v27);
    v50(v65, v32, v27);
    return (_QWORD *)((uint64_t (*)(char *, uint64_t))v51)(v32, v27);
  }
  if (v33 >= 0)
    v53 = v33 & 0xFFFFFFFFFFFFFF8;
  else
    v53 = v33;
  swift_bridgeObjectRetain(v33);
  v34 = _CocoaArrayWrapper.endIndex.getter(v53);
  result = sub_10009A418(&v80);
  if ((v34 & 0x8000000000000000) == 0)
    goto LABEL_3;
  __break(1u);
  return result;
}

uint64_t sub_1000C2984@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  double v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __objc2_meth_list **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __objc2_meth_list **p_opt_inst_meths;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  int v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  _QWORD *v59;
  int v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, uint64_t);
  char *v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __objc2_meth_list **v136;
  uint64_t v137;
  __objc2_meth_list **v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned __int8 v171;
  _QWORD v172[3];
  __int128 v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;

  v162 = a5;
  v161 = a3;
  v145 = sub_100035CA4(&qword_10016CA48);
  __chkstk_darwin(v145);
  v150 = (uint64_t)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v140);
  v147 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100035CA4(&qword_10016DB30);
  __chkstk_darwin(v141);
  v14 = (__objc2_meth_list **)((char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100035CA4(&qword_10016DB08);
  __chkstk_darwin(v15);
  v17 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a4, &type metadata for Spacer, 0, 0);
  v20 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v20);
  v22 = type metadata accessor for HStack(255, v20, WitnessTable);
  v23 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for VStack(255, v24, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v26);
  v143 = v26;
  v142 = v27;
  v28 = type metadata accessor for _OverlayModifier(255, v26);
  v156 = v15;
  v144 = v28;
  v29 = type metadata accessor for ModifiedContent(0, v15, v28);
  v148 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v146 = (char *)&v129 - v30;
  v31 = sub_100035D30(&qword_10016DB10);
  v149 = v29;
  v32 = type metadata accessor for ModifiedContent(255, v29, v31);
  v33 = sub_100035D30(&qword_10016DB18);
  v34 = type metadata accessor for ModifiedContent(0, v32, v33);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  p_opt_inst_meths = (__objc2_meth_list **)((char *)&v129 - v36);
  v38 = type metadata accessor for ModifiedContent(0, v34, &type metadata for _OffsetEffect);
  v39 = __chkstk_darwin(v38);
  v40 = __chkstk_darwin(v39);
  v41 = *a1;
  v160 = a2;
  v42 = *(_QWORD *)(a2 + 88);
  v159 = a6;
  v158 = v40;
  v157 = v17;
  v155 = v34;
  v154 = v43;
  v153 = (char *)&v129 - v44;
  v152 = v35;
  v151 = v45;
  v139 = v41;
  v138 = v14;
  if ((v42 & 0xC000000000000001) == 0)
  {
    if ((v41 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v41 < *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v35 = v32;
      v46 = *(id *)(v42 + 8 * v41 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_18;
  }
  v35 = v32;
  v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v42);
LABEL_5:
  v48 = v46;
  v14 = p_opt_inst_meths;
  a2 = v18;
  v32 = type metadata accessor for SelfServiceInstructionsPagerView(0, v18, v162, v47);
  sub_1000C13F4((uint64_t)v48, v172);

  v132 = (void *)v172[0];
  v131 = v172[1];
  v134 = v172[2];
  v18 = v160;
  v178 = *(_OWORD *)(v160 + 56);
  v173 = *(_OWORD *)(v160 + 56);
  sub_100035CA4(&qword_10016D0A8);
  v49 = State.wrappedValue.getter(&v171);
  v50 = v171;
  GeometryProxy.size.getter(v49);
  if (v50 == 1)
  {
    v53 = v52;
    v54 = sub_1000C0FE8();
    v6 = v53 - (v54 + v54);
    p_opt_inst_meths = &OBJC_PROTOCOL___DrawingGestureRecognizerDelegate.opt_inst_meths;
    if (qword_10016A6D0 == -1)
    {
LABEL_7:
      v55 = v32;
      v56 = v6 * (1.0 / *(double *)&qword_1001723C8);
      goto LABEL_9;
    }
LABEL_18:
    swift_once(&qword_10016A6D0, sub_1000C0D54);
    goto LABEL_7;
  }
  v57 = v51;
  p_opt_inst_meths = &OBJC_PROTOCOL___DrawingGestureRecognizerDelegate.opt_inst_meths;
  v55 = v32;
  v58 = sub_1000C0F48();
  v56 = v57 - (v58 + v58);
LABEL_9:
  v173 = v178;
  v59 = State.wrappedValue.getter(&v171);
  v60 = v171;
  GeometryProxy.size.getter(v59);
  v137 = a2;
  v136 = v14;
  v135 = v35;
  v133 = v55;
  if (v60 == 1)
  {
    v63 = v62;
    v65 = sub_1000C0FE8();
    v66 = v63 - (v65 + v65);
    v67 = v18;
  }
  else
  {
    v68 = v61;
    v69 = sub_1000C0F48();
    v70 = v68 - (v69 + v69);
    if (p_opt_inst_meths[218] != (__objc2_meth_list *)-1)
      v64 = swift_once(&qword_10016A6D0, sub_1000C0D54);
    v66 = v70 * *(double *)&qword_1001723C8;
    v67 = v160;
  }
  v71 = v66;
  v72 = static Alignment.center.getter(v64);
  _FrameLayout.init(width:height:alignment:)(&v173, *(_QWORD *)&v56, 0, *(_QWORD *)&v71, 0, v72, v73);
  v161 = v173;
  LODWORD(v160) = BYTE8(v173);
  v130 = v174;
  v74 = v175;
  v76 = v176;
  v75 = v177;
  v77 = *(_QWORD *)(v67 + 8);
  v78 = v147;
  v79 = &v147[*(int *)(v140 + 20)];
  v80 = enum case for RoundedCornerStyle.continuous(_:);
  v81 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v79, v80, v81);
  *v78 = v77;
  v78[1] = v77;
  v82 = v150;
  sub_10008B064((uint64_t)v78, v150);
  *(_WORD *)(v82 + *(int *)(v145 + 36)) = 256;
  v83 = (uint64_t)v138;
  sub_1000C4924(v82, (uint64_t)v138 + *(int *)(v141 + 36));
  v84 = v132;
  v85 = v131;
  *(_QWORD *)v83 = v132;
  *(_QWORD *)(v83 + 8) = v85;
  v86 = v134;
  v87 = v161;
  *(_QWORD *)(v83 + 16) = v134;
  *(_QWORD *)(v83 + 24) = v87;
  *(_BYTE *)(v83 + 32) = v160;
  *(_QWORD *)(v83 + 40) = v130;
  *(_BYTE *)(v83 + 48) = v74;
  *(_QWORD *)(v83 + 56) = v76;
  *(_QWORD *)(v83 + 64) = v75;
  v88 = v84;
  sub_100035C4C(v85, v86);
  sub_100036FA0(v82, &qword_10016CA48);
  sub_10008B1FC((uint64_t)v78);

  v89 = sub_100035D74(v85, v86);
  v90 = static Alignment.center.getter(v89);
  v92 = v91;
  v93 = v156;
  v94 = (uint64_t)v157;
  v95 = (uint64_t)&v157[*(int *)(v156 + 36)];
  v96 = v67;
  v97 = v67;
  v98 = v137;
  v99 = v162;
  sub_1000C33F0(v97, v95);
  v100 = (uint64_t *)(v95 + *(int *)(sub_100035CA4(&qword_10016DB50) + 36));
  *v100 = v90;
  v100[1] = v92;
  v101 = sub_1000C496C(v83, v94, &qword_10016DB30);
  v102 = __chkstk_darwin(v101);
  *(&v129 - 4) = v98;
  *(&v129 - 3) = v99;
  v103 = v139;
  *(&v129 - 2) = v96;
  *(&v129 - 1) = v103;
  v104 = static Alignment.center.getter(v102);
  v106 = v105;
  v107 = sub_1000C45D4();
  v108 = v146;
  View.overlay<A>(alignment:content:)(v104, v106, sub_1000C49B0, &v129 - 6, v93, v143, v107, v142);
  sub_100036FA0(v94, &qword_10016DB08);
  v172[0] = v103;
  v109 = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v144);
  v169 = v107;
  v170 = v109;
  v110 = v149;
  v111 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v149);
  v112 = (uint64_t)v136;
  sub_1000C3A38((uint64_t)v172, 1, v110, (uint64_t)&type metadata for Int, v111, (uint64_t)&protocol witness table for Int, (uint64_t)v136);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v108, v110);
  sub_1000C120C();
  v114 = v113;
  sub_1000C120C();
  v116 = v115;
  v117 = sub_1000489C4(&qword_10016DB58, &qword_10016DB10, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v167 = v111;
  v168 = v117;
  v118 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v135);
  v119 = sub_1000489C4(&qword_10016DB60, &qword_10016DB18, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v165 = v118;
  v166 = v119;
  v120 = v155;
  v121 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v155);
  v122 = v151;
  View.offset(x:y:)(v120, v121, v114, v116);
  (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v112, v120);
  v163 = v121;
  v164 = &protocol witness table for _OffsetEffect;
  v123 = v158;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v124 = v154;
  v125 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
  v126 = v153;
  v125(v153, v122, v123);
  v127 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
  v127(v122, v123);
  v125(v159, (uint64_t)v126, v123);
  return ((uint64_t (*)(char *, uint64_t))v127)(v126, v123);
}

uint64_t sub_1000C33F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;

  v4 = type metadata accessor for RoundedRectangle(0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (char *)v7 + *(int *)(v5 + 20);
  v10 = enum case for RoundedCornerStyle.continuous(_:);
  v11 = type metadata accessor for RoundedCornerStyle(0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  *v7 = v8;
  v7[1] = v8;
  v13 = static Color.black.getter(v12);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v25, 0, 0, &_swiftEmptyArrayStorage, *(double *)(a1 + 16), 10.0, 0.0);
  sub_10008B064((uint64_t)v7, a2);
  v14 = *(double *)v25 * 0.5;
  v15 = a2 + *(int *)(sub_100035CA4(&qword_10016DBA8) + 68);
  sub_10008B064((uint64_t)v7, v15);
  *(double *)(v15 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v14;
  v16 = v15 + *(int *)(sub_100035CA4(&qword_10016DBB0) + 36);
  v17 = v25[1];
  *(_OWORD *)v16 = v25[0];
  *(_OWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 32) = v26;
  v18 = sub_100035CA4(&qword_10016DBB8);
  *(_QWORD *)(v15 + *(int *)(v18 + 52)) = v13;
  *(_WORD *)(v15 + *(int *)(v18 + 56)) = 256;
  v19 = static Alignment.center.getter(v18);
  v21 = v20;
  v22 = (uint64_t *)(v15 + *(int *)(sub_100035CA4(&qword_10016DBC0) + 36));
  *v22 = v19;
  v22[1] = v21;
  return sub_10008B1FC((uint64_t)v7);
}

uint64_t sub_1000C3588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v29 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, &type metadata for Spacer, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for HStack(255, v10, WitnessTable);
  v13 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v12, 0, 0);
  v14 = type metadata accessor for TupleView(255, v13);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v14);
  v16 = type metadata accessor for VStack(0, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v28 - v22;
  v24 = static HorizontalAlignment.trailing.getter(v21);
  v31 = a3;
  v32 = a4;
  v33 = a1;
  v34 = a2;
  VStack.init(alignment:spacing:content:)(v24, 0, 1, sub_1000C49BC, v30, v14, v15);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v16);
  v25 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v25(v23, v20, v16);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v20, v16);
  v25(v29, v23, v16);
  return ((uint64_t (*)(char *, uint64_t))v26)(v23, v16);
}

uint64_t sub_1000C3744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  _QWORD v25[2];
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  char v35;
  uint64_t v36[2];

  v25[1] = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, &type metadata for Spacer, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v12 = type metadata accessor for HStack(0, v10, WitnessTable);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v25 - v18;
  v27 = a3;
  v28 = a4;
  v29 = a1;
  v30 = a2;
  v20 = static VerticalAlignment.center.getter(v17);
  HStack.init(alignment:spacing:content:)(v20, 0, 1, sub_1000C49C8, v26, v10, WitnessTable);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v12);
  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v22(v19, v16, v12);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  v34 = 0;
  v35 = 1;
  v36[0] = (uint64_t)&v34;
  v22(v16, v19, v12);
  v36[1] = (uint64_t)v16;
  v33[0] = &type metadata for Spacer;
  v33[1] = v12;
  v31 = &protocol witness table for Spacer;
  v32 = v21;
  sub_1000C0BA0(v36, 2uLL, (uint64_t)v33);
  v23(v19, v12);
  return ((uint64_t (*)(char *, uint64_t))v23)(v16, v12);
}

uint64_t sub_1000C390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  char v20;
  uint64_t v21[2];

  v6 = *(_QWORD *)(a3 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v17 - v11;
  (*(void (**)(uint64_t))(v10 + 72))(v13);
  v14 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v14(v12, v9, a3);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, a3);
  v14(v9, v12, a3);
  v19 = 0;
  v20 = 1;
  v21[0] = (uint64_t)v9;
  v21[1] = (uint64_t)&v19;
  v18[0] = a3;
  v18[1] = &type metadata for Spacer;
  v17[0] = a4;
  v17[1] = &protocol witness table for Spacer;
  sub_1000C0BA0(v21, 2uLL, (uint64_t)v18);
  v15(v12, a3);
  return ((uint64_t (*)(char *, uint64_t))v15)(v9, a3);
}

uint64_t sub_1000C3A38@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t WitnessTable;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v39 = a5;
  v40 = a2;
  v47 = a7;
  v48 = a1;
  v10 = type metadata accessor for Optional(255, a4);
  v51 = a6;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v10);
  v43 = v10;
  v11 = type metadata accessor for TagValueTraitKey.Value(0, v10);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  __chkstk_darwin();
  v44 = (char *)&v37 - v12;
  v37 = type metadata accessor for TagValueTraitKey.Value(0, a4);
  v13 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin();
  v15 = (char *)&v37 - v14;
  v16 = type metadata accessor for TagValueTraitKey(255, a4, a6);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v16);
  v18 = a3;
  v38 = type metadata accessor for _TraitWritingModifier(255, v16, v17);
  v19 = type metadata accessor for ModifiedContent(0, a3, v38);
  v41 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin();
  v21 = (char *)&v37 - v20;
  v22 = *(_QWORD *)(a4 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v23(v15, v48, a4);
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
  v24(v15, 0, 1, a4);
  v25 = v16;
  v26 = v16;
  v27 = v39;
  View._trait<A>(_:_:)(v25, v15, v18, v26, v39, v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v37);
  if ((v40 & 1) != 0)
  {
    v28 = v44;
    v23(v44, v48, a4);
    v24(v28, 0, 1, a4);
    v29 = v43;
    v30 = swift_checkMetadataState(0, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v28, 0, 1, v30);
  }
  else
  {
    v29 = v43;
    v31 = swift_checkMetadataState(0, v43);
    v28 = v44;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v44, 1, 1, v31);
  }
  v32 = type metadata accessor for TagValueTraitKey(0, v29, WitnessTable);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v38);
  v49 = v27;
  v50 = v33;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TagValueTraitKey<A>, v32);
  View._trait<A>(_:_:)(v32, v28, v19, v32, v34, v35);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v46);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v21, v19);
}

uint64_t sub_1000C3D40()
{
  double *v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v1 = v0;
  v2 = sub_100035CA4(&qword_10016DB90);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100037118(0, &qword_10016DB98, NSTimer_ptr);
  v5 = *v0;
  v6 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v7 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
  v8 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v6, NSRunLoopCommonModes, v4, v5);

  sub_100036FA0((uint64_t)v4, &qword_10016DB90);
  *(_QWORD *)&v16 = v8;
  v9 = type metadata accessor for NSTimer.TimerPublisher(0);
  v10 = sub_10002F158(&qword_10016DBA0, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v11 = ConnectablePublisher.autoconnect()(v9, v10);
  swift_release(v8);
  v16 = *(_OWORD *)(v1 + 3);
  v15 = v11;
  v12 = sub_100035CA4(&qword_10016DB80);
  return State.wrappedValue.setter(&v15, v12);
}

double sub_1000C3ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double result;
  _QWORD v6[6];

  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a2;
  v4 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v4, sub_1000C47F0, v6, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_1000C3F2C()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v11 = *(_OWORD *)(v0 + 40);
  v3 = sub_100035CA4(&qword_10016DB78);
  v4 = (uint64_t)State.wrappedValue.getter(&v12);
  v5 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    v1 = (__int128 *)(v0 + 40);
    v11 = *(_OWORD *)(v0 + 40);
    State.wrappedValue.getter(&v12);
    v2 = v12;
    v4 = *(_QWORD *)(v0 + 88);
    v12 = v4;
    if (!((unint64_t)v4 >> 62))
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v4 >= 0)
    v9 = v4 & 0xFFFFFFFFFFFFFF8;
  else
    v9 = v4;
  swift_bridgeObjectRetain(v4);
  v6 = _CocoaArrayWrapper.endIndex.getter(v9);
  sub_10009A418(&v12);
LABEL_4:
  if (v2 >= v6)
    v7 = 0;
  else
    v7 = v5;
  v11 = *v1;
  v10 = v7;
  return State.wrappedValue.setter(&v10, v3);
}

void sub_1000C4018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  DARootViewController *v10;
  void *v11;
  void *v12;
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  _BYTE v24[16];
  _BYTE v25[16];

  sub_1000C496C(a2 + 96, (uint64_t)v24, &qword_10016DB88);
  sub_1000C496C((uint64_t)v24, (uint64_t)v25, &qword_10016DB88);
  if (v25[8] == 1)
  {
    v6 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v7 = objc_msgSend(v6, "connectedScenes");

    v8 = sub_100037118(0, &qword_10016AF00, UIScene_ptr);
    v9 = sub_1000407A8();
    v10 = (DARootViewController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, v8, v9);

    sub_10009BEFC((uint64_t)v10);
    v12 = v11;
    swift_bridgeObjectRelease(v10, v13, v14, v15, v16, v17, v18, v19);
    if (v12)
    {
      v20 = objc_opt_self(UIWindowScene);
      v21 = (void *)swift_dynamicCastObjCClass(v12, v20);
      if (v21)
      {
        v22 = sub_10009DD24((uint64_t)objc_msgSend(v21, "interfaceOrientation"));
        type metadata accessor for SelfServiceInstructionsPagerView(0, a3, a4, v23);
        sub_1000C11A8(v22);
      }

    }
  }
}

double sub_1000C416C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C14BC(a1, a2);
}

uint64_t sub_1000C41B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_1000C41BC(_QWORD *a1)
{
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t sub_1000C4204(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v10;
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v10);
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1000C42B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain(v7);
  swift_release(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  swift_retain(v9);
  swift_release(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v16;
  return a1;
}

__n128 sub_1000C43AC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000C43D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_release(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_release(*(_QWORD *)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release(*(_QWORD *)(a1 + 80));
  v7 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t sub_1000C4474(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000C44BC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SelfServiceInstructionsPagerView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100048D34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelfServiceInstructionsPagerView);
}

uint64_t sub_1000C4524(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10011FCD0, 1);
}

uint64_t sub_1000C455C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1000C19BC(a1, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

_QWORD *sub_1000C4568(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[10];
  v6 = a1[11];
  swift_retain(a1[8]);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

unint64_t sub_1000C45D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DB20;
  if (!qword_10016DB20)
  {
    v1 = sub_100035D30(&qword_10016DB08);
    sub_1000C4658();
    sub_1000489C4(&qword_10016DB48, &qword_10016DB50, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DB20);
  }
  return result;
}

unint64_t sub_1000C4658()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DB28;
  if (!qword_10016DB28)
  {
    v1 = sub_100035D30(&qword_10016DB30);
    sub_1000C46DC();
    sub_1000489C4(&qword_10016CAA0, &qword_10016CA48, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DB28);
  }
  return result;
}

unint64_t sub_1000C46DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DB38;
  if (!qword_10016DB38)
  {
    v1 = sub_100035D30(&qword_10016DB40);
    sub_100048980();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DB38);
  }
  return result;
}

_QWORD *sub_1000C4748@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C24C0(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1000C4758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for SelfServiceInstructionsPagerView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_1000C3D40();
}

double sub_1000C4788(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C3ECC(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C4798()
{
  _QWORD *v0;

  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  return swift_deallocObject(v0, 137, 7);
}

void sub_1000C47E4(uint64_t a1)
{
  uint64_t v1;

  sub_1000C4018(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000C47F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for SelfServiceInstructionsPagerView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_1000C3F2C();
}

uint64_t sub_1000C4824()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 137) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 7));
  swift_release(*((_QWORD *)v0 + 8));
  swift_release(*((_QWORD *)v0 + 10));
  swift_release(*((_QWORD *)v0 + 12));
  swift_release(*((_QWORD *)v0 + 14));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 15));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C48C0@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_1000C2984(a1, v2 + 32, v2 + ((v7 + 137) & ~v7), v5, v6, a2);
}

uint64_t sub_1000C4924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100035CA4(&qword_10016CA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C496C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100035CA4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C49B0@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C3588(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1000C49BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000C3744(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1000C49C8()
{
  uint64_t *v0;

  return sub_1000C390C(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_1000C49D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  v1 = *a1;
  v37 = type metadata accessor for NSNotificationCenter.Publisher(255);
  v36 = sub_100035D30(&qword_10016DB00);
  v2 = sub_100035D30(&qword_10016C450);
  v3 = sub_100035D30(&qword_10016DB08);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, &type metadata for Spacer, 0, 0);
  v5 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v5);
  v7 = type metadata accessor for HStack(255, v5, WitnessTable);
  v8 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v7, 0, 0);
  v9 = type metadata accessor for TupleView(255, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v9);
  v11 = type metadata accessor for VStack(255, v9, v10);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v11);
  v12 = type metadata accessor for _OverlayModifier(255, v11);
  v13 = type metadata accessor for ModifiedContent(255, v3, v12);
  v14 = sub_100035D30(&qword_10016DB10);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = sub_100035D30(&qword_10016DB18);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _OffsetEffect);
  v38 = (void *)v2;
  v39 = &type metadata for Int;
  v40 = (void *)v18;
  v41 = (void *)sub_1000765C4();
  v42 = &protocol witness table for Int;
  v19 = type metadata accessor for ForEach(255, &v38);
  sub_1000C45D4();
  swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v12);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_1000489C4(&qword_10016DB58, &qword_10016DB10, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  sub_1000489C4(&qword_10016DB60, &qword_10016DB18, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v19);
  v38 = &type metadata for Int;
  v39 = (void *)v19;
  v40 = &protocol witness table for Int;
  v41 = (void *)v20;
  v21 = type metadata accessor for TabView(255, &v38);
  v22 = type metadata accessor for PageTabViewStyle(255);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for TabView<A, B>, v21);
  v38 = (void *)v21;
  v39 = (void *)v22;
  v40 = (void *)v23;
  v41 = &protocol witness table for PageTabViewStyle;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v38, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 0);
  v38 = (void *)v21;
  v39 = (void *)v22;
  v40 = (void *)v23;
  v41 = &protocol witness table for PageTabViewStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.tabViewStyle<A>(_:)>>, 1);
  v38 = (void *)OpaqueTypeMetadata2;
  v39 = &type metadata for Int;
  v40 = (void *)OpaqueTypeConformance2;
  v41 = &protocol witness table for Int;
  v26 = swift_getOpaqueTypeMetadata2(255, &v38, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v27 = sub_1000489C4(&qword_10016DB68, &qword_10016DB00, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
  v38 = (void *)OpaqueTypeMetadata2;
  v39 = &type metadata for Int;
  v40 = (void *)OpaqueTypeConformance2;
  v41 = &protocol witness table for Int;
  v28 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v38 = (void *)v36;
  v39 = (void *)v26;
  v40 = (void *)v27;
  v41 = (void *)v28;
  v29 = type metadata accessor for SubscriptionView(255, &v38);
  v30 = sub_10002F158(&qword_10016DB70, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v29);
  v38 = (void *)v37;
  v39 = (void *)v29;
  v40 = (void *)v30;
  v41 = (void *)v31;
  v32 = type metadata accessor for SubscriptionView(255, &v38);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v32);
  v34 = type metadata accessor for GeometryReader(255, v32, v33);
  return swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v34);
}

uint64_t sub_1000C4E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_1000C80CC(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_1000C816C(result, v5, a1, a2);
    v7 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_1000C4EB0(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  unint64_t v6;

  result = sub_1000C80CC(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_1000C89D8(result, v3, 0, a1);
  sub_1000582D0(v5, v6);
  return v5;
}

uint64_t sub_1000C4F28(uint64_t a1)
{
  return sub_1000C4F40(a1, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000C81F8);
}

uint64_t sub_1000C4F34(uint64_t a1)
{
  return sub_1000C4F40(a1, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_1000C851C);
}

uint64_t sub_1000C4F40(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;

  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.startIndex.getter(v5);
    v8 = v7;
    v9 = __CocoaSet.endIndex.getter(v5);
    v11 = static __CocoaSet.Index.== infix(_:_:)(v6, v8, v9, v10);
    swift_bridgeObjectRelease(v9);
    if ((v11 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_1000C8784(a1);
  if ((v15 & 1) == 0)
  {
    v8 = v14;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v14)
    {
      v6 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1000584FC(v6, v8, v4 != 0);
        return 0;
      }
LABEL_10:
      v12 = a2(v6, v8, v4 != 0, a1);
      sub_1000584FC(v6, v8, v4 != 0);
      return v12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C5058(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1000C5060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v1 = v0;
  result = type metadata accessor for ModalPresentationCoordinator(0);
  v3 = *(int *)(result + 20);
  if (*(_BYTE *)(v0 + v3) == 1)
  {
    v4 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_10010BE30;
    if (qword_10016A678 != -1)
      swift_once(&qword_10016A678, sub_10008BF34);
    v6 = (void *)qword_100172378;
    *(_QWORD *)(v5 + 56) = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
    *(_QWORD *)(v5 + 64) = sub_100046FF0();
    *(_QWORD *)(v5 + 32) = v6;
    v7 = (void *)static OS_os_log.default.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    os_log(_:dso:log:type:_:)("## Resuming presentation coordinator", 36, 2, &_mh_execute_header, v7, v8, v5);
    swift_bridgeObjectRelease(v5);

    *(_BYTE *)(v1 + v3) = 0;
    return sub_1000C541C();
  }
  return result;
}

uint64_t sub_1000C5184(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v32 = (uint64_t)&v29 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - v16;
  result = type metadata accessor for ModalPresentationCoordinator(0);
  v19 = *(int *)(result + 20);
  if ((*(_BYTE *)(v3 + v19) & 1) == 0)
  {
    v29 = v13;
    v30 = a1;
    v31 = a2;
    v20 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_10010BE30;
    if (qword_10016A678 != -1)
      swift_once(&qword_10016A678, sub_10008BF34);
    v22 = (void *)qword_100172378;
    *(_QWORD *)(v21 + 56) = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
    *(_QWORD *)(v21 + 64) = sub_100046FF0();
    *(_QWORD *)(v21 + 32) = v22;
    v23 = (void *)static OS_os_log.default.getter(v22);
    v24 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("## Pausing presentation coordinator", 35, 2, &_mh_execute_header, v23, v24, v21);
    swift_bridgeObjectRelease(v21);

    *(_BYTE *)(v3 + v19) = 1;
    sub_1000C5E6C(v3, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      return sub_10003EEAC((uint64_t)v8);
    }
    else
    {
      sub_100036D7C((uint64_t)v8, (uint64_t)v17);
      v25 = sub_1000C6400();
      if (v25)
      {
        v26 = v25;
        v17[*(int *)(v9 + 32)] = 0;
        v27 = (uint64_t)v29;
        sub_100037010((uint64_t)v17, (uint64_t)v29);
        v28 = v32;
        sub_1000A8654(v32, v27);
        sub_100036DC0(v28);
        sub_1000C65B4(v26, 0, 0, 1, v30, v31);

      }
      return sub_100036DC0((uint64_t)v17);
    }
  }
  return result;
}

uint64_t sub_1000C541C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  Swift::Int v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  __n128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD aBlock[5];
  uint64_t v90;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v86 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  __chkstk_darwin(v2);
  v85 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v83 = *(_QWORD *)(v4 - 8);
  v84 = v4;
  __chkstk_darwin(v4);
  v82 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v7 = __chkstk_darwin(v6);
  v78 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v77 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v77 - v12;
  v14 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v81 = (uint64_t)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v77 - v19;
  v80 = v21;
  __chkstk_darwin(v18);
  v23 = (id *)((char *)&v77 - v22);
  v24 = type metadata accessor for ModalPresentationCoordinator(0);
  v25 = *(_QWORD *)(v1 + *(int *)(v24 + 24));
  v26 = swift_bridgeObjectRetain(v25);
  sub_1000C6A78(v26, (uint64_t)v13);
  swift_bridgeObjectRelease(v25);
  v79 = v15;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v88 = v14;
  if (v27(v13, 1, v14) == 1)
    return sub_10003EEAC((uint64_t)v13);
  sub_100036D7C((uint64_t)v13, (uint64_t)v23);
  v29 = sub_1000C6400();
  if (!v29)
  {
    if ((*(_BYTE *)(v1 + *(int *)(v24 + 20)) & 1) != 0)
      goto LABEL_6;
    v77 = v1;
    v31 = (uint64_t)v23;
    v32 = *v23;
    v33 = swift_bridgeObjectRetain(v25);
    v34 = v32;
    v35 = sub_1000C8C58(v33, v32);
    sub_1000C4E10(v35, (uint64_t)v11);
    v36 = swift_release(v35);
    v37 = v88;
    if (((unsigned int (*)(char *, uint64_t, __n128))v27)(v11, 1, v36) == 1)
    {
      sub_10003EEAC((uint64_t)v11);
    }
    else
    {
      sub_100036D7C((uint64_t)v11, (uint64_t)v20);
      v38 = v78;
      sub_1000A7860((uint64_t)v20, v78);
      sub_10003EEAC(v38);
      sub_100036DC0((uint64_t)v20);
    }

    if (*(_BYTE *)(v31 + 8) != 1)
      goto LABEL_37;
    v39 = v31 + *(int *)(v37 + 44);
    if ((*(_BYTE *)(v39 + 32) & 1) == 0)
    {
      v41 = *(double *)(v39 + 16);
      v40 = *(double *)(v39 + 24);
      v43 = *(double *)v39;
      v42 = *(double *)(v39 + 8);
      v44 = objc_msgSend(v34, "popoverPresentationController");
      objc_msgSend(v44, "setSourceRect:", v43, v42, v41, v40);

      v45 = objc_msgSend(v34, "popoverPresentationController");
      if (v45)
      {
        v46 = v45;
        objc_msgSend(v45, "setPermittedArrowDirections:", 3);

      }
    }
    v47 = objc_msgSend(v34, "popoverPresentationController");
    if (!v47)
    {
LABEL_37:
      v61 = v77;
      sub_10003EEAC(v77);
      sub_100037010(v31, v61);
      v62 = v79;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v61, 0, 1, v37);
      v63 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
      v64 = (void *)static OS_dispatch_queue.main.getter(v63);
      v65 = v81;
      sub_100037010(v31, v81);
      v66 = *(unsigned __int8 *)(v62 + 80);
      v67 = (v66 + 16) & ~v66;
      v68 = swift_allocObject(&unk_10013B528, v67 + v80, v66 | 7);
      sub_100036D7C(v65, v68 + v67);
      aBlock[4] = sub_1000C8EA8;
      v90 = v68;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100030658;
      aBlock[3] = &unk_10013B540;
      v69 = _Block_copy(aBlock);
      v70 = swift_release(v90);
      v71 = v82;
      static DispatchQoS.unspecified.getter(v70);
      aBlock[0] = _swiftEmptyArrayStorage;
      v72 = sub_10002F158((unint64_t *)&qword_10016B5F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v73 = sub_100035CA4((uint64_t *)&unk_10016AD10);
      v74 = sub_100035CE4();
      v75 = v85;
      v76 = v87;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v73, v74, v87, v72);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v71, v75, v69);
      _Block_release(v69);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v75, v76);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v71, v84);
      v30 = v31;
      return sub_100036DC0(v30);
    }
    v48 = v47;
    v49 = (void *)qword_10016B3C0;
    if (qword_10016B3C0)
    {
      v50 = type metadata accessor for SelfServiceDestinationPickerViewController();
      if (!swift_dynamicCastClass(v49, v50))
      {
        v58 = v49;
LABEL_35:
        v57 = v58;
        goto LABEL_36;
      }
    }
    if (qword_10016A600 != -1)
      swift_once(&qword_10016A600, sub_1000490B8);
    v51 = objc_msgSend((id)qword_100172310, "viewControllers");
    v52 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
    v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v51, v52);

    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0)
        v59 = v53;
      else
        v59 = v53 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v53);
      v54 = _CocoaArrayWrapper.endIndex.getter(v59);
      swift_bridgeObjectRelease(v53);
      if (v54)
      {
LABEL_22:
        v55 = v54 - 1;
        if (__OFSUB__(v54, 1))
        {
          __break(1u);
        }
        else if ((v53 & 0xC000000000000001) == 0)
        {
          if ((v55 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v55 < *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v56 = *(id *)(v53 + 8 * v55 + 32);
LABEL_27:
            v57 = v56;
            swift_bridgeObjectRelease(v53);
LABEL_36:
            v60 = objc_msgSend(v57, "view");

            objc_msgSend(v48, "setSourceView:", v60);
            goto LABEL_37;
          }
          __break(1u);
          goto LABEL_42;
        }
        v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v53);
        goto LABEL_27;
      }
    }
    else
    {
      v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v54)
        goto LABEL_22;
    }
    swift_bridgeObjectRelease(v53);
    if (qword_10016A5F8 == -1)
    {
LABEL_34:
      v58 = (id)qword_100172300;
      goto LABEL_35;
    }
LABEL_42:
    swift_once(&qword_10016A5F8, sub_100048E78);
    goto LABEL_34;
  }

LABEL_6:
  v30 = (uint64_t)v23;
  return sub_100036DC0(v30);
}

uint64_t type metadata accessor for ModalPresentationCoordinator.QueueEntry(uint64_t a1)
{
  return sub_1000C5E38(a1, qword_10016DC20, (uint64_t)&nominal type descriptor for ModalPresentationCoordinator.QueueEntry);
}

uint64_t type metadata accessor for ModalPresentationCoordinator(uint64_t a1)
{
  return sub_1000C5E38(a1, (uint64_t *)&unk_10016DCC8, (uint64_t)&nominal type descriptor for ModalPresentationCoordinator);
}

uint64_t sub_1000C5E38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1000C5E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000C5EB4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

_QWORD *sub_1000C5ED0@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1000C5EF0(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v16;
  int *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v16 = a2 & 1;
  v17 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v18 = a9 + v17[9];
  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = v16;
  *(_QWORD *)(a9 + 16) = a3;
  v19 = a1;
  Date.init()(v19);
  *(_BYTE *)(a9 + v17[8]) = a4;
  *(_QWORD *)v18 = a5;
  *(_BYTE *)(v18 + 8) = a6 & 1;
  v20 = objc_msgSend(v19, "popoverPresentationController");
  v21 = v20;
  if (v20)
  {
    objc_msgSend(v20, "sourceRect");
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v29 = v28;

  }
  else
  {

    v23 = 0;
    v25 = 0;
    v27 = 0;
    v29 = 0;
  }
  v30 = (_QWORD *)(a9 + v17[10]);
  v31 = a9 + v17[11];
  *(_QWORD *)v31 = v23;
  *(_QWORD *)(v31 + 8) = v25;
  *(_QWORD *)(v31 + 16) = v27;
  *(_QWORD *)(v31 + 24) = v29;
  *(_BYTE *)(v31 + 32) = v21 == 0;
  *v30 = a7;
  v30[1] = a8;
}

Swift::Int sub_1000C6038()
{
  id *v0;
  id *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = *v0;
  NSObject.hash(into:)(v6);

  Hasher._combine(_:)(*((unsigned __int8 *)v1 + 8));
  Hasher._combine(_:)((Swift::UInt)v1[2]);
  v3 = type metadata accessor for Date(0);
  v4 = sub_10002F158((unint64_t *)&qword_10016D728, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1000C60EC(uint64_t a1)
{
  id *v1;
  id *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *v1;
  NSObject.hash(into:)(a1);

  Hasher._combine(_:)(*((unsigned __int8 *)v2 + 8));
  Hasher._combine(_:)((Swift::UInt)v2[2]);
  v5 = type metadata accessor for Date(0);
  v6 = sub_10002F158((unint64_t *)&qword_10016D728, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
}

Swift::Int sub_1000C6184(uint64_t a1)
{
  id *v1;
  id *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = *v1;
  NSObject.hash(into:)(v7);

  Hasher._combine(_:)(*((unsigned __int8 *)v2 + 8));
  Hasher._combine(_:)((Swift::UInt)v2[2]);
  v4 = type metadata accessor for Date(0);
  v5 = sub_10002F158((unint64_t *)&qword_10016D728, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1000C6234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v3 != v4)
    return v4 & (v3 ^ 1u);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 == v7)
    return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28));
  else
    return v6 < v7;
}

BOOL sub_1000C6278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v3 == v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a1 + 16);
    if (v6 == v7)
      v5 = static Date.< infix(_:_:)(a2 + *(int *)(a3 + 28), a1 + *(int *)(a3 + 28));
    else
      v5 = v6 < v7;
  }
  else
  {
    v5 = v4 & (v3 ^ 1);
  }
  return (v5 & 1) == 0;
}

BOOL sub_1000C62D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v3 == v4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a2 + 16);
    if (v6 == v7)
      v5 = static Date.< infix(_:_:)(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28));
    else
      v5 = v6 < v7;
  }
  else
  {
    v5 = v4 & (v3 ^ 1);
  }
  return (v5 & 1) == 0;
}

uint64_t sub_1000C6334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned __int8 *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v3 != v4)
    return v4 & (v3 ^ 1u);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 == v7)
    return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 28), a1 + *(int *)(a3 + 28));
  else
    return v6 < v7;
}

uint64_t sub_1000C6380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = type metadata accessor for ModalPresentationCoordinator(0);
  sub_1000C8998(v0, qword_1001723D0);
  v1 = sub_100036D34(v0, (uint64_t)qword_1001723D0);
  v2 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_BYTE *)(v1 + *(int *)(v0 + 20)) = 0;
  *(_QWORD *)(v1 + *(int *)(v0 + 24)) = &_swiftEmptySetSingleton;
  return result;
}

id sub_1000C6400()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;

  v0 = (void *)qword_10016B3C0;
  if (qword_10016B3C0)
  {
    v1 = type metadata accessor for SelfServiceDestinationPickerViewController();
    if (!swift_dynamicCastClass(v0, v1))
    {
      v9 = v0;
LABEL_20:
      v8 = v9;
      goto LABEL_21;
    }
  }
  if (qword_10016A600 != -1)
    swift_once(&qword_10016A600, sub_1000490B8);
  v2 = objc_msgSend((id)qword_100172310, "viewControllers");
  v3 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_7;
LABEL_18:
    swift_bridgeObjectRelease(v4);
    if (qword_10016A5F8 == -1)
    {
LABEL_19:
      v9 = (id)qword_100172300;
      goto LABEL_20;
    }
LABEL_26:
    swift_once(&qword_10016A5F8, sub_100048E78);
    goto LABEL_19;
  }
  if (v4 < 0)
    v10 = v4;
  else
    v10 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_18;
LABEL_7:
  v6 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_23:
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    goto LABEL_12;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v6 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = *(id *)(v4 + 8 * v6 + 32);
LABEL_12:
  v8 = v7;
  swift_bridgeObjectRelease(v4);
LABEL_21:
  v11 = objc_msgSend(v8, "presentedViewController");

  return v11;
}

uint64_t sub_1000C65B4(void *a1, int a2, uint64_t a3, int a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const void *v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v31 = a4;
  LODWORD(v32) = a2;
  v30 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000C6400();
  if (v16)
  {
    v17 = v16;
    sub_100037118(0, &qword_10016D880, NSObject_ptr);
    if ((static NSObject.== infix(_:_:)(a1) & 1) != 0)
    {
      sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
      v29 = static OS_dispatch_queue.main.getter();
      v18 = swift_allocObject(&unk_10013B4B0, 64, 7);
      *(_QWORD *)(v18 + 16) = v30;
      *(_BYTE *)(v18 + 24) = v31 & 1;
      *(_QWORD *)(v18 + 32) = a1;
      *(_BYTE *)(v18 + 40) = v32 & 1;
      *(_QWORD *)(v18 + 48) = a5;
      *(_QWORD *)(v18 + 56) = a6;
      aBlock[4] = sub_100037088;
      v35 = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100030658;
      aBlock[3] = &unk_10013B4C8;
      v32 = _Block_copy(aBlock);
      v19 = v35;
      v20 = a1;
      sub_100035C4C((uint64_t)a5, a6);
      v21 = swift_release(v19);
      static DispatchQoS.unspecified.getter(v21);
      aBlock[0] = _swiftEmptyArrayStorage;
      v22 = sub_10002F158((unint64_t *)&qword_10016B5F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v23 = sub_100035CA4((uint64_t *)&unk_10016AD10);
      v24 = sub_100035CE4();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v9, v22);
      v25 = v32;
      v26 = (void *)v29;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v32);
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v9);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      return 1;
    }

  }
  if (a5)
    a5();
  return 0;
}

void sub_1000C6848(void **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  Swift::Int v20;
  __n128 v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29[2];

  v2 = v1;
  v4 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v29[0] = (uint64_t)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v29 - v9;
  __chkstk_darwin(v8);
  v12 = (void **)((char *)v29 - v11);
  v13 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  __chkstk_darwin(v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ModalPresentationCoordinator(0) + 24));
  v18 = v16;
  v19 = swift_bridgeObjectRetain(v17);
  v20 = sub_1000C8C58(v19, v18);

  sub_1000C4E10(v20, (uint64_t)v15);
  v21 = swift_release(v20);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 48))(v15, 1, v4, v21);
  sub_10003EEAC((uint64_t)v15);
  sub_100037010((uint64_t)a1, (uint64_t)v12);
  if ((_DWORD)v4 != 1)
  {
    sub_100036DC0((uint64_t)v12);
    return;
  }
  v22 = sub_1000C6400();
  if (v22)
  {
    v23 = v22;
    v24 = *v12;
    sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
    v25 = v24;
    v26 = static NSObject.== infix(_:_:)(v23);
    sub_100036DC0((uint64_t)v12);

    if ((v26 & 1) != 0)
      return;
  }
  else
  {
    sub_100036DC0((uint64_t)v12);
  }
  v27 = v29[0];
  sub_100037010((uint64_t)a1, v29[0]);
  sub_1000A8654((uint64_t)v10, v27);
  sub_100036DC0((uint64_t)v10);
  v28 = sub_1000C6400();
  if (v28)

  else
    sub_1000C541C();
}

uint64_t sub_1000C6A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v4 = __chkstk_darwin(v45);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v42 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v42 - v11;
  __chkstk_darwin(v10);
  v15 = (char *)&v42 - v14;
  v16 = a1 + 56;
  v17 = *(_BYTE *)(a1 + 32);
  v18 = 1 << v17;
  v19 = -1;
  if (1 << v17 < 64)
    v19 = ~(-1 << (1 << v17));
  v20 = v19 & *(_QWORD *)(a1 + 56);
  if (!v20)
  {
    v26 = v17 & 0x3F;
    if (v26 > 6)
    {
      v23 = (unint64_t)(v18 + 63) >> 6;
      v38 = *(_QWORD *)(a1 + 64);
      if (v38)
      {
        v44 = a2;
        a2 = 1;
        goto LABEL_38;
      }
      if (v26 >= 8)
      {
        v38 = *(_QWORD *)(a1 + 72);
        v44 = a2;
        if (v38)
        {
          a2 = 2;
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 80);
          if (!v38)
            goto LABEL_45;
          a2 = 3;
        }
        goto LABEL_38;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, 1, 1, v45);
  }
  v44 = a2;
  a2 = 0;
  v21 = __clz(__rbit64(v20));
  v22 = (v20 - 1) & v20;
  v23 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    v24 = *(_QWORD *)(a1 + 48);
    v43 = v13;
    v25 = *(_QWORD *)(v13 + 72);
    sub_100037010(v24 + v25 * v21, (uint64_t)v12);
    sub_100036D7C((uint64_t)v12, (uint64_t)v15);
    swift_bridgeObjectRetain(a1);
    v12 = (char *)v45;
    while (v22)
    {
      while (1)
      {
        v27 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v28 = v27 | (a2 << 6);
LABEL_25:
        sub_100037010(*(_QWORD *)(a1 + 48) + v28 * v25, (uint64_t)v6);
        sub_100036D7C((uint64_t)v6, (uint64_t)v9);
        v32 = v15[8];
        v33 = v9[8];
        if (v32 == v33)
          break;
        if ((v33 & (v32 ^ 1) & 1) != 0)
          goto LABEL_32;
LABEL_7:
        sub_100036DC0((uint64_t)v9);
        if (!v22)
          goto LABEL_9;
      }
      v34 = *((_QWORD *)v15 + 2);
      v35 = *((_QWORD *)v9 + 2);
      if (v34 == v35)
      {
        if ((static Date.< infix(_:_:)(&v15[*((int *)v12 + 7)], &v9[*((int *)v12 + 7)]) & 1) != 0)
          goto LABEL_32;
        goto LABEL_7;
      }
      if (v34 >= v35)
        goto LABEL_7;
LABEL_32:
      sub_100036DC0((uint64_t)v15);
      sub_100036D7C((uint64_t)v9, (uint64_t)v15);
    }
LABEL_9:
    v29 = a2 + 1;
    if (!__OFADD__(a2, 1))
      break;
    __break(1u);
LABEL_45:
    if (v26 < 9)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, 1, 1, v45);
    v38 = *(_QWORD *)(a1 + 88);
    if (v38)
    {
      a2 = 4;
      goto LABEL_38;
    }
    v38 = *(_QWORD *)(a1 + 96);
    if (v38)
    {
      a2 = 5;
      goto LABEL_38;
    }
LABEL_51:
    v39 = 0;
    v40 = 6;
    if (v23 > 6)
      v40 = v23;
    v41 = v40 - 6;
    do
    {
      if (v41 == v39)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, 1, 1, v45);
      v38 = *(_QWORD *)(a1 + 104 + 8 * v39++);
    }
    while (!v38);
    a2 = v39 + 5;
LABEL_38:
    v22 = (v38 - 1) & v38;
    v21 = __clz(__rbit64(v38)) + (a2 << 6);
  }
  if (v29 >= v23)
    goto LABEL_34;
  v30 = *(_QWORD *)(v16 + 8 * v29);
  ++a2;
  if (v30)
    goto LABEL_24;
  a2 = v29 + 1;
  if (v29 + 1 >= v23)
    goto LABEL_34;
  v30 = *(_QWORD *)(v16 + 8 * a2);
  if (v30)
    goto LABEL_24;
  a2 = v29 + 2;
  if (v29 + 2 >= v23)
    goto LABEL_34;
  v30 = *(_QWORD *)(v16 + 8 * a2);
  if (v30)
    goto LABEL_24;
  a2 = v29 + 3;
  if (v29 + 3 >= v23)
    goto LABEL_34;
  v30 = *(_QWORD *)(v16 + 8 * a2);
  if (v30)
    goto LABEL_24;
  v31 = v29 + 4;
  if (v31 < v23)
  {
    v30 = *(_QWORD *)(v16 + 8 * v31);
    if (v30)
    {
      a2 = v31;
LABEL_24:
      v22 = (v30 - 1) & v30;
      v28 = __clz(__rbit64(v30)) + (a2 << 6);
      goto LABEL_25;
    }
    while (1)
    {
      a2 = v31 + 1;
      if (__OFADD__(v31, 1))
        break;
      if (a2 >= v23)
        goto LABEL_34;
      v30 = *(_QWORD *)(v16 + 8 * a2);
      ++v31;
      if (v30)
        goto LABEL_24;
    }
    __break(1u);
    goto LABEL_51;
  }
LABEL_34:
  swift_release(a1);
  v36 = v44;
  sub_100036D7C((uint64_t)v15, v44);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))(v43 + 56))(v36, 0, 1, v12);
}

void sub_1000C6E50(id *a1)
{
  int *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  double v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];
  uint64_t v23;

  v2 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v3 = (char *)a1 + v2[9];
  if ((v3[8] & 1) == 0)
    objc_msgSend(*a1, "setModalTransitionStyle:", *(_QWORD *)v3);
  v4 = (void *)qword_10016B3C0;
  if (!qword_10016B3C0
    || (v5 = type metadata accessor for SelfServiceDestinationPickerViewController(), swift_dynamicCastClass(v4, v5)))
  {
    if (qword_10016A600 != -1)
      swift_once(&qword_10016A600, sub_1000490B8);
    v6 = objc_msgSend((id)qword_100172310, "viewControllers");
    v7 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v15 = v8;
      else
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v9 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease(v8);
      if (v9)
      {
LABEL_9:
        v10 = v9 - 1;
        if (__OFSUB__(v9, 1))
        {
          __break(1u);
        }
        else if ((v8 & 0xC000000000000001) == 0)
        {
          if ((v10 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v10 < *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v11 = *(id *)(v8 + 8 * v10 + 32);
LABEL_14:
            v12 = v11;
            swift_bridgeObjectRelease(v8);
            goto LABEL_23;
          }
          __break(1u);
          goto LABEL_31;
        }
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
        goto LABEL_14;
      }
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease(v8);
    if (qword_10016A5F8 == -1)
    {
LABEL_21:
      v14 = (id)qword_100172300;
      goto LABEL_22;
    }
LABEL_31:
    swift_once(&qword_10016A5F8, sub_100048E78);
    goto LABEL_21;
  }
  v14 = v4;
LABEL_22:
  v12 = v14;
LABEL_23:
  v16 = *a1;
  v17 = *((unsigned __int8 *)a1 + v2[8]);
  v18 = (id *)((char *)a1 + v2[10]);
  if (*v18)
  {
    v19 = v18[1];
    v22[4] = *v18;
    v23 = v19;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    v22[2] = sub_100030658;
    v22[3] = &unk_10013B568;
    v20 = _Block_copy(v22);
    v21 = v23;
    swift_retain(v19);
    *(_QWORD *)&v13 = swift_release(v21).n128_u64[0];
  }
  else
  {
    v20 = 0;
  }
  objc_msgSend(v12, "presentViewController:animated:completion:", v16, v17, v20, v13);
  _Block_release(v20);

}

void sub_1000C70CC(uint64_t a1, char a2, id a3, char a4, void *a5, uint64_t a6)
{
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;

  if ((a2 & 1) == 0)
    objc_msgSend(a3, "setModalTransitionStyle:", a1);
  v9 = (void *)qword_10016B3C0;
  if (qword_10016B3C0)
  {
    v10 = type metadata accessor for SelfServiceDestinationPickerViewController();
    if (!swift_dynamicCastClass(v9, v10))
    {
      v17 = v9;
      if (!a5)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  if (qword_10016A600 != -1)
    swift_once(&qword_10016A600, sub_1000490B8);
  v11 = objc_msgSend((id)qword_100172310, "viewControllers");
  v12 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if (!((unint64_t)v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_9;
LABEL_22:
    swift_bridgeObjectRelease(v13);
    if (qword_10016A5F8 == -1)
      goto LABEL_23;
    goto LABEL_30;
  }
  if (v13 < 0)
    v19 = v13;
  else
    v19 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v14 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v13);
  if (!v14)
    goto LABEL_22;
LABEL_9:
  v15 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
LABEL_27:
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
LABEL_14:
    v17 = v16;
    swift_bridgeObjectRelease(v13);
    if (!a5)
      goto LABEL_25;
    goto LABEL_24;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v15 < *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(v13 + 8 * v15 + 32);
    goto LABEL_14;
  }
  __break(1u);
LABEL_30:
  swift_once(&qword_10016A5F8, sub_100048E78);
LABEL_23:
  v17 = (id)qword_100172300;
  if (a5)
  {
LABEL_24:
    v21[4] = a5;
    v22 = a6;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 1107296256;
    v21[2] = sub_100030658;
    v21[3] = &unk_10013B4F0;
    a5 = _Block_copy(v21);
    v20 = v22;
    swift_retain(a6);
    *(_QWORD *)&v18 = swift_release(v20).n128_u64[0];
  }
LABEL_25:
  objc_msgSend(v17, "dismissViewControllerAnimated:completion:", a4 & 1, a5, v18);
  _Block_release(a5);

}

uint64_t sub_1000C7320()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000C7354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C7364(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

Swift::Int sub_1000C736C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  Swift::Int result;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v8 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_100035CA4(&qword_10016D730);
  result = static _SetStorage.allocate(capacity:)(a3);
  v11 = result;
  v35 = a1;
  v36 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 56;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v36)
      {
LABEL_37:
        swift_release(a4);
        return v11;
      }
      v19 = v35[v18];
      ++v14;
      if (!v19)
      {
        v14 = v18 + 1;
        if (v18 + 1 >= v36)
          goto LABEL_37;
        v19 = v35[v14];
        if (!v19)
        {
          v14 = v18 + 2;
          if (v18 + 2 >= v36)
            goto LABEL_37;
          v19 = v35[v14];
          if (!v19)
          {
            v20 = v18 + 3;
            if (v20 >= v36)
              goto LABEL_37;
            v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                v14 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v14 >= v36)
                  goto LABEL_37;
                v19 = v35[v14];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v14 = v20;
          }
        }
      }
LABEL_24:
      v13 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    v21 = *(_QWORD *)(v37 + 72);
    sub_100037010(*(_QWORD *)(a4 + 48) + v21 * v17, (uint64_t)v10);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v11 + 40));
    v22 = *(id *)v10;
    NSObject.hash(into:)(v39);

    Hasher._combine(_:)(v10[8]);
    Hasher._combine(_:)(*((_QWORD *)v10 + 2));
    v23 = type metadata accessor for Date(0);
    v24 = sub_10002F158((unint64_t *)&qword_10016D728, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v39, v23, v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v11 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    result = sub_100036D7C((uint64_t)v10, *(_QWORD *)(v11 + 48) + v28 * v21);
    ++*(_QWORD *)(v11 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_1000C7698(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100035CA4(&qword_10016D760);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000C78F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_39:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100035CA4(&qword_10016D768);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_42;
    if (v14 >= v30)
      goto LABEL_39;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_39;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_39;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    if (v18 >= 9)
    {
      swift_bridgeObjectRetain(v18);
      String.hash(into:)(v32, v19, v18);
    }
    else
    {
      Hasher._combine(_:)(qword_10010E740[v18]);
      sub_1000582D0(v19, v18);
    }
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (uint64_t *)(v8[6] + 16 * v23);
    *v28 = v19;
    v28[1] = v18;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (!v5)
      goto LABEL_39;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_39;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_39;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

Swift::Int sub_1000C7BB4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100035CA4(&qword_10016D750);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1000C7E48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  Swift::Int v6;
  Swift::Int result;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v30;
  _OWORD v31[2];
  uint64_t v32;

  if (!a3)
  {
    swift_release(a4);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_100035CA4(&qword_10016D748);
  result = static _SetStorage.allocate(capacity:)(v5);
  v6 = result;
  v30 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
      {
LABEL_37:
        swift_release(a4);
        return v6;
      }
      v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          goto LABEL_37;
        v16 = v30[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            goto LABEL_37;
          v16 = v30[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              goto LABEL_37;
            v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  goto LABEL_37;
                v16 = v30[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    sub_100074074(*(_QWORD *)(a4 + 48) + 40 * v14, (uint64_t)v31);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v18 = -1 << *(_BYTE *)(v6 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v12 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = *(_QWORD *)(v6 + 48) + 40 * v21;
    v27 = v31[0];
    v28 = v31[1];
    *(_QWORD *)(v26 + 32) = v32;
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
    ++*(_QWORD *)(v6 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000C80CC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000C816C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v5 = *(_QWORD *)(a3 + 48);
    v6 = v5
       + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ModalPresentationCoordinator.QueueEntry(0) - 8) + 72)
       * result;
    return sub_100037010(v6, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_1000C81F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  _QWORD v33[9];
  uint64_t v34;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) == 0)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_25;
      __break(1u);
    }
    if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
    {
      v10 = __CocoaSet.Index.element.getter(v6, a2);
      v34 = v10;
      v11 = type metadata accessor for CardState();
      swift_unknownObjectRetain(v10);
      swift_dynamicCast(v33, &v34, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
      v12 = v33[0];
      swift_unknownObjectRelease(v10);
      Hasher.init(_seed:)(v33, *(_QWORD *)(a4 + 40));
      v32 = v12;
      v13 = objc_msgSend(*(id *)(v12 + 40), "serialNumber");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      String.hash(into:)(v33, v14, v16);
      swift_bridgeObjectRelease(v16);
      v17 = Hasher._finalize()();
      v18 = -1 << *(_BYTE *)(a4 + 32);
      v6 = v17 & ~v18;
      if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
LABEL_30:
        swift_release(v32);
        __break(1u);
        return;
      }
      v19 = ~v18;
      while (1)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
        v21 = *(void **)(v20 + 40);
        swift_retain(v20);
        v22 = objc_msgSend(v21, "serialNumber");
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        v26 = objc_msgSend(*(id *)(v32 + 40), "serialNumber");
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        if (v23 == v27 && v25 == v29)
          goto LABEL_23;
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v29, 0);
        swift_release(v20);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v29);
        if ((v31 & 1) != 0)
          break;
        v6 = (v6 + 1) & v19;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        {
          swift_release(v32);
          __break(1u);
LABEL_23:
          swift_release(v32);
          swift_release(v20);
          swift_bridgeObjectRelease_n(v25, 2);
          goto LABEL_25;
        }
      }
      swift_release(v32);
LABEL_25:
      swift_retain(*(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6));
      return;
    }
    goto LABEL_27;
  }
  if ((a3 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  v8 = __CocoaSet.element(at:)(a1, a2, v7);
  v34 = v8;
  v9 = type metadata accessor for CardState();
  swift_unknownObjectRetain(v8);
  swift_dynamicCast(v33, &v34, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
  swift_unknownObjectRelease(v8);
}

void sub_1000C851C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_100037118(0, &qword_10016CF88, UIOpenURLContext_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_100037118(0, &qword_10016CF88, UIOpenURLContext_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_1000C8784(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000C880C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v4 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v22 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v22 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v22 - v14;
  v16 = *(unsigned __int8 *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a2 + 8);
  sub_100037010(a1, (uint64_t)&v22 - v14);
  sub_100037010(a2, (uint64_t)v13);
  if (v16 != v17)
  {
    sub_100036DC0((uint64_t)v13);
    sub_100036DC0((uint64_t)v15);
    sub_100037010(a1, (uint64_t)v10);
    sub_100037010(a2, (uint64_t)v7);
LABEL_5:
    v20 = 0;
    goto LABEL_6;
  }
  v18 = *((_QWORD *)v15 + 2);
  v19 = *((_QWORD *)v13 + 2);
  sub_100036DC0((uint64_t)v13);
  sub_100036DC0((uint64_t)v15);
  sub_100037010(a1, (uint64_t)v10);
  sub_100037010(a2, (uint64_t)v7);
  if (v18 != v19)
    goto LABEL_5;
  v20 = static Date.== infix(_:_:)(&v10[*(int *)(v4 + 28)], &v7[*(int *)(v4 + 28)]);
LABEL_6:
  sub_100036DC0((uint64_t)v7);
  sub_100036DC0((uint64_t)v10);
  return v20 & 1;
}

uint64_t *sub_1000C8998(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000C89D8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

Swift::Int sub_1000C8A30(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a2;
  v23 = a1;
  v4 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 56);
  v25 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v9 << 6);
      goto LABEL_5;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v14)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_24;
      v19 = *(_QWORD *)(v25 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v14)
          goto LABEL_24;
        v19 = *(_QWORD *)(v25 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_5:
    sub_100037010(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v5 + 72) * v16, (uint64_t)v8);
    sub_100037118(0, &qword_10016D880, NSObject_ptr);
    v17 = static NSObject.== infix(_:_:)(*v8);
    result = sub_100036DC0((uint64_t)v8);
    if ((v17 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_1000C736C(v23, v22, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v14)
    goto LABEL_24;
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v14)
      goto LABEL_24;
    v19 = *(_QWORD *)(v25 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_1000C8C58(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  void *v8;
  char *v9;
  id v10;
  Swift::Int v11;
  void *v12;
  id v13;
  uint64_t v15;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v6, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (char *)&v15 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    v10 = v8;
    v11 = sub_1000C8A30((unint64_t *)v9, v6, a1);
    swift_release(a1);

    if (v2)
      swift_willThrow();

  }
  else
  {
    v12 = (void *)swift_slowAlloc(8 * v6, -1);
    bzero(v12, 8 * v6);
    v13 = v8;
    v11 = sub_1000C8A30((unint64_t *)v12, v6, a1);
    swift_release(a1);

    swift_slowDealloc(v12, -1, -1);
  }
  return v11;
}

uint64_t sub_1000C8E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4 + *(int *)(v1 + 28);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 40));
  if (*v8)
    swift_release(v8[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1000C8EA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModalPresentationCoordinator.QueueEntry(0) - 8)
                          + 80);
  sub_1000C6E50((id *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t sub_1000C8ED4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C8EF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

char *sub_1000C8F04(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    a1[8] = *((_BYTE *)a2 + 8);
    *((_QWORD *)a1 + 2) = a2[2];
    v8 = a3[7];
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = a3[9];
    v7[a3[8]] = *((_BYTE *)a2 + a3[8]);
    v15 = &v7[v14];
    v16 = (uint64_t)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = *(_BYTE *)(v16 + 8);
    v17 = a3[10];
    v18 = &v7[v17];
    v19 = (char **)((char *)a2 + v17);
    if (*v19)
    {
      v20 = v19[1];
      *(_QWORD *)v18 = *v19;
      *((_QWORD *)v18 + 1) = v20;
      swift_retain(v20);
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    v21 = a3[11];
    v22 = &v7[v21];
    v23 = (uint64_t)a2 + v21;
    v24 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    v22[32] = *(_BYTE *)(v23 + 32);
  }
  return v7;
}

uint64_t sub_1000C9024(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;

  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v7 = (id *)((char *)a1 + *(int *)(a2 + 40));
  if (*v7)
    return swift_release(v7[1]);
  return result;
}

uint64_t sub_1000C909C(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  v16 = a3[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  if (*v18)
  {
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_retain(v19);
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  v20 = a3[11];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(_BYTE *)(v21 + 32) = *(_BYTE *)(v22 + 32);
  return a1;
}

uint64_t sub_1000C9194(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v13 = a3[9];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v16;
  v17 = a3[10];
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  if (!v20)
  {
    if (v21)
    {
      v24 = *(_QWORD *)(v19 + 8);
      *v18 = v21;
      v18[1] = v24;
      swift_retain(v24);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_8;
  }
  if (!v21)
  {
    swift_release(v18[1]);
    goto LABEL_7;
  }
  v22 = *(_QWORD *)(v19 + 8);
  v23 = v18[1];
  *v18 = v21;
  v18[1] = v22;
  swift_retain(v22);
  swift_release(v23);
LABEL_8:
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = (__int128 *)(a2 + v25);
  v28 = *v27;
  v29 = v27[1];
  *(_BYTE *)(v26 + 32) = *((_BYTE *)v27 + 32);
  *(_OWORD *)v26 = v28;
  *(_OWORD *)(v26 + 16) = v29;
  return a1;
}

uint64_t sub_1000C92BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  if (*v15)
  {
    v17 = v15[1];
    *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v18 = a3[11];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(_BYTE *)(v19 + 32) = *(_BYTE *)(v20 + 32);
  return a1;
}

uint64_t sub_1000C93A0(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a3[10];
  v15 = (_QWORD *)(a1 + v14);
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a1 + v14);
  v18 = *(_QWORD *)(a2 + v14);
  if (!v17)
  {
    if (v18)
    {
      v21 = *(_QWORD *)(v16 + 8);
      *v15 = v18;
      v15[1] = v21;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }
  if (!v18)
  {
    swift_release(v15[1]);
    goto LABEL_7;
  }
  v19 = *(_QWORD *)(v16 + 8);
  v20 = v15[1];
  *v15 = v18;
  v15[1] = v19;
  swift_release(v20);
LABEL_8:
  v22 = a3[11];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_BYTE *)(v23 + 32) = *(_BYTE *)(v24 + 32);
  return a1;
}

uint64_t sub_1000C94B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C94C0);
}

uint64_t sub_1000C94C0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1000C953C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C9548);
}

char *sub_1000C9548(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C95BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_10010E498;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_10010E498;
    v4[5] = &unk_10010E4B0;
    v4[6] = &unk_10010E4C8;
    v4[7] = &unk_10010E4E0;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_1000C966C(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v10);
  }
  else
  {
    v7 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(char **, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100035CA4((uint64_t *)&unk_10016AE90);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = *a2;
      *(_QWORD *)a1 = *a2;
      a1[8] = *((_BYTE *)a2 + 8);
      *((_QWORD *)a1 + 2) = a2[2];
      v12 = v7[7];
      v13 = &a1[v12];
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for Date(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v17 = v11;
      v16(v13, v14, v15);
      a1[v7[8]] = *((_BYTE *)a2 + v7[8]);
      v18 = v7[9];
      v19 = &a1[v18];
      v20 = (char *)a2 + v18;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v7[10];
      v22 = &a1[v21];
      v23 = (char **)((char *)a2 + v21);
      if (*v23)
      {
        v24 = v23[1];
        *(_QWORD *)v22 = *v23;
        *((_QWORD *)v22 + 1) = v24;
        swift_retain(v24);
      }
      else
      {
        *(_OWORD *)v22 = *(_OWORD *)v23;
      }
      v25 = v7[11];
      v26 = &a1[v25];
      v27 = (char *)a2 + v25;
      v28 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v28;
      v26[32] = v27[32];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
    }
    v29 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v30 = *(uint64_t *)((char *)a2 + v29);
    *(_QWORD *)&a1[v29] = v30;
    swift_bridgeObjectRetain(v30);
  }
  return a1;
}

void sub_1000C9818(id *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {

    v12 = (char *)a1 + *(int *)(v4 + 28);
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    v14 = (id *)((char *)a1 + *(int *)(v4 + 40));
    if (*v14)
      swift_release(v14[1]);
  }
  swift_bridgeObjectRelease(*(DARootViewController **)((char *)a1 + *(int *)(a2 + 24)), v5, v6, v7, v8, v9, v10, v11);
}

void **sub_1000C98B4(void **a1, void **a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  void *v28;

  v6 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(void **, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100035CA4((uint64_t *)&unk_10016AE90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    a1[2] = a2[2];
    v10 = v6[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v9;
    v14(v11, v12, v13);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    v16 = v6[9];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = v6[10];
    v20 = (void **)((char *)a1 + v19);
    v21 = (void **)((char *)a2 + v19);
    if (*v21)
    {
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      swift_retain(v22);
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    v23 = v6[11];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v26;
    v24[32] = v25[32];
    (*(void (**)(void **, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v27 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v28 = *(void **)((char *)a2 + v27);
  *(void **)((char *)a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t sub_1000C9A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  DARootViewController *v58;
  SEL v59;
  id v60;
  int v61;
  id v62;
  id v63;
  id v64;
  id v65;

  v6 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_100036DC0(a1);
      goto LABEL_7;
    }
    v27 = *(void **)a2;
    v28 = *(void **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v29 = v27;

    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v30 = v6[7];
    v31 = a1 + v30;
    v32 = a2 + v30;
    v33 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
    *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
    v34 = v6[9];
    v35 = a1 + v34;
    v36 = a2 + v34;
    v37 = *(_BYTE *)(v36 + 8);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *(_BYTE *)(v35 + 8) = v37;
    v38 = v6[10];
    v39 = (_QWORD *)(a1 + v38);
    v40 = a2 + v38;
    v41 = *(_QWORD *)(a1 + v38);
    v42 = *(_QWORD *)(a2 + v38);
    if (v41)
    {
      if (v42)
      {
        v43 = *(_QWORD *)(v40 + 8);
        v44 = v39[1];
        *v39 = v42;
        v39[1] = v43;
        swift_retain(v43);
        swift_release(v44);
LABEL_17:
        v51 = v6[11];
        v52 = a1 + v51;
        v53 = (__int128 *)(a2 + v51);
        v54 = *v53;
        v55 = v53[1];
        *(_BYTE *)(v52 + 32) = *((_BYTE *)v53 + 32);
        *(_OWORD *)v52 = v54;
        *(_OWORD *)(v52 + 16) = v55;
        goto LABEL_18;
      }
      swift_release(v39[1]);
    }
    else if (v42)
    {
      v50 = *(_QWORD *)(v40 + 8);
      *v39 = v42;
      v39[1] = v50;
      swift_retain(v50);
      goto LABEL_17;
    }
    *(_OWORD *)v39 = *(_OWORD *)v40;
    goto LABEL_17;
  }
  if (v10)
  {
LABEL_7:
    v26 = sub_100035CA4((uint64_t *)&unk_10016AE90);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_18;
  }
  v11 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = v6[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v17 = v11;
  v16(v13, v14, v15);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  v18 = v6[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v21;
  v22 = v6[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  if (*v24)
  {
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_retain(v25);
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  v45 = v6[11];
  v46 = a1 + v45;
  v47 = (__int128 *)(a2 + v45);
  v48 = *v47;
  v49 = v47[1];
  *(_BYTE *)(v46 + 32) = *((_BYTE *)v47 + 32);
  *(_OWORD *)v46 = v48;
  *(_OWORD *)(v46 + 16) = v49;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_18:
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v56 = *(int *)(a3 + 24);
  v57 = *(_QWORD *)(a2 + v56);
  v58 = *(DARootViewController **)(a1 + v56);
  *(_QWORD *)(a1 + v56) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58, v59, v60, v61, v62, v63, v64, v65);
  return a1;
}

_QWORD *sub_1000C9CDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  v6 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100035CA4((uint64_t *)&unk_10016AE90);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    a1[2] = a2[2];
    v9 = v6[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    v13 = v6[9];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    v16 = v6[10];
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = *v18;
    if (*v18)
    {
      v20 = v18[1];
      *v17 = v19;
      v17[1] = v20;
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    v21 = v6[11];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    v22[32] = v23[32];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v25 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  return a1;
}

uint64_t sub_1000C9E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  DARootViewController *v56;

  v6 = (int *)type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_100036DC0(a1);
      goto LABEL_7;
    }
    v31 = *(void **)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;

    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v32 = v6[7];
    v33 = a1 + v32;
    v34 = a2 + v32;
    v35 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
    *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
    v36 = v6[9];
    v37 = a1 + v36;
    v38 = a2 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
    v39 = v6[10];
    v40 = (_QWORD *)(a1 + v39);
    v41 = a2 + v39;
    v42 = *(_QWORD *)(a1 + v39);
    v43 = *(_QWORD *)(a2 + v39);
    if (v42)
    {
      if (v43)
      {
        v44 = *(_QWORD *)(v41 + 8);
        v45 = v40[1];
        *v40 = v43;
        v40[1] = v44;
        swift_release(v45);
LABEL_17:
        v51 = v6[11];
        v52 = a1 + v51;
        v53 = a2 + v51;
        v54 = *(_OWORD *)(v53 + 16);
        *(_OWORD *)v52 = *(_OWORD *)v53;
        *(_OWORD *)(v52 + 16) = v54;
        *(_BYTE *)(v52 + 32) = *(_BYTE *)(v53 + 32);
        goto LABEL_18;
      }
      swift_release(v40[1]);
    }
    else if (v43)
    {
      v50 = *(_QWORD *)(v41 + 8);
      *v40 = v43;
      v40[1] = v50;
      goto LABEL_17;
    }
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_17;
  }
  if (v10)
  {
LABEL_7:
    v23 = sub_100035CA4((uint64_t *)&unk_10016AE90);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_18;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v11 = v6[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  v15 = v6[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = v6[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  if (*v20)
  {
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  v46 = v6[11];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v49;
  *(_BYTE *)(v47 + 32) = *(_BYTE *)(v48 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_18:
  v55 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v56 = *(DARootViewController **)(a1 + v55);
  *(_QWORD *)(a1 + v55) = *(_QWORD *)(a2 + v55);
  swift_bridgeObjectRelease(v56, v24, v25, v26, v27, v28, v29, v30);
  return a1;
}

uint64_t sub_1000CA0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CA0C8);
}

uint64_t sub_1000CA0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000CA148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CA154);
}

uint64_t sub_1000CA154(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_1000CA1D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000CA250(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_10010E498;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000CA250(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10016DCD8)
  {
    v2 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10016DCD8);
  }
}

uint64_t sub_1000CA2A4()
{
  return sub_10002F158(&qword_10016DD10, type metadata accessor for ModalPresentationCoordinator.QueueEntry, (uint64_t)&unk_10010E530);
}

ValueMetadata *type metadata accessor for ModalPresentationCoordinator.Priority()
{
  return &type metadata for ModalPresentationCoordinator.Priority;
}

uint64_t storeEnumTagSinglePayload for ModalPresentationCoordinator.ControllerType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CA32C + 4 * byte_10010E485[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CA360 + 4 * byte_10010E480[v4]))();
}

uint64_t sub_1000CA360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CA370);
  return result;
}

uint64_t sub_1000CA37C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CA384);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CA388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CA390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModalPresentationCoordinator.ControllerType()
{
  return &type metadata for ModalPresentationCoordinator.ControllerType;
}

unint64_t sub_1000CA3B0()
{
  unint64_t result;

  result = qword_10016DD18;
  if (!qword_10016DD18)
  {
    result = swift_getWitnessTable(&unk_10010E670, &type metadata for ModalPresentationCoordinator.ControllerType);
    atomic_store(result, (unint64_t *)&qword_10016DD18);
  }
  return result;
}

unint64_t sub_1000CA3F8()
{
  unint64_t result;

  result = qword_10016DD20;
  if (!qword_10016DD20)
  {
    result = swift_getWitnessTable(&unk_10010E710, &type metadata for ModalPresentationCoordinator.Priority);
    atomic_store(result, (unint64_t *)&qword_10016DD20);
  }
  return result;
}

void destroy for SelfServiceInstructionsView(uint64_t a1)
{
  SEL v2;
  id v3;
  int v4;
  id v5;
  id v6;
  id v7;
  id v8;
  SEL v9;
  id v10;
  int v11;
  id v12;
  id v13;
  id v14;
  id v15;

  sub_10009D4D4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(DARootViewController **)(a1 + 64), v2, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRelease(*(DARootViewController **)(a1 + 72), v9, v10, v11, v12, v13, v14, v15);
}

uint64_t initializeWithCopy for SelfServiceInstructionsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_10009D424(v4, v5, v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  v10 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v9;
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for SelfServiceInstructionsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  DARootViewController *v14;
  SEL v15;
  id v16;
  int v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  DARootViewController *v23;
  SEL v24;
  id v25;
  int v26;
  id v27;
  id v28;
  id v29;
  id v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  sub_10009D424(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_10009D4D4(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_retain(v12);
  swift_release(v11);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(DARootViewController **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  v23 = *(DARootViewController **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for SelfServiceInstructionsView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SelfServiceInstructionsView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  DARootViewController *v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  DARootViewController *v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v4;
  sub_10009D4D4(v5, v6, v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_release(*(_QWORD *)(a1 + 56));
  v9 = *(DARootViewController **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9, v10, v11, v12, v13, v14, v15, v16);
  v17 = *(DARootViewController **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelfServiceInstructionsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfServiceInstructionsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfServiceInstructionsView()
{
  return &type metadata for SelfServiceInstructionsView;
}

uint64_t sub_1000CA750(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011FDB8, 1);
}

double sub_1000CA764@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  SEL v32;
  id v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  SEL v42;
  id v43;
  int v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v52 = a2;
  v15 = sub_100035CA4(&qword_10016DB90);
  __chkstk_darwin(v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = 0;
  State.init(wrappedValue:)(&v54, &v53, &type metadata for Int);
  v19 = v54;
  v18 = v55;
  v51 = a7;
  LOBYTE(v53) = (a7 & 1) == 0 && a6 <= 0x18 && ((1 << a6) & 0x1010100) != 0;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  State.init(wrappedValue:)(&v54, &v53, &type metadata for Bool);
  v50 = v55;
  v56 = v54;
  if ((a5 & 1) != 0)
  {
    v21 = a6;
LABEL_12:
    v22 = v18;
    goto LABEL_13;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v41 = a1;
    else
      v41 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease((DARootViewController *)a1, v42, v43, v44, v45, v46, v47, v48);
  }
  else
  {
    v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = a6;
  if (v20 <= a4)
    goto LABEL_12;
  v53 = a4;
  State.init(wrappedValue:)(&v54, &v53, &type metadata for Int);
  swift_release(v18);
  v19 = v54;
  v22 = v55;
LABEL_13:
  sub_100037118(0, &qword_10016DB98, NSTimer_ptr);
  v23 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v24 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v17, 1, 1, v24);
  v25 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v23, NSRunLoopCommonModes, v17, 8.0);

  sub_100036FA0((uint64_t)v17, &qword_10016DB90);
  v54 = v25;
  v26 = type metadata accessor for NSTimer.TimerPublisher(0);
  v27 = sub_10002F158(&qword_10016DBA0, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
  v28 = ConnectablePublisher.autoconnect()(v26, v27);
  swift_release(v25);
  v53 = v28;
  v29 = sub_100035CA4(&qword_10016DB00);
  State.init(wrappedValue:)(&v54, &v53, v29);
  v30 = v54;
  v31 = v55;
  LOBYTE(v26) = v56;
  swift_bridgeObjectRelease((DARootViewController *)a1, v32, v33, v34, v35, v36, v37, v38);
  swift_release(a3);
  result = 8.0;
  *(_OWORD *)a8 = xmmword_10010E790;
  *(_QWORD *)(a8 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a8 + 24) = v30;
  *(_QWORD *)(a8 + 32) = v31;
  *(_QWORD *)(a8 + 40) = v19;
  *(_QWORD *)(a8 + 48) = v22;
  *(_BYTE *)(a8 + 56) = v26;
  v40 = v52;
  *(_QWORD *)(a8 + 64) = v50;
  *(_QWORD *)(a8 + 72) = v40;
  *(_QWORD *)(a8 + 80) = a3;
  *(_QWORD *)(a8 + 88) = a1;
  *(_QWORD *)(a8 + 96) = v21;
  *(_BYTE *)(a8 + 104) = v51 & 1;
  return result;
}

uint64_t sub_1000CAA60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t OpaqueTypeConformance2;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v2 = v1;
  v63 = a1;
  v3 = type metadata accessor for ScrollBounceBehavior(0);
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for ScrollIndicatorVisibility(0);
  v52 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100035CA4(&qword_10016DD28);
  v51 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100035CA4(&qword_10016DD30);
  v54 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100035CA4(&qword_10016DD38);
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  __chkstk_darwin(v14);
  v60 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100035CA4(&qword_10016DD40);
  v58 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  v17 = __chkstk_darwin(v16);
  v57 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v2;
  v19 = static Axis.Set.vertical.getter(v17);
  v20 = sub_100035CA4(&qword_10016DD48);
  v21 = sub_1000489C4(&qword_10016DD50, &qword_10016DD48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v22 = ScrollView.init(_:showsIndicators:content:)(v19, 1, sub_1000CC2A8, v64, v20, v21);
  v23 = static ScrollIndicatorVisibility.hidden.getter(v22);
  v24 = static Axis.Set.vertical.getter(v23);
  v25 = static Axis.Set.horizontal.getter();
  v26 = Axis.Set.init(rawValue:)(0);
  v27 = Axis.Set.init(rawValue:)(v26);
  if (Axis.Set.init(rawValue:)(v27 & v24) != v24)
    v26 = Axis.Set.init(rawValue:)(v26 | v24);
  v28 = Axis.Set.init(rawValue:)(v26);
  if (Axis.Set.init(rawValue:)(v28 & v25) != v25)
    v26 = Axis.Set.init(rawValue:)(v26 | v25);
  v29 = sub_1000489C4(&qword_10016DD58, &qword_10016DD28, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollIndicators(_:axes:)(v7, v26, v8, v29);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v53);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v10, v8);
  v31 = static ScrollBounceBehavior.basedOnSize.getter(v30);
  v32 = static Axis.Set.vertical.getter(v31);
  v33 = Axis.Set.init(rawValue:)(0);
  v34 = Axis.Set.init(rawValue:)(v33);
  if (Axis.Set.init(rawValue:)(v34 & v32) != v32)
    v33 = Axis.Set.init(rawValue:)(v33 | v32);
  v68 = v8;
  v69 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
  v36 = v60;
  View.scrollBounceBehavior(_:axes:)(v5, v33, v11, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v5, v56);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v11);
  v66 = *(_OWORD *)(v2 + 40);
  v67 = *(_QWORD *)(v2 + 56);
  sub_100035CA4(&qword_10016DD60);
  State.projectedValue.getter(&v68);
  v37 = swift_allocObject(&unk_10013B7C0, 104, 7);
  v38 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v37 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v37 + 64) = v38;
  *(_OWORD *)(v37 + 80) = *(_OWORD *)(v2 + 64);
  *(_QWORD *)(v37 + 96) = *(_QWORD *)(v2 + 80);
  v39 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v37 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v37 + 32) = v39;
  sub_1000CC2C0(v2);
  v40 = sub_100035CA4(&qword_10016DD68);
  *(_QWORD *)&v66 = v11;
  *((_QWORD *)&v66 + 1) = OpaqueTypeConformance2;
  v41 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
  v42 = sub_1000CC318();
  v43 = sub_1000CC35C();
  v49 = v42;
  v48 = v41;
  v44 = v57;
  v45 = v62;
  View.fullScreenCover<A, B>(item:onDismiss:content:)(&v68, 0, 0, sub_1000CC2B8, v37, v62, &type metadata for Int, v40, v48, v49, v43);
  swift_release(v37);
  swift_release(v68);
  v46 = swift_release(v69);
  (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v36, v45, v46);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v63, v44, v59);
}

_QWORD *sub_1000CAF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[192];
  _QWORD v77[24];
  char v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  void (*v96)();
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[192];
  _QWORD v101[7];
  unsigned __int8 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  __int128 v112;

  v75 = a2;
  v3 = sub_100035CA4(&qword_10016DD98);
  v72 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100035CA4(&qword_10016DDA0);
  v6 = __chkstk_darwin(v71);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v74 = (uint64_t)&v62 - v9;
  v10 = *(_QWORD *)(a1 + 64);
  if (!((unint64_t)v10 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_10:
    sub_1000CC9D8(&v79);
    goto LABEL_11;
  }
  if (v10 < 0)
    v29 = *(_QWORD *)(a1 + 64);
  else
    v29 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 64));
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease((DARootViewController *)v10, v31, v32, v33, v34, v35, v36, v37);
  if (!v30)
    goto LABEL_10;
LABEL_3:
  v11 = swift_allocObject(&unk_10013B7E8, 104, 7);
  v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v11 + 64) = v12;
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v11 + 96) = *(_QWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v13;
  swift_bridgeObjectRetain(v10);
  sub_1000CC2C0(a1);
  sub_1000CA764(v10, (uint64_t)sub_1000CC81C, v11, 0, 1, 0, 1, (uint64_t)v101);
  v14 = v101[0];
  v15 = v101[1];
  v16 = v101[2];
  v17 = v101[4];
  v68 = v101[5];
  v69 = v101[3];
  v67 = v101[6];
  v66 = v102;
  v70 = v104;
  v64 = v105;
  v65 = v103;
  v63 = v106;
  v18 = v107;
  v20 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v21 = *(_BYTE *)(a1 + 32);
  sub_10009D424(v20, v19, v21);
  v22 = sub_1000CC644(v20, v19, v21);
  sub_10009D4D4(v20, v19, v21);
  v23 = v22;
  sub_10009D424(v20, v19, v21);
  v24 = sub_1000CC644(v20, v19, v21);
  v25 = sub_10009D4D4(v20, v19, v21);
  if (qword_10016A6D0 != -1)
    v25 = swift_once(&qword_10016A6D0, sub_1000C0D54);
  v26 = v24 * *(double *)&qword_1001723C8 + 30.0;
  v27 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(&v108, *(_QWORD *)&v23, 0, *(_QWORD *)&v26, 0, v27, v28);
  LOBYTE(v77[0]) = v18;
  v76[0] = v109;
  v78 = v111;
  *(_QWORD *)&v79 = v14;
  *((_QWORD *)&v79 + 1) = v15;
  v80 = v16;
  v81 = v69;
  v82 = v17;
  v83 = v68;
  v84 = v67;
  v85 = v66;
  v87 = v70;
  v86 = v65;
  v88 = v64;
  v89 = v63;
  v90 = v18;
  v91 = v108;
  v92 = v109;
  v93 = v110;
  v94 = v111;
  v95 = v112;
  v96 = sub_1000CB888;
  v97 = 0;
  v99 = 0;
  v98 = 0;
  Int.id.getter(&v79);
LABEL_11:
  sub_1000C496C((uint64_t)&v79, (uint64_t)v100, &qword_10016DDA8);
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16);
  *(_QWORD *)&v79 = 0;
  *((_QWORD *)&v79 + 1) = v38;
  KeyPath = swift_getKeyPath(&unk_10010E850);
  v40 = swift_allocObject(&unk_10013B810, 104, 7);
  v41 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v40 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v40 + 64) = v41;
  *(_OWORD *)(v40 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v40 + 96) = *(_QWORD *)(a1 + 80);
  v42 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v40 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v40 + 32) = v42;
  sub_1000CC2C0(a1);
  v43 = sub_100035CA4(&qword_10016C450);
  v44 = sub_100035CA4(&qword_10016DDB0);
  v45 = sub_1000765C4();
  v46 = sub_1000CCC78(&qword_10016DDB8, &qword_10016DDB0, (void (*)(void))sub_100048980);
  v47 = ForEach<>.init(_:id:content:)(&v79, KeyPath, sub_1000CC82C, v40, v43, v44, v45, &protocol witness table for Int, v46);
  LOBYTE(v40) = static Edge.Set.horizontal.getter(v47);
  v48 = EdgeInsets.init(_all:)(*(double *)(a1 + 8));
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v56 = v72;
  v55 = v73;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v8, v5, v73);
  v57 = &v8[*(int *)(v71 + 36)];
  *v57 = v40;
  *((double *)v57 + 1) = v48;
  *((_QWORD *)v57 + 2) = v50;
  *((_QWORD *)v57 + 3) = v52;
  *((_QWORD *)v57 + 4) = v54;
  v57[40] = 0;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v5, v55);
  v58 = v74;
  sub_1000C496C((uint64_t)v8, v74, &qword_10016DDA0);
  sub_1000C496C((uint64_t)v100, (uint64_t)v76, &qword_10016DDA8);
  sub_10006E3E0(v58, (uint64_t)v8, &qword_10016DDA0);
  sub_1000C496C((uint64_t)v76, (uint64_t)v77, &qword_10016DDA8);
  v59 = v75;
  sub_1000C496C((uint64_t)v77, v75, &qword_10016DDA8);
  v60 = sub_100035CA4(&qword_10016DDC0);
  sub_10006E3E0((uint64_t)v8, v59 + *(int *)(v60 + 48), &qword_10016DDA0);
  sub_1000CC8D0(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000CC834);
  sub_100036FA0(v58, &qword_10016DDA0);
  sub_100036FA0((uint64_t)v8, &qword_10016DDA0);
  sub_1000C496C((uint64_t)v76, (uint64_t)&v79, &qword_10016DDA8);
  return sub_1000CC8D0(&v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000CC93C);
}

uint64_t sub_1000CB4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;

  v6 = sub_100035CA4(&qword_10016DDD0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = swift_allocObject(&unk_10013B838, 112, 7);
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = a1;
  v20 = a2;
  sub_1000CC2C0(a2);
  v14 = sub_100035CA4(&qword_10016DDD8);
  v15 = sub_1000CCAAC();
  v16 = Button.init(action:label:)(sub_1000CCA4C, v10, sub_1000CCAA4, v19, v14, v15);
  LOBYTE(v14) = static Edge.Set.all.getter(v16);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 16))(a3, v9, v6);
  v17 = a3 + *(int *)(sub_100035CA4(&qword_10016DE28) + 36);
  *(_BYTE *)v17 = v14;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_BYTE *)(v17 + 40) = 1;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000CB654@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  unsigned __int8 v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[7];
  char v41;
  _BYTE v42[7];
  char v43;
  _BYTE v44[7];
  char v45;
  _BYTE v46[11];
  __int16 v47;
  char v48;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Image.init(systemName:)(0xD000000000000022, 0x8000000100118A60);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  v9 = Image.resizable(capInsets:resizingMode:)(v7, v8, 0.0, 0.0, 0.0, 0.0);
  swift_release(v8);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  LOBYTE(v4) = static Edge.Set.all.getter(v10);
  v11 = EdgeInsets.init(_all:)(8.0);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = static Color.white.getter();
  KeyPath = swift_getKeyPath(&unk_10010E868);
  v20 = *a1;
  v21 = static Alignment.center.getter();
  v23 = _FrameLayout.init(width:height:alignment:)(&v34, v20, 0, v20, 0, v21, v22);
  v24 = v34;
  v25 = v36;
  v26 = v38;
  v27 = v39;
  v48 = 1;
  v45 = 0;
  v43 = v35;
  v41 = v37;
  v28 = static Color.black.getter(v23);
  result = static Edge.Set.all.getter(v28);
  v30 = v48;
  *(_DWORD *)(a2 + 18) = *(_DWORD *)&v46[7];
  *(_WORD *)(a2 + 22) = v47;
  *(_DWORD *)(a2 + 25) = *(_DWORD *)v46;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)&v46[3];
  v31 = v45;
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v44;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v44[3];
  v32 = v43;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v42[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v42;
  v33 = v41;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v40[3];
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v40;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = v30;
  *(_BYTE *)(a2 + 24) = v4;
  *(double *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v17;
  *(_BYTE *)(a2 + 64) = v31;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_QWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = v24;
  *(_BYTE *)(a2 + 96) = v32;
  *(_QWORD *)(a2 + 104) = v25;
  *(_BYTE *)(a2 + 112) = v33;
  *(_QWORD *)(a2 + 120) = v26;
  *(_QWORD *)(a2 + 128) = v27;
  *(_QWORD *)(a2 + 136) = v28;
  *(_BYTE *)(a2 + 144) = result;
  return result;
}

void sub_1000CB888()
{
  uint64_t v0;
  void *ObjCClassFromMetadata;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v0 = sub_100037118(0, &qword_10016D0B0, UIPageControl_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend(ObjCClassFromMetadata, "appearance");
  v3 = (void *)objc_opt_self(UIColor);
  v4 = objc_msgSend(v3, "labelColor");
  objc_msgSend(v2, "setCurrentPageIndicatorTintColor:", v4);

  v5 = objc_msgSend(ObjCClassFromMetadata, "appearance");
  v6 = objc_msgSend(v3, "secondaryLabelColor");
  objc_msgSend(v5, "setPageIndicatorTintColor:", v6);

}

unint64_t *sub_1000CB984@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  DARootViewController *v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 72);
    if (v4 < *(_QWORD *)(v5 + 16))
    {
      v6 = v4 + 1;
      v7 = *(DARootViewController **)(v5 + 16 * v4 + 40);
      swift_bridgeObjectRetain(v7);
      sub_1000CBA3C(v7, v6, &v17);
      swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
      v16 = v17;
      v15 = v18;
      result = (unint64_t *)static Edge.Set.bottom.getter();
      *(_OWORD *)a3 = v16;
      *(_QWORD *)(a3 + 16) = v15;
      *(_BYTE *)(a3 + 24) = (_BYTE)result;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_BYTE *)(a3 + 64) = 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_1000CBA3C(DARootViewController *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  NSString v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  DARootViewController *v23;
  Swift::String v24;
  NSString v25;
  SEL v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t inited;
  void *v36;
  NSString *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  DARootViewController *v46;
  Class isa;
  SEL v48;
  id v49;
  int v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  NSString v57;
  id v58;
  double v59;
  double v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  DARootViewController *v71;
  id v72;
  Class v73;
  SEL v74;
  id v75;
  int v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  DARootViewController *v83;
  Class v84;
  SEL v85;
  id v86;
  int v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  NSString *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  DARootViewController *v102;
  Class v103;
  SEL v104;
  id v105;
  int v106;
  id v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  double v115;
  char *v116;
  uint64_t v117;
  void *v118;
  _BYTE v119[72];
  _BYTE v120[72];
  uint64_t v121;
  uint64_t v122;
  DARootViewController *v123;

  v4 = v3;
  v8 = objc_allocWithZone((Class)NSMutableAttributedString);
  swift_bridgeObjectRetain(a1);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1, v10, v11, v12, v13, v14, v15, v16);
  v17 = objc_msgSend(v8, "initWithString:", v9);

  v18 = objc_allocWithZone((Class)UILabel);
  v19 = v17;
  v20 = objc_msgSend(v18, "init");
  v21 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
  objc_msgSend(v20, "setFont:", v21);

  objc_msgSend(v20, "setNumberOfLines:", 0);
  objc_msgSend(v20, "setAdjustsFontForContentSizeCategory:", 1);
  v22 = *(_QWORD *)(v4 + 80);
  if (v22 != 1)
    goto LABEL_4;
  v121 = a2;
  v122 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v123 = v23;
  v24._countAndFlagsBits = 0x2E656C637269632ELL;
  v24._object = (void *)0xEC0000006C6C6966;
  String.append(_:)(v24);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v123, v26, v27, v28, v29, v30, v31, v32);
  v33 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v25);

  if (v33)
  {
    v118 = v33;
    v34 = objc_msgSend((id)objc_opt_self(NSTextAttachment), "textAttachmentWithImage:", v33);
    v117 = sub_100035CA4(&qword_10016BBA8);
    inited = swift_initStackObject(v117, v120);
    *(_OWORD *)(inited + 16) = xmmword_10010BE30;
    *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
    v36 = (void *)objc_opt_self(UIColor);
    v37 = NSForegroundColorAttributeName;
    v38 = objc_msgSend(v36, "systemBlueColor");
    *(_QWORD *)(inited + 64) = sub_100037118(0, (unint64_t *)&unk_10016E460, UIColor_ptr);
    *(_QWORD *)(inited + 40) = v38;
    v46 = (DARootViewController *)sub_10006DF30(inited, v39, v40, v41, v42, v43, v44, v45);
    type metadata accessor for Key(0);
    sub_10002F158((unint64_t *)&qword_10016AA18, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10010BBD4);
    v116 = (char *)&type metadata for Any + 8;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v46, v48, v49, v50, v51, v52, v53, v54);
    v55 = objc_msgSend((id)objc_opt_self(NSMutableAttributedString), "attributedStringWithAttachment:attributes:", v34, isa);

    v56 = objc_allocWithZone((Class)NSAttributedString);
    v57 = String._bridgeToObjectiveC()();
    v58 = objc_msgSend(v56, "initWithString:", v57);

    objc_msgSend(v55, "appendAttributedString:", v58);
    objc_msgSend(v55, "size");
    v60 = v59;
    v61 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
    v62 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
    v63 = swift_allocObject(v62, 40, 7);
    *(_OWORD *)(v63 + 16) = xmmword_10010C200;
    v71 = (DARootViewController *)sub_10006DF4C((uint64_t)&_swiftEmptyArrayStorage, v64, v65, v66, v67, v68, v69, v70);
    v72 = objc_allocWithZone((Class)NSTextTab);
    type metadata accessor for OptionKey(0);
    sub_10002F158(&qword_10016AA50, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_10010BD4C);
    v73 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v71, v74, v75, v76, v77, v78, v79, v80);
    v81 = objc_msgSend(v72, "initWithTextAlignment:location:options:", 0, v73, v60);

    *(_QWORD *)(v63 + 32) = v81;
    v122 = v63;
    specialized Array._endMutation()(v82);
    v83 = (DARootViewController *)v122;
    sub_100037118(0, &qword_10016DDC8, NSTextTab_ptr);
    v84 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v83, v85, v86, v87, v88, v89, v90, v91);
    objc_msgSend(v61, "setTabStops:", v84);

    objc_msgSend(v61, "setHeadIndent:", v60);
    objc_msgSend(v55, "appendAttributedString:", v19);

    v92 = swift_initStackObject(v117, v119);
    *(_OWORD *)(v92 + 16) = xmmword_10010BE30;
    *(_QWORD *)(v92 + 32) = NSParagraphStyleAttributeName;
    *(_QWORD *)(v92 + 64) = sub_100037118(0, &qword_10016D930, NSMutableParagraphStyle_ptr);
    *(_QWORD *)(v92 + 40) = v61;
    v19 = v55;
    v93 = NSParagraphStyleAttributeName;
    v94 = v61;
    v102 = (DARootViewController *)sub_10006DF30(v92, v95, v96, v97, v98, v99, v100, v101);
    v103 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v102, v104, v105, v106, v107, v108, v109, v110);
    objc_msgSend(v19, "addAttributes:range:", v103, 0, objc_msgSend(v19, "length"));

    v22 = 1;
  }
  else
  {
LABEL_4:

  }
  if (v22)
    v111 = 4;
  else
    v111 = 1;
  objc_msgSend(v20, "setTextAlignment:", v111, v116);
  objc_msgSend(v20, "setAttributedText:", v19);
  v112 = *(_QWORD *)(v4 + 16);
  v113 = *(_QWORD *)(v4 + 24);
  v114 = *(_BYTE *)(v4 + 32);
  sub_10009D424(v112, v113, v114);
  v115 = sub_1000CC644(v112, v113, v114);
  sub_10009D4D4(v112, v113, v114);
  objc_msgSend(v20, "setPreferredMaxLayoutWidth:", v115 - (*(double *)(v4 + 8) + *(double *)(v4 + 8)));

  a3[1] = 0;
  a3[2] = 0;
  *a3 = v20;
}

uint64_t sub_1000CC0A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;

  v6 = type metadata accessor for SelfServiceInstructionsFullScreenViewerView(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100035CA4(&qword_10016DD68);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = (void *)objc_opt_self(DAPlatform);
  swift_bridgeObjectRetain(v13);
  v15 = objc_msgSend(v14, "currentPlatform");
  v16 = objc_msgSend(v15, "isCheckerBoardActive");
  swift_unknownObjectRelease(v15);
  if (v16)
    v17 = 16;
  else
    v17 = 0;
  sub_10009C1B8(v13, v12, v17, v16 ^ 1, v8);
  KeyPath = swift_getKeyPath(&unk_10010E820);
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_BYTE *)(a2 + 32);
  sub_10009D424(v19, v20, v21);
  v22 = sub_1000CC644(v19, v20, v21);
  v24 = v23;
  sub_10009D4D4(v19, v20, v21);
  sub_10009DC4C((uint64_t)v8, (uint64_t)v11);
  v25 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v25 = KeyPath;
  *((double *)v25 + 1) = v22;
  v25[2] = v24;
  sub_10009BDE4((uint64_t)v8);
  return sub_1000C496C((uint64_t)v11, a3, &qword_10016DD68);
}

uint64_t sub_1000CC260@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CAA60(a1);
}

_QWORD *sub_1000CC2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CAF44(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000CC2B0()
{
  return sub_1000CCA00(104);
}

uint64_t sub_1000CC2B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000CC0A4(a1, v2 + 16, a2);
}

uint64_t sub_1000CC2C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  sub_10009D424(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

unint64_t sub_1000CC318()
{
  unint64_t result;

  result = qword_10016DD70;
  if (!qword_10016DD70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10016DD70);
  }
  return result;
}

unint64_t sub_1000CC35C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DD78;
  if (!qword_10016DD78)
  {
    v1 = sub_100035D30(&qword_10016DD68);
    sub_10002F158(&qword_10016DD80, type metadata accessor for SelfServiceInstructionsFullScreenViewerView, (uint64_t)&unk_10010DDD8);
    sub_1000489C4(&qword_10016DD88, &qword_10016DD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DD78);
  }
  return result;
}

uint64_t sub_1000CC400@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100035CA4(&qword_10016CFE0);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006E3E0(v2, (uint64_t)v10, &qword_10016CFE0);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = *v10;
    v14 = static os_log_type_t.fault.getter();
    v15 = static Log.runtimeIssuesLog.getter();
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v21[1] = a1;
      v19 = v18;
      v23 = v18;
      *(_DWORD *)v17 = 136315138;
      v22 = sub_10004711C(0x417373696D736944, 0xED00006E6F697463, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, v13);
    v20 = swift_release(v13);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v20);
  }
}

double sub_1000CC644(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  double v21;

  v6 = type metadata accessor for EnvironmentValues(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
    return *(double *)&a1;
  v10 = swift_retain(a1);
  v11 = static os_log_type_t.fault.getter(v10);
  v12 = static Log.runtimeIssuesLog.getter();
  v13 = v11;
  if (os_log_type_enabled(v12, v11))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v19 = a2;
    v16 = v15;
    v21 = *(double *)&v15;
    *(_DWORD *)v14 = 136315138;
    v20 = sub_10004711C(0x657A69534743, 0xE600000000000000, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v17 = v16;
    a2 = v19;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v9, a1);
  sub_10009D4D4(a1, a2, 0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v21;
}

uint64_t sub_1000CC814()
{
  return sub_1000CCA00(104);
}

uint64_t sub_1000CC81C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000CB4FC(a1, v2 + 16, a2);
}

uint64_t sub_1000CC824()
{
  return sub_1000CCA00(104);
}

unint64_t *sub_1000CC82C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000CB984(a1, v2 + 16, a2);
}

uint64_t sub_1000CC834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t result;

  if (a4)
  {
    swift_retain(a9);
    swift_retain(a11);
    swift_bridgeObjectRetain(a12);
    swift_retain(a4);
    swift_retain(a5);
    swift_retain(a7);
    sub_100035C4C(a21, a22);
    return sub_100035C4C(a23, a24);
  }
  return result;
}

_QWORD *sub_1000CC8D0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t sub_1000CC93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, DARootViewController *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  SEL v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t result;

  if (a4)
  {
    swift_release(a4);
    swift_release(a11);
    swift_bridgeObjectRelease(a12, v26, v27, v28, v29, v30, v31, v32);
    swift_release(a5);
    swift_release(a7);
    swift_release(a9);
    sub_100035D74(a21, a22);
    return sub_100035D74(a23, a24);
  }
  return result;
}

double sub_1000CC9D8(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1000CC9F8()
{
  return sub_1000CCA00(112);
}

uint64_t sub_1000CCA00(uint64_t a1)
{
  uint64_t v1;
  SEL v3;
  id v4;
  int v5;
  id v6;
  id v7;
  id v8;
  id v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;

  sub_10009D4D4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
  swift_release(*(_QWORD *)(v1 + 72));
  swift_bridgeObjectRelease(*(DARootViewController **)(v1 + 80), v3, v4, v5, v6, v7, v8, v9);
  swift_bridgeObjectRelease(*(DARootViewController **)(v1 + 88), v10, v11, v12, v13, v14, v15, v16);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000CCA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104);
  v6 = *(_OWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 72);
  v4 = v1;
  v5 = 0;
  v2 = sub_100035CA4(&qword_10016DD60);
  return State.wrappedValue.setter(&v4, v2);
}

uint64_t sub_1000CCAA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CB654(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_1000CCAAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DDE0;
  if (!qword_10016DDE0)
  {
    v1 = sub_100035D30(&qword_10016DDD8);
    sub_1000CCB30();
    sub_1000489C4(&qword_10016D120, &qword_10016D128, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DDE0);
  }
  return result;
}

unint64_t sub_1000CCB30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DDE8;
  if (!qword_10016DDE8)
  {
    v1 = sub_100035D30(&qword_10016DDF0);
    sub_1000CCC78(&qword_10016DDF8, &qword_10016DE00, (void (*)(void))sub_1000CCBD4);
    sub_1000489C4(&qword_10016CA90, &qword_10016CA98, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DDE8);
  }
  return result;
}

unint64_t sub_1000CCBD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DE08;
  if (!qword_10016DE08)
  {
    v1 = sub_100035D30(&qword_10016DE10);
    sub_1000CCC78(&qword_10016DE18, &qword_10016DE20, (void (*)(void))sub_100084630);
    sub_1000489C4(&qword_10016C3F8, &qword_10016C400, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DE08);
  }
  return result;
}

uint64_t sub_1000CCC78(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100035D30(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CCCE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CCD08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CCD30(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000CCD58(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000CCD80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v0 = sub_100035D30(&qword_10016DD38);
  v1 = sub_100035D30(&qword_10016DD68);
  v2 = sub_100035D30(&qword_10016DD30);
  v8 = sub_100035D30(&qword_10016DD28);
  v9 = (void *)sub_1000489C4(&qword_10016DD58, &qword_10016DD28, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
  v8 = v2;
  v9 = (void *)OpaqueTypeConformance2;
  v4 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
  v5 = sub_1000CC318();
  v6 = sub_1000CC35C();
  v8 = v0;
  v9 = &type metadata for Int;
  v10 = v1;
  v11 = v4;
  v12 = v5;
  v13 = v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.fullScreenCover<A, B>(item:onDismiss:content:)>>, 1);
}

uint64_t destroy for SelfServiceSuiteResultsHeaderView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *_s11Diagnostics33SelfServiceSuiteResultsHeaderViewVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for SelfServiceSuiteResultsHeaderView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for SelfServiceSuiteResultsHeaderView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelfServiceSuiteResultsHeaderView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfServiceSuiteResultsHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfServiceSuiteResultsHeaderView()
{
  return &type metadata for SelfServiceSuiteResultsHeaderView;
}

uint64_t sub_1000CD01C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10011FDFC, 1);
}

void sub_1000CD02C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  DARootViewController *v11;
  DARootViewController *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  DARootViewController *v18;
  DARootViewController *v19;
  char v20;
  uint64_t v21;
  SEL v22;
  id v23;
  int v24;
  id v25;
  id v26;
  id v27;
  id v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  DARootViewController *v33;
  DARootViewController *v34;
  char v35;
  SEL v36;
  id v37;
  int v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t KeyPath;
  SEL v44;
  id v45;
  int v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _QWORD v51[2];

  v51[0] = a1;
  v51[1] = a2;
  v7 = sub_10003F14C();
  swift_bridgeObjectRetain(a2);
  v8 = Text.init<A>(_:)(v51, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = Text.font(_:)(a3, v8, v9, v14, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  sub_100076B54(v8, v10, v14);
  swift_bridgeObjectRelease(v12, v22, v23, v24, v25, v26, v27, v28);
  v29 = static Font.Weight.bold.getter();
  v30 = Text.fontWeight(_:)(*(_QWORD *)&v29, 0, v15, v17, v21, v19);
  v32 = v31;
  v34 = v33;
  LOBYTE(v14) = v35 & 1;
  sub_100076B54(v15, v17, v21);
  swift_bridgeObjectRelease(v19, v36, v37, v38, v39, v40, v41, v42);
  KeyPath = swift_getKeyPath(&unk_10010E928);
  *(_QWORD *)a4 = v30;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v34;
  *(_QWORD *)(a4 + 32) = KeyPath;
  *(_BYTE *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 56) = 1;
  sub_1000769B4(v30, v32, v14);
  swift_bridgeObjectRetain(v34);
  swift_retain(KeyPath);
  sub_100076B54(v30, v32, v14);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v34, v44, v45, v46, v47, v48, v49, v50);
}

__n128 sub_1000CD1A4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  char v15;
  __n128 v16;
  char v17;
  uint64_t v18;
  char v19;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = static VerticalAlignment.center.getter(a1);
  sub_1000CD02C(v4, v5, v6, (uint64_t)&v14);
  v8 = v15;
  v9 = v17;
  v10 = v18;
  v11 = v19;
  result = v16;
  v13 = v14;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = v10;
  *(_BYTE *)(a2 + 80) = v11;
  return result;
}

uint64_t sub_1000CD238@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CD260@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CD288(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000CD2AC(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_1000CD2D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016DE30;
  if (!qword_10016DE30)
  {
    v1 = sub_100035D30(&qword_10016DE38);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10016DE30);
  }
  return result;
}

void sub_1000CD320(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  NSString v34;
  id v35;
  id v36;
  id v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  char **v63;
  void *object;
  char **v65;
  id v66;
  Swift::String v67;
  Swift::String v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  NSString v72;
  void *v73;
  id v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  NSString v78;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  BOOL v89;
  void *v90;
  uint64_t v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  id v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  id v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  id v124;
  id v125;
  id v126;
  void *v127;
  void *v128;
  id v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  Class isa;
  void *v134;
  char v135;
  void *v136;
  void *v137;
  uint64_t v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  _QWORD aBlock[5];
  uint64_t v146;
  char v147[8];
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  char v155;
  Swift::String v156;
  Swift::String v157;

  sub_10005BE38(a1, (uint64_t)v147);
  v8 = v148;
  v7 = v149;
  v9 = v150;
  v10 = v151;
  v11 = v152;
  *(_OWORD *)(v1 + 80) = xmmword_10010E960;
  v141 = v1;
  sub_10005BE38(a1, v1 + 24);
  sub_10005BE38(a1, (uint64_t)&v153);
  if (v155 == 1)
  {
    v15 = v153;
    v14 = v154;
    sub_10005BF84(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005BE74);
    v137 = v14;
    swift_retain(v14);
    v16 = v15;
    v12 = 0;
    v17 = 0;
    v135 = 1;
    goto LABEL_10;
  }
  if (v155)
  {
    sub_10005BF84(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005BE74);
    goto LABEL_7;
  }
  v12 = v154;
  if (!v154)
  {
    v18 = (void *)objc_opt_self(UIDevice);
    v19 = v8;
    sub_100035C4C(v7, v9);
    sub_100035C4C(v10, v11);
    v20 = objc_msgSend(v18, "currentDevice");
    v21 = objc_msgSend(v20, "userInterfaceIdiom");

    if (v21 != (id)1)
      goto LABEL_9;
LABEL_7:
    v135 = 0;
    v137 = 0;
    v15 = 0;
    v12 = 0;
    v17 = 1;
    goto LABEL_10;
  }
  v13 = v8;
  sub_100035C4C(v7, v9);
  sub_100035C4C(v10, v11);
LABEL_9:
  v22 = v12;
  v135 = 0;
  v137 = 0;
  v15 = 0;
  v17 = 0;
LABEL_10:
  v24 = sub_100067000(0);
  if (v23)
  {
    v25 = v23;
    sub_10003FFA0(0, 0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v24, v23);
    v27 = v26;
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v27 = 0;
  }
  v29 = sub_100067000(1);
  if (v28)
  {
    v30 = v28;
    sub_10003FFA0(0, 0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v29, v28);
    v32 = v31;
    swift_bridgeObjectRelease(v30);
    if (v27)
      goto LABEL_15;
LABEL_18:
    v33 = 0;
    if (v32)
      goto LABEL_16;
    goto LABEL_19;
  }
  v32 = 0;
  if (!v27)
    goto LABEL_18;
LABEL_15:
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  if (v32)
  {
LABEL_16:
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    goto LABEL_20;
  }
LABEL_19:
  v34 = 0;
LABEL_20:
  v35 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v33, v34, v17);

  *(_QWORD *)(v141 + 16) = v35;
  if (!v12)
  {
    if (!v15)
      goto LABEL_47;
    v33 = v15;
    objc_msgSend(v33, "bounds");
    v2 = v38;
    v3 = v39;
    v4 = v40;
    v5 = v41;
    v42 = (void *)qword_10016B3C0;
    if (qword_10016B3C0)
    {
      v43 = type metadata accessor for SelfServiceDestinationPickerViewController();
      if (!swift_dynamicCastClass(v42, v43))
      {
        v51 = v42;
LABEL_43:
        v50 = v51;
        goto LABEL_44;
      }
    }
    if (qword_10016A600 != -1)
      swift_once(&qword_10016A600, sub_1000490B8);
    v44 = objc_msgSend((id)qword_100172310, "viewControllers");
    v45 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
    v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v45);

    if ((unint64_t)v46 >> 62)
    {
      if (v46 < 0)
        v52 = v46;
      else
        v52 = v46 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v46);
      v47 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease(v46);
      if (v47)
        goto LABEL_30;
    }
    else
    {
      v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v47)
      {
LABEL_30:
        v48 = v47 - 1;
        if (__OFSUB__(v47, 1))
          goto LABEL_80;
        if ((v46 & 0xC000000000000001) != 0)
          goto LABEL_81;
        if ((v48 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v48 < *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v49 = *(id *)(v46 + 8 * v48 + 32);
          goto LABEL_35;
        }
        __break(1u);
        goto LABEL_84;
      }
    }
    swift_bridgeObjectRelease(v46);
    if (qword_10016A5F8 == -1)
    {
LABEL_42:
      v51 = (id)qword_100172300;
      goto LABEL_43;
    }
LABEL_84:
    swift_once(&qword_10016A5F8, sub_100048E78);
    goto LABEL_42;
  }
  v33 = v12;
  v36 = objc_msgSend(v35, "popoverPresentationController");
  if (!v36)
    goto LABEL_46;
  v37 = v36;
  objc_msgSend(v36, "setBarButtonItem:", v33);
  while (1)
  {

LABEL_46:
LABEL_47:
    v142 = (uint64_t)sub_10008B660(a1);
    v136 = v12;
    v134 = v15;
    if ((unint64_t)v142 >> 62)
      break;
    v46 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v46)
      goto LABEL_67;
LABEL_49:
    v140 = (id)objc_opt_self(ASTLocalization);
    v15 = (void *)objc_opt_self(NSBundle);
    v48 = objc_opt_self(UIAlertAction);
    v139 = (id)v48;
    if (v46 >= 1)
    {
      v62 = 0;
      v63 = &selRef_bluetoothID;
      v138 = v46;
      while (1)
      {
        v144 = v62;
        if ((v142 & 0xC000000000000001) != 0)
        {
          v75 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v142);
        }
        else
        {
          v75 = *(_QWORD **)(v142 + 8 * v62 + 32);
          swift_retain(v75);
        }
        v77 = v75[2];
        v76 = (void *)v75[3];
        v143 = *(id *)(v141 + 16);
        swift_bridgeObjectRetain(v76);
        v78 = String._bridgeToObjectiveC()();
        v79 = objc_msgSend(v140, "localizedStringForKey:", v78);

        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        v82 = v81;

        v83 = objc_msgSend(v15, v63[303]);
        v84 = v15;
        v65 = v63;
        v85 = v83;
        v157._object = (void *)0xE000000000000000;
        v86._countAndFlagsBits = v80;
        v86._object = v82;
        v87._countAndFlagsBits = 0;
        v87._object = (void *)0xE000000000000000;
        v157._countAndFlagsBits = 0;
        v88 = NSLocalizedString(_:tableName:bundle:value:comment:)(v86, (Swift::String_optional)0, (NSBundle)v85, v87, v157);
        swift_bridgeObjectRelease(v82);

        v89 = v88._countAndFlagsBits == v77 && v88._object == v76;
        object = v76;
        if (!v89)
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v88._countAndFlagsBits, v88._object, v77, v76, 0) & 1) == 0)
          {
            String.init(format:arguments:)(v88._countAndFlagsBits, v88._object, _swiftEmptyArrayStorage);
            v69 = v90;
            swift_bridgeObjectRelease(v76);
            swift_bridgeObjectRelease(v88._object);
            goto LABEL_53;
          }
          object = v88._object;
          v65 = &selRef_bluetoothID;
        }
        swift_bridgeObjectRelease(object);
        v66 = objc_msgSend(v84, v65[303]);
        v156._object = (void *)0xE000000000000000;
        v67._countAndFlagsBits = v77;
        v67._object = v76;
        v68._countAndFlagsBits = 0;
        v68._object = (void *)0xE000000000000000;
        v156._countAndFlagsBits = 0;
        v69 = NSLocalizedString(_:tableName:bundle:value:comment:)(v67, (Swift::String_optional)0, (NSBundle)v66, v68, v156)._object;
        swift_bridgeObjectRelease(v76);

LABEL_53:
        v15 = v84;
        v62 = v144 + 1;
        v70 = v75[4];
        v71 = swift_allocObject(&unk_10013B960, 80, 7);
        sub_10005BE38(a1, v71 + 16);
        *(_QWORD *)(v71 + 72) = v75;
        sub_10005BF84(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005BE74);
        swift_retain(v75);
        v72 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v69);
        aBlock[4] = sub_1000CE3C0;
        v146 = v71;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100040808;
        aBlock[3] = &unk_10013B978;
        v73 = _Block_copy(aBlock);
        v74 = objc_msgSend(v139, "actionWithTitle:style:handler:", v72, v70, v73, swift_release(v146).n128_f64[0]);
        _Block_release(v73);

        objc_msgSend(v143, "addAction:", v74);
        swift_release(v75);

        v63 = &selRef_bluetoothID;
        if (v138 == v144 + 1)
          goto LABEL_67;
      }
    }
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v46);
LABEL_35:
    v50 = v49;
    swift_bridgeObjectRelease(v46);
LABEL_44:
    v53 = objc_msgSend(v50, "view");

    objc_msgSend(v33, "convertRect:toView:", v53, v2, v3, v4, v5);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v61 = v60;

    v2 = v55 + -10.0;
    v3 = v57 + -10.0;
    v4 = v59 + 20.0;
    v5 = v61 + 20.0;
    v37 = objc_msgSend(*(id *)(v141 + 16), "popoverPresentationController");
    objc_msgSend(v37, "setSourceRect:", v2, v3, v4, v5);
  }
  if (v142 < 0)
    v91 = v142;
  else
    v91 = v142 & 0xFFFFFFFFFFFFFF8;
  v46 = _CocoaArrayWrapper.endIndex.getter(v91);
  if (v46)
    goto LABEL_49;
LABEL_67:
  swift_bridgeObjectRelease(v142);
  if ((v135 & 1) == 0)
  {
    sub_10005BF84(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005BEFC);
LABEL_77:
    v94 = v136;
LABEL_78:
    swift_release(v137);

    return;
  }
  v92 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v93 = objc_msgSend(v92, "userInterfaceIdiom");

  v94 = v136;
  if (v93 == (id)1)
  {
    sub_10005BF84(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005BEFC);
    goto LABEL_78;
  }
  v95 = type metadata accessor for DeviceInformationView();
  v96 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v95)), "init");
  v97 = *(_QWORD *)&v96[OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_state];
  *(_QWORD *)&v96[OBJC_IVAR____TtC11Diagnostics21DeviceInformationView_state] = v137;
  swift_retain_n(v137, 2);
  swift_release(v97);
  sub_1000375D4();
  *(_QWORD *)&v98 = swift_release(v137).n128_u64[0];
  sub_10003B9C0(7, 0, v98);
  sub_10003C028();
  objc_msgSend(v96, "setTranslatesAutoresizingMaskIntoConstraints:", 0, sub_10003C27C());
  v99 = type metadata accessor for AlertContentViewController();
  v100 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v99)), "init");
  v101 = objc_allocWithZone((Class)UIView);
  v102 = v100;
  v103 = objc_msgSend(v101, "init");
  objc_msgSend(v102, "setView:", v103);

  v104 = objc_msgSend(v102, "view");
  if (!v104)
  {
    swift_release(v137);

    __break(1u);
    goto LABEL_86;
  }
  v105 = v104;
  objc_msgSend(v104, "addSubview:", v96);

  objc_msgSend(*(id *)(v141 + 16), "setContentViewController:", v102);
  v106 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v107 = swift_allocObject(v106, 72, 7);
  *(_OWORD *)(v107 + 16) = xmmword_10010CA80;
  v108 = objc_msgSend(v96, "heightAnchor");
  v109 = objc_msgSend(v108, "constraintEqualToConstant:", 90.0);

  *(_QWORD *)(v107 + 32) = v109;
  v110 = objc_msgSend(v96, "widthAnchor");
  v111 = objc_msgSend(v102, "view");
  if (!v111)
  {
LABEL_86:
    swift_release(v137);

    __break(1u);
    goto LABEL_87;
  }
  v112 = v111;
  v113 = objc_msgSend(v111, "widthAnchor");

  v114 = objc_msgSend(v110, "constraintLessThanOrEqualToAnchor:", v113);
  *(_QWORD *)(v107 + 40) = v114;
  v115 = objc_msgSend(v96, "topAnchor");
  v116 = objc_msgSend(v102, "view");
  if (!v116)
  {
LABEL_87:
    swift_release(v137);

    __break(1u);
    goto LABEL_88;
  }
  v117 = v116;
  v118 = objc_msgSend(v116, "topAnchor");

  v119 = objc_msgSend(v115, "constraintEqualToAnchor:", v118);
  *(_QWORD *)(v107 + 48) = v119;
  v120 = objc_msgSend(v96, "bottomAnchor");
  v121 = objc_msgSend(v102, "view");
  if (!v121)
  {
LABEL_88:
    swift_release(v137);

    __break(1u);
    goto LABEL_89;
  }
  v122 = v121;
  v123 = objc_msgSend(v121, "bottomAnchor");

  v124 = objc_msgSend(v120, "constraintEqualToAnchor:", v123);
  *(_QWORD *)(v107 + 56) = v124;
  v125 = objc_msgSend(v96, "centerXAnchor");
  v126 = objc_msgSend(v102, "view");
  if (v126)
  {
    v127 = v126;
    v128 = (void *)objc_opt_self(NSLayoutConstraint);
    v129 = objc_msgSend(v127, "centerXAnchor");

    v130 = objc_msgSend(v125, "constraintEqualToAnchor:", v129);
    *(_QWORD *)(v107 + 64) = v130;
    aBlock[0] = v107;
    specialized Array._endMutation()(v131);
    v132 = aBlock[0];
    sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v132);
    objc_msgSend(v128, "activateConstraints:", isa);
    sub_10005BF84(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005BEFC);

    goto LABEL_77;
  }
LABEL_89:
  swift_release(v137);

  __break(1u);
}

uint64_t sub_1000CE11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE v11[56];

  sub_10005BE38(a2, (uint64_t)v11);
  if (v11[48])
  {
    v4 = *(void (**)(uint64_t))(a3 + 40);
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  byte_1001723E8 = 0;
  v4 = *(void (**)(uint64_t))(a3 + 40);
  if (v4)
  {
LABEL_3:
    v5 = *(_QWORD *)(a3 + 48);
    v6 = swift_retain(v5);
    v4(v6);
    sub_100035D74((uint64_t)v4, v5);
  }
LABEL_4:
  if (qword_10016A6D8 != -1)
    swift_once(&qword_10016A6D8, sub_1000C6380);
  v7 = type metadata accessor for ModalPresentationCoordinator(0);
  v8 = sub_100036D34(v7, (uint64_t)qword_1001723D0);
  swift_beginAccess(v8, v10, 33, 0);
  sub_1000C541C();
  return swift_endAccess(v10);
}

id sub_1000CE1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  id v8;
  _BYTE v10[24];

  v1 = v0;
  v2 = type metadata accessor for ModalPresentationCoordinator(0);
  result = (id)__chkstk_darwin(v2);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v1 + 72))
    return objc_msgSend(*(id *)(v1 + 16), "scheduleModalPresentationWithPriority:animated:presentationCompletion:", 2 * (objc_msgSend(*(id *)(v1 + 16), "preferredStyle") == (id)1), 1, 0);
  if ((byte_1001723E8 & 1) == 0)
  {
    if (qword_10016A6D8 != -1)
    {
      v8 = result;
      swift_once(&qword_10016A6D8, sub_1000C6380);
      result = v8;
    }
    v6 = sub_100036D34((uint64_t)result, (uint64_t)qword_1001723D0);
    swift_beginAccess(v6, v10, 0, 0);
    sub_1000B9598(v6, (uint64_t)v5);
    v7 = sub_1000C6400();
    if (v7)
    {

      return (id)sub_1000CE3E4((uint64_t)v5);
    }
    sub_1000CE3E4((uint64_t)v5);
    byte_1001723E8 = 1;
    return objc_msgSend(*(id *)(v1 + 16), "scheduleModalPresentationWithPriority:animated:presentationCompletion:", 2 * (objc_msgSend(*(id *)(v1 + 16), "preferredStyle") == (id)1), 1, 0);
  }
  return result;
}

uint64_t sub_1000CE330()
{
  uint64_t v0;

  sub_10005BEFC(*(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for ManagedAlertController()
{
  return objc_opt_self(_TtC11Diagnostics22ManagedAlertController);
}

uint64_t sub_1000CE388()
{
  uint64_t v0;

  sub_10005BEFC(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000CE3C0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CE11C(a1, v1 + 16, *(_QWORD *)(v1 + 72));
}

uint64_t sub_1000CE3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CE3DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CE3E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModalPresentationCoordinator(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000CE420()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  DARootViewController *v11;
  Class isa;
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  objc_super v20;

  v1 = v0;
  v20.receiver = v0;
  v20.super_class = (Class)type metadata accessor for NoSessionNavigationController();
  objc_msgSendSuper2(&v20, "viewDidLoad");
  objc_msgSend(v0, "setModalPresentationStyle:", 2);
  v2 = objc_msgSend(v0, "navigationBar");
  v3 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
  objc_msgSend(v2, "setBackgroundImage:forBarMetrics:", v3, 0);

  v4 = objc_msgSend(v1, "navigationBar");
  v5 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
  objc_msgSend(v4, "setShadowImage:", v5);

  v6 = objc_msgSend(v1, "navigationBar");
  objc_msgSend(v6, "setAlpha:", 0.0);

  v7 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10010C200;
  v9 = objc_allocWithZone((Class)type metadata accessor for NoSessionViewController());
  v10 = sub_10008C200();
  *(_QWORD *)(v8 + 32) = v10;
  specialized Array._endMutation()(v10);
  v11 = (DARootViewController *)v8;
  sub_100053F50();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11, v13, v14, v15, v16, v17, v18, v19);
  objc_msgSend(v1, "setViewControllers:", isa);

}

id sub_1000CE780()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoSessionNavigationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NoSessionNavigationController()
{
  return objc_opt_self(_TtC11Diagnostics29NoSessionNavigationController);
}

id sub_1000CE8F0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseControl();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BaseControl()
{
  return objc_opt_self(_TtC11Diagnostics11BaseControl);
}

id sub_1000CE940()
{
  void *v0;
  void *v1;
  DARootViewController *v2;
  id v3;
  unsigned int v4;
  Swift::String v5;
  uint64_t v6;
  const char *v7;
  DARootViewController *v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSString v15;
  SEL v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  DARootViewController *v24;
  DARootViewController *v25;
  const char *v26;
  DARootViewController *v27;
  id v28;
  int v29;
  id v30;
  id v31;
  id v32;
  id v33;
  NSString v34;
  SEL v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  NSString v42;
  id v43;
  id v44;
  objc_super v46;
  unint64_t v47;
  unint64_t v48;

  v1 = v0;
  v2 = (DARootViewController *)0x8000000100118BF0;
  v47 = 0xD00000000000001ALL;
  v48 = 0x8000000100118BF0;
  v3 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v4 = objc_msgSend(v3, "isCheckerBoardActive");
  swift_unknownObjectRelease(v3);
  if (v4)
  {
    v5._countAndFlagsBits = 4342623;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6 = v47;
    v2 = (DARootViewController *)v48;
  }
  else
  {
    v6 = 0xD00000000000001ALL;
  }
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, v6, v2);
  v8 = (DARootViewController *)v7;
  swift_bridgeObjectRelease(v2, v7, v9, v10, v11, v12, v13, v14);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8, v16, v17, v18, v19, v20, v21, v22);
  v23 = sub_10004016C(0xD00000000000001DLL, 0x8000000100118C10);
  v25 = v24;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)v23, v24);
  v27 = (DARootViewController *)v26;
  swift_bridgeObjectRelease(v25, v26, v28, v29, v30, v31, v32, v33);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27, v35, v36, v37, v38, v39, v40, v41);
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v42);

  v46.receiver = v1;
  v46.super_class = (Class)type metadata accessor for DiagnosticsCompletedViewController();
  v44 = objc_msgSendSuper2(&v46, "initWithTitle:detailText:icon:contentLayout:", v15, v34, v43, 2);

  return v44;
}

void sub_1000CEB20()
{
  void *v0;
  void *v1;
  id v2;
  double v3;
  id v4;
  DARootViewController *v5;
  DARootViewController *v6;
  NSString v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  objc_super v17;

  v1 = v0;
  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for DiagnosticsCompletedViewController();
  objc_msgSendSuper2(&v17, "viewDidLoad");
  objc_msgSend(v0, "setModalPresentationStyle:", 2);
  v2 = objc_msgSend(v0, "headerView");
  LODWORD(v3) = 0;
  objc_msgSend(v2, "setTitleHyphenationFactor:", v3);

  v4 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000017, (void *)0x80000001001141C0);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  objc_msgSend(v4, "setTitle:forState:", v7, 0);

  sub_100037118(0, (unint64_t *)&qword_10016DFF0, UIAction_ptr);
  v15 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000CECD0, 0);
  objc_msgSend(v4, "addAction:forControlEvents:", v15, 64);

  v16 = objc_msgSend(v1, "buttonTray");
  objc_msgSend(v16, "addButton:", v4);

}

void sub_1000CECD0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100098BDC(0xCu, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1000CED0C(char a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_class *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  NSString v21;
  unsigned __int8 v22;
  id v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  void (*v28)(char *, uint64_t);
  void *v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];
  objc_super v39;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  v16 = (objc_class *)type metadata accessor for DiagnosticsCompletedViewController();
  v39.receiver = v1;
  v39.super_class = v16;
  objc_msgSendSuper2(&v39, "viewDidAppear:", a1 & 1);
  v17 = objc_msgSend(v1, "navigationController");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "navigationBar");

    objc_msgSend(v19, "_setBackgroundOpacity:", 0.0);
  }
  v20 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "BOOLForKey:", v21);

  if ((v22 & 1) != 0
    || (v23 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform"),
        v24 = objc_msgSend(v23, "isInBoxUpdateModeActive"),
        result = swift_unknownObjectRelease(v23),
        v24))
  {
    v26 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
    v27 = (void *)static OS_dispatch_queue.main.getter(v26);
    static DispatchTime.now()(v27);
    + infix(_:_:)(v13, 2.0);
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v13, v9);
    aBlock[4] = sub_1000CF064;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100030658;
    aBlock[3] = &unk_10013B9C8;
    v29 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v30);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v31 = sub_100035C5C();
    v32 = sub_100035CA4((uint64_t *)&unk_10016AD10);
    v33 = sub_100035CE4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v3, v31);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v8, v5, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
    return ((uint64_t (*)(char *, uint64_t))v28)(v15, v9);
  }
  return result;
}

void sub_1000CF064(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100098BDC(0xDu, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

id sub_1000CF108()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DiagnosticsCompletedViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DiagnosticsCompletedViewController()
{
  return objc_opt_self(_TtC11Diagnostics34DiagnosticsCompletedViewController);
}

uint64_t sub_1000CF158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CF168(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000CF170(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  int DeviceClass;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  NSString v23;
  void *v24;
  id v25;
  NSString v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  id v39;
  objc_super v41;
  uint64_t v42;
  uint64_t v43;

  v9 = OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_tableView;
  v10 = objc_allocWithZone((Class)type metadata accessor for IntrinsicSizeAdjustingTableView());
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "initWithFrame:style:", 1, 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_cancelButton;
  *(_QWORD *)&v11[v12] = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
  *(_QWORD *)&v11[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_tableViewHorizontalPadding] = 0x4034000000000000;
  v13 = (uint64_t *)&v11[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinationConfirmationHandler];
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_suiteManager] = a1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations] = a2;
  v14 = *v13;
  v15 = v13[1];
  *v13 = a3;
  v13[1] = a4;
  v16 = a1;
  sub_100035C4C(a3, a4);
  sub_100035D74(v14, v15);

  _StringGuts.grow(_:)(29);
  DeviceClass = GestaltGetDeviceClass();
  v18 = sub_10009F870(DeviceClass);
  v20 = v19;
  swift_bridgeObjectRelease(0xE000000000000000);
  v42 = v18;
  v43 = v20;
  v21._object = (void *)0x8000000100118CC0;
  v21._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v21);
  v22 = v20;
  v23 = String._bridgeToObjectiveC()();
  v24 = (void *)objc_opt_self(UIImage);
  v25 = objc_msgSend(v24, "_systemImageNamed:", v23);

  if (v25)
  {
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    v25 = objc_msgSend(v24, "imageNamed:", v26);

  }
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v29 = v28;
  sub_10003FFA0(v27, v28, (uint64_t)_swiftEmptyArrayStorage, 0xD000000000000012, (void *)0x8000000100118CE0);
  v31 = v30;
  swift_bridgeObjectRelease(v29);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v35 = v34;
  sub_10003FFA0(v33, v34, (uint64_t)_swiftEmptyArrayStorage, 0xD00000000000001BLL, (void *)0x8000000100118D00);
  v37 = v36;
  swift_bridgeObjectRelease(v35);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v41.receiver = v11;
  v41.super_class = (Class)type metadata accessor for SelfServiceDestinationPickerViewController();
  v39 = objc_msgSendSuper2(&v41, "initWithTitle:detailText:icon:contentLayout:", v32, v38, v25, 3);
  sub_100035D74(a3, a4);

  return v39;
}

void sub_1000CF554(char a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _BYTE *v11;
  id v12;
  _QWORD v13[5];
  uint64_t v14;
  objc_super v15;

  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for SelfServiceDestinationPickerViewController();
  objc_msgSendSuper2(&v15, "viewDidAppear:", a1 & 1);
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_suiteManager]
     + OBJC_IVAR____TtC11Diagnostics12SuiteManager_delegate;
  *(_QWORD *)(v3 + 8) = &off_10013B9F0;
  swift_unknownObjectWeakAssign(v3, v1);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_tableView], "invalidateIntrinsicContentSize");
  if (qword_10016A5F0 != -1)
    swift_once(&qword_10016A5F0, sub_100044F78);
  v4 = (void *)qword_1001722E8;
  v5 = *(NSObject **)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_disableSystemGesturesQueue);
  v6 = swift_allocObject(&unk_10013BC40, 24, 7);
  *(_QWORD *)(v6 + 16) = v4;
  v7 = swift_allocObject(&unk_10013BC68, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10009BB14;
  *(_QWORD *)(v7 + 24) = v6;
  v13[4] = sub_100052C38;
  v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100048E58;
  v13[3] = &unk_10013BC80;
  v8 = _Block_copy(v13);
  v9 = v14;
  v10 = v4;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 88, 136, 46, 1);
  swift_release(v6);
  swift_release(v7);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v11 = (_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingAssertionEnabled);
    *(_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingAssertionEnabled) = 1;
    v12 = sub_100046588();
    objc_msgSend(v12, "setNearbySharingEnabled:", (*v11 & 1) == 0);

    sub_100046614();
    sub_100046828();
  }
}

void sub_1000CF828()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  NSString v6;
  void *v7;
  uint64_t v8;
  DARootViewController *v9;
  DARootViewController *v10;
  const char *v11;
  DARootViewController *v12;
  id v13;
  int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSString v19;
  SEL v20;
  id v21;
  int v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v1 = objc_msgSend(v0, "navigationItem");
  objc_msgSend(v1, "setHidesBackButton:", 1);

  v2 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_tableView];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "setDataSource:", v0);
  objc_msgSend(v2, "setDelegate:", v0);
  objc_msgSend(v2, "setSeparatorStyle:", 0);
  objc_msgSend(v2, "setScrollEnabled:", 0);
  objc_msgSend(v2, "setShowsVerticalScrollIndicator:", 0);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  objc_msgSend(v2, "setRowHeight:", UITableViewAutomaticDimension);
  objc_msgSend(v2, "setEstimatedRowHeight:", 300.0);
  v4 = type metadata accessor for SelfServiceViewCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v6);

  v7 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_cancelButton];
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v10 = v9;
  sub_10003FFA0(v8, v9, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001FLL, (void *)0x8000000100115560);
  v12 = (DARootViewController *)v11;
  swift_bridgeObjectRelease(v10, v11, v13, v14, v15, v16, v17, v18);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12, v20, v21, v22, v23, v24, v25, v26);
  objc_msgSend(v7, "setTitle:forState:", v19, 0);

  sub_100037118(0, (unint64_t *)&qword_10016DFF0, UIAction_ptr);
  v27 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000CFACC, 0);
  objc_msgSend(v7, "addAction:forControlEvents:", v27, 64);

}

uint64_t sub_1000CFACC()
{
  id v0;
  unsigned int v1;
  void (*v2)();

  v0 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v1 = objc_msgSend(v0, "isCheckerBoardActive");
  swift_unknownObjectRelease(v0);
  if (v1)
    v2 = sub_100072264;
  else
    v2 = sub_1000CFB88;
  sub_100035C4C((uint64_t)v2, 0);
  sub_100066B64(1);
  sub_100035D74((uint64_t)v2, 0);
  return sub_100035D74((uint64_t)v2, 0);
}

void sub_1000CFB88()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _BYTE *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v12[5];
  uint64_t v13;

  if (qword_10016A5F0 != -1)
    swift_once(&qword_10016A5F0, sub_100044F78);
  v0 = (void *)qword_1001722E8;
  v1 = *(NSObject **)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_disableSystemGesturesQueue);
  v2 = swift_allocObject(&unk_10013BBC8, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject(&unk_10013BBF0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000740B0;
  *(_QWORD *)(v3 + 24) = v2;
  v12[4] = sub_10003CDD4;
  v13 = v3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100048E58;
  v12[3] = &unk_10013BC08;
  v4 = _Block_copy(v12);
  v5 = v13;
  v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 88, 147, 46, 1);
  swift_release(v2);
  swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingAssertionEnabled);
    *(_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingAssertionEnabled) = (*(_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingPreferencesState) & 1) == 0;
    v8 = sub_100046588();
    objc_msgSend(v8, "setNearbySharingEnabled:", (*v7 & 1) == 0);

    v9 = qword_1001722E8;
    v10 = sub_100046588();
    objc_msgSend(v10, "setDiscoverableMode:", *(_QWORD *)(v9 + OBJC_IVAR____TtC11Diagnostics10Assertions_airDropUserSetting));

    v11 = *(void **)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_captureButtonAssertion);
    if (v11)
      objc_msgSend(v11, "invalidate");
  }
}

id sub_1000CFD80()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  Class isa;
  SEL v24;
  id v25;
  int v26;
  id v27;
  id v28;
  id v29;
  id v30;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10010BF30;
  v5 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_tableView];
  v6 = objc_msgSend(v5, "leadingAnchor");
  v7 = objc_msgSend(v1, "contentView");
  v8 = objc_msgSend(v7, "leadingAnchor");

  v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, 20.0);
  *(_QWORD *)(v4 + 32) = v9;
  v10 = objc_msgSend(v5, "trailingAnchor");
  v11 = objc_msgSend(v1, "contentView");
  v12 = objc_msgSend(v11, "trailingAnchor");

  v13 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v12, -20.0);
  *(_QWORD *)(v4 + 40) = v13;
  v14 = objc_msgSend(v5, "topAnchor");
  v15 = objc_msgSend(v1, "contentView");
  v16 = objc_msgSend(v15, "topAnchor");

  v17 = objc_msgSend(v14, "constraintEqualToAnchor:", v16);
  *(_QWORD *)(v4 + 48) = v17;
  v18 = objc_msgSend(v5, "bottomAnchor");
  v19 = objc_msgSend(v1, "contentView");
  v20 = objc_msgSend(v19, "bottomAnchor");

  v21 = objc_msgSend(v18, "constraintEqualToAnchor:", v20);
  *(_QWORD *)(v4 + 56) = v21;
  specialized Array._endMutation()(v22);
  sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v4, v24, v25, v26, v27, v28, v29, v30);
  objc_msgSend(v2, "activateConstraints:", isa);

  return objc_msgSend(v5, "invalidateIntrinsicContentSize");
}

id sub_1000D00AC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SelfServiceDestinationPickerViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SelfServiceDestinationPickerViewController()
{
  return objc_opt_self(_TtC11Diagnostics42SelfServiceDestinationPickerViewController);
}

_BYTE *sub_1000D0170(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString v4;
  id v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  DARootViewController *v38;
  DARootViewController *v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  id v43;
  int v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t *v49;
  DARootViewController *v50;
  SEL v51;
  id v52;
  int v53;
  id v54;
  id v55;
  id v56;
  id v57;
  DARootViewController *v58;
  void *v59;
  id v60;
  NSString v61;
  SEL v62;
  id v63;
  int v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  DARootViewController *v70;
  DARootViewController *v71;
  uint64_t v72;
  const char *v73;
  const char *v74;
  id v75;
  int v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t *v81;
  DARootViewController *v82;
  SEL v83;
  id v84;
  int v85;
  id v86;
  id v87;
  id v88;
  id v89;
  DARootViewController *v90;
  void *v91;
  id v92;
  NSString v93;
  SEL v94;
  id v95;
  int v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  SEL v102;
  id v103;
  int v104;
  id v105;
  id v106;
  id v107;
  id v108;
  SEL v109;
  id v110;
  int v111;
  id v112;
  id v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  SEL v118;
  id v119;
  int v120;
  id v121;
  id v122;
  id v123;
  id v124;
  _QWORD v125[5];
  uint64_t v126;

  v2 = v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:", v4);

  if (v5)
  {
    v6 = type metadata accessor for SelfServiceViewCell();
    v7 = (_BYTE *)swift_dynamicCastClass(v5, v6);
    if (v7)
      goto LABEL_5;

  }
  v8 = type metadata accessor for SelfServiceViewCell();
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "init");
LABEL_5:
  v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleTruncated] = 0;
  v9 = OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleLabel;
  v10 = IndexPath.section.getter(objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleLabel], "setNumberOfLines:", 0));
  v11 = v10;
  v12 = OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations;
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v101 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations);
    else
      v101 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations));
    v14 = _CocoaArrayWrapper.endIndex.getter(v101);
    swift_bridgeObjectRelease((DARootViewController *)v13, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v15 = IndexPath.section.getter(v10);
  v16 = v15;
  v17 = *(_QWORD *)(v2 + v12);
  if (v11 >= v14)
  {
    if (!((unint64_t)v17 >> 62))
    {
      if (v15 != *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_33:
    if (v17 < 0)
      v116 = v17;
    else
      v116 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v117 = _CocoaArrayWrapper.endIndex.getter(v116);
    swift_bridgeObjectRelease((DARootViewController *)v17, v118, v119, v120, v121, v122, v123, v124);
    if (v16 != v117)
      goto LABEL_18;
LABEL_17:
    sub_1000D0714((uint64_t)v7);
    goto LABEL_18;
  }
  if ((v17 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(v17);
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v17);
    swift_bridgeObjectRelease((DARootViewController *)v17, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_12;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v15 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v18 = *(id *)(v17 + 8 * v15 + 32);
LABEL_12:
  v19 = objc_msgSend(v18, "endpoint");

  if (v19 != (id)2)
  {
    if (v19 != (id)1)
      goto LABEL_18;
    goto LABEL_17;
  }
  v21 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 3);
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v22, v21);

  if (v23)
  {
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0);
    v25 = objc_msgSend(v23, "imageWithTintColor:", v24);

  }
  else
  {
    v25 = 0;
  }
  v26 = OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImage;
  v27 = *(void **)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImage];
  *(_QWORD *)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImage] = v25;
  v28 = v25;

  v29 = *(void **)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImageView];
  v30 = *(void **)&v7[v26];
  v31 = (void *)objc_opt_self(UIView);
  v32 = swift_allocObject(&unk_10013BB28, 32, 7);
  *(_QWORD *)(v32 + 16) = v29;
  *(_QWORD *)(v32 + 24) = v30;
  v125[4] = sub_100074190;
  v126 = v32;
  v125[0] = _NSConcreteStackBlock;
  v125[1] = 1107296256;
  v125[2] = sub_100030658;
  v125[3] = &unk_10013BB40;
  v33 = _Block_copy(v125);
  v34 = v126;
  v35 = v30;
  v36 = v29;
  swift_release(v34);
  objc_msgSend(v31, "transitionWithView:duration:options:animations:completion:", v36, 5242880, v33, 0, 0.1);
  _Block_release(v33);

  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v39 = v38;
  v40 = sub_10003FFA0(v37, v38, (uint64_t)&_swiftEmptyArrayStorage, 0x5F4E55525F525353, (void *)0xEE00524941504552);
  v42 = v41;
  swift_bridgeObjectRelease(v39, v41, v43, v44, v45, v46, v47, v48);
  v49 = (uint64_t *)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_titleText];
  v50 = *(DARootViewController **)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_titleText + 8];
  *v49 = v40;
  v49[1] = (uint64_t)v42;
  swift_bridgeObjectRelease(v50, v51, v52, v53, v54, v55, v56, v57);
  v58 = (DARootViewController *)v49[1];
  if (v58)
  {
    v59 = *(void **)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_titleLabel];
    swift_bridgeObjectRetain(v49[1]);
    v60 = v59;
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58, v62, v63, v64, v65, v66, v67, v68);
    objc_msgSend(v60, "setText:", v61);

  }
  v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v71 = v70;
  v72 = sub_10003FFA0(v69, v70, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000016, (void *)0x8000000100118D40);
  v74 = v73;
  swift_bridgeObjectRelease(v71, v73, v75, v76, v77, v78, v79, v80);
  v81 = (uint64_t *)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleText];
  v82 = *(DARootViewController **)&v7[OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleText + 8];
  *v81 = v72;
  v81[1] = (uint64_t)v74;
  swift_bridgeObjectRelease(v82, v83, v84, v85, v86, v87, v88, v89);
  v90 = (DARootViewController *)v81[1];
  if (v90)
  {
    v91 = *(void **)&v7[v9];
    swift_bridgeObjectRetain(v81[1]);
    v92 = v91;
    v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v90, v94, v95, v96, v97, v98, v99, v100);
    objc_msgSend(v92, "setText:", v93);

  }
LABEL_18:
  objc_msgSend(v7, "setAccessoryType:", 1);
  return v7;
}

void sub_1000D0714(uint64_t a1)
{
  id v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  DARootViewController *v19;
  DARootViewController *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  id v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t *v30;
  DARootViewController *v31;
  SEL v32;
  id v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  DARootViewController *v39;
  void *v40;
  id v41;
  NSString v42;
  SEL v43;
  id v44;
  int v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  DARootViewController *v51;
  DARootViewController *v52;
  uint64_t v53;
  DARootViewController *v54;
  DARootViewController *v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  id v59;
  int v60;
  id v61;
  id v62;
  id v63;
  id v64;
  SEL v65;
  id v66;
  int v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t *v72;
  DARootViewController *v73;
  SEL v74;
  id v75;
  int v76;
  id v77;
  id v78;
  id v79;
  id v80;
  DARootViewController *v81;
  void *v82;
  id v83;
  NSString v84;
  SEL v85;
  id v86;
  int v87;
  id v88;
  id v89;
  id v90;
  id v91;
  _QWORD v92[5];
  uint64_t v93;

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 3);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v3, v2);

  if (v4)
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0);
    v6 = objc_msgSend(v4, "imageWithTintColor:", v5);

  }
  else
  {
    v6 = 0;
  }
  v7 = OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImage;
  v8 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImage);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImage) = v6;
  v9 = v6;

  v10 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_iconImageView);
  v11 = *(void **)(a1 + v7);
  v12 = (void *)objc_opt_self(UIView);
  v13 = swift_allocObject(&unk_10013BB78, 32, 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v11;
  v92[4] = sub_1000D1C1C;
  v93 = v13;
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 1107296256;
  v92[2] = sub_100030658;
  v92[3] = &unk_10013BB90;
  v14 = _Block_copy(v92);
  v15 = v93;
  v16 = v11;
  v17 = v10;
  swift_release(v15);
  objc_msgSend(v12, "transitionWithView:duration:options:animations:completion:", v17, 5242880, v14, 0, 0.1);
  _Block_release(v14);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v20 = v19;
  v21 = sub_10003FFA0(v18, v19, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000013, (void *)0x8000000100118D80);
  v23 = v22;
  swift_bridgeObjectRelease(v20, v22, v24, v25, v26, v27, v28, v29);
  v30 = (uint64_t *)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_titleText);
  v31 = *(DARootViewController **)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_titleText + 8);
  *v30 = v21;
  v30[1] = (uint64_t)v23;
  swift_bridgeObjectRelease(v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = (DARootViewController *)v30[1];
  if (v39)
  {
    v40 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_titleLabel);
    swift_bridgeObjectRetain(v30[1]);
    v41 = v40;
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39, v43, v44, v45, v46, v47, v48, v49);
    objc_msgSend(v41, "setText:", v42);

  }
  v50 = sub_10004016C(0xD00000000000001BLL, 0x8000000100118DA0);
  v52 = v51;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v55 = v54;
  v56 = sub_10003FFA0(v53, v54, (uint64_t)&_swiftEmptyArrayStorage, (uint64_t)v50, v52);
  v58 = v57;
  swift_bridgeObjectRelease(v52, v57, v59, v60, v61, v62, v63, v64);
  swift_bridgeObjectRelease(v55, v65, v66, v67, v68, v69, v70, v71);
  v72 = (uint64_t *)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleText);
  v73 = *(DARootViewController **)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleText + 8);
  *v72 = v56;
  v72[1] = (uint64_t)v58;
  swift_bridgeObjectRelease(v73, v74, v75, v76, v77, v78, v79, v80);
  v81 = (DARootViewController *)v72[1];
  if (v81)
  {
    v82 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics19SelfServiceViewCell_subtitleLabel);
    swift_bridgeObjectRetain(v72[1]);
    v83 = v82;
    v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v81, v85, v86, v87, v88, v89, v90, v91);
    objc_msgSend(v83, "setText:", v84);

  }
}

void sub_1000D0C74(char a1, void *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  _QWORD *v22;
  void (*v23)(char *, id, double (*)(), _QWORD *, uint64_t, uint64_t);
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  __n128 v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && (a1 & 1) != 0)
  {
    v14 = *(char **)&a3[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_suiteManager];
    v15 = *(void **)&v14[OBJC_IVAR____TtC11Diagnostics12SuiteManager_deviceState];
    if (!v15)
    {
      sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
      v37 = a2;
      v40 = (id)static OS_os_log.default.getter(v37);
      v38 = static os_log_type_t.default.getter(v40);
      os_log(_:dso:log:type:_:)("[SuiteManager] Device State is nil, suite won't be run", 54, 2, &_mh_execute_header, v40, v38, &_swiftEmptyArrayStorage);

      goto LABEL_9;
    }
    v16 = &v14[OBJC_IVAR____TtC11Diagnostics12SuiteManager_delegate];
    Strong = swift_unknownObjectWeakLoadStrong(&v14[OBJC_IVAR____TtC11Diagnostics12SuiteManager_delegate]);
    if (Strong)
    {
      v19 = Strong;
      v20 = *((_QWORD *)v16 + 1);
      ObjectType = swift_getObjectType(Strong, v18);
      v22 = (_QWORD *)swift_allocObject(&unk_10013BB00, 40, 7);
      v22[2] = v14;
      v22[3] = v15;
      v22[4] = a2;
      v23 = *(void (**)(char *, id, double (*)(), _QWORD *, uint64_t, uint64_t))(v20 + 48);
      v24 = a2;
      v25 = v15;
      v26 = v24;
      v40 = v25;
      v23(v14, v26, sub_100036644, v22, ObjectType, v20);

      swift_release(v22);
      swift_unknownObjectRelease(v19);
LABEL_9:

    }
  }
  else
  {
    v27 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
    v28 = (void *)static OS_dispatch_queue.main.getter(v27);
    v29 = swift_allocObject(&unk_10013BAB0, 24, 7);
    *(_QWORD *)(v29 + 16) = a3;
    aBlock[4] = sub_1000D1B94;
    v42 = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100030658;
    aBlock[3] = &unk_10013BAC8;
    v30 = _Block_copy(aBlock);
    v31 = v42;
    v32 = a3;
    v33 = swift_release(v31);
    static DispatchQoS.unspecified.getter(v33);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v34 = sub_100035C5C();
    v35 = sub_100035CA4((uint64_t *)&unk_10016AD10);
    v36 = sub_100035CE4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v6, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v30);
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

void sub_1000D0FAC(char *a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(void **)&a1[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_suiteManager];
  v3 = objc_allocWithZone((Class)type metadata accessor for SelfServiceSuitePickerViewController());
  v6 = sub_1000823E0(v2);
  v4 = objc_msgSend(a1, "navigationController");
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "pushViewController:animated:", v6, 1);

  }
}

void sub_1000D10E8(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char *v15;

  v8 = *(void **)&a1[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_suiteManager];
  v9 = objc_allocWithZone((Class)type metadata accessor for SelfServiceSuiteInProgressViewController());
  v15 = sub_10008F47C(v8, a2);
  v10 = (uint64_t *)&v15[OBJC_IVAR____TtC11Diagnostics40SelfServiceSuiteInProgressViewController_onAppear];
  v11 = *(_QWORD *)&v15[OBJC_IVAR____TtC11Diagnostics40SelfServiceSuiteInProgressViewController_onAppear];
  v12 = *(_QWORD *)&v15[OBJC_IVAR____TtC11Diagnostics40SelfServiceSuiteInProgressViewController_onAppear + 8];
  *v10 = a3;
  v10[1] = a4;
  sub_100035C4C(a3, a4);
  sub_100035D74(v11, v12);
  v13 = objc_msgSend(a1, "navigationController");
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v13, "pushViewController:animated:", v15, 1);

  }
}

uint64_t sub_1000D11D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D11E0(a2, a3, a4);
}

uint64_t sub_1000D11E0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  id v20;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_10013BA38, 48, 7);
  v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_1000D141C;
  v31 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030658;
  aBlock[3] = &unk_10013BA50;
  v17 = _Block_copy(aBlock);
  v18 = v31;
  v19 = v4;
  v20 = a1;
  sub_100035C4C(a2, a3);
  v21 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v22 = sub_100035C5C();
  v23 = sub_100035CA4((uint64_t *)&unk_10016AD10);
  v24 = sub_100035CE4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v8, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v28);
}

uint64_t sub_1000D13E0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000D141C()
{
  uint64_t v0;

  sub_1000D10E8(*(char **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000D1428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D1438(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000D1440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations);
  if ((unint64_t)v2 >> 62)
    goto LABEL_17;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations), 2);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    v4 = 4;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2)
         : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "endpoint");

      if (v8 == (id)1)
        goto LABEL_14;
      ++v4;
      if (v7 == v3)
        goto LABEL_10;
    }
    __break(1u);
LABEL_17:
    if (v2 < 0)
      v11 = v2;
    else
      v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v2, 2);
  }
LABEL_10:
  swift_bridgeObjectRelease_n(v2, 2);
  v2 = *(_QWORD *)(v0 + v1);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v12 = *(_QWORD *)(v0 + v1);
    else
      v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v0 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v2);
    result = v0 + 1;
    if (!__OFADD__(v0, 1))
      return result;
  }
  else
  {
    v0 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = v0 + 1;
    if (!__OFADD__(v0, 1))
      return result;
  }
  __break(1u);
LABEL_14:
  swift_bridgeObjectRelease_n(v2, 2);
  v10 = *(_QWORD *)(v0 + v1);
  if (!((unint64_t)v10 >> 62))
    return *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v10 < 0)
    v13 = *(_QWORD *)(v0 + v1);
  else
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v14 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(v10);
  return v14;
}

void sub_1000D15E4()
{
  char *v0;
  char *v1;
  void (*v2)(id);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  id v34;
  DARootViewController *v35;
  Class isa;
  SEL v37;
  id v38;
  int v39;
  id v40;
  id v41;
  id v42;
  id v43;
  char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  DARootViewController *v50;
  DARootViewController *v51;
  SEL v52;
  id v53;
  int v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  SEL v63;
  id v64;
  int v65;
  id v66;
  id v67;
  id v68;
  id v69;
  SEL v70;
  id v71;
  int v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  SEL v79;
  id v80;
  int v81;
  id v82;
  id v83;
  id v84;
  id v85;
  _QWORD v86[2];
  char v87[104];

  v1 = v0;
  v2 = *(void (**)(id))&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinationConfirmationHandler];
  if (!v2)
    return;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinationConfirmationHandler
                    + 8];
  v4 = swift_retain(v3);
  v5 = IndexPath.section.getter(v4);
  v6 = v5;
  v7 = OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations;
  v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations];
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v62 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations];
    else
      v62 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics42SelfServiceDestinationPickerViewController_destinations]);
    v9 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease((DARootViewController *)v8, v63, v64, v65, v66, v67, v68, v69);
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v10 = IndexPath.section.getter(v5);
  v11 = v10;
  v12 = *(_QWORD *)&v1[v7];
  if (v6 >= v9)
  {
    if (!((unint64_t)v12 >> 62))
    {
      if (v10 != *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_37:
        sub_100035D74((uint64_t)v2, v3);
        return;
      }
LABEL_17:
      v27 = type metadata accessor for SetupViewController();
      v12 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v27)), "init");
      *(_BYTE *)(v12 + OBJC_IVAR____TtC11Diagnostics19SetupViewController_entryReason) = 6;
      v28 = objc_msgSend(v1, "navigationController");
      if (v28)
      {
        v29 = v28;
        objc_msgSend(v28, "pushViewController:animated:", v12, 1);

      }
      v30 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v31 = sub_100035CA4((uint64_t *)&unk_10016BA20);
      inited = swift_initStackObject(v31, v87);
      *(_OWORD *)(inited + 16) = xmmword_10010BE30;
      v86[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("sessionMode"));
      v86[1] = v33;
      AnyHashable.init<A>(_:)(v86, &type metadata for String, &protocol witness table for String);
      v34 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", 1);
      *(_QWORD *)(inited + 96) = sub_100037118(0, (unint64_t *)&unk_10016DFE0, NSNumber_ptr);
      *(_QWORD *)(inited + 72) = v34;
      v35 = (DARootViewController *)sub_10006DCBC(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v35, v37, v38, v39, v40, v41, v42, v43);
      objc_msgSend(v30, "postNotificationName:object:userInfo:", CFSTR("DAOverrideSessionMode"), 0, isa);

      if (qword_10016A658 == -1)
        goto LABEL_20;
      goto LABEL_39;
    }
LABEL_33:
    if (v12 < 0)
      v77 = v12;
    else
      v77 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v78 = _CocoaArrayWrapper.endIndex.getter(v77);
    swift_bridgeObjectRelease((DARootViewController *)v12, v79, v80, v81, v82, v83, v84, v85);
    if (v11 != v78)
      goto LABEL_37;
    goto LABEL_17;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)&v1[v7]);
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v12);
    swift_bridgeObjectRelease((DARootViewController *)v12, v70, v71, v72, v73, v74, v75, v76);
    goto LABEL_9;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v10 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(v12 + 8 * v10 + 32);
LABEL_9:
    v14 = objc_msgSend(v13, "endpoint");

    if (v14 == (id)2)
    {
      if (qword_10016A608 != -1)
        swift_once(&qword_10016A608, sub_10004913C);
      v15 = qword_100172318;
      v16 = type metadata accessor for DKViewControllerDelegateResponder();
      v17 = swift_dynamicCastClass(v15, v16);
      if (v17)
      {
        v18 = v17;
        swift_unknownObjectRetain(v15);
        v19 = sub_10003F8CC(16, 0);
        v20 = v18 + OBJC_IVAR____TtC11Diagnostics33DKViewControllerDelegateResponder__presentationTransitionStyle;
        *(_QWORD *)v20 = v19;
        *(_BYTE *)(v20 + 8) = v21 & 1;
        v22 = sub_10003F8CC(16, 0);
        v23 = v18 + OBJC_IVAR____TtC11Diagnostics33DKViewControllerDelegateResponder__dismissalTransitionStyle;
        *(_QWORD *)v23 = v22;
        *(_BYTE *)(v23 + 8) = v24 & 1;
        swift_unknownObjectRelease(v15);
      }
    }
    v2(v14);
    v25 = swift_allocObject(&unk_10013BA88, 24, 7);
    *(_QWORD *)(v25 + 16) = v1;
    v26 = v1;
    sub_10007070C((uint64_t)v14, (void (*)(uint64_t, id))sub_1000D1B8C);
    sub_100035D74((uint64_t)v2, v3);
    swift_release(v25);
    return;
  }
  __break(1u);
LABEL_39:
  swift_once(&qword_10016A658, sub_10006E428);
LABEL_20:
  v44 = (char *)qword_100172360;
  v45 = OBJC_IVAR____TtC11Diagnostics12SuiteManager_deviceState;
  objc_msgSend(*(id *)(qword_100172360 + OBJC_IVAR____TtC11Diagnostics12SuiteManager_deviceState), "resetState");
  v46 = *(void **)&v44[v45];
  if (v46)
    objc_msgSend(v46, "setPhase:", 0);
  objc_sync_enter(v44);
  v47 = *(void **)&v44[v45];
  if (v47)
  {
    v48 = objc_msgSend(v47, "serialNumber");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    sub_1000A20FC(v49, (uint64_t)v51);
    swift_bridgeObjectRelease(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    v59 = static os_log_type_t.error.getter(0);
    v60 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
    v61 = (void *)static OS_os_log.default.getter(v60);
    os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v61, "Unable to start suite manager, serial number is not available", 61, 2, &_swiftEmptyArrayStorage);

  }
  objc_sync_exit(v44);
  sub_100035D74((uint64_t)v2, v3);

}

uint64_t sub_1000D1B68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D1B8C(char a1, void *a2)
{
  uint64_t v2;

  sub_1000D0C74(a1, a2, *(char **)(v2 + 16));
}

void sub_1000D1B94()
{
  uint64_t v0;

  sub_1000D0FAC(*(char **)(v0 + 16));
}

uint64_t sub_1000D1B9C()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D1BD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D1BFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D1C0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000D1C58()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v0, "setDateStyle:", 2);
  result = objc_msgSend(v0, "setTimeStyle:", 1);
  qword_10016E000 = (uint64_t)v0;
  return result;
}

void sub_1000D1CB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  NSURL *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSURLResourceKey v13;
  NSString *v14;
  Class isa;
  SEL v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  NSURL *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSURLResourceKey v33;
  NSString *v34;
  Class v35;
  SEL v36;
  id v37;
  int v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  const char *v47;
  void *v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  const char *v55;
  void *v56;
  int v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  SEL v65;
  id v66;
  int v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  int v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  DARootViewController *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  NSURLResourceKey v91;
  NSURLResourceKey v92;
  id v93;
  __int128 v94;
  id v95;

  v4 = sub_100035CA4((uint64_t *)&unk_10016B680);
  __chkstk_darwin(v4);
  v89 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v90 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
  v87 = a1;
  v88 = v7;
  v7(a2, a1, v6);
  v92 = NSURLIsDirectoryKey;
  v91 = NSURLIsRegularFileKey;
  v8 = (NSURL *)"teractionAnimating>\"24";
  v94 = xmmword_10010BE30;
  while (1)
  {
    URL._bridgeToObjectiveC()(v8);
    v10 = v9;
    v11 = sub_100035CA4((uint64_t *)&unk_10016C1A0);
    v12 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v12 + 16) = v94;
    v13 = v92;
    *(_QWORD *)(v12 + 32) = v92;
    type metadata accessor for URLResourceKey(0);
    v14 = v13;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((DARootViewController *)v12, v16, v17, v18, v19, v20, v21, v22);
    v95 = 0;
    v23 = v93;
    v24 = objc_msgSend(v93, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v10, isa, 4, &v95);

    v25 = v95;
    if (!v24)
    {
      v28 = a2;
      v72 = v95;
LABEL_13:
      v80 = v87;
      v81 = _convertNSErrorToError(_:)(v72);

      swift_willThrow();
      v82 = sub_10008C0F8();
      v83 = (void *)static OS_os_log.default.getter(v82);
      v84 = static os_log_type_t.default.getter(v83);
      os_log(_:dso:log:type:_:)("Error retrieving fileCount, aborting skipSingleItem", 51, 2, &_mh_execute_header, v83, v84, &_swiftEmptyArrayStorage);

      swift_errorRelease(v81);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v28, v6);
      v88(v28, v80, v6);
      return;
    }
    v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v6);
    v27 = v25;

    v28 = a2;
    URL._bridgeToObjectiveC()(v29);
    v31 = v30;
    v32 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v32 + 16) = v94;
    v33 = v91;
    *(_QWORD *)(v32 + 32) = v91;
    v34 = v33;
    v35 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((DARootViewController *)v32, v36, v37, v38, v39, v40, v41, v42);
    v95 = 0;
    v43 = objc_msgSend(v23, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v31, v35, 4, &v95);

    v44 = v95;
    if (!v43)
    {
      v72 = v95;
      swift_bridgeObjectRelease((DARootViewController *)v26, v73, v74, v75, v76, v77, v78, v79);
      goto LABEL_13;
    }
    v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, v6);
    v46 = v44;

    if (*(_QWORD *)(v26 + 16) != 1)
    {
      swift_bridgeObjectRelease((DARootViewController *)v26, v47, v48, v49, v50, v51, v52, v53);
      v85 = (DARootViewController *)v45;
LABEL_16:
      swift_bridgeObjectRelease(v85, v55, v56, v57, v58, v59, v60, v61);
      return;
    }
    v54 = *(_QWORD *)(v45 + 16);
    swift_bridgeObjectRelease((DARootViewController *)v45, v47, v48, v49, v50, v51, v52, v53);
    if (v54)
    {
      v85 = (DARootViewController *)v26;
      goto LABEL_16;
    }
    if (*(_QWORD *)(v26 + 16))
    {
      v63 = (uint64_t)v89;
      v62 = v90;
      v88((uint64_t)v89, v26 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80)), v6);
      v64 = 0;
    }
    else
    {
      v64 = 1;
      v63 = (uint64_t)v89;
      v62 = v90;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v6);
    swift_bridgeObjectRelease((DARootViewController *)v26, v65, v66, v67, v68, v69, v70, v71);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v6) == 1)
      break;
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(a2, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(a2, v63, v6);
  }
  sub_10006E290(v63);
}

Swift::Void __swiftcall QLPreviewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  objc_super v1;

  v1.super_class = (Class)QLPreviewController;
  objc_msgSendSuper2(&v1, "viewWillDisappear:", a1);
  sub_1000D215C();
}

uint64_t sub_1000D215C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  void (*v10)(char *, uint64_t);
  id v11;
  DARootViewController *v12;
  DARootViewController *v13;
  NSString v14;
  SEL v15;
  id v16;
  int v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSURL *v23;
  void *v24;
  void *v25;
  unsigned int v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  id v40;
  uint64_t v41;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)v39 - v5;
  v7 = (void *)objc_opt_self(NSFileManager);
  v8 = objc_msgSend(v7, "defaultManager");
  v9 = objc_msgSend(v8, "temporaryDirectory");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);
  URL.appendingPathComponent(_:)(0x2E746E65736E6F63, 0xEB00000000666470);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v11 = objc_msgSend(v7, "defaultManager");
  URL.path.getter(v11);
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13, v15, v16, v17, v18, v19, v20, v21);
  LODWORD(v13) = objc_msgSend(v11, "fileExistsAtPath:", v14);

  if ((_DWORD)v13)
  {
    v22 = objc_msgSend(v7, "defaultManager");
    URL._bridgeToObjectiveC()(v23);
    v25 = v24;
    v40 = 0;
    v26 = objc_msgSend(v22, "removeItemAtURL:error:", v24, &v40);

    v27 = v40;
    if (v26)
    {
      v28 = v40;
    }
    else
    {
      v29 = v40;
      v30 = _convertNSErrorToError(_:)(v27);

      swift_willThrow();
      sub_10008C0F8();
      swift_errorRetain(v30);
      v31 = swift_errorRetain(v30);
      v32 = static OS_os_log.default.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v39[0] = swift_slowAlloc(8, -1);
        *(_DWORD *)v34 = 138412290;
        swift_errorRetain(v30);
        v35 = (void *)_swift_stdlib_bridgeErrorToNSError(v30);
        v40 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
        v36 = v39[0];
        *(_QWORD *)v39[0] = v35;
        swift_errorRelease(v30);
        swift_errorRelease(v30);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removing temporary file failed: %@", v34, 0xCu);
        v37 = sub_100035CA4((uint64_t *)&unk_10016E010);
        swift_arrayDestroy(v36, 1, v37);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v34, -1, -1);

        swift_errorRelease(v30);
      }
      else
      {
        swift_errorRelease(v30);
        swift_errorRelease(v30);
        swift_errorRelease(v30);

      }
    }
  }
  return ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
}

uint64_t storeEnumTagSinglePayload for DashboardSection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D251C + 4 * byte_10010EAE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D2550 + 4 * asc_10010EAE0[v4]))();
}

uint64_t sub_1000D2550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D2560);
  return result;
}

uint64_t sub_1000D256C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D2574);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D2578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DashboardSection()
{
  return &type metadata for DashboardSection;
}

uint64_t *sub_1000D259C@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

unint64_t sub_1000D25B8()
{
  unint64_t result;

  result = qword_10016E020;
  if (!qword_10016E020)
  {
    result = swift_getWitnessTable(&unk_10010EB8C, &type metadata for DashboardSection);
    atomic_store(result, (unint64_t *)&qword_10016E020);
  }
  return result;
}

uint64_t sub_1000D25FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_1000D26B0(void *a1)
{
  char *v1;
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  id v20;
  char v21;
  id v22;
  char *v23;
  char *v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  id v28;
  void **aBlock;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  if (!a1)
    return;
  v2 = v1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint] = 0;
  v28 = a1;

  v4 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint] = 0;

  v5 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint] = 0;

  v6 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint] = 0;

  v7 = swift_allocObject(&unk_10013BDF8, 32, 7);
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v28;
  if (v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_animated] == 1)
  {
    v8 = swift_allocObject(&unk_10013BE20, 24, 7);
    *(_QWORD *)(v8 + 16) = v28;
    v9 = swift_allocObject(&unk_10013BE48, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_1000D3228;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = (void *)objc_opt_self(UIView);
    v33 = sub_10004F508;
    v34 = v8;
    aBlock = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_100030658;
    v32 = &unk_10013BE60;
    v11 = _Block_copy(&aBlock);
    v12 = v34;
    v13 = v28;
    v14 = v2;
    swift_retain(v7);
    swift_retain(v8);
    swift_release(v12);
    v33 = sub_1000370F8;
    v34 = v9;
    aBlock = _NSConcreteStackBlock;
    v30 = 1107296256;
    v31 = sub_1000D25FC;
    v32 = &unk_10013BE88;
    v15 = _Block_copy(&aBlock);
    v16 = v34;
    swift_retain(v9);
    swift_release(v16);
    objc_msgSend(v10, "animateWithDuration:delay:options:animations:completion:", 0x20000, v11, v15, 0.125, 0.0);
    _Block_release(v15);
    _Block_release(v11);
    swift_release(v8);
    swift_release(v9);
    swift_release(v7);

    return;
  }
  v17 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedView];
  if (v17)
  {
    sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
    v18 = v28;
    v19 = v1;
    v20 = v17;
    v21 = static NSObject.== infix(_:_:)(v20);

    if ((v21 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v22 = v28;
    v23 = v1;
  }
  objc_msgSend(v28, "removeFromSuperview");
LABEL_10:
  v24 = &v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion];
  v25 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion];
  if (v25)
  {
    v26 = *((_QWORD *)v24 + 1);
    v27 = swift_retain(v26);
    v25(v27);
    sub_100035D74((uint64_t)v25, v26);
  }
  swift_release(v7);

}

void sub_1000D29C0(uint64_t a1, id a2)
{
  void *v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;

  v4 = *(void **)(a1 + OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedView);
  if (!v4
    || (sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr),
        v5 = a2,
        v6 = v4,
        v7 = static NSObject.== infix(_:_:)(v6),
        v6,
        v5,
        (v7 & 1) == 0))
  {
    objc_msgSend(a2, "removeFromSuperview");
  }
  v8 = a1 + OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion;
  v9 = *(void (**)(uint64_t))(a1
                                      + OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = swift_retain(v10);
    v9(v11);
    sub_100035D74((uint64_t)v9, v10);
  }
}

void sub_1000D2A94()
{
  char *v0;
  void *v1;
  char *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  Class isa;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  _QWORD aBlock[5];
  uint64_t v46;

  v1 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedView];
  if (v1)
  {
    v2 = v0;
    v44 = v1;
    objc_msgSend(v0, "addSubview:", v44);
    v3 = objc_msgSend(v0, "topAnchor");
    v4 = objc_msgSend(v44, "topAnchor");
    v5 = objc_msgSend(v3, "constraintEqualToAnchor:", v4);

    v6 = OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint;
    v7 = *(void **)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint];
    *(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint] = v5;

    v8 = objc_msgSend(v2, "bottomAnchor");
    v9 = objc_msgSend(v44, "bottomAnchor");
    v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

    v11 = OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint;
    v12 = *(void **)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint];
    *(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint] = v10;

    v13 = objc_msgSend(v2, "leadingAnchor");
    v14 = objc_msgSend(v44, "leadingAnchor");
    v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

    v16 = OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint;
    v17 = *(void **)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint];
    *(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint] = v15;

    v18 = objc_msgSend(v2, "trailingAnchor");
    v19 = objc_msgSend(v44, "trailingAnchor");
    v20 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

    v21 = OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint;
    v22 = *(void **)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint];
    *(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint] = v20;

    v23 = *(void **)&v2[v6];
    if (v23)
    {
      v24 = *(void **)&v2[v11];
      if (v24)
      {
        v25 = *(void **)&v2[v16];
        if (v25)
        {
          v26 = *(void **)&v2[v21];
          if (v26)
          {
            v27 = (void *)objc_opt_self(NSLayoutConstraint);
            v28 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
            v29 = swift_allocObject(v28, 64, 7);
            *(_OWORD *)(v29 + 16) = xmmword_10010BF30;
            *(_QWORD *)(v29 + 32) = v23;
            *(_QWORD *)(v29 + 40) = v24;
            *(_QWORD *)(v29 + 48) = v25;
            *(_QWORD *)(v29 + 56) = v26;
            aBlock[0] = v29;
            specialized Array._endMutation()(v29);
            sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
            v30 = v23;
            v31 = v24;
            v32 = v25;
            v33 = v26;
            v34 = v30;
            v35 = v31;
            v36 = v32;
            v37 = v33;
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(aBlock[0]);
            objc_msgSend(v27, "activateConstraints:", isa);

          }
        }
      }
    }
    if (v2[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_animated] == 1)
    {
      objc_msgSend(v44, "setAlpha:", 0.0);
      v39 = swift_allocObject(&unk_10013BDA8, 24, 7);
      *(_QWORD *)(v39 + 16) = v44;
      v40 = (void *)objc_opt_self(UIView);
      aBlock[4] = sub_10004F378;
      v46 = v39;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100030658;
      aBlock[3] = &unk_10013BDC0;
      v41 = _Block_copy(aBlock);
      v42 = v46;
      v43 = v44;
      swift_retain(v39);
      swift_release(v42);
      objc_msgSend(v40, "animateWithDuration:delay:options:animations:completion:", 0x10000, v41, 0, 0.375, 0.0);
      _Block_release(v41);
      objc_msgSend(v2, "layoutIfNeeded", swift_release(v39).n128_f64[0]);

    }
    else
    {

    }
  }
}

id sub_1000D2EDC(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  _QWORD *v9;
  objc_super v11;

  v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_animated] = 1;
  v9 = &v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion];
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedView] = 0;
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for CardStackSubviewContainer();
  return objc_msgSendSuper2(&v11, "initWithFrame:", a1, a2, a3, a4);
}

id sub_1000D2FB8(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  id v4;
  objc_super v6;

  v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_animated] = 1;
  v3 = &v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_topContainerConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_bottomContainerConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_leadingContainerConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_trailingContainerConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedView] = 0;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for CardStackSubviewContainer();
  v4 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);

  return v4;
}

void sub_1000D3084()
{
  uint64_t v0;

  sub_100035D74(*(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion), *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics25CardStackSubviewContainer_containedViewRemovedCompletion + 8));

}

id sub_1000D30F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardStackSubviewContainer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardStackSubviewContainer()
{
  return objc_opt_self(_TtC11Diagnostics25CardStackSubviewContainer);
}

uint64_t sub_1000D31C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D31E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D31F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000D31FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D3228()
{
  uint64_t v0;

  sub_1000D29C0(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_1000D3230()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

Class sub_1000D3268()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  Class isa;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSString v18;
  void *v19;
  id v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v23;
  DARootViewController *v24;
  DARootViewController *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  id v29;
  int v30;
  id v31;
  id v32;
  id v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  DARootViewController *v40;
  DARootViewController *v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  id v45;
  int v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  void *v54;
  int v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  UIMenuElementSize preferredElementSize;
  Swift::String v61;
  Class v62;
  uint64_t v64;
  uint64_t v65;
  SEL v66;
  id v67;
  int v68;
  id v69;
  id v70;
  id v71;
  id v72;
  Swift::OpaquePointer children;
  void *v74;
  UIImage_optional v75;
  UIImage_optional v76;
  UIAction_optional v77;
  UIMenu_optional v78;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 22.0);
  v3 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v4 = objc_msgSend(v3, "configurationWithFont:", v2);

  v5 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10010C080;
  v7 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(v6 + 32) = objc_msgSend(v7, "systemBlueColor");
  v8 = objc_msgSend(v7, "systemGray6Color");
  *(_QWORD *)(v6 + 40) = v8;
  specialized Array._endMutation()(v8);
  sub_100037118(0, (unint64_t *)&unk_10016E460, UIColor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v6, v10, v11, v12, v13, v14, v15, v16);
  v17 = objc_msgSend(v3, "configurationWithPaletteColors:", isa);

  v18 = String._bridgeToObjectiveC()();
  v19 = (void *)objc_opt_self(UIImage);
  v20 = objc_msgSend(v19, "systemImageNamed:withConfiguration:", v18, v17);

  v74 = v4;
  v21 = (objc_class *)objc_msgSend(v20, "imageByApplyingSymbolConfiguration:", v4);

  v22 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v22 + 16) = xmmword_10010C080;
  sub_100037118(0, (unint64_t *)&qword_10016DFF0, UIAction_ptr);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v25 = v24;
  v26 = sub_10003FFA0(v23, v24, (uint64_t)&_swiftEmptyArrayStorage, 0x5F4E4F4953534553, (void *)0xEF59524F54534948);
  v28 = v27;
  swift_bridgeObjectRelease(v25, v27, v29, v30, v31, v32, v33, v34);
  v35 = String._bridgeToObjectiveC()();
  v36 = objc_msgSend(v19, "systemImageNamed:", v35);

  v37 = swift_allocObject(&unk_10013BEC0, 24, 7);
  *(_QWORD *)(v37 + 16) = v1;
  v38 = v1;
  *(_QWORD *)(v22 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v26, v28, 0, 0, v36, 0, 0, 0, 0, 0, 0, sub_1000D3E34, v37);
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
  v41 = v40;
  v42 = sub_10003FFA0(v39, v40, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001FLL, (void *)0x8000000100115560);
  v44 = v43;
  swift_bridgeObjectRelease(v41, v43, v45, v46, v47, v48, v49, v50);
  v51 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v42, v44, 0, 0, 0, 0, 0, 0, 0, 2, 0, sub_1000D37F8, 0);
  *(_QWORD *)(v22 + 40) = v51;
  specialized Array._endMutation()(v51);
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v64 = v22;
    else
      v64 = v22 & 0xFFFFFFFFFFFFFF8;
    v65 = sub_100037118(0, &qword_10016E0B0, UIMenuElement_ptr);
    swift_bridgeObjectRetain(v22);
    preferredElementSize = _bridgeCocoaArray<A>(_:)(v64, v65);
    swift_bridgeObjectRelease((DARootViewController *)v22, v66, v67, v68, v69, v70, v71, v72);
  }
  else
  {
    v52 = swift_bridgeObjectRetain(v22);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v52);
    sub_100037118(0, &qword_10016E0B0, UIMenuElement_ptr);
    preferredElementSize = v22;
  }
  swift_bridgeObjectRelease((DARootViewController *)v22, v53, v54, v55, v56, v57, v58, v59);
  sub_100037118(0, &qword_10016C620, UIBarButtonItem_ptr);
  sub_100037118(0, &qword_10016E0B8, UIMenu_ptr);
  v61._countAndFlagsBits = 0;
  v61._object = (void *)0xE000000000000000;
  v76.value.super.isa = 0;
  v76.is_nil = 0;
  v77.value.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v61, (Swift::String_optional)0, v76, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, children).super.super.isa;
  v75.value.super.isa = v21;
  v75.is_nil = 0;
  v62 = UIBarButtonItem.init(title:image:primaryAction:menu:)((Swift::String_optional)0, v75, v77, v78).super.super.isa;

  return v62;
}

void sub_1000D3730(int a1, id a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v2 = objc_msgSend(a2, "navigationController");
  if (v2)
  {
    v3 = v2;
    if (qword_10016A658 != -1)
      swift_once(&qword_10016A658, sub_10006E428);
    v4 = (void *)qword_100172360;
    v5 = objc_allocWithZone((Class)type metadata accessor for SelfServiceSessionHistoryViewController());
    v6 = sub_1000433C4(v4);
    objc_msgSend(v3, "pushViewController:animated:", v6, 1);

  }
}

uint64_t sub_1000D37F8()
{
  id v0;
  unsigned int v1;
  void (*v2)();

  v0 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v1 = objc_msgSend(v0, "isCheckerBoardActive");
  swift_unknownObjectRelease(v0);
  if (v1)
    v2 = sub_100072264;
  else
    v2 = sub_1000D38B4;
  sub_100035C4C((uint64_t)v2, 0);
  sub_100066B64(1);
  sub_100035D74((uint64_t)v2, 0);
  return sub_100035D74((uint64_t)v2, 0);
}

void sub_1000D38B4()
{
  void *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _BYTE *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v12[5];
  uint64_t v13;

  if (qword_10016A5F0 != -1)
    swift_once(&qword_10016A5F0, sub_100044F78);
  v0 = (void *)qword_1001722E8;
  v1 = *(NSObject **)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_disableSystemGesturesQueue);
  v2 = swift_allocObject(&unk_10013BEE8, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject(&unk_10013BF10, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000740B0;
  *(_QWORD *)(v3 + 24) = v2;
  v12[4] = sub_10003CDD4;
  v13 = v3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100048E58;
  v12[3] = &unk_10013BF28;
  v4 = _Block_copy(v12);
  v5 = v13;
  v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 88, 147, 46, 1);
  swift_release(v2);
  swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = (_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingAssertionEnabled);
    *(_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingAssertionEnabled) = (*(_BYTE *)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_nearbySharingPreferencesState) & 1) == 0;
    v8 = sub_100046588();
    objc_msgSend(v8, "setNearbySharingEnabled:", (*v7 & 1) == 0);

    v9 = qword_1001722E8;
    v10 = sub_100046588();
    objc_msgSend(v10, "setDiscoverableMode:", *(_QWORD *)(v9 + OBJC_IVAR____TtC11Diagnostics10Assertions_airDropUserSetting));

    v11 = *(void **)(qword_1001722E8 + OBJC_IVAR____TtC11Diagnostics10Assertions_captureButtonAssertion);
    if (v11)
      objc_msgSend(v11, "invalidate");
  }
}

id sub_1000D3B44(uint64_t a1, DARootViewController *a2, uint64_t a3, DARootViewController *a4, uint64_t a5, DARootViewController *a6, uint64_t a7)
{
  void *v7;
  NSString v12;
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSString v20;
  SEL v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSString v28;
  SEL v29;
  id v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  objc_super v38;

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2, v13, v14, v15, v16, v17, v18, v19);
  if (!a4)
  {
    v20 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v28 = 0;
    goto LABEL_6;
  }
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4, v21, v22, v23, v24, v25, v26, v27);
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6, v29, v30, v31, v32, v33, v34, v35);
LABEL_6:
  v38.receiver = v7;
  v38.super_class = (Class)type metadata accessor for SelfServiceBaseNavigationController();
  v36 = objc_msgSendSuper2(&v38, "initWithTitle:detailText:symbolName:contentLayout:", v12, v20, v28, a7);

  return v36;
}

id sub_1000D3DC0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SelfServiceBaseNavigationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SelfServiceBaseNavigationController()
{
  return objc_opt_self(_TtC11Diagnostics35SelfServiceBaseNavigationController);
}

uint64_t sub_1000D3E10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D3E34(int a1)
{
  uint64_t v1;

  sub_1000D3730(a1, *(id *)(v1 + 16));
}

uint64_t sub_1000D3E3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D3E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D3E5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_1000D3E68@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_10004F138();
  EnvironmentValues.subscript.getter(&v4, &type metadata for WindowSizeKey, &type metadata for WindowSizeKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1000D3EB4(__int128 *a1)
{
  unint64_t v1;
  __int128 v3;

  v3 = *a1;
  v1 = sub_10004F138();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for WindowSizeKey, &type metadata for WindowSizeKey, v1);
}

id sub_1000D3EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  char *v10;
  char *v13;
  char *v14;
  char *v15;
  NSString v16;
  NSString v17;
  id v18;
  objc_super v20;

  *(_QWORD *)&v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_defaultTransitionDuration] = 0x3FC999999999999ALL;
  v13 = &v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_answer];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_onButtonPress];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_onDismiss];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_images] = a1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_instructions] = a2;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_style] = a3;
  *(_QWORD *)&v10[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_options] = a8;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  if (a7)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
  }
  else
  {
    v17 = 0;
  }
  v20.receiver = v10;
  v20.super_class = (Class)type metadata accessor for SelfServiceInstructionsViewController();
  v18 = objc_msgSendSuper2(&v20, "initWithTitle:detailText:icon:contentLayout:", v16, v17, a9, a10);

  return v18;
}

void sub_1000D4034()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  DARootViewController *v43;
  Class isa;
  SEL v45;
  id v46;
  int v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char **v57;
  void *v58;
  id v59;
  void *v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  DARootViewController *v72;
  SEL v73;
  id v74;
  int v75;
  id v76;
  id v77;
  id v78;
  id v79;
  NSString v80;
  SEL v81;
  id v82;
  int v83;
  id v84;
  id v85;
  id v86;
  id v87;
  _QWORD *v88;
  char *v89;
  void *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  const char *v100;
  DARootViewController *v101;
  id v102;
  int v103;
  id v104;
  id v105;
  id v106;
  id v107;
  SEL v108;
  id v109;
  int v110;
  id v111;
  id v112;
  id v113;
  id v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  os_log_type_t v118;
  uint64_t v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  const char *v125;
  DARootViewController *v126;
  id v127;
  int v128;
  id v129;
  id v130;
  id v131;
  id v132;
  SEL v133;
  id v134;
  int v135;
  id v136;
  id v137;
  id v138;
  id v139;
  SEL v140;
  id v141;
  int v142;
  id v143;
  id v144;
  id v145;
  id v146;
  DARootViewController *v147;
  void *v148;
  void *v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  objc_super v167;

  v1 = v0;
  v167.receiver = v0;
  v167.super_class = (Class)type metadata accessor for SelfServiceInstructionsViewController();
  objc_msgSendSuper2(&v167, "viewDidLoad");
  v2 = objc_msgSend(v0, "navigationItem");
  objc_msgSend(v2, "setHidesBackButton:", 1);

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_images];
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_instructions];
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_style];
  KeyPath = swift_getKeyPath(&unk_10010EC88);
  v165 = 0;
  v166 = 1;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v7 = sub_100035CA4(&qword_10016E128);
  State.init(wrappedValue:)(&v152, &v165, v7);
  v8 = v152;
  v9 = BYTE8(v152);
  v10 = v153;
  v11 = swift_getKeyPath(&unk_10010EC88);
  v150 = v1;
  v12 = objc_msgSend(v1, "view");
  if (!v12)
    goto LABEL_39;
  v13 = v12;
  objc_msgSend(v12, "bounds");
  v15 = v14;
  v17 = v16;

  v152 = xmmword_10010EC40;
  v153 = KeyPath;
  v154 = 0;
  v155 = 0;
  v156 = v8;
  v157 = v9;
  v158 = v10;
  v159 = v3;
  v160 = v4;
  v161 = v5;
  v162 = v11;
  v163 = v15;
  v164 = v17;
  v18 = objc_allocWithZone((Class)sub_100035CA4((uint64_t *)&unk_10016E130));
  v19 = (void *)UIHostingController.init(rootView:)(&v152);
  v20 = objc_msgSend(v19, "view");
  if (!v20)
  {

    return;
  }
  v149 = v19;
  v21 = v20;
  objc_msgSend(v20, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v22 = objc_msgSend(v1, "contentView");
  objc_msgSend(v22, "addSubview:", v21);

  v23 = (void *)objc_opt_self(NSLayoutConstraint);
  v24 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v25 = swift_allocObject(v24, 64, 7);
  *(_OWORD *)(v25 + 16) = xmmword_10010BF30;
  v26 = objc_msgSend(v21, "leadingAnchor");
  v27 = objc_msgSend(v1, "contentView");
  v28 = objc_msgSend(v27, "leadingAnchor");

  v29 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v28, 15.0);
  *(_QWORD *)(v25 + 32) = v29;
  v30 = objc_msgSend(v21, "trailingAnchor");
  v31 = objc_msgSend(v150, "contentView");
  v32 = objc_msgSend(v31, "trailingAnchor");

  v33 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v32, -15.0);
  *(_QWORD *)(v25 + 40) = v33;
  v34 = objc_msgSend(v21, "topAnchor");
  v35 = objc_msgSend(v150, "contentView");
  v36 = objc_msgSend(v35, "topAnchor");

  v37 = objc_msgSend(v34, "constraintEqualToAnchor:", v36);
  *(_QWORD *)(v25 + 48) = v37;
  v38 = objc_msgSend(v21, "bottomAnchor");
  v39 = objc_msgSend(v150, "contentView");
  v40 = objc_msgSend(v39, "bottomAnchor");

  v41 = objc_msgSend(v38, "constraintEqualToAnchor:", v40);
  *(_QWORD *)(v25 + 56) = v41;
  *(_QWORD *)&v152 = v25;
  specialized Array._endMutation()(v42);
  v43 = (DARootViewController *)v152;
  sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v43, v45, v46, v47, v48, v49, v50, v51);
  objc_msgSend(v23, "activateConstraints:", isa);

  v52 = *(_QWORD *)&v150[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_options];
  v53 = *(_QWORD *)(v52 + 16);
  if (!v53)
  {

    return;
  }
  v147 = *(DARootViewController **)&v150[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_options];
  v148 = v21;
  v151 = v52 + 32;
  swift_bridgeObjectRetain(v52);
  v54 = 0;
  while (1)
  {
    v55 = *(_QWORD *)(v151 + 8 * v54);
    v56 = OBBoldTrayButton_ptr;
    if (v54)
    {
      v56 = OBLinkTrayButton_ptr;
      v57 = &selRef_linkButton;
    }
    else
    {
      v57 = &selRef_boldButton;
    }
    v58 = (void *)objc_opt_self(*v56);
    v59 = objc_msgSend(v58, *v57, swift_bridgeObjectRetain(v55).n128_f64[0]);
    v60 = v59;
    if (*(_QWORD *)(v55 + 16) != 1)
    {
      v92 = static os_log_type_t.error.getter(v59);
      sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
      swift_bridgeObjectRetain(v55);
      v94 = static OS_os_log.default.getter(v93);
      v95 = v92;
      if (os_log_type_enabled(v94, v92))
      {
        v96 = swift_slowAlloc(12, -1);
        v97 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v152 = v97;
        *(_DWORD *)v96 = 136315138;
        v98 = swift_bridgeObjectRetain(v55);
        v99 = Dictionary.description.getter(v98);
        v101 = (DARootViewController *)v100;
        swift_bridgeObjectRelease((DARootViewController *)v55, v100, v102, v103, v104, v105, v106, v107);
        *(_QWORD *)(v96 + 4) = sub_10004711C(v99, (unint64_t)v101, (uint64_t *)&v152);
        swift_bridgeObjectRelease_n(v55, 2);
        swift_bridgeObjectRelease(v101, v108, v109, v110, v111, v112, v113, v114);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Bad options were provided to instructional prompt: %s, skipping", (uint8_t *)v96, 0xCu);
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v96, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v55, 2);
      }

      goto LABEL_7;
    }
    v61 = *(_QWORD *)(v55 + 64);
    v62 = *(_BYTE *)(v55 + 32);
    v63 = 1 << v62;
    if (v61)
    {
      v64 = 0;
      goto LABEL_14;
    }
    if ((v62 & 0x3Fu) >= 7)
      break;
LABEL_32:
    v118 = static os_log_type_t.error.getter(v59);
    sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
    swift_bridgeObjectRetain(v55);
    v91 = static OS_os_log.default.getter(v119);
    v120 = v118;
    if (os_log_type_enabled(v91, v118))
    {
      v121 = swift_slowAlloc(12, -1);
      v122 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v152 = v122;
      *(_DWORD *)v121 = 136315138;
      v123 = swift_bridgeObjectRetain(v55);
      v124 = Dictionary.description.getter(v123);
      v126 = (DARootViewController *)v125;
      swift_bridgeObjectRelease((DARootViewController *)v55, v125, v127, v128, v129, v130, v131, v132);
      *(_QWORD *)(v121 + 4) = sub_10004711C(v124, (unint64_t)v126, (uint64_t *)&v152);
      swift_bridgeObjectRelease_n(v55, 2);
      swift_bridgeObjectRelease(v126, v133, v134, v135, v136, v137, v138, v139);
      _os_log_impl((void *)&_mh_execute_header, v91, v120, "Unable to obtain the key-value pair from the option %s, skipping", (uint8_t *)v121, 0xCu);
      swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1, -1);
      swift_slowDealloc(v121, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v55, 2);
    }
LABEL_6:

LABEL_7:
    if (++v54 == v53)
    {

      swift_bridgeObjectRelease(v147, v140, v141, v142, v143, v144, v145, v146);
      return;
    }
  }
  v61 = *(_QWORD *)(v55 + 72);
  if (!v61)
  {
    v115 = 0;
    v116 = (unint64_t)(v63 + 63) >> 6;
    if (v116 <= 2)
      v116 = 2;
    v117 = v116 - 2;
    while (v117 != v115)
    {
      v61 = *(_QWORD *)(v55 + 80 + 8 * v115++);
      if (v61)
      {
        v64 = v115 + 1;
        goto LABEL_14;
      }
    }
    goto LABEL_32;
  }
  v64 = 1;
LABEL_14:
  v65 = __clz(__rbit64(v61));
  v66 = v65 + (v64 << 6);
  if (v66 == v63)
    goto LABEL_32;
  if ((v66 & 0x8000000000000000) == 0 && v66 < v63)
  {
    if (((*(_QWORD *)(v55 + 64 + (((unint64_t)v66 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
      goto LABEL_38;
    v67 = (uint64_t *)(*(_QWORD *)(v55 + 48) + 16 * v66);
    v69 = *v67;
    v68 = v67[1];
    v70 = (uint64_t *)(*(_QWORD *)(v55 + 56) + 16 * v66);
    v71 = *v70;
    v72 = (DARootViewController *)v70[1];
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain_n(v72, 2);
    swift_bridgeObjectRelease((DARootViewController *)v55, v73, v74, v75, v76, v77, v78, v79);
    v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v72, v81, v82, v83, v84, v85, v86, v87);
    objc_msgSend(v60, "setTitle:forState:", v80, 0);

    sub_100037118(0, (unint64_t *)&qword_10016DFF0, UIAction_ptr);
    v88 = (_QWORD *)swift_allocObject(&unk_10013BF60, 56, 7);
    v88[2] = v150;
    v88[3] = v69;
    v88[4] = v68;
    v88[5] = v71;
    v88[6] = v72;
    v89 = v150;
    v90 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1000D4F10, v88);
    objc_msgSend(v60, "addAction:forControlEvents:", v90, 64);

    v91 = objc_msgSend(v89, "buttonTray");
    -[NSObject addButton:](v91, "addButton:", v60);
    goto LABEL_6;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void sub_1000D4A38()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v1 = objc_msgSend(v0, "navigationController");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(objc_allocWithZone((Class)CATransition), "init");
    objc_msgSend(v3, "setDuration:", 0.2);
    v4 = (void *)objc_opt_self(CAMediaTimingFunction);
    v5 = v3;
    v6 = objc_msgSend(v4, "functionWithName:", kCAMediaTimingFunctionLinear);
    objc_msgSend(v5, "setTimingFunction:", v6);

    objc_msgSend(v5, "setType:", kCATransitionPush);
    objc_msgSend(v5, "setSubtype:", kCATransitionFromRight);
    v7 = objc_msgSend(v2, "view");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "layer");

      objc_msgSend(v9, "addAnimation:forKey:", v5, kCATransition);
      v10 = objc_msgSend(v2, "popViewControllerAnimated:", 0);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000D4BEC(char a1)
{
  char *v1;
  char *v2;
  DARootViewController *v4;
  void (*v5)(uint64_t, DARootViewController *);
  uint64_t v6;
  uint64_t v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  objc_super v19;

  v2 = v1;
  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for SelfServiceInstructionsViewController();
  objc_msgSendSuper2(&v19, "viewDidDisappear:", a1 & 1);
  v4 = *(DARootViewController **)&v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_answer + 8];
  if (v4)
  {
    v5 = *(void (**)(uint64_t, DARootViewController *))&v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_onButtonPress];
    if (v5)
    {
      v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_answer];
      v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_onButtonPress + 8];
      swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_answer
                                            + 8]);
      sub_100035C4C((uint64_t)v5, v7);
      v5(v6, v4);
      sub_100035D74((uint64_t)v5, v7);
      swift_bridgeObjectRelease(v4, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  v15 = &v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_onDismiss];
  v16 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_onDismiss];
  if (v16)
  {
    v17 = *((_QWORD *)v15 + 1);
    v18 = swift_retain(v17);
    v16(v18);
    sub_100035D74((uint64_t)v16, v17);
  }
}

id sub_1000D4D74()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SelfServiceInstructionsViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SelfServiceInstructionsViewController()
{
  return objc_opt_self(_TtC11Diagnostics37SelfServiceInstructionsViewController);
}

double sub_1000D4E48@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_10004F138();
  EnvironmentValues.subscript.getter(&v4, &type metadata for WindowSizeKey, &type metadata for WindowSizeKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_1000D4E94(__int128 *a1)
{
  unint64_t v1;
  __int128 v3;

  v3 = *a1;
  v1 = sub_10004F138();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for WindowSizeKey, &type metadata for WindowSizeKey, v1);
}

uint64_t sub_1000D4EDC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000D4F10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  DARootViewController *v4;
  SEL v5;
  id v6;
  int v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v1 = v0[3];
  v2 = v0[4];
  v3 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC11Diagnostics37SelfServiceInstructionsViewController_answer);
  v4 = (DARootViewController *)v3[1];
  *v3 = v1;
  v3[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRelease(v4, v5, v6, v7, v8, v9, v10, v11);
  sub_1000D4A38();
}

id sub_1000D4F7C()
{
  char *v0;
  void *v1;
  uint64_t v2;
  char **v3;
  DARootViewController *v4;
  DARootViewController *v5;
  NSString v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  DARootViewController *v15;
  DARootViewController *v16;
  uint64_t v17;
  char *v18;
  NSString v19;
  SEL v20;
  id v21;
  int v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id result;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t ObjCClassFromMetadata;
  NSString v48;
  void *v49;
  id v50;
  DARootViewController *v51;
  DARootViewController *v52;
  NSString v53;
  SEL v54;
  id v55;
  int v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  __CFString *v64;
  id v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  SEL v75;
  id v76;
  int v77;
  id v78;
  id v79;
  id v80;
  id v81;
  _QWORD aBlock[3];
  void *v83;
  void (*v84)(uint64_t);
  uint64_t v85;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries];
  if (!((unint64_t)v2 >> 62))
  {
    v3 = &selRef_defaultMetrics;
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v2 < 0)
    v73 = v2;
  else
    v73 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v74 = _CocoaArrayWrapper.endIndex.getter(v73);
  swift_bridgeObjectRelease((DARootViewController *)v2, v75, v76, v77, v78, v79, v80, v81);
  v3 = &selRef_defaultMetrics;
  if (v74)
  {
LABEL_3:
    sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0x59524F54534948, (void *)0xE700000000000000);
    v5 = v4;
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
    objc_msgSend(v1, v3[110], v6);

  }
LABEL_4:
  v14 = objc_msgSend(v1, "navigationItem");
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 1162760004, (void *)0xE400000000000000);
  v16 = v15;
  v17 = type metadata accessor for HistoryTableViewController();
  v83 = (void *)v17;
  aBlock[0] = v1;
  v18 = v1;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16, v20, v21, v22, v23, v24, v25, v26);
  if (v17)
  {
    v27 = sub_10003CEC8(aBlock, v17);
    v28 = *(_QWORD *)(v17 - 8);
    __chkstk_darwin(v27);
    v30 = (char *)aBlock - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v28 + 16))(v30);
    v31 = _bridgeAnythingToObjectiveC<A>(_:)(v30, v17);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v17);
    sub_10003CEEC(aBlock);
  }
  else
  {
    v31 = 0;
  }
  v32 = objc_allocWithZone((Class)UIBarButtonItem);
  v33 = objc_msgSend(v32, "initWithTitle:style:target:action:", v19, 2, v31, "donePressed", aBlock[0]);

  swift_unknownObjectRelease(v31);
  objc_msgSend(v14, "setRightBarButtonItem:", v33);

  v34 = objc_msgSend(v18, "navigationController");
  if (v34)
  {
    v35 = v34;
    v36 = objc_msgSend(v34, "navigationBar");

    objc_msgSend(v36, "setPrefersLargeTitles:", 1);
  }
  result = objc_msgSend(v18, "view");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v38 = result;
  v39 = (void *)objc_opt_self(UIView);
  v40 = objc_msgSend(v38, "semanticContentAttribute");

  v41 = objc_msgSend(v39, "userInterfaceLayoutDirectionForSemanticContentAttribute:", v40);
  v42 = objc_msgSend(v18, "navigationController");
  v43 = v42;
  if (v41)
  {
    if (v42)
    {
      v44 = objc_msgSend(v42, "navigationBar");

      objc_msgSend(v44, "setLayoutMargins:", 0.0, 0.0, 0.0, 14.0);
LABEL_15:

    }
  }
  else if (v42)
  {
    v44 = objc_msgSend(v42, "navigationBar");

    objc_msgSend(v44, "setLayoutMargins:", 0.0, 14.0, 0.0, 0.0);
    goto LABEL_15;
  }
  v45 = *(void **)&v18[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView];
  objc_msgSend(v45, "setDelegate:", v18);
  objc_msgSend(v45, "setDataSource:", v18);
  objc_msgSend(v45, "setAllowsSelection:", 0);
  objc_msgSend(v45, "setEstimatedRowHeight:", 60.0);
  objc_msgSend(v45, "setSeparatorInset:", 0.0, 15.0, 0.0, 0.0);
  objc_msgSend(v45, "setRowHeight:", UITableViewAutomaticDimension);
  v46 = type metadata accessor for HistoryTableViewCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v46);
  v48 = String._bridgeToObjectiveC()();
  objc_msgSend(v45, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v48);

  objc_msgSend(v45, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v49 = *(void **)&v18[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView];
  objc_msgSend(v45, "bounds");
  objc_msgSend(v49, "setFrame:");
  v50 = objc_msgSend(v45, "backgroundColor");
  objc_msgSend(v49, "setBackgroundColor:", v50);

  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0x4F545349485F4F4ELL, (void *)0xEA00000000005952);
  v52 = v51;
  v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52, v54, v55, v56, v57, v58, v59, v60);
  objc_msgSend(v49, v3[110], v53);

  if (*(uint64_t *)&v18[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntriesRendered] >= 1)
    objc_msgSend(v49, "setAlpha:", 0.0);
  objc_msgSend(v49, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v61 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v62 = *(void **)(*(_QWORD *)&v18[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_state] + 40);
  v63 = (void *)objc_opt_self(NSOperationQueue);
  v64 = CFSTR("com.apple.Diagnostics.deviceStateChangedNotification");
  v65 = v62;
  v66 = objc_msgSend(v63, "mainQueue");
  v67 = swift_allocObject(&unk_10013BF88, 24, 7);
  *(_QWORD *)(v67 + 16) = v18;
  v84 = sub_1000D6D00;
  v85 = v67;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100048DB4;
  v83 = &unk_10013BFA0;
  v68 = _Block_copy(aBlock);
  v69 = v85;
  v70 = v18;
  v71 = objc_msgSend(v61, "addObserverForName:object:queue:usingBlock:", v64, v65, v66, v68, swift_release(v69).n128_f64[0]);
  _Block_release(v68);

  v72 = *(_QWORD *)&v70[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver];
  *(_QWORD *)&v70[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver] = v71;
  return (id)swift_unknownObjectRelease(v72);
}

void sub_1000D5634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  DARootViewController *v20;
  SEL v21;
  id v22;
  int v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28[2];
  _BYTE v29[40];
  __int128 v30;
  __int128 v31;

  v3 = Notification.userInfo.getter(a1);
  if (v3)
  {
    v4 = v3;
    v28[0] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("info"));
    v28[1] = v5;
    AnyHashable.init<A>(_:)(v28, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v4 + 16) && (v13 = sub_100072B10((uint64_t)v29), (v6 & 1) != 0))
    {
      sub_1000370B0(*(_QWORD *)(v4 + 56) + 32 * v13, (uint64_t)&v30);
    }
    else
    {
      v30 = 0u;
      v31 = 0u;
    }
    swift_bridgeObjectRelease((DARootViewController *)v4, v6, v7, v8, v9, v10, v11, v12);
    sub_100036FDC((uint64_t)v29);
    if (*((_QWORD *)&v31 + 1))
    {
      v14 = sub_100037118(0, &qword_10016BA10, off_100131A98);
      if ((swift_dynamicCast(v28, &v30, (char *)&type metadata for Any + 8, v14, 6) & 1) != 0)
      {
        v15 = v28[0];
        if ((objc_msgSend(v28[0], "changedProperties") & 0x20) != 0)
        {
          v16 = objc_msgSend(v15, "snapshot");
          v17 = objc_msgSend(v16, "history");

          v18 = sub_100037118(0, &qword_10016E1A0, &off_100131AA0);
          v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

          v20 = *(DARootViewController **)(a2 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries);
          *(_QWORD *)(a2 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries) = v19;
          swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
          sub_1000D6440();
        }

      }
    }
    else
    {
      sub_1000522EC((uint64_t)&v30);
    }
  }
}

void sub_1000D57CC()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView]);

    v3 = objc_msgSend(v0, "view");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000D586C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  SEL v47;
  id v48;
  int v49;
  id v50;
  id v51;
  id v52;
  id v53;
  Class isa;

  v1 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v2 = swift_allocObject(v1, 96, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10010CED0;
  v3 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView];
  v4 = objc_msgSend(v3, "topAnchor");
  v5 = objc_msgSend(v0, "view");
  if (!v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "topAnchor");

  v8 = objc_msgSend(v4, "constraintEqualToAnchor:", v7);
  *(_QWORD *)(v2 + 32) = v8;
  v9 = objc_msgSend(v3, "bottomAnchor");
  v10 = objc_msgSend(v0, "view");
  if (!v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v11 = v10;
  v12 = objc_msgSend(v10, "bottomAnchor");

  v13 = objc_msgSend(v9, "constraintEqualToAnchor:", v12);
  *(_QWORD *)(v2 + 40) = v13;
  v14 = objc_msgSend(v3, "leadingAnchor");
  v15 = objc_msgSend(v0, "view");
  if (!v15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "leadingAnchor");

  v18 = objc_msgSend(v14, "constraintEqualToAnchor:", v17);
  *(_QWORD *)(v2 + 48) = v18;
  v19 = objc_msgSend(v3, "trailingAnchor");
  v20 = objc_msgSend(v0, "view");
  if (!v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "trailingAnchor");

  v23 = objc_msgSend(v19, "constraintEqualToAnchor:", v22);
  *(_QWORD *)(v2 + 56) = v23;
  v24 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView];
  v25 = objc_msgSend(v24, "topAnchor");
  v26 = objc_msgSend(v0, "view");
  if (!v26)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "topAnchor");

  v29 = objc_msgSend(v25, "constraintEqualToAnchor:", v28);
  *(_QWORD *)(v2 + 64) = v29;
  v30 = objc_msgSend(v24, "bottomAnchor");
  v31 = objc_msgSend(v0, "view");
  if (!v31)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v32 = v31;
  v33 = objc_msgSend(v31, "bottomAnchor");

  v34 = objc_msgSend(v30, "constraintEqualToAnchor:", v33);
  *(_QWORD *)(v2 + 72) = v34;
  v35 = objc_msgSend(v24, "leadingAnchor");
  v36 = objc_msgSend(v0, "view");
  if (!v36)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, "leadingAnchor");

  v39 = objc_msgSend(v35, "constraintEqualToAnchor:", v38);
  *(_QWORD *)(v2 + 80) = v39;
  v40 = objc_msgSend(v24, "trailingAnchor");
  v41 = objc_msgSend(v0, "view");
  if (v41)
  {
    v42 = v41;
    v43 = (void *)objc_opt_self(NSLayoutConstraint);
    v44 = objc_msgSend(v42, "trailingAnchor");

    v45 = objc_msgSend(v40, "constraintEqualToAnchor:", v44);
    *(_QWORD *)(v2 + 88) = v45;
    specialized Array._endMutation()(v46);
    sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((DARootViewController *)v2, v47, v48, v49, v50, v51, v52, v53);
    objc_msgSend(v43, "activateConstraints:", isa);

    return;
  }
LABEL_17:
  __break(1u);
}

id sub_1000D5D38(char a1)
{
  char *v1;
  id result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  objc_super v9;

  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for HistoryTableViewController();
  result = objc_msgSendSuper2(&v9, "viewWillDisappear:", a1 & 1);
  v4 = OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver;
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver];
  if (v5)
  {
    v6 = (void *)objc_opt_self(NSNotificationCenter);
    swift_unknownObjectRetain(v5);
    v7 = objc_msgSend(v6, "defaultCenter");
    objc_msgSend(v7, "removeObserver:", v5);

    v8 = *(_QWORD *)&v1[v4];
    *(_QWORD *)&v1[v4] = 0;
    swift_unknownObjectRelease(v5);
    return (id)swift_unknownObjectRelease(v8);
  }
  return result;
}

void sub_1000D5E48(void *a1, DARootViewController *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  double v27;
  double v28;
  double v29;
  id v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  DARootViewController *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  DARootViewController *v45;
  id v46;
  int v47;
  id v48;
  id v49;
  id v50;
  id v51;
  NSString v52;
  SEL v53;
  id v54;
  int v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  Class isa;
  NSString v68;
  DARootViewController *v69;
  DARootViewController *v70;
  SEL v71;
  id v72;
  int v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  SEL v83;
  id v84;
  int v85;
  id v86;
  id v87;
  id v88;
  id v89;
  SEL v90;
  id v91;
  int v92;
  id v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:", v10);

  if (!v11)
    goto LABEL_15;
  v12 = type metadata accessor for HistoryTableViewCell();
  v13 = swift_dynamicCastClass(v11, v12);
  if (!v13)
    goto LABEL_14;
  v14 = (char *)v13;
  v15 = OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries;
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries);
  if ((unint64_t)v16 >> 62)
  {
    v82 = v16 < 0
        ? *(_QWORD *)(v3 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries)
        : v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries));
    v17 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease((DARootViewController *)v16, v83, v84, v85, v86, v87, v88, v89);
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = IndexPath.row.getter(v13);
  if (v18 >= v17)
  {
LABEL_14:

LABEL_15:
    objc_msgSend(objc_allocWithZone((Class)UITableViewCell), "init");
    return;
  }
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntriesRendered);
  v20 = v19 - 1;
  if (__OFSUB__(v19, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  v21 = IndexPath.row.getter(v18);
  v22 = __OFSUB__(v20, v21);
  v20 -= v21;
  if (v22)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  a2 = *(DARootViewController **)(v3 + v15);
  if (((unint64_t)a2 & 0xC000000000000001) == 0)
  {
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v20 < *(_QWORD *)(((unint64_t)a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v23 = *(id *)&a2->remoteCardFilter[8 * v20 + 16];
      goto LABEL_12;
    }
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_28:
  swift_bridgeObjectRetain(a2);
  v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, a2);
  swift_bridgeObjectRelease(a2, v90, v91, v92, v93, v94, v95, v96);
LABEL_12:
  v24 = OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel;
  v25 = *(void **)(v3 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView);
  v26 = *(id *)&v14[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_suiteLabel];
  objc_msgSend(v25, "bounds");
  v28 = v27;
  objc_msgSend(v14, "separatorInset");
  objc_msgSend(v26, "setPreferredMaxLayoutWidth:", v28 - (v29 + v29));

  v30 = *(id *)&v14[v24];
  v31 = objc_msgSend(v23, "skipped");
  v98 = v7;
  if (v31)
  {
    v32 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_10010BE30;
    v34 = objc_msgSend(v23, "testSuiteName");
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_100047048();
    *(_QWORD *)(v33 + 32) = v35;
    *(_QWORD *)(v33 + 40) = v37;
    v38 = (DARootViewController *)v33;
    v39 = 0x5F44455050494B53;
    v40 = (void *)0xED00004554495553;
  }
  else
  {
    v41 = objc_msgSend(v23, "testSuiteName");
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v33 = v43;

    v38 = &_swiftEmptyArrayStorage;
    v39 = v42;
    v40 = (void *)v33;
  }
  sub_10003FFA0(0, 0, (uint64_t)v38, v39, v40);
  v45 = (DARootViewController *)v44;
  swift_bridgeObjectRelease((DARootViewController *)v33, v44, v46, v47, v48, v49, v50, v51);
  v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45, v53, v54, v55, v56, v57, v58, v59);
  objc_msgSend(v30, "setText:", v52);

  v60 = *(void **)&v14[OBJC_IVAR____TtC11Diagnostics20HistoryTableViewCell_dateLabel];
  v61 = (void *)objc_opt_self(DSDateFormatter);
  v62 = v60;
  v63 = objc_msgSend(v61, "sharedFormatter");
  if (!v63)
    goto LABEL_31;
  v64 = v63;
  v65 = objc_msgSend(v63, "formatterWithType:", 6);

  if (!v65)
  {
LABEL_32:
    __break(1u);
    return;
  }
  v66 = objc_msgSend(v23, "date");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v66);

  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v98 + 8))(v9, v6);
  v68 = objc_msgSend(v65, "stringFromDate:", isa);

  if (!v68)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v70 = v69;
    v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v70, v71, v72, v73, v74, v75, v76, v77);
  }
  objc_msgSend(v62, "setText:", v68);

  v78 = (void *)objc_opt_self(UIColor);
  v79 = v11;
  v80 = objc_msgSend(v78, "clearColor");
  objc_msgSend(v14, "setBackgroundColor:", v80);

  v81 = v79;
  objc_msgSend(v14, "setSelectionStyle:", 0);

}

void sub_1000D6440()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  Class isa;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  double v39;
  DARootViewController *v40;
  DARootViewController *v41;
  NSString v42;
  SEL v43;
  id v44;
  int v45;
  id v46;
  id v47;
  id v48;
  id v49;
  double v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  SEL v58;
  id v59;
  int v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  SEL v67;
  id v68;
  int v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  SEL v77;
  id v78;
  int v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  SEL v87;
  id v88;
  int v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  void **aBlock;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  void *v99;
  id (*v100)();
  uint64_t v101;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v5 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntriesRendered;
  v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntriesRendered];
  v8 = OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries;
  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries];
  if ((unint64_t)v9 >> 62)
  {
LABEL_32:
    if (v9 < 0)
      v56 = v9;
    else
      v56 = v9 & 0xFFFFFFFFFFFFFF8;
    v57 = v6;
    swift_bridgeObjectRetain(v9);
    v10 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease((DARootViewController *)v9, v58, v59, v60, v61, v62, v63, v64);
    v6 = v57;
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = *(_QWORD *)&v0[v6];
  v12 = *(_QWORD *)&v0[v8];
  v13 = (unint64_t)v12 >> 62;
  if (v7 >= v10)
  {
    if (!v13)
    {
      if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) >= v11)
        return;
      goto LABEL_19;
    }
LABEL_42:
    if (v12 < 0)
      v74 = v12;
    else
      v74 = v12 & 0xFFFFFFFFFFFFFF8;
    v75 = v6;
    swift_bridgeObjectRetain(v12);
    v76 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease((DARootViewController *)v12, v77, v78, v79, v80, v81, v82, v83);
    v6 = v75;
    if (v76 >= v11)
      return;
LABEL_19:
    v1 = *(_QWORD *)&v0[v8];
    if (!((unint64_t)v1 >> 62))
    {
      v19 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      *(_QWORD *)&v0[v6] = v19;
      if (!v19)
        goto LABEL_21;
      goto LABEL_23;
    }
LABEL_49:
    if (v1 < 0)
      v84 = v1;
    else
      v84 = v1 & 0xFFFFFFFFFFFFFF8;
    v85 = v6;
    swift_bridgeObjectRetain(v1);
    v86 = _CocoaArrayWrapper.endIndex.getter(v84);
    swift_bridgeObjectRelease((DARootViewController *)v1, v87, v88, v89, v90, v91, v92, v93);
    *(_QWORD *)&v0[v85] = v86;
    if (!v86)
    {
LABEL_21:
      v20 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView];
      objc_msgSend(v20, "alpha");
      if (v3 == 0.0)
      {
        v21 = swift_allocObject(&unk_10013BFD8, 24, 7);
        *(_QWORD *)(v21 + 16) = v20;
        v22 = (void *)objc_opt_self(UIView);
        v100 = sub_100036E1C;
        v101 = v21;
        aBlock = _NSConcreteStackBlock;
        v97 = 1107296256;
        v98 = sub_100030658;
        v99 = &unk_10013BFF0;
        v23 = _Block_copy(&aBlock);
        v24 = v101;
        v25 = v20;
        swift_retain(v21);
        swift_release(v24);
        objc_msgSend(v22, "animateWithDuration:delay:options:animations:completion:", 0x10000, v23, 0, 0.375, 0.0);
        _Block_release(v23);
        *(_QWORD *)&v3 = swift_release(v21).n128_u64[0];
      }
    }
LABEL_23:
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView], "reloadData", v3);
    return;
  }
  if (!v13)
  {
    v8 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    v14 = v8 - 1;
    if (!__OFSUB__(v8, 1))
      goto LABEL_6;
    goto LABEL_41;
  }
  if (v12 < 0)
    v65 = *(_QWORD *)&v0[v8];
  else
    v65 = v12 & 0xFFFFFFFFFFFFFF8;
  v66 = v6;
  swift_bridgeObjectRetain(*(_QWORD *)&v0[v8]);
  v8 = _CocoaArrayWrapper.endIndex.getter(v65);
  swift_bridgeObjectRelease((DARootViewController *)v12, v67, v68, v69, v70, v71, v72, v73);
  v6 = v66;
  v14 = v8 - 1;
  if (__OFSUB__(v8, 1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_6:
  if (v14 < v11)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v95 = v6;
  v15 = 0;
  v7 = v11 - v8 + 1;
  v9 = (int64_t)&_swiftEmptyArrayStorage;
  while (1)
  {
    IndexPath.init(row:section:)(v15, 0);
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_100091FDC(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    v17 = *(_QWORD *)(v9 + 16);
    v16 = *(_QWORD *)(v9 + 24);
    if (v17 >= v16 >> 1)
      v9 = sub_100091FDC(v16 > 1, v17 + 1, 1, v9);
    *(_QWORD *)(v9 + 16) = v17 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v9+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v17, v5, v1);
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (!(v7 + v15))
      break;
    v18 = v11 + v15++;
    if (__OFADD__(v18, 1))
      goto LABEL_31;
  }
  v6 = v95;
  v26 = *(_QWORD *)&v0[v95];
  v27 = __OFADD__(v26, v8);
  v28 = v26 + v8;
  if (v27)
    goto LABEL_48;
  *(_QWORD *)&v0[v95] = v28;
  v29 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView];
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v9, v31, v32, v33, v34, v35, v36, v37);
  objc_msgSend(v29, "insertRowsAtIndexPaths:withRowAnimation:", isa, 4);

  if (v8 >= 1)
  {
    v38 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView];
    objc_msgSend(v38, "alpha");
    if (v39 > 0.0)
    {
      sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0x59524F54534948, (void *)0xE700000000000000);
      v41 = v40;
      v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41, v43, v44, v45, v46, v47, v48, v49);
      objc_msgSend(v0, "setTitle:", v42);

      objc_msgSend(v38, "alpha");
      if (v50 == 1.0)
      {
        v51 = swift_allocObject(&unk_10013C028, 24, 7);
        *(_QWORD *)(v51 + 16) = v38;
        v52 = (void *)objc_opt_self(UIView);
        v100 = sub_10003CDF4;
        v101 = v51;
        aBlock = _NSConcreteStackBlock;
        v97 = 1107296256;
        v98 = sub_100030658;
        v99 = &unk_10013C040;
        v53 = _Block_copy(&aBlock);
        v54 = v101;
        v55 = v38;
        swift_retain(v51);
        swift_release(v54);
        objc_msgSend(v52, "animateWithDuration:delay:options:animations:completion:", 0x20000, v53, 0, 0.125, 0.0);
        _Block_release(v53);
        swift_release(v51);
      }
    }
  }
}

void sub_1000D69E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_state));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries));
  swift_unknownObjectRelease(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver));

}

id sub_1000D6A3C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HistoryTableViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HistoryTableViewController()
{
  return objc_opt_self(_TtC11Diagnostics26HistoryTableViewController);
}

id sub_1000D6AF4(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id result;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  SEL v22;
  id v23;
  int v24;
  id v25;
  id v26;
  id v27;
  id v28;
  objc_super v29;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_cellRowEstimatedHeight] = 0x404E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver] = 0;
  v3 = OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView;
  v4 = objc_allocWithZone((Class)UITableView);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "initWithFrame:style:", 0, 0.0, 0.0, 0.0, 0.0);
  result = objc_msgSend(objc_allocWithZone((Class)_UIContentUnavailableView), "initWithFrame:title:style:", 0, 0, 0.0, 0.0, 0.0, 0.0);
  if (result)
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView] = result;
    *(_QWORD *)&v5[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_state] = a1;
    v7 = *(void **)(a1 + 40);
    swift_retain(a1);
    v8 = objc_msgSend(v7, "history");
    v9 = sub_100037118(0, &qword_10016E1A0, &off_100131AA0);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    *(_QWORD *)&v5[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntries] = v10;
    v11 = objc_msgSend(v7, "history");
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v9);

    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v21 = v12;
      else
        v21 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v20 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease((DARootViewController *)v12, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      v20 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease((DARootViewController *)v12, v13, v14, v15, v16, v17, v18, v19);
    *(_QWORD *)&v5[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_historyEntriesRendered] = v20;

    v29.receiver = v5;
    v29.super_class = (Class)type metadata accessor for HistoryTableViewController();
    return objc_msgSendSuper2(&v29, "initWithNibName:bundle:", 0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D6CDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D6D00(uint64_t a1)
{
  uint64_t v1;

  sub_1000D5634(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000D6D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D6D18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000D6D20()
{
  char *v0;
  uint64_t v1;
  id v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_cellRowEstimatedHeight] = 0x404E000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_deviceStateChangedObserver] = 0;
  v1 = OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_tableView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UITableView), "initWithFrame:style:", 0, 0.0, 0.0, 0.0, 0.0);
  v2 = objc_msgSend(objc_allocWithZone((Class)_UIContentUnavailableView), "initWithFrame:title:style:", 0, 0, 0.0, 0.0, 0.0, 0.0);
  if (!v2)
    __break(1u);
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26HistoryTableViewController_noHistoryView] = v2;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100112360, "Diagnostics/HistoryTableViewController.swift", 44, 2, 42, 0);
  __break(1u);
}

void destroy for SelfServiceSuiteResultsTestView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));

}

uint64_t initializeWithCopy for SelfServiceSuiteResultsTestView(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v4);
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for SelfServiceSuiteResultsTestView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[6];
  v7 = (void *)a1[6];
  a1[6] = v6;
  v8 = v6;

  return a1;
}

uint64_t assignWithTake for SelfServiceSuiteResultsTestView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v5 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for SelfServiceSuiteResultsTestView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfServiceSuiteResultsTestView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfServiceSuiteResultsTestView()
{
  return &type metadata for SelfServiceSuiteResultsTestView;
}

uint64_t sub_1000D71BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001203A4, 1);
}

uint64_t sub_1000D71CC@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _OWORD v30[15];
  char v31;
  _BYTE v32[248];
  char v33;
  char v34;
  _QWORD v35[43];

  v29 = a1;
  v28 = sub_100035CA4(&qword_10016CA48);
  __chkstk_darwin(v28);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RoundedRectangle(0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = static VerticalAlignment.center.getter(v5);
  v8 = sub_1000D74D4((double *)v1, (uint64_t)v30);
  *(_OWORD *)&v32[199] = v30[12];
  *(_OWORD *)&v32[215] = v30[13];
  *(_OWORD *)&v32[231] = v30[14];
  *(_OWORD *)&v32[135] = v30[8];
  *(_OWORD *)&v32[151] = v30[9];
  *(_OWORD *)&v32[167] = v30[10];
  *(_OWORD *)&v32[183] = v30[11];
  *(_OWORD *)&v32[71] = v30[4];
  *(_OWORD *)&v32[87] = v30[5];
  *(_OWORD *)&v32[103] = v30[6];
  *(_OWORD *)&v32[119] = v30[7];
  *(_OWORD *)&v32[7] = v30[0];
  *(_OWORD *)&v32[23] = v30[1];
  *(_OWORD *)&v32[39] = v30[2];
  v33 = 0;
  v32[247] = v31;
  *(_OWORD *)&v32[55] = v30[3];
  v9 = static Edge.Set.vertical.getter(v8);
  v10 = EdgeInsets.init(_all:)(*(double *)(v1 + 16));
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v34 = 0;
  v17 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v18 = Color.init(_:)(v17);
  v19 = static Edge.Set.all.getter(v18);
  *(_OWORD *)((char *)&v35[26] + 1) = *(_OWORD *)&v32[192];
  *(_OWORD *)((char *)&v35[28] + 1) = *(_OWORD *)&v32[208];
  *(_OWORD *)((char *)&v35[30] + 1) = *(_OWORD *)&v32[224];
  *(_OWORD *)((char *)&v35[18] + 1) = *(_OWORD *)&v32[128];
  *(_OWORD *)((char *)&v35[20] + 1) = *(_OWORD *)&v32[144];
  *(_OWORD *)((char *)&v35[22] + 1) = *(_OWORD *)&v32[160];
  *(_OWORD *)((char *)&v35[24] + 1) = *(_OWORD *)&v32[176];
  *(_OWORD *)((char *)&v35[10] + 1) = *(_OWORD *)&v32[64];
  *(_OWORD *)((char *)&v35[12] + 1) = *(_OWORD *)&v32[80];
  *(_OWORD *)((char *)&v35[14] + 1) = *(_OWORD *)&v32[96];
  *(_OWORD *)((char *)&v35[16] + 1) = *(_OWORD *)&v32[112];
  *(_OWORD *)((char *)&v35[2] + 1) = *(_OWORD *)v32;
  *(_OWORD *)((char *)&v35[4] + 1) = *(_OWORD *)&v32[16];
  *(_OWORD *)((char *)&v35[6] + 1) = *(_OWORD *)&v32[32];
  v35[0] = v27;
  v35[1] = 0;
  LOBYTE(v35[2]) = 0;
  *(_QWORD *)((char *)&v35[32] + 1) = *(_QWORD *)&v32[240];
  *(_OWORD *)((char *)&v35[8] + 1) = *(_OWORD *)&v32[48];
  LOBYTE(v35[34]) = v9;
  *(double *)&v35[35] = v10;
  v35[36] = v12;
  v35[37] = v14;
  v35[38] = v16;
  LOBYTE(v35[39]) = v34;
  v35[40] = v18;
  LOBYTE(v35[41]) = v19;
  v20 = *(_QWORD *)(v1 + 32);
  v21 = (char *)v7 + *(int *)(v4 + 20);
  v22 = enum case for RoundedCornerStyle.continuous(_:);
  v23 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v21, v22, v23);
  *v7 = v20;
  v7[1] = v20;
  sub_10008B064((uint64_t)v7, (uint64_t)v3);
  *(_WORD *)&v3[*(int *)(v28 + 36)] = 256;
  v24 = sub_100035CA4(&qword_10016E1D8);
  v25 = v29;
  sub_1000C4924((uint64_t)v3, (uint64_t)v29 + *(int *)(v24 + 36));
  memcpy(v25, v35, 0x149uLL);
  sub_1000D8C30((uint64_t)v35);
  sub_1000D8D5C((uint64_t)v3);
  sub_10008B1FC((uint64_t)v7);
  return sub_1000D8D9C((uint64_t)v35);
}

uint64_t sub_1000D74D4@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  char v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  DARootViewController *v27;
  DARootViewController *v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  SEL v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  SEL v46;
  id v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  _BYTE v97[7];
  _BYTE v98[7];
  _BYTE v99[7];
  int v100;
  __int16 v101;
  char v102;
  char v103;
  char v104;
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  _OWORD v113[8];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  _QWORD v136[2];
  __int128 v137;
  char v138;
  char v139;
  int v140;
  __int16 v141;
  uint64_t v142;
  char v143;
  _BYTE v144[7];
  uint64_t v145;
  char v146;
  _BYTE v147[7];
  uint64_t v148;
  uint64_t v149;
  char v150;
  _BYTE v151[7];
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int16 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int16 v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int16 v207;

  v4 = (void *)*((_QWORD *)a1 + 5);
  if (v4)
  {
    v88 = v4;
    sub_100084070(v88, (uint64_t)&v193);
    v96 = v193;
    v5 = v194;
    v91 = *((_QWORD *)&v193 + 1);
    v6 = BYTE1(v195);
    v95 = BYTE1(v195);
    v90 = v195;
    v7 = *a1;
    v9 = static Alignment.center.getter(v8);
    v11 = _FrameLayout.init(width:height:alignment:)(&v187, *(_QWORD *)&v7, 0, *(_QWORD *)&v7, 0, v9, v10);
    LOBYTE(v7) = v188;
    v92 = v187;
    v93 = v189;
    v12 = v190;
    v13 = v191;
    v14 = v192;
    v86 = v192;
    v87 = v191;
    v94 = static Edge.Set.horizontal.getter(v11);
    v15 = EdgeInsets.init(_all:)(a1[1]);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v104 = v6;
    v103 = LOBYTE(v7);
    v102 = v12;
    v22 = *((_QWORD *)a1 + 7);
    *(double *)&v193 = a1[6];
    *((_QWORD *)&v193 + 1) = v22;
    v23 = sub_10003F14C();
    swift_bridgeObjectRetain(v22);
    v24 = Text.init<A>(_:)(&v193, &type metadata for String, v23);
    v26 = v25;
    v28 = v27;
    v89 = v29 & 1;
    LOBYTE(v23) = static Edge.Set.trailing.getter();
    v30 = EdgeInsets.init(_all:)(a1[3]);
    *(_QWORD *)&v105[0] = v96;
    *((_QWORD *)&v105[0] + 1) = v91;
    v105[1] = v5;
    LOBYTE(v106) = v90;
    BYTE1(v106) = v104;
    *((_QWORD *)&v106 + 1) = v92;
    LOBYTE(v107) = v103;
    *((_QWORD *)&v107 + 1) = v93;
    LOBYTE(v108) = v102;
    *((_QWORD *)&v108 + 1) = v13;
    *(_QWORD *)&v109 = v14;
    BYTE8(v109) = v94;
    *(double *)&v110 = v15;
    *((_QWORD *)&v110 + 1) = v17;
    *(_QWORD *)&v111 = v19;
    *((_QWORD *)&v111 + 1) = v21;
    v112 = 0;
    v113[0] = v105[0];
    v113[4] = v108;
    v113[3] = v107;
    v113[2] = v106;
    v113[1] = v5;
    LOBYTE(v114) = 0;
    v113[7] = v111;
    v113[6] = v110;
    v113[5] = v109;
    *((_QWORD *)&v114 + 1) = v24;
    *(_QWORD *)&v115 = v26;
    BYTE8(v115) = v89;
    *(_QWORD *)&v116 = v28;
    BYTE8(v116) = v23;
    *(double *)&v117 = v30;
    *((_QWORD *)&v117 + 1) = v31;
    *(_QWORD *)&v118 = v32;
    *((_QWORD *)&v118 + 1) = v33;
    LOBYTE(v119) = 0;
    *((_QWORD *)&v119 + 1) = swift_getKeyPath(&unk_10010EDF0);
    v34 = *((_QWORD *)&v119 + 1);
    v85 = *((_QWORD *)&v119 + 1);
    v120 = 0;
    v135 = 0;
    v125 = v108;
    v126 = v109;
    v127 = v110;
    v128 = v111;
    v121 = v105[0];
    v122 = v5;
    v123 = v106;
    v124 = v107;
    v133 = v118;
    v134 = v119;
    v129 = v114;
    v130 = v115;
    v131 = v116;
    v132 = v117;
    sub_10008B3F4((uint64_t)v105, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A58);
    sub_1000769B4(v24, v26, v89);
    swift_bridgeObjectRetain(v28);
    swift_retain(v34);
    sub_100076AB8(v96, v91, v5, *((uint64_t *)&v5 + 1), v90, v95, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A58);
    sub_1000769B4(v24, v26, v89);
    swift_bridgeObjectRetain(v28);
    swift_retain(v85);
    sub_100076B54(v24, v26, v89);
    swift_release(v85);
    swift_bridgeObjectRelease(v28, v35, v36, v37, v38, v39, v40, v41);
    v136[0] = v96;
    v136[1] = v91;
    v137 = v5;
    v138 = v90;
    v139 = v104;
    v140 = v100;
    v141 = v101;
    v142 = v92;
    v143 = v103;
    *(_DWORD *)v144 = *(_DWORD *)v99;
    *(_DWORD *)&v144[3] = *(_DWORD *)&v99[3];
    v145 = v93;
    v146 = v102;
    *(_DWORD *)&v147[3] = *(_DWORD *)&v98[3];
    *(_DWORD *)v147 = *(_DWORD *)v98;
    v148 = v87;
    v149 = v86;
    v150 = v94;
    *(_DWORD *)&v151[3] = *(_DWORD *)&v97[3];
    *(_DWORD *)v151 = *(_DWORD *)v97;
    v152 = v15;
    v153 = v17;
    v154 = v19;
    v155 = v21;
    v156 = 0;
    sub_10008B3F4((uint64_t)v136, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AEC);
    v184 = v133;
    v185 = v134;
    LOBYTE(v186) = v135;
    v180 = v129;
    v181 = v130;
    v182 = v131;
    v183 = v132;
    v176 = v125;
    v177 = v126;
    v178 = v127;
    v179 = v128;
    v172 = v121;
    v173 = v122;
    v174 = v123;
    v175 = v124;
    sub_1000D9048((uint64_t)&v172);
    sub_1000C496C((uint64_t)&v172, (uint64_t)&v193, &qword_10016E1E0);
    sub_1000D9050((uint64_t)&v121);
    v42 = sub_100035CA4(&qword_10016E1E8);
    v43 = sub_100035CA4(&qword_10016E1F0);
    v44 = sub_1000489C4(&qword_10016E1F8, &qword_10016E1E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v45 = sub_1000D8EDC();
    _ConditionalContent<>.init(storage:)(&v157, &v193, v42, v43, v44, v45);

    sub_1000D90D8((uint64_t)v113);
    sub_100076B54(v24, v26, v89);
    swift_release(v85);
    swift_bridgeObjectRelease(v28, v46, v47, v48, v49, v50, v51, v52);
    sub_100076AB8(v96, v91, v5, *((uint64_t *)&v5 + 1), v90, v95, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AEC);
    v205 = v169;
    v206 = v170;
    v207 = v171;
    v201 = v165;
    v202 = v166;
    v203 = v167;
    v204 = v168;
    v197 = v161;
    v198 = v162;
    v199 = v163;
    v200 = v164;
    v193 = v157;
    v194 = v158;
    v195 = v159;
    v196 = v160;
  }
  else
  {
    v53 = *((_QWORD *)a1 + 7);
    *(double *)&v193 = a1[6];
    *((_QWORD *)&v193 + 1) = v53;
    v54 = sub_10003F14C();
    swift_bridgeObjectRetain(v53);
    v55 = Text.init<A>(_:)(&v193, &type metadata for String, v54);
    v57 = v56;
    v59 = v58;
    v61 = v60;
    v62 = static Edge.Set.horizontal.getter(v55);
    v63 = EdgeInsets.init(_all:)(a1[3]);
    *(_QWORD *)&v172 = v55;
    *((_QWORD *)&v172 + 1) = v57;
    LOBYTE(v173) = v59 & 1;
    *((_QWORD *)&v173 + 1) = v61;
    LOBYTE(v174) = v62;
    *((double *)&v174 + 1) = v63;
    *(_QWORD *)&v175 = v64;
    *((_QWORD *)&v175 + 1) = v65;
    *(_QWORD *)&v176 = v66;
    BYTE8(v176) = 0;
    *(_QWORD *)&v177 = swift_getKeyPath(&unk_10010EDF0);
    BYTE8(v177) = 0;
    sub_1000D8ED0((uint64_t)&v172);
    sub_1000C496C((uint64_t)&v172, (uint64_t)&v157, &qword_10016E1E0);
    v67 = sub_100035CA4(&qword_10016E1E8);
    v68 = sub_100035CA4(&qword_10016E1F0);
    v69 = sub_1000489C4(&qword_10016E1F8, &qword_10016E1E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v70 = sub_1000D8EDC();
    _ConditionalContent<>.init(storage:)(&v193, &v157, v67, v68, v69, v70);
  }
  v71 = v204;
  v184 = v205;
  v185 = v206;
  v72 = v200;
  v73 = v201;
  v180 = v201;
  v181 = v202;
  v74 = v202;
  v75 = v203;
  v182 = v203;
  v183 = v204;
  v76 = v196;
  v77 = v197;
  v176 = v197;
  v177 = v198;
  v78 = v198;
  v79 = v199;
  v178 = v199;
  v179 = v200;
  v172 = v193;
  v173 = v194;
  v81 = v193;
  v80 = v194;
  v174 = v195;
  v175 = v196;
  v169 = v205;
  v170 = v206;
  v165 = v201;
  v166 = v202;
  v167 = v203;
  v168 = v204;
  v82 = v195;
  v161 = v197;
  v162 = v198;
  v163 = v199;
  v164 = v200;
  v157 = v193;
  v158 = v194;
  v159 = v195;
  v160 = v196;
  v83 = v206;
  *(_OWORD *)(a2 + 192) = v205;
  *(_OWORD *)(a2 + 208) = v83;
  *(_OWORD *)(a2 + 128) = v73;
  *(_OWORD *)(a2 + 144) = v74;
  *(_OWORD *)(a2 + 160) = v75;
  *(_OWORD *)(a2 + 176) = v71;
  *(_OWORD *)(a2 + 64) = v77;
  *(_OWORD *)(a2 + 80) = v78;
  *(_OWORD *)(a2 + 96) = v79;
  *(_OWORD *)(a2 + 112) = v72;
  *(_OWORD *)a2 = v81;
  *(_OWORD *)(a2 + 16) = v80;
  v186 = v207;
  v171 = v207;
  *(_WORD *)(a2 + 224) = v207;
  *(_OWORD *)(a2 + 32) = v82;
  *(_OWORD *)(a2 + 48) = v76;
  LOBYTE(v121) = 1;
  *(_QWORD *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 240) = 1;
  sub_1000D8FC4((uint64_t)&v157, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_1000D8CCC);
  return sub_1000D8FC4((uint64_t)&v172, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_1000D8E38);
}

uint64_t sub_1000D7CB0@<X0>(void *a1@<X8>)
{
  return sub_1000D71CC(a1);
}

void sub_1000D7CE8(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  DARootViewController *v29;
  DARootViewController *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  DARootViewController *v39;
  DARootViewController *v40;
  SEL v41;
  id v42;
  int v43;
  id v44;
  id v45;
  id v46;
  id v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  DARootViewController *v52;
  char v53;
  SEL v54;
  id v55;
  int v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  SEL v73;
  id v74;
  int v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  DARootViewController *v84;
  DARootViewController *v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  id v89;
  int v90;
  id v91;
  id v92;
  id v93;
  id v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  DARootViewController *v99;
  DARootViewController *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  DARootViewController *v109;
  DARootViewController *v110;
  SEL v111;
  id v112;
  int v113;
  id v114;
  id v115;
  id v116;
  id v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  DARootViewController *v122;
  DARootViewController *v123;
  char v124;
  SEL v125;
  id v126;
  int v127;
  id v128;
  id v129;
  id v130;
  id v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  SEL v143;
  id v144;
  int v145;
  id v146;
  id v147;
  id v148;
  id v149;
  SEL v150;
  id v151;
  int v152;
  id v153;
  id v154;
  id v155;
  id v156;
  DARootViewController *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  id v162;
  char v163;
  uint64_t v164;
  uint64_t v166;
  DARootViewController *v167;
  __int128 v168;
  _BYTE v169[7];
  _BYTE v170[7];
  _BYTE v171[7];
  _BYTE v172[7];
  _OWORD v173[3];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _BYTE v179[25];
  _BYTE v180[189];
  _BYTE v181[182];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _BYTE v190[25];
  _BYTE __src[465];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _BYTE v200[25];
  _BYTE v201[189];
  _OWORD v202[2];
  uint64_t v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  _BYTE v208[7];
  double v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  _BYTE v214[7];
  char v215;
  _BYTE v216[7];
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  _BYTE v222[208];

  v164 = *(_QWORD *)(a1 + 32);
  v167 = *(DARootViewController **)(a1 + 40);
  v3 = swift_bridgeObjectRetain(v167);
  v166 = static Font.title.getter(v3);
  v163 = static Edge.Set.bottom.getter();
  v4 = EdgeInsets.init(_all:)(*(double *)(a1 + 24));
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = *(void **)(a1 + 48);
  v12 = objc_msgSend(v11, "result");
  __asm { FMOV            V0.2D, #20.0 }
  v168 = _Q0;
  if (v12)
  {
    v18 = v12;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v158 = v20;
    v159 = v19;

    v21 = objc_msgSend(v11, "name");
    v161 = v11;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    *(_QWORD *)__src = v22;
    *(_QWORD *)&__src[8] = v24;
    v25 = sub_10003F14C();
    v26 = Text.init<A>(_:)(__src, &type metadata for String, v25);
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
    v33 = static Font.title3.getter();
    v34 = Text.font(_:)(v33, v26, v28, v32, v30);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_release(v33);
    LOBYTE(v33) = v38 & 1;
    sub_100076B54(v26, v28, v32);
    swift_bridgeObjectRelease(v30, v41, v42, v43, v44, v45, v46, v47);
    v48 = static Font.Weight.semibold.getter();
    v49 = Text.fontWeight(_:)(*(_QWORD *)&v48, 0, v34, v36, v38 & 1, v40);
    v51 = v50;
    v157 = v52;
    LOBYTE(v32) = v53 & 1;
    sub_100076B54(v34, v36, v33);
    swift_bridgeObjectRelease(v40, v54, v55, v56, v57, v58, v59, v60);
    v61 = objc_msgSend(v161, "status");
    LOBYTE(v26) = static Edge.Set.top.getter();
    v62 = EdgeInsets.init(_all:)(*(double *)(a1 + 8));
    v64 = v63;
    v66 = v65;
    v68 = v67;
    LOBYTE(v33) = static Edge.Set.bottom.getter();
    v69 = EdgeInsets.init(_all:)(*(double *)(a1 + 16));
    *(_DWORD *)v208 = *(_DWORD *)v181;
    *(_DWORD *)&v208[3] = *(_DWORD *)&v181[3];
    *(_DWORD *)v214 = *(_DWORD *)v180;
    *(_DWORD *)&v214[3] = *(_DWORD *)&v180[3];
    *(_DWORD *)v216 = *(_DWORD *)v172;
    *(_DWORD *)&v216[3] = *(_DWORD *)&v172[3];
    DWORD1(v186) = *(_DWORD *)&v181[3];
    v170[0] = 0;
    v169[0] = 0;
    v182 = xmmword_10010ECF0;
    v183 = v168;
    *(_DWORD *)((char *)&v186 + 1) = *(_DWORD *)v181;
    HIDWORD(v188) = *(_DWORD *)&v180[3];
    *(_QWORD *)&v184 = 0x4028000000000000;
    *((_QWORD *)&v184 + 1) = v61;
    *(_QWORD *)&v185 = v159;
    *((_QWORD *)&v185 + 1) = v158;
    LOBYTE(v186) = v26;
    *((double *)&v186 + 1) = v62;
    *(_QWORD *)&v187 = v64;
    *((_QWORD *)&v187 + 1) = v66;
    *(_QWORD *)&v188 = v68;
    BYTE8(v188) = 0;
    *(_DWORD *)((char *)&v188 + 9) = *(_DWORD *)v180;
    LOBYTE(v189) = v33;
    DWORD1(v189) = *(_DWORD *)&v172[3];
    *(_DWORD *)((char *)&v189 + 1) = *(_DWORD *)v172;
    *((double *)&v189 + 1) = v69;
    *(_QWORD *)v190 = v70;
    *(_QWORD *)&v190[8] = v71;
    *(_QWORD *)&v190[16] = v72;
    v190[24] = 0;
    v171[0] = v32;
    *(_OWORD *)&v200[9] = *(_OWORD *)&v190[9];
    v199 = v189;
    *(_OWORD *)v200 = *(_OWORD *)v190;
    v198 = v188;
    v192 = xmmword_10010ECF0;
    v193 = v168;
    v196 = v186;
    v197 = v187;
    v194 = v184;
    v195 = v185;
    LODWORD(v173[0]) = *(_DWORD *)v201;
    *(_DWORD *)((char *)v173 + 3) = *(_DWORD *)&v201[3];
    v202[0] = xmmword_10010ECF0;
    v202[1] = v168;
    v203 = 0x4028000000000000;
    v204 = v61;
    v205 = v159;
    v206 = v158;
    v207 = v26;
    v209 = v62;
    v210 = v64;
    v211 = v66;
    v212 = v68;
    v213 = 0;
    v215 = v33;
    v217 = v69;
    v218 = v70;
    v219 = v71;
    v220 = v72;
    v221 = 0;
    sub_1000769B4(v49, v51, v32);
    swift_bridgeObjectRetain(v157);
    sub_1000D8944((uint64_t)&v182);
    sub_1000D8978((uint64_t)v202);
    sub_100076B54(v49, v51, v32);
    swift_bridgeObjectRelease(v157, v73, v74, v75, v76, v77, v78, v79);
    *(_QWORD *)__src = v49;
    *(_QWORD *)&__src[8] = v51;
    __src[16] = v32;
    *(_DWORD *)&__src[17] = v173[0];
    *(_DWORD *)&__src[20] = *(_DWORD *)((char *)v173 + 3);
    *(_QWORD *)&__src[24] = v157;
    *(_OWORD *)&__src[128] = v198;
    *(_OWORD *)&__src[144] = v199;
    *(_OWORD *)&__src[160] = *(_OWORD *)v200;
    *(_OWORD *)&__src[169] = *(_OWORD *)&v200[9];
    v11 = v161;
    *(_OWORD *)&__src[64] = v194;
    *(_OWORD *)&__src[80] = v195;
    *(_OWORD *)&__src[96] = v196;
    *(_OWORD *)&__src[112] = v197;
    *(_OWORD *)&__src[32] = v192;
    *(_OWORD *)&__src[48] = v193;
    Int.id.getter(__src);
  }
  else
  {
    sub_1000D8774(__src);
  }
  sub_1000C496C((uint64_t)__src, (uint64_t)v222, &qword_10016E1A8);
  v80 = objc_msgSend(v11, "testDescription");
  if (v80)
  {
    v81 = v80;
    v162 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v160 = v82;

    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("Localizable-SelfService"));
    v85 = v84;
    v86 = sub_10003FFA0(v83, v84, (uint64_t)&_swiftEmptyArrayStorage, 0x48545F54554F4241, (void *)0xEF545345545F5349);
    v88 = v87;
    swift_bridgeObjectRelease(v85, v87, v89, v90, v91, v92, v93, v94);
    *(_QWORD *)__src = v86;
    *(_QWORD *)&__src[8] = v88;
    v95 = sub_10003F14C();
    v96 = Text.init<A>(_:)(__src, &type metadata for String, v95);
    v98 = v97;
    v100 = v99;
    v102 = v101 & 1;
    v103 = static Font.title3.getter();
    v104 = Text.font(_:)(v103, v96, v98, v102, v100);
    v106 = v105;
    v108 = v107;
    v110 = v109;
    swift_release(v103);
    LOBYTE(v103) = v108 & 1;
    sub_100076B54(v96, v98, v102);
    swift_bridgeObjectRelease(v100, v111, v112, v113, v114, v115, v116, v117);
    v118 = static Font.Weight.semibold.getter();
    v119 = Text.fontWeight(_:)(*(_QWORD *)&v118, 0, v104, v106, v108 & 1, v110);
    v121 = v120;
    v123 = v122;
    LOBYTE(v102) = v124 & 1;
    sub_100076B54(v104, v106, v103);
    swift_bridgeObjectRelease(v110, v125, v126, v127, v128, v129, v130, v131);
    LOBYTE(v104) = static Edge.Set.top.getter();
    v132 = EdgeInsets.init(_all:)(*(double *)(a1 + 8));
    v134 = v133;
    v136 = v135;
    v138 = v137;
    LOBYTE(v96) = static Edge.Set.bottom.getter();
    v139 = EdgeInsets.init(_all:)(*(double *)(a1 + 16));
    *(_DWORD *)((char *)&v196 + 1) = *(_DWORD *)v171;
    DWORD1(v196) = *(_DWORD *)&v171[3];
    *(_DWORD *)((char *)&v198 + 9) = *(_DWORD *)v170;
    HIDWORD(v198) = *(_DWORD *)&v170[3];
    *(_DWORD *)((char *)&v199 + 1) = *(_DWORD *)v169;
    DWORD1(v199) = *(_DWORD *)&v169[3];
    v173[0] = xmmword_10010ECF0;
    v173[1] = v168;
    DWORD1(v175) = *(_DWORD *)&v171[3];
    v173[2] = 0x4028000000000000uLL;
    *(_QWORD *)&v174 = v162;
    *((_QWORD *)&v174 + 1) = v160;
    LOBYTE(v175) = v104;
    *(_DWORD *)((char *)&v175 + 1) = *(_DWORD *)v171;
    *((double *)&v175 + 1) = v132;
    *(_QWORD *)&v176 = v134;
    *((_QWORD *)&v176 + 1) = v136;
    *(_QWORD *)&v177 = v138;
    BYTE8(v177) = 0;
    HIDWORD(v177) = *(_DWORD *)&v170[3];
    *(_DWORD *)((char *)&v177 + 9) = *(_DWORD *)v170;
    LOBYTE(v178) = v96;
    DWORD1(v178) = *(_DWORD *)&v169[3];
    *(_DWORD *)((char *)&v178 + 1) = *(_DWORD *)v169;
    *((double *)&v178 + 1) = v139;
    *(_QWORD *)v179 = v140;
    *(_QWORD *)&v179[8] = v141;
    *(_QWORD *)&v179[16] = v142;
    v179[24] = 0;
    *(_OWORD *)&v190[9] = *(_OWORD *)&v179[9];
    v189 = v178;
    *(_OWORD *)v190 = *(_OWORD *)v179;
    v187 = v176;
    v188 = v177;
    v182 = xmmword_10010ECF0;
    v183 = v168;
    v185 = v174;
    v186 = v175;
    v184 = 0x4028000000000000uLL;
    *(_DWORD *)v201 = *(_DWORD *)v180;
    *(_DWORD *)&v201[3] = *(_DWORD *)&v180[3];
    *(_DWORD *)v181 = *(_DWORD *)v172;
    *(_DWORD *)&v181[3] = *(_DWORD *)&v172[3];
    v192 = xmmword_10010ECF0;
    v193 = v168;
    v194 = 0x4028000000000000uLL;
    *(_QWORD *)&v195 = v162;
    *((_QWORD *)&v195 + 1) = v160;
    LOBYTE(v196) = v104;
    *((double *)&v196 + 1) = v132;
    *(_QWORD *)&v197 = v134;
    *((_QWORD *)&v197 + 1) = v136;
    *(_QWORD *)&v198 = v138;
    BYTE8(v198) = 0;
    LOBYTE(v199) = v96;
    *((double *)&v199 + 1) = v139;
    *(_QWORD *)v200 = v140;
    *(_QWORD *)&v200[8] = v141;
    *(_QWORD *)&v200[16] = v142;
    v200[24] = 0;
    sub_1000769B4(v119, v121, v102);
    swift_bridgeObjectRetain(v123);
    sub_1000D8944((uint64_t)v173);
    sub_1000D8978((uint64_t)&v192);
    sub_100076B54(v119, v121, v102);
    swift_bridgeObjectRelease(v123, v143, v144, v145, v146, v147, v148, v149);
    *(_QWORD *)__src = v119;
    *(_QWORD *)&__src[8] = v121;
    __src[16] = v102;
    *(_DWORD *)&__src[17] = *(_DWORD *)v201;
    *(_DWORD *)&__src[20] = *(_DWORD *)&v201[3];
    *(_QWORD *)&__src[24] = v123;
    *(_OWORD *)&__src[128] = v188;
    *(_OWORD *)&__src[144] = v189;
    *(_OWORD *)&__src[160] = *(_OWORD *)v190;
    *(_OWORD *)&__src[169] = *(_OWORD *)&v190[9];
    *(_OWORD *)&__src[64] = v184;
    *(_OWORD *)&__src[80] = v185;
    *(_OWORD *)&__src[96] = v186;
    *(_OWORD *)&__src[112] = v187;
    *(_OWORD *)&__src[32] = v182;
    *(_OWORD *)&__src[48] = v183;
    *(_DWORD *)&__src[185] = *(_DWORD *)v181;
    *(_DWORD *)&__src[188] = *(_DWORD *)&v181[3];
    *(_QWORD *)&__src[192] = 0;
    __src[200] = 1;
    Int.id.getter(__src);
  }
  else
  {
    sub_1000D8798(__src);
  }
  sub_1000C496C((uint64_t)__src, (uint64_t)v202, &qword_10016E1B0);
  sub_1000C496C((uint64_t)v222, (uint64_t)v180, &qword_10016E1A8);
  sub_1000C496C((uint64_t)v202, (uint64_t)v173, &qword_10016E1B0);
  sub_1000C496C((uint64_t)v180, (uint64_t)v181, &qword_10016E1A8);
  sub_1000C496C((uint64_t)v173, (uint64_t)&v182, &qword_10016E1B0);
  *(_QWORD *)__src = v164;
  *(_QWORD *)&__src[8] = v167;
  *(_QWORD *)&__src[16] = v166;
  __src[24] = v163;
  *(double *)&__src[32] = v4;
  *(_QWORD *)&__src[40] = v6;
  *(_QWORD *)&__src[48] = v8;
  *(_QWORD *)&__src[56] = v10;
  __src[64] = 0;
  sub_1000C496C((uint64_t)v181, (uint64_t)&__src[72], &qword_10016E1A8);
  sub_1000C496C((uint64_t)&v182, (uint64_t)&__src[264], &qword_10016E1B0);
  memcpy(a2, __src, 0x1D1uLL);
  sub_1000C496C((uint64_t)v173, (uint64_t)&v192, &qword_10016E1B0);
  swift_bridgeObjectRetain(v167);
  swift_retain(v166);
  sub_1000D88D0((uint64_t)v181, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D87BC);
  sub_1000D8808((uint64_t)&v182, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D87BC);
  sub_1000D8808((uint64_t)&v192, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D887C);
  sub_1000C496C((uint64_t)v180, (uint64_t)v201, &qword_10016E1A8);
  sub_1000D88D0((uint64_t)v201, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000D887C);
  swift_release(v166);
  swift_bridgeObjectRelease(v167, v150, v151, v152, v153, v154, v155, v156);
}

void *sub_1000D8690@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  void *v5;
  char v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  _OWORD v15[3];
  uint64_t v16;
  _BYTE __src[472];
  _BYTE v18[480];
  char v19;

  v3 = *(_OWORD *)(v1 + 16);
  v15[0] = *(_OWORD *)v1;
  v15[1] = v3;
  v15[2] = *(_OWORD *)(v1 + 32);
  v16 = *(_QWORD *)(v1 + 48);
  v4 = static HorizontalAlignment.leading.getter();
  sub_1000D7CE8((uint64_t)v15, __src);
  v18[472] = 1;
  v5 = memcpy(&v18[7], __src, 0x1D1uLL);
  v6 = static Edge.Set.horizontal.getter(v5);
  v7 = EdgeInsets.init(_all:)(*(double *)v15);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v19 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  result = memcpy((void *)(a1 + 17), v18, 0x1D8uLL);
  *(_BYTE *)(a1 + 496) = v6;
  *(double *)(a1 + 504) = v7;
  *(_QWORD *)(a1 + 512) = v9;
  *(_QWORD *)(a1 + 520) = v11;
  *(_QWORD *)(a1 + 528) = v13;
  *(_BYTE *)(a1 + 536) = v19;
  return result;
}

double sub_1000D8774(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 169) = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double sub_1000D8798(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1000D87BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  id v13;
  double result;

  if (a4)
  {
    sub_1000769B4(a1, a2, a3 & 1);
    v13 = a10;
    swift_bridgeObjectRetain(a12);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000D8808(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 200);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    v4);
  return a1;
}

void sub_1000D887C(uint64_t a1, uint64_t a2, char a3, DARootViewController *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, DARootViewController *a12)
{
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  SEL v20;
  id v21;
  int v22;
  id v23;
  id v24;
  id v25;
  id v26;

  if (a4)
  {
    sub_100076B54(a1, a2, a3 & 1);
    swift_bridgeObjectRelease(a12, v13, v14, v15, v16, v17, v18, v19);
    swift_bridgeObjectRelease(a4, v20, v21, v22, v23, v24, v25, v26);

  }
}

uint64_t sub_1000D88D0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 184);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    v4);
  return a1;
}

uint64_t sub_1000D8944(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(id *)(a1 + 40);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000D8978(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));

  return a1;
}

uint64_t destroy for SelfServiceSuiteResultsInfoView(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for SelfServiceSuiteResultsInfoView(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v4;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SelfServiceSuiteResultsInfoView(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = (void *)a1[5];
  v5 = (void *)a2[5];
  a1[5] = v5;
  v6 = v5;

  a1[6] = a2[6];
  v7 = a2[7];
  v8 = a1[7];
  a1[7] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for SelfServiceSuiteResultsInfoView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelfServiceSuiteResultsInfoView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfServiceSuiteResultsInfoView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfServiceSuiteResultsInfoView()
{
  return &type metadata for SelfServiceSuiteResultsInfoView;
}

unint64_t sub_1000D8B9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E1B8;
  if (!qword_10016E1B8)
  {
    v1 = sub_100035D30(&qword_10016E1C0);
    sub_1000489C4(&qword_10016E1C8, &qword_10016E1D0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016E1B8);
  }
  return result;
}

uint64_t sub_1000D8C20(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001203CC, 1);
}

uint64_t sub_1000D8C30(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 320);
  sub_1000D8CCC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_BYTE *)(a1 + 248),
    *(_BYTE *)(a1 + 249));
  swift_retain(v2);
  return a1;
}

uint64_t sub_1000D8CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char a30)
{
  uint64_t v30;

  v30 = a4;
  if ((a30 & 1) != 0)
  {
    sub_1000769B4(a1, a2, a3 & 1);
  }
  else
  {
    a11 = a28;
    sub_100076AB8(a1, a2, a3, a4, a5, HIBYTE(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A58);
    sub_1000769B4(a18, a19, a20 & 1);
    v30 = a21;
  }
  swift_bridgeObjectRetain(v30);
  return swift_retain(a11);
}

uint64_t sub_1000D8D5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100035CA4(&qword_10016CA48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D8D9C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 320);
  sub_1000D8E38(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(DARootViewController **)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_BYTE *)(a1 + 248),
    *(_BYTE *)(a1 + 249));
  swift_release(v2);
  return a1;
}

void sub_1000D8E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,DARootViewController *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char a30)
{
  DARootViewController *v30;
  SEL v32;
  id v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;

  v30 = (DARootViewController *)a4;
  if ((a30 & 1) != 0)
  {
    sub_100076B54(a1, a2, a3 & 1);
  }
  else
  {
    a11 = a28;
    sub_100076AB8(a1, a2, a3, a4, a5, HIBYTE(a5) & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AEC);
    sub_100076B54(a18, a19, a20 & 1);
    v30 = a21;
  }
  swift_release(a11);
  swift_bridgeObjectRelease(v30, v32, v33, v34, v35, v36, v37, v38);
}

uint64_t sub_1000D8ED0(uint64_t result)
{
  *(_BYTE *)(result + 225) = 1;
  return result;
}

unint64_t sub_1000D8EDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E200;
  if (!qword_10016E200)
  {
    v1 = sub_100035D30(&qword_10016E1F0);
    sub_1000D8F60();
    sub_1000489C4(&qword_10016E218, &qword_10016E220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016E200);
  }
  return result;
}

unint64_t sub_1000D8F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E208;
  if (!qword_10016E208)
  {
    v1 = sub_100035D30(&qword_10016E210);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016E208);
  }
  return result;
}

uint64_t sub_1000D8FC4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_WORD *)(a1 + 224));
  return a1;
}

uint64_t sub_1000D9048(uint64_t result)
{
  *(_BYTE *)(result + 225) = 0;
  return result;
}

uint64_t sub_1000D9050(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(a1 + 152);
  v5 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 216);
  sub_100076AB8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32), *(_BYTE *)(a1 + 33), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076A58);
  sub_1000769B4(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_1000D90D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  DARootViewController *v5;
  uint64_t v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(a1 + 152);
  v5 = *(DARootViewController **)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 216);
  sub_100076AB8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32), *(_BYTE *)(a1 + 33), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100076AEC);
  sub_100076B54(v2, v3, v4);
  swift_release(v6);
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

unint64_t sub_1000D9164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E228;
  if (!qword_10016E228)
  {
    v1 = sub_100035D30(&qword_10016E1D8);
    sub_1000D91E8();
    sub_1000489C4(&qword_10016CAA0, &qword_10016CA48, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016E228);
  }
  return result;
}

unint64_t sub_1000D91E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E230;
  if (!qword_10016E230)
  {
    v1 = sub_100035D30(&qword_10016E238);
    sub_1000D926C();
    sub_1000489C4(&qword_10016CA90, &qword_10016CA98, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016E230);
  }
  return result;
}

unint64_t sub_1000D926C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E240;
  if (!qword_10016E240)
  {
    v1 = sub_100035D30(&qword_10016E248);
    sub_1000489C4(&qword_10016E250, &qword_10016E258, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10016E240);
  }
  return result;
}

id sub_1000D92F0(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  char *v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  objc_class *v28;
  id v29;
  objc_super v31;

  v9 = sub_100035CA4((uint64_t *)&unk_10016E470);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UIButton.Configuration(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v31 - v17;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_textSize] = 0x4028000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonTextSize] = 0x402E000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonWidthHeight] = 0x4036000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_horizontalSpacing] = 0x4020000000000000;
  v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_showsButton] = 0;
  v19 = &v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonAction];
  *v19 = 0;
  v19[1] = 0;
  v20 = &v4[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_text];
  *v20 = 0;
  v20[1] = 0;
  v21 = OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_label;
  v22 = objc_allocWithZone((Class)UILabel);
  v23 = v4;
  *(_QWORD *)&v4[v21] = objc_msgSend(v22, "init");
  v24 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 15.0, UIFontWeightMedium);
  static UIButton.Configuration.plain()();
  v25 = swift_allocObject(&unk_10013C228, 24, 7);
  *(_QWORD *)(v25 + 16) = v24;
  v26 = v24;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_10003CFA4, v25);
  v27 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 0, 1, v27);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v11);

  sub_100037118(0, &qword_10016AD30, UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  *(_QWORD *)&v23[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button] = UIButton.init(configuration:primaryAction:)(v16, 0);

  v28 = (objc_class *)type metadata accessor for DashboardSectionHeaderView();
  v31.receiver = v23;
  v31.super_class = v28;
  v29 = objc_msgSendSuper2(&v31, "initWithFrame:", a1, a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  return v29;
}

id sub_1000D95D0(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  objc_class *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  id v25;
  objc_super v27;

  v3 = sub_100035CA4((uint64_t *)&unk_10016E470);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UIButton.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v27 - v11;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_textSize] = 0x4028000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonTextSize] = 0x402E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonWidthHeight] = 0x4036000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_horizontalSpacing] = 0x4020000000000000;
  v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_showsButton] = 0;
  v13 = &v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonAction];
  *v13 = 0;
  v13[1] = 0;
  v14 = &v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_text];
  *v14 = 0;
  v14[1] = 0;
  v15 = OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_label;
  v16 = objc_allocWithZone((Class)UILabel);
  v17 = v1;
  *(_QWORD *)&v1[v15] = objc_msgSend(v16, "init");
  v18 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 15.0, UIFontWeightMedium);
  static UIButton.Configuration.plain()();
  v19 = swift_allocObject(&unk_10013C200, 24, 7);
  *(_QWORD *)(v19 + 16) = v18;
  v20 = v18;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_10003CF9C, v19);
  v21 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 0, 1, v21);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v5);

  sub_100037118(0, &qword_10016AD30, UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  *(_QWORD *)&v17[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button] = UIButton.init(configuration:primaryAction:)(v10, 0);

  v22 = (objc_class *)type metadata accessor for DashboardSectionHeaderView();
  v27.receiver = v17;
  v27.super_class = v22;
  v23 = objc_msgSendSuper2(&v27, "initWithCoder:", a1);

  v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25 = v23;
  v24(v12, v6);
  if (v25)

  return v25;
}

id sub_1000D98A0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id result;
  void *v21;
  id v22;
  uint64_t v23;

  v1 = v0;
  v2 = sub_100035CA4(&qword_10016E2D0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v23 - v6;
  v8 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_label];
  v9 = (void *)objc_opt_self(UIColor);
  v10 = objc_msgSend(v9, "grayColor");
  objc_msgSend(v8, "setTextColor:", v10);

  v11 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
  v12 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 12.0);
  v13 = objc_msgSend(v11, "scaledFontForFont:", v12);

  objc_msgSend(v8, "setFont:", v13);
  objc_msgSend(v8, "setAlpha:", 0.0);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button];
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setTitle:forState:", v15, 0);

  v16 = objc_msgSend(v9, "clearColor");
  objc_msgSend(v14, "setBackgroundColor:", v16);

  UIButton.configuration.getter();
  v17 = type metadata accessor for UIButton.Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v7, 1, v17))
  {
    sub_1000DA67C((uint64_t)v7, (uint64_t)v5);
    UIButton.configuration.setter(v5);
    sub_1000DA6C4((uint64_t)v7);
  }
  else
  {
    UIButton.Configuration.contentInsets.setter(2.5, 4.0, 2.5, 4.0);
    UIButton.configuration.setter(v7);
  }
  objc_msgSend(v14, "setAlpha:", 0.0);
  v18 = objc_msgSend(v14, "layer");
  objc_msgSend(v18, "setBorderWidth:", 1.25);

  v19 = objc_msgSend(v14, "layer");
  result = objc_msgSend(v1, "tintColor");
  if (result)
  {
    v21 = result;
    v22 = objc_msgSend(result, "CGColor");

    objc_msgSend(v19, "setBorderColor:", v22);
    objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v14, "addTarget:action:forControlEvents:", v1, "buttonPressedWithSender:", 64);
    objc_msgSend(v14, "addTarget:action:forControlEvents:", v1, "buttonDownWithSender:", 1);
    objc_msgSend(v14, "addTarget:action:forControlEvents:", v1, "buttonDownWithSender:", 16);
    objc_msgSend(v14, "addTarget:action:forControlEvents:", v1, "buttonUpWithSender:", 32);
    return objc_msgSend(v14, "addTarget:action:forControlEvents:", v1, "buttonUpWithSender:", 256);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000D9C68()
{
  char *v0;

  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_label]);
  return objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button]);
}

void sub_1000D9CB0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  double v26;
  double v27;
  double v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  Class isa;

  v1 = v0;
  v45 = (void *)objc_opt_self(NSLayoutConstraint);
  v2 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v3 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10010CED0;
  v4 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_label];
  v5 = objc_msgSend(v4, "topAnchor");
  v6 = objc_msgSend(v1, "topAnchor");
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

  *(_QWORD *)(v3 + 32) = v7;
  v8 = objc_msgSend(v4, "bottomAnchor");
  v9 = objc_msgSend(v1, "bottomAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v9, -9.0);

  *(_QWORD *)(v3 + 40) = v10;
  v11 = objc_msgSend(v4, "leadingAnchor");
  v12 = objc_msgSend(v1, "leadingAnchor");
  v13 = (void *)objc_opt_self(UIApplication);
  v14 = objc_msgSend(v13, "sharedApplication");
  sub_1000403CC();
  v16 = v15;

  sub_10007AB28();
  v18 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v12, (v16 - v17) * 0.5);

  *(_QWORD *)(v3 + 48) = v18;
  v19 = objc_msgSend(v4, "trailingAnchor");
  v20 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button];
  v21 = objc_msgSend(v20, "leadingAnchor");
  v22 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v21, 8.0);

  *(_QWORD *)(v3 + 56) = v22;
  v23 = objc_msgSend(v20, "trailingAnchor");
  v24 = objc_msgSend(v1, "trailingAnchor");
  v25 = objc_msgSend(v13, "sharedApplication");
  sub_1000403CC();
  v27 = v26;

  sub_10007AB28();
  v29 = objc_msgSend(v23, "constraintEqualToAnchor:constant:", v24, (v27 - v28) * -0.5);

  *(_QWORD *)(v3 + 64) = v29;
  v30 = objc_msgSend(v20, "centerYAnchor");
  v31 = objc_msgSend(v4, "centerYAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v3 + 72) = v32;
  v33 = objc_msgSend(v20, "widthAnchor");
  v34 = objc_msgSend(v33, "constraintEqualToConstant:", 22.0);

  *(_QWORD *)(v3 + 80) = v34;
  v35 = objc_msgSend(v20, "heightAnchor");
  v36 = objc_msgSend(v35, "constraintEqualToConstant:", 22.0);

  *(_QWORD *)(v3 + 88) = v36;
  specialized Array._endMutation()(v37);
  sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v3, v38, v39, v40, v41, v42, v43, v44);
  objc_msgSend(v45, "activateConstraints:", isa);

}

void sub_1000DA370(uint64_t a1)
{
  uint64_t v1;
  NSString v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v3);

  v5 = *(void **)(v1 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button);
  v6 = objc_msgSend(v5, "layer");
  v7 = objc_msgSend(v6, "borderColor");

  objc_msgSend(v4, "setFromValue:", v7);
  objc_msgSend(v4, "setToValue:", a1);
  objc_msgSend(v4, "setDuration:", 0.333);
  v8 = objc_msgSend(v5, "layer");
  objc_msgSend(v8, "setBorderColor:", a1);

  v9 = objc_msgSend(v5, "layer");
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "addAnimation:forKey:", v4, v10);

}

id sub_1000DA50C(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_label), "setAlpha:", 1.0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_showsButton) == 1)
    return objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_button), "setAlpha:", 1.0);
  return result;
}

void sub_1000DA578()
{
  uint64_t v0;
  SEL v1;
  id v2;
  int v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_100035D74(*(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonAction), *(_QWORD *)(v0 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonAction + 8));
  swift_bridgeObjectRelease(*(DARootViewController **)(v0 + OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_text + 8), v1, v2, v3, v4, v5, v6, v7);

}

id sub_1000DA5CC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DashboardSectionHeaderView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DashboardSectionHeaderView()
{
  return objc_opt_self(_TtC11Diagnostics26DashboardSectionHeaderView);
}

uint64_t sub_1000DA67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100035CA4(&qword_10016E2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DA6C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100035CA4(&qword_10016E2D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000DA704()
{
  char *v0;
  void *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v1 = v0;
  v2 = *(void (**)(uint64_t))&v0[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonAction];
  if (v2)
  {
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26DashboardSectionHeaderView_buttonAction + 8];
    v4 = swift_retain(v3);
    v2(v4);
    sub_100035D74((uint64_t)v2, v3);
  }
  v5 = objc_msgSend(v1, "tintColor");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "CGColor");

    sub_1000DA370((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000DA7B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t destroy for DeviceType(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s11Diagnostics10DeviceTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for DeviceType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for DeviceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF6 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483639);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 8;
  if (v4 >= 0xA)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeviceType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 8;
  }
  return result;
}

uint64_t sub_1000DA9E4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000DA9FC(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

Swift::Int sub_1000DAA2C(uint64_t a1, unint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a2 >= 9)
    String.hash(into:)(v5, a1, a2);
  else
    Hasher._combine(_:)(qword_10010EEE0[a2]);
  return Hasher._finalize()();
}

Swift::Int sub_1000DAA98()
{
  uint64_t v0;

  return sub_1000DAA2C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_1000DAAA0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v2 = v1[1];
  if (v2 >= 9)
    String.hash(into:)(a1, *v1, v2);
  else
    Hasher._combine(_:)(qword_10010EEE0[v2]);
}

Swift::Int sub_1000DAAF0(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v3 = *v1;
  v2 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v2 >= 9)
    String.hash(into:)(v5, v3, v2);
  else
    Hasher._combine(_:)(qword_10010EEE0[v2]);
  return Hasher._finalize()();
}

BOOL sub_1000DAB5C(uint64_t a1, uint64_t a2)
{
  return sub_1000DABB8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

unint64_t sub_1000DAB74()
{
  unint64_t result;

  result = qword_10016E2D8;
  if (!qword_10016E2D8)
  {
    result = swift_getWitnessTable(&unk_10010EE78, &type metadata for DeviceType);
    atomic_store(result, (unint64_t *)&qword_10016E2D8);
  }
  return result;
}

BOOL sub_1000DABB8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  Swift::Int v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, 0);
  if (a2 >= 9)
    String.hash(into:)(v10, a1, a2);
  else
    Hasher._combine(_:)(qword_10010EEE0[a2]);
  v8 = Hasher._finalize()();
  Hasher.init(_seed:)(v10, 0);
  if (a4 >= 9)
    String.hash(into:)(v10, a3, a4);
  else
    Hasher._combine(_:)(qword_10010EEE0[a4]);
  return v8 == Hasher._finalize()();
}

uint64_t destroy for PromptAction(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for PromptAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v3);
  v6 = v4;
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for PromptAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v8 = v6;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for PromptAction(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PromptAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptAction()
{
  return &type metadata for PromptAction;
}

void sub_1000DAEA0(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  SEL v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  DARootViewController **v20;
  DARootViewController *v21;
  uint64_t v22;
  SEL v23;
  id v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  SEL v34;
  id v35;
  int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42[3];

  v2 = 0;
  v3 = 0;
  v42[2] = Set.init(minimumCapacity:)(0, &type metadata for String, &protocol witness table for String);
  v41 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(63 - v4) >> 6;
  while (1)
  {
    if (v2)
    {
      v18 = *(_QWORD *)(v2 + 16);
      if (v18)
      {
        v19 = 0;
        v20 = (DARootViewController **)(v2 + 40);
        while (v19 < v18)
        {
          ++v19;
          v22 = (uint64_t)*(v20 - 1);
          v21 = *v20;
          swift_bridgeObjectRetain(*v20);
          sub_1000A92B8(v42, v22, v21);
          swift_bridgeObjectRelease((DARootViewController *)v42[1], v23, v24, v25, v26, v27, v28, v29);
          v18 = *(_QWORD *)(v2 + 16);
          v20 += 2;
          if (v19 == v18)
            goto LABEL_12;
        }
        __break(1u);
LABEL_34:
        sub_100040800(a1);
        swift_bridgeObjectRelease((DARootViewController *)v2, v34, v35, v36, v37, v38, v39, v40);
        return;
      }
    }
LABEL_12:
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v3 << 6);
      goto LABEL_6;
    }
    v30 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v30 >= v7)
      goto LABEL_34;
    v31 = *(_QWORD *)(v41 + 8 * v30);
    if (!v31)
      break;
LABEL_22:
    v6 = (v31 - 1) & v31;
    v9 = __clz(__rbit64(v31)) + (v30 << 6);
    v3 = v30;
LABEL_6:
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease((DARootViewController *)v2, v11, v12, v13, v14, v15, v16, v17);
    v2 = v10;
  }
  v32 = v3 + 2;
  if (v3 + 2 >= v7)
    goto LABEL_34;
  v31 = *(_QWORD *)(v41 + 8 * v32);
  if (v31)
    goto LABEL_18;
  v33 = v3 + 3;
  if (v3 + 3 >= v7)
    goto LABEL_34;
  v31 = *(_QWORD *)(v41 + 8 * v33);
  if (v31)
    goto LABEL_21;
  v32 = v3 + 4;
  if (v3 + 4 >= v7)
    goto LABEL_34;
  v31 = *(_QWORD *)(v41 + 8 * v32);
  if (v31)
    goto LABEL_18;
  v33 = v3 + 5;
  if (v3 + 5 >= v7)
    goto LABEL_34;
  v31 = *(_QWORD *)(v41 + 8 * v33);
  if (v31)
  {
LABEL_21:
    v30 = v33;
    goto LABEL_22;
  }
  v32 = v3 + 6;
  if (v3 + 6 >= v7)
    goto LABEL_34;
  v31 = *(_QWORD *)(v41 + 8 * v32);
  if (v31)
  {
LABEL_18:
    v30 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v7)
      goto LABEL_34;
    v31 = *(_QWORD *)(v41 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_22;
  }
LABEL_36:
  __break(1u);
}

void sub_1000DB1C0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  DARootViewController *v23;
  DARootViewController *v24;
  NSString v25;
  SEL v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  DARootViewController *v53;
  DARootViewController *v54;
  NSString v55;
  SEL v56;
  id v57;
  int v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  DARootViewController *v82;
  DARootViewController *v83;
  NSString v84;
  SEL v85;
  id v86;
  int v87;
  id v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  id v102;
  uint64_t v103;
  void *v104;
  void *v105;
  id v106;
  DARootViewController *v107;
  DARootViewController *v108;
  NSString v109;
  SEL v110;
  id v111;
  int v112;
  id v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  id v118;
  id v119;
  id v120;
  id v121;
  void *v122;
  void *v123;
  void *v124;
  id v125;
  uint64_t v126;
  void *v127;
  void *v128;
  id v129;
  DARootViewController *v130;
  DARootViewController *v131;
  NSString v132;
  SEL v133;
  id v134;
  int v135;
  id v136;
  id v137;
  id v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  uint64_t v145;
  void *v146;
  void *v147;
  id v148;
  DARootViewController *v149;
  DARootViewController *v150;
  NSString v151;
  SEL v152;
  id v153;
  int v154;
  id v155;
  id v156;
  id v157;
  id v158;
  void *v159;
  id v160;
  id v161;
  id v162;
  id v163;
  void *v164;
  void *v165;
  void *v166;
  id v167;
  uint64_t v168;
  void *v169;
  void *v170;
  id v171;
  DARootViewController *v172;
  DARootViewController *v173;
  NSString v174;
  SEL v175;
  id v176;
  int v177;
  id v178;
  id v179;
  id v180;
  id v181;
  void *v182;
  void *v183;
  uint64_t v184;
  void *v185;
  void *v186;
  id v187;
  id v188;
  id v189;
  char *v190;
  uint64_t v191;
  id v192;
  char *v193;
  uint64_t v194;
  void (*v195)(char *, char *, uint64_t);
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  void *v200;
  id v201;
  id v202;
  void *v203;
  uint64_t v204;
  id v205;
  DARootViewController *v206;
  DARootViewController *v207;
  NSString v208;
  SEL v209;
  id v210;
  int v211;
  id v212;
  id v213;
  id v214;
  id v215;
  void *v216;
  id v217;
  id v218;
  id v219;
  void *v220;
  void *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void *v227;
  id v228;
  id v229;
  id v230;
  void *v231;
  id v232;
  DARootViewController *v233;
  DARootViewController *v234;
  NSString v235;
  SEL v236;
  id v237;
  int v238;
  id v239;
  id v240;
  id v241;
  id v242;
  void *v243;
  id v244;
  id v245;
  void *v246;
  id v247;
  void *v248;
  id v249;
  void *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  void *v255;
  id v256;
  id v257;
  void *v258;
  id v259;
  DARootViewController *v260;
  DARootViewController *v261;
  NSString v262;
  SEL v263;
  id v264;
  int v265;
  id v266;
  id v267;
  id v268;
  id v269;
  void *v270;
  id v271;
  id v272;
  id v273;
  void *v274;
  id v275;
  void *v276;
  void *v277;
  uint64_t v278;
  id v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  id v284;
  uint64_t v285;
  char *v286;
  char *v287;

  v1 = v0;
  v2 = sub_100035CA4((uint64_t *)&unk_10016E470);
  __chkstk_darwin(v2);
  v4 = (char *)&v278 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UIButton.Configuration(0);
  v282 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v286 = (char *)&v278 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v287 = (char *)&v278 - v8;
  v9 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "handleTapOutside:");
  v10 = objc_msgSend(v0, "view");
  if (!v10)
  {
    __break(1u);
    goto LABEL_76;
  }
  v11 = v10;
  objc_msgSend(v10, "addGestureRecognizer:", v9);

  v12 = objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
  v13 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView;
  v14 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView] = v12;

  v15 = *(void **)&v0[v13];
  if (!v15)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  objc_msgSend(v15, "setContentInset:", 10.0, 20.0, 10.0, 20.0);
  v16 = objc_msgSend(v0, "view");
  if (!v16)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (!*(_QWORD *)&v0[v13])
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v17 = v16;
  v283 = v5;
  objc_msgSend(v16, "addSubview:");

  v18 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v19 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel;
  v20 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel] = v18;

  v21 = *(void **)&v1[v19];
  if (!v21)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v281 = v4;
  v22 = v21;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001CLL, (void *)0x8000000100119480);
  v24 = v23;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24, v26, v27, v28, v29, v30, v31, v32);
  objc_msgSend(v22, "setText:", v25);

  v33 = *(void **)&v1[v19];
  if (!v33)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v34 = (void *)objc_opt_self(UIFontMetrics);
  v35 = v33;
  v36 = objc_msgSend(v34, "defaultMetrics");
  v37 = (void *)objc_opt_self(UIFont);
  v38 = objc_msgSend(v37, "systemFontOfSize:weight:", 18.0, UIFontWeightRegular);
  v39 = objc_msgSend(v36, "scaledFontForFont:", v38);

  objc_msgSend(v35, "setFont:", v39);
  v40 = *(void **)&v1[v19];
  if (!v40)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  objc_msgSend(v40, "sizeToFit");
  v41 = *(void **)&v1[v19];
  if (!v41)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  objc_msgSend(v41, "setNumberOfLines:", 2);
  v42 = *(void **)&v1[v19];
  if (!v42)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  objc_msgSend(v42, "setAdjustsFontSizeToFitWidth:", 1);
  v43 = *(void **)&v1[v13];
  if (!v43)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (!*(_QWORD *)&v1[v19])
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  objc_msgSend(v43, "addSubview:");
  v44 = objc_msgSend(objc_allocWithZone((Class)ELSConsentSignatureView), "init");
  v45 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView;
  v46 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView] = v44;

  v47 = *(void **)&v1[v13];
  if (!v47)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v279 = v9;
  if (!*(_QWORD *)&v1[v45])
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  objc_msgSend(v47, "addSubview:");
  v48 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v49 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel;
  v50 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel] = v48;

  v51 = *(void **)&v1[v49];
  if (!v51)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v52 = v51;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001DLL, (void *)0x80000001001194A0);
  v54 = v53;
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v54, v56, v57, v58, v59, v60, v61, v62);
  objc_msgSend(v52, "setText:", v55);

  v63 = *(void **)&v1[v49];
  if (!v63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v280 = 0xD00000000000001DLL;
  objc_msgSend(v63, "setTextAlignment:", 1);
  v64 = *(void **)&v1[v49];
  if (!v64)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  v65 = (void *)objc_opt_self(UIColor);
  v66 = v64;
  v284 = v65;
  v67 = objc_msgSend(v65, "systemBackgroundColor");
  objc_msgSend(v66, "setBackgroundColor:", v67);

  v68 = *(void **)&v1[v49];
  if (!v68)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v69 = v68;
  v70 = objc_msgSend(v34, "defaultMetrics");
  v71 = objc_msgSend(v37, "systemFontOfSize:weight:", 32.0, UIFontWeightBold);
  v72 = objc_msgSend(v70, "scaledFontForFont:", v71);

  objc_msgSend(v69, "setFont:", v72);
  v73 = *(void **)&v1[v49];
  if (!v73)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  objc_msgSend(v73, "sizeToFit");
  v74 = *(void **)&v1[v49];
  if (!v74)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  objc_msgSend(v74, "setAdjustsFontSizeToFitWidth:", 1);
  v75 = *(void **)&v1[v49];
  if (!v75)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  objc_msgSend(v75, "setNumberOfLines:", 2);
  v76 = *(void **)&v1[v13];
  if (!v76)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  if (!*(_QWORD *)&v1[v49])
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  objc_msgSend(v76, "addSubview:");
  v77 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v78 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel;
  v79 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel] = v77;

  v80 = *(void **)&v1[v78];
  if (!v80)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  v81 = v80;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000020, (void *)0x80000001001194C0);
  v83 = v82;
  v84 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v83, v85, v86, v87, v88, v89, v90, v91);
  objc_msgSend(v81, "setText:", v84);

  v92 = *(void **)&v1[v78];
  if (!v92)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v93 = v92;
  v94 = objc_msgSend(v34, "defaultMetrics");
  v95 = objc_msgSend(v37, "systemFontOfSize:weight:", 18.0, UIFontWeightRegular);
  v96 = objc_msgSend(v94, "scaledFontForFont:", v95);

  objc_msgSend(v93, "setFont:", v96);
  v97 = *(void **)&v1[v78];
  if (!v97)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  objc_msgSend(v97, "sizeToFit");
  v98 = *(void **)&v1[v78];
  if (!v98)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  objc_msgSend(v98, "setAdjustsFontSizeToFitWidth:", 1);
  v99 = *(void **)&v1[v78];
  if (!v99)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  objc_msgSend(v99, "setTextAlignment:", 1);
  v100 = *(void **)&v1[v78];
  if (!v100)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  objc_msgSend(v100, "setNumberOfLines:", 2);
  v101 = *(void **)&v1[v13];
  if (!v101)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  if (!*(_QWORD *)&v1[v78])
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  objc_msgSend(v101, "addSubview:");
  v102 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v103 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel;
  v104 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel] = v102;

  v105 = *(void **)&v1[v103];
  if (!v105)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v106 = v105;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000022, (void *)0x80000001001194F0);
  v108 = v107;
  v109 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v108, v110, v111, v112, v113, v114, v115, v116);
  objc_msgSend(v106, "setText:", v109);

  v117 = *(void **)&v1[v103];
  if (!v117)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v118 = v117;
  v119 = objc_msgSend(v34, "defaultMetrics");
  v120 = objc_msgSend(v37, "systemFontOfSize:weight:", 18.0, UIFontWeightSemibold);
  v121 = objc_msgSend(v119, "scaledFontForFont:", v120);

  objc_msgSend(v118, "setFont:", v121);
  v122 = *(void **)&v1[v103];
  if (!v122)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  objc_msgSend(v122, "sizeToFit");
  v123 = *(void **)&v1[v103];
  if (!v123)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  objc_msgSend(v123, "setAdjustsFontSizeToFitWidth:", 1);
  v124 = *(void **)&v1[v13];
  if (!v124)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  if (!*(_QWORD *)&v1[v103])
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  objc_msgSend(v124, "addSubview:");
  v125 = objc_msgSend(objc_allocWithZone((Class)UITextField), "init");
  v126 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField;
  v127 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField] = v125;

  v128 = *(void **)&v1[v126];
  if (!v128)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v129 = v128;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000020, (void *)0x8000000100119450);
  v131 = v130;
  v132 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v131, v133, v134, v135, v136, v137, v138, v139);
  objc_msgSend(v129, "setPlaceholder:", v132);

  v140 = *(void **)&v1[v126];
  if (!v140)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  objc_msgSend(v140, "setKeyboardType:", 6);
  v141 = *(void **)&v1[v126];
  if (!v141)
  {
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  objc_msgSend(v141, "setReturnKeyType:", 4);
  v142 = *(void **)&v1[v126];
  if (!v142)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  objc_msgSend(v142, "setDelegate:", v1);
  v285 = v13;
  v143 = *(void **)&v1[v13];
  if (!v143)
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  if (!*(_QWORD *)&v1[v126])
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  objc_msgSend(v143, "addSubview:");
  v144 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v145 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel;
  v146 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel] = v144;

  v147 = *(void **)&v1[v145];
  if (!v147)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  v148 = v147;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000021, (void *)0x8000000100119520);
  v150 = v149;
  v151 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v150, v152, v153, v154, v155, v156, v157, v158);
  objc_msgSend(v148, "setText:", v151);

  v159 = *(void **)&v1[v145];
  if (!v159)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v160 = v159;
  v161 = objc_msgSend(v34, "defaultMetrics");
  v162 = objc_msgSend(v37, "systemFontOfSize:weight:", 18.0, UIFontWeightSemibold);
  v163 = objc_msgSend(v161, "scaledFontForFont:", v162);

  objc_msgSend(v160, "setFont:", v163);
  v164 = *(void **)&v1[v145];
  if (!v164)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  objc_msgSend(v164, "sizeToFit");
  v165 = *(void **)&v1[v145];
  if (!v165)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  objc_msgSend(v165, "setAdjustsFontSizeToFitWidth:", 1);
  v166 = *(void **)&v1[v285];
  if (!v166)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  if (!*(_QWORD *)&v1[v145])
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  objc_msgSend(v166, "addSubview:");
  v167 = objc_msgSend(objc_allocWithZone((Class)UITextField), "init");
  v168 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField;
  v169 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField] = v167;

  v170 = *(void **)&v1[v168];
  if (!v170)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  v171 = v170;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000020, (void *)0x8000000100119450);
  v173 = v172;
  v174 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v173, v175, v176, v177, v178, v179, v180, v181);
  objc_msgSend(v171, "setPlaceholder:", v174);

  v182 = *(void **)&v1[v168];
  if (!v182)
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  objc_msgSend(v182, "setKeyboardType:", 6);
  v183 = *(void **)&v1[v168];
  v184 = v283;
  if (!v183)
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  objc_msgSend(v183, "setReturnKeyType:", 9);
  v185 = *(void **)&v1[v168];
  if (!v185)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  objc_msgSend(v185, "setDelegate:", v1);
  v186 = *(void **)&v1[v285];
  if (!v186)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  if (!*(_QWORD *)&v1[v168])
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  objc_msgSend(v186, "addSubview:");
  v187 = objc_msgSend(v34, "defaultMetrics");
  objc_msgSend(v37, "defaultFontSize");
  v188 = objc_msgSend(v37, "systemFontOfSize:");
  v189 = objc_msgSend(v187, "scaledFontForFont:", v188);

  v190 = v287;
  static UIButton.Configuration.plain()();
  v191 = swift_allocObject(&unk_10013C4D8, 24, 7);
  *(_QWORD *)(v191 + 16) = v189;
  v192 = v189;
  v193 = v281;
  UIConfigurationTextAttributesTransformer.init(_:)(sub_10003CF9C, v191);
  v194 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 56))(v193, 0, 1, v194);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v193);

  sub_100037118(0, &qword_10016AD30, UIButton_ptr);
  v195 = *(void (**)(char *, char *, uint64_t))(v282 + 16);
  v196 = v286;
  v195(v286, v190, v184);
  v197 = UIButton.init(configuration:primaryAction:)(v196, 0);
  v198 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn;
  v199 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn] = v197;

  v200 = *(void **)&v1[v198];
  if (!v200)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v201 = v200;
  v202 = objc_msgSend(v284, "systemBackgroundColor");
  objc_msgSend(v201, "setBackgroundColor:", v202);

  v203 = *(void **)&v1[v198];
  v204 = v285;
  if (!v203)
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  v205 = v203;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, v280, (void *)0x8000000100119550);
  v207 = v206;
  v208 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v207, v209, v210, v211, v212, v213, v214, v215);
  objc_msgSend(v205, "setTitle:forState:", v208, 0);

  v216 = *(void **)&v1[v198];
  if (!v216)
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v217 = objc_allocWithZone((Class)UIColor);
  v218 = v216;
  v219 = objc_msgSend(v217, "initWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0);
  objc_msgSend(v218, "setTitleColor:forState:", v219, 0);

  v220 = *(void **)&v1[v198];
  if (!v220)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  objc_msgSend(v220, "addTarget:action:forControlEvents:", v1, "clearSignature", 64);
  v221 = *(void **)&v1[v204];
  if (!v221)
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if (!*(_QWORD *)&v1[v198])
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  objc_msgSend(v221, "addSubview:");
  v222 = v286;
  v223 = v283;
  v195(v286, v287, v283);
  v224 = UIButton.init(configuration:primaryAction:)(v222, 0);
  v225 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn;
  v226 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn] = v224;

  v227 = *(void **)&v1[v225];
  if (!v227)
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  v228 = objc_allocWithZone((Class)UIColor);
  v229 = v227;
  v230 = objc_msgSend(v228, "initWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0);
  objc_msgSend(v229, "setBackgroundColor:", v230);

  v231 = *(void **)&v1[v225];
  if (!v231)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v232 = v231;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001FLL, (void *)0x8000000100119570);
  v234 = v233;
  v235 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v234, v236, v237, v238, v239, v240, v241, v242);
  objc_msgSend(v232, "setTitle:forState:", v235, 0);

  v243 = *(void **)&v1[v225];
  if (!v243)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v244 = v243;
  v245 = objc_msgSend(v284, "whiteColor");
  objc_msgSend(v244, "setTitleColor:forState:", v245, 0);

  v246 = *(void **)&v1[v225];
  if (!v246)
  {
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  v247 = objc_msgSend(v246, "layer");
  objc_msgSend(v247, "setCornerRadius:", 10.0);

  v248 = *(void **)&v1[v225];
  if (!v248)
  {
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  objc_msgSend(v248, "addTarget:action:forControlEvents:", v1, "generateConsentDocument", 64);
  v249 = objc_msgSend(v1, "view");
  if (!v249)
  {
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  if (!*(_QWORD *)&v1[v225])
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  v250 = v249;
  objc_msgSend(v249, "addSubview:");

  v251 = v286;
  v195(v286, v287, v223);
  v252 = UIButton.init(configuration:primaryAction:)(v251, 0);
  v253 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn;
  v254 = *(void **)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn] = v252;

  v255 = *(void **)&v1[v253];
  if (!v255)
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  v256 = v255;
  v257 = objc_msgSend(v284, "systemBackgroundColor");
  objc_msgSend(v256, "setBackgroundColor:", v257);

  v258 = *(void **)&v1[v253];
  if (!v258)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v259 = v258;
  sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD00000000000001ELL, (void *)0x80000001001188B0);
  v261 = v260;
  v262 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v261, v263, v264, v265, v266, v267, v268, v269);
  objc_msgSend(v259, "setTitle:forState:", v262, 0);

  v270 = *(void **)&v1[v253];
  if (!v270)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  v271 = objc_allocWithZone((Class)UIColor);
  v272 = v270;
  v273 = objc_msgSend(v271, "initWithRed:green:blue:alpha:", 0.0, 0.478431373, 1.0, 1.0);
  objc_msgSend(v272, "setTitleColor:forState:", v273, 0);

  v274 = *(void **)&v1[v253];
  if (!v274)
  {
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  objc_msgSend(v274, "addTarget:action:forControlEvents:", v1, "cancelConsent", 64);
  v275 = objc_msgSend(v1, "view");
  v276 = v279;
  if (!v275)
  {
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  if (*(_QWORD *)&v1[v253])
  {
    v277 = v275;
    objc_msgSend(v275, "addSubview:");

    (*(void (**)(char *, uint64_t))(v282 + 8))(v287, v223);
    return;
  }
LABEL_147:
  __break(1u);
}

void sub_1000DC5AC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  Class isa;
  SEL v56;
  id v57;
  int v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  Class v82;
  SEL v83;
  id v84;
  int v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  Class v112;
  SEL v113;
  id v114;
  int v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  void *v121;
  id v122;
  void *v123;
  id v124;
  id v125;
  void *v126;
  id v127;
  void *v128;
  id v129;
  id v130;
  void *v131;
  id v132;
  id v133;
  void *v134;
  id v135;
  id v136;
  uint64_t v137;
  Class v138;
  SEL v139;
  id v140;
  int v141;
  id v142;
  id v143;
  id v144;
  id v145;
  uint64_t v146;
  void *v147;
  id v148;
  void *v149;
  id v150;
  id v151;
  void *v152;
  id v153;
  void *v154;
  id v155;
  id v156;
  void *v157;
  id v158;
  void *v159;
  id v160;
  id v161;
  void *v162;
  id v163;
  id v164;
  uint64_t v165;
  Class v166;
  SEL v167;
  id v168;
  int v169;
  id v170;
  id v171;
  id v172;
  id v173;
  uint64_t v174;
  void *v175;
  id v176;
  void *v177;
  id v178;
  id v179;
  void *v180;
  id v181;
  void *v182;
  id v183;
  id v184;
  void *v185;
  id v186;
  id v187;
  void *v188;
  id v189;
  id v190;
  uint64_t v191;
  Class v192;
  SEL v193;
  id v194;
  int v195;
  id v196;
  id v197;
  id v198;
  id v199;
  uint64_t v200;
  void *v201;
  id v202;
  void *v203;
  id v204;
  id v205;
  void *v206;
  id v207;
  void *v208;
  id v209;
  id v210;
  void *v211;
  id v212;
  void *v213;
  id v214;
  id v215;
  void *v216;
  id v217;
  id v218;
  uint64_t v219;
  Class v220;
  SEL v221;
  id v222;
  int v223;
  id v224;
  id v225;
  id v226;
  id v227;
  uint64_t v228;
  void *v229;
  id v230;
  void *v231;
  id v232;
  id v233;
  void *v234;
  id v235;
  void *v236;
  id v237;
  id v238;
  void *v239;
  id v240;
  void *v241;
  id v242;
  id v243;
  void *v244;
  id v245;
  id v246;
  uint64_t v247;
  Class v248;
  SEL v249;
  id v250;
  int v251;
  id v252;
  id v253;
  id v254;
  id v255;
  uint64_t v256;
  void *v257;
  id v258;
  void *v259;
  id v260;
  id v261;
  void *v262;
  id v263;
  void *v264;
  id v265;
  id v266;
  void *v267;
  id v268;
  void *v269;
  id v270;
  id v271;
  void *v272;
  id v273;
  id v274;
  uint64_t v275;
  Class v276;
  SEL v277;
  id v278;
  int v279;
  id v280;
  id v281;
  id v282;
  id v283;
  uint64_t v284;
  void *v285;
  id v286;
  void *v287;
  id v288;
  id v289;
  void *v290;
  id v291;
  void *v292;
  id v293;
  id v294;
  void *v295;
  id v296;
  void *v297;
  id v298;
  id v299;
  uint64_t v300;
  Class v301;
  SEL v302;
  id v303;
  int v304;
  id v305;
  id v306;
  id v307;
  id v308;
  uint64_t v309;
  void *v310;
  id v311;
  id v312;
  void *v313;
  id v314;
  id v315;
  id v316;
  void *v317;
  id v318;
  id v319;
  void *v320;
  id v321;
  id v322;
  id v323;
  void *v324;
  id v325;
  void *v326;
  id v327;
  id v328;
  void *v329;
  id v330;
  id v331;
  uint64_t v332;
  Class v333;
  SEL v334;
  id v335;
  int v336;
  id v337;
  id v338;
  id v339;
  id v340;
  uint64_t v341;
  void *v342;
  id v343;
  id v344;
  void *v345;
  id v346;
  id v347;
  id v348;
  void *v349;
  id v350;
  id v351;
  void *v352;
  id v353;
  id v354;
  id v355;
  void *v356;
  id v357;
  id v358;
  void *v359;
  id v360;
  id v361;
  id v362;
  uint64_t v363;
  SEL v364;
  id v365;
  int v366;
  id v367;
  id v368;
  id v369;
  id v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  Class v381;

  v1 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView];
  if (!v2)
  {
    __break(1u);
    goto LABEL_98;
  }
  v3 = v0;
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel;
  v5 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel];
  if (!v5)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v378 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel;
  v6 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel];
  if (!v6)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v7 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel;
  v8 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel];
  if (!v8)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v375 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField;
  v9 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField];
  if (!v9)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel;
  v11 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel];
  if (!v11)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v374 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField;
  v12 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField];
  if (!v12)
  {
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v373 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel;
  v13 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel];
  if (!v13)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  v372 = v7;
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v379 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView;
  v14 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView];
  if (!v14)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v15 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn;
  v16 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn];
  if (!v16)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v376 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn;
  v17 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn];
  if (!v17)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v371 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn;
  v18 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn];
  if (!v18)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v380 = sub_100035CA4((uint64_t *)&unk_10016ACE0);
  v19 = swift_allocObject(v380, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10010CA80;
  v20 = *(void **)&v3[v1];
  if (!v20)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  v21 = objc_msgSend(v20, "leadingAnchor");
  v22 = objc_msgSend(v3, "view");
  if (!v22)
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "safeAreaLayoutGuide");

  v25 = objc_msgSend(v24, "leadingAnchor");
  v26 = objc_msgSend(v21, "constraintEqualToAnchor:", v25);

  *(_QWORD *)(v19 + 32) = v26;
  v27 = *(void **)&v3[v1];
  if (!v27)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v28 = objc_msgSend(v27, "trailingAnchor");
  v29 = objc_msgSend(v3, "view");
  if (!v29)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "safeAreaLayoutGuide");

  v32 = objc_msgSend(v31, "trailingAnchor");
  v33 = objc_msgSend(v28, "constraintEqualToAnchor:", v32);

  *(_QWORD *)(v19 + 40) = v33;
  v34 = *(void **)&v3[v1];
  if (!v34)
  {
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v35 = objc_msgSend(v34, "topAnchor");
  v36 = objc_msgSend(v3, "view");
  if (!v36)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, "safeAreaLayoutGuide");

  v39 = objc_msgSend(v38, "topAnchor");
  v40 = objc_msgSend(v35, "constraintEqualToAnchor:", v39);

  *(_QWORD *)(v19 + 48) = v40;
  v41 = *(void **)&v3[v1];
  if (!v41)
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  v42 = objc_msgSend(v41, "bottomAnchor");
  v43 = *(void **)&v3[v376];
  if (!v43)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v44 = objc_msgSend(v43, "topAnchor");
  v45 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v44, 20.0);

  *(_QWORD *)(v19 + 56) = v45;
  v46 = *(void **)&v3[v1];
  if (!v46)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  v377 = v10;
  v47 = objc_msgSend(v46, "contentLayoutGuide");
  v48 = objc_msgSend(v47, "widthAnchor");

  v49 = objc_msgSend(v3, "view");
  if (!v49)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v50 = v49;
  v51 = (void *)objc_opt_self(NSLayoutConstraint);
  v52 = objc_msgSend(v50, "widthAnchor");

  v53 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v52, -40.0);
  *(_QWORD *)(v19 + 64) = v53;
  specialized Array._endMutation()(v54);
  sub_100037118(0, (unint64_t *)&qword_10016B060, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v19, v56, v57, v58, v59, v60, v61, v62);
  objc_msgSend(v51, "activateConstraints:", isa);

  v63 = swift_allocObject(v380, 56, 7);
  *(_OWORD *)(v63 + 16) = xmmword_10010D870;
  v64 = *(void **)&v3[v4];
  if (!v64)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  v65 = objc_msgSend(v64, "topAnchor");
  v66 = *(void **)&v3[v1];
  if (!v66)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v67 = objc_msgSend(v66, "topAnchor");
  v68 = objc_msgSend(v65, "constraintEqualToAnchor:", v67);

  *(_QWORD *)(v63 + 32) = v68;
  v69 = *(void **)&v3[v4];
  if (!v69)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  v70 = objc_msgSend(v69, "leadingAnchor");
  v71 = *(void **)&v3[v1];
  if (!v71)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  v72 = objc_msgSend(v71, "contentLayoutGuide");
  v73 = objc_msgSend(v72, "leadingAnchor");

  v74 = objc_msgSend(v70, "constraintEqualToAnchor:", v73);
  *(_QWORD *)(v63 + 40) = v74;
  v75 = *(void **)&v3[v4];
  if (!v75)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  v76 = objc_msgSend(v75, "trailingAnchor");
  v77 = *(void **)&v3[v1];
  if (!v77)
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  v78 = objc_msgSend(v77, "contentLayoutGuide");
  v79 = objc_msgSend(v78, "trailingAnchor");

  v80 = objc_msgSend(v76, "constraintEqualToAnchor:", v79);
  *(_QWORD *)(v63 + 48) = v80;
  specialized Array._endMutation()(v81);
  v82 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v63, v83, v84, v85, v86, v87, v88, v89);
  objc_msgSend(v51, "activateConstraints:", v82);

  v90 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v90 + 16) = xmmword_10010BF30;
  v91 = *(void **)&v3[v378];
  if (!v91)
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  v92 = objc_msgSend(v91, "centerXAnchor");
  v93 = *(void **)&v3[v4];
  if (!v93)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  v94 = objc_msgSend(v93, "centerXAnchor");
  v95 = objc_msgSend(v92, "constraintEqualToAnchor:", v94);

  *(_QWORD *)(v90 + 32) = v95;
  v96 = *(void **)&v3[v378];
  if (!v96)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v97 = objc_msgSend(v96, "topAnchor");
  v98 = *(void **)&v3[v4];
  if (!v98)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  v99 = objc_msgSend(v98, "bottomAnchor");
  v100 = objc_msgSend(v97, "constraintEqualToAnchor:constant:", v99, 30.0);

  *(_QWORD *)(v90 + 40) = v100;
  v101 = *(void **)&v3[v378];
  if (!v101)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v102 = objc_msgSend(v101, "leadingAnchor");
  v103 = *(void **)&v3[v1];
  if (!v103)
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  v104 = objc_msgSend(v103, "leadingAnchor");
  v105 = objc_msgSend(v102, "constraintEqualToAnchor:", v104);

  *(_QWORD *)(v90 + 48) = v105;
  v106 = *(void **)&v3[v378];
  if (!v106)
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  v107 = objc_msgSend(v106, "trailingAnchor");
  v108 = *(void **)&v3[v1];
  if (!v108)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  v109 = objc_msgSend(v108, "trailingAnchor");
  v110 = objc_msgSend(v107, "constraintEqualToAnchor:", v109);

  *(_QWORD *)(v90 + 56) = v110;
  specialized Array._endMutation()(v111);
  v112 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v90, v113, v114, v115, v116, v117, v118, v119);
  objc_msgSend(v51, "activateConstraints:", v112);

  v120 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v120 + 16) = xmmword_10010BF30;
  v121 = *(void **)&v3[v372];
  if (!v121)
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  v122 = objc_msgSend(v121, "leadingAnchor");
  v123 = *(void **)&v3[v1];
  if (!v123)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  v124 = objc_msgSend(v123, "leadingAnchor");
  v125 = objc_msgSend(v122, "constraintEqualToAnchor:", v124);

  *(_QWORD *)(v120 + 32) = v125;
  v126 = *(void **)&v3[v372];
  if (!v126)
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  v127 = objc_msgSend(v126, "topAnchor");
  v128 = *(void **)&v3[v378];
  if (!v128)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v129 = objc_msgSend(v128, "bottomAnchor");
  v130 = objc_msgSend(v127, "constraintEqualToAnchor:constant:", v129, 20.0);

  *(_QWORD *)(v120 + 40) = v130;
  v131 = *(void **)&v3[v372];
  if (!v131)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v132 = objc_msgSend(v131, "widthAnchor");
  v133 = objc_msgSend(v132, "constraintEqualToConstant:", 100.0);

  *(_QWORD *)(v120 + 48) = v133;
  v134 = *(void **)&v3[v372];
  if (!v134)
  {
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  v135 = objc_msgSend(v134, "heightAnchor");
  v136 = objc_msgSend(v135, "constraintEqualToConstant:", 42.0);

  *(_QWORD *)(v120 + 56) = v136;
  specialized Array._endMutation()(v137);
  v138 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v120, v139, v140, v141, v142, v143, v144, v145);
  objc_msgSend(v51, "activateConstraints:", v138);

  v146 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v146 + 16) = xmmword_10010BF30;
  v147 = *(void **)&v3[v375];
  if (!v147)
  {
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v148 = objc_msgSend(v147, "topAnchor");
  v149 = *(void **)&v3[v372];
  if (!v149)
  {
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  v150 = objc_msgSend(v149, "topAnchor");
  v151 = objc_msgSend(v148, "constraintEqualToAnchor:", v150);

  *(_QWORD *)(v146 + 32) = v151;
  v152 = *(void **)&v3[v375];
  if (!v152)
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  v153 = objc_msgSend(v152, "leadingAnchor");
  v154 = *(void **)&v3[v372];
  if (!v154)
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  v155 = objc_msgSend(v154, "trailingAnchor");
  v156 = objc_msgSend(v153, "constraintEqualToAnchor:constant:", v155, 30.0);

  *(_QWORD *)(v146 + 40) = v156;
  v157 = *(void **)&v3[v375];
  if (!v157)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v158 = objc_msgSend(v157, "trailingAnchor");
  v159 = *(void **)&v3[v1];
  if (!v159)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  v160 = objc_msgSend(v159, "trailingAnchor");
  v161 = objc_msgSend(v158, "constraintEqualToAnchor:", v160);

  *(_QWORD *)(v146 + 48) = v161;
  v162 = *(void **)&v3[v375];
  if (!v162)
  {
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  v163 = objc_msgSend(v162, "heightAnchor");
  v164 = objc_msgSend(v163, "constraintEqualToConstant:", 42.0);

  *(_QWORD *)(v146 + 56) = v164;
  specialized Array._endMutation()(v165);
  v166 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v146, v167, v168, v169, v170, v171, v172, v173);
  objc_msgSend(v51, "activateConstraints:", v166);

  v174 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v174 + 16) = xmmword_10010BF30;
  v175 = *(void **)&v3[v377];
  if (!v175)
  {
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  v176 = objc_msgSend(v175, "leadingAnchor");
  v177 = *(void **)&v3[v1];
  if (!v177)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  v178 = objc_msgSend(v177, "leadingAnchor");
  v179 = objc_msgSend(v176, "constraintEqualToAnchor:", v178);

  *(_QWORD *)(v174 + 32) = v179;
  v180 = *(void **)&v3[v377];
  if (!v180)
  {
LABEL_148:
    __break(1u);
    goto LABEL_149;
  }
  v181 = objc_msgSend(v180, "topAnchor");
  v182 = *(void **)&v3[v372];
  if (!v182)
  {
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v183 = objc_msgSend(v182, "bottomAnchor");
  v184 = objc_msgSend(v181, "constraintEqualToAnchor:constant:", v183, 15.0);

  *(_QWORD *)(v174 + 40) = v184;
  v185 = *(void **)&v3[v377];
  if (!v185)
  {
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v186 = objc_msgSend(v185, "widthAnchor");
  v187 = objc_msgSend(v186, "constraintEqualToConstant:", 100.0);

  *(_QWORD *)(v174 + 48) = v187;
  v188 = *(void **)&v3[v377];
  if (!v188)
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v189 = objc_msgSend(v188, "heightAnchor");
  v190 = objc_msgSend(v189, "constraintEqualToConstant:", 42.0);

  *(_QWORD *)(v174 + 56) = v190;
  specialized Array._endMutation()(v191);
  v192 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v174, v193, v194, v195, v196, v197, v198, v199);
  objc_msgSend(v51, "activateConstraints:", v192);

  v200 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v200 + 16) = xmmword_10010BF30;
  v201 = *(void **)&v3[v374];
  if (!v201)
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  v202 = objc_msgSend(v201, "topAnchor");
  v203 = *(void **)&v3[v377];
  if (!v203)
  {
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  v204 = objc_msgSend(v203, "topAnchor");
  v205 = objc_msgSend(v202, "constraintEqualToAnchor:", v204);

  *(_QWORD *)(v200 + 32) = v205;
  v206 = *(void **)&v3[v374];
  if (!v206)
  {
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v207 = objc_msgSend(v206, "leadingAnchor");
  v208 = *(void **)&v3[v377];
  if (!v208)
  {
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v209 = objc_msgSend(v208, "trailingAnchor");
  v210 = objc_msgSend(v207, "constraintEqualToAnchor:constant:", v209, 30.0);

  *(_QWORD *)(v200 + 40) = v210;
  v211 = *(void **)&v3[v374];
  if (!v211)
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  v212 = objc_msgSend(v211, "trailingAnchor");
  v213 = *(void **)&v3[v1];
  if (!v213)
  {
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
  v214 = objc_msgSend(v213, "trailingAnchor");
  v215 = objc_msgSend(v212, "constraintEqualToAnchor:", v214);

  *(_QWORD *)(v200 + 48) = v215;
  v216 = *(void **)&v3[v374];
  if (!v216)
  {
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  v217 = objc_msgSend(v216, "heightAnchor");
  v218 = objc_msgSend(v217, "constraintEqualToConstant:", 42.0);

  *(_QWORD *)(v200 + 56) = v218;
  specialized Array._endMutation()(v219);
  v220 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v200, v221, v222, v223, v224, v225, v226, v227);
  objc_msgSend(v51, "activateConstraints:", v220);

  v228 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v228 + 16) = xmmword_10010BF30;
  v229 = *(void **)&v3[v373];
  if (!v229)
  {
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  v230 = objc_msgSend(v229, "topAnchor");
  v231 = *(void **)&v3[v377];
  if (!v231)
  {
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
  v232 = objc_msgSend(v231, "bottomAnchor");
  v233 = objc_msgSend(v230, "constraintEqualToAnchor:constant:", v232, 30.0);

  *(_QWORD *)(v228 + 32) = v233;
  v234 = *(void **)&v3[v373];
  if (!v234)
  {
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  v235 = objc_msgSend(v234, "leftAnchor");
  v236 = *(void **)&v3[v1];
  if (!v236)
  {
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
  v237 = objc_msgSend(v236, "leftAnchor");
  v238 = objc_msgSend(v235, "constraintEqualToAnchor:", v237);

  *(_QWORD *)(v228 + 40) = v238;
  v239 = *(void **)&v3[v373];
  if (!v239)
  {
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
  v240 = objc_msgSend(v239, "rightAnchor");
  v241 = *(void **)&v3[v1];
  if (!v241)
  {
LABEL_164:
    __break(1u);
    goto LABEL_165;
  }
  v242 = objc_msgSend(v241, "rightAnchor");
  v243 = objc_msgSend(v240, "constraintEqualToAnchor:", v242);

  *(_QWORD *)(v228 + 48) = v243;
  v244 = *(void **)&v3[v373];
  if (!v244)
  {
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  v245 = objc_msgSend(v244, "heightAnchor");
  v246 = objc_msgSend(v245, "constraintEqualToConstant:", 42.0);

  *(_QWORD *)(v228 + 56) = v246;
  specialized Array._endMutation()(v247);
  v248 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v228, v249, v250, v251, v252, v253, v254, v255);
  objc_msgSend(v51, "activateConstraints:", v248);

  v256 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v256 + 16) = xmmword_10010BF30;
  v257 = *(void **)&v3[v379];
  if (!v257)
  {
LABEL_166:
    __break(1u);
    goto LABEL_167;
  }
  v258 = objc_msgSend(v257, "topAnchor");
  v259 = *(void **)&v3[v373];
  if (!v259)
  {
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
  v260 = objc_msgSend(v259, "bottomAnchor");
  v261 = objc_msgSend(v258, "constraintEqualToAnchor:constant:", v260, 20.0);

  *(_QWORD *)(v256 + 32) = v261;
  v262 = *(void **)&v3[v379];
  if (!v262)
  {
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  v263 = objc_msgSend(v262, "leftAnchor");
  v264 = *(void **)&v3[v1];
  if (!v264)
  {
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  v265 = objc_msgSend(v264, "leftAnchor");
  v266 = objc_msgSend(v263, "constraintEqualToAnchor:", v265);

  *(_QWORD *)(v256 + 40) = v266;
  v267 = *(void **)&v3[v379];
  if (!v267)
  {
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  v268 = objc_msgSend(v267, "rightAnchor");
  v269 = *(void **)&v3[v1];
  if (!v269)
  {
LABEL_171:
    __break(1u);
    goto LABEL_172;
  }
  v270 = objc_msgSend(v269, "rightAnchor");
  v271 = objc_msgSend(v268, "constraintEqualToAnchor:", v270);

  *(_QWORD *)(v256 + 48) = v271;
  v272 = *(void **)&v3[v379];
  if (!v272)
  {
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }
  v273 = objc_msgSend(v272, "heightAnchor");
  v274 = objc_msgSend(v273, "constraintEqualToConstant:", 200.0);

  *(_QWORD *)(v256 + 56) = v274;
  specialized Array._endMutation()(v275);
  v276 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v256, v277, v278, v279, v280, v281, v282, v283);
  objc_msgSend(v51, "activateConstraints:", v276);

  v284 = swift_allocObject(v380, 56, 7);
  *(_OWORD *)(v284 + 16) = xmmword_10010D870;
  v285 = *(void **)&v3[v15];
  if (!v285)
  {
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  v286 = objc_msgSend(v285, "centerXAnchor");
  v287 = *(void **)&v3[v379];
  if (!v287)
  {
LABEL_174:
    __break(1u);
    goto LABEL_175;
  }
  v288 = objc_msgSend(v287, "centerXAnchor");
  v289 = objc_msgSend(v286, "constraintEqualToAnchor:", v288);

  *(_QWORD *)(v284 + 32) = v289;
  v290 = *(void **)&v3[v15];
  if (!v290)
  {
LABEL_175:
    __break(1u);
    goto LABEL_176;
  }
  v291 = objc_msgSend(v290, "topAnchor");
  v292 = *(void **)&v3[v379];
  if (!v292)
  {
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  v293 = objc_msgSend(v292, "bottomAnchor");
  v294 = objc_msgSend(v291, "constraintEqualToAnchor:constant:", v293, 10.0);

  *(_QWORD *)(v284 + 40) = v294;
  v295 = *(void **)&v3[v15];
  if (!v295)
  {
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  v296 = objc_msgSend(v295, "bottomAnchor");
  v297 = *(void **)&v3[v1];
  if (!v297)
  {
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  v298 = objc_msgSend(v297, "bottomAnchor");
  v299 = objc_msgSend(v296, "constraintEqualToAnchor:", v298);

  *(_QWORD *)(v284 + 48) = v299;
  specialized Array._endMutation()(v300);
  v301 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v284, v302, v303, v304, v305, v306, v307, v308);
  objc_msgSend(v51, "activateConstraints:", v301);

  v309 = swift_allocObject(v380, 64, 7);
  *(_OWORD *)(v309 + 16) = xmmword_10010BF30;
  v310 = *(void **)&v3[v376];
  if (!v310)
  {
LABEL_179:
    __break(1u);
    goto LABEL_180;
  }
  v311 = objc_msgSend(v310, "leadingAnchor");
  v312 = objc_msgSend(v3, "view");
  if (!v312)
  {
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  v313 = v312;
  v314 = objc_msgSend(v312, "safeAreaLayoutGuide");

  v315 = objc_msgSend(v314, "leadingAnchor");
  v316 = objc_msgSend(v311, "constraintEqualToAnchor:constant:", v315, 40.0);

  *(_QWORD *)(v309 + 32) = v316;
  v317 = *(void **)&v3[v376];
  if (!v317)
  {
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  v318 = objc_msgSend(v317, "trailingAnchor");
  v319 = objc_msgSend(v3, "view");
  if (!v319)
  {
LABEL_182:
    __break(1u);
    goto LABEL_183;
  }
  v320 = v319;
  v321 = objc_msgSend(v319, "safeAreaLayoutGuide");

  v322 = objc_msgSend(v321, "trailingAnchor");
  v323 = objc_msgSend(v318, "constraintEqualToAnchor:constant:", v322, -40.0);

  *(_QWORD *)(v309 + 40) = v323;
  v324 = *(void **)&v3[v376];
  if (!v324)
  {
LABEL_183:
    __break(1u);
    goto LABEL_184;
  }
  v325 = objc_msgSend(v324, "bottomAnchor");
  v326 = *(void **)&v3[v371];
  if (!v326)
  {
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }
  v327 = objc_msgSend(v326, "topAnchor");
  v328 = objc_msgSend(v325, "constraintEqualToAnchor:constant:", v327, -20.0);

  *(_QWORD *)(v309 + 48) = v328;
  v329 = *(void **)&v3[v376];
  if (!v329)
  {
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  v330 = objc_msgSend(v329, "heightAnchor");
  v331 = objc_msgSend(v330, "constraintEqualToConstant:", 42.0);

  *(_QWORD *)(v309 + 56) = v331;
  specialized Array._endMutation()(v332);
  v333 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease((DARootViewController *)v309, v334, v335, v336, v337, v338, v339, v340);
  objc_msgSend(v51, "activateConstraints:", v333);

  v341 = swift_allocObject(v380, 56, 7);
  *(_OWORD *)(v341 + 16) = xmmword_10010D870;
  v342 = *(void **)&v3[v371];
  if (!v342)
  {
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }
  v343 = objc_msgSend(v342, "leadingAnchor");
  v344 = objc_msgSend(v3, "view");
  if (!v344)
  {
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  v345 = v344;
  v346 = objc_msgSend(v344, "safeAreaLayoutGuide");

  v347 = objc_msgSend(v346, "leadingAnchor");
  v348 = objc_msgSend(v343, "constraintEqualToAnchor:constant:", v347, 40.0);

  *(_QWORD *)(v341 + 32) = v348;
  v349 = *(void **)&v3[v371];
  if (!v349)
  {
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  v350 = objc_msgSend(v349, "trailingAnchor");
  v351 = objc_msgSend(v3, "view");
  if (!v351)
  {
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  v352 = v351;
  v353 = objc_msgSend(v351, "safeAreaLayoutGuide");

  v354 = objc_msgSend(v353, "trailingAnchor");
  v355 = objc_msgSend(v350, "constraintEqualToAnchor:constant:", v354, -40.0);

  *(_QWORD *)(v341 + 40) = v355;
  v356 = *(void **)&v3[v371];
  if (!v356)
  {
LABEL_190:
    __break(1u);
    goto LABEL_191;
  }
  v357 = objc_msgSend(v356, "bottomAnchor");
  v358 = objc_msgSend(v3, "view");
  if (v358)
  {
    v359 = v358;
    v360 = objc_msgSend(v358, "safeAreaLayoutGuide");

    v361 = objc_msgSend(v360, "bottomAnchor");
    v362 = objc_msgSend(v357, "constraintEqualToAnchor:constant:", v361, -20.0);

    *(_QWORD *)(v341 + 48) = v362;
    specialized Array._endMutation()(v363);
    v381 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease((DARootViewController *)v341, v364, v365, v366, v367, v368, v369, v370);
    objc_msgSend(v51, "activateConstraints:", v381);

    return;
  }
LABEL_191:
  __break(1u);
}

void sub_1000DE250()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  DARootViewController *v6;
  DARootViewController *v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  DARootViewController *v18;
  DARootViewController *v19;
  uint64_t v20;
  uint64_t inited;
  void *v22;
  NSString *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  DARootViewController *v32;
  id v33;
  NSString v34;
  SEL v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  Class isa;
  SEL v43;
  id v44;
  int v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  DARootViewController *v56;
  DARootViewController *v57;
  SEL v58;
  id v59;
  int v60;
  id v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  id v67;
  DARootViewController *v68;
  DARootViewController *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  NSString *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  DARootViewController *v82;
  id v83;
  NSString v84;
  SEL v85;
  id v86;
  int v87;
  id v88;
  id v89;
  id v90;
  id v91;
  Class v92;
  SEL v93;
  id v94;
  int v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  _BYTE v108[72];

  v1 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField);
  if (!v2)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v3 = objc_msgSend(v2, "text");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    swift_bridgeObjectRelease(v7, v8, v9, v10, v11, v12, v13, v14);
    v15 = ((unint64_t)v7 >> 56) & 0xF;
    if (((unint64_t)v7 & 0x2000000000000000) == 0)
      v15 = v5 & 0xFFFFFFFFFFFFLL;
    if (!v15)
    {
      v16 = *(void **)(v0 + v1);
      if (!v16)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v17 = v16;
      sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000020, (void *)0x8000000100119450);
      v19 = v18;
      v20 = sub_100035CA4(&qword_10016BBA8);
      inited = swift_initStackObject(v20, &v107);
      *(_OWORD *)(inited + 16) = xmmword_10010BE30;
      *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
      v22 = (void *)objc_opt_self(UIColor);
      v23 = NSForegroundColorAttributeName;
      v24 = objc_msgSend(v22, "redColor");
      *(_QWORD *)(inited + 64) = sub_100037118(0, (unint64_t *)&unk_10016E460, UIColor_ptr);
      *(_QWORD *)(inited + 40) = v24;
      v32 = (DARootViewController *)sub_10006DF30(inited, v25, v26, v27, v28, v29, v30, v31);
      v33 = objc_allocWithZone((Class)NSAttributedString);
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v19, v35, v36, v37, v38, v39, v40, v41);
      type metadata accessor for Key(0);
      sub_1000BCB00();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v32, v43, v44, v45, v46, v47, v48, v49);
      v50 = objc_msgSend(v33, "initWithString:attributes:", v34, isa);

      objc_msgSend(v17, "setAttributedPlaceholder:", v50);
    }
  }
  v51 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField;
  v52 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField);
  if (!v52)
    goto LABEL_22;
  v53 = objc_msgSend(v52, "text");
  if (v53)
  {
    v54 = v53;
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v57 = v56;

    swift_bridgeObjectRelease(v57, v58, v59, v60, v61, v62, v63, v64);
    v65 = ((unint64_t)v57 >> 56) & 0xF;
    if (((unint64_t)v57 & 0x2000000000000000) == 0)
      v65 = v55 & 0xFFFFFFFFFFFFLL;
    if (!v65)
    {
      v66 = *(void **)(v0 + v51);
      if (!v66)
      {
LABEL_26:
        __break(1u);
        return;
      }
      v67 = v66;
      sub_10003FFA0(0, 0, (uint64_t)&_swiftEmptyArrayStorage, 0xD000000000000020, (void *)0x8000000100119450);
      v69 = v68;
      v70 = sub_100035CA4(&qword_10016BBA8);
      v71 = swift_initStackObject(v70, v108);
      *(_OWORD *)(v71 + 16) = xmmword_10010BE30;
      *(_QWORD *)(v71 + 32) = NSForegroundColorAttributeName;
      v72 = (void *)objc_opt_self(UIColor);
      v73 = NSForegroundColorAttributeName;
      v74 = objc_msgSend(v72, "redColor");
      *(_QWORD *)(v71 + 64) = sub_100037118(0, (unint64_t *)&unk_10016E460, UIColor_ptr);
      *(_QWORD *)(v71 + 40) = v74;
      v82 = (DARootViewController *)sub_10006DF30(v71, v75, v76, v77, v78, v79, v80, v81);
      v83 = objc_allocWithZone((Class)NSAttributedString);
      v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v69, v85, v86, v87, v88, v89, v90, v91);
      type metadata accessor for Key(0);
      sub_1000BCB00();
      v92 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v82, v93, v94, v95, v96, v97, v98, v99);
      v100 = objc_msgSend(v83, "initWithString:attributes:", v84, v92);

      objc_msgSend(v67, "setAttributedPlaceholder:", v100);
    }
  }
  v101 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView;
  v102 = *(void **)(v0 + OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView);
  if (!v102)
    goto LABEL_23;
  if ((objc_msgSend(v102, "signatureExists") & 1) != 0)
    return;
  v103 = *(void **)(v0 + v101);
  if (!v103)
    goto LABEL_24;
  v104 = objc_msgSend(v103, "layer");
  v105 = objc_msgSend((id)objc_opt_self(UIColor), "redColor");
  v106 = objc_msgSend(v105, "CGColor");

  objc_msgSend(v104, "setBorderColor:", v106);
}

void sub_1000DE720()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  Swift::Int v24;
  __n128 v25;
  _BYTE v26[16];
  _QWORD aBlock[5];
  uint64_t v28;

  v1 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v2 = __chkstk_darwin(v1);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v26[-v5];
  v7 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = objc_msgSend((id)objc_opt_self(ELSManager), "sharedManager");
  v12 = swift_allocObject(&unk_10013C488, 41, 7);
  *(_QWORD *)(v12 + 16) = 6;
  *(_BYTE *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 1;
  aBlock[4] = sub_100080B80;
  v28 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100040808;
  aBlock[3] = &unk_10013C4A0;
  v13 = _Block_copy(aBlock);
  objc_msgSend(v11, "transactionWithBlock:", v13, swift_release(v28).n128_f64[0]);
  _Block_release(v13);

  v14 = objc_msgSend(v0, "parentViewController");
  if (v14)
  {
    v15 = v14;
    v16 = objc_opt_self(UINavigationController);
    v17 = swift_dynamicCastObjCClass(v15, v16);
    if (v17)
    {
      v18 = (void *)v17;
      if (qword_10016A6D8 != -1)
        swift_once(&qword_10016A6D8, sub_1000C6380);
      v19 = type metadata accessor for ModalPresentationCoordinator(0);
      v20 = sub_100036D34(v19, (uint64_t)qword_1001723D0);
      swift_beginAccess(v20, aBlock, 33, 0);
      if ((sub_1000C65B4(v18, 1, 0, 1, 0, 0) & 1) == 0)
      {
        v21 = *(_QWORD *)(v20 + *(int *)(v19 + 24));
        v22 = v15;
        swift_bridgeObjectRetain(v21);
        v24 = sub_1000C8C58(v23, v18);

        sub_1000C4E10(v24, (uint64_t)v6);
        v25 = swift_release(v24);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v25) == 1)
        {
          sub_100036FA0((uint64_t)v6, (uint64_t *)&unk_10016AE90);
        }
        else
        {
          sub_100036D7C((uint64_t)v6, (uint64_t)v10);
          sub_1000A7860((uint64_t)v10, (uint64_t)v4);
          sub_100036FA0((uint64_t)v4, (uint64_t *)&unk_10016AE90);
          sub_100036DC0((uint64_t)v10);
        }
      }
      swift_endAccess(aBlock);
    }

  }
}

void sub_1000DEA40()
{
  char *v0;
  char v1;
  DARootViewController *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  id v7;
  const char *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  DARootViewController *v17;
  DARootViewController *v18;
  void *v19;
  id v20;
  const char *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  DARootViewController *v30;
  DARootViewController *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  DARootViewController *v44;
  SEL v45;
  id v46;
  int v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  Class isa;
  SEL v54;
  id v55;
  int v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  void *v63;
  void *v64;
  Swift::String v65;
  void **v66;
  DARootViewController *v67;
  id v68;
  SEL v69;
  id v70;
  int v71;
  id v72;
  id v73;
  id v74;
  id v75;
  Swift::String v76;
  SEL v77;
  id v78;
  int v79;
  id v80;
  id v81;
  id v82;
  id v83;
  SEL v84;
  id v85;
  int v86;
  id v87;
  id v88;
  id v89;
  id v90;
  DARootViewController *v91;
  NSString v92;
  SEL v93;
  id v94;
  int v95;
  id v96;
  id v97;
  id v98;
  id v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void **aBlock;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  void *v113;
  uint64_t (*v114)();
  uint64_t v115;
  void *v116;

  sub_1000DE250();
  if ((v1 & 1) != 0)
  {
    v2 = (DARootViewController *)sub_1000DEE30();
    v3 = swift_allocObject(&unk_10013C410, 24, 7);
    *(_QWORD *)(v3 + 16) = v0;
    v4 = *(void **)&v0[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField];
    if (v4)
    {
      v5 = v3;
      v6 = v0;
      v7 = objc_msgSend(v4, "text");
      if (!v7)
      {
LABEL_14:
        swift_bridgeObjectRelease(v2, v8, v9, v10, v11, v12, v13, v14);
        v107 = static os_log_type_t.fault.getter(v106);
        v108 = sub_100037118(0, (unint64_t *)&qword_10016B180, OS_os_log_ptr);
        v109 = (void *)static OS_os_log.default.getter(v108);
        os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, v109, "Consent forms were advanced without saving consent data", 55, 2, &_swiftEmptyArrayStorage);

        sub_1000DF094(v6);
        swift_release(v5);
        return;
      }
      v15 = v7;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v18 = v17;

      v19 = *(void **)&v6[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField];
      if (v19)
      {
        v20 = objc_msgSend(v19, "text");
        if (!v20)
        {
LABEL_13:
          swift_bridgeObjectRelease(v18, v21, v22, v23, v24, v25, v26, v27);
          goto LABEL_14;
        }
        v28 = v20;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v31 = v30;

        v32 = *(void **)&v6[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView];
        if (v32)
        {
          v33 = objc_msgSend(v32, "signatureImage");
          v34 = objc_msgSend(v33, "copy");

          _bridgeAnyObjectToAny(_:)(&aBlock);
          swift_unknownObjectRelease(v34);
          v35 = sub_100037118(0, &qword_10016AFE8, UIImage_ptr);
          if ((swift_dynamicCast(&v116, &aBlock, (char *)&type metadata for Any + 8, v35, 6) & 1) != 0)
          {
            v43 = v116;
            v44 = sub_1000A1FD8((uint64_t)v2);
            swift_bridgeObjectRelease(v2, v45, v46, v47, v48, v49, v50, v51);
            v52 = objc_allocWithZone((Class)DADocumentHelper);
            isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v44, v54, v55, v56, v57, v58, v59, v60);
            v61 = objc_msgSend(v52, "initWithConsentHandles:", isa);

            v62 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_documentHelper;
            v63 = *(void **)&v6[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_documentHelper];
            *(_QWORD *)&v6[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_documentHelper] = v61;

            v64 = *(void **)&v6[v62];
            if (v64)
            {
              aBlock = (void **)v16;
              v111 = (uint64_t)v18;
              swift_bridgeObjectRetain(v18);
              v65._countAndFlagsBits = 32;
              v65._object = (void *)0xE100000000000000;
              String.append(_:)(v65);
              v66 = aBlock;
              v67 = (DARootViewController *)v111;
              v68 = v64;
              swift_bridgeObjectRelease(v18, v69, v70, v71, v72, v73, v74, v75);
              aBlock = v66;
              v111 = (uint64_t)v67;
              swift_bridgeObjectRetain(v67);
              v76._countAndFlagsBits = v29;
              v76._object = v31;
              String.append(_:)(v76);
              swift_bridgeObjectRelease(v67, v77, v78, v79, v80, v81, v82, v83);
              swift_bridgeObjectRelease(v31, v84, v85, v86, v87, v88, v89, v90);
              v91 = (DARootViewController *)v111;
              v92 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v91, v93, v94, v95, v96, v97, v98, v99);
              objc_msgSend(v68, "setFullName:", v92);

              v100 = *(void **)&v6[v62];
              if (v100)
              {
                objc_msgSend(v100, "setImageSignature:", v43);
                v101 = *(void **)&v6[v62];
                if (v101)
                {
                  v102 = swift_allocObject(&unk_10013C438, 32, 7);
                  *(_QWORD *)(v102 + 16) = sub_1000E0C28;
                  *(_QWORD *)(v102 + 24) = v5;
                  v114 = sub_1000370F8;
                  v115 = v102;
                  aBlock = _NSConcreteStackBlock;
                  v111 = 1107296256;
                  v112 = sub_100030658;
                  v113 = &unk_10013C450;
                  v103 = _Block_copy(&aBlock);
                  v104 = v115;
                  v105 = v101;
                  swift_retain(v5);
                  objc_msgSend(v105, "saveConsentDocument:", v103, swift_release(v104).n128_f64[0]);
                  _Block_release(v103);
                  swift_release(v5);

                  return;
                }
                goto LABEL_21;
              }
LABEL_20:
              __break(1u);
LABEL_21:
              __break(1u);
              return;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
          swift_bridgeObjectRelease(v31, v36, v37, v38, v39, v40, v41, v42);
          goto LABEL_13;
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
}

uint64_t sub_1000DEE30()
{
  id v0;
  id v1;
  id v2;
  DARootViewController *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  DARootViewController *v18;
  Swift::String v19;
  id v20;
  int v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  _BYTE v38[40];
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  DARootViewController *v42;

  v0 = objc_msgSend((id)objc_opt_self(ELSManager), "sharedManager");
  v1 = objc_msgSend(v0, "snapshot");

  v2 = objc_msgSend(v1, "consentHandles");
  v3 = &_swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v4 = sub_100035CA4(&qword_10016BCA8);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v4);

  v13 = *(_QWORD *)(v5 + 16);
  if (!v13)
  {
LABEL_14:
    swift_bridgeObjectRelease((DARootViewController *)v5, v6, v7, v8, v9, v10, v11, v12);
    return (uint64_t)v3;
  }
  v42 = &_swiftEmptyArrayStorage;
  sub_1000572BC(0, v13, 0);
  v14 = 0;
  while (1)
  {
    v15 = *(_QWORD *)(v5 + 8 * v14 + 32);
    v36 = 0x656C646E6168;
    v37 = 0xE600000000000000;
    swift_bridgeObjectRetain(v15);
    AnyHashable.init<A>(_:)(&v36, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v15 + 16) && (v16 = sub_100072B10((uint64_t)v38), (v17 & 1) != 0))
    {
      sub_1000370B0(*(_QWORD *)(v15 + 56) + 32 * v16, (uint64_t)&v39);
    }
    else
    {
      v39 = 0u;
      v40 = 0u;
    }
    sub_100036FDC((uint64_t)v38);
    if (!*((_QWORD *)&v40 + 1))
      break;
    sub_10006E2D0(&v39, v41);
    swift_dynamicCast(&v36, v41, (char *)&type metadata for Any + 8, &type metadata for String, 7);
    v18 = (DARootViewController *)v37;
    v19 = String.uppercased()();
    swift_bridgeObjectRelease((DARootViewController *)v15, (SEL)v19._object, v20, v21, v22, v23, v24, v25);
    swift_bridgeObjectRelease(v18, v26, v27, v28, v29, v30, v31, v32);
    v3 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
    {
      sub_1000572BC(0, *(_QWORD *)v3->remoteCardFilter + 1, 1);
      v3 = v42;
    }
    v34 = *(_QWORD *)v3->remoteCardFilter;
    v33 = *(_QWORD *)&v3->remoteCardFilter[8];
    if (v34 >= v33 >> 1)
    {
      sub_1000572BC(v33 > 1, v34 + 1, 1);
      v3 = v42;
    }
    ++v14;
    *(_QWORD *)v3->remoteCardFilter = v34 + 1;
    *(Swift::String *)&v3->remoteCardFilter[16 * v34 + 16] = v19;
    if (v13 == v14)
      goto LABEL_14;
  }
  result = sub_100036FA0((uint64_t)&v39, (uint64_t *)&unk_10016B610);
  __break(1u);
  return result;
}

void sub_1000DF094(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  const char *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  SEL v25;
  id v26;
  int v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;

  v32 = objc_msgSend(a1, "parentViewController");
  if (!v32)
    return;
  v1 = objc_opt_self(UINavigationController);
  v2 = (void *)swift_dynamicCastObjCClass(v32, v1);
  if (!v2)
  {
LABEL_10:

    return;
  }
  v3 = objc_msgSend(v2, "viewControllers");

  v4 = sub_100037118(0, (unint64_t *)&qword_10016C200, UIViewController_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease((DARootViewController *)v5, v25, v26, v27, v28, v29, v30, v31);
    if (v24)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease((DARootViewController *)v5, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_16;
LABEL_5:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
LABEL_8:
    v32 = v13;
    swift_bridgeObjectRelease((DARootViewController *)v5, v14, v15, v16, v17, v18, v19, v20);
    v21 = type metadata accessor for EnhancedLoggingConsentViewController();
    v22 = (void *)swift_dynamicCastClass(v32, v21);
    if (v22)
      sub_1000DF240(v22);
    goto LABEL_10;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(v5 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

void sub_1000DF240(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  DARootViewController *v29;
  id v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  Swift::Int v42;
  __n128 v43;
  void *v44;
  DARootViewController *v45;
  SEL v46;
  id v47;
  int v48;
  id v49;
  id v50;
  id v51;
  id v52;
  DARootViewController *v53;
  SEL v54;
  id v55;
  int v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char v65[56];
  _QWORD aBlock[5];
  uint64_t v67;

  v2 = v1;
  v64 = a1;
  v3 = sub_100035CA4((uint64_t *)&unk_10016AE90);
  v4 = __chkstk_darwin(v3);
  v63 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v62 - v6;
  v8 = type metadata accessor for ModalPresentationCoordinator.QueueEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self(ELSManager);
  v13 = objc_msgSend(v12, "sharedManager");
  v14 = objc_msgSend(v13, "snapshot");

  LOBYTE(v13) = sub_1000E0A58();
  if ((v13 & 1) != 0)
  {
    v15 = v2;
    v16 = type metadata accessor for DeviceSelector();
    v17 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v16)), "init");
    v18 = objc_msgSend(v12, "sharedManager");
    v19 = objc_msgSend(v18, "snapshot");

    v20 = objc_msgSend((id)objc_opt_self(DEDDevice), "currentDevice");
    if (v20)
    {
      v21 = v20;
      v22 = objc_msgSend(v20, "platform");

      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = sub_1000DFF44();
      v27 = sub_100035CA4(&qword_10016CF80);
      inited = swift_initStackObject(v27, v65);
      *(_OWORD *)(inited + 16) = xmmword_10010BE30;
      *(_QWORD *)(inited + 32) = v23;
      *(_QWORD *)(inited + 40) = v25;
      v29 = (DARootViewController *)sub_1000A4F88(inited, v26);
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
    }
    else
    {
      v29 = (DARootViewController *)sub_1000DFF44();
    }

    v44 = v64;
    v45 = sub_100092410((uint64_t)v29);
    swift_bridgeObjectRelease(v29, v46, v47, v48, v49, v50, v51, v52);
    v53 = *(DARootViewController **)&v17[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_platformsFromQueue];
    *(_QWORD *)&v17[OBJC_IVAR____TtC11Diagnostics14DeviceSelector_platformsFromQueue] = v45;
    swift_bridgeObjectRelease(v53, v54, v55, v56, v57, v58, v59, v60);
    objc_msgSend(v44, "showViewController:sender:", v17, v15);
  }
  else
  {
    v30 = objc_msgSend(v12, "sharedManager");
    v31 = swift_allocObject(&unk_10013C3C0, 41, 7);
    *(_QWORD *)(v31 + 16) = 3;
    *(_BYTE *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = 1;
    *(_BYTE *)(v31 + 40) = 0;
    aBlock[4] = sub_100080B80;
    v67 = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100040808;
    aBlock[3] = &unk_10013C3D8;
    v32 = _Block_copy(aBlock);
    objc_msgSend(v30, "transactionWithBlock:", v32, swift_release(v67).n128_f64[0]);
    _Block_release(v32);

    v33 = (char *)objc_msgSend(v2, "parentViewController");
    if (!v33)
      return;
    v17 = v33;
    v34 = objc_opt_self(UINavigationController);
    v35 = swift_dynamicCastObjCClass(v17, v34);
    if (v35)
    {
      v36 = (void *)v35;
      if (qword_10016A6D8 != -1)
        swift_once(&qword_10016A6D8, sub_1000C6380);
      v37 = type metadata accessor for ModalPresentationCoordinator(0);
      v38 = sub_100036D34(v37, (uint64_t)qword_1001723D0);
      swift_beginAccess(v38, aBlock, 33, 0);
      if ((sub_1000C65B4(v36, 1, 0, 1, 0, 0) & 1) == 0)
      {
        v39 = *(_QWORD *)(v38 + *(int *)(v37 + 24));
        v40 = v17;
        swift_bridgeObjectRetain(v39);
        v42 = sub_1000C8C58(v41, v36);

        sub_1000C4E10(v42, (uint64_t)v7);
        v43 = swift_release(v42);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v9 + 48))(v7, 1, v8, v43) == 1)
        {
          sub_100036FA0((uint64_t)v7, (uint64_t *)&unk_10016AE90);
        }
        else
        {
          sub_100036D7C((uint64_t)v7, (uint64_t)v11);
          v61 = v63;
          sub_1000A7860((uint64_t)v11, v63);
          sub_100036FA0(v61, (uint64_t *)&unk_10016AE90);
          sub_100036DC0((uint64_t)v11);
        }
      }
      swift_endAccess(aBlock);
    }
  }

}

id sub_1000DF6F0(uint64_t a1, DARootViewController *a2, void *a3)
{
  char *v3;
  NSString v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollViewHorizontalInset] = 0x4034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollViewVerticalInset] = 0x4024000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_commonHeight] = 0x4045000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_componentPadding] = 0x403E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_topPadding] = 0x4024000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_topPaddingForLabel] = 0x4034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_labelWidth] = 0x4059000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_textFieldSpacer] = 0x402E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureViewHeight] = 0x4069000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_bottomButtonVerticalPadding] = 0x4034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_bottomButtonHorizontalPadding] = 0x4044000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_bottomButtonSpacer] = 0x4034000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_consentButtonCornerRadius] = 0x4024000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_fontSizeForLabels] = 0x4032000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_fontSizeForTitle] = 0x4040000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_documentHelper] = 0;
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    v6 = 0;
  }
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for ConsentSignatureController();
  v14 = objc_msgSendSuper2(&v16, "initWithNibName:bundle:", v6, a3);

  return v14;
}

id sub_1000DF940(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollViewHorizontalInset] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollViewVerticalInset] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_commonHeight] = 0x4045000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_componentPadding] = 0x403E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_topPadding] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_topPaddingForLabel] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_labelWidth] = 0x4059000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_textFieldSpacer] = 0x402E000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureViewHeight] = 0x4069000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_bottomButtonVerticalPadding] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_bottomButtonHorizontalPadding] = 0x4044000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_bottomButtonSpacer] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_consentButtonCornerRadius] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_fontSizeForLabels] = 0x4032000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_fontSizeForTitle] = 0x4040000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_scrollView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_titleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_subtitleLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_submitBtn] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_cancelBtn] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureLabel] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_signatureView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_clearSignBtn] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_documentHelper] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ConsentSignatureController();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_1000DFB28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConsentSignatureController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConsentSignatureController()
{
  return objc_opt_self(_TtC11Diagnostics26ConsentSignatureController);
}

uint64_t sub_1000DFC60(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t result;

  v2 = v1;
  v4 = OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_lastNameTextField);
  if (v5)
  {
    sub_100037118(0, &qword_10016E448, UITextField_ptr);
    v6 = a1;
    v7 = v5;
    v8 = static NSObject.== infix(_:_:)(v6);

    if ((v8 & 1) != 0)
    {
      objc_msgSend(v6, "resignFirstResponder");
      return 1;
    }
  }
  v9 = *(void **)(v2 + OBJC_IVAR____TtC11Diagnostics26ConsentSignatureController_firstNameTextField);
  if (!v9)
    return 1;
  sub_100037118(0, &qword_10016E448, UITextField_ptr);
  v10 = a1;
  v11 = v9;
  v12 = static NSObject.== infix(_:_:)(v10);

  if ((v12 & 1) == 0)
    return 1;
  result = *(_QWORD *)(v2 + v4);
  if (result)
  {
    objc_msgSend((id)result, "becomeFirstResponder");
    return 1;
  }
  __break(1u);
  return result;
}

void sub_1000DFDB4(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;

  v3 = objc_msgSend(v1, "view");
  if (!v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v4 = v3;
  v5 = objc_msgSend(v1, "view");
  objc_msgSend(a1, "locationInView:", v5);
  v7 = v6;
  v9 = v8;

  v10 = objc_msgSend(v4, "hitTest:withEvent:", 0, v7, v9);
  if (!v10
    || (v11 = objc_opt_self(UITextField),
        v12 = swift_dynamicCastObjCClass(v10, v11),
        v10,
        !v12))
  {
    v13 = objc_msgSend(v1, "view");
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, "endEditing:", 1);

      return;
    }
    goto LABEL_7;
  }
}

uint64_t sub_1000DFF44()
{
  void *v0;
  id v1;
  DARootViewController *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  DARootViewController *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  DARootViewController *v15;
  DARootViewController *v16;
  unint64_t v17;
  uint64_t v18;
  SEL v19;
  id v20;
  int v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  SEL v34;
  id v35;
  int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  SEL v43;
  id v44;
  int v45;
  id v46;
  id v47;
  id v48;
  id v49;
  DARootViewController *v50;
  _QWORD v51[4];

  v1 = objc_msgSend((id)objc_opt_self(DEDConstants), "allPlatforms");
  v2 = (DARootViewController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &protocol witness table for String);

  v3 = objc_msgSend(v0, "queue");
  if (!v3)
  {
    v10 = &_swiftEmptyArrayStorage;
LABEL_22:
    v33 = sub_1000E09C8((uint64_t)v10);
    swift_bridgeObjectRelease(v10, v34, v35, v36, v37, v38, v39, v40);
    sub_1000DAEA0(v33);
    v42 = sub_1000E01E0((uint64_t)v2, v41);
    swift_bridgeObjectRelease(v2, v43, v44, v45, v46, v47, v48, v49);
    return v42;
  }
  v4 = v3;
  v5 = sub_100037118(0, (unint64_t *)&qword_10016E450, ELSQueueEntry_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v6);
    v50 = v2;
    if (v7)
      goto LABEL_4;
LABEL_20:
    v10 = &_swiftEmptyArrayStorage;
LABEL_21:
    swift_bridgeObjectRelease_n(v6, 2);
    v2 = v50;
    goto LABEL_22;
  }
  if (v6 < 0)
    v32 = v6;
  else
    v32 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  result = _CocoaArrayWrapper.endIndex.getter(v32);
  v7 = result;
  v50 = v2;
  if (!result)
    goto LABEL_20;
LABEL_4:
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = &_swiftEmptyArrayStorage;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
      else
        v11 = *(id *)(v6 + 8 * v9 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, "platform");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v51[2] = v14;
      v51[3] = v16;
      v51[0] = 44;
      v51[1] = 0xE100000000000000;
      v17 = sub_10003F14C();
      v18 = StringProtocol.components<A>(separatedBy:)(v51, &type metadata for String, &type metadata for String, v17, v17);

      swift_bridgeObjectRelease(v16, v19, v20, v21, v22, v23, v24, v25);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_100091DC0(0, *(_QWORD *)v10->remoteCardFilter + 1, 1, (uint64_t)v10, v26, v27, v28, v29);
      v31 = *(_QWORD *)v10->remoteCardFilter;
      v30 = *(_QWORD *)&v10->remoteCardFilter[8];
      if (v31 >= v30 >> 1)
        v10 = sub_100091DC0((DARootViewController *)(v30 > 1), v31 + 1, 1, (uint64_t)v10, v26, v27, v28, v29);
      ++v9;
      *(_QWORD *)v10->remoteCardFilter = v31 + 1;
      *(_QWORD *)&v10->remoteCardFilter[8 * v31 + 16] = v18;
    }
    while (v7 != v9);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E01E0(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    sub_1000E0360((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a2, v3);
    v10 = v9;
    swift_release(a2);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v8, -1);
    bzero(v11, v8);
    sub_1000E0360((unint64_t *)v11, v7, a2, v3);
    v10 = v12;
    swift_release(a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v10;
}

void sub_1000E0360(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  DARootViewController *v20;
  uint64_t v21;
  Swift::Int v22;
  const char *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  unint64_t i;
  unint64_t v39;
  _QWORD *v40;
  BOOL v41;
  BOOL v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t *v53;
  DARootViewController *v54;
  uint64_t v55;
  Swift::Int v56;
  const char *v57;
  void *v58;
  int v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  BOOL v68;
  uint64_t v69;
  _QWORD *v70;
  BOOL v71;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  int64_t v79;
  _QWORD v81[9];
  uint64_t v82;

  v4 = a4;
  v5 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a4 + 16);
  v82 = a4;
  if (v7 < v6)
  {
    v8 = 0;
    v74 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v75 = (unint64_t)(v9 + 63) >> 6;
    v77 = 0;
    v12 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v11)
        {
          v13 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
          v78 = v8;
          v14 = v13 | (v8 << 6);
        }
        else
        {
          v15 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v15 >= v75)
            goto LABEL_79;
          v16 = *(_QWORD *)(v74 + 8 * v15);
          v17 = v8 + 1;
          if (!v16)
          {
            v17 = v8 + 2;
            if (v8 + 2 >= v75)
              goto LABEL_79;
            v16 = *(_QWORD *)(v74 + 8 * v17);
            if (!v16)
            {
              v17 = v8 + 3;
              if (v8 + 3 >= v75)
                goto LABEL_79;
              v16 = *(_QWORD *)(v74 + 8 * v17);
              if (!v16)
              {
                v18 = v8 + 4;
                if (v8 + 4 >= v75)
                  goto LABEL_79;
                v16 = *(_QWORD *)(v74 + 8 * v18);
                if (!v16)
                {
                  while (1)
                  {
                    v17 = v18 + 1;
                    if (__OFADD__(v18, 1))
                      goto LABEL_83;
                    if (v17 >= v75)
                      goto LABEL_79;
                    v16 = *(_QWORD *)(v74 + 8 * v17);
                    ++v18;
                    if (v16)
                      goto LABEL_22;
                  }
                }
                v17 = v8 + 4;
              }
            }
          }
LABEL_22:
          v11 = (v16 - 1) & v16;
          v78 = v17;
          v14 = __clz(__rbit64(v16)) + (v17 << 6);
        }
        v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
        v21 = *v19;
        v20 = (DARootViewController *)v19[1];
        Hasher.init(_seed:)(v81, *(_QWORD *)(v5 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v81, v21, v20);
        v22 = Hasher._finalize()();
        v30 = -1 << *(_BYTE *)(v5 + 32);
        v31 = v22 & ~v30;
        v32 = v31 >> 6;
        v33 = 1 << v31;
        if (((1 << v31) & *(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
          break;
LABEL_6:
        swift_bridgeObjectRelease(v20, v23, v24, v25, v26, v27, v28, v29);
        v8 = v78;
        v5 = a3;
        v4 = v82;
      }
      v34 = *(_QWORD *)(a3 + 48);
      v35 = (_QWORD *)(v34 + 16 * v31);
      v23 = (const char *)v35[1];
      v36 = *v35 == v21 && v23 == (const char *)v20;
      if (!v36 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v23, v21, v20, 0) & 1) == 0)
      {
        v37 = ~v30;
        for (i = v31 + 1; ; i = v39 + 1)
        {
          v39 = i & v37;
          if (((*(_QWORD *)(v12 + (((i & v37) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v37)) & 1) == 0)
            break;
          v40 = (_QWORD *)(v34 + 16 * v39);
          v23 = (const char *)v40[1];
          v41 = *v40 == v21 && v23 == (const char *)v20;
          if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v40, v23, v21, v20, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease(v20, v23, v24, v25, v26, v27, v28, v29);
            v32 = v39 >> 6;
            v33 = 1 << v39;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      swift_bridgeObjectRelease(v20, v23, v24, v25, v26, v27, v28, v29);
LABEL_38:
      v8 = v78;
      v5 = a3;
      a1[v32] |= v33;
      v42 = __OFADD__(v77++, 1);
      v4 = v82;
      if (v42)
        goto LABEL_82;
    }
  }
  v43 = 0;
  v76 = a3 + 56;
  v77 = 0;
  v44 = 1 << *(_BYTE *)(a3 + 32);
  if (v44 < 64)
    v45 = ~(-1 << v44);
  else
    v45 = -1;
  v46 = v45 & *(_QWORD *)(a3 + 56);
  v79 = (unint64_t)(v44 + 63) >> 6;
  v47 = a4 + 56;
  while (1)
  {
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      v49 = v48 | (v43 << 6);
      goto LABEL_63;
    }
    v50 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v50 >= v79)
      goto LABEL_79;
    v51 = *(_QWORD *)(v76 + 8 * v50);
    ++v43;
    if (!v51)
    {
      v43 = v50 + 1;
      if (v50 + 1 >= v79)
        goto LABEL_79;
      v51 = *(_QWORD *)(v76 + 8 * v43);
      if (!v51)
      {
        v43 = v50 + 2;
        if (v50 + 2 >= v79)
          goto LABEL_79;
        v51 = *(_QWORD *)(v76 + 8 * v43);
        if (!v51)
          break;
      }
    }
LABEL_62:
    v46 = (v51 - 1) & v51;
    v49 = __clz(__rbit64(v51)) + (v43 << 6);
LABEL_63:
    v53 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v49);
    v55 = *v53;
    v54 = (DARootViewController *)v53[1];
    Hasher.init(_seed:)(v81, *(_QWORD *)(v4 + 40));
    swift_bridgeObjectRetain(v54);
    String.hash(into:)(v81, v55, v54);
    v56 = Hasher._finalize()();
    v64 = -1 << *(_BYTE *)(v4 + 32);
    v65 = v56 & ~v64;
    if (((*(_QWORD *)(v47 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
      goto LABEL_46;
    v66 = *(_QWORD *)(v82 + 48);
    v67 = (_QWORD *)(v66 + 16 * v65);
    v57 = (const char *)v67[1];
    v68 = *v67 == v55 && v57 == (const char *)v54;
    if (v68 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v67, v57, v55, v54, 0) & 1) != 0)
    {
LABEL_76:
      swift_bridgeObjectRelease(v54, v57, v58, v59, v60, v61, v62, v63);
      *(unint64_t *)((char *)a1 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
      v42 = __OFADD__(v77++, 1);
      v5 = a3;
      v4 = v82;
      if (v42)
      {
        __break(1u);
LABEL_79:
        swift_retain(v5);
        sub_1000C7BB4(a1, a2, v77, v5);
        return;
      }
    }
    else
    {
      v69 = ~v64;
      while (1)
      {
        v65 = (v65 + 1) & v69;
        if (((*(_QWORD *)(v47 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
          break;
        v70 = (_QWORD *)(v66 + 16 * v65);
        v57 = (const char *)v70[1];
        v71 = *v70 == v55 && v57 == (const char *)v54;
        if (v71 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v70, v57, v55, v54, 0) & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      swift_bridgeObjectRelease(v54, v57, v58, v59, v60, v61, v62, v63);
      v5 = a3;
      v4 = v82;
    }
  }
  v52 = v50 + 3;
  if (v52 >= v79)
    goto LABEL_79;
  v51 = *(_QWORD *)(v76 + 8 * v52);
  if (v51)
  {
    v43 = v52;
    goto LABEL_62;
  }
  while (1)
  {
    v43 = v52 + 1;
    if (__OFADD__(v52, 1))
      break;
    if (v43 >= v79)
      goto LABEL_79;
    v51 = *(_QWORD *)(v76 + 8 * v43);
    ++v52;
    if (v51)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
}

uint64_t sub_1000E089C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[2];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000E0C88();
  result = Set.init(minimumCapacity:)(v2, &type metadata for DeviceType, v3);
  v9 = result;
  if (v2)
  {
    v5 = (unint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      sub_1000582D0(v6, *v5);
      sub_1000A8CDC(v8, v6, v7);
      sub_100058234(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_1000E0934(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  DARootViewController **v4;
  uint64_t v5;
  DARootViewController *v6;
  SEL v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14[2];
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v15 = result;
  if (v2)
  {
    v4 = (DARootViewController **)(a1 + 40);
    do
    {
      v5 = (uint64_t)*(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1000A92B8(v14, v5, v6);
      swift_bridgeObjectRelease((DARootViewController *)v14[1], v7, v8, v9, v10, v11, v12, v13);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v15;
  }
  return result;
}

uint64_t sub_1000E09C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  DARootViewController *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100035CA4(&qword_10016C1D0);
  v4 = sub_1000E0BCC();
  result = Set.init(minimumCapacity:)(v2, v3, v4);
  v16 = result;
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v6++;
      swift_bridgeObjectRetain(v7);
      sub_1000A9464(&v15, v7);
      swift_bridgeObjectRelease(v15, v8, v9, v10, v11, v12, v13, v14);
      --v2;
    }
    while (v2);
    return v16;
  }
  return result;
}

BOOL sub_1000E0A58()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;

  v0 = objc_msgSend((id)objc_opt_self(ELSManager), "sharedManager");
  v1 = objc_msgSend(v0, "snapshot");

  v2 = objc_msgSend((id)objc_opt_self(DEDDevice), "currentDevice");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "platform");

    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8 = sub_1000DFF44();
    v9 = sub_100035CA4(&qword_10016CF80);
    inited = swift_initStackObject(v9, &v21);
    *(_OWORD *)(inited + 16) = xmmword_10010BE30;
    *(_QWORD *)(inited + 32) = v5;
    *(_QWORD *)(inited + 40) = v7;
    v11 = (uint64_t)sub_1000A4F88(inited, v8);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  }
  else
  {
    v11 = sub_1000DFF44();
  }

  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease((DARootViewController *)v11, v13, v14, v15, v16, v17, v18, v19);
  return v12 != 0;
}

uint64_t sub_1000E0BA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000E0BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E0BC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000E0BCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10016E458;
  if (!qword_10016E458)
  {
    v1 = sub_100035D30(&qword_10016C1D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10016E458);
  }
  return result;
}

void sub_1000E0C28()
{
  uint64_t v0;

  sub_1000DF094(*(void **)(v0 + 16));
}

uint64_t sub_1000E0C30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E0C54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1000E0C64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000E0C88()
{
  unint64_t result;

  result = qword_10016E480;
  if (!qword_10016E480)
  {
    result = swift_getWitnessTable(&unk_10010EEA0, &type metadata for DeviceType);
    atomic_store(result, (unint64_t *)&qword_10016E480);
  }
  return result;
}

unint64_t sub_1000E0CE0@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  if (*(_QWORD *)(a2 + 16) && (result = sub_100072B40(result), (v5 & 1) != 0))
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 40 * result);
    v8 = *v6;
    v7 = v6[1];
    v9 = (void *)v6[2];
    v10 = (void *)v6[3];
    v11 = (void *)v6[4];
    v12 = v11;
    swift_bridgeObjectRetain(v7);
    v13 = v9;
    result = v10;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v9;
  a3[3] = v10;
  a3[4] = v11;
  return result;
}

void *sub_1000E0D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v12;
  void *v13;

  v2 = a2;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = sub_100072CDC(a1);
      if ((v9 & 1) != 0)
      {
        v7 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v8);
        v10 = v7;
        return v7;
      }
    }
    return 0;
  }
  if (a2 >= 0)
    v2 = a2 & 0xFFFFFFFFFFFFFF8;
  v4 = swift_retain(a1);
  v5 = __CocoaDictionary.lookup(_:)(v4, v2);
  swift_release(a1);
  if (!v5)
    return 0;
  v12 = v5;
  v6 = type metadata accessor for CardViewCell();
  swift_unknownObjectRetain(v5);
  swift_dynamicCast(&v13, &v12, (char *)&type metadata for Swift.AnyObject + 8, v6, 7);
  v7 = v13;
  swift_unknownObjectRelease(v5);
  return v7;
}

uint64_t sub_1000E0E44(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = a3 + 7;
  v13 = 1;
  while (1)
  {
    if (v3 == v13)
      return 0;
    ++v11;
    v14 = *(v12 - 1);
    v15 = *v12;
    if (v14 == a1 && v15 == a2)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
    result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0)
      return result;
  }
  return v11;
}

void sub_1000E0F28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      sub_100037118(0, (unint64_t *)&qword_10016D860, UIView_ptr);
      v6 = static NSObject.== infix(_:_:)(v5);

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = static NSObject.== infix(_:_:)(v8);

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        v12 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v3 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a2);
        if (v3)
          continue;
      }
      return;
    }
  }
}

uint64_t sub_1000E10C0(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v20;

  if ((unint64_t)a2 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = 0; v4; i = 0)
  {
    v20 = *(id *)(a1 + 40);
    a1 = a2 & 0xC000000000000001;
    while (1)
    {
      if (a1)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      }
      else
      {
        v6 = *(_QWORD *)(a2 + 8 * i + 32);
        swift_retain(v6);
      }
      v7 = objc_msgSend(*(id *)(v6 + 40), "serialNumber");
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      v11 = objc_msgSend(v20, "serialNumber");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      if (v8 == v12 && v10 == v14)
      {
        swift_release(v6);
        swift_bridgeObjectRelease_n(v10, 2);
        return i;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v12, v14, 0);
      swift_release(v6);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 1) != 0)
        return i;
      v17 = i + 1;
      if (__OFADD__(i, 1))
        break;
      ++i;
      if (v17 == v4)
        return 0;
    }
    __break(1u);
LABEL_18:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a2);
  }
  return i;
}

void sub_1000E1268()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  DARootViewController *v28;
  DARootViewController *v29;
  SEL v30;
  id v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  _QWORD v40[5];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates);
  swift_beginAccess(v1, v39, 0, 0);
  v2 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = *v1;
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = __CocoaSet.makeIterator()(v3);
    v5 = type metadata accessor for CardState();
    v6 = sub_10002F158((unint64_t *)&qword_10016BA18, (uint64_t (*)(uint64_t))type metadata accessor for CardState, (uint64_t)&unk_10010C980);
    v7 = Set.Iterator.init(_cocoa:)(v40, v4, v5, v6);
    v2 = v40[0];
    v8 = v40[1];
    v9 = v40[2];
    v10 = v40[3];
    v11 = v40[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(v2 + 32);
    v8 = v2 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(v2 + 56);
    v7 = (_QWORD *)swift_bridgeObjectRetain(*v1);
    v10 = 0;
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  while (v2 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v7);
    if (!v19)
      goto LABEL_36;
    v20 = v19;
    v37 = v19;
    v21 = type metadata accessor for CardState();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v38, &v37, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v38;
    swift_unknownObjectRelease(v20);
    v18 = v10;
    v16 = v11;
    if (!v22)
      goto LABEL_36;
LABEL_34:
    if (*(_BYTE *)(v22 + 16) == 1)
    {
      v26 = objc_msgSend(*(id *)(v22 + 40), "serialNumber");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      sub_1000A20FC(v27, (uint64_t)v29);
      swift_release(v22);
      swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      swift_release(v22);
    }
    v10 = v18;
    v11 = v16;
  }
  if (v11)
  {
    v16 = (v11 - 1) & v11;
    v17 = __clz(__rbit64(v11)) | (v10 << 6);
    v18 = v10;
LABEL_33:
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_36;
    goto LABEL_34;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v15)
      goto LABEL_36;
    v24 = *(_QWORD *)(v8 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v15)
        goto LABEL_36;
      v24 = *(_QWORD *)(v8 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v15)
          goto LABEL_36;
        v24 = *(_QWORD *)(v8 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v15)
            goto LABEL_36;
          v24 = *(_QWORD *)(v8 + 8 * v18);
          if (!v24)
          {
            v25 = v10 + 5;
            while (v15 != v25)
            {
              v24 = *(_QWORD *)(v8 + 8 * v25++);
              if (v24)
              {
                v18 = v25 - 1;
                goto LABEL_32;
              }
            }
LABEL_36:
            sub_100040800(v2);
            return;
          }
        }
      }
    }
LABEL_32:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t sub_1000E1558(unint64_t a1)
{
  return sub_1000E1564(a1, sub_100034AD0);
}

uint64_t sub_1000E1564(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  char v15;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()(v13);
      return v12;
    }
  }
  v15 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

NSString sub_1000E1648()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1001723F0 = (uint64_t)result;
  return result;
}

NSString sub_1000E167C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1001723F8 = (uint64_t)result;
  return result;
}

NSString sub_1000E16B0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100172400 = (uint64_t)result;
  return result;
}

uint64_t sub_1000E16E4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  _BYTE v14[24];

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_persistentOnly);
  v2 = v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter;
  *(_BYTE *)(v2 + 16) = v1;
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates);
  swift_beginAccess(v5, v14, 0, 0);
  v6 = *v5;
  v13 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100051E00(v6, v3, v4, v1, (uint64_t *)&v13);
  v7 = v13;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)v2;
  v9 = *(_QWORD *)(v2 + 8);
  LOBYTE(v4) = *(_BYTE *)(v2 + 16);
  v10 = *v5;
  v13 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  sub_100051E00(v10, v8, v9, v4, (uint64_t *)&v13);
  v11 = v13;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  return swift_bridgeObjectRelease(v11);
}

void sub_1000E1824()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  DARootViewController *v12;
  Class isa;
  SEL v14;
  id v15;
  int v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  SEL v22;
  id v23;
  int v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[3];
  _BYTE v30[104];

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10016A6E8 != -1)
    swift_once(&qword_10016A6E8, sub_1000E1648);
  v3 = qword_1001723F0;
  v4 = sub_100035CA4((uint64_t *)&unk_10016BA20);
  inited = swift_initStackObject(v4, v30);
  *(_OWORD *)(inited + 16) = xmmword_10010BE30;
  v29[0] = 0xD000000000000012;
  v29[1] = 0x8000000100113570;
  AnyHashable.init<A>(_:)(v29, &type metadata for String, &protocol witness table for String);
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView, v29, 32, 0);
  v7 = *v6;
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_100072B40(1u), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_endAccess(v29);
    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v21 = v10;
      else
        v21 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease((DARootViewController *)v10, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
  }
  else
  {
    swift_endAccess(v29);
    v11 = 0;
  }
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 72) = v11;
  v12 = (DARootViewController *)sub_10006DCBC(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
  objc_msgSend(v2, "postNotificationName:object:userInfo:", v3, v1, isa);

}

uint64_t sub_1000E1A08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  SEL v20;
  id v21;
  int v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  _BYTE v45[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView, v45, 0, 0);
  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16) && (v3 = sub_100072B40(0), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
      else
        v19 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v19);
      swift_bridgeObjectRelease((DARootViewController *)v5, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 16))
  {
    v8 = sub_100072B40(1u);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      if (!((unint64_t)v10 >> 62))
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        v12 = __OFADD__(v6, v11);
        v6 += v11;
        if (!v12)
          goto LABEL_12;
        goto LABEL_11;
      }
      if (v10 < 0)
        v27 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      else
        v27 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v28 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease((DARootViewController *)v10, v29, v30, v31, v32, v33, v34, v35);
      v12 = __OFADD__(v6, v28);
      v6 += v28;
      if (v12)
LABEL_11:
        __break(1u);
    }
  }
LABEL_12:
  v13 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
    return v6;
  v14 = sub_100072B40(2u);
  if ((v15 & 1) == 0)
    return v6;
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  if (!((unint64_t)v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = v6 + v17;
    if (!__OFADD__(v6, v17))
      return result;
    goto LABEL_17;
  }
  if (v16 < 0)
    v36 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  else
    v36 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v37 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease((DARootViewController *)v16, v38, v39, v40, v41, v42, v43, v44);
  result = v6 + v37;
  if (__OFADD__(v6, v37))
  {
LABEL_17:
    __break(1u);
    return v6;
  }
  return result;
}

void sub_1000E1BAC(char a1)
{
  uint64_t v1;
  DARootViewController **v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  DARootViewController *v7;
  DARootViewController *v8;
  Class isa;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  DARootViewController *v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char v25[16];
  _BYTE v26[104];
  _BYTE v27[24];

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue) & 1) == 0 && (a1 & 1) != 0)
  {
    v2 = (DARootViewController **)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue);
    swift_beginAccess(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue, v27, 1, 0);
    if (*(_QWORD *)(*v2)->remoteCardFilter)
    {
      sub_1000E4338();
      v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      if (qword_10016A6F0 != -1)
        swift_once(&qword_10016A6F0, sub_1000E167C);
      v4 = qword_1001723F8;
      v5 = sub_100035CA4((uint64_t *)&unk_10016BA20);
      inited = swift_initStackObject(v5, v26);
      *(_OWORD *)(inited + 16) = xmmword_10010BE30;
      strcpy(v25, "cardActionsKey");
      v25[15] = -18;
      AnyHashable.init<A>(_:)(v25, &type metadata for String, &protocol witness table for String);
      v7 = *v2;
      *(_QWORD *)(inited + 96) = sub_100035CA4(&qword_10016BE38);
      *(_QWORD *)(inited + 72) = v7;
      swift_bridgeObjectRetain(v7);
      v8 = (DARootViewController *)sub_10006DCBC(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
      objc_msgSend(v3, "postNotificationName:object:userInfo:", v4, v1, isa);

      v17 = *v2;
      *v2 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
}

void **sub_1000E1D68()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void **v42;
  id v43;
  uint64_t v44;
  Class super_class;
  uint64_t v47;
  _BYTE v48[24];
  _BYTE v49[40];
  void **aBlock;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  Class v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  objc_super v56;
  char v57[88];

  v1 = &v0[OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter];
  v2 = qword_10016A648;
  v3 = v0;
  if (v2 != -1)
    swift_once(&qword_10016A648, sub_100053F8C);
  v4 = *(_QWORD *)(qword_100172340 + 16);
  v5 = *(_QWORD *)(qword_100172340 + 24);
  v6 = *(_BYTE *)(qword_100172340 + 32);
  *(_QWORD *)v1 = v4;
  *((_QWORD *)v1 + 1) = v5;
  v1[16] = v6;
  v3[OBJC_IVAR____TtC11Diagnostics11CardManager_persistentOnly] = 1;
  v7 = OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView;
  v8 = sub_100035CA4(&qword_10016E590);
  inited = swift_initStackObject(v8, v57);
  *(_OWORD *)(inited + 16) = xmmword_10010CE00;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = &_swiftEmptyArrayStorage;
  v10 = sub_10006E2E0(inited);
  swift_setDeallocating(inited);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v11 = sub_100035CA4(&qword_10016E598);
  swift_arrayDestroy(inited + 32, 3, v11);
  *(_QWORD *)&v3[v7] = v10;
  v12 = OBJC_IVAR____TtC11Diagnostics11CardManager_deviceManager;
  v13 = type metadata accessor for DeviceManager();
  swift_allocObject(v13, 88, 7);
  *(_QWORD *)&v3[v12] = sub_1000A363C();
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates] = &_swiftEmptySetSingleton;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics11CardManager_cardCells] = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue] = &_swiftEmptyArrayStorage;
  v3[OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue] = 0;

  v56.receiver = v3;
  v56.super_class = (Class)type metadata accessor for CardManager();
  super_class = v56.super_class;
  v14 = objc_msgSendSuper2(&v56, "init");
  v15 = (void *)objc_opt_self(NSNotificationCenter);
  v16 = (char *)v14;
  v17 = objc_msgSend(v15, "defaultCenter");
  if (qword_10016A6B8 != -1)
    swift_once(&qword_10016A6B8, sub_1000A255C);
  v18 = qword_1001723B0;
  v47 = OBJC_IVAR____TtC11Diagnostics11CardManager_deviceManager;
  v19 = *(_QWORD *)&v16[OBJC_IVAR____TtC11Diagnostics11CardManager_deviceManager];
  v20 = (void *)objc_opt_self(NSOperationQueue);
  swift_retain(v19);
  v21 = objc_msgSend(v20, "mainQueue");
  v22 = swift_allocObject(&unk_10013C668, 24, 7);
  *(_QWORD *)(v22 + 16) = v16;
  v54 = sub_1000E991C;
  v55 = v22;
  aBlock = _NSConcreteStackBlock;
  v51 = 1107296256;
  v52 = sub_100048DB4;
  v53 = (Class)&unk_10013C680;
  v23 = _Block_copy(&aBlock);
  v24 = v55;
  v25 = v16;
  v26 = objc_msgSend(v17, "addObserverForName:object:queue:usingBlock:", v18, v19, v21, v23, swift_release(v24).n128_f64[0]);
  _Block_release(v23);
  swift_unknownObjectRelease(v26);

  swift_release(v19);
  v27 = objc_msgSend(v15, "defaultCenter");
  if (qword_10016A6C0 != -1)
    swift_once(&qword_10016A6C0, sub_1000A2590);
  v28 = qword_1001723B8;
  v29 = *(_QWORD *)&v16[v47];
  swift_retain(v29);
  v30 = objc_msgSend(v20, "mainQueue");
  v31 = swift_allocObject(&unk_10013C6B8, 24, 7);
  *(_QWORD *)(v31 + 16) = v25;
  v54 = sub_1000E9924;
  v55 = v31;
  aBlock = _NSConcreteStackBlock;
  v51 = 1107296256;
  v52 = sub_100048DB4;
  v53 = (Class)&unk_10013C6D0;
  v32 = _Block_copy(&aBlock);
  v33 = v55;
  v34 = v25;
  v35 = objc_msgSend(v27, "addObserverForName:object:queue:usingBlock:", v28, v29, v30, v32, swift_release(v33).n128_f64[0]);
  _Block_release(v32);
  swift_unknownObjectRelease(v35);

  swift_release(v29);
  v36 = objc_msgSend(v15, "defaultCenter");
  if (qword_10016A650 != -1)
    swift_once(&qword_10016A650, sub_100057180);
  v37 = qword_100172348;
  v38 = objc_msgSend(v20, "mainQueue");
  v39 = swift_allocObject(&unk_10013C708, 24, 7);
  *(_QWORD *)(v39 + 16) = v34;
  v54 = sub_1000E992C;
  v55 = v39;
  aBlock = _NSConcreteStackBlock;
  v51 = 1107296256;
  v52 = sub_100048DB4;
  v53 = (Class)&unk_10013C720;
  v40 = _Block_copy(&aBlock);
  v41 = v55;
  v42 = v34;
  v43 = objc_msgSend(v36, "addObserverForName:object:queue:usingBlock:", v37, 0, v38, v40, swift_release(v41).n128_f64[0]);
  _Block_release(v40);
  swift_unknownObjectRelease(v43);

  v44 = *(_QWORD *)&v16[v47];
  v53 = super_class;
  v54 = (void (*)(uint64_t))&off_10013C4F0;
  aBlock = v42;
  sub_10007420C((uint64_t)&aBlock, (uint64_t)v49);
  swift_beginAccess(v44 + 16, v48, 33, 0);
  swift_retain(v44);
  sub_1000B95DC((uint64_t)v49, v44 + 16, (uint64_t *)&unk_10016C2E0);
  swift_endAccess(v48);
  swift_release(v44);
  return v42;
}

void sub_1000E2350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v16[2];
  _BYTE v17[40];
  __int128 v18;
  __int128 v19;

  v1 = Notification.userInfo.getter(a1);
  if (v1)
  {
    v2 = v1;
    strcpy((char *)v16, "deviceStateKey");
    HIBYTE(v16[1]) = -18;
    AnyHashable.init<A>(_:)(v16, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v2 + 16) && (v10 = sub_100072B10((uint64_t)v17), (v3 & 1) != 0))
    {
      sub_1000370B0(*(_QWORD *)(v2 + 56) + 32 * v10, (uint64_t)&v18);
    }
    else
    {
      v18 = 0u;
      v19 = 0u;
    }
    swift_bridgeObjectRelease((DARootViewController *)v2, v3, v4, v5, v6, v7, v8, v9);
    sub_100036FDC((uint64_t)v17);
    if (*((_QWORD *)&v19 + 1))
    {
      v11 = sub_100037118(0, &qword_10016C2F0, off_100131A90);
      if ((swift_dynamicCast(v16, &v18, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0)
      {
        v12 = (void *)v16[0];
        v13 = type metadata accessor for CardState();
        swift_allocObject(v13, 89, 7);
        v14 = v12;
        v15 = sub_100052384(v14);

        sub_1000E2A9C(v15);
        swift_release(v15);
      }
    }
    else
    {
      sub_100036FA0((uint64_t)&v18, (uint64_t *)&unk_10016B610);
    }
  }
}

void sub_1000E24AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  DARootViewController *v15;
  DARootViewController *v16;
  unint64_t v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25[2];
  _BYTE v26[40];
  __int128 v27;
  __int128 v28;

  v1 = Notification.userInfo.getter(a1);
  if (v1)
  {
    v2 = v1;
    strcpy((char *)v25, "deviceStateKey");
    HIBYTE(v25[1]) = -18;
    AnyHashable.init<A>(_:)(v25, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v2 + 16) && (v10 = sub_100072B10((uint64_t)v26), (v3 & 1) != 0))
    {
      sub_1000370B0(*(_QWORD *)(v2 + 56) + 32 * v10, (uint64_t)&v27);
    }
    else
    {
      v27 = 0u;
      v28 = 0u;
    }
    swift_bridgeObjectRelease((DARootViewController *)v2, v3, v4, v5, v6, v7, v8, v9);
    sub_100036FDC((uint64_t)v26);
    if (*((_QWORD *)&v28 + 1))
    {
      v11 = sub_100037118(0, &qword_10016C2F0, off_100131A90);
      if ((swift_dynamicCast(v25, &v27, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0)
      {
        v12 = v25[0];
        v13 = objc_msgSend(v25[0], "serialNumber");
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        v17 = sub_1000E4BD4(v14, v16);
        swift_bridgeObjectRelease(v16, v18, v19, v20, v21, v22, v23, v24);
        if (v17)
        {
          sub_1000E2DDC(v17);
          swift_release(v17);
        }

      }
    }
    else
    {
      sub_100036FA0((uint64_t)&v27, (uint64_t *)&unk_10016B610);
    }
  }
}

void sub_1000E2630(uint64_t a1, uint64_t a2)
{
  DARootViewController *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  DARootViewController *v7;
  DARootViewController *v8;
  SEL v9;
  id v10;
  int v11;
  id v12;
  id v13;
  id v14;
  id v15;
  SEL v16;
  id v17;
  int v18;
  id v19;
  id v20;
  id v21;
  id v22;
  SEL v23;
  id v24;
  int v25;
  id v26;
  id v27;
  id v28;
  id v29;
  DARootViewController *v30;
  DARootViewController *v31;
  DARootViewController **v32;
  DARootViewController *v33;
  DARootViewController *v34;
  SEL v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  SEL v42;
  id v43;
  int v44;
  id v45;
  id v46;
  id v47;
  id v48;
  SEL v49;
  id v50;
  int v51;
  id v52;
  id v53;
  id v54;
  id v55;
  SEL v56;
  id v57;
  int v58;
  id v59;
  id v60;
  id v61;
  id v62;
  DARootViewController *v63;
  _BYTE v64[24];

  if (qword_10016A648 != -1)
    swift_once(&qword_10016A648, sub_100053F8C);
  v3 = *(DARootViewController **)(qword_100172340 + 16);
  v4 = *(_QWORD *)(qword_100172340 + 24);
  v5 = *(_BYTE *)(qword_100172340 + 32);
  v6 = a2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter;
  v7 = *(DARootViewController **)(a2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter);
  v8 = *(DARootViewController **)(a2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter + 8);
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 16) = v5;
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3, v9, v10, v11, v12, v13, v14, v15);
  swift_bridgeObjectRelease(v8, v16, v17, v18, v19, v20, v21, v22);
  swift_bridgeObjectRelease(v7, v23, v24, v25, v26, v27, v28, v29);
  LOBYTE(v3) = *(_BYTE *)(a2 + OBJC_IVAR____TtC11Diagnostics11CardManager_persistentOnly);
  *(_BYTE *)(v6 + 16) = (_BYTE)v3;
  v30 = *(DARootViewController **)v6;
  v31 = *(DARootViewController **)(v6 + 8);
  v32 = (DARootViewController **)(a2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates);
  swift_beginAccess(v32, v64, 0, 0);
  v33 = *v32;
  v63 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  sub_100051E00((uint64_t)v33, (uint64_t)v30, (uint64_t)v31, (char)v3, (uint64_t *)&v63);
  v34 = v63;
  swift_bridgeObjectRelease(v31, v35, v36, v37, v38, v39, v40, v41);
  swift_bridgeObjectRelease(v30, v42, v43, v44, v45, v46, v47, v48);
  swift_bridgeObjectRelease(v33, v49, v50, v51, v52, v53, v54, v55);
  swift_bridgeObjectRelease(v34, v56, v57, v58, v59, v60, v61, v62);
}

void sub_1000E2798(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  DARootViewController *v17;
  DARootViewController *v18;
  unint64_t v19;
  SEL v20;
  id v21;
  int v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = type metadata accessor for IndexPath(0);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100035CA4(&qword_10016E560);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v33 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  v15 = objc_msgSend(*(id *)(a1 + 40), "serialNumber");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = sub_1000E4BD4(v16, v18);
  swift_bridgeObjectRelease(v18, v20, v21, v22, v23, v24, v25, v26);
  if (v19)
  {
    sub_10005139C(a1);
    a1 = v19;
    if ((a2 & 0x20) == 0)
      goto LABEL_9;
  }
  else
  {
    swift_retain(a1);
    if ((a2 & 0x20) == 0)
      goto LABEL_9;
  }
  v27 = sub_1000E49A0(a1);
  if (v27 == 3)
    goto LABEL_9;
  v28 = 1 << *(_BYTE *)(a1 + 32);
  if ((v28 & 0x1FE0) != 0)
  {
    if (!v27)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((v28 & 0xE) != 0)
  {
    if (v27 == 1)
      goto LABEL_9;
LABEL_8:
    sub_1000E3EF8(a1);
    goto LABEL_9;
  }
  if (v27 != 2)
    goto LABEL_8;
LABEL_9:
  if ((a2 & 4) == 0)
  {
    swift_release(a1);
    return;
  }
  if (*(_BYTE *)(a1 + 17) == 1)
  {
    sub_1000E4DAC(a1, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v14, 1, v34) == 1)
    {
      swift_release(a1);
      v29 = (uint64_t)v14;
    }
    else
    {
      sub_100036FA0((uint64_t)v14, &qword_10016E560);
      sub_1000E2F18(a1, 1, 0, v12);
      swift_release(a1);
      v29 = (uint64_t)v12;
    }
  }
  else
  {
    sub_1000E4DAC(a1, (uint64_t)v9);
    v30 = v34;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v34) == 1)
    {
      sub_100036FA0((uint64_t)v9, &qword_10016E560);
      v31 = v33;
      sub_1000E34EC(a1, 1, v33);
      v32 = swift_release(a1);
      (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v31, v30, v32);
      return;
    }
    swift_release(a1);
    v29 = (uint64_t)v9;
  }
  sub_100036FA0(v29, &qword_10016E560);
}

void sub_1000E2A9C(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  DARootViewController **v11;
  uint64_t v12;
  DARootViewController *v13;
  DARootViewController *v14;
  DARootViewController *v15;
  DARootViewController *v16;
  SEL v17;
  id v18;
  int v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  int v26;
  id v27;
  id v28;
  id v29;
  id v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  SEL v38;
  id v39;
  int v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t aBlock[5];
  uint64_t v47;

  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10016A630 != -1)
    swift_once(&qword_10016A630, sub_1000502E0);
  v4 = qword_100172338;
  v5 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v6 = swift_allocObject(&unk_10013C618, 24, 7);
  *(_QWORD *)(v6 + 16) = v1;
  aBlock[4] = (uint64_t)sub_1000E9914;
  v47 = v6;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100048DB4;
  aBlock[3] = (uint64_t)&unk_10013C630;
  v7 = _Block_copy(aBlock);
  v8 = v47;
  v9 = v1;
  v10 = objc_msgSend(v3, "addObserverForName:object:queue:usingBlock:", v4, a1, v5, v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  swift_unknownObjectRelease(v10);

  v11 = (DARootViewController **)&v9[OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates];
  swift_beginAccess(&v9[OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates], aBlock, 33, 0);
  swift_retain(a1);
  sub_1000A8F3C(&v45, a1);
  v12 = v45;
  swift_endAccess(aBlock);
  swift_release(v12);
  v13 = *(DARootViewController **)&v9[OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter];
  v14 = *(DARootViewController **)&v9[OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter + 8];
  LOBYTE(v9) = v9[OBJC_IVAR____TtC11Diagnostics11CardManager_cardFilter + 16];
  v15 = *v11;
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  sub_100051E00((uint64_t)v15, (uint64_t)v13, (uint64_t)v14, (char)v9, aBlock);
  v16 = (DARootViewController *)aBlock[0];
  swift_bridgeObjectRelease(v14, v17, v18, v19, v20, v21, v22, v23);
  swift_bridgeObjectRelease(v13, v24, v25, v26, v27, v28, v29, v30);
  swift_bridgeObjectRelease(v15, v31, v32, v33, v34, v35, v36, v37);
  swift_bridgeObjectRelease(v16, v38, v39, v40, v41, v42, v43, v44);
}

void sub_1000E2CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12[2];
  _BYTE v13[40];
  __int128 v14;
  __int128 v15;

  v1 = Notification.userInfo.getter(a1);
  if (v1)
  {
    v2 = v1;
    strcpy((char *)v12, "changeInfoKey");
    HIWORD(v12[1]) = -4864;
    AnyHashable.init<A>(_:)(v12, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v2 + 16) && (v10 = sub_100072B10((uint64_t)v13), (v3 & 1) != 0))
    {
      sub_1000370B0(*(_QWORD *)(v2 + 56) + 32 * v10, (uint64_t)&v14);
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
    }
    swift_bridgeObjectRelease((DARootViewController *)v2, v3, v4, v5, v6, v7, v8, v9);
    sub_100036FDC((uint64_t)v13);
    if (*((_QWORD *)&v15 + 1))
    {
      if ((swift_dynamicCast(v12, &v14, (char *)&type metadata for Any + 8, &type metadata for CardState.ChangedPropertyNotificationInfo, 6) & 1) != 0)
      {
        v11 = v12[0];
        sub_1000E2798(v12[0], v12[1]);
        swift_release(v11);
      }
    }
    else
    {
      sub_100036FA0((uint64_t)&v14, (uint64_t *)&unk_10016B610);
    }
  }
}

uint64_t sub_1000E2DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  id v7;
  uint64_t v8;
  _BYTE v11[24];

  v2 = v1;
  v4 = sub_100035CA4(&qword_10016E560);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10016A630 != -1)
    swift_once(&qword_10016A630, sub_1000502E0);
  objc_msgSend(v7, "removeObserver:name:object:", v2, qword_100172338, a1);

  swift_beginAccess(v2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardStates, v11, 33, 0);
  v8 = sub_1000A811C(a1);
  swift_endAccess(v11);
  swift_release(v8);
  sub_1000E2F18(a1, 1, 0, v6);
  return sub_100036FA0((uint64_t)v6, &qword_10016E560);
}

uint64_t sub_1000E2F18@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  DARootViewController **v27;
  DARootViewController *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  DARootViewController *v34;
  SEL v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  DARootViewController *v45;
  DARootViewController *v46;
  SEL v47;
  id v48;
  int v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  DARootViewController **v59;
  DARootViewController *v60;
  char v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  SEL v81;
  id v82;
  int v83;
  id v84;
  id v85;
  id v86;
  id v87;
  char v88;
  unint64_t v89;
  void *v90;
  _BYTE v92[12];
  int v93;
  uint64_t v94;
  void (*v95)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  _UNKNOWN **v103;
  _QWORD v104[3];
  char v105[24];
  uint64_t v106;

  v5 = v4;
  v100 = a3;
  v98 = a2;
  v97 = type metadata accessor for Remove(0);
  __chkstk_darwin(v97);
  v9 = (uint64_t *)&v92[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100035CA4(&qword_10016E560);
  v11 = __chkstk_darwin(v10);
  v13 = &v92[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v92[-v14];
  v16 = type metadata accessor for IndexPath(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = &v92[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000E4DAC(a1, (uint64_t)v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100036FA0((uint64_t)v15, &qword_10016E560);
    v20 = 1;
  }
  else
  {
    v99 = a1;
    v95 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32);
    v96 = a4;
    v95(v19, v15, v16);
    v21 = OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue;
    v22 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue);
    *(_BYTE *)(v4 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue) = 1;
    v93 = v22;
    sub_1000E1BAC(v22);
    v24 = IndexPath.section.getter(v23);
    v94 = v21;
    if (v24 > 2)
    {
      v26 = 0;
      v25 = 2;
    }
    else
    {
      v25 = v24;
      v26 = IndexPath.row.getter(v24);
    }
    v27 = (DARootViewController **)(v4 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
    swift_beginAccess(v4 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView, v105, 0, 0);
    v28 = *v27;
    if (*(_QWORD *)(*v27)->remoteCardFilter)
    {
      v29 = sub_100072B40(v25);
      if ((v30 & 1) != 0)
      {
        v106 = *(_QWORD *)(*(_QWORD *)v28[1].remoteCardFilter + 8 * v29);
        swift_bridgeObjectRetain(v106);
        v31 = sub_1000E1564(v26, sub_100034AD0);
        swift_release(v31);
        v32 = v106;
        swift_beginAccess(v27, &v101, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v27);
        v104[0] = *v27;
        *v27 = (DARootViewController *)0x8000000000000000;
        sub_1000E84A4(v32, v25, isUniquelyReferenced_nonNull_native);
        v34 = *v27;
        *v27 = (DARootViewController *)v104[0];
        swift_bridgeObjectRelease(v34, v35, v36, v37, v38, v39, v40, v41);
        swift_endAccess(&v101);
        sub_1000E1824();
        v42 = *(void **)(v99 + 40);
        v43 = objc_msgSend(v42, "serialNumber");
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

        swift_beginAccess(v5 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber, &v101, 33, 0);
        sub_1000E5FAC(v44, (uint64_t)v46, (uint64_t)v13);
        sub_100036FA0((uint64_t)v13, &qword_10016E560);
        swift_endAccess(&v101);
        swift_bridgeObjectRelease(v46, v47, v48, v49, v50, v51, v52, v53);
        if ((v98 & 1) != 0)
        {
          v54 = objc_msgSend(v42, "serialNumber");
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v57 = v56;

          v58 = v97;
          (*(void (**)(char *, _BYTE *, uint64_t))(v17 + 16))((char *)v9 + *(int *)(v97 + 20), v19, v16);
          *v9 = v55;
          v9[1] = v57;
          v59 = (DARootViewController **)(v5 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue);
          swift_beginAccess(v5 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue, v104, 33, 0);
          v60 = *v59;
          v61 = swift_isUniquelyReferenced_nonNull_native(*v59);
          *v59 = v60;
          if ((v61 & 1) == 0)
          {
            v60 = sub_1000921FC(0, *(_QWORD *)v60->remoteCardFilter + 1, 1, (uint64_t)v60, v62, v63, v64, v65);
            *v59 = v60;
          }
          v67 = *(_QWORD *)v60->remoteCardFilter;
          v66 = *(_QWORD *)&v60->remoteCardFilter[8];
          if (v67 >= v66 >> 1)
          {
            v60 = sub_1000921FC((DARootViewController *)(v66 > 1), v67 + 1, 1, (uint64_t)v60, v62, v63, v64, v65);
            *v59 = v60;
          }
          v102 = v58;
          v103 = &off_10013C748;
          v68 = sub_10009DD34(&v101);
          sub_1000E9898((uint64_t)v9, (uint64_t)v68, type metadata accessor for Remove);
          *(_QWORD *)v60->remoteCardFilter = v67 + 1;
          sub_100078EBC(&v101, (uint64_t)&v60[v67].remoteCardFilter[16]);
          sub_1000604B4((uint64_t)v9, type metadata accessor for Remove);
          swift_endAccess(v104);
        }
      }
    }
    if (qword_10016A678 != -1)
      swift_once(&qword_10016A678, sub_10008BF34);
    v69 = qword_100172378;
    v70 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v71 = swift_allocObject(v70, 152, 7);
    *(_OWORD *)(v71 + 16) = xmmword_10010CE00;
    v72 = v99;
    v73 = objc_msgSend(*(id *)(v99 + 40), "serialNumber");
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v76 = v75;

    *(_QWORD *)(v71 + 56) = &type metadata for String;
    v77 = sub_100047048();
    *(_QWORD *)(v71 + 64) = v77;
    *(_QWORD *)(v71 + 32) = v74;
    *(_QWORD *)(v71 + 40) = v76;
    v78 = IndexPath.section.getter(v77);
    *(_QWORD *)(v71 + 96) = &type metadata for Int;
    *(_QWORD *)(v71 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v71 + 72) = v78;
    v79 = IndexPath.row.getter(v78);
    *(_QWORD *)(v71 + 136) = &type metadata for Int;
    *(_QWORD *)(v71 + 144) = &protocol witness table for Int;
    *(_QWORD *)(v71 + 112) = v79;
    v80 = static os_log_type_t.default.getter(v79);
    os_log(_:dso:log:type:_:)("DataSource remove: [%@] %d/%d", 29, 2, &_mh_execute_header, v69, v80, v71);
    swift_bridgeObjectRelease((DARootViewController *)v71, v81, v82, v83, v84, v85, v86, v87);
    v88 = *(_BYTE *)(v5 + v94);
    *(_BYTE *)(v5 + v94) = v93;
    sub_1000E1BAC(v88);
    if ((v100 & 1) == 0)
    {
      swift_beginAccess(v5 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardCells, &v101, 33, 0);
      v89 = swift_retain(v72);
      v90 = (void *)sub_1000E60DC(v89);
      swift_endAccess(&v101);
      swift_release(v72);

    }
    a4 = v96;
    v95(v96, v19, v16);
    v20 = 0;
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v17 + 56))(a4, v20, 1, v16);
}

void sub_1000E34EC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  DARootViewController **v9;
  DARootViewController *v10;
  char **v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  SEL v24;
  id v25;
  int v26;
  id v27;
  id v28;
  id v29;
  id v30;
  const char *v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  DARootViewController *v50;
  DARootViewController *v51;
  id v52;
  uint64_t v53;
  DARootViewController *v54;
  DARootViewController *v55;
  char v56;
  SEL v57;
  id v58;
  int v59;
  id v60;
  id v61;
  id v62;
  id v63;
  SEL v64;
  id v65;
  int v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const char *v74;
  void *v75;
  int v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  uint64_t v83;
  DARootViewController *v84;
  DARootViewController *v85;
  char **v86;
  id v87;
  uint64_t v88;
  DARootViewController *v89;
  DARootViewController *v90;
  char v91;
  SEL v92;
  id v93;
  int v94;
  id v95;
  id v96;
  id v97;
  id v98;
  SEL v99;
  id v100;
  int v101;
  id v102;
  id v103;
  id v104;
  id v105;
  DARootViewController *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  SEL v113;
  id v114;
  int v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  SEL v122;
  char v123;
  id v124;
  int v125;
  id v126;
  id v127;
  id v128;
  id v129;
  const char *v130;
  void *v131;
  int v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  SEL v140;
  id v141;
  int v142;
  id v143;
  id v144;
  id v145;
  id v146;
  BOOL v147;
  uint64_t v148;
  SEL v149;
  id v150;
  int v151;
  id v152;
  id v153;
  id v154;
  id v155;
  const char *v156;
  void *v157;
  int v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  DARootViewController **v169;
  char v170;
  uint64_t v171;
  DARootViewController *v172;
  SEL v173;
  id v174;
  int v175;
  id v176;
  id v177;
  id v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  SEL v193;
  id v194;
  int v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  char *v205;
  uint64_t v206;
  DARootViewController **v207;
  DARootViewController *v208;
  char isUniquelyReferenced_nonNull_native;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  unint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  SEL v220;
  id v221;
  int v222;
  id v223;
  id v224;
  id v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  DARootViewController **v229;
  int v230;
  uint64_t v231;
  uint64_t *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  DARootViewController *v240;
  uint64_t v241;
  DARootViewController *v242;
  __int128 v243;
  uint64_t v244;
  _UNKNOWN **v245;
  _QWORD v246[3];
  char v247[32];

  v230 = a2;
  v231 = type metadata accessor for Add(0);
  __chkstk_darwin(v231);
  v232 = (uint64_t *)((char *)&v227 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue);
  v234 = OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue) = 1;
  v233 = v7;
  sub_1000E1BAC(v7);
  v241 = a1;
  v8 = byte_10010F016[*(char *)(a1 + 32)];
  v236 = v3;
  v9 = (DARootViewController **)(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v9, v247, 0, 0);
  v229 = v9;
  v10 = *v9;
  v11 = &selRef_bluetoothID;
  if (!*(_QWORD *)v10->remoteCardFilter || (v12 = sub_100072B40(v8), (v13 & 1) == 0))
  {
    v120 = 0;
LABEL_83:
    IndexPath.init(row:section:)(v120, v8);
    if (qword_10016A678 != -1)
      swift_once(&qword_10016A678, sub_10008BF34);
    v180 = qword_100172378;
    v181 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v182 = swift_allocObject(v181, 152, 7);
    *(_OWORD *)(v182 + 16) = xmmword_10010CE00;
    v183 = *(void **)(v241 + 40);
    v184 = objc_msgSend(v183, v11[445]);
    v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
    v187 = v186;

    *(_QWORD *)(v182 + 56) = &type metadata for String;
    v188 = sub_100047048();
    *(_QWORD *)(v182 + 64) = v188;
    *(_QWORD *)(v182 + 32) = v185;
    *(_QWORD *)(v182 + 40) = v187;
    v189 = a3;
    v190 = IndexPath.section.getter(v188);
    *(_QWORD *)(v182 + 96) = &type metadata for Int;
    *(_QWORD *)(v182 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v182 + 72) = v190;
    v191 = IndexPath.row.getter(v190);
    *(_QWORD *)(v182 + 136) = &type metadata for Int;
    *(_QWORD *)(v182 + 144) = &protocol witness table for Int;
    *(_QWORD *)(v182 + 112) = v191;
    v192 = static os_log_type_t.default.getter(v191);
    os_log(_:dso:log:type:_:)("DataSource add: [%@] %d/%d", 26, 2, &_mh_execute_header, v180, v192, v182);
    swift_bridgeObjectRelease((DARootViewController *)v182, v193, v194, v195, v196, v197, v198, v199);
    if ((v230 & 1) != 0)
    {
      v200 = objc_msgSend(v183, v11[445]);
      v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
      v203 = v202;

      v204 = v232;
      v205 = (char *)v232 + *(int *)(v231 + 20);
      v206 = type metadata accessor for IndexPath(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v205, v189, v206);
      *v204 = v201;
      v204[1] = v203;
      v207 = (DARootViewController **)(v236 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue);
      swift_beginAccess(v236 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue, v246, 33, 0);
      v208 = *v207;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v207);
      *v207 = v208;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v208 = sub_1000921FC(0, *(_QWORD *)v208->remoteCardFilter + 1, 1, (uint64_t)v208, v210, v211, v212, v213);
        *v207 = v208;
      }
      v215 = *(_QWORD *)v208->remoteCardFilter;
      v214 = *(_QWORD *)&v208->remoteCardFilter[8];
      if (v215 >= v214 >> 1)
      {
        v208 = sub_1000921FC((DARootViewController *)(v214 > 1), v215 + 1, 1, (uint64_t)v208, v210, v211, v212, v213);
        *v207 = v208;
      }
      v244 = v231;
      v245 = &off_10013C750;
      v216 = sub_10009DD34(&v243);
      v217 = (uint64_t)v232;
      sub_1000E9898((uint64_t)v232, (uint64_t)v216, type metadata accessor for Add);
      *(_QWORD *)v208->remoteCardFilter = v215 + 1;
      sub_100078EBC(&v243, (uint64_t)&v208[v215].remoteCardFilter[16]);
      sub_1000604B4(v217, type metadata accessor for Add);
      swift_endAccess(v246);
    }
    v218 = *(_BYTE *)(v236 + v234);
    *(_BYTE *)(v236 + v234) = v233;
    sub_1000E1BAC(v218);
    return;
  }
  v14 = *(_QWORD *)(*(_QWORD *)v10[1].remoteCardFilter + 8 * v12);
  v246[0] = v14;
  v240 = (DARootViewController *)v14;
  v228 = v8;
  if ((unint64_t)v14 >> 62)
  {
LABEL_72:
    if (v14 < 0)
      v138 = v14;
    else
      v138 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v14, 3);
    v139 = _CocoaArrayWrapper.endIndex.getter(v138);
    swift_bridgeObjectRelease(v240, v140, v141, v142, v143, v144, v145, v146);
    v147 = v139 < 1;
    v14 = (uint64_t)v240;
    if (!v147)
    {
      swift_bridgeObjectRetain(v240);
      v148 = _CocoaArrayWrapper.endIndex.getter(v138);
      swift_bridgeObjectRelease((DARootViewController *)v14, v149, v150, v151, v152, v153, v154, v155);
      v239 = v148;
      if (v148)
        goto LABEL_5;
      swift_bridgeObjectRelease((DARootViewController *)v14, v156, v157, v158, v159, v160, v161, v162);
      goto LABEL_81;
    }
LABEL_78:
    swift_bridgeObjectRelease((DARootViewController *)v14, v16, v17, v18, v19, v20, v21, v22);
    v163 = v241;
    v164 = swift_retain(v241);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v164);
    v166 = *(_QWORD *)((v246[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v165 = *(_QWORD *)((v246[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v166 >= v165 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v165 > 1, v166 + 1, 1);
    v167 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v166, v163);
    specialized Array._endMutation()(v167);
LABEL_81:
    v235 = 0;
LABEL_82:
    v168 = v246[0];
    v169 = v229;
    swift_beginAccess(v229, &v243, 33, 0);
    v170 = swift_isUniquelyReferenced_nonNull_native(*v169);
    v242 = *v169;
    *v169 = (DARootViewController *)0x8000000000000000;
    v171 = v168;
    v8 = v228;
    sub_1000E84A4(v171, v228, v170);
    v172 = *v169;
    *v169 = v242;
    swift_bridgeObjectRelease(v172, v173, v174, v175, v176, v177, v178, v179);
    swift_endAccess(&v243);
    sub_1000E1824();
    v120 = v235;
    goto LABEL_83;
  }
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v14, 2);
  v239 = v15;
  if (!v15)
    goto LABEL_78;
LABEL_5:
  v227 = a3;
  v235 = 0;
  a3 = v241;
  v237 = *(_QWORD *)(v241 + 48);
  v238 = v14 & 0xC000000000000001;
  v23 = 4;
  while (1)
  {
    v38 = v23 - 4;
    if (v238)
    {
      v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v14);
      v40 = v23 - 3;
      if (__OFADD__(v38, 1))
        goto LABEL_66;
    }
    else
    {
      v39 = *(_QWORD *)(v14 + 8 * v23);
      swift_retain(v39);
      v40 = v23 - 3;
      if (__OFADD__(v38, 1))
      {
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
    }
    v41 = *(_QWORD *)(v39 + 48);
    if (*(_QWORD *)(v41 + 16) < 2uLL)
      goto LABEL_67;
    v42 = *(_QWORD *)(v41 + 56);
    if (v42 > 8)
      v43 = 0;
    else
      v43 = qword_10010F028[v42];
    if (*(_QWORD *)(v237 + 16) < 2uLL)
      goto LABEL_68;
    v44 = *(_QWORD *)(v237 + 56);
    if (v44 > 8)
    {
      v45 = 0;
      if (v42 > 8)
      {
LABEL_20:
        v46 = 0;
        if (v44 > 8)
          goto LABEL_21;
        goto LABEL_26;
      }
    }
    else
    {
      v45 = qword_10010F028[v44];
      if (v42 > 8)
        goto LABEL_20;
    }
    v46 = qword_10010F070[v42];
    if (v44 > 8)
    {
LABEL_21:
      v47 = 0;
      if (v43 != v45)
        goto LABEL_22;
      goto LABEL_27;
    }
LABEL_26:
    v47 = qword_10010F070[v44];
    if (v43 != v45)
    {
LABEL_22:
      if (v47 < v46)
        break;
      goto LABEL_31;
    }
LABEL_27:
    v48 = objc_msgSend(*(id *)(v39 + 40), v11[445], v227);
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    v52 = objc_msgSend(*(id *)(a3 + 40), v11[445]);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    if (v53 == v49 && v55 == v51)
    {
      swift_bridgeObjectRelease_n(v51, 2);
      goto LABEL_31;
    }
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v49, v51, 1);
    swift_bridgeObjectRelease(v51, v57, v58, v59, v60, v61, v62, v63);
    swift_bridgeObjectRelease(v55, v64, v65, v66, v67, v68, v69, v70);
    if ((v56 & 1) != 0)
      break;
LABEL_31:
    v14 = v246[0];
    if (v246[0] >> 62)
    {
      if (v246[0] < 0)
        v111 = v246[0];
      else
        v111 = v246[0] & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v246[0]);
      v71 = _CocoaArrayWrapper.endIndex.getter(v111);
      if (!v71)
      {
LABEL_6:
        swift_release(v39);
        swift_bridgeObjectRelease((DARootViewController *)v14, v24, v25, v26, v27, v28, v29, v30);
        goto LABEL_7;
      }
    }
    else
    {
      v71 = *(_QWORD *)((v246[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v246[0]);
      if (!v71)
        goto LABEL_6;
    }
    v72 = v71 - 1;
    if (__OFSUB__(v71, 1))
      goto LABEL_69;
    if ((v14 & 0xC000000000000001) != 0)
    {
      v73 = specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v14);
    }
    else
    {
      if ((v72 & 0x8000000000000000) != 0)
        goto LABEL_70;
      if (v72 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_71;
      v73 = *(_QWORD *)(v14 + 8 * v72 + 32);
      swift_retain(v73);
    }
    swift_bridgeObjectRelease((DARootViewController *)v14, v74, v75, v76, v77, v78, v79, v80);
    v81 = *(void **)(v73 + 40);
    swift_retain(v39);
    swift_retain(v73);
    v82 = objc_msgSend(v81, v11[445]);
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
    v85 = v84;

    v86 = v11;
    v87 = objc_msgSend(*(id *)(v39 + 40), v11[445]);
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    if (v83 == v88 && v85 == v90)
    {
      swift_release_n(v73, 2);
      swift_release(v39);
      swift_bridgeObjectRelease_n(v85, 2);
LABEL_42:
      v106 = (DARootViewController *)v246[0];
      v11 = v86;
      if (v246[0] >> 62)
      {
        if (v246[0] < 0)
          v112 = v246[0];
        else
          v112 = v246[0] & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v246[0]);
        v235 = _CocoaArrayWrapper.endIndex.getter(v112);
        swift_bridgeObjectRelease(v106, v113, v114, v115, v116, v117, v118, v119);
      }
      else
      {
        v235 = *(_QWORD *)((v246[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      a3 = v241;
      v107 = swift_retain(v241);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v107);
      v109 = *(_QWORD *)((v246[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v108 = *(_QWORD *)((v246[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v109 >= v108 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1);
      v110 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v109, a3);
      specialized Array._endMutation()(v110);
      swift_release(v39);
      goto LABEL_7;
    }
    v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v85, v88, v90, 0);
    swift_release_n(v73, 2);
    swift_release(v39);
    swift_bridgeObjectRelease(v85, v92, v93, v94, v95, v96, v97, v98);
    swift_bridgeObjectRelease(v90, v99, v100, v101, v102, v103, v104, v105);
    if ((v91 & 1) != 0)
      goto LABEL_42;
    swift_release(v39);
    v11 = v86;
    a3 = v241;
LABEL_7:
    v14 = (uint64_t)v240;
    ++v23;
    if (v40 == v239)
    {
      swift_bridgeObjectRelease(v240, v31, v32, v33, v34, v35, v36, v37);
      a3 = v227;
      goto LABEL_82;
    }
  }
  v121 = v246[0];
  swift_bridgeObjectRetain(v246[0]);
  v235 = sub_1000E10C0(v39, v121);
  v123 = (char)v122;
  swift_bridgeObjectRelease((DARootViewController *)v121, v122, v124, v125, v126, v127, v128, v129);
  if ((v123 & 1) == 0)
  {
    swift_bridgeObjectRelease(v240, v130, v131, v132, v133, v134, v135, v136);
    a3 = v227;
    if ((unint64_t)v121 >> 62)
    {
      if (v121 < 0)
        v219 = v121;
      else
        v219 = v121 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v241);
      swift_bridgeObjectRetain(v121);
      v137 = _CocoaArrayWrapper.endIndex.getter(v219);
      swift_bridgeObjectRelease((DARootViewController *)v121, v220, v221, v222, v223, v224, v225, v226);
    }
    else
    {
      v137 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain(v241);
    }
    if (v137 < v235)
    {
      __break(1u);
    }
    else if ((v235 & 0x8000000000000000) == 0)
    {
      sub_100035054(v235, v235, v241);
      swift_release(v39);
      goto LABEL_82;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000E3EF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  SEL v32;
  id v33;
  int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  DARootViewController **v45;
  DARootViewController *v46;
  char isUniquelyReferenced_nonNull_native;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _UNKNOWN **v65;
  _BYTE v66[24];

  v2 = v1;
  v62 = type metadata accessor for Move(0);
  __chkstk_darwin(v62);
  v5 = (uint64_t *)((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100035CA4(&qword_10016E560);
  __chkstk_darwin(v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v57 - v14;
  v16 = OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue;
  v17 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_freezeChangeQueue) = 1;
  v60 = v17;
  sub_1000E1BAC(v17);
  sub_1000E2F18(a1, 0, 1, v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100036FA0((uint64_t)v8, &qword_10016E560);
  v59 = v16;
  (*(void (**)(char *, _BYTE *, uint64_t))(v10 + 32))(v15, v8, v9);
  sub_1000E34EC(a1, 0, (uint64_t)v13);
  v61 = v10;
  if (qword_10016A678 != -1)
    swift_once(&qword_10016A678, sub_10008BF34);
  v58 = qword_100172378;
  v19 = sub_100035CA4((uint64_t *)&unk_10016BE40);
  v20 = swift_allocObject(v19, 232, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10010CDF0;
  v21 = *(void **)(a1 + 40);
  v22 = objc_msgSend(v21, "serialNumber");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v26 = sub_100047048();
  *(_QWORD *)(v20 + 64) = v26;
  *(_QWORD *)(v20 + 32) = v23;
  *(_QWORD *)(v20 + 40) = v25;
  v27 = IndexPath.section.getter(v26);
  *(_QWORD *)(v20 + 96) = &type metadata for Int;
  *(_QWORD *)(v20 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v20 + 72) = v27;
  v28 = IndexPath.row.getter(v27);
  *(_QWORD *)(v20 + 136) = &type metadata for Int;
  *(_QWORD *)(v20 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v20 + 112) = v28;
  v29 = IndexPath.section.getter(v28);
  *(_QWORD *)(v20 + 176) = &type metadata for Int;
  *(_QWORD *)(v20 + 184) = &protocol witness table for Int;
  *(_QWORD *)(v20 + 152) = v29;
  v30 = IndexPath.row.getter(v29);
  *(_QWORD *)(v20 + 216) = &type metadata for Int;
  *(_QWORD *)(v20 + 224) = &protocol witness table for Int;
  *(_QWORD *)(v20 + 192) = v30;
  v31 = static os_log_type_t.default.getter(v30);
  os_log(_:dso:log:type:_:)("DataSource move: [%@] %d/%d => %d/%d", 36, 2, &_mh_execute_header, v58, v31, v20);
  swift_bridgeObjectRelease((DARootViewController *)v20, v32, v33, v34, v35, v36, v37, v38);
  v39 = objc_msgSend(v21, "serialNumber");
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  v42 = v41;

  v43 = v62;
  v44 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  v44((char *)v5 + *(int *)(v62 + 20), v15, v9);
  v44((char *)v5 + *(int *)(v43 + 24), v13, v9);
  *v5 = v40;
  v5[1] = v42;
  v45 = (DARootViewController **)(v2 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11Diagnostics11CardManager_changeQueue, v66, 33, 0);
  v46 = *v45;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v45);
  *v45 = v46;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v46 = sub_1000921FC(0, *(_QWORD *)v46->remoteCardFilter + 1, 1, (uint64_t)v46, v48, v49, v50, v51);
    *v45 = v46;
  }
  v53 = *(_QWORD *)v46->remoteCardFilter;
  v52 = *(_QWORD *)&v46->remoteCardFilter[8];
  if (v53 >= v52 >> 1)
  {
    v46 = sub_1000921FC((DARootViewController *)(v52 > 1), v53 + 1, 1, (uint64_t)v46, v48, v49, v50, v51);
    *v45 = v46;
  }
  v64 = v62;
  v65 = &off_10013C758;
  v54 = sub_10009DD34(&v63);
  sub_1000E9898((uint64_t)v5, (uint64_t)v54, type metadata accessor for Move);
  *(_QWORD *)v46->remoteCardFilter = v53 + 1;
  sub_100078EBC(&v63, (uint64_t)&v46[v53].remoteCardFilter[16]);
  sub_1000604B4((uint64_t)v5, type metadata accessor for Move);
  swift_endAccess(v66);
  v55 = *(_BYTE *)(v2 + v59);
  *(_BYTE *)(v2 + v59) = v60;
  sub_1000E1BAC(v55);
  v56 = *(void (**)(char *, uint64_t))(v61 + 8);
  v56(v13, v9);
  return ((uint64_t (*)(char *, uint64_t))v56)(v15, v9);
}

void sub_1000E4338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  DARootViewController **v15;
  uint64_t *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  SEL v36;
  id v37;
  int v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  DARootViewController *v52;
  DARootViewController *v53;
  DARootViewController **v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  DARootViewController *v60;
  unint64_t v61;
  SEL v62;
  char v63;
  id v64;
  int v65;
  id v66;
  id v67;
  id v68;
  id v69;
  int isUniquelyReferenced_nonNull_native;
  const char *v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  DARootViewController *v79;
  SEL v80;
  id v81;
  int v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  DARootViewController *v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  DARootViewController *v100;
  unint64_t v101;
  const char *v102;
  void *v103;
  int v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  DARootViewController *v114;
  SEL v115;
  id v116;
  int v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  SEL v125;
  id v126;
  int v127;
  id v128;
  id v129;
  id v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  unint64_t v136;
  int64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  DARootViewController *v142;
  unint64_t v143;
  uint64_t v144;
  DARootViewController **v145;
  uint64_t v146;
  uint64_t v147;
  DARootViewController *v148;
  _BYTE v149[24];
  char v150[32];

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v139 = (char *)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100035CA4(&qword_10016E560);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v140 = (char *)&v132 - v8;
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView, v150, 0, 0);
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 64);
  v133 = *v9 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v15 = (DARootViewController **)(v0 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber);
  v16 = &qword_10016E560;
  v134 = (unint64_t)(v12 + 63) >> 6;
  v135 = v10;
  swift_bridgeObjectRetain(v10);
  v17 = 0;
  v138 = v7;
  v145 = v15;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v19 = (v14 - 1) & v14;
      v20 = v18 | (v17 << 6);
    }
    else
    {
      v21 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_58;
      if (v21 >= v134)
        goto LABEL_54;
      v22 = *(_QWORD *)(v133 + 8 * v21);
      ++v17;
      if (!v22)
      {
        v17 = v21 + 1;
        if (v21 + 1 >= v134)
          goto LABEL_54;
        v22 = *(_QWORD *)(v133 + 8 * v17);
        if (!v22)
        {
          v17 = v21 + 2;
          if (v21 + 2 >= v134)
            goto LABEL_54;
          v22 = *(_QWORD *)(v133 + 8 * v17);
          if (!v22)
          {
            v23 = v21 + 3;
            if (v23 >= v134)
              goto LABEL_54;
            v22 = *(_QWORD *)(v133 + 8 * v23);
            if (!v22)
            {
              while (1)
              {
                v17 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_59;
                if (v17 >= v134)
                  break;
                v22 = *(_QWORD *)(v133 + 8 * v17);
                ++v23;
                if (v22)
                  goto LABEL_20;
              }
LABEL_54:
              swift_release(v135);
              return;
            }
            v17 = v23;
          }
        }
      }
LABEL_20:
      v19 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v17 << 6);
    }
    v136 = v19;
    v137 = v17;
    v24 = *(_QWORD *)(v135 + 56);
    v144 = *(unsigned __int8 *)(*(_QWORD *)(v135 + 48) + v20);
    v25 = *(_QWORD *)(v24 + 8 * v20);
    if ((unint64_t)v25 >> 62)
      break;
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v25);
    if (v26)
      goto LABEL_23;
LABEL_4:
    swift_bridgeObjectRelease((DARootViewController *)v25, v27, v28, v29, v30, v31, v32, v33);
    v14 = v136;
    v17 = v137;
  }
  v122 = v16;
  if (v25 < 0)
    v123 = *(_QWORD *)(v24 + 8 * v20);
  else
    v123 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v25, 2);
  v124 = v123;
  v16 = v122;
  v26 = _CocoaArrayWrapper.endIndex.getter(v124);
  swift_bridgeObjectRelease((DARootViewController *)v25, v125, v126, v127, v128, v129, v130, v131);
  if (!v26)
    goto LABEL_4;
LABEL_23:
  v142 = (DARootViewController *)v25;
  v143 = v25 & 0xC000000000000001;
  v34 = 4;
  v141 = v26;
  while (1)
  {
    v46 = v16;
    v47 = v34 - 4;
    if (!v143)
      break;
    v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v25);
    v49 = v34 - 3;
    if (__OFADD__(v47, 1))
      goto LABEL_55;
LABEL_32:
    v146 = v49;
    v147 = v48;
    v50 = objc_msgSend(*(id *)(v48 + 40), "serialNumber");
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    v54 = v145;
    v55 = (uint64_t)v140;
    IndexPath.init(row:section:)(v34 - 4, v144);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v56(v55, 0, 1, v1);
    swift_beginAccess(v54, v149, 33, 0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v55, 1, v1) == 1)
    {
      v57 = v7;
      v58 = v2;
      v59 = (uint64_t)v57;
      sub_100036FA0(v55, v46);
      v60 = *v54;
      swift_bridgeObjectRetain(*v54);
      v61 = sub_100072A94(v51, (uint64_t)v53);
      v63 = (char)v62;
      swift_bridgeObjectRelease(v60, v62, v64, v65, v66, v67, v68, v69);
      if ((v63 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
        v78 = (uint64_t)*v54;
        v148 = *v54;
        *v54 = (DARootViewController *)0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1000E8CD8();
          v78 = (uint64_t)v148;
        }
        swift_bridgeObjectRelease(*(DARootViewController **)(*(_QWORD *)(v78 + 48) + 16 * v61 + 8), v71, v72, v73, v74, v75, v76, v77);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 32))(v59, *(_QWORD *)(v78 + 56) + *(_QWORD *)(v58 + 72) * v61, v1);
        sub_1000E7CB8(v61, v78);
        v79 = *v54;
        *v54 = (DARootViewController *)v78;
        swift_bridgeObjectRelease(v79, v80, v81, v82, v83, v84, v85, v86);
        v35 = 0;
      }
      else
      {
        v35 = 1;
      }
      v16 = &qword_10016E560;
      v56(v59, v35, 1, v1);
      swift_bridgeObjectRelease(v53, v36, v37, v38, v39, v40, v41, v42);
      sub_100036FA0(v59, &qword_10016E560);
      v43 = (char *)v59;
      v2 = v58;
      v7 = v43;
      v44 = v141;
      v45 = v147;
      goto LABEL_26;
    }
    v87 = v2;
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    v89 = v1;
    v88(v139, v55, v1);
    v90 = swift_isUniquelyReferenced_nonNull_native(*v54);
    v148 = *v54;
    v91 = v148;
    *v54 = (DARootViewController *)0x8000000000000000;
    v93 = sub_100072A94(v51, (uint64_t)v53);
    v94 = *(_QWORD *)v91->remoteCardFilter;
    v95 = (v92 & 1) == 0;
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
      goto LABEL_56;
    v97 = v92;
    if (*(_QWORD *)&v91->remoteCardFilter[8] >= v96)
    {
      if ((v90 & 1) != 0)
      {
        v45 = v147;
        v100 = v148;
        if ((v92 & 1) == 0)
          goto LABEL_46;
      }
      else
      {
        sub_1000E8CD8();
        v45 = v147;
        v100 = v148;
        if ((v97 & 1) == 0)
          goto LABEL_46;
      }
    }
    else
    {
      sub_1000E7168(v96, v90);
      v98 = sub_100072A94(v51, (uint64_t)v53);
      if ((v97 & 1) != (v99 & 1))
        goto LABEL_60;
      v93 = v98;
      v45 = v147;
      v100 = v148;
      if ((v97 & 1) == 0)
      {
LABEL_46:
        *(_QWORD *)&v100[1].remoteCardFilter[8 * (v93 >> 6) + 8] |= 1 << v93;
        v109 = (uint64_t *)(*(_QWORD *)v100[1].responder + 16 * v93);
        *v109 = v51;
        v109[1] = (uint64_t)v53;
        v110 = *(_QWORD *)v100[1].remoteCardFilter + *(_QWORD *)(v87 + 72) * v93;
        v1 = v89;
        v88((char *)v110, (uint64_t)v139, v89);
        v111 = *(_QWORD *)v100->remoteCardFilter;
        v112 = __OFADD__(v111, 1);
        v113 = v111 + 1;
        if (v112)
          goto LABEL_57;
        *(_QWORD *)v100->remoteCardFilter = v113;
        swift_bridgeObjectRetain(v53);
        v2 = v87;
        goto LABEL_48;
      }
    }
    v2 = v87;
    v101 = *(_QWORD *)v100[1].remoteCardFilter + *(_QWORD *)(v87 + 72) * v93;
    v1 = v89;
    (*(void (**)(unint64_t, char *, uint64_t))(v87 + 40))(v101, v139, v89);
LABEL_48:
    v114 = *v145;
    *v145 = v148;
    swift_bridgeObjectRelease(v53, v102, v103, v104, v105, v106, v107, v108);
    swift_bridgeObjectRelease(v114, v115, v116, v117, v118, v119, v120, v121);
    v16 = &qword_10016E560;
    v7 = v138;
    v44 = v141;
LABEL_26:
    swift_endAccess(v149);
    swift_release(v45);
    ++v34;
    v25 = (uint64_t)v142;
    if (v146 == v44)
      goto LABEL_4;
  }
  v48 = swift_retain(*(_QWORD *)(v25 + 8 * v34));
  v49 = v34 - 3;
  if (!__OFADD__(v47, 1))
    goto LABEL_32;
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000E49A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v2 = sub_100035CA4(&qword_10016E560);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E4DAC(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100036FA0((uint64_t)v4, &qword_10016E560);
    return 3;
  }
  else
  {
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v11 = IndexPath.section.getter(v10);
    if (v11 > 2)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11;
      IndexPath.row.getter(v11);
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

unint64_t sub_1000E4ADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  DARootViewController *v11;
  uint64_t v12;
  SEL v13;
  id v14;
  int v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _BYTE v20[24];

  v2 = v1;
  v3 = IndexPath.section.getter(a1);
  if (v3 > 2)
  {
    v5 = 0;
    v4 = 2;
  }
  else
  {
    v4 = v3;
    v5 = IndexPath.row.getter(v3);
  }
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView, v20, 0, 0);
  v7 = *v6;
  if (!*(_QWORD *)(v7 + 16))
    return 0;
  result = sub_100072B40(v4);
  if ((v9 & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(v7 + 56);
  v11 = *(DARootViewController **)(v10 + 8 * result);
  if (((unint64_t)v11 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v10 + 8 * result));
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v11);
    swift_bridgeObjectRelease(v11, v13, v14, v15, v16, v17, v18, v19);
    return v12;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(_QWORD *)(((unint64_t)v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(_QWORD *)&v11->remoteCardFilter[8 * v5 + 16];
    swift_retain(v12);
    return v12;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000E4BD4(uint64_t a1, DARootViewController *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  SEL v25;
  id v26;
  int v27;
  id v28;
  id v29;
  id v30;
  id v31;
  unint64_t v32;
  _BYTE v35[24];

  v3 = v2;
  v6 = sub_100035CA4(&qword_10016E560);
  __chkstk_darwin(v6);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber);
  swift_beginAccess(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber, v35, 0, 0);
  v14 = *v13;
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v14);
    v15 = sub_100072A94(a1, (uint64_t)a2);
    if ((v16 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, *(_QWORD *)(v14 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      v17 = 0;
    }
    else
    {
      v17 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v17, 1, v9);
    swift_bridgeObjectRelease(a2, v18, v19, v20, v21, v22, v23, v24);
    swift_bridgeObjectRelease((DARootViewController *)v14, v25, v26, v27, v28, v29, v30, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      v32 = sub_1000E4ADC((uint64_t)v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return v32;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  }
  sub_100036FA0((uint64_t)v8, &qword_10016E560);
  return 0;
}

void sub_1000E4DAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  DARootViewController *v6;
  DARootViewController *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  DARootViewController *v31;
  uint64_t v32;
  char v33[24];

  v4 = objc_msgSend(*(id *)(a1 + 40), "serialNumber");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber);
  swift_beginAccess(v8, v33, 0, 0);
  v9 = *v8;
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain(v9);
    v10 = sub_100072A94(v5, (uint64_t)v7);
    if ((v11 & 1) != 0)
    {
      v12 = v10;
      v13 = *(_QWORD *)(v9 + 56);
      v14 = type metadata accessor for IndexPath(0);
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(a2, v13 + *(_QWORD *)(v15 + 72) * v12, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
    }
    else
    {
      v32 = type metadata accessor for IndexPath(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 1, 1, v32);
    }
    swift_bridgeObjectRelease(v7, v16, v17, v18, v19, v20, v21, v22);
    v31 = (DARootViewController *)v9;
  }
  else
  {
    v23 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
    v31 = v7;
  }
  swift_bridgeObjectRelease(v31, v24, v25, v26, v27, v28, v29, v30);
}

id sub_1000E4F00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardManager()
{
  return objc_opt_self(_TtC11Diagnostics11CardManager);
}

double sub_1000E4FE4(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  _BYTE v26[24];
  _QWORD v27[5];

  v4 = v3;
  v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState];
  *(_QWORD *)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_cardState] = a2;
  swift_retain_n(a2, 2);
  swift_release(v8);
  sub_100079050();
  swift_release(a2);
  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC11Diagnostics11CardManager_deviceManager);
  v27[3] = type metadata accessor for DeviceManager();
  v27[4] = &off_10013A5F8;
  v27[0] = v9;
  v10 = (uint64_t)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_controller];
  swift_beginAccess(&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_controller], v26, 33, 0);
  swift_retain(v9);
  sub_1000B95DC((uint64_t)v27, v10, (uint64_t *)&unk_10016D850);
  swift_endAccess(v26);
  objc_msgSend(a1, "setClipsToBounds:", 1);
  v11 = (void *)objc_opt_self(UIColor);
  v12 = objc_msgSend(v11, "clearColor");
  objc_msgSend(a1, "setBackgroundColor:", v12);

  v13 = objc_msgSend(a1, "contentView");
  v14 = objc_msgSend(v11, "clearColor");
  objc_msgSend(v13, "setBackgroundColor:", v14);

  v15 = swift_allocObject(&unk_10013C5A0, 24, 7);
  *(_QWORD *)(v15 + 16) = a3;
  v16 = (uint64_t *)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_layoutUpdateHandler];
  v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_layoutUpdateHandler];
  v18 = *(_QWORD *)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_layoutUpdateHandler + 8];
  *v16 = (uint64_t)sub_1000E981C;
  v16[1] = v15;
  v19 = a3;
  swift_retain(v15);
  sub_100035D74(v17, v18);
  v20 = *v16;
  v21 = v16[1];
  v22 = (uint64_t *)(*(_QWORD *)&a1[OBJC_IVAR____TtC11Diagnostics12CardViewCell_stackView]
                  + OBJC_IVAR____TtC11Diagnostics13CardStackView_layoutUpdateHandler);
  v23 = *v22;
  v24 = v22[1];
  *v22 = *v16;
  v22[1] = v21;
  sub_100035C4C(v20, v21);
  sub_100035D74(v23, v24);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

char *sub_1000E51FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  SEL v14;
  id v15;
  int v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  SEL v30;
  id v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  NSString v37;
  char *v38;

  if (IndexPath.section.getter(a1))
  {
    if (qword_10016A678 != -1)
      swift_once(&qword_10016A678, sub_10008BF34);
    v6 = qword_100172378;
    v7 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_10010BE30;
    v9 = sub_100051504();
    v11 = v10;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    v12 = sub_100047048();
    *(_QWORD *)(v8 + 64) = v12;
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v11;
    v13 = static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:type:_:)("Spawned a new CardViewSessionCell for: %@", 41, 2, &_mh_execute_header, v6, v13, v8);
    swift_bridgeObjectRelease((DARootViewController *)v8, v14, v15, v16, v17, v18, v19, v20);
    v21 = objc_allocWithZone((Class)type metadata accessor for CardViewSessionCell());
  }
  else
  {
    if (qword_10016A678 != -1)
      swift_once(&qword_10016A678, sub_10008BF34);
    v22 = qword_100172378;
    v23 = sub_100035CA4((uint64_t *)&unk_10016BE40);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10010BE30;
    v25 = sub_100051504();
    v27 = v26;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    v28 = sub_100047048();
    *(_QWORD *)(v24 + 64) = v28;
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v27;
    v29 = static os_log_type_t.default.getter(v28);
    os_log(_:dso:log:type:_:)("Spawned a new CardViewPersistentCell for: %@", 44, 2, &_mh_execute_header, v22, v29, v24);
    swift_bridgeObjectRelease((DARootViewController *)v24, v30, v31, v32, v33, v34, v35, v36);
    v21 = objc_allocWithZone((Class)type metadata accessor for CardViewPersistentCell());
  }
  v37 = String._bridgeToObjectiveC()();
  v38 = (char *)objc_msgSend(v21, "initWithStyle:reuseIdentifier:", 0, v37);

  sub_1000E4FE4(v38, a1, a4);
  return v38;
}

double sub_1000E5438(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  double result;
  _QWORD v8[5];
  uint64_t v9;

  v2 = swift_allocObject(&unk_10013C5C8, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  v3 = (void *)objc_opt_self(UIView);
  v8[4] = sub_1000E9824;
  v9 = v2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100030658;
  v8[3] = &unk_10013C5E0;
  v4 = _Block_copy(v8);
  v5 = v9;
  v6 = a1;
  swift_retain(v2);
  swift_release(v5);
  objc_msgSend(v3, "animateWithDuration:delay:options:animations:completion:", 0, v4, 0, 0.25, 0.0);
  _Block_release(v4);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

id sub_1000E5528(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  DARootViewController **v27;
  DARootViewController *v28;
  uint64_t v29;
  void *v30;
  SEL v31;
  id v32;
  int v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _BYTE v40[24];
  _BYTE v41[24];

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v40[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10016A678 != -1)
    swift_once(&qword_10016A678, sub_10008BF34);
  v10 = qword_100172378;
  v11 = sub_100035CA4((uint64_t *)&unk_10016BE40);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_10010BE30;
  v13 = IndexPath.description.getter();
  v15 = v14;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v16 = sub_100047048();
  *(_QWORD *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)("Fetching cell at indexPath: %@", 30, 2, &_mh_execute_header, v10, v17, v12);
  swift_bridgeObjectRelease((DARootViewController *)v12, v18, v19, v20, v21, v22, v23, v24);
  v25 = sub_1000E4ADC(a2);
  if (!v25)
    return objc_msgSend(objc_allocWithZone((Class)UITableViewCell), "init");
  v26 = v25;
  v27 = (DARootViewController **)(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardCells);
  swift_beginAccess(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardCells, v41, 0, 0);
  v28 = *v27;
  swift_bridgeObjectRetain(*v27);
  v29 = swift_retain(v26);
  v30 = sub_1000E0D70(v29, (uint64_t)v28);
  swift_release(v26);
  swift_bridgeObjectRelease(v28, v31, v32, v33, v34, v35, v36, v37);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  if (!v30)
    v30 = sub_1000E51FC(v26, (uint64_t)v9, v3, a1);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  swift_beginAccess(v27, v40, 33, 0);
  swift_retain(v26);
  v38 = v30;
  sub_1000E623C((uint64_t)v38, v26);
  swift_endAccess(v40);
  swift_release_n(v26, 2);
  return v38;
}

void sub_1000E5974(uint64_t a1@<X0>, DARootViewController *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  SEL v24;
  id v25;
  int v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char v31[24];

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber);
  swift_beginAccess(v7, v31, 0, 0);
  v8 = *v7;
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v8);
    v9 = sub_100072A94(a1, (uint64_t)a2);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      v12 = *(_QWORD *)(v8 + 56);
      v13 = type metadata accessor for IndexPath(0);
      v14 = *(_QWORD *)(v13 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16))(a3, v12 + *(_QWORD *)(v14 + 72) * v11, v13);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
    }
    else
    {
      v23 = type metadata accessor for IndexPath(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a3, 1, 1, v23);
    }
    swift_bridgeObjectRelease(a2, v15, v16, v17, v18, v19, v20, v21);
    swift_bridgeObjectRelease((DARootViewController *)v8, v24, v25, v26, v27, v28, v29, v30);
  }
  else
  {
    v22 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a3, 1, 1, v22);
  }
}

void sub_1000E5BA8(uint64_t a1, uint64_t a2, DARootViewController *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  SEL v22;
  id v23;
  int v24;
  id v25;
  id v26;
  id v27;
  id v28;
  SEL v29;
  id v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  __n128 v46;
  _BYTE v48[24];

  v10 = sub_100035CA4(&qword_10016E560);
  __chkstk_darwin(v10);
  v12 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for IndexPath(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber);
  swift_beginAccess(a1 + OBJC_IVAR____TtC11Diagnostics11CardManager_bySerialNumber, v48, 0, 0);
  v18 = *v17;
  if (!*(_QWORD *)(v18 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_7:
    sub_100036FA0((uint64_t)v12, &qword_10016E560);
    a4(1);
    return;
  }
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v18);
  v19 = sub_100072A94(a2, (uint64_t)a3);
  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v12, *(_QWORD *)(v18 + 56) + *(_QWORD *)(v14 + 72) * v19, v13);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v21, 1, v13);
  swift_bridgeObjectRelease(a3, v22, v23, v24, v25, v26, v27, v28);
  swift_bridgeObjectRelease((DARootViewController *)v18, v29, v30, v31, v32, v33, v34, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    goto LABEL_7;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v36 = sub_1000E4ADC((uint64_t)v16);
  if (v36)
  {
    v37 = v36;
    v38 = type metadata accessor for CardState();
    swift_allocObject(v38, 89, 7);
    v39 = swift_retain(v37);
    v40 = sub_100050A84(v39);
    v41 = (_QWORD *)swift_allocObject(&unk_10013C578, 40, 7);
    v41[2] = a4;
    v41[3] = a5;
    v41[4] = v37;
    v42 = *(_QWORD *)(v40 + 56);
    v43 = *(_QWORD *)(v40 + 64);
    *(_QWORD *)(v40 + 56) = sub_1000E95E4;
    *(_QWORD *)(v40 + 64) = v41;
    swift_retain(v37);
    swift_retain(a5);
    sub_100035D74(v42, v43);
    v44 = *(_BYTE *)(v40 + 19);
    *(_BYTE *)(v40 + 19) = 1;
    if ((v44 & 1) == 0)
    {
      v45 = *(_QWORD *)(v40 + 80);
      if ((v45 & 8) == 0)
        *(_QWORD *)(v40 + 80) = v45 | 8;
      sub_100051044();
    }
    sub_10005139C(v40);
    v46 = swift_release(v40);
    (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v16, v13, v46);
    swift_release(v37);
  }
  else
  {
    a4(1);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_1000E5E6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  return sub_1000E9278(a4, a5, a6, a7, a8);
}

uint64_t sub_1000E5EA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

BOOL sub_1000E5EB0(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

unint64_t sub_1000E5EBC(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E5EE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  DARootViewController *v6;
  unint64_t v7;
  SEL v8;
  id v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  int isUniquelyReferenced_nonNull_native;
  const char *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  DARootViewController *v25;
  SEL v26;
  id v27;
  int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  DARootViewController *v34;

  v3 = v2;
  v6 = (DARootViewController *)*v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100072A94(a1, a2);
  LOBYTE(a2) = (_BYTE)v8;
  swift_bridgeObjectRelease(v6, v8, v9, v10, v11, v12, v13, v14);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23 = *v3;
  v34 = (DARootViewController *)*v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000E8960();
    v23 = (uint64_t)v34;
  }
  swift_bridgeObjectRelease(*(DARootViewController **)(*(_QWORD *)(v23 + 48) + 16 * v7 + 8), v16, v17, v18, v19, v20, v21, v22);
  v24 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v7);
  sub_1000E7AE4(v7, v23);
  v25 = (DARootViewController *)*v3;
  *v3 = v23;
  swift_bridgeObjectRelease(v25, v26, v27, v28, v29, v30, v31, v32);
  return v24;
}

uint64_t sub_1000E5FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  DARootViewController *v8;
  unint64_t v9;
  SEL v10;
  id v11;
  int v12;
  id v13;
  id v14;
  id v15;
  id v16;
  int isUniquelyReferenced_nonNull_native;
  const char *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  DARootViewController *v29;
  SEL v30;
  id v31;
  int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v38;
  DARootViewController *v39;

  v4 = v3;
  v8 = (DARootViewController *)*v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100072A94(a1, a2);
  LOBYTE(a2) = (_BYTE)v10;
  swift_bridgeObjectRelease(v8, v10, v11, v12, v13, v14, v15, v16);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v25 = *v4;
    v39 = (DARootViewController *)*v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000E8CD8();
      v25 = (uint64_t)v39;
    }
    swift_bridgeObjectRelease(*(DARootViewController **)(*(_QWORD *)(v25 + 48) + 16 * v9 + 8), v18, v19, v20, v21, v22, v23, v24);
    v26 = *(_QWORD *)(v25 + 56);
    v27 = type metadata accessor for IndexPath(0);
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 32))(a3, v26 + *(_QWORD *)(v28 + 72) * v9, v27);
    sub_1000E7CB8(v9, v25);
    v29 = (DARootViewController *)*v4;
    *v4 = v25;
    swift_bridgeObjectRelease(v29, v30, v31, v32, v33, v34, v35, v36);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(a3, 0, 1, v27);
  }
  else
  {
    v38 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a3, 1, 1, v38);
  }
}

uint64_t sub_1000E60DC(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char v16;
  char v17;
  SEL v18;
  char v19;
  id v20;
  int v21;
  id v22;
  id v23;
  id v24;
  id v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  DARootViewController *v28;
  SEL v29;
  id v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  Swift::Int v37;

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_100072CDC(a1);
    v19 = (char)v18;
    swift_bridgeObjectRelease((DARootViewController *)v4, v18, v20, v21, v22, v23, v24, v25);
    if ((v19 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v37 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1000E8F34();
        v4 = v37;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = *v2;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v6 = swift_retain(a1);
  v7 = __CocoaDictionary.lookup(_:)(v6, v5);
  swift_release(a1);
  if (!v7)
  {
    swift_bridgeObjectRelease((DARootViewController *)v4, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v15 = __CocoaDictionary.count.getter(v5);
  v4 = sub_1000E62DC(v5, v15);
  swift_retain(v4);
  a1 = sub_100072CDC(a1);
  v17 = v16;
  swift_release(v4);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:
  swift_release(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * a1));
  v27 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_1000E7EB4(a1, v4);
  v28 = (DARootViewController *)*v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
  return v27;
}

void sub_1000E623C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  DARootViewController **v3;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  DARootViewController *v10;
  SEL v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  DARootViewController *v18;

  v3 = (DARootViewController **)v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  v8 = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(v8, 1))
  {
    v6 = sub_1000E62DC(v7, v8 + 1);
    *v3 = (DARootViewController *)v6;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v18 = *v3;
    *v3 = (DARootViewController *)0x8000000000000000;
    sub_1000E8354(a1, a2, isUniquelyReferenced_nonNull_native);
    v10 = *v3;
    *v3 = v18;
    swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  __break(1u);
}

Swift::Int sub_1000E62DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  DARootViewController *v15;
  DARootViewController *v16;
  SEL v17;
  id v18;
  int v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::Int result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD v38[9];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a2)
  {
    sub_100035CA4((uint64_t *)&unk_10016E568);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v41 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = type metadata accessor for CardState();
      do
      {
        v38[0] = v8;
        swift_dynamicCast(&v40, v38, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v38[0] = v9;
        v32 = type metadata accessor for CardViewCell();
        swift_dynamicCast(&v39, v38, (char *)&type metadata for Swift.AnyObject + 8, v32, 7);
        v4 = v41;
        v33 = *(_QWORD *)(v41 + 16);
        if (*(_QWORD *)(v41 + 24) <= v33)
        {
          sub_1000E74D0(v33 + 1, 1);
          v4 = v41;
        }
        v11 = v39;
        v12 = v40;
        Hasher.init(_seed:)(v38, *(_QWORD *)(v4 + 40));
        v13 = objc_msgSend(*(id *)(v12 + 40), "serialNumber");
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        String.hash(into:)(v38, v14, v16);
        swift_bridgeObjectRelease(v16, v17, v18, v19, v20, v21, v22, v23);
        result = Hasher._finalize()();
        v25 = v4 + 64;
        v26 = -1 << *(_BYTE *)(v4 + 32);
        v27 = result & ~v26;
        v28 = v27 >> 6;
        if (((-1 << v27) & ~*(_QWORD *)(v4 + 64 + 8 * (v27 >> 6))) != 0)
        {
          v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v4 + 64 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v34 = 0;
          v35 = (unint64_t)(63 - v26) >> 6;
          do
          {
            if (++v28 == v35 && (v34 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v36 = v28 == v35;
            if (v28 == v35)
              v28 = 0;
            v34 |= v36;
            v37 = *(_QWORD *)(v25 + 8 * v28);
          }
          while (v37 == -1);
          v29 = __clz(__rbit64(~v37)) + (v28 << 6);
        }
        *(_QWORD *)(v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
        v30 = 8 * v29;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v30) = v12;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v30) = v11;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v31;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

void sub_1000E6554(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4((uint64_t *)&unk_10016E5C0);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v40 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v38 = v3;
    v39 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v39)
          goto LABEL_36;
        v23 = v40[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_36;
          v23 = v40[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_36:
              if ((v41 & 1) == 0)
              {
                swift_release(v5);
                v3 = v38;
                goto LABEL_43;
              }
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v37;
              v3 = v38;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v39)
                  goto LABEL_36;
                v23 = v40[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v21);
      v30 = *(_QWORD *)(v5 + 56) + 40 * v21;
      v31 = *(_QWORD *)v30;
      v42 = *(_OWORD *)(v30 + 8);
      v32 = *(void **)(v30 + 24);
      v33 = *(void **)(v30 + 32);
      if ((v41 & 1) == 0)
      {
        v34 = v33;
        swift_bridgeObjectRetain(v42);
        v35 = *((id *)&v42 + 1);
        v36 = v32;
      }
      Hasher.init(_seed:)(v43, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v29);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      v19 = *(_QWORD *)(v8 + 56) + 40 * v18;
      *(_QWORD *)v19 = v31;
      *(_OWORD *)(v19 + 8) = v42;
      *(_QWORD *)(v19 + 24) = v32;
      *(_QWORD *)(v19 + 32) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_1000E6870(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4(&qword_10016E5A8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v33 = 1 << *(_BYTE *)(v5 + 32);
    v34 = v3;
    v35 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v34;
                goto LABEL_43;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v35);
              else
                *v10 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v21);
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if ((a2 & 1) == 0)
        v31 = v30;
      v15 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v29, 4);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v19) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_1000E6B1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4(&qword_10016E5A0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000E6E30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  DARootViewController *v26;
  DARootViewController *v27;
  Swift::Int v28;
  SEL v29;
  id v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  char v46;
  _QWORD v47[9];
  _OWORD v48[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4((uint64_t *)&unk_10016E5B0);
  v46 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v45 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v44 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v17 >= v44)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v45 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v44)
        goto LABEL_37;
      v19 = *(_QWORD *)(v45 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v44)
        {
LABEL_37:
          swift_release(v5);
          if ((v46 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v19 = *(_QWORD *)(v45 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_46;
            if (v13 >= v44)
              goto LABEL_37;
            v19 = *(_QWORD *)(v45 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_24;
          }
        }
        v13 = v20;
      }
    }
LABEL_24:
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_25:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v46 & 1) != 0)
    {
      sub_10006E2D0(v22, v48);
    }
    else
    {
      sub_1000370B0((uint64_t)v22, (uint64_t)v48);
      v23 = v21;
    }
    v24 = *(_QWORD *)(v8 + 40);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v27 = v26;
    Hasher.init(_seed:)(v47, v24);
    String.hash(into:)(v47, v25, v27);
    v28 = Hasher._finalize()();
    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
    v36 = -1 << *(_BYTE *)(v8 + 32);
    v37 = v28 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v12 + 8 * (v37 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v12 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v12 + 8 * v38);
      }
      while (v42 == -1);
      v14 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
    sub_10006E2D0(v48, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v18 = (_QWORD *)(v5 + 64);
  if ((v46 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v43 = 1 << *(_BYTE *)(v5 + 32);
  if (v43 >= 64)
    bzero(v18, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v43;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000E7168(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100035CA4(&qword_10016E578);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v21 >= v42)
      goto LABEL_36;
    v22 = v43[v21];
    ++v16;
    if (!v22)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v42)
        goto LABEL_36;
      v22 = v43[v16];
      if (!v22)
        break;
    }
LABEL_23:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_24:
    v24 = *(_QWORD *)(v8 + 56);
    v25 = v8;
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v6 + 72);
    v30 = v24 + v29 * v20;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v30, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v30, v46);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v47, v28, v27);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v17 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
    *v18 = v28;
    v18[1] = v27;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v29 * v17, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v25;
  }
  v23 = v21 + 2;
  if (v23 < v42)
  {
    v22 = v43[v23];
    if (!v22)
    {
      while (1)
      {
        v16 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_43;
        if (v16 >= v42)
          goto LABEL_36;
        v22 = v43[v16];
        ++v23;
        if (v22)
          goto LABEL_23;
      }
    }
    v16 = v23;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

void sub_1000E74D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  id v14;
  uint64_t v15;
  DARootViewController *v16;
  DARootViewController *v17;
  SEL v18;
  id v19;
  int v20;
  id v21;
  id v22;
  id v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  _QWORD *v34;
  unint64_t v35;
  int64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  _QWORD v50[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4((uint64_t *)&unk_10016E568);
  v49 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v48 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v46 = v3;
  v47 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v31 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v32 = v31 | (v13 << 6);
      goto LABEL_34;
    }
    v33 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v33 >= v47)
      break;
    v34 = (_QWORD *)(v5 + 64);
    v35 = *(_QWORD *)(v48 + 8 * v33);
    ++v13;
    if (!v35)
    {
      v13 = v33 + 1;
      if (v33 + 1 >= v47)
        goto LABEL_36;
      v35 = *(_QWORD *)(v48 + 8 * v13);
      if (!v35)
      {
        v36 = v33 + 2;
        if (v36 >= v47)
        {
LABEL_36:
          swift_release(v5);
          v3 = v46;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v35 = *(_QWORD *)(v48 + 8 * v36);
        if (!v35)
        {
          while (1)
          {
            v13 = v36 + 1;
            if (__OFADD__(v36, 1))
              goto LABEL_45;
            if (v13 >= v47)
              goto LABEL_36;
            v35 = *(_QWORD *)(v48 + 8 * v13);
            ++v36;
            if (v35)
              goto LABEL_33;
          }
        }
        v13 = v36;
      }
    }
LABEL_33:
    v11 = (v35 - 1) & v35;
    v32 = __clz(__rbit64(v35)) + (v13 << 6);
LABEL_34:
    v41 = 8 * v32;
    v42 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v41);
    v43 = *(void **)(*(_QWORD *)(v5 + 56) + v41);
    if ((v49 & 1) == 0)
    {
      swift_retain(v42);
      v44 = v43;
    }
    Hasher.init(_seed:)(v50, *(_QWORD *)(v8 + 40));
    v14 = objc_msgSend(*(id *)(v42 + 40), "serialNumber");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    String.hash(into:)(v50, v15, v17);
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
    v25 = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v28 == v38;
        if (v28 == v38)
          v28 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v40 == -1);
      v29 = __clz(__rbit64(~v40)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v30 = 8 * v29;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v30) = v42;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v30) = v43;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v46;
  v34 = (_QWORD *)(v5 + 64);
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v5 + 32);
  if (v45 >= 64)
    bzero(v34, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v34 = -1 << v45;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000E7814(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100035CA4((uint64_t *)&unk_10016E580);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v21 >= v33)
          goto LABEL_36;
        v22 = v34[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_36;
          v22 = v34[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_43;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v34[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v33)
                  goto LABEL_36;
                v22 = v34[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(v5 + 56);
      v29 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v20);
      v30 = *(_QWORD *)(v28 + 8 * v20);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v28 + 8 * v20));
      Hasher.init(_seed:)(v35, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v29);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

unint64_t sub_1000E7AE4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000E7CB8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for IndexPath(0) - 8) + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000E7EB4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
        v10 = *(void **)(v9 + 40);
        swift_retain(v9);
        v11 = objc_msgSend(v10, "serialNumber");
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        String.hash(into:)(v29, v12, v14);
        swift_bridgeObjectRelease(v14);
        v15 = Hasher._finalize()();
        result = swift_release(v9);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_11:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || v18 >= v19 + 1)
            *v18 = *v19;
          v20 = *(_QWORD *)(a2 + 56);
          v21 = (_QWORD *)(v20 + 8 * v3);
          v22 = (_QWORD *)(v20 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v21 >= v22 + 1))
          {
            *v21 = *v22;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000E80C4(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100072B98(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000E87BC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1000E6870(v13, a3 & 1);
  v18 = sub_100072B98(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int32);
  __break(1u);
}

uint64_t sub_1000E81F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100072A94(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000E8960();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_1000E6B1C(v15, a4 & 1);
  v21 = sub_100072A94(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000E8354(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100072CDC(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000E8F34();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v16[6] + v20) = a2;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      swift_retain(a2);
      return;
    }
    goto LABEL_14;
  }
  sub_1000E74D0(v13, a3 & 1);
  v18 = sub_100072CDC(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = type metadata accessor for CardState();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_1000E84A4(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  const char *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v4 = v3;
  v8 = *v3;
  v16 = sub_100072B40(a2);
  v17 = *(_QWORD *)(v8 + 16);
  v18 = (v9 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = (char)v9;
  v21 = *(_QWORD *)(v8 + 24);
  if (v21 >= v19 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_1000E90D8();
LABEL_7:
    v22 = (_QWORD *)*v4;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      swift_bridgeObjectRelease(*(DARootViewController **)(v23 + 8 * v16), v9, v10, v11, v12, v13, v14, v15);
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    *(_BYTE *)(v22[6] + v16) = a2;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v22[2] = v27;
      return;
    }
    goto LABEL_14;
  }
  sub_1000E7814(v19, a3 & 1);
  v24 = sub_100072B40(a2);
  if ((v20 & 1) == (v9 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v4;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DashboardSection);
  __break(1u);
}

void sub_1000E85D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  __int128 v27;

  v1 = v0;
  sub_100035CA4((uint64_t *)&unk_10016E5C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 40 * v15;
    v17 = *(_QWORD *)v16;
    v19 = *(void **)(v16 + 24);
    v18 = *(void **)(v16 + 32);
    v27 = *(_OWORD *)(v16 + 8);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = *(_QWORD *)(v4 + 56) + 40 * v15;
    *(_QWORD *)v20 = v17;
    *(_OWORD *)(v20 + 8) = v27;
    *(_QWORD *)(v20 + 24) = v19;
    *(_QWORD *)(v20 + 32) = v18;
    v21 = v18;
    swift_bridgeObjectRetain(v27);
    v22 = *((id *)&v27 + 1);
    v23 = v19;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000E87BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_100035CA4(&qword_10016E5A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(void **)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    v20 = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000E8960()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100035CA4(&qword_10016E5A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_unknownObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000E8B14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v1 = v0;
  sub_100035CA4((uint64_t *)&unk_10016E5B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1000370B0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10006E2D0(v23, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    v19 = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000E8CD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for IndexPath(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035CA4(&qword_10016E578);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1000E8F34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100035CA4((uint64_t *)&unk_10016E568);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    v19 = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000E90D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100035CA4((uint64_t *)&unk_10016E580);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000E9278(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSString v16;
  unsigned __int8 v17;
  id v18;
  unsigned __int8 v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[5];
  _QWORD *v41;

  v38 = a3;
  v36 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
    return a4(1);
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "BOOLForKey:", v16);

  if ((v17 & 1) != 0)
    return a4(1);
  v18 = objc_msgSend((id)objc_opt_self(DAPlatform), "currentPlatform");
  v19 = objc_msgSend(v18, "isInBoxUpdateModeActive");
  swift_unknownObjectRelease(v18);
  if ((v19 & 1) != 0)
    return a4(1);
  v21 = sub_100037118(0, (unint64_t *)&qword_10016AD00, OS_dispatch_queue_ptr);
  v35 = static OS_dispatch_queue.main.getter(v21);
  v22 = (_QWORD *)swift_allocObject(&unk_10013C528, 56, 7);
  v23 = v36;
  v24 = v37;
  v22[2] = v37;
  v22[3] = v23;
  v25 = v38;
  v22[4] = v38;
  v22[5] = a4;
  v22[6] = a5;
  aBlock[4] = sub_1000E9590;
  v41 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030658;
  aBlock[3] = &unk_10013C540;
  v26 = _Block_copy(aBlock);
  v27 = v41;
  v28 = v24;
  swift_bridgeObjectRetain(v25);
  swift_retain(a5);
  v29 = swift_release(v27);
  static DispatchQoS.unspecified.getter(v29);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v30 = sub_10002F158((unint64_t *)&qword_10016B5F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_100035CA4((uint64_t *)&unk_10016AD10);
  v32 = sub_100035CE4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v8, v30);
  v33 = (void *)v35;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000E955C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000E9590()
{
  uint64_t v0;

  sub_1000E5BA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(DARootViewController **)(v0 + 32), *(void (**)(uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000E95A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E95B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E95B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_1000E95E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  v3 = *(unsigned __int8 *)(v1 + 19);
  *(_BYTE *)(v1 + 19) = 0;
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(v1 + 80);
    if ((v4 & 8) == 0)
      *(_QWORD *)(v1 + 80) = v4 | 8;
    return sub_100051044();
  }
  return result;
}

uint64_t sub_1000E9634(unint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  SEL v11;
  id v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _BYTE v18[24];

  if (a1 > 2)
    return 0;
  v2 = a1;
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v3, v18, 0, 0);
  v4 = *v3;
  if (!*(_QWORD *)(v4 + 16))
    return 0;
  v5 = sub_100072B40(v2);
  if ((v6 & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  if (!((unint64_t)v7 >> 62))
    return *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7 < 0)
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
  else
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease((DARootViewController *)v7, v11, v12, v13, v14, v15, v16, v17);
  return v10;
}

unint64_t sub_1000E96E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  DARootViewController *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  SEL v15;
  id v16;
  int v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _BYTE v22[24];

  v2 = v1;
  v3 = IndexPath.section.getter(a1);
  if (v3 > 2)
  {
    v5 = 0;
    v4 = 2;
  }
  else
  {
    v4 = v3;
    v5 = IndexPath.row.getter(v3);
  }
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11Diagnostics11CardManager_cardsInView, v22, 0, 0);
  v7 = *v6;
  if (!*(_QWORD *)(v7 + 16))
    return 0;
  result = sub_100072B40(v4);
  if ((v9 & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(v7 + 56);
  v11 = *(DARootViewController **)(v10 + 8 * result);
  if (((unint64_t)v11 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v10 + 8 * result));
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v11);
    swift_bridgeObjectRelease(v11, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_10;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(_QWORD *)(((unint64_t)v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(_QWORD *)&v11->remoteCardFilter[8 * v5 + 16];
    swift_retain(v12);
LABEL_10:
    v13 = objc_msgSend(*(id *)(v12 + 40), "serialNumber");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    swift_release(v12);

    return v14;
  }
  __break(1u);
  return result;
}

double sub_1000E981C()
{
  uint64_t v0;

  return sub_1000E5438(*(void **)(v0 + 16));
}

void sub_1000E9824()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "beginUpdates");
  objc_msgSend(v1, "endUpdates");
  UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, 0);
}

uint64_t type metadata accessor for Move(uint64_t a1)
{
  return sub_1000C5E38(a1, qword_10016E748, (uint64_t)&nominal type descriptor for Move);
}

uint64_t type metadata accessor for Add(uint64_t a1)
{
  return sub_1000C5E38(a1, qword_10016E6B8, (uint64_t)&nominal type descriptor for Add);
}

uint64_t sub_1000E9898(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Remove(uint64_t a1)
{
  return sub_1000C5E38(a1, qword_10016E628, (uint64_t)&nominal type descriptor for Remove);
}

uint64_t sub_1000E98F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E9914(uint64_t a1)
{
  sub_1000E2CC4(a1);
}

void sub_1000E991C(uint64_t a1)
{
  sub_1000E2350(a1);
}

void sub_1000E9924(uint64_t a1)
{
  sub_1000E24AC(a1);
}

void sub_1000E992C(uint64_t a1)
{
  uint64_t v1;

  sub_1000E2630(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000E994C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9958);
}

uint64_t sub_1000E995C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9968);
}

uint64_t *sub_1000E9970(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for IndexPath(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1000E9A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for IndexPath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1000E9A54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_1000E9AC4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_1000E9B40(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1000E9B9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for IndexPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000E9C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E9C14);
}

uint64_t sub_1000E9C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9C24);
}

uint64_t sub_1000E9C28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10010EFC0;
  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_1000E9C9C(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for IndexPath(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v12(&v4[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v11);
  }
  return v4;
}

uint64_t sub_1000E9D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for IndexPath(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

char *sub_1000E9DD4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *(int *)(a3 + 20);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v11(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v10);
  return a1;
}

char *sub_1000E9E68(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v11);
  return a1;
}

char *sub_1000E9F0C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

char *sub_1000E9F98(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for IndexPath(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v11);
  return a1;
}

uint64_t sub_1000EA02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA038);
}

uint64_t sub_1000EA03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000EA0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA0C4);
}

uint64_t sub_1000EA0C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for IndexPath(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000EA13C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = &unk_10010EFC0;
  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 3, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC11DiagnosticsP33_AD1CBC5EF93C082E66E5E59A8E862D7419ResourceBundleClass);
}

void sub_1000EA20C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "No serial numbers are present for paired airpods device %@", a5, a6, a7, a8, 2u);
}

void sub_1000EA274(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Failed to add Bluetooth device: %@", a5, a6, a7, a8, 2u);
}

void sub_1000EA2DC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to decorate Airpods device with UI. Tests requiring UI will fail.", v1, 2u);
}

void sub_1000EA31C(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "description"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to switch to device: %@ with error: %@", (uint8_t *)&v6, 0x16u);

}

void sub_1000EA3CC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000CCE8();
  sub_10000CCCC((void *)&_mh_execute_header, v0, v1, "ASTSession %@ ended without error, with reason: %@");
  sub_10000CCE0();
}

void sub_1000EA434(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 2048;
  *(_QWORD *)&v3[14] = a2;
  sub_10000CCCC((void *)&_mh_execute_header, a2, a3, "ASTSession %@ ended without error, with reason: %ld", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  sub_10000CCE0();
}

void sub_1000EA4A8()
{
  uint64_t v0;
  os_log_t v1;

  sub_10000CCE8();
  sub_10000CCCC((void *)&_mh_execute_header, v0, v1, "ASTSession %@ ended with error: %@");
  sub_10000CCE0();
}

void sub_1000EA514(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "[DADeviceConnectionLocal] Error upon receiving the suite summary: %@", a5, a6, a7, a8, 2u);
  sub_10000CCE0();
}

void sub_1000EA578(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a1, a3, "Bad auth info certificate: %@", a5, a6, a7, a8, 2u);
  sub_10000CCE0();
}

void sub_1000EA5E0(void *a1, NSObject *a2)
{
  void *v4;
  int v5;
  void *v6;
  __int16 v7;
  id v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "domain"));
  v5 = 138412546;
  v6 = v4;
  v7 = 2048;
  v8 = objc_msgSend(a1, "code");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Send auth info result failed with error: (domain = %@, code = %ld)", (uint8_t *)&v5, 0x16u);

}

void sub_1000EA694(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Requested next boot mode %ld for session is unsupported", a5, a6, a7, a8, 0);
  sub_10000CCE0();
}

void sub_1000EA6F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not parse the shutdown unseal code for shutdown sequence", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA724()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Failed to set control register for shutdown. Aborting shutdown.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA750()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Failed to write unseal code. Aborting shutdown.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA77C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Failed to write to registry key. Aborting shutdown.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA7A8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Session does not exist for serial numbers: %@, error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000EA830()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not parse enclosure type (failed to retrieve dmin properties).", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA85C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not parse enclosure type (failed to retrieve top enclosure from dmin).", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA888()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not parse enclosure type (failed to retrieve housingColor).", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA8B4(void *a1, NSObject *a2)
{
  int v3;
  id v4;

  v3 = 134217984;
  v4 = objc_msgSend(a1, "unsignedIntegerValue");
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unrecognised housing color returned with value %lu", (uint8_t *)&v3, 0xCu);
}

void sub_1000EA93C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not parse case size.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EA968(int a1, NSObject *a2)
{
  _DWORD v2[2];

  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unsupported watch case size %d. Falling back to default size", (uint8_t *)v2, 8u);
  sub_10000CCB8();
}

void sub_1000EA9D8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Error connecting to bug session: %@", a5, a6, a7, a8, 2u);
}

void sub_1000EAA40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "Cannot retry bug session, no session exists", a5, a6, a7, a8, 0);
}

void sub_1000EAA74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "Cannot configure bug session for cellular, no session exists", a5, a6, a7, a8, 0);
}

void sub_1000EAAA8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "snapshot"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dedSessionIdentifier"));
  v7 = 138412546;
  v8 = v6;
  v9 = 2112;
  v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error connecting to %@ bug session: %@", (uint8_t *)&v7, 0x16u);

}

void sub_1000EAB68(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "[Localization] [%@] => [%@]", (uint8_t *)&v3, 0x16u);
}

void sub_1000EABEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001551C();
  sub_10001550C((void *)&_mh_execute_header, v0, v1, "%s Failed to retrieve remote object proxy: %@", v2, v3, v4, v5, 2u);
}

void sub_1000EAC5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10001551C();
  sub_10001550C((void *)&_mh_execute_header, v0, v1, "%s Failed to retrieve remote object proxy: %@", v2, v3, v4, v5, 2u);
}

void sub_1000EACCC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "Attempted to create DADeviceLocal using the actual serial number in initWithSerialNumber!", a5, a6, a7, a8, 0);
  sub_10000CCB8();
}

void sub_1000EACFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "Obtained diagnostic list late, ignoring.", a5, a6, a7, a8, 0);
  sub_10000CCB8();
}

void sub_1000EAD2C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "Obtained system report late, ignoring.", a5, a6, a7, a8, 0);
  sub_10000CCB8();
}

void sub_1000EAD5C(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error downloading asset: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000EADD4(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to get in-box update mode status with error: %@", (uint8_t *)&v4, 0xCu);

}

void sub_1000EAE68(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Failed to send message: %@ because the destination was nil", a5, a6, a7, a8, 2u);
  sub_10000CCE0();
}

void sub_1000EAECC(id *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "destination"));
  sub_10001CB38((void *)&_mh_execute_header, v2, v3, "Cannot communicate to destination: %@; dropping message: %@;",
    v4,
    v5,
    v6,
    v7,
    2u);

  sub_10001CB4C();
}

void sub_1000EAF64(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "destination"));
  sub_10001CB5C();
  sub_10001CB38((void *)&_mh_execute_header, v2, v3, "Response block is nil. Dropping response message: %@; for destination: %@",
    v4,
    v5,
    v6,
    v7,
    v8);

  sub_10001CB4C();
}

void sub_1000EAFE8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Failed to send IDS message: %@", a5, a6, a7, a8, 2u);
  sub_10000CCE0();
}

void sub_1000EB050(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Failed to start Diagnostics because device is already in a diagnostic session: %@", a5, a6, a7, a8, 2u);
  sub_10000CCE0();
}

void sub_1000EB0B8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100005EF0((void *)&_mh_execute_header, a2, a3, "Failed to send IDS Message because destination was passcode locked: %@", a5, a6, a7, a8, 2u);
  sub_10000CCE0();
}

void sub_1000EB120(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "destination"));
  sub_10001CB5C();
  sub_10001CB38((void *)&_mh_execute_header, v2, v3, "Response block is nil. Dropping response message: %@; for destination: %@",
    v4,
    v5,
    v6,
    v7,
    v8);

  sub_10001CB4C();
}

void sub_1000EB1A0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "destination"));
  sub_10001CB5C();
  sub_10001CB38((void *)&_mh_execute_header, v2, v3, "Round trip timer expired for message: %@; destination: %@",
    v4,
    v5,
    v6,
    v7,
    v8);

  sub_10001CB4C();
}

void sub_1000EB220(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Ignoring device state update since it is stale. last = %@, this = %@", (uint8_t *)&v3, 0x16u);
  sub_10000CCE0();
}

void sub_1000EB2A0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to create CFUserNotificationRef!", v1, 2u);
}

void sub_1000EB2E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Failed to get a certificate from CoreRepair. Falling back to attestation blob", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB30C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Timed out waiting for certificate from CRCAttestationManager", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB338()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100021654();
  sub_100021644((void *)&_mh_execute_header, v0, v1, "Unrecognized auth info certificate type %ld", v2, v3, v4, v5, v6);
  sub_10000CCE0();
}

void sub_1000EB398(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v4 = 138412290;
  v5 = v3;
  sub_100021638((void *)&_mh_execute_header, a2, a3, "Failed to get certificate in PEM format. Error: %@", (uint8_t *)&v4);
  sub_10000CCE0();
}

void sub_1000EB408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Cannot sign payload, as no security key exists.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB434()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not generate SHA256 digest for payload.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB460()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Cannot sign file, as no security key exists.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB48C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "path"));
  sub_100021654();
  sub_100021638((void *)&_mh_execute_header, a2, v4, "Could not create file handle from file at path = %@.", v5);

}

void sub_1000EB514()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Could not generate SHA256 digest for file.", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB540()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100021654();
  sub_100021644((void *)&_mh_execute_header, v0, v1, "requestAttestationBlobWithOptions failed with error: %@", v2, v3, v4, v5, v6);
  sub_10000CCE0();
}

void sub_1000EB5A0(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_100021638((void *)&_mh_execute_header, a2, a3, "Failed to create device identification public key digest, %@", (uint8_t *)&v4);
  sub_10000CCE0();
}

void sub_1000EB60C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "Cannot get attestation certificate because CoreRepairCore is not available on this device", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000CCC0();
  sub_10000CCA8((void *)&_mh_execute_header, v0, v1, "CRCAttestationManager returned an invalid certificate", v2, v3, v4, v5, v6);
  sub_10000CCB8();
}

void sub_1000EB664()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100021654();
  sub_100021638((void *)&_mh_execute_header, v0, v1, "CRCAttestationManager was unable to get BAA/CAA certs: %@", v2);
  sub_10000CCE0();
}

void sub_1000EB6C8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Connection %@ not established because the process is not appropriately entitled.", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_1000EB73C()
{
  char *v0;
  uint64_t v1;

  v0 = dlerror();
  v1 = abort_report_np("%s", v0);
  return sub_1000EB75C(v1);
}

uint64_t sub_1000EB75C()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "NRDevice");
  return sub_1000EB780(v0);
}

uint64_t sub_1000EB780()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "SFDevice");
  return sub_1000EB7A4(v0);
}

uint64_t sub_1000EB7A4()
{
  NSObject *v0;

  v0 = abort_report_np("Unable to find class %s", "NRPairedDeviceRegistry");
  return sub_1000EB7C8(v0);
}

void sub_1000EB7C8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to initialize DADeviceAirpods: serialNumber is nil", v1, 2u);
}

void sub_1000EB808(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "DADeviceConnectionAirPods failed to get the shared BluetoothManager instance!", a5, a6, a7, a8, 0);
}

void sub_1000EB83C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "airpodsDevice"));
  v5 = 138412290;
  v6 = v3;
  sub_100021638((void *)&_mh_execute_header, a2, v4, "Timed out waiting for AirPods device %@ to connect", (uint8_t *)&v5);

  sub_10002C0B4();
}

void sub_1000EB8C0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_100021638((void *)&_mh_execute_header, a2, a3, "allowSessionAccessoryDisconnectForDuration called with an invalid duration of %@. Ignoring request. If the accessory disconnects, the session will end. This is a bug in the calling DK.", (uint8_t *)&v3);
}

void sub_1000EB92C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CCA8((void *)&_mh_execute_header, a1, a3, "Disconnect was unexpected. Ending session with error", a5, a6, a7, a8, 0);
}

void sub_1000EB960(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to sync device state", v1, 2u);
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGPath");
}

id objc_msgSend_SHA256ForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SHA256ForData:");
}

id objc_msgSend_SHA256ForFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SHA256ForFileHandle:");
}

id objc_msgSend_SOCKSProxyPort(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SOCKSProxyPort");
}

id objc_msgSend_SOCKSProxyServer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SOCKSProxyServer");
}

id objc_msgSend_URLPathAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLPathAllowedCharacterSet");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__IMEI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_IMEI");
}

id objc_msgSend__accessoryIdentifiersToPromote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessoryIdentifiersToPromote");
}

id objc_msgSend__addAirpodsDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAirpodsDevice:");
}

id objc_msgSend__addPlatformCFUserNotificationOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPlatformCFUserNotificationOptions:");
}

id objc_msgSend__airpodsDeviceFromDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_airpodsDeviceFromDevice:");
}

id objc_msgSend__beginObserving(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginObserving");
}

id objc_msgSend__caseSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_caseSize");
}

id objc_msgSend__clearNVRamVariable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearNVRamVariable:");
}

id objc_msgSend__createDeviceConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDeviceConnection");
}

id objc_msgSend__createDeviceWithNanoDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDeviceWithNanoDevice:");
}

id objc_msgSend__createXPCConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createXPCConnection");
}

id objc_msgSend__dequeueTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dequeueTest");
}

id objc_msgSend__deviceAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceAttributes");
}

id objc_msgSend__deviceClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceClass");
}

id objc_msgSend__deviceColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceColor");
}

id objc_msgSend__deviceEnclosureColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceEnclosureColor");
}

id objc_msgSend__deviceImageName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceImageName");
}

id objc_msgSend__deviceMaskName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceMaskName");
}

id objc_msgSend__deviceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceType");
}

id objc_msgSend__devices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_devices");
}

id objc_msgSend__enclosure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enclosure");
}

id objc_msgSend__endDeviceStatePingTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endDeviceStatePingTimer");
}

id objc_msgSend__endObserving(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endObserving");
}

id objc_msgSend__enqueueTestWithQueueEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueTestWithQueueEntry:");
}

id objc_msgSend__ensureInitialDevicesFetched(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureInitialDevicesFetched");
}

id objc_msgSend__fetchDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchDevices");
}

id objc_msgSend__forceDiscoverAllDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceDiscoverAllDevices");
}

id objc_msgSend__getDiagnosticAllowList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getDiagnosticAllowList");
}

id objc_msgSend__initDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initDevice");
}

id objc_msgSend__isBeatsDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBeatsDevice:");
}

id objc_msgSend__isBluetoothDeviceServicableAirpods_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBluetoothDeviceServicableAirpods:");
}

id objc_msgSend__isDeviceLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDeviceLocked");
}

id objc_msgSend__marketingName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_marketingName");
}

id objc_msgSend__ping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ping");
}

id objc_msgSend__productClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_productClass");
}

id objc_msgSend__profileWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_profileWithCommand:");
}

id objc_msgSend__purgeUnpairedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_purgeUnpairedDevices");
}

id objc_msgSend__reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reset");
}

id objc_msgSend__resetDeviceStatePingTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetDeviceStatePingTimer");
}

id objc_msgSend__sendChangeNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendChangeNotification");
}

id objc_msgSend__sendChangeNotificationIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendChangeNotificationIfNeeded");
}

id objc_msgSend__sendMessage_overrideCannotCommunicate_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:overrideCannotCommunicate:response:");
}

id objc_msgSend__serialNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serialNumber");
}

id objc_msgSend__session_didFinishSuiteWithName_skipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_session:didFinishSuiteWithName:skipped:");
}

id objc_msgSend__sessionDidPowerOff_forReboot_withParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sessionDidPowerOff:forReboot:withParameters:");
}

id objc_msgSend__setNextBootForBootMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNextBootForBootMode:");
}

id objc_msgSend__setSystemVolumeHUDEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSystemVolumeHUDEnabled:");
}

id objc_msgSend__shutDownDeviceForReboot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shutDownDeviceForReboot:");
}

id objc_msgSend__shutdownForBatteryDisconnectWithUnsealCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shutdownForBatteryDisconnectWithUnsealCode:");
}

id objc_msgSend__shutdownToShelfLifeMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shutdownToShelfLifeMode");
}

id objc_msgSend__spawnPersistentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spawnPersistentDevice");
}

id objc_msgSend__startInterceptingButtonEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startInterceptingButtonEvents");
}

id objc_msgSend__stringForPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForPhase:");
}

id objc_msgSend__syncState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncState:");
}

id objc_msgSend__tickleTestQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tickleTestQueue");
}

id objc_msgSend__unsealCodeFromParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsealCodeFromParameters:");
}

id objc_msgSend__updateDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDevices");
}

id objc_msgSend__updateDevicesWithSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDevicesWithSerialNumber:");
}

id objc_msgSend__updateDevicesWithSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDevicesWithSnapshot:");
}

id objc_msgSend__updateHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHandlers");
}

id objc_msgSend__updateState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateState:");
}

id objc_msgSend__waitUntilFirstResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitUntilFirstResponse");
}

id objc_msgSend__writeNVRamVariable_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeNVRamVariable:value:");
}

id objc_msgSend_acceptableValueClasses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptableValueClasses");
}

id objc_msgSend_accessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessory");
}

id objc_msgSend_accessoryInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryInfo");
}

id objc_msgSend_accessoryObservationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryObservationQueue");
}

id objc_msgSend_accessoryRegistrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryRegistrationQueue");
}

id objc_msgSend_accessoryWithIdentifier_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryWithIdentifier:attributes:");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activate");
}

id objc_msgSend_activateAlertForSuiteName_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateAlertForSuiteName:withHandler:");
}

id objc_msgSend_activateSimpleAlertWithTitle_message_defaultButtonName_cancelButtonName_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateSimpleAlertWithTitle:message:defaultButtonName:cancelButtonName:handler:");
}

id objc_msgSend_activeDeviceAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDeviceAssertion");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addArcWithCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addArcWithCenter:radius:startAngle:endAngle:clockwise:");
}

id objc_msgSend_addData_withFilename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addData:withFilename:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addErrorCode_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addErrorCode:userInfo:");
}

id objc_msgSend_addLineToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLineToPoint:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addPrintFormatter_startingAtPageAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrintFormatter:startingAtPageAtIndex:");
}

id objc_msgSend_addQuadCurveToPoint_controlPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addQuadCurveToPoint:controlPoint:");
}

id objc_msgSend_addTarget_action_forButtonEvents_propagate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forButtonEvents:propagate:");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "address");
}

id objc_msgSend_advanceForStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advanceForStatus:");
}

id objc_msgSend_aggregatorWithObserverClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregatorWithObserverClasses:");
}

id objc_msgSend_airpodsDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airpodsDevice");
}

id objc_msgSend_airpodsRegistrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airpodsRegistrationQueue");
}

id objc_msgSend_airpodsUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airpodsUUID");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_alertVisibleLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertVisibleLock");
}

id objc_msgSend_allCapabilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allCapabilities");
}

id objc_msgSend_allDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDevices");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowCellularSizeThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowCellularSizeThreshold");
}

id objc_msgSend_allowSessionAccessoryDisconnectForDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowSessionAccessoryDisconnectForDuration:");
}

id objc_msgSend_allowedDataClasses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedDataClasses");
}

id objc_msgSend_animationCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationCompletion");
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationWithKeyPath:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applyTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTransform:");
}

id objc_msgSend_archive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archive");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForJSON(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForJSON");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assetUploader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetUploader");
}

id objc_msgSend_attachCompletionHandlerForDEDExtensionIdentifier_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachCompletionHandlerForDEDExtensionIdentifier:handler:");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributes");
}

id objc_msgSend_attributesForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesForIdentifier:");
}

id objc_msgSend_attributesWithTestId_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesWithTestId:version:");
}

id objc_msgSend_authInfoResultWithAttestation_certificate_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authInfoResultWithAttestation:certificate:type:error:");
}

id objc_msgSend_available(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "available");
}

id objc_msgSend_availableDestinationsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableDestinationsWithCompletion:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_base64String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64String:");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginDiagnosticWithIdentifier_parameters_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDiagnosticWithIdentifier:parameters:completion:");
}

id objc_msgSend_beginDiscoveringDevicesWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDiscoveringDevicesWithHandler:");
}

id objc_msgSend_bezierPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPath");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_bleDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bleDevice");
}

id objc_msgSend_bluetoothID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothID");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_btManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btManager");
}

id objc_msgSend_btManagerAvailableSemaphore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btManagerAvailableSemaphore");
}

id objc_msgSend_bugSessionStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bugSessionStarted");
}

id objc_msgSend_bugSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bugSessions");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_buttonEventMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonEventMonitor");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cachedResponseForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedResponseForRequest:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllDiagnostics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllDiagnostics");
}

id objc_msgSend_cancelAllReports(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAllReports");
}

id objc_msgSend_cancelDiagnosticExtensionWithDEDExtensionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDiagnosticExtensionWithDEDExtensionIdentifier:");
}

id objc_msgSend_cancelTestWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTestWithCommand:");
}

id objc_msgSend_certifcateType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certifcateType");
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificates");
}

id objc_msgSend_check(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "check");
}

id objc_msgSend_checkAvailabilityWithTicketNumber_timeout_exitWhenDone_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAvailabilityWithTicketNumber:timeout:exitWhenDone:completion:");
}

id objc_msgSend_checkAvailabilityWithTicketNumber_timeout_exitWhenDone_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAvailabilityWithTicketNumber:timeout:exitWhenDone:response:");
}

id objc_msgSend_checkEnhancedLoggingStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkEnhancedLoggingStateWithReply:");
}

id objc_msgSend_clearAllowSessionAccessoryDisconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllowSessionAccessoryDisconnect");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clearNextBootCheckerBoardPersistent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearNextBootCheckerBoardPersistent");
}

id objc_msgSend_clearNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearNotification");
}

id objc_msgSend_clock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clock");
}

id objc_msgSend_cloudKitContainerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitContainerIdentifier");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "color");
}

id objc_msgSend_commandType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandType");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_commitCurrentPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitCurrentPath");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completion");
}

id objc_msgSend_completionMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionMap");
}

id objc_msgSend_componentPredicateWithType_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentPredicateWithType:identifier:");
}

id objc_msgSend_components(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components");
}

id objc_msgSend_configurator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurator");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connect");
}

id objc_msgSend_connectSemaphore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectSemaphore");
}

id objc_msgSend_connectToDED_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToDED:");
}

id objc_msgSend_connected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connected");
}

id objc_msgSend_connectedScenes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedScenes");
}

id objc_msgSend_connecting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connecting");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionCommandQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionCommandQueue");
}

id objc_msgSend_consent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consent");
}

id objc_msgSend_consentBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consentBody");
}

id objc_msgSend_consentData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consentData");
}

id objc_msgSend_consumeSandboxExtensionsWithTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeSandboxExtensionsWithTokens:");
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerIdentifier");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contentsText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsText");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyCertificatePEMWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCertificatePEMWithError:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createLoggingEventWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLoggingEventWith:");
}

id objc_msgSend_currentDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDate");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEnvironment");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPath");
}

id objc_msgSend_currentPlatform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPlatform");
}

id objc_msgSend_customSerialNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customSerialNumber");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decorateWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decorateWithDevice:");
}

id objc_msgSend_dedExtensionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dedExtensionIdentifier");
}

id objc_msgSend_dedSessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dedSessionIdentifier");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultObserverClasses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultObserverClasses");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_descender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descender");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destination");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device");
}

id objc_msgSend_device_didFinishTestSuite_withEntry_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didFinishTestSuite:withEntry:error:");
}

id objc_msgSend_device_didRequestInstructionalPrompt_withConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didRequestInstructionalPrompt:withConfirmation:");
}

id objc_msgSend_device_didRequestSuiteRunWithDestinations_confirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didRequestSuiteRunWithDestinations:confirmation:");
}

id objc_msgSend_device_shouldStartTestWithTestId_fullscreen_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:shouldStartTestWithTestId:fullscreen:response:");
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceClass");
}

id objc_msgSend_deviceConnection_didFinishTestSuite_withEntry_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceConnection:didFinishTestSuite:withEntry:error:");
}

id objc_msgSend_deviceConnection_didRecieveCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceConnection:didRecieveCommand:");
}

id objc_msgSend_deviceConnection_didRequestInstructionalPrompt_withConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceConnection:didRequestInstructionalPrompt:withConfirmation:");
}

id objc_msgSend_deviceConnection_didRequestSuiteRunWithDestinations_confirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceConnection:didRequestSuiteRunWithDestinations:confirmation:");
}

id objc_msgSend_deviceIDForNRDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIDForNRDevice:");
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentifier");
}

id objc_msgSend_deviceIdentityCert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentityCert");
}

id objc_msgSend_deviceIdentityKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentityKey");
}

id objc_msgSend_deviceIdentityPublicKeyDigest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentityPublicKeyDigest");
}

id objc_msgSend_deviceMatchingAccessories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMatchingAccessories:");
}

id objc_msgSend_deviceStatePingTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceStatePingTimer");
}

id objc_msgSend_deviceWithSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithSerialNumber:");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "devices");
}

id objc_msgSend_devicesWithDiscoveryFlags_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "devicesWithDiscoveryFlags:error:");
}

id objc_msgSend_diagnosticEventID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticEventID");
}

id objc_msgSend_diagnosticParametersWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticParametersWithDictionary:");
}

id objc_msgSend_diagnosticsExitingForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticsExitingForReason:");
}

id objc_msgSend_diagnosticsManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticsManager");
}

id objc_msgSend_diagnosticsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticsWithCompletion:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didEdit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEdit:");
}

id objc_msgSend_didFinishSendingResultForTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFinishSendingResultForTest:");
}

id objc_msgSend_dimDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dimDisplay");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnect");
}

id objc_msgSend_disconnectSemaphore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectSemaphore");
}

id objc_msgSend_disconnecting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnecting");
}

id objc_msgSend_discoverAllDevicesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverAllDevicesWithCompletionHandler:");
}

id objc_msgSend_discoverDevicesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverDevicesWithCompletion:");
}

id objc_msgSend_displayDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayDeviceIdentifier");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadAndSetImageForURL_fallbackUrl_withDeviceState_andCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadAndSetImageForURL:fallbackUrl:withDeviceState:andCompletionHandler:");
}

id objc_msgSend_drawAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawAtPoint:");
}

id objc_msgSend_drawInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:");
}

id objc_msgSend_drawPageAtIndex_inRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawPageAtIndex:inRect:");
}

id objc_msgSend_durationRemaining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationRemaining");
}

id objc_msgSend_enclosureColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enclosureColor");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "end");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDate");
}

id objc_msgSend_endDiscoveringDevicesWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDiscoveringDevicesWithIdentifier:");
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpoint");
}

id objc_msgSend_enqueueTestWithTestAttributes_parameters_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueTestWithTestAttributes:parameters:completion:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errors");
}

id objc_msgSend_estimatedTimeRemaining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedTimeRemaining");
}

id objc_msgSend_eventDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventDelegate");
}

id objc_msgSend_executeAfterDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeAfterDuration");
}

id objc_msgSend_executeTestWithTestAttributes_parameters_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeTestWithTestAttributes:parameters:completion:");
}

id objc_msgSend_extra(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extra");
}

id objc_msgSend_fileHandleForReadingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingAtPath:");
}

id objc_msgSend_fileSandboxTokens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSandboxTokens");
}

id objc_msgSend_files(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "files");
}

id objc_msgSend_finishWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithCompletion:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstResponseLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstResponseLock");
}

id objc_msgSend_firstResponseSent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstResponseSent");
}

id objc_msgSend_flushWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushWithCompletion:");
}

id objc_msgSend_followUpOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "followUpOptions");
}

id objc_msgSend_force(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "force");
}

id objc_msgSend_forceTouchCapability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceTouchCapability");
}

id objc_msgSend_fractionCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fractionCompleted");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullName");
}

id objc_msgSend_fullscreenPromptsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullscreenPromptsEnabled");
}

id objc_msgSend_functionWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithName:");
}

id objc_msgSend_generateAuthInfoWithNonce_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateAuthInfoWithNonce:completion:");
}

id objc_msgSend_generatePDFData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generatePDFData");
}

id objc_msgSend_gestureTouchesBegan_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureTouchesBegan:withEvent:");
}

id objc_msgSend_gestureTouchesEnded_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureTouchesEnded:withEvent:");
}

id objc_msgSend_gestureTouchesMoved_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureTouchesMoved:withEvent:");
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getActivePairedDevice");
}

id objc_msgSend_getAllDevicesWithArchivedAltAccountDevicesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllDevicesWithArchivedAltAccountDevicesMatching:");
}

id objc_msgSend_getBugSessionActivityWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBugSessionActivityWithCompletion:");
}

id objc_msgSend_getCString_maxLength_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCString:maxLength:encoding:");
}

id objc_msgSend_getDeviceSizeTokenForCurrentDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeviceSizeTokenForCurrentDeviceClass:");
}

id objc_msgSend_getFormattedDeviceColor_deviceEnclosureColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFormattedDeviceColor:deviceEnclosureColor:");
}

id objc_msgSend_getImageFromCacheWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getImageFromCacheWithRequest:");
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPairedDevices");
}

id objc_msgSend_getSessionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSessionID");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler");
}

id objc_msgSend_handlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlers");
}

id objc_msgSend_hasIgnoredDisconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasIgnoredDisconnect");
}

id objc_msgSend_hasTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTarget:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hideSceneStatusBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideSceneStatusBar");
}

id objc_msgSend_history(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "history");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifiersToRetry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifiersToRetry");
}

id objc_msgSend_identityWithSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityWithSerialNumber:");
}

id objc_msgSend_idle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idle");
}

id objc_msgSend_idsDestination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDestination");
}

id objc_msgSend_ignoreButtonEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreButtonEvents");
}

id objc_msgSend_ignoreDisconnectTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreDisconnectTimer");
}

id objc_msgSend_ignoreTouch_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreTouch:forEvent:");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imageSignature(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageSignature");
}

id objc_msgSend_imageURLForDeviceClass_deviceModel_deviceColor_deviceEnclosureColor_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageURLForDeviceClass:deviceModel:deviceColor:deviceEnclosureColor:scale:");
}

id objc_msgSend_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithCGImage:");
}

id objc_msgSend_imageWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:");
}

id objc_msgSend_imageWithData_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:scale:");
}

id objc_msgSend_infoWithChangedProperties_snapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoWithChangedProperties:snapshot:");
}

id objc_msgSend_information(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "information");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initListener");
}

id objc_msgSend_initWithAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessory:");
}

id objc_msgSend_initWithAttributes_parameters_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributes:parameters:completion:");
}

id objc_msgSend_initWithBluetoothDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBluetoothDevice:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithChangedProperties_snapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangedProperties:snapshot:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDestination_andEncryptionKey_andToken_andExtraHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDestination:andEncryptionKey:andToken:andExtraHeaders:");
}

id objc_msgSend_initWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_color_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:color:scale:");
}

id objc_msgSend_initWithHostAppIdentifier_localizedNotificationTitle_localizedNotificationBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHostAppIdentifier:localizedNotificationTitle:localizedNotificationBody:");
}

id objc_msgSend_initWithIdentifier_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:attributes:");
}

id objc_msgSend_initWithIdentifiers_contactMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifiers:contactMessage:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithNanoDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNanoDevice:");
}

id objc_msgSend_initWithObserver_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObserver:delegate:");
}

id objc_msgSend_initWithObserverClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObserverClasses:");
}

id objc_msgSend_initWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:");
}

id objc_msgSend_initWithSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerialNumber:");
}

id objc_msgSend_initWithSerialNumber_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerialNumber:attributes:");
}

id objc_msgSend_initWithSerialNumber_isLocal_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerialNumber:isLocal:attributes:");
}

id objc_msgSend_initWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:");
}

id objc_msgSend_initWithState_bluetoothDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:bluetoothDevice:");
}

id objc_msgSend_initWithState_nanoDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:nanoDevice:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithSuiteName_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:withHandler:");
}

id objc_msgSend_initWithTestSuiteName_date_skipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestSuiteName:date:skipped:");
}

id objc_msgSend_initWithTestSuiteName_date_skipped_results_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestSuiteName:date:skipped:results:");
}

id objc_msgSend_initWithTestSuiteName_skipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestSuiteName:skipped:");
}

id objc_msgSend_initWithTestSuiteName_skipped_results_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestSuiteName:skipped:results:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
}

id objc_msgSend_initialDevicesFetched(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialDevicesFetched");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invokeWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invokeWithTarget:");
}

id objc_msgSend_isAppleAudioDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppleAudioDevice");
}

id objc_msgSend_isCheckerBoardActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCheckerBoardActive");
}

id objc_msgSend_isCommunicationAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCommunicationAvailable");
}

id objc_msgSend_isDisconnecting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDisconnecting");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToIDSDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToIDSDevice:");
}

id objc_msgSend_isEqualToNRDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNRDevice:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSFDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSFDevice:");
}

id objc_msgSend_isEqualToSessionSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSessionSettings:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEqualToTestQueueEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToTestQueueEntry:");
}

id objc_msgSend_isForceTouchAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isForceTouchAvailable");
}

id objc_msgSend_isHeadless(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHeadless");
}

id objc_msgSend_isIgnoringDisconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIgnoringDisconnect");
}

id objc_msgSend_isInBoxUpdateMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInBoxUpdateMode:");
}

id objc_msgSend_isIndeterminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIndeterminate");
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalInstall");
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocallyPaired");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isSSRBootIntentSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSSRBootIntentSet");
}

id objc_msgSend_isSessionModeOveridden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSessionModeOveridden");
}

id objc_msgSend_isTemporaryPaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTemporaryPaired");
}

id objc_msgSend_isTouchTypeStylus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTouchTypeStylus:");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_issueClientCertificateWithCompletionOnQueue_withOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "issueClientCertificateWithCompletionOnQueue:withOptions:completion:");
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "items");
}

id objc_msgSend_lastConnectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastConnectionState");
}

id objc_msgSend_lastMessageTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastMessageTimestamp");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_lightGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lightGrayColor");
}

id objc_msgSend_lineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineColor");
}

id objc_msgSend_lineWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineWidth");
}

id objc_msgSend_lineWidthVariation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineWidthVariation");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listener");
}

id objc_msgSend_loadHTMLString_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadHTMLString:baseURL:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedStringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_locallyPaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locallyPaired");
}

id objc_msgSend_locationInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationInView:");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lock");
}

id objc_msgSend_macAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macAddress");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_makeSignatureGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeSignatureGestureRecognizer");
}

id objc_msgSend_mapTableWithWeakToStrongObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapTableWithWeakToStrongObjects");
}

id objc_msgSend_maximumPossibleForce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumPossibleForce");
}

id objc_msgSend_messageReceiverQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageReceiverQueue");
}

id objc_msgSend_messageReceivingQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageReceivingQueue");
}

id objc_msgSend_messageSendingQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageSendingQueue");
}

id objc_msgSend_messenger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messenger");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_methodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "methodSignatureForSelector:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mode");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelNumber");
}

id objc_msgSend_moveToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToPoint:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nanoDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nanoDevice");
}

id objc_msgSend_nanoObservationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nanoObservationQueue");
}

id objc_msgSend_nanoRegistrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nanoRegistrationQueue");
}

id objc_msgSend_notifierConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifierConfiguration");
}

id objc_msgSend_nrDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nrDevice");
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nsuuid");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_numberOfPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfPages");
}

id objc_msgSend_numberOfTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfTouches");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_object_isEqualToObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object:isEqualToObject:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observer");
}

id objc_msgSend_observerDidChangeDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observerDidChangeDevices:");
}

id objc_msgSend_observers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observers");
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offsetInFile");
}

id objc_msgSend_oneshotWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oneshotWithHandler:");
}

id objc_msgSend_openAppleSMC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAppleSMC:");
}

id objc_msgSend_original(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "original");
}

id objc_msgSend_originalScreenBrightness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originalScreenBrightness");
}

id objc_msgSend_paired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paired");
}

id objc_msgSend_pairedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairedDevices");
}

id objc_msgSend_pairedDevicesSelectorBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairedDevicesSelectorBlock");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parameters");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathArray");
}

id objc_msgSend_pathWithRoundedStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithRoundedStyle");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_persistentTaskObservationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentTaskObservationQueue");
}

id objc_msgSend_persistentTaskRegistrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentTaskRegistrationQueue");
}

id objc_msgSend_phase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phase");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "port");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_prepareSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareSession");
}

id objc_msgSend_previousLocationInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousLocationInView:");
}

id objc_msgSend_primarySerialNumberForAirpodsDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primarySerialNumberForAirpodsDevice:");
}

id objc_msgSend_productId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productId");
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productName");
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productType");
}

id objc_msgSend_profile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profile");
}

id objc_msgSend_profileWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "profileWithCommand:");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progress");
}

id objc_msgSend_progressForTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressForTest");
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "properties");
}

id objc_msgSend_proxyServer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyServer");
}

id objc_msgSend_purgeSecurityKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeSecurityKey");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_queueEntryWithAttributes_parameters_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueEntryWithAttributes:parameters:completion:");
}

id objc_msgSend_queueUploadWithSourceData_andExtra_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueUploadWithSourceData:andExtra:");
}

id objc_msgSend_quickSwitchToNRDevice_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quickSwitchToNRDevice:completion:");
}

id objc_msgSend_readDataFor_value_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataFor:value:size:");
}

id objc_msgSend_readDataOfLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataOfLength:");
}

id objc_msgSend_readValueFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readValueFor:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reason");
}

id objc_msgSend_receiveMessage_data_fromDestination_expectsResponse_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveMessage:data:fromDestination:expectsResponse:response:");
}

id objc_msgSend_receiver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiver");
}

id objc_msgSend_reconfigureWithCommit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconfigureWithCommit:");
}

id objc_msgSend_referenceKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceKey");
}

id objc_msgSend_refreshWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshWithCompletion:");
}

id objc_msgSend_registerForLocalNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForLocalNotifications");
}

id objc_msgSend_releaseSandboxExtensionsWithHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseSandboxExtensionsWithHandles:");
}

id objc_msgSend_remoteClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteClient");
}

id objc_msgSend_remoteClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteClients");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteRunnerDeviceEnded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteRunnerDeviceEnded");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeErrorCode:");
}

id objc_msgSend_removeErrorCodes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeErrorCodes:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTarget:");
}

id objc_msgSend_repairToolUploadClientWithUploadRequests_andDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repairToolUploadClientWithUploadRequests:andDelegate:");
}

id objc_msgSend_reportManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportManager");
}

id objc_msgSend_reportWithComponentPredicateManifest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportWithComponentPredicateManifest:completion:");
}

id objc_msgSend_requestAsset_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAsset:completion:");
}

id objc_msgSend_requestAsset_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAsset:completionHandler:");
}

id objc_msgSend_requestAttestationBlobWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAttestationBlobWithOptions:error:");
}

id objc_msgSend_requestAttestationCertWithOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAttestationCertWithOptions:completion:");
}

id objc_msgSend_requestCapabilitiesSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCapabilitiesSet:");
}

id objc_msgSend_requestSuiteFinishWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSuiteFinishWithCompletionHandler:");
}

id objc_msgSend_requestSuiteStart_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSuiteStart:completionHandler:");
}

id objc_msgSend_requestSuiteSummary_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSuiteSummary:completionHandler:");
}

id objc_msgSend_requestUploadAssets_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestUploadAssets:completion:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "results");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_resumeTests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeTests");
}

id objc_msgSend_retry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retry");
}

id objc_msgSend_retryBugSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryBugSession");
}

id objc_msgSend_sandboxExtensionHandles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sandboxExtensionHandles");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scaledImageToHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledImageToHeight:");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_sceneStatusBarStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sceneStatusBarStyle:");
}

id objc_msgSend_scheduleNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleNotification");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_seekToFileOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seekToFileOffset:");
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selector");
}

id objc_msgSend_sendAnalyticsWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsWithEvent:");
}

id objc_msgSend_sendAnalyticsWithEvent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsWithEvent:error:");
}

id objc_msgSend_sendAnalyticsWithEvent_payloadDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsWithEvent:payloadDict:");
}

id objc_msgSend_sendAuthInfoResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAuthInfoResult:error:");
}

id objc_msgSend_sendMessage_data_toDestination_forceLocalDelivery_expectsResponse_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:data:toDestination:forceLocalDelivery:expectsResponse:response:");
}

id objc_msgSend_sendTestResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTestResult:error:");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialNumber");
}

id objc_msgSend_serialNumberLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialNumberLeft");
}

id objc_msgSend_serialNumberRight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialNumberRight");
}

id objc_msgSend_serialNumbers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialNumbers");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "server");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "session");
}

id objc_msgSend_sessionEndReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionEndReason");
}

id objc_msgSend_sessionExistsForIdentities_ticketNumber_timeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionExistsForIdentities:ticketNumber:timeout:completion:");
}

id objc_msgSend_sessionSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionSettings");
}

id objc_msgSend_sessionSettingsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionSettingsWithDictionary:");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithIdentity:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAccessoryResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryResponder:");
}

id objc_msgSend_setActiveDeviceAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveDeviceAssertion:");
}

id objc_msgSend_setActivePairedDevice_withActiveDeviceAssertionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePairedDevice:withActiveDeviceAssertionHandler:");
}

id objc_msgSend_setAirpodsUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirpodsUUID:");
}

id objc_msgSend_setAllowCellularSizeThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowCellularSizeThreshold:");
}

id objc_msgSend_setAllowList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowList:");
}

id objc_msgSend_setAllowsCellularUpload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularUpload:");
}

id objc_msgSend_setAnimationCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimationCompletion:");
}

id objc_msgSend_setAssetResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetResponder:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBeginTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTime:");
}

id objc_msgSend_setBorderColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderColor:");
}

id objc_msgSend_setBorderWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderWidth:");
}

id objc_msgSend_setBrightnessResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrightnessResponder:");
}

id objc_msgSend_setBtManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBtManager:");
}

id objc_msgSend_setBugSessionStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBugSessionStarted:");
}

id objc_msgSend_setButtonEventMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonEventMonitor:");
}

id objc_msgSend_setCertData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertData:");
}

id objc_msgSend_setCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheck:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClock:");
}

id objc_msgSend_setCloudkitContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudkitContainer:");
}

id objc_msgSend_setCloudkitData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudkitData:");
}

id objc_msgSend_setCloudkitUseDevelopmentEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudkitUseDevelopmentEnvironment:");
}

id objc_msgSend_setCommunicationAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommunicationAvailable:");
}

id objc_msgSend_setCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletion:");
}

id objc_msgSend_setComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponents:");
}

id objc_msgSend_setConfigurator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurator:");
}

id objc_msgSend_setConnecting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnecting:");
}

id objc_msgSend_setConsentData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConsentData:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContentsText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentsText:");
}

id objc_msgSend_setCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerRadius:");
}

id objc_msgSend_setCurrentPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPath:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDeviceIdentityKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceIdentityKey:");
}

id objc_msgSend_setDeviceImage_forDeviceState_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceImage:forDeviceState:withCompletion:");
}

id objc_msgSend_setDevicePairingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevicePairingEnabled:");
}

id objc_msgSend_setDeviceStatePingTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceStatePingTimer:");
}

id objc_msgSend_setDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevices:");
}

id objc_msgSend_setDiagnosticEventID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiagnosticEventID:");
}

id objc_msgSend_setDisconnecting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnecting:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDurationRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurationRemaining:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrors:");
}

id objc_msgSend_setEventDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventDelegate:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileURL:");
}

id objc_msgSend_setFiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFiles:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFill");
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillColor:");
}

id objc_msgSend_setFillMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillMode:");
}

id objc_msgSend_setFinishingMove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishingMove:");
}

id objc_msgSend_setFirstResponseSent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstResponseSent:");
}

id objc_msgSend_setFollowupFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupFrequency:");
}

id objc_msgSend_setFollowupLocalizedInformativeText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupLocalizedInformativeText:");
}

id objc_msgSend_setFollowupLocalizedTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupLocalizedTitle:");
}

id objc_msgSend_setFollowupNotificationActionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupNotificationActionTitle:");
}

id objc_msgSend_setFollowupNotificationActionURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupNotificationActionURL:");
}

id objc_msgSend_setFollowupReviewActionURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupReviewActionURL:");
}

id objc_msgSend_setFollowupUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupUniqueIdentifier:");
}

id objc_msgSend_setFollowupUseSpringboardNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFollowupUseSpringboardNotification:");
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromValue:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHasIgnoredDisconnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasIgnoredDisconnect:");
}

id objc_msgSend_setHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHistory:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIgnoreButtonEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreButtonEvents:");
}

id objc_msgSend_setIgnoreDisconnectTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreDisconnectTimer:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsIgnoringDisconnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsIgnoringDisconnect:");
}

id objc_msgSend_setIsSessionModeOveridden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSessionModeOveridden:");
}

id objc_msgSend_setLastConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnectionState:");
}

id objc_msgSend_setLineCap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineCap:");
}

id objc_msgSend_setLineCapStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineCapStyle:");
}

id objc_msgSend_setLineJoin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineJoin:");
}

id objc_msgSend_setLineJoinStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineJoinStyle:");
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineWidth:");
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setNavigationDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationDelegate:");
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsDisplay");
}

id objc_msgSend_setNeedsDisplayInRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsDisplayInRect:");
}

id objc_msgSend_setNextBootCheckerBoard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextBootCheckerBoard");
}

id objc_msgSend_setNextBootCheckerBoardPersistent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextBootCheckerBoardPersistent");
}

id objc_msgSend_setNextBootRecovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextBootRecovery");
}

id objc_msgSend_setNotifierConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifierConfiguration:");
}

id objc_msgSend_setNotifyingMove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyingMove:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOriginalScreenBrightness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalScreenBrightness:");
}

id objc_msgSend_setOverrideSessionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideSessionMode:");
}

id objc_msgSend_setParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParameters:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhase:");
}

id objc_msgSend_setProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProfile:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressResponder:");
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperties:");
}

id objc_msgSend_setRebootType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRebootType:");
}

id objc_msgSend_setReceiver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceiver:");
}

id objc_msgSend_setRemoteClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteClient:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRepeatCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeatCount:");
}

id objc_msgSend_setReviewActionLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReviewActionLabel:");
}

id objc_msgSend_setSOCKSProxyPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSOCKSProxyPort:");
}

id objc_msgSend_setSOCKSProxyServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSOCKSProxyServer:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setSessionSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionSettings:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStatusBarResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusBarResponder:");
}

id objc_msgSend_setStatusCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusCode:");
}

id objc_msgSend_setStroke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStroke");
}

id objc_msgSend_setStrokeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeColor:");
}

id objc_msgSend_setStrokeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeEnd:");
}

id objc_msgSend_setStrokeStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeStart:");
}

id objc_msgSend_setStrongDeviceIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrongDeviceIdentity:");
}

id objc_msgSend_setSuiteDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuiteDescription:");
}

id objc_msgSend_setSuiteID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuiteID:");
}

id objc_msgSend_setSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuiteName:");
}

id objc_msgSend_setSuitesAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuitesAvailable:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setTestDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestDuration:");
}

id objc_msgSend_setTestID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestID:");
}

id objc_msgSend_setTestQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestQueue:");
}

id objc_msgSend_setTestSuiteImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestSuiteImageData:");
}

id objc_msgSend_setTests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTests:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTimingFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimingFunction:");
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToValue:");
}

id objc_msgSend_setUnpairOnTestCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnpairOnTestCompletion:");
}

id objc_msgSend_setUploadCompletedPercentage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadCompletedPercentage:");
}

id objc_msgSend_setUploadDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadDelegate:");
}

id objc_msgSend_setUploadStatusFromSource_withArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUploadStatusFromSource:withArray:");
}

id objc_msgSend_setUserAlertResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserAlertResponder:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setViewControllerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewControllerDelegate:");
}

id objc_msgSend_setVisibleAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisibleAlert:");
}

id objc_msgSend_setVolumeHUDResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeHUDResponder:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_sharedAccessoryManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAccessoryManager");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedURLCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedURLCache");
}

id objc_msgSend_shouldShowResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowResults");
}

id objc_msgSend_showOnTopWithAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showOnTopWithAnimated:completion:");
}

id objc_msgSend_showSceneStatusBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSceneStatusBar");
}

id objc_msgSend_shutdownWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shutdownWithOptions:");
}

id objc_msgSend_signDigest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signDigest:error:");
}

id objc_msgSend_signFile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signFile:error:");
}

id objc_msgSend_signPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signPayload:error:");
}

id objc_msgSend_signal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signal");
}

id objc_msgSend_signatureImageSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureImageSize");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_skipped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "skipped");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_snapshot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshot");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startBugSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBugSession");
}

id objc_msgSend_startBugSessionWithIdentifier_configuration_target_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBugSessionWithIdentifier:configuration:target:completion:");
}

id objc_msgSend_startDEDSessionForDevice_withConfig_withNewSession_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDEDSessionForDevice:withConfig:withNewSession:completionHandler:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDate");
}

id objc_msgSend_startDiagnosticExtensionWithIdentifier_parameters_deferRunUntil_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDiagnosticExtensionWithIdentifier:parameters:deferRunUntil:completion:");
}

id objc_msgSend_startTestWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTestWithCommand:");
}

id objc_msgSend_startWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithMode:");
}

id objc_msgSend_startWithPriority_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithPriority:completion:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCode");
}

id objc_msgSend_statusToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusToString:");
}

id objc_msgSend_stopDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopDiscovery");
}

id objc_msgSend_stopWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopWithCompletion:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByReplacingReservedURLCharactersUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingReservedURLCharactersUsingEncoding:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stroke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stroke");
}

id objc_msgSend_strokeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strokeColor");
}

id objc_msgSend_strongDeviceIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strongDeviceIdentity");
}

id objc_msgSend_suiteDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suiteDescription");
}

id objc_msgSend_suiteID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suiteID");
}

id objc_msgSend_suiteName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suiteName");
}

id objc_msgSend_suites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suites");
}

id objc_msgSend_suitesAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suitesAvailable");
}

id objc_msgSend_supportedDeviceAllowList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedDeviceAllowList");
}

id objc_msgSend_supportedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedDevices");
}

id objc_msgSend_suspendTests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendTests");
}

id objc_msgSend_suspended(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspended");
}

id objc_msgSend_synchronizeSessionStatusWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeSessionStatusWithCompletion:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_targetDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetDevices");
}

id objc_msgSend_testID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testID");
}

id objc_msgSend_testId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testId");
}

id objc_msgSend_testQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testQueue");
}

id objc_msgSend_testQueueWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testQueueWithDelegate:");
}

id objc_msgSend_testSuiteName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testSuiteName");
}

id objc_msgSend_tests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tests");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_totalDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDuration");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_transactionWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionWithBlock:");
}

id objc_msgSend_transactionWithBlock_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionWithBlock:completion:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_undimCheckerBoardDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undimCheckerBoardDisplay");
}

id objc_msgSend_undimDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "undimDisplay");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueID");
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIDOverride");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_unpackQueueWithOngoingExtensions_retry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpackQueueWithOngoingExtensions:retry:");
}

id objc_msgSend_unpair(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpair");
}

id objc_msgSend_unpairOnTestCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpairOnTestCompletion");
}

id objc_msgSend_unregisterForLocalNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForLocalNotifications");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_updateWithDeviceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithDeviceState:");
}

id objc_msgSend_uploadAssets_wtihDeviceIdentity_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadAssets:wtihDeviceIdentity:completion:");
}

id objc_msgSend_uploadCompletedPercentage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadCompletedPercentage");
}

id objc_msgSend_uploadFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadFinished");
}

id objc_msgSend_uploadStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadStatus");
}

id objc_msgSend_useSupportedDeviceAllowList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useSupportedDeviceAllowList");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valueWithCGRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGRect:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_viewPrintFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewPrintFormatter");
}

id objc_msgSend_visibleAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleAlert");
}

id objc_msgSend_wait(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wait");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_writeDataFor_value_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataFor:value:size:");
}

id objc_msgSend_writeValueFor_andValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeValueFor:andValue:");
}

