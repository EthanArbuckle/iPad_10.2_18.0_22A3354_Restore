uint64_t sub_100004AC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v1 = sub_100006454(&qword_100090890);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v25 - v5;
  v7 = sub_100006454(&qword_100090898);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v25 - v11;
  v13 = sub_100006454(&qword_1000908A0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v25 - v17;
  v19 = sub_100004D20((uint64_t *)((char *)&v25 - v17));
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v20 = &v12[*(int *)(sub_100006454(&qword_1000908A8) + 44)];
  sub_100005AC0((uint64_t)v6);
  sub_100007964((uint64_t)v6, (uint64_t)v4, &qword_100090890);
  *(_QWORD *)v20 = 0;
  v20[8] = 0;
  v21 = sub_100006454(&qword_1000908B0);
  sub_100007964((uint64_t)v4, (uint64_t)&v20[*(int *)(v21 + 48)], &qword_100090890);
  sub_100007928((uint64_t)v6, &qword_100090890);
  sub_100007928((uint64_t)v4, &qword_100090890);
  sub_100007964((uint64_t)v18, (uint64_t)v16, &qword_1000908A0);
  sub_100007964((uint64_t)v12, (uint64_t)v10, &qword_100090898);
  v22 = v26;
  sub_100007964((uint64_t)v16, v26, &qword_1000908A0);
  v23 = sub_100006454(&qword_1000908B8);
  sub_100007964((uint64_t)v10, v22 + *(int *)(v23 + 48), &qword_100090898);
  sub_100007928((uint64_t)v12, &qword_100090898);
  sub_100007928((uint64_t)v18, &qword_1000908A0);
  sub_100007928((uint64_t)v10, &qword_100090898);
  return sub_100007928((uint64_t)v16, &qword_1000908A0);
}

uint64_t sub_100004D20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, _QWORD, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char v114;
  void (*v115)(char *, uint64_t);
  char *v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  id v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[2];

  v170 = a1;
  v2 = type metadata accessor for BlendMode(0);
  v167 = *(_QWORD *)(v2 - 8);
  v168 = v2;
  __chkstk_darwin(v2);
  v166 = (char *)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100006454(&qword_1000908E0);
  __chkstk_darwin(v159);
  v158 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006454(&qword_1000908E8);
  v163 = *(_QWORD *)(v5 - 8);
  v164 = v5;
  __chkstk_darwin(v5);
  v162 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100006454(&qword_1000908F0);
  v7 = __chkstk_darwin(v160);
  v169 = (uint64_t)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v161 = (char *)&v132 - v10;
  __chkstk_darwin(v9);
  v165 = (uint64_t)&v132 - v11;
  v150 = type metadata accessor for AccessibilityTraits(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for ColorScheme(0);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v144 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for Image.ResizingMode(0);
  v134 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v135 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_1000908F8);
  __chkstk_darwin(v15);
  v137 = (uint64_t *)((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = sub_100006454(&qword_100090900);
  __chkstk_darwin(v138);
  v139 = (uint64_t)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100006454(&qword_100090908);
  __chkstk_darwin(v140);
  v141 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100006454(&qword_100090910);
  v19 = __chkstk_darwin(v154);
  v143 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v142 = (char *)&v132 - v22;
  __chkstk_darwin(v21);
  v147 = (uint64_t)&v132 - v23;
  v151 = type metadata accessor for WidgetFamily(0);
  v24 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v26 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100006454(&qword_100090918);
  __chkstk_darwin(v152);
  v153 = (uint64_t)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100006454(&qword_100090920);
  v29 = __chkstk_darwin(v28);
  v157 = (char *)&v132 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v156 = (uint64_t)&v132 - v31;
  v32 = type metadata accessor for WidgetRenderingMode(0);
  v172 = *(_QWORD *)(v32 - 8);
  v173 = v32;
  v33 = __chkstk_darwin(v32);
  v171 = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v132 - v35;
  v37 = type metadata accessor for CPSmallContentView(0);
  v38 = v1 + *(int *)(v37 + 24);
  v39 = *(_QWORD *)v38;
  v40 = *(_BYTE *)(v38 + 8);
  sub_100006904(*(_QWORD *)v38, v40);
  v41 = sub_100014EBC(v39, v40);
  sub_100006A4C(v39, v40);
  i = 0;
  v43 = v1;
  if ((v41 & 1) == 0)
    goto LABEL_7;
  v44 = sub_100015074((uint64_t)v36);
  v45 = v171;
  static WidgetRenderingMode.accented.getter(v44);
  v46 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v47 = v173;
  v48 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v45, v173, v46);
  v49 = *(void (**)(char *, uint64_t))(v172 + 8);
  v49(v45, v47);
  v49(v36, v47);
  if ((v48 & 1) == 0)
  {
    if (qword_1000906E0 != -1)
      goto LABEL_30;
    goto LABEL_5;
  }
  for (i = 0; ; i = swift_retain(qword_1000959B8))
  {
    v1 = v43;
LABEL_7:
    v155 = i;
    v50 = v1 + *(int *)(v37 + 32);
    v51 = type metadata accessor for CPTimelineEntry(0);
    if (*(_BYTE *)(v50 + *(int *)(v51 + 32)) == 1)
    {
      v52 = *(_QWORD *)v38;
      v53 = *(_BYTE *)(v38 + 8);
      sub_100006904(*(_QWORD *)v38, v53);
      v38 = sub_100014EBC(v52, v53);
      sub_100006A4C(v52, v53);
      if ((v38 & 1) == 0)
      {
        v103 = v153;
        swift_storeEnumTagMultiPayload(v153, v152, 0);
        v104 = sub_1000079A8();
        v101 = v156;
        _ConditionalContent<>.init(storage:)(v103, &type metadata for EmptyView, v154, &protocol witness table for EmptyView, v104);
        v105 = sub_100006454(&qword_100090928);
        v102 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v101, 0, 1, v105);
        goto LABEL_24;
      }
    }
    v54 = *(_QWORD *)(v50 + *(int *)(v51 + 20));
    if ((unint64_t)v54 >> 62)
    {
      if (v54 < 0)
        v38 = v54;
      else
        v38 = v54 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v54);
      if (!_CocoaArrayWrapper.endIndex.getter(v38))
      {
LABEL_22:
        swift_bridgeObjectRelease(v54);
        goto LABEL_23;
      }
    }
    else
    {
      v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v54);
      if (!v55)
        goto LABEL_22;
    }
    if ((v54 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v56 = *(_QWORD *)(v54 + 32);
      swift_retain(v56);
      goto LABEL_14;
    }
    __break(1u);
LABEL_30:
    swift_once(&qword_1000906E0, sub_10000AB40);
LABEL_5:
    ;
  }
  v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v54);
LABEL_14:
  swift_bridgeObjectRelease(v54);
  sub_100014E8C((uint64_t)v26);
  v57 = sub_10001FC38((uint64_t)v26, 0);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v151);
  if (v57)
  {
    v133 = v57;
    v58 = Image.init(uiImage:)();
    v59 = v134;
    v60 = *(void (**)(char *, _QWORD, uint64_t))(v134 + 104);
    v61 = v56;
    v62 = v135;
    v151 = v43;
    v63 = v136;
    v60(v135, enum case for Image.ResizingMode.stretch(_:), v136);
    v64 = Image.resizable(capInsets:resizingMode:)(v62, v58, 0.0, 0.0, 0.0, 0.0);
    swift_release(v58);
    v65 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v62, v63);
    v66 = static Alignment.center.getter(v65);
    v67 = (uint64_t)v137;
    *v137 = v66;
    *(_QWORD *)(v67 + 8) = v68;
    v69 = sub_100006454(&qword_100090948);
    sub_100054948(v64, (char *)(v67 + *(int *)(v69 + 44)), 0.3);
    swift_release(v64);
    v70 = v139;
    sub_100007964(v67, v139, &qword_1000908F8);
    v71 = v70 + *(int *)(v138 + 36);
    *(_QWORD *)v71 = 0;
    *(_WORD *)(v71 + 8) = 1;
    sub_100007928(v67, &qword_1000908F8);
    v72 = v145;
    v73 = v144;
    v74 = v146;
    (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v144, enum case for ColorScheme.light(_:), v146);
    KeyPath = swift_getKeyPath(&unk_100070EE8);
    v76 = v140;
    v77 = (uint64_t)v141;
    v78 = (uint64_t *)&v141[*(int *)(v140 + 36)];
    v79 = sub_100006454(&qword_100090950);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))((char *)v78 + *(int *)(v79 + 28), v73, v74);
    *v78 = KeyPath;
    sub_100007964(v70, v77, &qword_100090900);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
    sub_100007928(v70, &qword_100090900);
    v132 = v61;
    v80 = *(_QWORD *)(v61 + 48);
    v174[0] = *(_QWORD *)(v61 + 40);
    v174[1] = v80;
    v81 = sub_10000778C();
    swift_bridgeObjectRetain(v80);
    v82 = Text.init<A>(_:)(v174, &type metadata for String, v81);
    v84 = v83;
    v86 = v85;
    v88 = v87 & 1;
    v89 = sub_1000077D0();
    v90 = (uint64_t)v143;
    View.accessibility(label:)(v82, v84, v88, v86, v76, v89);
    sub_100007918(v82, v84, v88);
    swift_bridgeObjectRelease(v86);
    v91 = sub_100007928(v77, &qword_100090908);
    v92 = v148;
    static AccessibilityTraits.isButton.getter(v91);
    v93 = (uint64_t)v142;
    v94 = v154;
    ModifiedContent<>.accessibility(addTraits:)(v92, v154);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v92, v150);
    sub_100007928(v90, &qword_100090910);
    v95 = v147;
    sub_100007A2C(v93, v147, &qword_100090910);
    v96 = v153;
    sub_100007964(v95, v153, &qword_100090910);
    swift_storeEnumTagMultiPayload(v96, v152, 1);
    v97 = sub_1000079A8();
    v98 = (uint64_t)v157;
    _ConditionalContent<>.init(storage:)(v96, &type metadata for EmptyView, v94, &protocol witness table for EmptyView, v97);

    swift_release(v132);
    v99 = v95;
    v43 = v151;
    sub_100007928(v99, &qword_100090910);
    v100 = sub_100006454(&qword_100090928);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v98, 0, 1, v100);
    v101 = v156;
    v102 = sub_100007A2C(v98, v156, &qword_100090920);
    goto LABEL_25;
  }
  swift_release(v56);
LABEL_23:
  v106 = sub_100006454(&qword_100090928);
  v101 = v156;
  v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v156, 1, 1, v106);
LABEL_24:
  v98 = (uint64_t)v157;
LABEL_25:
  v107 = static HorizontalAlignment.center.getter(v102);
  v108 = (uint64_t)v158;
  *v158 = v107;
  *(_QWORD *)(v108 + 8) = 0;
  *(_BYTE *)(v108 + 16) = 1;
  v109 = sub_100006454(&qword_100090930);
  sub_100005F1C(v43, v108 + *(int *)(v109 + 44));
  v110 = sub_1000078D8(&qword_100090938, &qword_1000908E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v111 = v162;
  View.widgetAccentable(_:)(1, v159, v110);
  sub_100007928(v108, &qword_1000908E0);
  v112 = sub_100015074((uint64_t)v36);
  v113 = v171;
  static WidgetRenderingMode.accented.getter(v112);
  v114 = static WidgetRenderingMode.== infix(_:_:)(v36, v113);
  v115 = *(void (**)(char *, uint64_t))(v172 + 8);
  v116 = v113;
  v117 = v173;
  v115(v116, v173);
  v115(v36, v117);
  v118 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
  v120 = v166;
  v119 = v167;
  if ((v114 & 1) == 0)
    v118 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v121 = v168;
  (*(void (**)(char *, _QWORD, uint64_t))(v167 + 104))(v166, *v118, v168);
  v122 = v161;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(&v161[*(int *)(v160 + 36)], v120, v121);
  v124 = v163;
  v123 = v164;
  (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v122, v111, v164);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v111, v123);
  v125 = (uint64_t)v122;
  v126 = v165;
  sub_100007A2C(v125, v165, &qword_1000908F0);
  sub_100007964(v101, v98, &qword_100090920);
  v127 = v169;
  sub_100007964(v126, v169, &qword_1000908F0);
  v128 = v170;
  v129 = v155;
  *v170 = v155;
  v130 = sub_100006454(&qword_100090940);
  sub_100007964(v98, (uint64_t)v128 + *(int *)(v130 + 48), &qword_100090920);
  sub_100007964(v127, (uint64_t)v128 + *(int *)(v130 + 64), &qword_1000908F0);
  swift_retain(v129);
  sub_100007928(v126, &qword_1000908F0);
  sub_100007928(v101, &qword_100090920);
  sub_100007928(v127, &qword_1000908F0);
  sub_100007928(v98, &qword_100090920);
  return swift_release(v129);
}

uint64_t sub_100005AC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[2];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v43 = a1;
  v2 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v8);
  v41 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for GeometryProxy(0);
  v44 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for CPTitleView(0);
  v42 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for CPSmallContentView(0);
  v16 = v1 + v15[8];
  v17 = *(_QWORD *)(v16 + *(int *)(v8 + 20));
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v37 = v17;
    else
      v37 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    result = _CocoaArrayWrapper.endIndex.getter(v37);
    if (result)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v17);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v42 + 56))(v43, 1, 1, v12);
  }
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v17);
  if (!v18)
    goto LABEL_11;
LABEL_3:
  if ((v17 & 0xC000000000000001) != 0)
  {
    v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v39 = *(_QWORD *)(v17 + 32);
    swift_retain(v39);
LABEL_6:
    swift_bridgeObjectRelease(v17);
    v20 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v11, v1 + v15[7], v40);
    v21 = v41;
    sub_100007AF4(v16, v41, type metadata accessor for CPTimelineEntry);
    v22 = (__int128 *)(v1 + v15[9]);
    v23 = *((_QWORD *)v22 + 4);
    v24 = v22[1];
    v45 = *v22;
    v46 = v24;
    v47 = v23;
    v25 = sub_100006454(&qword_1000908C8);
    State.projectedValue.getter(v48, v25);
    v26 = v48[0];
    v27 = v48[1];
    v38 = v49;
    v28 = v50;
    v29 = v51;
    *v7 = swift_getKeyPath(&unk_100070E28);
    v30 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v7, v30, 0);
    *v4 = swift_getKeyPath(&unk_100070E58);
    v31 = sub_100006454(&qword_1000908D0);
    swift_storeEnumTagMultiPayload(v4, v31, 0);
    *(_QWORD *)v14 = swift_getKeyPath(&unk_100070E88);
    v32 = sub_100006454(&qword_1000908D8);
    swift_storeEnumTagMultiPayload(v14, v32, 0);
    v33 = &v14[v12[5]];
    *(_QWORD *)v33 = swift_getKeyPath(&unk_100070EB8);
    v34 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v33, v34, 0);
    sub_100007A2C((uint64_t)v7, (uint64_t)&v14[v12[6]], &qword_1000907C0);
    sub_100007A2C((uint64_t)v4, (uint64_t)&v14[v12[7]], &qword_1000908C0);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v14[v12[8]], v11, v20);
    sub_100007AB0(v21, (uint64_t)&v14[v12[9]], type metadata accessor for CPTimelineEntry);
    *(_QWORD *)&v14[v12[10]] = v39;
    v35 = &v14[v12[11]];
    *(_QWORD *)v35 = v26;
    *((_QWORD *)v35 + 1) = v27;
    *((_OWORD *)v35 + 1) = v38;
    *((_QWORD *)v35 + 4) = v28;
    *((_QWORD *)v35 + 5) = v29;
    v36 = v43;
    sub_100007AB0((uint64_t)v14, v43, type metadata accessor for CPTitleView);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v42 + 56))(v36, 0, 1, v12);
  }
  __break(1u);
  return result;
}

uint64_t sub_100005EF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Color.clear.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100005F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v21;

  v4 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CPTitleGradientView(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (char *)&v21 - v11;
  v13 = type metadata accessor for CPSmallContentView(0);
  v14 = ((double (*)(void))GeometryProxy.size.getter)();
  GeometryProxy.size.getter();
  v16 = v15 * 0.5;
  sub_100007AF4(a1 + *(int *)(v13 + 32), (uint64_t)v6, type metadata accessor for CPTimelineEntry);
  *v10 = swift_getKeyPath(&unk_100070EB8);
  v17 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v10, v17, 0);
  v18 = (double *)((char *)v10 + *(int *)(v7 + 20));
  *v18 = v14;
  v18[1] = v16;
  sub_100007AB0((uint64_t)v6, (uint64_t)v10 + *(int *)(v7 + 24), type metadata accessor for CPTimelineEntry);
  sub_100007AB0((uint64_t)v10, (uint64_t)v12, type metadata accessor for CPTitleGradientView);
  sub_100007AF4((uint64_t)v12, (uint64_t)v10, type metadata accessor for CPTitleGradientView);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v19 = sub_100006454(&qword_100090998);
  sub_100007AF4((uint64_t)v10, a2 + *(int *)(v19 + 48), type metadata accessor for CPTitleGradientView);
  sub_100007B38((uint64_t)v12);
  return sub_100007B38((uint64_t)v10);
}

uint64_t sub_1000060E8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100006100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = type metadata accessor for ContainerBackgroundPlacement(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100090878);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = static Alignment.center.getter(v5);
  v7[1] = v8;
  v9 = sub_100006454(&qword_100090880);
  v10 = sub_100004AC4((uint64_t)v7 + *(int *)(v9 + 44));
  v11 = static ContainerBackgroundPlacement.widget.getter(v10);
  v12 = static Alignment.center.getter(v11);
  v14 = v13;
  v15 = sub_1000078D8(&qword_100090888, &qword_100090878, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.containerBackground<A>(for:alignment:content:)(v3, v12, v14, sub_100005EF8, 0, v4, &type metadata for Color, v15, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_100007928((uint64_t)v7, &qword_100090878);
}

uint64_t sub_10000626C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = sub_100006454(&qword_100090738);
  v3 = sub_100006494(&qword_100090740);
  v4 = sub_100006494(&qword_100090748);
  v5 = sub_100006494(&qword_100090750);
  v11 = sub_100006494(&qword_100090758);
  v12 = sub_1000078D8((unint64_t *)&qword_100090760, &qword_100090758, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.eventMachServiceName(_:)>>, 1);
  v11 = v5;
  v12 = OpaqueTypeConformance2;
  v7 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v11 = v4;
  v12 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v11 = v3;
  v12 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  return WidgetConfiguration._containerBackgroundRemovable(_:)(a1, v2, v9);
}

uint64_t sub_100006394(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_10006F340(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 0);
}

uint64_t sub_1000063F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_10006F340(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 1);
  }
  return v1;
}

uint64_t sub_100006454(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006494(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000064D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = sub_100006454(&qword_100090768);
  v3 = sub_100006494(&qword_100090770);
  v4 = sub_100006494(&qword_100090778);
  v5 = sub_100006494(&qword_100090780);
  v6 = sub_100006494(&qword_100090788);
  v13 = sub_100006494(&qword_100090790);
  v14 = sub_1000078D8((unint64_t *)&qword_100090798, &qword_100090790, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v13 = v6;
  v14 = OpaqueTypeConformance2;
  v8 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.eventMachServiceName(_:)>>, 1);
  v13 = v5;
  v14 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v13 = v4;
  v14 = v9;
  v10 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v13 = v3;
  v14 = v10;
  v11 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  return WidgetConfiguration._containerBackgroundRemovable(_:)(a1, v2, v11);
}

uint64_t initializeBufferWithCopyOfBuffer for MessageViewMemoji(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for MessageViewMemoji(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006668(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100006688(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100007BF0(a1, &qword_1000907A0, (uint64_t)&unk_10008DB08);
}

uint64_t *sub_1000066C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_100006904(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[7];
    v29 = (char *)v4 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    v32 = a3[8];
    v33 = (char *)v4 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = (int *)type metadata accessor for CPTimelineEntry(0);
    v37 = v36[5];
    v38 = *(_QWORD *)&v34[v37];
    *(_QWORD *)&v33[v37] = v38;
    v33[v36[6]] = v34[v36[6]];
    v33[v36[7]] = v34[v36[7]];
    v33[v36[8]] = v34[v36[8]];
    v33[v36[9]] = v34[v36[9]];
    v39 = a3[9];
    v40 = (char *)v4 + v39;
    v41 = (char *)a2 + v39;
    v42 = *((_OWORD *)v41 + 1);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    v12 = *((_QWORD *)v41 + 4);
    *((_QWORD *)v40 + 4) = v12;
    swift_bridgeObjectRetain(v38);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_100006904(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100006910(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100006A4C(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v9 = (char *)a1 + a2[7];
  v10 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (char *)a1 + a2[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v11[*(int *)(v13 + 20)]);
  return swift_release(*(_QWORD *)((char *)a1 + a2[9] + 32));
}

uint64_t sub_100006A4C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t *sub_100006A58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_100006904(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  v30 = a3[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  v34 = (int *)type metadata accessor for CPTimelineEntry(0);
  v35 = v34[5];
  v36 = *(_QWORD *)&v32[v35];
  *(_QWORD *)&v31[v35] = v36;
  v31[v34[6]] = v32[v34[6]];
  v31[v34[7]] = v32[v34[7]];
  v31[v34[8]] = v32[v34[8]];
  v31[v34[9]] = v32[v34[9]];
  v37 = a3[9];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  v41 = *((_QWORD *)v39 + 4);
  *((_QWORD *)v38 + 4) = v41;
  swift_bridgeObjectRetain(v36);
  swift_retain(v41);
  return a1;
}

uint64_t *sub_100006C6C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100007928((uint64_t)a1 + v12, &qword_1000907B0);
    v15 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_100006904(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_100006A4C(v26, v27);
  v28 = a3[7];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = a3[8];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = (int *)type metadata accessor for CPTimelineEntry(0);
  v37 = v36[5];
  v38 = *(_QWORD *)&v34[v37];
  v39 = *(_QWORD *)&v33[v37];
  *(_QWORD *)&v33[v37] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v33[v36[6]] = v34[v36[6]];
  v33[v36[7]] = v34[v36[7]];
  v33[v36[8]] = v34[v36[8]];
  v33[v36[9]] = v34[v36[9]];
  v40 = a3[9];
  v41 = (uint64_t *)((char *)a1 + v40);
  v42 = (uint64_t *)((char *)a2 + v40);
  *v41 = *v42;
  v41[1] = v42[1];
  v41[2] = v42[2];
  v41[3] = v42[3];
  v43 = v41[4];
  v44 = v42[4];
  v41[4] = v44;
  swift_retain(v44);
  swift_release(v43);
  return a1;
}

char *sub_100006EE8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)&v21[v24[5]] = *(_QWORD *)&v22[v24[5]];
  v21[v24[6]] = v22[v24[6]];
  v21[v24[7]] = v22[v24[7]];
  v21[v24[8]] = v22[v24[8]];
  v21[v24[9]] = v22[v24[9]];
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *((_OWORD *)v26 + 1) = v28;
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  return a1;
}

char *sub_1000070D4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100007928((uint64_t)&a1[v8], &qword_1000907B0);
    v11 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_100006A4C(v17, v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = (int *)type metadata accessor for CPTimelineEntry(0);
  v28 = v27[5];
  v29 = *(_QWORD *)&v24[v28];
  *(_QWORD *)&v24[v28] = *(_QWORD *)&v25[v28];
  swift_bridgeObjectRelease(v29);
  v24[v27[6]] = v25[v27[6]];
  v24[v27[7]] = v25[v27[7]];
  v24[v27[8]] = v25[v27[8]];
  v24[v27[9]] = v25[v27[9]];
  v30 = a3[9];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  v34 = *((_QWORD *)v31 + 4);
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  swift_release(v34);
  return a1;
}

uint64_t sub_10000730C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100007318);
}

uint64_t sub_100007318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_9;
  }
  v15 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[9] + 32);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_100007420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000742C);
}

uint64_t sub_10000742C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_9;
  }
  result = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[9] + 32) = a2;
  return result;
}

uint64_t type metadata accessor for CPSmallContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100090820;
  if (!qword_100090820)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPSmallContentView);
  return result;
}

void sub_100007560(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      v6 = type metadata accessor for GeometryProxy(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for CPTimelineEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100070DC0;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10000764C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100007698(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000746B4, 1);
}

BOOL sub_1000076C4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_1000076D8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1000076E4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000076F0()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100007710(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

unint64_t sub_10000778C()
{
  unint64_t result;

  result = qword_100090958;
  if (!qword_100090958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100090958);
  }
  return result;
}

unint64_t sub_1000077D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090960;
  if (!qword_100090960)
  {
    v1 = sub_100006494(&qword_100090908);
    sub_100007854();
    sub_1000078D8(&qword_100090978, &qword_100090950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100090960);
  }
  return result;
}

unint64_t sub_100007854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090968;
  if (!qword_100090968)
  {
    v1 = sub_100006494(&qword_100090900);
    sub_1000078D8(&qword_100090970, &qword_1000908F8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100090968);
  }
  return result;
}

uint64_t sub_1000078D8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007918(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100007928(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100006454(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100007964(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100006454(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000079A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090980;
  if (!qword_100090980)
  {
    v1 = sub_100006494(&qword_100090910);
    sub_1000077D0();
    sub_100007A70(&qword_100090988, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100090980);
  }
  return result;
}

uint64_t sub_100007A2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100006454(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007A70(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007AB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007AF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007B38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CPTitleGradientView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 initializeWithTake for ContinuePlayingWidget(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100007B80(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100007BA0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100007BF0(a1, &qword_1000909A0, (uint64_t)&unk_10008DB88);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100007BF0(a1, &qword_1000909A8, (uint64_t)&unk_10008DC08);
}

void sub_100007BF0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100007C34()
{
  _QWORD v1[4];

  v1[0] = sub_100006494(&qword_100090878);
  v1[1] = &type metadata for Color;
  v1[2] = sub_1000078D8(&qword_100090888, &qword_100090878, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = &protocol witness table for Color;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

_QWORD *sub_100007CBC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100007D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100007DB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100007E3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100007ED8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100007F5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_100007FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100007FF4);
}

uint64_t sub_100007FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100008070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000807C);
}

uint64_t sub_10000807C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CPTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_100090A08;
  if (!qword_100090A08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPTimelineEntry);
  return result;
}

uint64_t sub_100008130(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_100070F70;
    v4[3] = &unk_100070F70;
    v4[4] = &unk_100070F70;
    v4[5] = &unk_100070F70;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_1000081B4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(_QWORD);
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - v5;
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  v14 = *(unsigned __int8 *)(v0 + *(int *)(v13 + 24));
  sub_100007AF4(v0, (uint64_t)&v24 - v11, v15);
  if (v14 != 1)
  {
    sub_10000A7C0((uint64_t)v12, type metadata accessor for CPTimelineEntry);
    sub_100007AF4(v0, (uint64_t)v9, type metadata accessor for CPTimelineEntry);
    goto LABEL_9;
  }
  v16 = v12[v1[7]];
  sub_10000A7C0((uint64_t)v12, type metadata accessor for CPTimelineEntry);
  sub_100007AF4(v0, (uint64_t)v9, type metadata accessor for CPTimelineEntry);
  if ((v16 & 1) != 0)
  {
LABEL_9:
    sub_10000A7C0((uint64_t)v9, type metadata accessor for CPTimelineEntry);
    sub_100007AF4(v0, (uint64_t)v6, type metadata accessor for CPTimelineEntry);
    goto LABEL_10;
  }
  v17 = v9[v1[8]];
  sub_10000A7C0((uint64_t)v9, type metadata accessor for CPTimelineEntry);
  sub_100007AF4(v0, (uint64_t)v6, type metadata accessor for CPTimelineEntry);
  if ((v17 & 1) != 0)
  {
LABEL_10:
    sub_10000A7C0((uint64_t)v6, type metadata accessor for CPTimelineEntry);
    sub_100007AF4(v0, (uint64_t)v3, type metadata accessor for CPTimelineEntry);
    goto LABEL_11;
  }
  v18 = v6[v1[9]];
  sub_10000A7C0((uint64_t)v6, type metadata accessor for CPTimelineEntry);
  sub_100007AF4(v0, (uint64_t)v3, type metadata accessor for CPTimelineEntry);
  if ((v18 & 1) == 0)
  {
LABEL_11:
    v21 = 0;
    goto LABEL_12;
  }
  v19 = *(_QWORD *)&v3[v1[5]];
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v23 = *(_QWORD *)&v3[v1[5]];
    else
      v23 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v3[v1[5]]);
    v20 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v21 = v20 > 0;
LABEL_12:
  sub_10000A7C0((uint64_t)v3, type metadata accessor for CPTimelineEntry);
  return v21;
}

uint64_t sub_1000083FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for GKFeatureFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_1000081B4())
  {
    v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for GKFeatureFlags.GameOverlayUI(_:), v5);
    v15 = GKFeatureFlags.isEnabled.getter(v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v15 & 1) != 0
      && (v16 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice"),
          v17 = objc_msgSend(v16, "userInterfaceIdiom"),
          v16,
          !v17))
    {
      return static ActivityFeedLockupVendor.makeRemoteDashboardURL()();
    }
    else
    {
      return URL.init(string:)(0xD000000000000019, 0x8000000100073790);
    }
  }
  v9 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for CPTimelineEntry(0) + 20));
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v18 = v9;
    else
      v18 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    result = _CocoaArrayWrapper.endIndex.getter(v18);
    if (result)
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    v19 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v9);
  if (!v10)
    goto LABEL_17;
LABEL_4:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(_QWORD *)(v9 + 32);
    swift_retain(v12);
LABEL_7:
    swift_bridgeObjectRelease(v9);
    sub_10004CC8C(0xD000000000000015, 0x80000001000737B0, a1, a2);
    swift_release(v12);
    v13 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
  }
  __break(1u);
  return result;
}

uint64_t sub_100008638()
{
  uint64_t v0;
  Swift::String v1;
  int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;

  _StringGuts.grow(_:)(91);
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  v1._object = (void *)0x80000001000737D0;
  String.append(_:)(v1);
  v2 = (int *)type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v0 + v2[6]))
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v2[6]))
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x80000001000737F0;
  v6._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  if (*(_BYTE *)(v0 + v2[7]))
    v7 = 1702195828;
  else
    v7 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v2[7]))
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  v10._object = (void *)0x8000000100073810;
  v10._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  if (*(_BYTE *)(v0 + v2[8]))
    v11 = 1702195828;
  else
    v11 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v2[8]))
    v12 = 0xE400000000000000;
  else
    v12 = 0xE500000000000000;
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 0xD000000000000015;
  v14._object = (void *)0x8000000100073830;
  String.append(_:)(v14);
  if (*(_BYTE *)(v0 + v2[9]))
    v15 = 1702195828;
  else
    v15 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v2[9]))
    v16 = 0xE400000000000000;
  else
    v16 = 0xE500000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t sub_1000087F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100008834(uint64_t a1, void (*a2)(char *), uint64_t a3, double a4)
{
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (**v38)(uint64_t, int);
  _QWORD v39[2];
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;

  v39[1] = a1;
  v7 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v7);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetFamily(0);
  v42 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v11;
  __chkstk_darwin(v13);
  v41 = (char *)v39 - v14;
  v15 = sub_100009F6C();
  if (qword_1000906F0 != -1)
    swift_once(&qword_1000906F0, sub_100029CA4);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000A720(v16, (uint64_t)qword_1000959C0);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    *(_DWORD *)v20 = 134218240;
    v43 = a4;
    v39[0] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    *(_WORD *)(v20 + 12) = 2048;
    v43 = v15;
    v9 = (char *)v39[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Live preview rate is %f, rolled a %f", (uint8_t *)v20, 0x16u);
    swift_slowDealloc(v20, -1, -1);
  }

  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  if (v15 <= a4)
  {
    if (v24)
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Showing live preview...", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = type metadata accessor for GameCenterStore();
    v31 = v41;
    TimelineProviderContext.family.getter();
    v32 = swift_allocObject(&unk_10008DD50, 32, 7);
    *(_QWORD *)(v32 + 16) = a2;
    *(_QWORD *)(v32 + 24) = a3;
    v33 = v42;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v12, v31, v10);
    v34 = *(unsigned __int8 *)(v33 + 80);
    v35 = (v34 + 24) & ~v34;
    v36 = (v40 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    v37 = swift_allocObject(&unk_10008DD78, v36 + 16, v34 | 7);
    *(_QWORD *)(v37 + 16) = v30;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v37 + v35, v12, v10);
    v38 = (uint64_t (**)(uint64_t, int))(v37 + v36);
    *v38 = sub_10000A8EC;
    v38[1] = (uint64_t (*)(uint64_t, int))v32;
    swift_retain(a3);
    swift_retain(v32);
    sub_100036A3C((void (*)(_QWORD, _QWORD))sub_10000A6D8);
    swift_release(v32);
    swift_release(v37);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v31, v10);
  }
  else
  {
    if (v24)
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Showing placeholder preview...", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    Date.init()(v26);
    if (qword_100090728 != -1)
      swift_once(&qword_100090728, sub_10004D2B0);
    v27 = qword_100095A28;
    *(_QWORD *)&v9[v7[5]] = qword_100095A28;
    v9[v7[6]] = 1;
    v9[v7[7]] = 0;
    v9[v7[8]] = 1;
    v9[v7[9]] = 1;
    swift_bridgeObjectRetain(v27);
    a2(v9);
    return sub_10000A7C0((uint64_t)v9, type metadata accessor for CPTimelineEntry);
  }
}

uint64_t sub_100008C88(uint64_t a1, int a2, void (*a3)(char *))
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  void (*v36)(char *);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a3;
  LODWORD(v35) = a2;
  v4 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  Date.init()(v17);
  v37 = v16;
  v38 = v11;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  v18 = (void *)sub_10006B320();
  v19 = v18;
  if (v18)

  v20 = (void *)sub_10006B320();
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, "hasAcknowledgedLatestGDPR");

  }
  else
  {
    v22 = 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v9, v13, v10);
  *(_QWORD *)&v9[v4[5]] = a1;
  v9[v4[6]] = v19 != 0;
  v9[v4[7]] = v35 & 1;
  v9[v4[8]] = 0;
  v9[v4[9]] = v22;
  v23 = qword_1000906F0;
  swift_bridgeObjectRetain(a1);
  if (v23 != -1)
    swift_once(&qword_1000906F0, sub_100029CA4);
  v24 = type metadata accessor for Logger(0);
  sub_10000A720(v24, (uint64_t)qword_1000959C0);
  v25 = (uint64_t)v6;
  v26 = sub_100007AF4((uint64_t)v9, (uint64_t)v6, type metadata accessor for CPTimelineEntry);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v40 = v30;
    *(_DWORD *)v29 = 136315138;
    v35 = v10;
    v31 = sub_100008638();
    v33 = v32;
    v39 = sub_1000155A4(v31, v32, &v40);
    v10 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    swift_bridgeObjectRelease(v33);
    sub_10000A7C0(v25, type metadata accessor for CPTimelineEntry);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Snapshot entry created: %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_10000A7C0((uint64_t)v6, type metadata accessor for CPTimelineEntry);
  }

  v36(v9);
  sub_10000A7C0((uint64_t)v9, type metadata accessor for CPTimelineEntry);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v10);
}

uint64_t sub_100008FDC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  void *v49;
  void *v50;
  unint64_t *v51;
  void *v52;
  void *v53;
  unsigned __int8 v54;
  BOOL v55;
  int *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t (*v79)(uint64_t, uint64_t, int *);
  int v80;
  uint64_t result;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  void (*v115)(char *, uint64_t);
  unint64_t v116;
  uint64_t (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  char *v123;
  void (*v124)(char *, uint64_t);
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void (*v130)(char *, uint64_t);
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  int v135;
  void (*v136)(char *, char *, uint64_t);
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  void (*v143)(char *);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  v145 = a6;
  v143 = a5;
  v151 = a4;
  v156 = a2;
  v146 = a1;
  v7 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v7);
  v140 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100006454(&qword_100090A68);
  v152 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v133 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v154 = (char *)&v132 - v11;
  __chkstk_darwin(v12);
  v153 = (char *)&v132 - v13;
  v14 = (int *)type metadata accessor for WidgetCreationAttempt(0);
  v150 = *((_QWORD *)v14 - 1);
  __chkstk_darwin(v14);
  v139 = (uint64_t)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v160 = (char *)&v132 - v17;
  v155 = type metadata accessor for WidgetFamily(0);
  v148 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v19 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006454(&qword_100090A70);
  __chkstk_darwin(v20);
  v132 = (uint64_t)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v134 = (uint64_t)&v132 - v23;
  __chkstk_darwin(v24);
  v149 = (char *)&v132 - v25;
  __chkstk_darwin(v26);
  v159 = (uint64_t)&v132 - v27;
  v158 = type metadata accessor for CPTimelineEntry(0);
  v28 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v147 = (unint64_t *)((char *)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v30);
  v32 = (char *)&v132 - v31;
  __chkstk_darwin(v33);
  v35 = (char *)&v132 - v34;
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v138 = (char *)&v132 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v137 = (char *)&v132 - v40;
  __chkstk_darwin(v41);
  v43 = (char *)&v132 - v42;
  __chkstk_darwin(v44);
  v46 = (char *)&v132 - v45;
  Date.init()(v47);
  v157 = v37;
  v48 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v141 = v46;
  v161 = v36;
  v48(v43, v46, v36);
  v49 = (void *)sub_10006B320();
  v50 = v49;
  if (v49)

  v51 = (unint64_t *)(a3 + 16);
  v52 = (void *)sub_10006B320();
  if (v52)
  {
    v53 = v52;
    v54 = objc_msgSend(v52, "hasAcknowledgedLatestGDPR");

  }
  else
  {
    v54 = 0;
  }
  v55 = v50 != 0;
  v136 = *(void (**)(char *, char *, uint64_t))(v157 + 32);
  v136(v35, v43, v161);
  v56 = (int *)v158;
  v57 = v146;
  *(_QWORD *)&v35[*(int *)(v158 + 20)] = v146;
  v35[v56[6]] = v55;
  v58 = v156 & 1;
  v35[v56[7]] = v156 & 1;
  v35[v56[8]] = 0;
  v35[v56[9]] = v54;
  sub_100007AF4((uint64_t)v35, (uint64_t)v32, type metadata accessor for CPTimelineEntry);
  swift_beginAccess(v51, &v164, 33, 0);
  v59 = *v51;
  swift_bridgeObjectRetain(v57);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
  *v51 = v59;
  v135 = v58;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v59 = sub_10000ED70(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
    *v51 = v59;
  }
  v61 = (uint64_t)v147;
  v63 = *(_QWORD *)(v59 + 16);
  v62 = *(_QWORD *)(v59 + 24);
  if (v63 >= v62 >> 1)
  {
    v59 = sub_10000ED70(v62 > 1, v63 + 1, 1, v59);
    *v51 = v59;
  }
  *(_QWORD *)(v59 + 16) = v63 + 1;
  sub_10000A6DC((uint64_t)v32, v59+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v63);
  swift_endAccess(&v164);
  if (qword_1000906F0 != -1)
    swift_once(&qword_1000906F0, sub_100029CA4);
  v147 = v51;
  v64 = type metadata accessor for Logger(0);
  v65 = sub_10000A720(v64, (uint64_t)qword_1000959C0);
  v66 = sub_100007AF4((uint64_t)v35, v61, type metadata accessor for CPTimelineEntry);
  v146 = v65;
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.default.getter();
  v69 = os_log_type_enabled(v67, v68);
  v142 = v35;
  if (v69)
  {
    v70 = (uint8_t *)swift_slowAlloc(12, -1);
    v71 = v61;
    v72 = swift_slowAlloc(32, -1);
    v164 = v72;
    *(_DWORD *)v70 = 136315138;
    v73 = sub_100008638();
    v75 = v74;
    v163 = sub_1000155A4(v73, v74, &v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
    swift_bridgeObjectRelease(v75);
    sub_10000A7C0(v71, type metadata accessor for CPTimelineEntry);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Timeline entry created: %s", v70, 0xCu);
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v70, -1, -1);
  }
  else
  {
    sub_10000A7C0(v61, type metadata accessor for CPTimelineEntry);
  }

  v76 = (uint64_t)v149;
  type metadata accessor for GameCenterStore();
  ((void (*)(void))TimelineProviderContext.family.getter)();
  v77 = v159;
  sub_10002B574(0x65756E69746E6F43, 0xEF676E6979616C50, (uint64_t)v19, v159);
  v78 = *(void (**)(char *, uint64_t))(v148 + 8);
  v78(v19, v155);
  v79 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v150 + 48);
  v80 = v79(v77, 1, v14);
  sub_10000A738(v77, v76);
  if (v80 == 1)
  {
    result = sub_10000A780(v76);
LABEL_22:
    v87 = 120;
    goto LABEL_23;
  }
  v82 = v134;
  sub_10000A738(v76, v134);
  result = v79(v82, 1, v14);
  if ((_DWORD)result == 1)
    goto LABEL_37;
  sub_10000A780(v76);
  v83 = *(_BYTE *)(v82 + v14[5]);
  result = sub_10000A7C0(v82, type metadata accessor for WidgetCreationAttempt);
  if ((v83 & 1) == 0)
    goto LABEL_22;
  v84 = v132;
  sub_10000A738(v159, v132);
  result = v79(v84, 1, v14);
  if ((_DWORD)result == 1)
  {
LABEL_38:
    __break(1u);
    return result;
  }
  v85 = v84;
  v86 = *(_QWORD *)(v84 + v14[6]);
  result = sub_10000A7C0(v85, type metadata accessor for WidgetCreationAttempt);
  if (v86 + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v87 = 2 * v86;
LABEL_23:
  if (v87 >= 7200)
    v88 = 7200;
  else
    v88 = v87;
  v89 = v137;
  v90 = Date.init()(result);
  if ((v156 & 1) != 0)
    v91 = v88;
  else
    v91 = 3600;
  v92 = TimelineProviderContext.family.getter(v90);
  v93 = WidgetFamily.rawValue.getter(v92);
  v78(v19, v155);
  v94 = (uint64_t)v160;
  v136(v160, v89, v161);
  *(_BYTE *)(v94 + v14[5]) = v135;
  v95 = v14[6];
  *(_QWORD *)(v94 + v95) = v91;
  v96 = (_QWORD *)(v94 + v14[7]);
  *v96 = 0x65756E69746E6F43;
  v96[1] = 0xEF676E6979616C50;
  *(_QWORD *)(v94 + v14[8]) = v93;
  v97 = v139;
  v98 = sub_100007AF4(v94, v139, type metadata accessor for WidgetCreationAttempt);
  v99 = Logger.logObject.getter(v98);
  v100 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v99, v100))
  {
    v101 = (uint8_t *)swift_slowAlloc(12, -1);
    v102 = swift_slowAlloc(32, -1);
    v164 = v102;
    *(_DWORD *)v101 = 136315138;
    v103 = sub_10002D248();
    v105 = v104;
    v163 = sub_1000155A4(v103, v104, &v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
    swift_bridgeObjectRelease(v105);
    sub_10000A7C0(v97, type metadata accessor for WidgetCreationAttempt);
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "Logging widget creation attempt: %s", v101, 0xCu);
    swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1, -1);
    swift_slowDealloc(v101, -1, -1);
  }
  else
  {
    sub_10000A7C0(v97, type metadata accessor for WidgetCreationAttempt);
  }

  v106 = v144;
  v107 = v152;
  v108 = v153;
  v109 = v140;
  v110 = v138;
  v111 = v147;
  v112 = (uint64_t)v160;
  sub_10002C220();
  swift_beginAccess(v111, &v164, 0, 0);
  v113 = *v111;
  v114 = (double)*(uint64_t *)(v112 + v95);
  swift_bridgeObjectRetain(v113);
  Date.init(timeIntervalSinceNow:)(v114);
  static TimelineReloadPolicy.after(_:)(v110);
  v115 = *(void (**)(char *, uint64_t))(v157 + 8);
  v115(v110, v161);
  v116 = sub_100009F24();
  Timeline.init(entries:policy:)(v113, v109, v158, v116);
  v117 = *(uint64_t (**)(char *, char *, uint64_t))(v107 + 16);
  v118 = v117(v154, v108, v106);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v119, v120))
  {
    v121 = (uint8_t *)swift_slowAlloc(12, -1);
    v122 = swift_slowAlloc(32, -1);
    v163 = v122;
    v123 = v154;
    *(_DWORD *)v121 = 136315138;
    v158 = (uint64_t)(v121 + 4);
    v124 = v115;
    v125 = v133;
    v117(v133, v123, v106);
    v126 = v125;
    v115 = v124;
    v127 = String.init<A>(describing:)(v126, v106);
    v129 = v128;
    v162 = sub_1000155A4(v127, v128, &v163);
    v108 = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
    swift_bridgeObjectRelease(v129);
    v130 = *(void (**)(char *, uint64_t))(v152 + 8);
    v130(v123, v106);
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "Timeline created: %s", v121, 0xCu);
    swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1, -1);
    swift_slowDealloc(v121, -1, -1);
  }
  else
  {
    v130 = *(void (**)(char *, uint64_t))(v107 + 8);
    v130(v154, v106);
  }

  v131 = v141;
  v143(v108);
  v130(v108, v106);
  sub_10000A7C0((uint64_t)v160, type metadata accessor for WidgetCreationAttempt);
  sub_10000A7C0((uint64_t)v142, type metadata accessor for CPTimelineEntry);
  v115(v131, v161);
  return sub_10000A780(v159);
}

uint64_t sub_100009C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;

  Date.init()(a1);
  if (qword_100090728 != -1)
    swift_once(&qword_100090728, sub_10004D2B0);
  v3 = qword_100095A28;
  v4 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)(a2 + v4[5]) = v3;
  *(_BYTE *)(a2 + v4[6]) = 1;
  *(_BYTE *)(a2 + v4[7]) = 0;
  *(_BYTE *)(a2 + v4[8]) = 1;
  *(_BYTE *)(a2 + v4[9]) = 1;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100009CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v9);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_10008DD28, v13 + 16, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14 + v12, v10, v6);
  v15 = (_QWORD *)(v14 + v13);
  *v15 = a2;
  v15[1] = a3;
  swift_retain(v14);
  swift_retain(a3);
  sub_1000370CC(0xD00000000000002FLL, 0x8000000100073850, (void (*)(double))sub_10000A874, v14);
  return swift_release_n(v14, 2);
}

uint64_t sub_100009DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100009E5C;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100009E5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100009EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000A9D8;
  return TimelineProvider.relevance()(a1, a2, a3);
}

ValueMetadata *type metadata accessor for CPProvider()
{
  return &type metadata for CPProvider;
}

unint64_t sub_100009F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090A50[0];
  if (!qword_100090A50[0])
  {
    v1 = type metadata accessor for CPTimelineEntry(255);
    result = swift_getWitnessTable(&unk_100070F88, v1);
    atomic_store(result, qword_100090A50);
  }
  return result;
}

double sub_100009F6C()
{
  double v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double v50;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F1D0(v13, 0.0, 1.0);
  v50 = v14;
  v15 = (void *)sub_10006B320();
  if (!v15)
    goto LABEL_13;
  v16 = v15;
  v44 = v10;
  v45 = v9;
  v17 = objc_msgSend(v15, "teamPlayerID");

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v46 = v1;
  v20 = v19;

  v47 = String.hashValue.getter(v18, v20);
  v21 = swift_bridgeObjectRelease(v20);
  static Calendar.current.getter(v21);
  v22 = sub_100006454(&qword_100090A78);
  v23 = type metadata accessor for Calendar.Component(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v2;
  v27 = (v25 + 32) & ~v25;
  v28 = swift_allocObject(v22, v27 + *(_QWORD *)(v24 + 72), v25 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_100070F40;
  v29 = v28 + v27;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v29, enum case for Calendar.Component.hour(_:), v23);
  v30 = sub_10001076C(v28);
  swift_setDeallocating(v28);
  swift_arrayDestroy(v29, 1, v23);
  v31 = swift_deallocClassInstance(v28, 32, 7);
  Date.init()(v31);
  Calendar.dateComponents(_:from:)(v30, v4);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v46);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v33 = DateComponents.hour.getter(v32);
  if ((v34 & 1) != 0)
    v35 = 0;
  else
    v35 = v33;
  if (__OFADD__(v47, v35))
  {
    __break(1u);
    goto LABEL_15;
  }
  srand48(v47 + v35);
  v36 = drand48() * 1.84467441e19 + 0.0;
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v36 <= -1.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v36 >= 1.84467441e19)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v0 = (double)((unint64_t)v36 % 0x64) / 99.0;
  v50 = v0;
  if (qword_1000906F0 != -1)
LABEL_18:
    swift_once(&qword_1000906F0, sub_100029CA4);
  v37 = type metadata accessor for Logger(0);
  sub_10000A720(v37, (uint64_t)qword_1000959C0);
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.default.getter();
  v40 = os_log_type_enabled(v38, v39);
  v41 = v44;
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v42 = 134217984;
    v48 = v0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Generated rand based on player id = %f", v42, 0xCu);
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v45);
LABEL_13:
  swift_beginAccess(&v50, &v48, 0, 0);
  return v50;
}

uint64_t sub_10000A370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t, int);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a2;
  v34 = a3;
  v4 = type metadata accessor for TimelineProviderContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v32 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v32);
  v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - v11;
  v13 = swift_allocObject(&unk_10008DCB0, 24, 7);
  *(_QWORD *)(v13 + 16) = &_swiftEmptyArrayStorage;
  v29 = v13;
  v30 = type metadata accessor for GameCenterStore();
  TimelineProviderContext.family.getter(v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v6 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_10008DCD8, v16 + 16, v14 | 7);
  *(_QWORD *)(v17 + 16) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v17 + v15, v7, v4);
  v18 = (_QWORD *)(v17 + v16);
  v19 = v34;
  *v18 = v33;
  v18[1] = v19;
  v20 = v31;
  v21 = v32;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v31, v12, v32);
  v22 = *(unsigned __int8 *)(v8 + 80);
  v23 = (v22 + 24) & ~v22;
  v24 = (v9 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_10008DD00, v24 + 16, v22 | 7);
  *(_QWORD *)(v25 + 16) = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v25 + v23, v20, v21);
  v26 = (uint64_t (**)(uint64_t, int))(v25 + v24);
  *v26 = sub_10000A66C;
  v26[1] = (uint64_t (*)(uint64_t, int))v17;
  v27 = v29;
  swift_retain(v29);
  swift_retain(v19);
  swift_retain(v17);
  sub_100036A3C((void (*)(_QWORD, _QWORD))sub_10000A6D8);
  swift_release(v17);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v21);
  return swift_release(v27);
}

uint64_t sub_10000A5B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000A5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10000A66C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100008FDC(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(void (**)(char *))v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_10000A6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CPTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A720(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000A738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100090A70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A780(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006454(&qword_100090A70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000A7C0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10000A874(double a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100008834(v1 + v4, *(void (**)(char *))v5, *(_QWORD *)(v5 + 8), a1);
}

uint64_t sub_10000A8C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000A8EC(uint64_t a1, int a2)
{
  uint64_t v2;

  return sub_100008C88(a1, a2, *(void (**)(char *))(v2 + 16));
}

uint64_t sub_10000A8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10000A970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_10002E068(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *v7, v7[1]);
}

void sub_10000A9DC()
{
  uint64_t v0;
  double v1;
  double v2;

  v1 = *(double *)(v0 + 16);
  v2 = v1 + drand48() * (*(double *)(v0 + 24) - v1);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 >= 1.84467441e19)
LABEL_7:
    __break(1u);
}

uint64_t sub_10000AA48()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for SeededRandomNumberGenerator()
{
  return objc_opt_self(_TtC9GCWidgets27SeededRandomNumberGenerator);
}

void sub_10000AA78()
{
  sub_10000A9DC();
}

uint64_t sub_10000AA98()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000015, 0x8000000100073900, 0);
  qword_1000959A0 = result;
  return result;
}

uint64_t sub_10000AAD0()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000017, 0x80000001000738E0, 0);
  qword_1000959A8 = result;
  return result;
}

uint64_t sub_10000AB08()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000012, 0x8000000100073940, 0);
  qword_1000959B0 = result;
  return result;
}

uint64_t sub_10000AB40()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD00000000000001BLL, 0x8000000100073920, 0);
  qword_1000959B8 = result;
  return result;
}

uint64_t sub_10000AB78()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for GCWUtility()
{
  return objc_opt_self(_TtC9GCWidgets10GCWUtility);
}

double sub_10000ABA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, _QWORD, uint64_t, __n128);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v18[1] = a1;
  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v18 - v9;
  v11 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v4 + 104);
  v11((char *)v18 - v9, enum case for WidgetFamily.systemExtraLarge(_:), v3, v8);
  v12 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v3, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v3, v12);
  v13 = v19;
  v14 = v20;
  v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v10, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  if (v14 != v13)
  {
    ((void (*)(char *, _QWORD, uint64_t))v11)(v10, enum case for WidgetFamily.systemLarge(_:), v3);
    dispatch thunk of RawRepresentable.rawValue.getter(&v20, v3, v12);
    dispatch thunk of RawRepresentable.rawValue.getter(&v19, v3, v12);
    v15(v10, v3);
  }
  v16 = ((uint64_t (*)(char *, uint64_t))v15)(v6, v3);
  GeometryProxy.size.getter(v16);
  return 16.0;
}

void sub_10000AD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  sub_10000AE4C(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10000AD84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006454(&qword_100090BC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000ADC4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000AE08(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_10000AE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  Class isa;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(char *, uint64_t);
  uint8_t *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  NSString v65;
  unsigned __int8 v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint8_t *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint8_t *v81;
  id v82;
  NSURL *v83;
  void *v84;
  void *v85;
  unsigned int v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint8_t *v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8_t *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  int v131;
  uint8_t *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v144;
  id v145;
  Class v146;
  id v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  id v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  id v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  dispatch_group_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  id v171[3];

  v167 = a7;
  v157 = a4;
  v158 = a6;
  v156 = a5;
  v163 = a1;
  v9 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v160 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v159 = (char *)&v154 - v16;
  __chkstk_darwin(v17);
  v161 = (char *)&v154 - v18;
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  v22 = (char *)&v154 - v21;
  __chkstk_darwin(v23);
  v168 = (char *)&v154 - v24;
  __chkstk_darwin(v25);
  v164 = (char *)&v154 - v26;
  __chkstk_darwin(v27);
  v165 = (char *)&v154 - v28;
  __chkstk_darwin(v29);
  v166 = (char *)&v154 - v30;
  v162 = (id)objc_opt_self(NSFileManager);
  v31 = objc_msgSend(v162, "defaultManager");
  v32 = 1;
  v33 = objc_msgSend(v31, "URLsForDirectory:inDomains:", 13, 1);

  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v12);
  if (*(_QWORD *)(v34 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, v34 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    v32 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v32, 1, v12);
  swift_bridgeObjectRelease(v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10000AD84((uint64_t)v11);
    dispatch_group_leave(v167);
    return;
  }
  v35 = v12;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v166, v11, v12);
  URL.appendingPathComponent(_:isDirectory:)(a2, a3, 1);
  v36 = v164;
  URL.appendingPathComponent(_:isDirectory:)(0x6D4965746F6D6572, 0xEB00000000656761, 1);
  v37 = v168;
  URL.appendingPathComponent(_:isDirectory:)(a2, a3, 0);
  v38 = v162;
  v39 = objc_msgSend(v162, "defaultManager");
  URL.path.getter(v39);
  v41 = v40;
  v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  LOBYTE(v41) = objc_msgSend(v39, "fileExistsAtPath:", v42);

  if ((v41 & 1) != 0)
  {
    v43 = Data.init(contentsOf:options:)(v37, 0);
    v45 = v44;
    v46 = objc_allocWithZone((Class)UIImage);
    sub_10000AE08(v43, (unint64_t)v45);
    v47 = v43;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v49 = (char *)objc_msgSend(v46, "initWithData:", isa);
    v162 = v45;
    v163 = v47;
    sub_10000ADC4(v47, (unint64_t)v45);

    if (qword_1000906F8 != -1)
      swift_once(&qword_1000906F8, sub_100029CC4);
    v50 = type metadata accessor for Logger(0);
    sub_10000A720(v50, (uint64_t)qword_1000959D8);
    v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v22, v37, v35);
    v52 = Logger.logObject.getter(v51);
    v53 = v35;
    v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = (void *)swift_slowAlloc(32, -1);
      v171[0] = v56;
      v161 = v49;
      *(_DWORD *)v55 = 136315138;
      v57 = URL.absoluteString.getter(v56);
      v59 = v58;
      v169 = sub_1000155A4(v57, v58, (uint64_t *)v171);
      v36 = v164;
      v49 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170);
      swift_bridgeObjectRelease(v59);
      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v22, v53);
      _os_log_impl((void *)&_mh_execute_header, v52, v54, "Fetching cached image from %s", v55, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      v61 = v55;
      v37 = v168;
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v22, v53);
    }

    if (v49)
    {
      v140 = v157;
      swift_beginAccess(v157 + 16, v171, 33, 0);
      v141 = v49;
      v142 = v158;
      swift_bridgeObjectRetain(v158);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v140 + 16));
      v169 = *(_QWORD *)(v140 + 16);
      *(_QWORD *)(v140 + 16) = 0x8000000000000000;
      sub_10004E6D0((uint64_t)v141, v156, v142, isUniquelyReferenced_nonNull_native);
      v144 = *(_QWORD *)(v140 + 16);
      *(_QWORD *)(v140 + 16) = v169;
      swift_bridgeObjectRelease(v142);
      swift_bridgeObjectRelease(v144);
      swift_endAccess(v171);

    }
    dispatch_group_leave(v167);

    sub_10000ADC4(v163, (unint64_t)v162);
    v60(v37, v53);
    v60(v36, v53);
    v60(v165, v53);
    v138 = v166;
    v139 = v53;
    goto LABEL_37;
  }
  v155 = 0;
  v62 = objc_msgSend(v38, "defaultManager");
  URL.path.getter(v62);
  v64 = v63;
  v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v64);
  v66 = objc_msgSend(v62, "fileExistsAtPath:", v65);

  v67 = v161;
  if ((v66 & 1) != 0)
    goto LABEL_20;
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v68 = type metadata accessor for Logger(0);
  v69 = sub_10000A720(v68, (uint64_t)qword_1000959D8);
  v70 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v67, v36, v35);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v73 = v35;
    v74 = (uint8_t *)swift_slowAlloc(12, -1);
    v75 = (void *)swift_slowAlloc(32, -1);
    v154 = v69;
    v76 = v75;
    v171[0] = v75;
    *(_DWORD *)v74 = 136315138;
    v77 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v78 = dispatch thunk of CustomStringConvertible.description.getter(v73, v77);
    v80 = v79;
    v169 = sub_1000155A4(v78, v79, (uint64_t *)v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170);
    swift_bridgeObjectRelease(v80);
    v161 = *(char **)(v13 + 8);
    ((void (*)(char *, uint64_t))v161)(v67, v73);
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Creating directory for cached images at %s", v74, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    v81 = v74;
    v35 = v73;
    v36 = v164;
    swift_slowDealloc(v81, -1, -1);
  }
  else
  {
    v161 = *(char **)(v13 + 8);
    ((void (*)(char *, uint64_t))v161)(v67, v35);
  }

  v82 = objc_msgSend(v162, "defaultManager");
  URL._bridgeToObjectiveC()(v83);
  v85 = v84;
  v171[0] = 0;
  v86 = objc_msgSend(v82, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v84, 1, 0, v171);

  v87 = v171[0];
  if (v86)
  {
    v88 = v171[0];
LABEL_20:
    v89 = v159;
    if (qword_1000906F8 != -1)
      swift_once(&qword_1000906F8, sub_100029CC4);
    v90 = type metadata accessor for Logger(0);
    v91 = (void *)sub_10000A720(v90, (uint64_t)qword_1000959D8);
    v161 = *(char **)(v13 + 16);
    v92 = ((uint64_t (*)(char *, uint64_t, uint64_t))v161)(v89, v163, v35);
    v162 = v91;
    v93 = Logger.logObject.getter(v92);
    v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = v35;
      v96 = (uint8_t *)swift_slowAlloc(12, -1);
      v97 = (void *)swift_slowAlloc(32, -1);
      v171[0] = v97;
      *(_DWORD *)v96 = 136315138;
      v98 = URL.absoluteString.getter(v97);
      v100 = v99;
      v169 = sub_1000155A4(v98, v99, (uint64_t *)v171);
      v36 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170);
      swift_bridgeObjectRelease(v100);
      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v89, v95);
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "attempting download of image from %s", v96, 0xCu);
      swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      v101 = v96;
      v35 = v95;
      swift_slowDealloc(v101, -1, -1);
    }
    else
    {
      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v89, v35);
    }

    v102 = v168;
    v103 = v160;
    v104 = v155;
    v105 = Data.init(contentsOf:options:)(v163, 0);
    if (v104)
    {
      ((void (*)(char *, uint64_t, uint64_t))v161)(v103, v163, v35);
      swift_errorRetain(v104);
      v109 = swift_errorRetain(v104);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v110, v111))
      {
        v112 = swift_slowAlloc(22, -1);
        v113 = v35;
        v114 = (void *)swift_slowAlloc(64, -1);
        v171[0] = v114;
        *(_DWORD *)v112 = 136315394;
        v115 = URL.absoluteString.getter(v114);
        v117 = v116;
        v169 = sub_1000155A4(v115, v116, (uint64_t *)v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170);
        swift_bridgeObjectRelease(v117);
        v60(v103, v113);
        *(_WORD *)(v112 + 12) = 2080;
        v169 = v104;
        swift_errorRetain(v104);
        v118 = sub_100006454(&qword_100090BD0);
        v119 = String.init<A>(describing:)(&v169, v118);
        v121 = v120;
        v169 = sub_1000155A4(v119, v120, (uint64_t *)v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170);
        swift_bridgeObjectRelease(v121);
        swift_errorRelease(v104);
        swift_errorRelease(v104);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "unable to download of image from %s, error: %s", (uint8_t *)v112, 0x16u);
        swift_arrayDestroy(v114, 2, (char *)&type metadata for Any + 8);
        v122 = v114;
        v35 = v113;
        v36 = v164;
        swift_slowDealloc(v122, -1, -1);
        v123 = v112;
        v102 = v168;
        swift_slowDealloc(v123, -1, -1);
      }
      else
      {
        v60(v103, v35);
        swift_errorRelease(v104);
        swift_errorRelease(v104);
      }

      dispatch_group_leave(v167);
      swift_errorRelease(v104);
    }
    else
    {
      v107 = v105;
      v108 = v106;
      Data.write(to:options:)(v102, 0, v105, v106);
      v145 = objc_allocWithZone((Class)UIImage);
      sub_10000AE08(v107, v108);
      v146 = Data._bridgeToObjectiveC()().super.isa;
      v147 = objc_msgSend(v145, "initWithData:", v146);
      sub_10000ADC4(v107, v108);

      if (v147)
      {
        v148 = v157;
        swift_beginAccess(v157 + 16, v171, 33, 0);
        v149 = v147;
        v150 = v158;
        swift_bridgeObjectRetain(v158);
        v151 = v149;
        v152 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v148 + 16));
        v169 = *(_QWORD *)(v148 + 16);
        *(_QWORD *)(v148 + 16) = 0x8000000000000000;
        sub_10004E6D0((uint64_t)v151, v156, v150, v152);
        v153 = *(_QWORD *)(v148 + 16);
        *(_QWORD *)(v148 + 16) = v169;
        swift_bridgeObjectRelease(v150);
        swift_bridgeObjectRelease(v153);
        swift_endAccess(v171);

      }
      dispatch_group_leave(v167);

      sub_10000ADC4(v107, v108);
      v102 = v168;
    }
    v124 = v102;
    v125 = v35;
    goto LABEL_36;
  }
  v126 = v171[0];
  v127 = _convertNSErrorToError(_:)(v87);

  swift_willThrow(v128);
  swift_errorRetain(v127);
  v129 = swift_errorRetain(v127);
  v130 = Logger.logObject.getter(v129);
  v131 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v130, (os_log_type_t)v131))
  {
    v132 = (uint8_t *)swift_slowAlloc(12, -1);
    v133 = (void *)swift_slowAlloc(32, -1);
    v171[0] = v133;
    *(_DWORD *)v132 = 136315138;
    v169 = v127;
    swift_errorRetain(v127);
    v134 = sub_100006454(&qword_100090BD0);
    v135 = String.init<A>(describing:)(&v169, v134);
    v137 = v136;
    v169 = sub_1000155A4(v135, v136, (uint64_t *)v171);
    v36 = v164;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170);
    swift_bridgeObjectRelease(v137);
    swift_errorRelease(v127);
    swift_errorRelease(v127);
    _os_log_impl((void *)&_mh_execute_header, v130, (os_log_type_t)v131, "Unable to create remoteImageDirectory directory %s.", v132, 0xCu);
    swift_arrayDestroy(v133, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v133, -1, -1);
    swift_slowDealloc(v132, -1, -1);
  }
  else
  {
    swift_errorRelease(v127);
    swift_errorRelease(v127);
  }

  dispatch_group_leave(v167);
  swift_errorRelease(v127);
  v124 = v168;
  v125 = v35;
  v60 = (void (*)(char *, uint64_t))v161;
LABEL_36:
  v60(v124, v125);
  v60(v36, v35);
  v60(v165, v35);
  v138 = v166;
  v139 = v35;
LABEL_37:
  v60(v138, v139);
}

_QWORD *sub_10000BFC4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10000C078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 36)));
}

uint64_t sub_10000C0BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10000C144(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v7 = a3[9];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_10000C1E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10000C264(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[9];
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_10000C2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000C2FC);
}

uint64_t sub_10000C2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10000C378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000C384);
}

uint64_t sub_10000C384(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AFTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_100090C38;
  if (!qword_100090C38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFTimelineEntry);
  return result;
}

uint64_t sub_10000C438(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000710D0;
    v4[2] = &unk_1000710D0;
    v4[3] = &unk_1000710D0;
    v4[4] = &unk_1000710D0;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10000C4BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = GKPlayerActivityItemInternal.id.getter();
  v6 = v5;
  swift_bridgeObjectRetain(v3);
  v7 = sub_100006454(&qword_100090C80);
  v8 = sub_10000C6A8();
  v9 = sub_10000778C();
  v10 = Sequence<>.joined(separator:)(46, 0xE100000000000000, v7, v8, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v6);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v6);
  result = swift_bridgeObjectRelease(v12);
  *a1 = v4;
  a1[1] = v6;
  return result;
}

int *sub_10000C594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  int *result;
  uint64_t v13;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v6);
  v7 = (void *)sub_10006B320();
  v8 = v7;
  if (v7)

  v9 = (void *)sub_10006B320();
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "hasAcknowledgedLatestGDPR");

  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  result = (int *)type metadata accessor for AFTimelineEntry(0);
  *(_BYTE *)(a1 + result[5]) = v8 != 0;
  *(_BYTE *)(a1 + result[6]) = 0;
  *(_BYTE *)(a1 + result[7]) = 1;
  *(_BYTE *)(a1 + result[8]) = v11;
  *(_QWORD *)(a1 + result[9]) = _swiftEmptyArrayStorage;
  return result;
}

void *sub_10000C69C()
{
  return &protocol witness table for String;
}

unint64_t sub_10000C6A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090C88;
  if (!qword_100090C88)
  {
    v1 = sub_100006494(&qword_100090C80);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v1);
    atomic_store(result, (unint64_t *)&qword_100090C88);
  }
  return result;
}

uint64_t destroy for AFActivityItemEntry(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s9GCWidgets19AFActivityItemEntryVwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AFActivityItemEntry(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AFActivityItemEntry(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AFActivityItemEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AFActivityItemEntry(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AFActivityItemEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AFActivityItemEntry()
{
  return &type metadata for AFActivityItemEntry;
}

ValueMetadata *type metadata accessor for AFTimelineProvider()
{
  return &type metadata for AFTimelineProvider;
}

uint64_t sub_10000C8BC()
{
  return sub_100007A70(qword_100090C90, type metadata accessor for AFTimelineEntry, (uint64_t)&unk_1000710E8);
}

uint64_t sub_10000C8E8(void **a1, uint64_t a2, _QWORD **a3)
{
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  id v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;

  v3 = *a1;
  v67 = &_swiftEmptySetSingleton;
  v4 = objc_msgSend(v3, "relationships");
  v5 = objc_msgSend(v4, "players");

  v63 = v3;
  if (!v5)
    goto LABEL_28;
  v6 = sub_100011E4C(0, &qword_100090CD8, GKPlayerActivityRelationshipPlayer_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v22 = v7;
    else
      v22 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    result = _CocoaArrayWrapper.endIndex.getter(v22);
    v8 = result;
    if (result)
      goto LABEL_4;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v7);
    if (v8)
    {
LABEL_4:
      if (v8 < 1)
      {
        __break(1u);
        goto LABEL_61;
      }
      v10 = 0;
      v11 = (char *)_swiftEmptyArrayStorage;
      do
      {
        if ((v7 & 0xC000000000000001) != 0)
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
        else
          v12 = *(id *)(v7 + 8 * v10 + 32);
        v13 = v12;
        v14 = objc_msgSend(v12, "identifier");
        if (v14)
        {
          v15 = v14;
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v18 = v17;

          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
            v11 = sub_10000EEA4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
          v20 = *((_QWORD *)v11 + 2);
          v19 = *((_QWORD *)v11 + 3);
          if (v20 >= v19 >> 1)
            v11 = sub_10000EEA4((char *)(v19 > 1), v20 + 1, 1, v11);
          *((_QWORD *)v11 + 2) = v20 + 1;
          v21 = &v11[16 * v20];
          *((_QWORD *)v21 + 4) = v16;
          *((_QWORD *)v21 + 5) = v18;
        }
        else
        {

        }
        ++v10;
      }
      while (v8 != v10);
      goto LABEL_22;
    }
  }
  v11 = (char *)_swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease_n(v7, 2);
  v66 = &_swiftEmptySetSingleton;
  v23 = *((_QWORD *)v11 + 2);
  if (v23)
  {
    swift_bridgeObjectRetain(v11);
    v24 = (uint64_t *)(v11 + 40);
    do
    {
      v25 = *(v24 - 1);
      v26 = *v24;
      swift_bridgeObjectRetain_n(*v24, 2);
      sub_10000F278(&v64, v25, v26);
      v27 = v65;
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v27);
      v24 += 2;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease_n(v11, 2);
    v28 = v66;
  }
  else
  {
    swift_bridgeObjectRelease(v11);
    v28 = &_swiftEmptySetSingleton;
  }
  sub_10000CE8C((uint64_t)v28);
  v3 = v63;
LABEL_28:
  v29 = objc_msgSend(v3, "relationships");
  v30 = objc_msgSend(v29, "games");

  if (v30)
  {
    v31 = sub_100011E4C(0, &qword_100090CD0, GKPlayerActivityRelationshipGame_ptr);
    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

    if ((unint64_t)v32 >> 62)
    {
      if (v32 < 0)
        v46 = v32;
      else
        v46 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v32);
      result = _CocoaArrayWrapper.endIndex.getter(v46);
      v33 = result;
      if (result)
      {
LABEL_31:
        if (v33 >= 1)
        {
          v34 = 0;
          v35 = (char *)_swiftEmptyArrayStorage;
          do
          {
            if ((v32 & 0xC000000000000001) != 0)
              v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v32);
            else
              v36 = *(id *)(v32 + 8 * v34 + 32);
            v37 = v36;
            v38 = objc_msgSend(v36, "identifier");
            if (v38)
            {
              v39 = v38;
              v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
              v42 = v41;

              if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
                v35 = sub_10000EEA4(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
              v44 = *((_QWORD *)v35 + 2);
              v43 = *((_QWORD *)v35 + 3);
              if (v44 >= v43 >> 1)
                v35 = sub_10000EEA4((char *)(v43 > 1), v44 + 1, 1, v35);
              *((_QWORD *)v35 + 2) = v44 + 1;
              v45 = &v35[16 * v44];
              *((_QWORD *)v45 + 4) = v40;
              *((_QWORD *)v45 + 5) = v42;
            }
            else
            {

            }
            ++v34;
          }
          while (v33 != v34);
          goto LABEL_49;
        }
LABEL_61:
        __break(1u);
        return result;
      }
    }
    else
    {
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(v32);
      if (v33)
        goto LABEL_31;
    }
    v35 = (char *)_swiftEmptyArrayStorage;
LABEL_49:
    swift_bridgeObjectRelease_n(v32, 2);
    v66 = &_swiftEmptySetSingleton;
    v47 = *((_QWORD *)v35 + 2);
    if (v47)
    {
      swift_bridgeObjectRetain(v35);
      v48 = (uint64_t *)(v35 + 40);
      do
      {
        v49 = *(v48 - 1);
        v50 = *v48;
        swift_bridgeObjectRetain_n(*v48, 2);
        sub_10000F278(&v64, v49, v50);
        v51 = v65;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v51);
        v48 += 2;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease_n(v35, 2);
      v52 = v66;
    }
    else
    {
      swift_bridgeObjectRelease(v35);
      v52 = &_swiftEmptySetSingleton;
    }
    sub_10000CE8C((uint64_t)v52);
    v3 = v63;
  }
  v53 = swift_bridgeObjectRetain(a2);
  v54 = sub_10000F424(v53, (uint64_t *)&v67);
  swift_bridgeObjectRelease(a2);
  v55 = *a3;
  v56 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
  *a3 = v55;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v55 = sub_10000ED84(0, v55[2] + 1, 1, v55);
    *a3 = v55;
  }
  v59 = v55[2];
  v58 = v55[3];
  if (v59 >= v58 >> 1)
  {
    v55 = sub_10000ED84((_QWORD *)(v58 > 1), v59 + 1, 1, v55);
    *a3 = v55;
  }
  v55[2] = v59 + 1;
  v60 = &v55[3 * v59];
  v60[4] = v56;
  v60[5] = v54;
  *((_BYTE *)v60 + 48) = 0;
  return swift_bridgeObjectRelease(v67);
}

uint64_t sub_10000CE8C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16[2];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release(v1);
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release(v1);
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release(v1);
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release(v1);
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_10000F278(v16, v11, v12);
    result = swift_bridgeObjectRelease(v16[1]);
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release(v1);
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10000CFF8(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  _QWORD *v27;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)aBlock - v11;
  v13 = type metadata accessor for GameCenterStore();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v9, (uint64_t)v12, v6);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(&unk_10008DF38, v16 + v8, v15 | 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, v12, v6);
  swift_retain_n(a3, 2);
  v18 = sub_10006B320();
  if (v18)
  {
    v19 = (void *)v18;
    v20 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForPlayer:", v18);
    v21 = objc_msgSend(v20, "utilityServicePrivate");

    v22 = (_QWORD *)swift_allocObject(&unk_10008DF60, 40, 7);
    v22[2] = v13;
    v22[3] = sub_100011BDC;
    v22[4] = v17;
    aBlock[4] = sub_100011C40;
    v27 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002DFE0;
    aBlock[3] = &unk_10008DF78;
    v23 = _Block_copy(aBlock);
    v24 = v27;
    swift_retain(v17);
    swift_release(v24);
    objc_msgSend(v21, "getWidgetStoreBagValueWithHandler:", v23);
    _Block_release(v23);
    swift_release(a3);
    swift_release(v17);

    swift_unknownObjectRelease(v21);
  }
  else
  {
    sub_10001148C(a2, a3, (uint64_t)v9, 1.0);
    swift_release(a3);
    swift_release(v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10000D24C(int64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  unsigned __int8 v73;
  BOOL v74;
  _QWORD *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  unsigned __int8 v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *);
  id v100;
  uint64_t v101;

  v94 = a2;
  v95 = a6;
  v98 = a5;
  v99 = a4;
  v8 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v8 - 8);
  v97 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v92 - v12;
  __chkstk_darwin(v14);
  v93 = (char *)&v92 - v15;
  v16 = (int *)type metadata accessor for AFTimelineEntry(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v92 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v92 - v23;
  v25 = type metadata accessor for WidgetFamily(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v92 - v31;
  if (a3 || !a1)
  {
    Date.init()(v29);
    v38 = (void *)sub_10006B320();
    v39 = v38;
    if (v38)

    v40 = (void *)sub_10006B320();
    if (v40)
    {
      v41 = v40;
      v42 = objc_msgSend(v40, "hasAcknowledgedLatestGDPR");

    }
    else
    {
      v42 = 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v18, v10, v97);
    v18[v16[5]] = v39 != 0;
    v43 = v16[6];
    v18[v43] = 0;
    v18[v16[7]] = 1;
    v18[v16[8]] = v42;
    *(_QWORD *)&v18[v16[9]] = _swiftEmptyArrayStorage;
    if (!a3)
      goto LABEL_27;
    v101 = a3;
    swift_errorRetain(a3);
    v44 = sub_100006454(&qword_100090BD0);
    v45 = sub_100011E4C(0, &qword_100090CF8, NSError_ptr);
    if ((swift_dynamicCast(&v100, &v101, v44, v45, 6) & 1) == 0)
      goto LABEL_27;
    v46 = v100;
    v47 = objc_msgSend(v100, "domain");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

    if (v48 == 0xD000000000000026 && v50 == 0x8000000100073A90)
    {
      swift_bridgeObjectRelease(0x8000000100073A90);
    }
    else
    {
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, 0xD000000000000026, 0x8000000100073A90, 0);
      swift_bridgeObjectRelease(v50);
      if ((v51 & 1) == 0)
      {

LABEL_26:
        v18[v43] = 1;
LABEL_27:
        v99(v18);
        v53 = (uint64_t)v18;
        return sub_10001104C(v53);
      }
    }
    v52 = objc_msgSend(v46, "code");

    if (v52 == (id)404)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!((unint64_t)a1 >> 62))
  {
    if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
      goto LABEL_5;
    goto LABEL_51;
  }
  if (a1 >= 0)
    v77 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v77 = a1;
  v78 = v29;
  v79 = v30;
  swift_bridgeObjectRetain(a1);
  v80 = _CocoaArrayWrapper.endIndex.getter(v77);
  swift_bridgeObjectRelease(a1);
  v30 = v79;
  v29 = v78;
  if (v80 < 1)
  {
LABEL_51:
    if (qword_100090708 != -1)
      swift_once(&qword_100090708, sub_100029CF8);
    v81 = type metadata accessor for Logger(0);
    v82 = sub_10000A720(v81, (uint64_t)qword_100095A08);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "getTimeline, showing empty state", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }

    Date.init()(v86);
    v87 = (void *)sub_10006B320();
    v88 = v87;
    if (v87)

    v89 = (void *)sub_10006B320();
    if (v89)
    {
      v90 = v89;
      v91 = objc_msgSend(v89, "hasAcknowledgedLatestGDPR");

    }
    else
    {
      v91 = 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v21, v13, v97);
    v21[v16[5]] = v88 != 0;
    v21[v16[6]] = 0;
    v21[v16[7]] = 0;
    v21[v16[8]] = v91;
    *(_QWORD *)&v21[v16[9]] = _swiftEmptyArrayStorage;
    v99(v21);
    v53 = (uint64_t)v21;
    return sub_10001104C(v53);
  }
LABEL_5:
  v33 = v29;
  v34 = v30;
  TimelineProviderContext.family.getter(v29);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v27, v32, v33);
  v95 = v34;
  v35 = v33;
  v36 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v27, v33);
  if (v36 == enum case for WidgetFamily.systemSmall(_:))
  {
    v37 = 1;
    goto LABEL_33;
  }
  if (v36 == enum case for WidgetFamily.systemMedium(_:))
  {
    v37 = 2;
    goto LABEL_33;
  }
  if (v36 == enum case for WidgetFamily.systemLarge(_:))
    goto LABEL_32;
  if (v36 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v37 = 8;
    goto LABEL_33;
  }
  v37 = 1;
  if (v36 != enum case for WidgetFamily.accessoryCircular(_:)
    && v36 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v36 != enum case for WidgetFamily.accessoryInline(_:))
  {
    (*(void (**)(char *, uint64_t))(v95 + 8))(v27, v35);
LABEL_32:
    v37 = 4;
  }
LABEL_33:
  swift_bridgeObjectRetain(a1);
  v54 = sub_100011888(v37, a1, &qword_100090CB8, GKPlayerActivityItemInternal_ptr);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  swift_bridgeObjectRelease(a1);
  if ((v60 & 1) != 0)
  {
    v62 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v63 = swift_unknownObjectRetain_n(v54, 2);
    v64 = (_QWORD *)swift_dynamicCastClass(v63, v62);
    if (!v64)
    {
      swift_unknownObjectRelease(v54);
      v64 = _swiftEmptyArrayStorage;
    }
    v65 = v64[2];
    v66 = swift_release(v64);
    if (__OFSUB__(v60 >> 1, v58))
    {
      __break(1u);
    }
    else
    {
      v66 = v54;
      if (v65 == (v60 >> 1) - v58)
      {
        v61 = (_QWORD *)swift_dynamicCastClass(v54, v62);
        if (!v61)
        {
          swift_unknownObjectRelease(v54);
          v61 = _swiftEmptyArrayStorage;
        }
        goto LABEL_41;
      }
    }
    swift_unknownObjectRelease(v66);
  }
  v61 = sub_10001045C(v54, v56, v58, v60);
LABEL_41:
  v67 = swift_unknownObjectRelease(v54);
  v68 = v93;
  Date.init()(v67);
  v69 = (void *)sub_10006B320();
  v70 = v69;
  if (v69)

  v71 = (void *)sub_10006B320();
  if (v71)
  {
    v72 = v71;
    v73 = objc_msgSend(v71, "hasAcknowledgedLatestGDPR");

  }
  else
  {
    v73 = 0;
  }
  v74 = v70 != 0;
  v75 = sub_100010BB8((uint64_t)v61, v94, (uint64_t)v32);
  swift_release(v61);
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v24, v68, v97);
  v24[v16[5]] = v74;
  v24[v16[6]] = 0;
  v24[v16[7]] = 0;
  v24[v16[8]] = v73;
  *(_QWORD *)&v24[v16[9]] = v75;
  v99(v24);
  sub_10001104C((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v32, v35);
}

uint64_t sub_10000D9E4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(unint64_t, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t);
  char *v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  Swift::Int v70;
  Swift::Int v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char *v81;
  unsigned __int8 v82;
  BOOL v83;
  _QWORD *v84;
  int *v85;
  unint64_t *v86;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  unsigned __int8 v93;
  BOOL v94;
  _QWORD *v95;
  int *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  char *v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  void (*v125)(char *);
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *);
  uint64_t v156;
  void (*v157)(_QWORD);
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char v174[24];
  uint64_t v175;
  char v176[8];

  v148 = a7;
  v154 = a5;
  v155 = a4;
  v163 = a2;
  v9 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v9);
  v151 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100006454(&qword_100090CA8);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v171 = (char *)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v145 - v13;
  v15 = type metadata accessor for Date(0);
  v168 = *(_QWORD *)(v15 - 8);
  v169 = v15;
  __chkstk_darwin(v15);
  v17 = (uint64_t)&v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v150 = (char *)&v145 - v19;
  __chkstk_darwin(v20);
  v173 = (char *)&v145 - v21;
  __chkstk_darwin(v22);
  v24 = (uint64_t)&v145 - v23;
  v167 = type metadata accessor for AFTimelineEntry(0);
  v164 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v172 = (uint64_t)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v145 - v27;
  __chkstk_darwin(v29);
  v165 = (uint64_t)&v145 - v30;
  __chkstk_darwin(v31);
  v33 = (char *)&v145 - v32;
  v34 = type metadata accessor for WidgetFamily(0);
  v149 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v36 = (uint64_t)&v145 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (unint64_t)&v145 - v38;
  __chkstk_darwin(v40);
  v166 = (uint64_t)&v145 - v42;
  if (a3 || !a1)
  {
    v51 = sub_100006454(&qword_100090CB0);
    v52 = *(unsigned __int8 *)(v164 + 80);
    v53 = (v52 + 32) & ~v52;
    v54 = v14;
    v55 = swift_allocObject(v51, v53 + *(_QWORD *)(v164 + 72), v52 | 7);
    *(_OWORD *)(v55 + 16) = xmmword_100070F40;
    sub_10000C594(v55 + v53);
    v56 = v150;
    Date.init(timeIntervalSinceNow:)(300.0);
    v57 = v151;
    static TimelineReloadPolicy.after(_:)(v56);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v56, v169);
    v58 = sub_100007A70(qword_100090C90, type metadata accessor for AFTimelineEntry, (uint64_t)&unk_1000710E8);
    Timeline.init(entries:policy:)(v55, v57, v167, v58);
    v155(v54);
    v59 = *(uint64_t (**)(char *, uint64_t))(v152 + 8);
    v60 = v54;
    return v59(v60, v153);
  }
  v170 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_122;
  v43 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v43 < 1)
  {
LABEL_126:
    if (qword_100090708 != -1)
      goto LABEL_144;
    goto LABEL_127;
  }
LABEL_5:
  v161 = v43;
  v146 = v14;
  v44 = v166;
  v45 = v41;
  TimelineProviderContext.family.getter(v41);
  v46 = v149;
  v14 = *(char **)(v149 + 16);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v39, v44, v45);
  v47 = *(uint64_t (**)(unint64_t, uint64_t))(v46 + 88);
  v147 = v45;
  v48 = v47(v39, v45);
  v17 = enum case for WidgetFamily.systemSmall(_:);
  if (v48 == enum case for WidgetFamily.systemSmall(_:))
  {
    v49 = 1;
    v50 = v161;
    goto LABEL_14;
  }
  v50 = v161;
  if (v48 == enum case for WidgetFamily.systemMedium(_:))
  {
    v49 = 2;
    goto LABEL_14;
  }
  if (v48 == enum case for WidgetFamily.systemLarge(_:))
    goto LABEL_11;
  if (v48 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v49 = 8;
  }
  else if (v48 == enum case for WidgetFamily.accessoryCircular(_:)
         || v48 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    v49 = 1;
  }
  else
  {
    v49 = 1;
    if (v48 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(unint64_t, unint64_t))(v149 + 8))(v39, v147);
      v50 = v161;
LABEL_11:
      v49 = 4;
    }
  }
LABEL_14:
  v61 = ceilf((float)v50 / (float)v49);
  if ((~LODWORD(v61) & 0x7F800000) == 0)
  {
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  if (v61 <= -9.2234e18)
    goto LABEL_137;
  if (v61 >= 9.2234e18)
    goto LABEL_138;
  v159 = v49;
  v162 = (unint64_t *)(v148 + 16);
  v62 = (uint64_t)v61;
  v39 = v147;
  ((void (*)(uint64_t, uint64_t, unint64_t))v14)(v36, v166, v147);
  v41 = v47(v36, v39);
  v63 = v161;
  v145 = v62;
  if ((_DWORD)v41 == (_DWORD)v17)
    goto LABEL_18;
  if ((_DWORD)v41 == enum case for WidgetFamily.systemMedium(_:))
  {
    v160 = 1200;
    if (!v62)
      goto LABEL_77;
    goto LABEL_19;
  }
  if ((_DWORD)v41 == enum case for WidgetFamily.systemLarge(_:))
    goto LABEL_82;
  if ((_DWORD)v41 != enum case for WidgetFamily.systemExtraLarge(_:))
  {
    if ((_DWORD)v41 == enum case for WidgetFamily.accessoryCircular(_:)
      || (_DWORD)v41 == enum case for WidgetFamily.accessoryRectangular(_:)
      || (_DWORD)v41 == enum case for WidgetFamily.accessoryInline(_:))
    {
LABEL_18:
      v160 = 600;
      if (!v62)
        goto LABEL_77;
      goto LABEL_19;
    }
    v41 = (*(uint64_t (**)(uint64_t, unint64_t))(v149 + 8))(v36, v147);
    v63 = v161;
LABEL_82:
    v160 = 2400;
    if (!v62)
      goto LABEL_77;
    goto LABEL_19;
  }
  v160 = 4800;
  if (v62)
  {
LABEL_19:
    if (__OFSUB__(v62, 1))
      goto LABEL_142;
    v64 = v159;
    if (v62 - 1 < 0)
      goto LABEL_143;
    v24 = 0;
    v158 = a1 & 0xC000000000000001;
    if (a1 < 0)
      v65 = a1;
    else
      v65 = a1 & 0xFFFFFFFFFFFFFF8;
    v165 = v65;
    v171 = (char *)(a1 & 0xFFFFFFFFFFFFFF8);
    v156 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    v17 = v159;
    v157 = (void (*)(_QWORD))(v62 - 1);
    while (1)
    {
      if (v63 >= v17)
        v66 = v17;
      else
        v66 = v63;
      v36 = v24 * v64;
      if ((unsigned __int128)(v24 * (__int128)v64) >> 64 != (v24 * v64) >> 63)
      {
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        v116 = v14;
        if (a1 < 0)
          v117 = a1;
        else
          v117 = a1 & 0xFFFFFFFFFFFFFF8;
        v162 = (unint64_t *)v33;
        v118 = v41;
        swift_bridgeObjectRetain(a1);
        v119 = v117;
        v14 = v116;
        v43 = _CocoaArrayWrapper.endIndex.getter(v119);
        swift_bridgeObjectRelease(a1);
        v41 = v118;
        v33 = (char *)v162;
        if (v43 < 1)
          goto LABEL_126;
        goto LABEL_5;
      }
      v67 = v36 + v64;
      if (__OFADD__(v36, v64))
        goto LABEL_110;
      if (v63 < v67)
        v67 = v63;
      v68 = __OFSUB__(v67, 1);
      v69 = v67 - 1;
      if (v68)
        goto LABEL_111;
      if (v69 < v36)
        goto LABEL_112;
      v39 = v69 + 1;
      if (__OFADD__(v69, 1))
        goto LABEL_113;
      if (v170)
      {
        swift_bridgeObjectRetain_n(a1, 2);
        v14 = (char *)_CocoaArrayWrapper.endIndex.getter(v165);
        v41 = swift_bridgeObjectRelease(a1);
        if ((uint64_t)v14 < v36)
          goto LABEL_114;
        swift_bridgeObjectRetain(a1);
        v14 = (char *)_CocoaArrayWrapper.endIndex.getter(v165);
        v41 = swift_bridgeObjectRelease(a1);
      }
      else
      {
        v14 = (char *)*((_QWORD *)v171 + 2);
        v41 = swift_bridgeObjectRetain(a1);
        if ((uint64_t)v14 < v36)
          goto LABEL_114;
        v14 = (char *)*((_QWORD *)v171 + 2);
      }
      if ((uint64_t)v14 < (uint64_t)v39)
        goto LABEL_115;
      if ((v39 & 0x8000000000000000) != 0)
        goto LABEL_116;
      if (!v158)
        goto LABEL_49;
      if (v39 < v36)
        goto LABEL_119;
      if (v36 != v39)
      {
        if (v36 >= v39)
          goto LABEL_121;
        sub_100011E4C(0, &qword_100090CB8, GKPlayerActivityItemInternal_ptr);
        v70 = v36;
        do
        {
          v71 = v70 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v70);
          v70 = v71;
        }
        while (v66 != v71);
      }
      if (v170)
      {
        swift_bridgeObjectRetain(a1);
        v39 = _CocoaArrayWrapper.subscript.getter(v36, v39, v165);
        v14 = v73;
        v36 = v74;
        v72 = v75;
        swift_bridgeObjectRelease_n(a1, 2);
        if ((v72 & 1) == 0)
          goto LABEL_52;
      }
      else
      {
LABEL_49:
        v72 = (2 * v39) | 1;
        v39 = (unint64_t)v171;
        v14 = (char *)v156;
        if ((v72 & 1) == 0)
          goto LABEL_52;
      }
      v33 = (char *)type metadata accessor for __ContiguousArrayStorageBase(0);
      v76 = swift_unknownObjectRetain_n(v39, 2);
      v77 = (_QWORD *)swift_dynamicCastClass(v76, v33);
      if (!v77)
      {
        swift_unknownObjectRelease(v39);
        v77 = _swiftEmptyArrayStorage;
      }
      v78 = v77[2];
      v41 = swift_release(v77);
      if (__OFSUB__(v72 >> 1, v36))
        goto LABEL_120;
      if (v78 != (v72 >> 1) - v36)
      {
        swift_unknownObjectRelease(v39);
LABEL_52:
        v14 = (char *)sub_10001045C(v39, (uint64_t)v14, v36, v72);
        goto LABEL_59;
      }
      v14 = (char *)swift_dynamicCastClass(v39, v33);
      if (!v14)
      {
        swift_unknownObjectRelease(v39);
        v14 = (char *)_swiftEmptyArrayStorage;
      }
LABEL_59:
      v41 = swift_unknownObjectRelease(v39);
      if ((unsigned __int128)(v24 * (__int128)v160) >> 64 != (v24 * v160) >> 63)
        goto LABEL_117;
      Date.init(timeIntervalSinceNow:)((double)(v24 * v160));
      v79 = (void *)sub_10006B320();
      v80 = v79;
      if (v79)

      v81 = (char *)sub_10006B320();
      if (v81)
      {
        v33 = v81;
        v82 = objc_msgSend(v81, "hasAcknowledgedLatestGDPR");

      }
      else
      {
        v82 = 0;
      }
      v83 = v80 != 0;
      v84 = sub_100010BB8((uint64_t)v14, v163, v166);
      swift_release(v14);
      (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v28, v173, v169);
      v85 = (int *)v167;
      v28[*(int *)(v167 + 20)] = v83;
      v28[v85[6]] = 0;
      v28[v85[7]] = 0;
      v28[v85[8]] = v82;
      *(_QWORD *)&v28[v85[9]] = v84;
      sub_100010FC4((uint64_t)v28, v172);
      v86 = v162;
      swift_beginAccess(v162, &v175, 33, 0);
      v14 = (char *)*v86;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v86);
      *v86 = (unint64_t)v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = (char *)sub_10000EFB0(0, *((_QWORD *)v14 + 2) + 1, 1, (unint64_t)v14, &qword_100090CB0, type metadata accessor for AFTimelineEntry);
        *v162 = (unint64_t)v14;
      }
      v39 = *((_QWORD *)v14 + 2);
      v88 = *((_QWORD *)v14 + 3);
      if (v39 >= v88 >> 1)
      {
        v14 = (char *)sub_10000EFB0(v88 > 1, v39 + 1, 1, (unint64_t)v14, &qword_100090CB0, type metadata accessor for AFTimelineEntry);
        *v162 = (unint64_t)v14;
      }
      *((_QWORD *)v14 + 2) = v39 + 1;
      sub_100011008(v172, (uint64_t)&v14[((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80))+ *(_QWORD *)(v164 + 72) * v39]);
      swift_endAccess(&v175);
      v41 = sub_10001104C((uint64_t)v28);
      if ((void (*)(_QWORD))v24 == v157)
      {
        v24 = (uint64_t)v155;
        v28 = v148;
        goto LABEL_90;
      }
      v64 = v159;
      v17 += v159;
      v68 = __OFADD__(v24++, 1);
      v63 = v161;
      if (v68)
        goto LABEL_118;
    }
  }
LABEL_77:
  Date.init()(v41);
  v89 = (void *)sub_10006B320();
  v90 = v89;
  if (v89)

  v91 = (void *)sub_10006B320();
  v28 = v148;
  if (v91)
  {
    v92 = v91;
    v93 = objc_msgSend(v91, "hasAcknowledgedLatestGDPR");

  }
  else
  {
    v93 = 0;
  }
  v94 = v90 != 0;
  v95 = sub_100010BB8(a1, v163, v166);
  (*(void (**)(char *, uint64_t, uint64_t))(v168 + 32))(v33, v24, v169);
  v96 = (int *)v167;
  v33[*(int *)(v167 + 20)] = v94;
  v33[v96[6]] = 0;
  v33[v96[7]] = 0;
  v33[v96[8]] = v93;
  *(_QWORD *)&v33[v96[9]] = v95;
  v97 = v165;
  sub_100010FC4((uint64_t)v33, v165);
  v98 = v162;
  swift_beginAccess(v162, &v175, 33, 0);
  v99 = *v98;
  v100 = swift_isUniquelyReferenced_nonNull_native(*v98);
  *v98 = v99;
  if ((v100 & 1) == 0)
  {
    v99 = sub_10000EFB0(0, *(_QWORD *)(v99 + 16) + 1, 1, v99, &qword_100090CB0, type metadata accessor for AFTimelineEntry);
    *v162 = v99;
  }
  v24 = (uint64_t)v155;
  v102 = *(_QWORD *)(v99 + 16);
  v101 = *(_QWORD *)(v99 + 24);
  if (v102 >= v101 >> 1)
  {
    v99 = sub_10000EFB0(v101 > 1, v102 + 1, 1, v99, &qword_100090CB0, type metadata accessor for AFTimelineEntry);
    *v162 = v99;
  }
  *(_QWORD *)(v99 + 16) = v102 + 1;
  sub_100011008(v97, v99+ ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80))+ *(_QWORD *)(v164 + 72) * v102);
  swift_endAccess(&v175);
  sub_10001104C((uint64_t)v33);
LABEL_90:
  if (qword_100090708 != -1)
LABEL_139:
    swift_once(&qword_100090708, sub_100029CF8);
  v103 = type metadata accessor for Logger(0);
  sub_10000A720(v103, (uint64_t)qword_100095A08);
  v104 = swift_retain(v28);
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v105, v106))
  {
    v17 = 12;
    v107 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v107 = 134217984;
    swift_beginAccess(v162, v174, 0, 0);
    v175 = *(_QWORD *)(*((_QWORD *)v28 + 2) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176);
    swift_release(v28);
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "getTimeline, constructed %ld timelineEntries", v107, 0xCu);
    swift_slowDealloc(v107, -1, -1);

  }
  else
  {

    swift_release(v28);
  }
  v108 = v145 + 1;
  if (__OFADD__(v145, 1))
  {
    __break(1u);
  }
  else if ((unsigned __int128)(v108 * (__int128)v160) >> 64 == (v108 * v160) >> 63)
  {
    v109 = v150;
    Date.init(timeIntervalSinceNow:)((double)(v108 * v160));
    v110 = v162;
    swift_beginAccess(v162, &v175, 0, 0);
    v111 = *v110;
    swift_bridgeObjectRetain(v111);
    v112 = v151;
    static TimelineReloadPolicy.after(_:)(v109);
    v113 = sub_100007A70(qword_100090C90, type metadata accessor for AFTimelineEntry, (uint64_t)&unk_1000710E8);
    v114 = v146;
    Timeline.init(entries:policy:)(v111, v112, v167, v113);
    ((void (*)(char *))v24)(v114);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v114, v153);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v109, v169);
    return (*(uint64_t (**)(uint64_t, unint64_t))(v149 + 8))(v166, v147);
  }
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  swift_once(&qword_100090708, sub_100029CF8);
LABEL_127:
  v120 = type metadata accessor for Logger(0);
  v121 = sub_10000A720(v120, (uint64_t)qword_100095A08);
  v122 = Logger.logObject.getter(v121);
  v123 = static os_log_type_t.default.getter();
  v124 = os_log_type_enabled(v122, v123);
  v125 = v155;
  if (v124)
  {
    v126 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v126 = 0;
    _os_log_impl((void *)&_mh_execute_header, v122, v123, "getTimeline, showing empty state", v126, 2u);
    swift_slowDealloc(v126, -1, -1);
  }

  v127 = sub_100006454(&qword_100090CB0);
  v128 = *(unsigned __int8 *)(v164 + 80);
  v129 = (v128 + 32) & ~v128;
  v130 = swift_allocObject(v127, v129 + *(_QWORD *)(v164 + 72), v128 | 7);
  *(_OWORD *)(v130 + 16) = xmmword_100070F40;
  v131 = v130 + v129;
  Date.init()(v130);
  v132 = (void *)sub_10006B320();
  v133 = v132;
  if (v132)

  v134 = (void *)sub_10006B320();
  if (v134)
  {
    v135 = v134;
    v136 = objc_msgSend(v134, "hasAcknowledgedLatestGDPR");

  }
  else
  {
    v136 = 0;
  }
  v137 = v168;
  v138 = v17;
  v139 = v169;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 32))(v131, v138, v169);
  v140 = (int *)v167;
  *(_BYTE *)(v131 + *(int *)(v167 + 20)) = v133 != 0;
  *(_BYTE *)(v131 + v140[6]) = 0;
  *(_BYTE *)(v131 + v140[7]) = 0;
  *(_BYTE *)(v131 + v140[8]) = v136;
  *(_QWORD *)(v131 + v140[9]) = _swiftEmptyArrayStorage;
  v141 = v150;
  Date.init(timeIntervalSinceNow:)(3600.0);
  v142 = v151;
  static TimelineReloadPolicy.after(_:)(v141);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v141, v139);
  v143 = sub_100007A70(qword_100090C90, type metadata accessor for AFTimelineEntry, (uint64_t)&unk_1000710E8);
  v144 = v171;
  Timeline.init(entries:policy:)(v130, v142, v140, v143);
  v125(v144);
  v59 = *(uint64_t (**)(char *, uint64_t))(v152 + 8);
  v60 = v144;
  return v59(v60, v153);
}

uint64_t sub_10000EB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_10008DEE8, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  type metadata accessor for GameCenterStore();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_10008DF10, v13 + 8, v11 | 7);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14 + v12, v9, v6);
  *(_QWORD *)(v14 + v13) = v10;
  swift_retain(a3);
  swift_retain(v10);
  sub_10002CF8C((uint64_t)sub_10000ED04, v14);
  swift_release(v10);
  return swift_release(v14);
}

uint64_t sub_10000EC50()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000EC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10000ED04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_10000D9E4(a1, a2, a3, *(void (**)(char *))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + v8, *(char **)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10000ED70(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10000EFB0(a1, a2, a3, a4, &qword_100090D28, type metadata accessor for CPTimelineEntry);
}

_QWORD *sub_10000ED84(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006454(&qword_100090CC8);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100010AC4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10000EEA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006454(&qword_100090CE0);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000109D4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000EFB0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100006454(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100011D34(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10000F1BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10000EFB0(a1, a2, a3, a4, &qword_100090D18, type metadata accessor for AppMetadata);
}

uint64_t sub_10000F1D0(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_10000F1D0(v6, a2, a3);
  return result;
}

uint64_t sub_10000F278(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10000FE68(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t *sub_10000F424(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_10000F588((uint64_t)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v4, a2);
    if (v2)
      swift_willThrow(v10);
    else
      return (uint64_t *)v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v9, -1);
    bzero(v11, v9);
    a2 = (uint64_t *)sub_10000F588((uint64_t)v11, v8, v4, a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return a2;
}

uint64_t sub_10000F588(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  char v35;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[9];
  int64_t v46;

  v4 = a3;
  v37 = (unint64_t *)result;
  v38 = 0;
  v5 = 0;
  v40 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v41 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    v11 = __OFADD__(v5++, 1);
    if (v11)
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v5 >= v41)
      return sub_10000F8F4(v37, a2, v38, v4);
    v12 = *(_QWORD *)(v40 + 8 * v5);
    if (!v12)
      break;
LABEL_19:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_20:
    v14 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v10);
    v15 = v14[1];
    v16 = *a4;
    if (!*(_QWORD *)(*a4 + 16))
    {
      swift_bridgeObjectRetain(v14[1]);
      goto LABEL_6;
    }
    v46 = v5;
    v17 = *v14;
    v43 = v10;
    v18 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v10);
    Hasher.init(_seed:)(v45, *(_QWORD *)(v16 + 40));
    swift_bridgeObjectRetain(v15);
    v19 = v18;
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v45, v17, v15);
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v16 + 32);
    v22 = v20 & ~v21;
    v23 = v16 + 56;
    if (((*(_QWORD *)(v16 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
    {
      v42 = v8;
      v24 = v19;
      v25 = *(_QWORD *)(v16 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = v26[1];
      v28 = *v26 == v17 && v27 == v15;
      if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, v17, v15, 0) & 1) != 0)
      {

LABEL_38:
        swift_bridgeObjectRelease(v16);
        v4 = a3;
        v5 = v46;
        v8 = v42;
        result = swift_bridgeObjectRelease(v15);
        *(unint64_t *)((char *)v37 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
        v11 = __OFADD__(v38++, 1);
        if (v11)
          goto LABEL_49;
      }
      else
      {
        v29 = ~v21;
        v30 = (v22 + 1) & v29;
        if (((*(_QWORD *)(v23 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
        {
          v31 = v24;
          while (1)
          {
            v32 = (_QWORD *)(v25 + 16 * v30);
            v33 = v32[1];
            if (*v32 == v17 && v33 == v15)
              break;
            v35 = _stringCompareWithSmolCheck(_:_:expecting:)(*v32, v33, v17, v15, 0);
            v31 = v24;
            if ((v35 & 1) != 0)
              break;
            v30 = (v30 + 1) & v29;
            if (((*(_QWORD *)(v23 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
              goto LABEL_41;
          }

          goto LABEL_38;
        }
LABEL_41:
        swift_bridgeObjectRelease(v15);

        result = swift_bridgeObjectRelease(v16);
        v4 = a3;
        v5 = v46;
        v8 = v42;
      }
    }
    else
    {

      swift_bridgeObjectRelease(v16);
      v5 = v46;
LABEL_6:
      result = swift_bridgeObjectRelease(v15);
    }
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v41)
    return sub_10000F8F4(v37, a2, v38, v4);
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
    goto LABEL_18;
  v13 = v5 + 2;
  if (v5 + 2 >= v41)
    return sub_10000F8F4(v37, a2, v38, v4);
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
    goto LABEL_18;
  v13 = v5 + 3;
  if (v5 + 3 >= v41)
    return sub_10000F8F4(v37, a2, v38, v4);
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
  {
LABEL_18:
    v5 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v41)
      return sub_10000F8F4(v37, a2, v38, v4);
    v12 = *(_QWORD *)(v40 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_50:
  __break(1u);
  return result;
}

Swift::Int sub_10000F8F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_100006454(&qword_100090CF0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v34)
        return v9;
      v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v34)
          return v9;
        v16 = v33[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v34)
            return v9;
          v16 = v33[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v34)
              return v9;
            v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v34)
                  return v9;
                v16 = v33[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(void **)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v35, *(_QWORD *)(v9 + 40));
    swift_bridgeObjectRetain(v19);
    v22 = v21;
    String.hash(into:)(v35, v20, v19);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v9 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    v31 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v26);
    *v31 = v20;
    v31[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v26) = v22;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_10000FB8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006454(&qword_100090CE8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_10000FE68(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10000FB8C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100010000();
      goto LABEL_22;
    }
    sub_1000101B0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_100010000()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100006454(&qword_100090CE8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_1000101B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006454(&qword_100090CE8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *sub_10001045C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_100006454(&qword_100090CC0);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    sub_100011E4C(0, &qword_100090CB8, GKPlayerActivityItemInternal_ptr);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1000105EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_100006454(&qword_100090CC0);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    type metadata accessor for AppDisplayData(0);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

void *sub_10001076C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100006454(&qword_100090D00);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100007A70(&qword_100090D08, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100007A70(&qword_100090D10, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_1000109D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100010AC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_100010BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t (*v22)(char *, uint64_t);
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;

  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - v11;
  v37 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v19);
    v13 = (uint64_t)result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(a1);
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  if (!v13)
    goto LABEL_14;
LABEL_3:
  if (v13 < 1)
  {
    __break(1u);
    goto LABEL_54;
  }
  v34 = a3;
  v35 = v7;
  v15 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, a1);
    else
      v16 = *(id *)(a1 + 8 * v15 + 32);
    v17 = v16;
    ++v15;
    v36 = v16;
    sub_10000C8E8(&v36, a2, &v37);

  }
  while (v13 != v15);
  swift_bridgeObjectRelease(a1);
  v18 = v37;
  a3 = v34;
  v7 = v35;
LABEL_15:
  v20 = v18[2];
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v21(v12, a3, v6);
  v22 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  v23 = v22(v12, v6);
  v24 = enum case for WidgetFamily.systemSmall(_:);
  if (v23 == enum case for WidgetFamily.systemSmall(_:))
    goto LABEL_16;
  if (v23 != enum case for WidgetFamily.systemMedium(_:))
  {
    if (v23 != enum case for WidgetFamily.systemLarge(_:))
    {
      if (v23 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        if (v20 >= 8)
          return v37;
        goto LABEL_30;
      }
      if (v23 == enum case for WidgetFamily.accessoryCircular(_:)
        || v23 == enum case for WidgetFamily.accessoryRectangular(_:)
        || v23 == enum case for WidgetFamily.accessoryInline(_:))
      {
LABEL_16:
        if (!v20)
          goto LABEL_30;
        return v37;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    if (v20 < 4)
      goto LABEL_30;
    return v37;
  }
  if (v20 > 1)
    return v37;
LABEL_30:
  v25 = v37[2];
  v21(v9, a3, v6);
  result = (_QWORD *)v22(v9, v6);
  if ((_DWORD)result == v24)
  {
    v26 = 1;
    goto LABEL_42;
  }
  if ((_DWORD)result == enum case for WidgetFamily.systemMedium(_:))
  {
    v26 = 2;
    goto LABEL_42;
  }
  if ((_DWORD)result == enum case for WidgetFamily.systemLarge(_:))
    goto LABEL_41;
  if ((_DWORD)result == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v26 = 8;
    goto LABEL_42;
  }
  v26 = 1;
  if ((_DWORD)result != enum case for WidgetFamily.accessoryCircular(_:)
    && (_DWORD)result != enum case for WidgetFamily.accessoryRectangular(_:)
    && (_DWORD)result != enum case for WidgetFamily.accessoryInline(_:))
  {
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_41:
    v26 = 4;
  }
LABEL_42:
  if (v26 < v25)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v26 == v25)
    return v37;
  v27 = v26 - v25;
  if (v26 > v25)
  {
    v28 = v37;
    do
    {
      v29 = objc_msgSend(objc_allocWithZone((Class)GKPlayerActivityItemInternal), "init");
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        v28 = sub_10000ED84(0, v28[2] + 1, 1, v28);
      v31 = v28[2];
      v30 = v28[3];
      if (v31 >= v30 >> 1)
        v28 = sub_10000ED84((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
      v28[2] = v31 + 1;
      v32 = &v28[3 * v31];
      v32[4] = v29;
      v32[5] = &_swiftEmptyDictionarySingleton;
      *((_BYTE *)v32 + 48) = 1;
      --v27;
    }
    while (v27);
    return v28;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_100010FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001104C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AFTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100011088()
{
  double v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F1D0(v13, 0.0, 1.0);
  v51 = v14;
  v15 = (void *)sub_10006B320();
  if (!v15)
    goto LABEL_13;
  v16 = v15;
  v45 = v10;
  v46 = v9;
  v17 = objc_msgSend(v15, "teamPlayerID");

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v47 = v1;
  v20 = v19;

  v48 = String.hashValue.getter(v18, v20);
  v21 = swift_bridgeObjectRelease(v20);
  static Calendar.current.getter(v21);
  v22 = sub_100006454(&qword_100090A78);
  v23 = type metadata accessor for Calendar.Component(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v2;
  v27 = (v25 + 32) & ~v25;
  v28 = swift_allocObject(v22, v27 + *(_QWORD *)(v24 + 72), v25 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_100070F40;
  v29 = v28 + v27;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v29, enum case for Calendar.Component.hour(_:), v23);
  v30 = sub_10001076C(v28);
  swift_setDeallocating(v28);
  swift_arrayDestroy(v29, 1, v23);
  v31 = swift_deallocClassInstance(v28, 32, 7);
  Date.init()(v31);
  Calendar.dateComponents(_:from:)(v30, v4);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v47);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v33 = DateComponents.hour.getter(v32);
  if ((v34 & 1) != 0)
    v35 = 0;
  else
    v35 = v33;
  if (__OFADD__(v48, v35))
  {
    __break(1u);
    goto LABEL_15;
  }
  srand48(v48 + v35);
  v36 = drand48() * 1.84467441e19 + 0.0;
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v36 <= -1.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v36 >= 1.84467441e19)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v0 = (double)((unint64_t)v36 % 0x64) / 99.0;
  v51 = v0;
  if (qword_100090708 != -1)
LABEL_18:
    swift_once(&qword_100090708, sub_100029CF8);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_10000A720(v37, (uint64_t)qword_100095A08);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  v41 = os_log_type_enabled(v39, v40);
  v42 = v45;
  if (v41)
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v43 = 134217984;
    v49 = v0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Generated rand based on player id = %f", v43, 0xCu);
    swift_slowDealloc(v43, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v46);
LABEL_13:
  swift_beginAccess(&v51, &v49, 0, 0);
  return v51;
}

uint64_t sub_10001148C(void (*a1)(char *), uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  double v48;
  uint64_t v49;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v47 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for AFTimelineEntry(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TimelineProviderContext(0);
  v45 = *(_QWORD *)(v14 - 8);
  v46 = v14;
  __chkstk_darwin(v14);
  v43 = v15;
  v44 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100011088();
  if (qword_100090708 != -1)
    swift_once(&qword_100090708, sub_100029CF8);
  v17 = type metadata accessor for Logger(0);
  v42 = sub_10000A720(v17, (uint64_t)qword_100095A08);
  v18 = Logger.logObject.getter(v42);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (_DWORD *)swift_slowAlloc(22, -1);
    v41 = v8;
    v21 = v20;
    *v20 = 134218240;
    v48 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    *((_WORD *)v21 + 6) = 2048;
    v48 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "AFTimelineProvider.getSnapshot: Live preview rate is %f, rolled a %f", (uint8_t *)v21, 0x16u);
    v22 = v21;
    v8 = v41;
    swift_slowDealloc(v22, -1, -1);
  }

  if (v16 <= a4)
  {
    type metadata accessor for GameCenterStore();
    v34 = v44;
    v33 = v45;
    v35 = a3;
    v36 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v35, v46);
    v37 = *(unsigned __int8 *)(v33 + 80);
    v38 = (v37 + 32) & ~v37;
    v39 = swift_allocObject(&unk_10008DFB0, v38 + v43, v37 | 7);
    *(_QWORD *)(v39 + 16) = a1;
    *(_QWORD *)(v39 + 24) = a2;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v39 + v38, v34, v36);
    swift_retain(a2);
    sub_10002CF8C((uint64_t)sub_100011CDC, v39);
    return swift_release(v39);
  }
  else
  {
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "AFTimelineProvider.getSnapshot: Showing placeholder preview...", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    Date.init()(v27);
    v28 = (void *)sub_10006B320();
    v29 = v28;
    if (v28)

    v30 = (void *)sub_10006B320();
    if (v30)
    {
      v31 = v30;
      v32 = objc_msgSend(v30, "hasAcknowledgedLatestGDPR");

    }
    else
    {
      v32 = 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v47, v8);
    v13[v11[5]] = v29 != 0;
    v13[v11[6]] = 0;
    v13[v11[7]] = 1;
    v13[v11[8]] = v32;
    *(_QWORD *)&v13[v11[9]] = _swiftEmptyArrayStorage;
    a1(v13);
    return sub_10001104C((uint64_t)v13);
  }
}

uint64_t sub_100011874(uint64_t a1, unint64_t a2)
{
  return sub_100011888(a1, a2, &qword_100090D20, GKGameSummaryInternal_ptr);
}

uint64_t sub_100011888(uint64_t result, unint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a4;
    v7 = a3;
    v4 = a2;
    v5 = result;
    v8 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v4 < 0)
    v19 = v4;
  else
    v19 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v9 = _CocoaArrayWrapper.endIndex.getter(v19);
  result = swift_bridgeObjectRelease(v4);
LABEL_4:
  if (v9 >= v5)
    v10 = v5;
  else
    v10 = v9;
  if (v9 < 0)
    v10 = v5;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  if (v8)
  {
    if (v4 < 0)
      v13 = v4;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(v4);
    if (v14 < 0)
      goto LABEL_37;
    swift_bridgeObjectRetain(v4);
    v12 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(v4);
  }
  else
  {
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12 < v11)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if ((v4 & 0xC000000000000001) != 0 && v11)
  {
    sub_100011E4C(0, v7, v6);
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v15);
      v15 = v16;
    }
    while (v11 != v16);
  }
  if (v8)
  {
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v17 = _CocoaArrayWrapper.subscript.getter(0, v11, v18);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
  }
  return v17;
}

uint64_t sub_100011A3C(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v15 = v2;
  else
    v15 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v15);
  result = swift_bridgeObjectRelease(v2);
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(v2);
    if (v10 < 0)
      goto LABEL_37;
    swift_bridgeObjectRetain(v2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(v2);
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    type metadata accessor for AppDisplayData(0);
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      v11 = v12;
    }
    while (v7 != v12);
  }
  if (v4)
  {
    if (v2 < 0)
      v14 = v2;
    else
      v14 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v13 = _CocoaArrayWrapper.subscript.getter(0, v7, v14);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
  return v13;
}

uint64_t sub_100011BDC(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8) + 80);
  return sub_10001148C(*(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t sub_100011C1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100011C40(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  return sub_10002DCB0(a1, a2, a3, *(_QWORD *)(v3 + 16), *(uint64_t (**)(_QWORD, __n128))(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_100011C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100011C5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100011CDC(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8) + 80);
  return sub_10000D24C(a1, a2, a3, *(void (**)(char *))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v7 + 32) & ~v7));
}

uint64_t sub_100011D34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100011E4C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *sub_100011E84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = (int *)type metadata accessor for AFTimelineEntry(0);
    v15[v18[5]] = v16[v18[5]];
    v15[v18[6]] = v16[v18[6]];
    v15[v18[7]] = v16[v18[7]];
    v15[v18[8]] = v16[v18[8]];
    v19 = v18[9];
    v20 = *(_QWORD *)&v16[v19];
    *(_QWORD *)&v15[v19] = v20;
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_100011FC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = *(_QWORD *)&v6[*(int *)(type metadata accessor for AFTimelineEntry(0) + 36)];
  return swift_bridgeObjectRelease(v8);
}

uint64_t *sub_100012060(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = (int *)type metadata accessor for AFTimelineEntry(0);
  v13[v16[5]] = v14[v16[5]];
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v17 = v16[9];
  v18 = *(_QWORD *)&v14[v17];
  *(_QWORD *)&v13[v17] = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t *sub_100012174(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = (int *)type metadata accessor for AFTimelineEntry(0);
  v13[v16[5]] = v14[v16[5]];
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v17 = v16[9];
  v18 = *(_QWORD *)&v14[v17];
  v19 = *(_QWORD *)&v13[v17];
  *(_QWORD *)&v13[v17] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

char *sub_1000122AC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for AFTimelineEntry(0);
  v9[v12[5]] = v10[v12[5]];
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  *(_QWORD *)&v9[v12[9]] = *(_QWORD *)&v10[v12[9]];
  return a1;
}

char *sub_1000123B8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for AFTimelineEntry(0);
  v9[v12[5]] = v10[v12[5]];
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v13 = v12[9];
  v14 = *(_QWORD *)&v9[v13];
  *(_QWORD *)&v9[v13] = *(_QWORD *)&v10[v13];
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_1000124E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000124F0);
}

uint64_t sub_1000124F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for AFTimelineEntry(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100012568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100012574);
}

uint64_t sub_100012574(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for AFTimelineEntry(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AFEntryView(uint64_t a1)
{
  uint64_t result;

  result = qword_100090D88;
  if (!qword_100090D88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFEntryView);
  return result;
}

void sub_100012630(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1000126B4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for AFTimelineEntry(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_1000126B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100090838)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100090838);
  }
}

uint64_t sub_100012708(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074828, 1);
}

uint64_t sub_100012718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DEC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10001272C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  id v6;
  id v7;
  uint64_t v9;

  v0 = type metadata accessor for GKFeatureFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for GKFeatureFlags.GameOverlayUI(_:), v0);
  v5 = GKFeatureFlags.isEnabled.getter(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v5 & 1) != 0
    && (v6 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice"),
        v7 = objc_msgSend(v6, "userInterfaceIdiom"),
        v6,
        !v7))
  {
    return static ActivityFeedLockupVendor.makeRemoteDashboardURL()();
  }
  else
  {
    return URL.init(string:)(0xD000000000000019, 0x8000000100073790);
  }
}

uint64_t sub_100012834@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  char v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t result;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;

  v4 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for GeometryProxy(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v12);
  type metadata accessor for LockdownModeManager(0);
  v15 = (void *)static LockdownModeManager.shared.getter();
  v16 = LockdownModeManager.enabled.getter();

  v17 = 0x5F4E495F4E474953;
  if ((v16 & 1) != 0)
    v17 = 0xD000000000000015;
  v32 = v17;
  if ((v16 & 1) != 0)
    v18 = 0x8000000100073DA0;
  else
    v18 = 0xEF4547415353454DLL;
  v19 = (void *)static LockdownModeManager.shared.getter();
  v20 = LockdownModeManager.enabled.getter();

  v21 = (v20 & 1) == 0;
  if ((v20 & 1) != 0)
    v22 = 0;
  else
    v22 = 0xD000000000000016;
  if (v21)
    v23 = 0x8000000100073D80;
  else
    v23 = 0;
  *v9 = swift_getKeyPath(&unk_1000712B0);
  v24 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v9, v24, 0);
  *v6 = swift_getKeyPath(&unk_1000712E0);
  v25 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v6, v25, 0);
  *(_QWORD *)a2 = swift_getKeyPath(&unk_100071258);
  v26 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(a2, v26, 0);
  v27 = (int *)type metadata accessor for MessageView(0);
  sub_100007A2C((uint64_t)v9, (uint64_t)&a2[v27[5]], &qword_1000907C0);
  sub_100007A2C((uint64_t)v6, (uint64_t)&a2[v27[6]], &qword_1000908C0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(&a2[v27[7]], v14, v10);
  v29 = (unint64_t *)&a2[v27[8]];
  *v29 = v32;
  v29[1] = v18;
  v30 = (unint64_t *)&a2[v27[9]];
  *v30 = v22;
  v30[1] = v23;
  a2[v27[10]] = 0;
  return result;
}

uint64_t sub_100012AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t result;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v105 = a3;
  v106 = a2;
  v100 = a1;
  v94 = type metadata accessor for AFExtraLargeContentView(0);
  __chkstk_darwin(v94);
  v93 = (uint64_t *)((char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = type metadata accessor for AFLargeContentView(0);
  __chkstk_darwin(v96);
  v95 = (uint64_t *)((char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v98 = type metadata accessor for AFMediumContentView(0);
  __chkstk_darwin(v98);
  v97 = (uint64_t *)((char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = type metadata accessor for GeometryProxy(0);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v103 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AFSmallContentView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for AFTimelineEntry(0);
  __chkstk_darwin(v99);
  v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v92 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v92 - v16;
  __chkstk_darwin(v18);
  v101 = (uint64_t)&v92 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v92 - v21;
  v23 = type metadata accessor for WidgetFamily(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000150A0(&qword_1000907B0, v27, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)v26);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if ((_DWORD)v28 == enum case for WidgetFamily.systemSmall(_:))
  {
    if (qword_100090708 != -1)
      swift_once(&qword_100090708, sub_100029CF8);
    v29 = type metadata accessor for Logger(0);
    sub_10000A720(v29, (uint64_t)qword_100095A08);
    v30 = v106;
    v31 = sub_100007AF4(v106, (uint64_t)v22, type metadata accessor for AFTimelineEntry);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v34 = 134217984;
      v35 = *(_QWORD *)(*(_QWORD *)&v22[*(int *)(v99 + 36)] + 16);
      sub_10000A7C0((uint64_t)v22, type metadata accessor for AFTimelineEntry);
      v107 = v35;
      v30 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "AFSmallContentView: Showing %ld items", v34, 0xCu);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_10000A7C0((uint64_t)v22, type metadata accessor for AFTimelineEntry);
    }

    v45 = v102;
    v44 = v103;
    v46 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v103, v100, v104);
    v47 = v30;
    v48 = v101;
    sub_100007AF4(v47, v101, type metadata accessor for AFTimelineEntry);
    *(_QWORD *)v9 = swift_getKeyPath(&unk_1000712B0);
    v49 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v9, v49, 0);
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v9[*(int *)(v7 + 20)], v44, v46);
    sub_100007AB0(v48, (uint64_t)&v9[*(int *)(v7 + 24)], type metadata accessor for AFTimelineEntry);
    v50 = sub_100007A70(&qword_100090E78, type metadata accessor for AFSmallContentView, (uint64_t)&unk_100072DB4);
    v51 = (uint64_t *)v9;
    v52 = v7;
    goto LABEL_34;
  }
  v36 = v28;
  if ((_DWORD)v28 == enum case for WidgetFamily.systemMedium(_:))
  {
    if (qword_100090708 != -1)
      swift_once(&qword_100090708, sub_100029CF8);
    v37 = type metadata accessor for Logger(0);
    sub_10000A720(v37, (uint64_t)qword_100095A08);
    v38 = v106;
    v39 = sub_100007AF4(v106, (uint64_t)v17, type metadata accessor for AFTimelineEntry);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v42 = 134217984;
      v43 = *(_QWORD *)(*(_QWORD *)&v17[*(int *)(v99 + 36)] + 16);
      sub_10000A7C0((uint64_t)v17, type metadata accessor for AFTimelineEntry);
      v107 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "AFMediumContentView: Showing %ld items", v42, 0xCu);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      sub_10000A7C0((uint64_t)v17, type metadata accessor for AFTimelineEntry);
    }

    v61 = v102;
    v60 = v103;
    v62 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v103, v100, v104);
    v63 = v101;
    sub_100007AF4(v38, v101, type metadata accessor for AFTimelineEntry);
    KeyPath = swift_getKeyPath(&unk_1000712B0);
    v65 = v97;
    *v97 = KeyPath;
    v66 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v65, v66, 0);
    v67 = v98;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))((char *)v65 + *(int *)(v98 + 20), v60, v62);
    sub_100007AB0(v63, (uint64_t)v65 + *(int *)(v67 + 24), type metadata accessor for AFTimelineEntry);
    v68 = (unint64_t *)&unk_100090E70;
    v69 = type metadata accessor for AFMediumContentView;
    v70 = &unk_100071544;
LABEL_33:
    v50 = sub_100007A70(v68, v69, (uint64_t)v70);
    v51 = v65;
    v52 = v67;
LABEL_34:
    result = AnyView.init<A>(_:)(v51, v52, v50);
    *v105 = result;
    return result;
  }
  if ((_DWORD)v28 == enum case for WidgetFamily.systemLarge(_:))
  {
    if (qword_100090708 != -1)
      swift_once(&qword_100090708, sub_100029CF8);
    v53 = type metadata accessor for Logger(0);
    sub_10000A720(v53, (uint64_t)qword_100095A08);
    v54 = v106;
    v55 = sub_100007AF4(v106, (uint64_t)v14, type metadata accessor for AFTimelineEntry);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v58 = 134217984;
      v59 = *(_QWORD *)(*(_QWORD *)&v14[*(int *)(v99 + 36)] + 16);
      sub_10000A7C0((uint64_t)v14, type metadata accessor for AFTimelineEntry);
      v107 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "AFLargeContentView: Showing %ld items", v58, 0xCu);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_10000A7C0((uint64_t)v14, type metadata accessor for AFTimelineEntry);
    }

    v79 = v102;
    v78 = v103;
    v80 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v103, v100, v104);
    v81 = v101;
    sub_100007AF4(v54, v101, type metadata accessor for AFTimelineEntry);
    v82 = swift_getKeyPath(&unk_1000712B0);
    v65 = v95;
    *v95 = v82;
    v83 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v65, v83, 0);
    v67 = v96;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))((char *)v65 + *(int *)(v96 + 20), v78, v80);
    sub_100007AB0(v81, (uint64_t)v65 + *(int *)(v67 + 24), type metadata accessor for AFTimelineEntry);
    v68 = (unint64_t *)&unk_100090E68;
    v69 = type metadata accessor for AFLargeContentView;
    v70 = &unk_100071334;
    goto LABEL_33;
  }
  if ((_DWORD)v28 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    if (qword_100090708 != -1)
      swift_once(&qword_100090708, sub_100029CF8);
    v71 = type metadata accessor for Logger(0);
    sub_10000A720(v71, (uint64_t)qword_100095A08);
    v72 = v106;
    v73 = sub_100007AF4(v106, (uint64_t)v11, type metadata accessor for AFTimelineEntry);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v76 = 134217984;
      v77 = *(_QWORD *)(*(_QWORD *)&v11[*(int *)(v99 + 36)] + 16);
      sub_10000A7C0((uint64_t)v11, type metadata accessor for AFTimelineEntry);
      v107 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "AFExtraLargeContentView: Showing %ld items", v76, 0xCu);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      sub_10000A7C0((uint64_t)v11, type metadata accessor for AFTimelineEntry);
    }

    v87 = v102;
    v86 = v103;
    v88 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v103, v100, v104);
    v89 = v101;
    sub_100007AF4(v72, v101, type metadata accessor for AFTimelineEntry);
    v90 = swift_getKeyPath(&unk_1000712B0);
    v65 = v93;
    *v93 = v90;
    v91 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v65, v91, 0);
    v67 = v94;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))((char *)v65 + *(int *)(v94 + 20), v86, v88);
    sub_100007AB0(v89, (uint64_t)v65 + *(int *)(v67 + 24), type metadata accessor for AFTimelineEntry);
    v68 = (unint64_t *)&unk_100090E60;
    v69 = type metadata accessor for AFExtraLargeContentView;
    v70 = &unk_100071858;
    goto LABEL_33;
  }
  v84 = enum case for WidgetFamily.accessoryCircular(_:);
  result = AnyView.init<A>(_:)(v28, &type metadata for EmptyView, &protocol witness table for EmptyView);
  *v105 = result;
  if (v36 != v84
    && v36 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v36 != enum case for WidgetFamily.accessoryInline(_:))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  }
  return result;
}

uint64_t sub_1000135C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t OpaqueTypeConformance2;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  char *v56;
  uint64_t result;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t KeyPath;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int *v108;
  uint64_t v109;
  char *v110;
  int *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  int *v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  int *v142;
  int *v143;
  void *v144;

  v139 = a1;
  v140 = a2;
  v126 = sub_100006454(&qword_100090E18);
  __chkstk_darwin(v126);
  v125 = (char *)&v113 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for AFEmptyStateView(0);
  __chkstk_darwin(v124);
  v117 = (uint64_t *)((char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v118 = (uint64_t)&v113 - v5;
  v123 = sub_100006454(&qword_100090E20);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v120 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100006454(&qword_100090E28);
  __chkstk_darwin(v122);
  v119 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AFEntryView(0);
  __chkstk_darwin(v8);
  v135 = (uint64_t)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetFamily(0);
  v129 = *(_QWORD *)(v10 - 8);
  v130 = v10;
  __chkstk_darwin(v10);
  v128 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v12);
  v134 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v14);
  v127 = (uint64_t *)((char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for GeometryProxy(0);
  v132 = *(_QWORD *)(v16 - 8);
  v133 = v16;
  __chkstk_darwin(v16);
  v131 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for MessageView(0);
  __chkstk_darwin(v136);
  v141 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100006454(&qword_100090E30);
  __chkstk_darwin(v138);
  v137 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v20);
  v22 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for RedactionReasons(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (int *)type metadata accessor for AFTimelineEntry(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100006454(&qword_100090E38);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100006454(&qword_100090E40);
  v39 = __chkstk_darwin(v34);
  v40 = v37 + *(int *)(v8 + 20);
  if (*(_BYTE *)(v40 + v27[5]) != 1)
  {
    v53 = v141;
    sub_100012834(v139, v141);
    URL.init(string:)(0xD000000000000015, 0x8000000100073AC0);
    v54 = sub_100007A70(&qword_100090E48, type metadata accessor for MessageView, (uint64_t)&unk_100073100);
    v55 = (int *)v136;
    v56 = v137;
    View.widgetURL(_:)(v22, v136, v54);
    sub_100007928((uint64_t)v22, &qword_100090BC8);
    sub_10000A7C0((uint64_t)v53, type metadata accessor for MessageView);
    v143 = v55;
LABEL_5:
    v144 = (void *)v54;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v51 = v56;
    v52 = (char *)v138;
    goto LABEL_6;
  }
  v113 = v33;
  v114 = v31;
  v115 = (int *)v30;
  v42 = v134;
  v41 = v135;
  v43 = v141;
  v116 = v22;
  if (*(_BYTE *)(v40 + v27[6]) == 1)
  {
    v141 = v35;
    v44 = (char *)&v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()(v35);
    v29[v27[5]] = 1;
    v29[v27[6]] = 0;
    v29[v27[7]] = 1;
    v29[v27[8]] = 0;
    *(_QWORD *)&v29[v27[9]] = _swiftEmptyArrayStorage;
    sub_100012AD4(v139, (uint64_t)v29, (uint64_t *)&v143);
    v45 = sub_10000A7C0((uint64_t)v29, type metadata accessor for AFTimelineEntry);
    v142 = v143;
    static RedactionReasons.placeholder.getter(v45);
    v46 = v113;
    View.redacted(reason:)(v26, &type metadata for AnyView, &protocol witness table for AnyView);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    swift_release(v142);
    v47 = (uint64_t)v116;
    sub_10001272C();
    v143 = (int *)&type metadata for AnyView;
    v144 = &protocol witness table for AnyView;
    v48 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v49 = v115;
    View.widgetURL(_:)(v47, v115, v48);
    sub_100007928(v47, &qword_100090BC8);
    (*(void (**)(char *, int *))(v114 + 8))(v46, v49);
    v143 = v49;
    v144 = (void *)v48;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v51 = v44;
    v52 = v141;
LABEL_6:
    result = AnyView.init<A>(_:)(v51, v52, OpaqueTypeConformance2);
    v58 = result;
    v59 = v140;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v40 + v27[8]) & 1) == 0)
  {
    v66 = v132;
    v67 = v131;
    v68 = v133;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v132 + 16))(v131, v139, v133, v39);
    KeyPath = swift_getKeyPath(&unk_1000712B0);
    v70 = (uint64_t)v127;
    *v127 = KeyPath;
    v71 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v70, v71, 0);
    *v42 = swift_getKeyPath(&unk_1000712E0);
    v72 = sub_100006454(&qword_1000908D0);
    swift_storeEnumTagMultiPayload(v42, v72, 0);
    v73 = (uint64_t)v43;
    *(_QWORD *)v43 = swift_getKeyPath(&unk_100071258);
    v74 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v43, v74, 0);
    v75 = (int *)v136;
    sub_100007A2C(v70, (uint64_t)&v43[*(int *)(v136 + 20)], &qword_1000907C0);
    sub_100007A2C((uint64_t)v42, (uint64_t)&v43[v75[6]], &qword_1000908C0);
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v43[v75[7]], v67, v68);
    v76 = &v43[v75[8]];
    *(_QWORD *)v76 = 0xD000000000000019;
    *((_QWORD *)v76 + 1) = 0x8000000100073AE0;
    v77 = &v43[v75[9]];
    *(_QWORD *)v77 = 0;
    *((_QWORD *)v77 + 1) = 0;
    v43[v75[10]] = 0;
    v78 = v128;
    sub_1000150A0(&qword_1000907B0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v128);
    v79 = sub_100007A70(&qword_100090E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v80 = v130;
    v81 = dispatch thunk of CustomStringConvertible.description.getter(v130, v79);
    v83 = v82;
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v78, v80);
    v84 = (uint64_t)v116;
    static ActivityFeedLockupVendor.makeRemoteDashboardURL(widgetId:widgetFamily:)(0xD000000000000017, 0x8000000100073B00, v81, v83);
    swift_bridgeObjectRelease(v83);
    v54 = sub_100007A70(&qword_100090E48, type metadata accessor for MessageView, (uint64_t)&unk_100073100);
    v56 = v137;
    View.widgetURL(_:)(v84, v75, v54);
    sub_100007928(v84, &qword_100090BC8);
    sub_10000A7C0(v73, type metadata accessor for MessageView);
    v143 = v75;
    goto LABEL_5;
  }
  v60 = v38;
  v61 = *(_QWORD *)(*(_QWORD *)(v40 + v27[9]) + 16);
  sub_100007AF4(v37, v135, type metadata accessor for AFEntryView);
  if (v61)
  {
    sub_10000A7C0(v41, type metadata accessor for AFEntryView);
    v59 = v140;
    v62 = (uint64_t)v116;
    v64 = v129;
    v63 = v130;
    v65 = v128;
  }
  else
  {
    v85 = *(unsigned __int8 *)(v41 + *(int *)(v60 + 20) + v27[7]);
    sub_10000A7C0(v41, type metadata accessor for AFEntryView);
    v59 = v140;
    v62 = (uint64_t)v116;
    v64 = v129;
    v63 = v130;
    v65 = v128;
    if ((v85 & 1) == 0)
    {
      v93 = swift_getKeyPath(&unk_1000712E0);
      v94 = (uint64_t)v117;
      *v117 = v93;
      v95 = sub_100006454(&qword_1000908D0);
      swift_storeEnumTagMultiPayload(v94, v95, 0);
      v96 = v124;
      v97 = (_QWORD *)(v94 + *(int *)(v124 + 20));
      *v97 = swift_getKeyPath(&unk_1000712B0);
      v98 = sub_100006454(&qword_1000907B0);
      swift_storeEnumTagMultiPayload(v97, v98, 0);
      v99 = (_QWORD *)(v94 + *(int *)(v96 + 24));
      *v99 = swift_getKeyPath(&unk_100071258);
      v100 = sub_100006454(&qword_1000907A8);
      swift_storeEnumTagMultiPayload(v99, v100, 0);
      v101 = v118;
      sub_100007AB0(v94, v118, type metadata accessor for AFEmptyStateView);
      sub_1000150A0(&qword_1000907B0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v65);
      v102 = sub_100007A70(&qword_100090E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v103 = dispatch thunk of CustomStringConvertible.description.getter(v63, v102);
      v105 = v104;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v63);
      static ActivityFeedLockupVendor.makeRemoteDashboardURL(widgetId:widgetFamily:)(0xD000000000000017, 0x8000000100073B00, v103, v105);
      swift_bridgeObjectRelease(v105);
      v106 = sub_100007A70(&qword_100090E58, type metadata accessor for AFEmptyStateView, (uint64_t)&unk_1000716E4);
      v107 = v120;
      v108 = (int *)v124;
      View.widgetURL(_:)(v62, v124, v106);
      sub_100007928(v62, &qword_100090BC8);
      sub_10000A7C0(v101, type metadata accessor for AFEmptyStateView);
      v143 = v108;
      v144 = (void *)v106;
      v109 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v110 = v119;
      v111 = (int *)v123;
      View.unredacted()(v123, v109);
      (*(void (**)(char *, int *))(v121 + 8))(v107, v111);
      v143 = v111;
      v144 = (void *)v109;
      v112 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
      result = AnyView.init<A>(_:)(v110, v122, v112);
      v58 = result;
      goto LABEL_7;
    }
  }
  sub_100012AD4(v139, v40, (uint64_t *)&v143);
  v86 = v143;
  sub_1000150A0(&qword_1000907B0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v65);
  v87 = sub_100007A70(&qword_100090E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v88 = dispatch thunk of CustomStringConvertible.description.getter(v63, v87);
  v90 = v89;
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v63);
  static ActivityFeedLockupVendor.makeRemoteDashboardURL(widgetId:widgetFamily:)(0xD000000000000017, 0x8000000100073B00, v88, v90);
  swift_bridgeObjectRelease(v90);
  v91 = v125;
  View.widgetURL(_:)(v62, &type metadata for AnyView, &protocol witness table for AnyView);
  sub_100007928(v62, &qword_100090BC8);
  v143 = (int *)&type metadata for AnyView;
  v144 = &protocol witness table for AnyView;
  v92 = swift_getOpaqueTypeConformance2(&v143, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v58 = AnyView.init<A>(_:)(v91, v126, v92);
  result = swift_release(v86);
LABEL_7:
  *v59 = v58;
  return result;
}

uint64_t sub_10001432C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a1;
  v37 = a3;
  v36 = sub_100006454(&qword_100090DC0);
  __chkstk_darwin(v36);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RedactionReasons(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006454(&qword_100090DC8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100090DD0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100006454(&qword_100090DD8);
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v32 - v20;
  *v15 = static Alignment.center.getter(v22);
  v15[1] = v23;
  v24 = sub_100006454(&qword_100090DE0);
  sub_100014670(a2, v35, (uint64_t)v15 + *(int *)(v24 + 44));
  v25 = a2 + *(int *)(type metadata accessor for AFEntryView(0) + 20);
  v26 = type metadata accessor for AFTimelineEntry(0);
  if (*(_BYTE *)(v25 + *(int *)(v26 + 28)) == 1)
  {
    static RedactionReasons.placeholder.getter(v26);
    v27 = sub_1000078D8(&qword_100090DE8, &qword_100090DD0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    View.redacted(reason:)(v8, v13, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v12, v9);
    swift_storeEnumTagMultiPayload(v5, v36, 0);
    v38 = v13;
    v39 = v27;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v5, v9, v13, OpaqueTypeConformance2, v27);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    sub_100007964((uint64_t)v15, (uint64_t)v5, &qword_100090DD0);
    swift_storeEnumTagMultiPayload(v5, v36, 1);
    v29 = sub_1000078D8(&qword_100090DE8, &qword_100090DD0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v38 = v13;
    v39 = v29;
    v30 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v5, v9, v13, v30, v29);
  }
  sub_100007A2C((uint64_t)v18, (uint64_t)v21, &qword_100090DD8);
  sub_100007928((uint64_t)v15, &qword_100090DD0);
  return sub_100007A2C((uint64_t)v21, v37, &qword_100090DD8);
}

uint64_t sub_100014670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v69 = a2;
  v62 = a3;
  v66 = sub_100006454(&qword_100090DF0);
  __chkstk_darwin(v66);
  v67 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RedactionReasons(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5);
  v60 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for AFBackgroundView(0);
  __chkstk_darwin(v61);
  v8 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v63 = (uint64_t)&v54 - v10;
  v65 = sub_100006454(&qword_100090DF8);
  v11 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v54 - v15;
  v17 = type metadata accessor for AFEntryView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006454(&qword_100090E00);
  __chkstk_darwin(v20);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v64 = (char *)&v54 - v24;
  v25 = a1 + *(int *)(v17 + 20);
  v26 = type metadata accessor for AFTimelineEntry(0);
  LODWORD(v25) = *(unsigned __int8 *)(v25 + *(int *)(v26 + 20));
  v68 = a1;
  sub_100007AF4(a1, (uint64_t)v19, type metadata accessor for AFEntryView);
  if ((_DWORD)v25 != 1)
  {
    sub_10000A7C0((uint64_t)v19, type metadata accessor for AFEntryView);
    v29 = v61;
    v30 = v62;
    v31 = v69;
    goto LABEL_5;
  }
  v55 = v13;
  v56 = v16;
  v27 = v60;
  v57 = v11;
  v28 = v19[*(int *)(v17 + 20) + *(int *)(v26 + 24)];
  sub_10000A7C0((uint64_t)v19, type metadata accessor for AFEntryView);
  v29 = v61;
  v30 = v62;
  v31 = v69;
  if ((v28 & 1) == 0)
  {
LABEL_5:
    *v8 = swift_getKeyPath(&unk_100071258);
    v46 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v8, v46, 0);
    v47 = (char *)v8 + *(int *)(v29 + 20);
    *(_QWORD *)v47 = swift_getKeyPath(&unk_100071288);
    v47[8] = 0;
    v48 = v63;
    sub_100007AB0((uint64_t)v8, v63, type metadata accessor for AFBackgroundView);
    v49 = v67;
    sub_100007AF4(v48, v67, type metadata accessor for AFBackgroundView);
    swift_storeEnumTagMultiPayload(v49, v66, 1);
    v50 = sub_100007A70(&qword_100090E08, type metadata accessor for AFBackgroundView, (uint64_t)&unk_100072E50);
    v70 = v29;
    v71 = v50;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v44 = (uint64_t)v64;
    _ConditionalContent<>.init(storage:)(v49, v65, v29, OpaqueTypeConformance2, v50);
    sub_10000A7C0(v48, type metadata accessor for AFBackgroundView);
    goto LABEL_6;
  }
  *v8 = swift_getKeyPath(&unk_100071258);
  v32 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v8, v32, 0);
  v33 = (char *)v8 + *(int *)(v29 + 20);
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100071288);
  v33[8] = 0;
  v34 = v63;
  v35 = sub_100007AB0((uint64_t)v8, v63, type metadata accessor for AFBackgroundView);
  v36 = v27;
  static RedactionReasons.placeholder.getter(v35);
  v37 = sub_100007A70(&qword_100090E08, type metadata accessor for AFBackgroundView, (uint64_t)&unk_100072E50);
  v38 = v55;
  View.redacted(reason:)(v36, v29, v37);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v59);
  sub_10000A7C0(v34, type metadata accessor for AFBackgroundView);
  v40 = v56;
  v39 = v57;
  v41 = v65;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v38, v65);
  v42 = v67;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v67, v40, v41);
  swift_storeEnumTagMultiPayload(v42, v66, 0);
  v70 = v29;
  v71 = v37;
  v43 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  v44 = (uint64_t)v64;
  _ConditionalContent<>.init(storage:)(v42, v41, v29, v43, v37);
  v45 = v40;
  v31 = v69;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v45, v41);
LABEL_6:
  sub_1000135C4(v31, &v70);
  v52 = v70;
  sub_100007964(v44, (uint64_t)v22, &qword_100090E00);
  sub_100007964((uint64_t)v22, v30, &qword_100090E00);
  *(_QWORD *)(v30 + *(int *)(sub_100006454(&qword_100090E10) + 48)) = v52;
  swift_retain(v52);
  sub_100007928(v44, &qword_100090E00);
  swift_release(v52);
  return sub_100007928((uint64_t)v22, &qword_100090E00);
}

uint64_t sub_100014BB8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_100007AF4(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AFEntryView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10008E018, v7 + v5, v6 | 7);
  result = sub_100007AB0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for AFEntryView);
  *a2 = sub_100014D4C;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v8;
  return result;
}

uint64_t sub_100014C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for AFEntryView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)v6 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = type metadata accessor for AFTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v11 + 36)]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100014D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AFEntryView(0) - 8) + 80);
  return sub_10001432C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100014D98()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100014DB8()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100014DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DEC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100014DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100014E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DEC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100014E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000150A0(&qword_1000907B0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_100014EBC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1000155A4(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_100006A4C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100015074@<X0>(uint64_t a1@<X8>)
{
  return sub_1000150A0(&qword_1000907A8, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100073DC0, a1);
}

uint64_t sub_1000150A0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007964(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_1000155A4(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1000152D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000150A0(&qword_1000908D0, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100015308@<X0>(uint64_t a1@<X8>)
{
  return sub_1000150A0(&qword_1000908D8, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x8000000100073E00, a1);
}

uint64_t sub_100015334@<X0>(uint64_t a1@<X8>)
{
  return sub_1000150A0(&qword_100090EA0, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100073DE0, a1);
}

uint64_t sub_100015360()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100015380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_100007A70(&qword_100090E88, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_1000153E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_100007A70(&qword_100090E88, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_100015458()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100015478()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100015498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014DEC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000154BC(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000154CC(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **sub_100015500(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *sub_100015510(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_1000155A4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100015674(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100015CA4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100015CA4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100015C84(v12);
  return v7;
}

uint64_t sub_100015674(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10001582C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10001582C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1000158C0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100015B10(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100015B10(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1000158C0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100015A34(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100015A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100006454(&qword_100090E80);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100015A98(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100015B10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006454(&qword_100090E80);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100015C5C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100015C84(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100015CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100015CE0()
{
  return sub_1000078D8(&qword_100090E90, &qword_100090E98, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t *sub_100015D0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = *(int *)(a3 + 24);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = (int *)type metadata accessor for AFTimelineEntry(0);
    v19[v22[5]] = v20[v22[5]];
    v19[v22[6]] = v20[v22[6]];
    v19[v22[7]] = v20[v22[7]];
    v19[v22[8]] = v20[v22[8]];
    v23 = v22[9];
    v24 = *(_QWORD *)&v20[v23];
    *(_QWORD *)&v19[v23] = v24;
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t sub_100015E80(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = *(_QWORD *)&v8[*(int *)(type metadata accessor for AFTimelineEntry(0) + 36)];
  return swift_bridgeObjectRelease(v10);
}

uint64_t *sub_100015F48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = (int *)type metadata accessor for AFTimelineEntry(0);
  v17[v20[5]] = v18[v20[5]];
  v17[v20[6]] = v18[v20[6]];
  v17[v20[7]] = v18[v20[7]];
  v17[v20[8]] = v18[v20[8]];
  v21 = v20[9];
  v22 = *(_QWORD *)&v18[v21];
  *(_QWORD *)&v17[v21] = v22;
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t *sub_100016090(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = (int *)type metadata accessor for AFTimelineEntry(0);
  v17[v20[5]] = v18[v20[5]];
  v17[v20[6]] = v18[v20[6]];
  v17[v20[7]] = v18[v20[7]];
  v17[v20[8]] = v18[v20[8]];
  v21 = v20[9];
  v22 = *(_QWORD *)&v18[v21];
  v23 = *(_QWORD *)&v17[v21];
  *(_QWORD *)&v17[v21] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

char *sub_1000161FC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = (int *)type metadata accessor for AFTimelineEntry(0);
  v13[v16[5]] = v14[v16[5]];
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  *(_QWORD *)&v13[v16[9]] = *(_QWORD *)&v14[v16[9]];
  return a1;
}

char *sub_10001633C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = (int *)type metadata accessor for AFTimelineEntry(0);
  v13[v16[5]] = v14[v16[5]];
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v17 = v16[9];
  v18 = *(_QWORD *)&v13[v17];
  *(_QWORD *)&v13[v17] = *(_QWORD *)&v14[v17];
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_10001649C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000164A8);
}

uint64_t sub_1000164A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for GeometryProxy(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for AFTimelineEntry(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100016544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016550);
}

uint64_t sub_100016550(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for GeometryProxy(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for AFTimelineEntry(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AFLargeContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100090F00;
  if (!qword_100090F00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFLargeContentView);
  return result;
}

void sub_100016630(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_1000126B4(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for GeometryProxy(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AFTimelineEntry(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000166D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074878, 1);
}

uint64_t sub_1000166E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a1;
  v2 = sub_100006454(&qword_100090F40);
  __chkstk_darwin(v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006454(&qword_100090F48);
  __chkstk_darwin(v52);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100006454(&qword_100090F50);
  __chkstk_darwin(v53);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AFLargeContentView(0);
  v14 = v1 + *(int *)(v13 + 20);
  sub_100014E8C((uint64_t)v12);
  v15 = sub_10000ABA8(v14, (uint64_t)v12);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  GeometryProxy.size.getter(v16);
  v18 = v1 + *(int *)(v13 + 24);
  v19 = (v17 + -28.0 - (v15 + v15))
      / (double)*(uint64_t *)(*(_QWORD *)(v18 + *(int *)(type metadata accessor for AFTimelineEntry(0) + 36)) + 16);
  *(_QWORD *)v4 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 0;
  v20 = sub_100006454(&qword_100090F58);
  v21 = sub_100016A60(v1, (uint64_t)&v4[*(int *)(v20 + 44)], v15, v19);
  v22 = static Edge.Set.leading.getter(v21);
  v23 = static Edge.Set.trailing.getter();
  v24 = static Edge.Set.bottom.getter();
  v25 = Edge.Set.init(rawValue:)(0);
  v26 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v26 & v22) != v22)
    v25 = Edge.Set.init(rawValue:)(v25 | v22);
  v27 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v27 & v23) != v23)
    v25 = Edge.Set.init(rawValue:)(v25 | v23);
  v28 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v28 & v24) != v24)
    LOBYTE(v25) = Edge.Set.init(rawValue:)(v25 | v24);
  v29 = EdgeInsets.init(_all:)(v15);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100007964((uint64_t)v4, (uint64_t)v6, &qword_100090F40);
  v36 = &v6[*(int *)(v52 + 36)];
  *v36 = v25;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  v37 = sub_100007928((uint64_t)v4, &qword_100090F40);
  v38 = static Edge.Set.top.getter(v37);
  v39 = Edge.Set.init(rawValue:)(0);
  v40 = v39;
  v41 = Edge.Set.init(rawValue:)(v39);
  if (Edge.Set.init(rawValue:)(v41 & v38) != v38)
    LOBYTE(v40) = Edge.Set.init(rawValue:)(v40 | v38);
  v42 = EdgeInsets.init(_all:)(v15 + 28.0);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_100007964((uint64_t)v6, (uint64_t)v8, &qword_100090F48);
  v49 = &v8[*(int *)(v53 + 36)];
  *v49 = v40;
  *((double *)v49 + 1) = v42;
  *((_QWORD *)v49 + 2) = v44;
  *((_QWORD *)v49 + 3) = v46;
  *((_QWORD *)v49 + 4) = v48;
  v49[40] = 0;
  sub_100007928((uint64_t)v6, &qword_100090F48);
  return sub_100017CB4((uint64_t)v8, v54);
}

uint64_t sub_100016A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t);
  int v71;
  int v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t OpaqueTypeConformance2;
  char *v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[2];
  _QWORD v128[3];

  v121 = a2;
  v7 = sub_100006454(&qword_100090F60);
  v119 = *(_QWORD *)(v7 - 8);
  v120 = v7;
  __chkstk_darwin(v7);
  v110 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v109 = (char *)&v104 - v10;
  v123 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v112 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v111 = (uint64_t)&v104 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v104 - v16;
  __chkstk_darwin(v18);
  v126 = (uint64_t)&v104 - v19;
  v20 = sub_100006454(&qword_100090F68);
  __chkstk_darwin(v20);
  v118 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v117 = (char *)&v104 - v23;
  v24 = type metadata accessor for AFLargeContentView(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  __chkstk_darwin(v24);
  v27 = sub_100006454(&qword_100090F70);
  v115 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v114 = (char *)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100006454(&qword_100090F78);
  v29 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v113 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100006454(&qword_100090F80);
  __chkstk_darwin(v31);
  v116 = (uint64_t)&v104 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v35 = (char *)&v104 - v34;
  v36 = a1 + *(int *)(v24 + 24);
  v124 = *(int *)(type metadata accessor for AFTimelineEntry(0) + 36);
  v125 = v36;
  v37 = *(_QWORD *)(v36 + v124);
  v38 = *(_QWORD *)(v37 + 16);
  v108 = (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = v26;
  v106 = v25;
  if (v38)
  {
    v128[0] = v37;
    sub_100017CFC(a1, (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    v39 = *(unsigned __int8 *)(v25 + 80);
    v104 = v27;
    v40 = v29;
    v41 = v17;
    v42 = a1;
    v43 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    v44 = (v39 + 16) & ~v39;
    v45 = (v26 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    v105 = v11;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_10008E0B8, v46 + 8, v39 | 7);
    v48 = (uint64_t)v43;
    a1 = v42;
    v17 = v41;
    v29 = v40;
    sub_100017D44(v48, v47 + v44);
    *(double *)(v47 + v45) = a3;
    *(double *)(v47 + v46) = a4;
    swift_bridgeObjectRetain(v37);
    v49 = sub_100006454(&qword_100090FC0);
    v50 = sub_100006454(&qword_100090FC8);
    v51 = sub_1000078D8(&qword_100090FD0, &qword_100090FC0, (uint64_t)&protocol conformance descriptor for [A]);
    v52 = sub_10001802C();
    v53 = sub_100018194();
    v54 = v114;
    v55 = v49;
    v11 = v105;
    ForEach<>.init(_:content:)(v128, sub_100017FC0, v47, v55, &type metadata for String, v50, v51, v52, v53);
    v56 = sub_1000181D8();
    v57 = v113;
    v58 = v104;
    View.unredacted()(v104, v56);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v54, v58);
    v59 = v57;
    v60 = v122;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v35, v59, v122);
    v61 = 0;
    v62 = v60;
  }
  else
  {
    v61 = 1;
    v62 = v122;
  }
  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v64 = 1;
  v63(v35, v61, 1, v62);
  v65 = *(_QWORD *)(*(_QWORD *)(v125 + v124) + 16);
  v66 = v126;
  v67 = a1;
  sub_100014E8C(v126);
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v69 = v123;
  v68(v17, v66, v123);
  v70 = *(uint64_t (**)(char *, uint64_t))(v11 + 88);
  v71 = v70(v17, v69);
  v72 = enum case for WidgetFamily.systemSmall(_:);
  if (v71 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v71 == enum case for WidgetFamily.systemMedium(_:))
    {
      v64 = 2;
      goto LABEL_11;
    }
    if (v71 == enum case for WidgetFamily.systemLarge(_:))
      goto LABEL_8;
    if (v71 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v64 = 8;
    }
    else
    {
      v64 = 1;
      if (v71 != enum case for WidgetFamily.accessoryCircular(_:)
        && v71 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v71 != enum case for WidgetFamily.accessoryInline(_:))
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v69);
LABEL_8:
        v64 = 4;
      }
    }
  }
LABEL_11:
  v73 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v73(v126, v69);
  if (v65 >= v64)
  {
    v79 = 1;
    v81 = v119;
    v80 = v120;
    v82 = (uint64_t)v117;
LABEL_27:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v82, v79, 1, v80);
    v100 = v116;
    sub_100007964((uint64_t)v35, v116, &qword_100090F80);
    v101 = v118;
    sub_100007964(v82, v118, &qword_100090F68);
    v102 = v121;
    sub_100007964(v100, v121, &qword_100090F80);
    v103 = sub_100006454(&qword_100090F88);
    sub_100007964(v101, v102 + *(int *)(v103 + 48), &qword_100090F68);
    sub_100007928(v82, &qword_100090F68);
    sub_100007928((uint64_t)v35, &qword_100090F80);
    sub_100007928(v101, &qword_100090F68);
    return sub_100007928(v100, &qword_100090F80);
  }
  v74 = *(_QWORD *)(*(_QWORD *)(v125 + v124) + 16);
  v75 = v111;
  sub_100014E8C(v111);
  v76 = v112;
  v68(v112, v75, v69);
  v77 = v70(v76, v69);
  if (v77 == v72)
  {
    v78 = 1;
    goto LABEL_25;
  }
  if (v77 == enum case for WidgetFamily.systemMedium(_:))
  {
    v78 = 2;
    goto LABEL_25;
  }
  if (v77 == enum case for WidgetFamily.systemLarge(_:))
    goto LABEL_18;
  if (v77 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v78 = 8;
  }
  else
  {
    v78 = 1;
    if (v77 != enum case for WidgetFamily.accessoryCircular(_:)
      && v77 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v77 != enum case for WidgetFamily.accessoryInline(_:))
    {
      v73((uint64_t)v112, v69);
LABEL_18:
      v78 = 4;
    }
  }
LABEL_25:
  result = ((uint64_t (*)(uint64_t, uint64_t))v73)(v75, v69);
  if (v78 >= v74)
  {
    v128[0] = v74;
    v128[1] = v78;
    KeyPath = swift_getKeyPath(&unk_100071390);
    v85 = v108;
    sub_100017CFC(v67, v108);
    v86 = *(unsigned __int8 *)(v106 + 80);
    v87 = (v86 + 16) & ~v86;
    v88 = (v107 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
    v89 = (v88 + 15) & 0xFFFFFFFFFFFFFFF8;
    v90 = swift_allocObject(&unk_10008E090, v89 + 8, v86 | 7);
    sub_100017D44(v85, v90 + v87);
    *(double *)(v90 + v88) = a3;
    *(double *)(v90 + v89) = a4;
    v91 = sub_100006454(&qword_100090F90);
    v92 = sub_100006454(&qword_100090F98);
    v93 = sub_100017DF4();
    v94 = sub_100006494(&qword_100090FB0);
    v95 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v127[0] = v94;
    v127[1] = v95;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v127, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v97 = v110;
    ForEach<>.init(_:id:content:)(v128, KeyPath, sub_100017D88, v90, v91, v92, v93, &protocol witness table for Int, OpaqueTypeConformance2);
    v81 = v119;
    v80 = v120;
    v98 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
    v99 = v109;
    v98(v109, v97, v120);
    v82 = (uint64_t)v117;
    v98(v117, v99, v80);
    v79 = 0;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001733C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (**v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  void (**v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  void (**v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void (**v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v87 = a2;
  v94 = a3;
  v83 = type metadata accessor for RedactionReasons(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100006454(&qword_100091000);
  v9 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100006454(&qword_100090FB0);
  __chkstk_darwin(v92);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100006454(&qword_100090F98);
  v85 = *(char **)(v93 - 8);
  __chkstk_darwin(v93);
  v79 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v84 = (void (**)(char *, char *, uint64_t))((char *)&v76 - v15);
  v90 = sub_100006454(&qword_100091008);
  __chkstk_darwin(v90);
  v91 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for WidgetFamily(0);
  v17 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v20);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006454(&qword_100091010);
  v23 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100006454(&qword_100090FE0);
  __chkstk_darwin(v88);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006454(&qword_100091018);
  __chkstk_darwin(v89);
  v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  if ((a1[2] & 1) != 0)
  {
    sub_100014E8C((uint64_t)v19);
    v33 = v78;
    static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)(v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v86);
    v34 = type metadata accessor for AFLargeContentView(0);
    v35 = GeometryProxy.size.getter(v34) - (a4 + a4);
    v37 = static Alignment.center.getter(v36);
    _FrameLayout.init(width:height:alignment:)(&v97, *(_QWORD *)&v35, 0, *(_QWORD *)&a5, 0, v37, v38);
    v39 = v80;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v33, v80);
    v40 = v92;
    v41 = &v12[*(int *)(v92 + 36)];
    v42 = v98;
    *(_OWORD *)v41 = v97;
    *((_OWORD *)v41 + 1) = v42;
    *((_OWORD *)v41 + 2) = v99;
    v43 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v33, v39);
    v44 = v81;
    static RedactionReasons.placeholder.getter(v43);
    v45 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v46 = v79;
    View.redacted(reason:)(v44, v40, v45);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v83);
    sub_100007928((uint64_t)v12, &qword_100090FB0);
    v48 = v84;
    v47 = v85;
    v49 = v93;
    (*((void (**)(char *, char *, uint64_t))v85 + 4))((char *)v84, v46, v93);
    v50 = v91;
    (*((void (**)(char *, _QWORD, uint64_t))v47 + 2))(v91, v48, v49);
    swift_storeEnumTagMultiPayload(v50, v90, 1);
    v51 = sub_100018120(&qword_100090FE8, &qword_100090FE0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>);
    v95 = v88;
    v96 = v51;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v95 = v40;
    v96 = v45;
    v53 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v50, v89, v49, OpaqueTypeConformance2, v53);
    return (*((uint64_t (**)(void (**)(char *, char *, uint64_t), uint64_t))v47 + 1))(v48, v49);
  }
  else
  {
    v55 = *a1;
    v56 = a1[1];
    v84 = v32;
    v85 = (char *)&v76 - v31;
    sub_100014E8C((uint64_t)v19);
    static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)(v25, v22, v55, 0, v19, 0xD000000000000017, 0x8000000100073B00, v56);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v86);
    sub_100007928((uint64_t)v22, &qword_100090BC8);
    v57 = type metadata accessor for AFLargeContentView(0);
    v58 = GeometryProxy.size.getter(v57) - (a4 + a4);
    v60 = static Alignment.center.getter(v59);
    _FrameLayout.init(width:height:alignment:)(&v97, *(_QWORD *)&v58, 0, *(_QWORD *)&a5, 0, v60, v61);
    v62 = v77;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v25, v77);
    v63 = v88;
    v64 = &v27[*(int *)(v88 + 36)];
    v65 = v98;
    *(_OWORD *)v64 = v97;
    *((_OWORD *)v64 + 1) = v65;
    *((_OWORD *)v64 + 2) = v99;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v62);
    v66 = sub_100018120(&qword_100090FE8, &qword_100090FE0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>);
    View.unredacted()(v63, v66);
    sub_100007928((uint64_t)v27, &qword_100090FE0);
    v67 = v84;
    v68 = v85;
    v69 = v89;
    v84[4](v85, v29, v89);
    v70 = v67[2];
    v71 = v67;
    v72 = v91;
    v70(v91, v68, v69);
    swift_storeEnumTagMultiPayload(v72, v90, 0);
    v95 = v63;
    v96 = v66;
    v73 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v74 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v95 = v92;
    v96 = v74;
    v75 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v72, v69, v93, v73, v75);
    return ((uint64_t (*)(char *, uint64_t))v71[1])(v68, v69);
  }
}

uint64_t sub_100017A64@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];

  v30 = a1;
  v31 = type metadata accessor for RedactionReasons(0);
  v29 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006454(&qword_100091000);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_100090FB0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E8C((uint64_t)v10);
  static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = type metadata accessor for AFLargeContentView(0);
  v19 = GeometryProxy.size.getter(v18) - (a2 + a2);
  v21 = static Alignment.center.getter(v20);
  _FrameLayout.init(width:height:alignment:)(v32, *(_QWORD *)&v19, 0, *(_QWORD *)&a3, 0, v21, v22);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
  v23 = &v17[*(int *)(v15 + 36)];
  v24 = v32[1];
  *(_OWORD *)v23 = v32[0];
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v32[2];
  v25 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static RedactionReasons.placeholder.getter(v25);
  v26 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
  View.redacted(reason:)(v6, v15, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v31);
  return sub_100007928((uint64_t)v17, &qword_100090FB0);
}

uint64_t sub_100017CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100090F50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFLargeContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFLargeContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017D88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = type metadata accessor for AFLargeContentView(0);
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100017A64(a1, *(double *)(v1 + v4), *(double *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100017DF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090FA0;
  if (!qword_100090FA0)
  {
    v1 = sub_100006494(&qword_100090F90);
    sub_100017E60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100090FA0);
  }
  return result;
}

unint64_t sub_100017E60()
{
  unint64_t result;

  result = qword_100090FA8;
  if (!qword_100090FA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100090FA8);
  }
  return result;
}

uint64_t sub_100017EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for AFLargeContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v10 = (char *)v6 + *(int *)(v1 + 20);
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)v6 + *(int *)(v1 + 24);
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = type metadata accessor for AFTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v12[*(int *)(v14 + 36)]);
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_100017FC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for AFLargeContentView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001733C(a1, v2 + v6, a2, *(double *)(v2 + v7), *(double *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_10001802C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_100090FD8;
  if (!qword_100090FD8)
  {
    v1 = sub_100006494(&qword_100090FC8);
    v4 = sub_100006494(&qword_100090FE0);
    v5 = sub_100018120(&qword_100090FE8, &qword_100090FE0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v2 = sub_100006494(&qword_100090FB0);
    v3 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100090FD8);
  }
  return result;
}

uint64_t sub_100018120(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    swift_getOpaqueTypeConformance2(v6, a3, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100018194()
{
  unint64_t result;

  result = qword_100090FF0;
  if (!qword_100090FF0)
  {
    result = swift_getWitnessTable(&unk_100071118, &type metadata for AFActivityItemEntry);
    atomic_store(result, (unint64_t *)&qword_100090FF0);
  }
  return result;
}

unint64_t sub_1000181D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090FF8;
  if (!qword_100090FF8)
  {
    v1 = sub_100006494(&qword_100090F70);
    sub_10001802C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100090FF8);
  }
  return result;
}

unint64_t sub_100018240()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091020;
  if (!qword_100091020)
  {
    v1 = sub_100006494(&qword_100090F50);
    sub_1000182AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091020);
  }
  return result;
}

unint64_t sub_1000182AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091028;
  if (!qword_100091028)
  {
    v1 = sub_100006494(&qword_100090F48);
    sub_1000078D8(&qword_100091030, &qword_100090F40, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091028);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ContinuePlayingWidget(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for ContinuePlayingWidget(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for ContinuePlayingWidget(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for ContinuePlayingWidget(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContinuePlayingWidget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuePlayingWidget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinuePlayingWidget()
{
  return &type metadata for ContinuePlayingWidget;
}

uint64_t sub_100018468(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000748BC, 1);
}

uint64_t sub_100018478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;

  v82 = a1;
  v97 = a3;
  v4 = sub_100006454(&qword_100090758);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006454(&qword_100090750);
  v84 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006454(&qword_100090748);
  v12 = *(_QWORD *)(v11 - 8);
  v85 = v11;
  v86 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_100090740);
  v16 = *(_QWORD *)(v15 - 8);
  v90 = v15;
  v91 = v16;
  __chkstk_darwin(v15);
  v83 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006454(&qword_100090738);
  v19 = *(_QWORD *)(v18 - 8);
  v92 = v18;
  v93 = v19;
  __chkstk_darwin(v18);
  v87 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100006454(&qword_100091038);
  v94 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v88 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006454(&qword_100091040);
  v23 = *(_QWORD *)(v22 - 8);
  v95 = v22;
  v96 = v23;
  __chkstk_darwin(v22);
  v89 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CPEntryView(0);
  sub_100018C74();
  sub_100018CBC();
  swift_bridgeObjectRetain(a2);
  StaticConfiguration.init<A>(kind:provider:content:)(v82, a2);
  v25 = sub_100018D00();
  WidgetConfiguration.eventMachServiceName(_:)(0xD000000000000024, 0x8000000100073E20, v4, v25);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v26 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x8000000100073E50);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v99 = v4;
  v100 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of WidgetConfiguration.eventMachServiceName(_:)>>, 1);
  WidgetConfiguration.configurationDisplayName(_:)(v26, v28, v30 & 1, v32, v8, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v10, v8);
  v34 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x8000000100073E70);
  v36 = v35;
  LOBYTE(v28) = v37;
  v39 = v38;
  v99 = v8;
  v100 = OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v41 = v28 & 1;
  v42 = v83;
  v43 = v85;
  WidgetConfiguration.description(_:)(v34, v36, v41, v39, v85, v40);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v36);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v14, v43);
  v45 = sub_100006454(&qword_100091058);
  v86 = v45;
  v46 = type metadata accessor for WidgetFamily(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(_QWORD *)(v47 + 72);
  v49 = *(unsigned __int8 *)(v47 + 80);
  v84 = ((v49 + 32) & ~v49) + 4 * v48;
  v50 = (v49 + 32) & ~v49;
  v81 = v50;
  v82 = v49 | 7;
  v51 = swift_allocObject(v45, v84, v49 | 7);
  v80 = xmmword_1000713B0;
  *(_OWORD *)(v51 + 16) = xmmword_1000713B0;
  v52 = v51 + v50;
  v79 = enum case for WidgetFamily.systemSmall(_:);
  v53 = *(void (**)(uint64_t))(v47 + 104);
  v53(v52);
  v78 = enum case for WidgetFamily.systemMedium(_:);
  v53(v52 + v48);
  v74 = 2 * v48;
  v77 = enum case for WidgetFamily.systemLarge(_:);
  v53(v52 + 2 * v48);
  v76 = 3 * v48;
  v75 = enum case for WidgetFamily.systemExtraLarge(_:);
  v53(v52 + 3 * v48);
  v99 = v44;
  v100 = v40;
  v54 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v55 = v87;
  v56 = v90;
  WidgetConfiguration.supportedFamilies(_:)(v51, v90, v54);
  swift_bridgeObjectRelease(v51);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v42, v56);
  v99 = v56;
  v100 = v54;
  v57 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v58 = v88;
  v59 = v92;
  WidgetConfiguration._containerBackgroundRemovable(_:)(0, v92, v57);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v55, v59);
  v99 = v59;
  v100 = v57;
  v60 = swift_getOpaqueTypeConformance2(&v99, &unk_1000745E0, 1);
  v61 = v89;
  v62 = v98;
  WidgetConfiguration.supportsAccentedContent()(v98, v60);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v58, v62);
  v63 = sub_100006454(&qword_100091060);
  v64 = *(_QWORD *)(type metadata accessor for WidgetLocation(0) - 8);
  v65 = swift_allocObject(v63, ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ 3 * *(_QWORD *)(v64 + 72), *(unsigned __int8 *)(v64 + 80) | 7);
  *(_OWORD *)(v65 + 16) = xmmword_1000713C0;
  v66 = static WidgetLocation.standBy.getter();
  v67 = static WidgetLocation.lockScreen.getter(v66);
  static WidgetLocation.iPhoneWidgetsOnMac.getter(v67);
  v68 = swift_allocObject(v86, v84, v82);
  *(_OWORD *)(v68 + 16) = v80;
  v69 = v68 + v81;
  ((void (*)(uint64_t, _QWORD, uint64_t))v53)(v68 + v81, v79, v46);
  ((void (*)(uint64_t, _QWORD, uint64_t))v53)(v69 + v48, v78, v46);
  ((void (*)(uint64_t, _QWORD, uint64_t))v53)(v69 + v74, v77, v46);
  ((void (*)(uint64_t, _QWORD, uint64_t))v53)(v69 + v76, v75, v46);
  v99 = v98;
  v100 = v60;
  v70 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
  v71 = v95;
  WidgetConfiguration.disfavoredLocations(_:for:)(v65, v68, v95, v70);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v68);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v61, v71);
}

uint64_t sub_100018B9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018D4C(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_100071438);
  v7 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for CPEntryView(0);
  return sub_10000A6DC((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

void sub_100018C4C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000001000713C0;
}

uint64_t sub_100018C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100018478(*v1, v1[1], a1);
}

unint64_t sub_100018C74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091048;
  if (!qword_100091048)
  {
    v1 = type metadata accessor for CPEntryView(255);
    result = swift_getWitnessTable(&unk_100072C80, v1);
    atomic_store(result, (unint64_t *)&qword_100091048);
  }
  return result;
}

unint64_t sub_100018CBC()
{
  unint64_t result;

  result = qword_100091050;
  if (!qword_100091050)
  {
    result = swift_getWitnessTable(&unk_100070FC4, &type metadata for CPProvider);
    atomic_store(result, (unint64_t *)&qword_100091050);
  }
  return result;
}

unint64_t sub_100018D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090760;
  if (!qword_100090760)
  {
    v1 = sub_100006494(&qword_100090758);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100090760);
  }
  return result;
}

uint64_t sub_100018D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CPTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v0 = sub_100006494(&qword_100091040);
  v1 = sub_100006494(&qword_100091038);
  v2 = sub_100006494(&qword_100090738);
  v3 = sub_100006494(&qword_100090740);
  v4 = sub_100006494(&qword_100090748);
  v5 = sub_100006494(&qword_100090750);
  v13 = sub_100006494(&qword_100090758);
  v14 = sub_100018D00();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.eventMachServiceName(_:)>>, 1);
  v13 = v5;
  v14 = OpaqueTypeConformance2;
  v7 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v13 = v4;
  v14 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v13 = v3;
  v14 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v13 = v2;
  v14 = v9;
  v10 = swift_getOpaqueTypeConformance2(&v13, &unk_1000745E0, 1);
  v13 = v1;
  v14 = v10;
  v11 = swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
  v13 = v0;
  v14 = v11;
  return swift_getOpaqueTypeConformance2(&v13, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disfavoredLocations(_:for:)>>, 1);
}

ValueMetadata *type metadata accessor for ActivityFeedWidget()
{
  return &type metadata for ActivityFeedWidget;
}

uint64_t sub_100018EFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074900, 1);
}

uint64_t sub_100018F0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;

  v106 = a1;
  v86 = type metadata accessor for WidgetBackgroundStyle(0);
  v1 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v3 = (char *)&v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100090790);
  v87 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100090788);
  *(_QWORD *)&v88 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100090780);
  v11 = *(_QWORD *)(v10 - 8);
  v90 = v10;
  v91 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006454(&qword_100090778);
  v15 = *(_QWORD *)(v14 - 8);
  v93 = v14;
  v94 = v15;
  __chkstk_darwin(v14);
  v89 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006454(&qword_100090770);
  v18 = *(_QWORD *)(v17 - 8);
  v98 = v17;
  v99 = v18;
  __chkstk_darwin(v17);
  v92 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006454(&qword_100090768);
  v21 = *(_QWORD *)(v20 - 8);
  v100 = v20;
  v101 = v21;
  __chkstk_darwin(v20);
  v95 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100006454(&qword_100091068);
  v24 = *(_QWORD *)(v23 - 8);
  v102 = v23;
  v103 = v24;
  __chkstk_darwin(v23);
  v96 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006454(&qword_100091070);
  v27 = *(_QWORD *)(v26 - 8);
  v104 = v26;
  v105 = v27;
  __chkstk_darwin(v26);
  v97 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AFEntryView(0);
  sub_10001985C();
  sub_1000198A4();
  StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000017, 0x8000000100073B00);
  v29 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetBackgroundStyle.blur(_:), v86);
  v30 = sub_1000198E8();
  WidgetConfiguration.preferredBackgroundStyle(_:)(v3, v4, v30);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v29);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v6, v4);
  v107 = v4;
  v108 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  WidgetConfiguration.eventMachServiceName(_:)(0xD000000000000024, 0x8000000100073E20, v7, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v9, v7);
  v32 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x8000000100073E90);
  v33 = Text.init(_:tableName:bundle:comment:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  v107 = v7;
  v108 = OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of WidgetConfiguration.eventMachServiceName(_:)>>, 1);
  v41 = v89;
  v42 = v90;
  WidgetConfiguration.configurationDisplayName(_:)(v33, v35, v39, v37, v90, v40);
  sub_100007918(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v91 + 8))(v13, v42);
  v44 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x8000000100073EB0);
  v45 = Text.init(_:tableName:bundle:comment:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  v107 = v43;
  v108 = v40;
  v52 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v54 = v92;
  v53 = v93;
  WidgetConfiguration.description(_:)(v45, v47, v51, v49, v93, v52);
  sub_100007918(v45, v47, v51);
  swift_bridgeObjectRelease(v49);
  v55 = v53;
  (*(void (**)(char *, uint64_t))(v94 + 8))(v41, v53);
  v56 = sub_100006454(&qword_100091058);
  v94 = v56;
  v57 = type metadata accessor for WidgetFamily(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(_QWORD *)(v58 + 72);
  v60 = *(unsigned __int8 *)(v58 + 80);
  v91 = ((v60 + 32) & ~v60) + 4 * v59;
  v61 = (v60 + 32) & ~v60;
  v89 = (char *)v61;
  v90 = v60 | 7;
  v62 = swift_allocObject(v56, v91, v60 | 7);
  v88 = xmmword_1000713B0;
  *(_OWORD *)(v62 + 16) = xmmword_1000713B0;
  LODWORD(v87) = enum case for WidgetFamily.systemSmall(_:);
  v63 = *(void (**)(uint64_t))(v58 + 104);
  v63(v62 + v61);
  LODWORD(v86) = enum case for WidgetFamily.systemMedium(_:);
  v63(v62 + v61 + v59);
  v82 = 2 * v59;
  v85 = enum case for WidgetFamily.systemLarge(_:);
  v63(v62 + v61 + 2 * v59);
  v84 = 3 * v59;
  v83 = enum case for WidgetFamily.systemExtraLarge(_:);
  v63(v62 + v61 + 3 * v59);
  v107 = v55;
  v108 = v52;
  v64 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v65 = v95;
  v66 = v98;
  WidgetConfiguration.supportedFamilies(_:)(v62, v98, v64);
  swift_bridgeObjectRelease(v62);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v54, v66);
  v107 = v66;
  v108 = v64;
  v67 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v68 = v96;
  v69 = v100;
  WidgetConfiguration._containerBackgroundRemovable(_:)(0, v100, v67);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v65, v69);
  v107 = v69;
  v108 = v67;
  v70 = swift_getOpaqueTypeConformance2(&v107, &unk_1000745E0, 1);
  v71 = v97;
  v72 = v102;
  WidgetConfiguration.supportsAccentedContent()(v102, v70);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v68, v72);
  v73 = sub_100006454(&qword_100091060);
  v74 = type metadata accessor for WidgetLocation(0);
  v75 = swift_allocObject(v73, ((*(unsigned __int8 *)(*(_QWORD *)(v74 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v74 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v74 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v74 - 8) + 80) | 7);
  *(_OWORD *)(v75 + 16) = xmmword_100071470;
  v76 = static WidgetLocation.lockScreen.getter(v75);
  static WidgetLocation.iPhoneWidgetsOnMac.getter(v76);
  v77 = swift_allocObject(v94, v91, v90);
  *(_OWORD *)(v77 + 16) = v88;
  v78 = &v89[v77];
  ((void (*)(char *, _QWORD, uint64_t))v63)(&v89[v77], v87, v57);
  ((void (*)(char *, _QWORD, uint64_t))v63)(&v78[v59], v86, v57);
  ((void (*)(char *, _QWORD, uint64_t))v63)(&v78[v82], v85, v57);
  ((void (*)(char *, _QWORD, uint64_t))v63)(&v78[v84], v83, v57);
  v107 = v72;
  v108 = v70;
  v79 = swift_getOpaqueTypeConformance2(&v107, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
  v80 = v104;
  WidgetConfiguration.disfavoredLocations(_:for:)(v75, v77, v104, v79);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v77);
  return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v71, v80);
}

uint64_t sub_1000197A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for AFTimelineEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010FC4(a1, (uint64_t)v6);
  *a2 = swift_getKeyPath(&unk_1000714E8);
  v7 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(a2, v7, 0);
  v8 = type metadata accessor for AFEntryView(0);
  return sub_100011008((uint64_t)v6, (uint64_t)a2 + *(int *)(v8 + 20));
}

unint64_t sub_10001985C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091078;
  if (!qword_100091078)
  {
    v1 = type metadata accessor for AFEntryView(255);
    result = swift_getWitnessTable(&unk_100071208, v1);
    atomic_store(result, (unint64_t *)&qword_100091078);
  }
  return result;
}

unint64_t sub_1000198A4()
{
  unint64_t result;

  result = qword_100091080;
  if (!qword_100091080)
  {
    result = swift_getWitnessTable(&unk_100071194, &type metadata for AFTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_100091080);
  }
  return result;
}

unint64_t sub_1000198E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090798;
  if (!qword_100090798)
  {
    v1 = sub_100006494(&qword_100090790);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100090798);
  }
  return result;
}

uint64_t sub_100019938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v0 = sub_100006494(&qword_100091070);
  v1 = sub_100006494(&qword_100091068);
  v2 = sub_100006494(&qword_100090768);
  v3 = sub_100006494(&qword_100090770);
  v4 = sub_100006494(&qword_100090778);
  v5 = sub_100006494(&qword_100090780);
  v6 = sub_100006494(&qword_100090788);
  v15 = sub_100006494(&qword_100090790);
  v16 = sub_1000198E8();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v15 = v6;
  v16 = OpaqueTypeConformance2;
  v8 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.eventMachServiceName(_:)>>, 1);
  v15 = v5;
  v16 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v15 = v4;
  v16 = v9;
  v10 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v15 = v3;
  v16 = v10;
  v11 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v15 = v2;
  v16 = v11;
  v12 = swift_getOpaqueTypeConformance2(&v15, &unk_1000745E0, 1);
  v15 = v1;
  v16 = v12;
  v13 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
  v15 = v0;
  v16 = v13;
  return swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disfavoredLocations(_:for:)>>, 1);
}

uint64_t sub_100019AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100019AC0);
}

uint64_t sub_100019AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for GeometryProxy(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for AFTimelineEntry(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100019B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100019B68);
}

uint64_t sub_100019B68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for GeometryProxy(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for AFTimelineEntry(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AFMediumContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000910E0;
  if (!qword_1000910E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFMediumContentView);
  return result;
}

uint64_t sub_100019C48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074950, 1);
}

uint64_t sub_100019C58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = a1;
  v2 = sub_100006454(&qword_100090F40);
  __chkstk_darwin(v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006454(&qword_100090F48);
  __chkstk_darwin(v52);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100006454(&qword_100090F50);
  __chkstk_darwin(v53);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AFMediumContentView(0);
  v14 = v1 + *(int *)(v13 + 20);
  sub_100014E8C((uint64_t)v12);
  v15 = sub_10000ABA8(v14, (uint64_t)v12);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  GeometryProxy.size.getter(v16);
  v18 = v1 + *(int *)(v13 + 24);
  v19 = (v17 + -28.0 - (v15 + v15))
      / (double)*(uint64_t *)(*(_QWORD *)(v18 + *(int *)(type metadata accessor for AFTimelineEntry(0) + 36)) + 16);
  *(_QWORD *)v4 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 0;
  v20 = sub_100006454(&qword_100090F58);
  v21 = sub_100019FD8(v1, (uint64_t)&v4[*(int *)(v20 + 44)], v15, v19);
  v22 = static Edge.Set.leading.getter(v21);
  v23 = static Edge.Set.trailing.getter();
  v24 = static Edge.Set.bottom.getter();
  v25 = Edge.Set.init(rawValue:)(0);
  v26 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v26 & v22) != v22)
    v25 = Edge.Set.init(rawValue:)(v25 | v22);
  v27 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v27 & v23) != v23)
    v25 = Edge.Set.init(rawValue:)(v25 | v23);
  v28 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v28 & v24) != v24)
    LOBYTE(v25) = Edge.Set.init(rawValue:)(v25 | v24);
  v29 = EdgeInsets.init(_all:)(v15);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100007964((uint64_t)v4, (uint64_t)v6, &qword_100090F40);
  v36 = &v6[*(int *)(v52 + 36)];
  *v36 = v25;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  v37 = sub_100007928((uint64_t)v4, &qword_100090F40);
  v38 = static Edge.Set.top.getter(v37);
  v39 = Edge.Set.init(rawValue:)(0);
  v40 = v39;
  v41 = Edge.Set.init(rawValue:)(v39);
  if (Edge.Set.init(rawValue:)(v41 & v38) != v38)
    LOBYTE(v40) = Edge.Set.init(rawValue:)(v40 | v38);
  v42 = EdgeInsets.init(_all:)(v15 + 28.0);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_100007964((uint64_t)v6, (uint64_t)v8, &qword_100090F48);
  v49 = &v8[*(int *)(v53 + 36)];
  *v49 = v40;
  *((double *)v49 + 1) = v42;
  *((_QWORD *)v49 + 2) = v44;
  *((_QWORD *)v49 + 3) = v46;
  *((_QWORD *)v49 + 4) = v48;
  v49[40] = 0;
  sub_100007928((uint64_t)v6, &qword_100090F48);
  return sub_100017CB4((uint64_t)v8, v54);
}

uint64_t sub_100019FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t);
  int v71;
  int v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t OpaqueTypeConformance2;
  char *v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[2];
  _QWORD v128[3];

  v121 = a2;
  v7 = sub_100006454(&qword_100090F60);
  v119 = *(_QWORD *)(v7 - 8);
  v120 = v7;
  __chkstk_darwin(v7);
  v110 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v109 = (char *)&v104 - v10;
  v123 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v112 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v111 = (uint64_t)&v104 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v104 - v16;
  __chkstk_darwin(v18);
  v126 = (uint64_t)&v104 - v19;
  v20 = sub_100006454(&qword_100090F68);
  __chkstk_darwin(v20);
  v118 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v117 = (char *)&v104 - v23;
  v24 = type metadata accessor for AFMediumContentView(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  __chkstk_darwin(v24);
  v27 = sub_100006454(&qword_100090F70);
  v115 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v114 = (char *)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100006454(&qword_100090F78);
  v29 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v113 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100006454(&qword_100090F80);
  __chkstk_darwin(v31);
  v116 = (uint64_t)&v104 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v35 = (char *)&v104 - v34;
  v36 = a1 + *(int *)(v24 + 24);
  v124 = *(int *)(type metadata accessor for AFTimelineEntry(0) + 36);
  v125 = v36;
  v37 = *(_QWORD *)(v36 + v124);
  v38 = *(_QWORD *)(v37 + 16);
  v108 = (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = v26;
  v106 = v25;
  if (v38)
  {
    v128[0] = v37;
    sub_10001B22C(a1, (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    v39 = *(unsigned __int8 *)(v25 + 80);
    v104 = v27;
    v40 = v29;
    v41 = v17;
    v42 = a1;
    v43 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    v44 = (v39 + 16) & ~v39;
    v45 = (v26 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    v105 = v11;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_10008E250, v46 + 8, v39 | 7);
    v48 = (uint64_t)v43;
    a1 = v42;
    v17 = v41;
    v29 = v40;
    sub_10001B274(v48, v47 + v44);
    *(double *)(v47 + v45) = a3;
    *(double *)(v47 + v46) = a4;
    swift_bridgeObjectRetain(v37);
    v49 = sub_100006454(&qword_100090FC0);
    v50 = sub_100006454(&qword_100090FC8);
    v51 = sub_1000078D8(&qword_100090FD0, &qword_100090FC0, (uint64_t)&protocol conformance descriptor for [A]);
    v52 = sub_10001802C();
    v53 = sub_100018194();
    v54 = v114;
    v55 = v49;
    v11 = v105;
    ForEach<>.init(_:content:)(v128, sub_10001B440, v47, v55, &type metadata for String, v50, v51, v52, v53);
    v56 = sub_1000181D8();
    v57 = v113;
    v58 = v104;
    View.unredacted()(v104, v56);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v54, v58);
    v59 = v57;
    v60 = v122;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v35, v59, v122);
    v61 = 0;
    v62 = v60;
  }
  else
  {
    v61 = 1;
    v62 = v122;
  }
  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v64 = 1;
  v63(v35, v61, 1, v62);
  v65 = *(_QWORD *)(*(_QWORD *)(v125 + v124) + 16);
  v66 = v126;
  v67 = a1;
  sub_100014E8C(v126);
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v69 = v123;
  v68(v17, v66, v123);
  v70 = *(uint64_t (**)(char *, uint64_t))(v11 + 88);
  v71 = v70(v17, v69);
  v72 = enum case for WidgetFamily.systemSmall(_:);
  if (v71 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v71 == enum case for WidgetFamily.systemMedium(_:))
    {
      v64 = 2;
      goto LABEL_11;
    }
    if (v71 == enum case for WidgetFamily.systemLarge(_:))
      goto LABEL_8;
    if (v71 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v64 = 8;
    }
    else
    {
      v64 = 1;
      if (v71 != enum case for WidgetFamily.accessoryCircular(_:)
        && v71 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v71 != enum case for WidgetFamily.accessoryInline(_:))
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v69);
LABEL_8:
        v64 = 4;
      }
    }
  }
LABEL_11:
  v73 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v73(v126, v69);
  if (v65 >= v64)
  {
    v79 = 1;
    v81 = v119;
    v80 = v120;
    v82 = (uint64_t)v117;
LABEL_27:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v82, v79, 1, v80);
    v100 = v116;
    sub_100007964((uint64_t)v35, v116, &qword_100090F80);
    v101 = v118;
    sub_100007964(v82, v118, &qword_100090F68);
    v102 = v121;
    sub_100007964(v100, v121, &qword_100090F80);
    v103 = sub_100006454(&qword_100090F88);
    sub_100007964(v101, v102 + *(int *)(v103 + 48), &qword_100090F68);
    sub_100007928(v82, &qword_100090F68);
    sub_100007928((uint64_t)v35, &qword_100090F80);
    sub_100007928(v101, &qword_100090F68);
    return sub_100007928(v100, &qword_100090F80);
  }
  v74 = *(_QWORD *)(*(_QWORD *)(v125 + v124) + 16);
  v75 = v111;
  sub_100014E8C(v111);
  v76 = v112;
  v68(v112, v75, v69);
  v77 = v70(v76, v69);
  if (v77 == v72)
  {
    v78 = 1;
    goto LABEL_25;
  }
  if (v77 == enum case for WidgetFamily.systemMedium(_:))
  {
    v78 = 2;
    goto LABEL_25;
  }
  if (v77 == enum case for WidgetFamily.systemLarge(_:))
    goto LABEL_18;
  if (v77 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v78 = 8;
  }
  else
  {
    v78 = 1;
    if (v77 != enum case for WidgetFamily.accessoryCircular(_:)
      && v77 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v77 != enum case for WidgetFamily.accessoryInline(_:))
    {
      v73((uint64_t)v112, v69);
LABEL_18:
      v78 = 4;
    }
  }
LABEL_25:
  result = ((uint64_t (*)(uint64_t, uint64_t))v73)(v75, v69);
  if (v78 >= v74)
  {
    v128[0] = v74;
    v128[1] = v78;
    KeyPath = swift_getKeyPath(&unk_1000715A0);
    v85 = v108;
    sub_10001B22C(v67, v108);
    v86 = *(unsigned __int8 *)(v106 + 80);
    v87 = (v86 + 16) & ~v86;
    v88 = (v107 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
    v89 = (v88 + 15) & 0xFFFFFFFFFFFFFFF8;
    v90 = swift_allocObject(&unk_10008E228, v89 + 8, v86 | 7);
    sub_10001B274(v85, v90 + v87);
    *(double *)(v90 + v88) = a3;
    *(double *)(v90 + v89) = a4;
    v91 = sub_100006454(&qword_100090F90);
    v92 = sub_100006454(&qword_100090F98);
    v93 = sub_100017DF4();
    v94 = sub_100006494(&qword_100090FB0);
    v95 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v127[0] = v94;
    v127[1] = v95;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v127, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v97 = v110;
    ForEach<>.init(_:id:content:)(v128, KeyPath, sub_10001B2B8, v90, v91, v92, v93, &protocol witness table for Int, OpaqueTypeConformance2);
    v81 = v119;
    v80 = v120;
    v98 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
    v99 = v109;
    v98(v109, v97, v120);
    v82 = (uint64_t)v117;
    v98(v117, v99, v80);
    v79 = 0;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001A8B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (**v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (**v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t OpaqueTypeConformance2;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  void (**v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  void (**v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void (**v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v87 = a2;
  v94 = a3;
  v83 = type metadata accessor for RedactionReasons(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100006454(&qword_100091000);
  v9 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100006454(&qword_100090FB0);
  __chkstk_darwin(v92);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100006454(&qword_100090F98);
  v85 = *(char **)(v93 - 8);
  __chkstk_darwin(v93);
  v79 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v84 = (void (**)(char *, char *, uint64_t))((char *)&v76 - v15);
  v90 = sub_100006454(&qword_100091008);
  __chkstk_darwin(v90);
  v91 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for WidgetFamily(0);
  v17 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v20);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006454(&qword_100091010);
  v23 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100006454(&qword_100090FE0);
  __chkstk_darwin(v88);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006454(&qword_100091018);
  __chkstk_darwin(v89);
  v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  if ((a1[2] & 1) != 0)
  {
    sub_100014E8C((uint64_t)v19);
    v33 = v78;
    static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)(v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v86);
    v34 = type metadata accessor for AFMediumContentView(0);
    v35 = GeometryProxy.size.getter(v34) - (a4 + a4);
    v37 = static Alignment.center.getter(v36);
    _FrameLayout.init(width:height:alignment:)(&v97, *(_QWORD *)&v35, 0, *(_QWORD *)&a5, 0, v37, v38);
    v39 = v80;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v33, v80);
    v40 = v92;
    v41 = &v12[*(int *)(v92 + 36)];
    v42 = v98;
    *(_OWORD *)v41 = v97;
    *((_OWORD *)v41 + 1) = v42;
    *((_OWORD *)v41 + 2) = v99;
    v43 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v33, v39);
    v44 = v81;
    static RedactionReasons.placeholder.getter(v43);
    v45 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v46 = v79;
    View.redacted(reason:)(v44, v40, v45);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v83);
    sub_100007928((uint64_t)v12, &qword_100090FB0);
    v48 = v84;
    v47 = v85;
    v49 = v93;
    (*((void (**)(char *, char *, uint64_t))v85 + 4))((char *)v84, v46, v93);
    v50 = v91;
    (*((void (**)(char *, _QWORD, uint64_t))v47 + 2))(v91, v48, v49);
    swift_storeEnumTagMultiPayload(v50, v90, 1);
    v51 = sub_100018120(&qword_100090FE8, &qword_100090FE0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>);
    v95 = v88;
    v96 = v51;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v95 = v40;
    v96 = v45;
    v53 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v50, v89, v49, OpaqueTypeConformance2, v53);
    return (*((uint64_t (**)(void (**)(char *, char *, uint64_t), uint64_t))v47 + 1))(v48, v49);
  }
  else
  {
    v55 = *a1;
    v56 = a1[1];
    v84 = v32;
    v85 = (char *)&v76 - v31;
    sub_100014E8C((uint64_t)v19);
    static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)(v25, v22, v55, 0, v19, 0xD000000000000017, 0x8000000100073B00, v56);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v86);
    sub_100007928((uint64_t)v22, &qword_100090BC8);
    v57 = type metadata accessor for AFMediumContentView(0);
    v58 = GeometryProxy.size.getter(v57) - (a4 + a4);
    v60 = static Alignment.center.getter(v59);
    _FrameLayout.init(width:height:alignment:)(&v97, *(_QWORD *)&v58, 0, *(_QWORD *)&a5, 0, v60, v61);
    v62 = v77;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v27, v25, v77);
    v63 = v88;
    v64 = &v27[*(int *)(v88 + 36)];
    v65 = v98;
    *(_OWORD *)v64 = v97;
    *((_OWORD *)v64 + 1) = v65;
    *((_OWORD *)v64 + 2) = v99;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v62);
    v66 = sub_100018120(&qword_100090FE8, &qword_100090FE0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>);
    View.unredacted()(v63, v66);
    sub_100007928((uint64_t)v27, &qword_100090FE0);
    v67 = v84;
    v68 = v85;
    v69 = v89;
    v84[4](v85, v29, v89);
    v70 = v67[2];
    v71 = v67;
    v72 = v91;
    v70(v91, v68, v69);
    swift_storeEnumTagMultiPayload(v72, v90, 0);
    v95 = v63;
    v96 = v66;
    v73 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v74 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
    v95 = v92;
    v96 = v74;
    v75 = swift_getOpaqueTypeConformance2(&v95, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v72, v69, v93, v73, v75);
    return ((uint64_t (*)(char *, uint64_t))v71[1])(v68, v69);
  }
}

uint64_t sub_10001AFDC@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];

  v30 = a1;
  v31 = type metadata accessor for RedactionReasons(0);
  v29 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006454(&qword_100091000);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_100090FB0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E8C((uint64_t)v10);
  static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = type metadata accessor for AFMediumContentView(0);
  v19 = GeometryProxy.size.getter(v18) - (a2 + a2);
  v21 = static Alignment.center.getter(v20);
  _FrameLayout.init(width:height:alignment:)(v32, *(_QWORD *)&v19, 0, *(_QWORD *)&a3, 0, v21, v22);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
  v23 = &v17[*(int *)(v15 + 36)];
  v24 = v32[1];
  *(_OWORD *)v23 = v32[0];
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v32[2];
  v25 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static RedactionReasons.placeholder.getter(v25);
  v26 = sub_100018120(&qword_100090FB8, &qword_100090FB0, (uint64_t)&opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>);
  View.redacted(reason:)(v6, v15, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v31);
  return sub_100007928((uint64_t)v17, &qword_100090FB0);
}

uint64_t sub_10001B22C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFMediumContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFMediumContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001B2B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = type metadata accessor for AFMediumContentView(0);
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001AFDC(a1, *(double *)(v1 + v4), *(double *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10001B328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for AFMediumContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v10 = (char *)v6 + *(int *)(v1 + 20);
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)v6 + *(int *)(v1 + 24);
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = type metadata accessor for AFTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v12[*(int *)(v14 + 36)]);
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_10001B440@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for AFMediumContentView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001A8B4(a1, v2 + v6, a2, *(double *)(v2 + v7), *(double *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t *sub_10001B4B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = (int *)type metadata accessor for CPTimelineEntry(0);
    v19 = v18[5];
    v20 = *(_QWORD *)&v16[v19];
    *(_QWORD *)&v15[v19] = v20;
    v15[v18[6]] = v16[v18[6]];
    v15[v18[7]] = v16[v18[7]];
    v15[v18[8]] = v16[v18[8]];
    v15[v18[9]] = v16[v18[9]];
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_10001B5FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = *(_QWORD *)&v6[*(int *)(type metadata accessor for CPTimelineEntry(0) + 20)];
  return swift_bridgeObjectRelease(v8);
}

uint64_t *sub_10001B698(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = (int *)type metadata accessor for CPTimelineEntry(0);
  v17 = v16[5];
  v18 = *(_QWORD *)&v14[v17];
  *(_QWORD *)&v13[v17] = v18;
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v13[v16[9]] = v14[v16[9]];
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t *sub_10001B7B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = (int *)type metadata accessor for CPTimelineEntry(0);
  v20 = v19[5];
  v21 = *(_QWORD *)&v17[v20];
  v22 = *(_QWORD *)&v16[v20];
  *(_QWORD *)&v16[v20] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v16[v19[6]] = v17[v19[6]];
  v16[v19[7]] = v17[v19[7]];
  v16[v19[8]] = v17[v19[8]];
  v16[v19[9]] = v17[v19[9]];
  return a1;
}

char *sub_10001B918(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)&v9[v12[5]] = *(_QWORD *)&v10[v12[5]];
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v9[v12[9]] = v10[v12[9]];
  return a1;
}

char *sub_10001BA2C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for CPTimelineEntry(0);
  v13 = v12[5];
  v14 = *(_QWORD *)&v9[v13];
  *(_QWORD *)&v9[v13] = *(_QWORD *)&v10[v13];
  swift_bridgeObjectRelease(v14);
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v9[v12[9]] = v10[v12[9]];
  return a1;
}

uint64_t sub_10001BB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001BB70);
}

uint64_t sub_10001BB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for CPTimelineEntry(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10001BBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001BBF4);
}

uint64_t sub_10001BBF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for CPTimelineEntry(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CPTitleGradientView(uint64_t a1)
{
  uint64_t result;

  result = qword_100091178;
  if (!qword_100091178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPTitleGradientView);
  return result;
}

void sub_10001BCB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10001BD3C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100071628;
    v4 = type metadata accessor for CPTimelineEntry(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

void sub_10001BD3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100090830)
  {
    v2 = type metadata accessor for WidgetRenderingMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100090830);
  }
}

uint64_t sub_10001BD90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000749A0, 1);
}

uint64_t sub_10001BDA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;

  v2 = v1;
  v77 = a1;
  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_1000911B8);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100006454(&qword_1000911C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100006454(&qword_1000911C8);
  __chkstk_darwin(v73);
  v74 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006454(&qword_1000911D0);
  __chkstk_darwin(v14);
  v75 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - v17;
  v76 = sub_100006454(&qword_1000911D8);
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CPTitleGradientView(0);
  v21 = v2 + *(int *)(v20 + 24);
  v22 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v21 + *(int *)(v22 + 32)) == 1)
  {
    v23 = v78;
    swift_storeEnumTagMultiPayload(v78, v76, 0);
    v24 = sub_10001CF18();
    return _ConditionalContent<>.init(storage:)(v23, &type metadata for EmptyView, v14, &protocol witness table for EmptyView, v24);
  }
  else
  {
    *v9 = static Alignment.center.getter(v22);
    v9[1] = v26;
    v27 = sub_100006454(&qword_1000911E0);
    v28 = sub_10001C308(v2, (uint64_t)v9 + *(int *)(v27 + 44));
    v29 = (double *)(v2 + *(int *)(v20 + 20));
    v30 = *v29;
    v31 = v29[1];
    v32 = static Alignment.center.getter(v28);
    sub_100062DD8(v30, 0, 0.0, 1, v30, 0, v31, 0, (uint64_t)v12, 0.0, 1, v31, 0, v32, v33);
    v34 = sub_100007928((uint64_t)v9, &qword_1000911B8);
    v35 = *v29;
    v36 = v29[1];
    v37 = static Alignment.center.getter(v34);
    sub_100062E30(v35, 0, 0.0, 1, v35, 0, v36, 0, (uint64_t)&v79, 0.0, 1, v36, 0, v37, v38);
    v39 = v79;
    LOBYTE(v31) = v80;
    v40 = v81;
    v71 = v3;
    v41 = v82;
    v69 = v4;
    v42 = v83;
    v72 = v18;
    v43 = v84;
    v67 = v85;
    v70 = v14;
    v44 = v86;
    v66 = v87;
    v68 = v6;
    v45 = v88;
    v65 = v89;
    v64 = v90;
    v63 = v91;
    v62 = v92;
    v46 = (uint64_t)v12;
    v47 = (uint64_t)v12;
    v48 = v74;
    sub_100007964(v46, v74, &qword_1000911C0);
    v49 = v48 + *(int *)(v73 + 36);
    *(_QWORD *)v49 = v39;
    *(_BYTE *)(v49 + 8) = LOBYTE(v31);
    *(_QWORD *)(v49 + 16) = v40;
    *(_BYTE *)(v49 + 24) = v41;
    *(_QWORD *)(v49 + 32) = v42;
    *(_BYTE *)(v49 + 40) = v43;
    *(_QWORD *)(v49 + 48) = v67;
    *(_BYTE *)(v49 + 56) = v44;
    *(_QWORD *)(v49 + 64) = v66;
    *(_BYTE *)(v49 + 72) = v45;
    *(_QWORD *)(v49 + 80) = v65;
    *(_BYTE *)(v49 + 88) = v64;
    v50 = v62;
    *(_QWORD *)(v49 + 96) = v63;
    *(_QWORD *)(v49 + 104) = v50;
    sub_100007928(v47, &qword_1000911C0);
    KeyPath = swift_getKeyPath(&unk_100071690);
    v52 = v69;
    v53 = v68;
    v54 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for ColorScheme.light(_:), v71);
    v55 = v70;
    v56 = (uint64_t)v75;
    v57 = (uint64_t *)&v75[*(int *)(v70 + 36)];
    v58 = sub_100006454(&qword_100090950);
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))((char *)v57 + *(int *)(v58 + 28), v53, v54);
    *v57 = KeyPath;
    sub_100007964(v48, v56, &qword_1000911C8);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    sub_100007928(v48, &qword_1000911C8);
    v59 = (uint64_t)v72;
    sub_100007A2C(v56, (uint64_t)v72, &qword_1000911D0);
    v60 = v78;
    sub_100007964(v59, v78, &qword_1000911D0);
    swift_storeEnumTagMultiPayload(v60, v76, 1);
    v61 = sub_10001CF18();
    _ConditionalContent<>.init(storage:)(v60, &type metadata for EmptyView, v55, &protocol witness table for EmptyView, v61);
    return sub_100007928(v59, &qword_1000911D0);
  }
}

uint64_t sub_10001C308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  id v81;
  _QWORD *v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;

  v148 = a1;
  v145 = a2;
  v2 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v2);
  v142 = (char *)&v135 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for BlendMode(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (char *)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100006454(&qword_100091218);
  __chkstk_darwin(v138);
  v144 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v143 = (uint64_t)&v135 - v7;
  v151 = type metadata accessor for WidgetRenderingMode(0);
  v152 = *(_QWORD **)(v151 - 8);
  __chkstk_darwin(v151);
  *(_QWORD *)&v150 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v149 = (uint64_t)&v135 - v10;
  v11 = sub_100006454(&qword_100091220);
  __chkstk_darwin(v11);
  v153 = (uint64_t *)((char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v154 = (uint64_t)&v135 - v14;
  *(_QWORD *)&v146 = sub_100006454(&qword_100091228);
  v15 = __chkstk_darwin(v146);
  v17 = (char *)&v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Material(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006454(&qword_100091230);
  __chkstk_darwin(v22);
  v24 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006454(&qword_100091238);
  __chkstk_darwin(v25);
  v27 = (uint64_t)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v147 = sub_100006454(&qword_100091240);
  __chkstk_darwin(v147);
  v29 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v135 - v32;
  v34 = static Material.ultraThin.getter(v31);
  v35 = static Edge.Set.all.getter(v34);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v17, v21, v18);
  v17[*(int *)(v146 + 36)] = v35;
  sub_100007964((uint64_t)v17, (uint64_t)v24, &qword_100091228);
  sub_100007928((uint64_t)v17, &qword_100091228);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v37 = static Color.black.getter(v36);
  v38 = Color.opacity(_:)(0.2);
  v39 = swift_release(v37);
  LOBYTE(v37) = static Edge.Set.all.getter(v39);
  sub_100007964((uint64_t)v24, v27, &qword_100091230);
  v40 = (uint64_t)v33;
  v41 = v27 + *(int *)(v25 + 36);
  *(_QWORD *)v41 = v38;
  v42 = v148;
  *(_BYTE *)(v41 + 8) = v37;
  sub_100007928((uint64_t)v24, &qword_100091230);
  v43 = sub_100006454(&qword_100091248);
  v44 = swift_allocObject(v43, 48, 7);
  v137 = xmmword_100071470;
  *(_OWORD *)(v44 + 16) = xmmword_100071470;
  *(_QWORD *)(v44 + 32) = static Color.black.getter(v44);
  v45 = ((uint64_t (*)(void))static Color.clear.getter)();
  *(_QWORD *)(v44 + 40) = v45;
  v163 = v44;
  specialized Array._endMutation()(v45);
  v46 = Gradient.init(colors:)(v163);
  v47 = static UnitPoint.bottom.getter();
  v49 = v48;
  v50 = static UnitPoint.top.getter();
  v52 = LinearGradient.init(gradient:startPoint:endPoint:)(&v155, v46, v47, v49, v50, v51);
  v53 = v155;
  v146 = v156;
  v54 = v157;
  v55 = v158;
  v56 = static UnitPoint.topLeading.getter(v52);
  v58 = v57;
  v59 = static UnitPoint.leading.getter();
  v61 = v60;
  sub_100007964(v27, (uint64_t)v29, &qword_100091238);
  v62 = &v29[*(int *)(v147 + 36)];
  *(_QWORD *)v62 = v53;
  *(_OWORD *)(v62 + 8) = v146;
  *((_QWORD *)v62 + 3) = v54;
  *((_QWORD *)v62 + 4) = v55;
  *((_QWORD *)v62 + 5) = 0x3FD1DF46A2529D39;
  *((double *)v62 + 6) = v56;
  *((_QWORD *)v62 + 7) = v58;
  v147 = xmmword_1000715F0;
  *((_OWORD *)v62 + 4) = xmmword_1000715F0;
  *((double *)v62 + 10) = v59;
  *((_QWORD *)v62 + 11) = v61;
  sub_100007928(v27, &qword_100091238);
  sub_100007A2C((uint64_t)v29, (uint64_t)v33, &qword_100091240);
  v63 = v149;
  v64 = sub_100015074(v149);
  v65 = v150;
  static WidgetRenderingMode.accented.getter(v64);
  v66 = sub_10001D0A4();
  v67 = v151;
  LOBYTE(v27) = dispatch thunk of static Equatable.== infix(_:_:)(v63, v65, v151, v66);
  v68 = (void (*)(uint64_t, uint64_t))v152[1];
  v68(v65, v67);
  v69 = v67;
  v70 = v154;
  v68(v63, v69);
  if ((v27 & 1) != 0)
    goto LABEL_22;
  v71 = v42 + *(int *)(type metadata accessor for CPTitleGradientView(0) + 24);
  v72 = type metadata accessor for CPTimelineEntry(0);
  v73 = *(_QWORD *)(v71 + *(int *)(v72 + 20));
  if (!((unint64_t)v73 >> 62))
  {
    v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v73);
    if (v74)
      goto LABEL_4;
    goto LABEL_21;
  }
  if (v73 < 0)
    v130 = *(_QWORD *)(v71 + *(int *)(v72 + 20));
  else
    v130 = v73 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v73);
  result = _CocoaArrayWrapper.endIndex.getter(v130);
  if (!result)
  {
LABEL_21:
    swift_bridgeObjectRelease(v73);
    v70 = v154;
LABEL_22:
    v131 = sub_100006454(&qword_100091258);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v70, 1, 1, v131);
LABEL_23:
    sub_100007964(v40, (uint64_t)v29, &qword_100091240);
    v132 = v153;
    sub_100007964(v70, (uint64_t)v153, &qword_100091220);
    v133 = v145;
    sub_100007964((uint64_t)v29, v145, &qword_100091240);
    v134 = sub_100006454(&qword_100091260);
    sub_100007964((uint64_t)v132, v133 + *(int *)(v134 + 48), &qword_100091220);
    sub_100007928(v70, &qword_100091220);
    sub_100007928(v40, &qword_100091240);
    sub_100007928((uint64_t)v132, &qword_100091220);
    return sub_100007928((uint64_t)v29, &qword_100091240);
  }
LABEL_4:
  if ((v73 & 0xC000000000000001) != 0)
  {
    v76 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v73);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v76 = *(_QWORD *)(v73 + 32);
    swift_retain(v76);
LABEL_7:
    swift_bridgeObjectRelease(v73);
    v77 = *(void **)(v76 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    v136 = v40;
    if (v77)
    {
      v78 = v77;
    }
    else
    {
      v79 = *(void **)(v76 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v79)
        v80 = v79;
      else
        v80 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v78 = v80;
    }
    v81 = v77;
    swift_release(v76);
    v82 = v78;
    v83 = Color.init(uiColor:)();
    v152 = v82;
    objc_msgSend(v82, "_luminance");
    if (v84 <= 0.8)
      v85 = -0.2;
    else
      v85 = (v84 + -0.8) / -0.2 * 0.2 + -0.2;
    v151 = *(_QWORD *)&v85;
    v86 = swift_allocObject(v43, 64, 7);
    *(_OWORD *)(v86 + 16) = xmmword_1000713B0;
    *(_QWORD *)(v86 + 32) = v83;
    *(_QWORD *)(v86 + 40) = v83;
    swift_retain_n(v83, 2);
    *(_QWORD *)(v86 + 48) = Color.opacity(_:)(0.5);
    v87 = ((uint64_t (*)(void))static Color.clear.getter)();
    *(_QWORD *)(v86 + 56) = v87;
    v163 = v86;
    specialized Array._endMutation()(v87);
    v88 = Gradient.init(colors:)(v163);
    v89 = static UnitPoint.bottom.getter();
    v91 = v90;
    v92 = static UnitPoint.top.getter();
    v94 = LinearGradient.init(gradient:startPoint:endPoint:)(&v159, v88, v89, v91, v92, v93);
    v95 = v159;
    v150 = v160;
    v149 = v161;
    v148 = v162;
    *(_QWORD *)&v146 = static UnitPoint.topLeading.getter(v94);
    v135 = v96;
    v97 = static UnitPoint.leading.getter();
    v99 = v98;
    v100 = swift_allocObject(v43, 48, 7);
    *(_OWORD *)(v100 + 16) = v137;
    *(_QWORD *)(v100 + 32) = v83;
    v101 = swift_retain(v83);
    v102 = static Color.clear.getter(v101);
    *(_QWORD *)(v100 + 40) = v102;
    v163 = v100;
    specialized Array._endMutation()(v102);
    v103 = Gradient.init(colors:)(v163);
    v104 = static UnitPoint.bottom.getter();
    v106 = v105;
    v107 = static UnitPoint.top.getter();
    v109 = LinearGradient.init(gradient:startPoint:endPoint:)(&v163, v103, v104, v106, v107, v108);
    v110 = v163;
    v137 = v164;
    v111 = v165;
    v112 = v166;
    v113 = static UnitPoint.topLeading.getter(v109);
    v115 = v114;
    v116 = static UnitPoint.leading.getter();
    v118 = v117;
    v119 = v140;
    v120 = v139;
    v121 = v141;
    (*(void (**)(char *, _QWORD, uint64_t))(v140 + 104))(v139, enum case for BlendMode.color(_:), v141);
    v122 = (uint64_t)v142;
    (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v142, v120, v121);
    v123 = (uint64_t)v144;
    sub_10001D0EC(v122, (uint64_t)&v144[*(int *)(v138 + 36)]);
    *(_QWORD *)v123 = v110;
    *(_OWORD *)(v123 + 8) = v137;
    *(_QWORD *)(v123 + 24) = v111;
    *(_QWORD *)(v123 + 32) = v112;
    *(_QWORD *)(v123 + 40) = 0x3FD1DF46A2529D39;
    *(double *)(v123 + 48) = v113;
    *(_QWORD *)(v123 + 56) = v115;
    *(_OWORD *)(v123 + 64) = v147;
    *(double *)(v123 + 80) = v116;
    *(_QWORD *)(v123 + 88) = v118;
    swift_bridgeObjectRetain(v110);
    sub_10001D130(v122);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
    sub_10001D16C(&v163);
    v124 = v143;
    sub_100007A2C(v123, v143, &qword_100091218);
    sub_100007964(v124, v123, &qword_100091218);
    v125 = v153;
    *v153 = v95;
    *(_OWORD *)(v125 + 1) = v150;
    v126 = v148;
    v125[3] = v149;
    v125[4] = v126;
    v125[5] = 0x3FD1DF46A2529D39;
    v127 = v135;
    v125[6] = v146;
    v125[7] = v127;
    *((_OWORD *)v125 + 4) = v147;
    *((double *)v125 + 10) = v97;
    v125[11] = v99;
    v125[12] = v151;
    v128 = sub_100006454(&qword_100091250);
    sub_100007964(v123, (uint64_t)v125 + *(int *)(v128 + 48), &qword_100091218);
    swift_bridgeObjectRetain(v95);

    swift_release(v83);
    sub_100007928(v124, &qword_100091218);
    sub_100007928(v123, &qword_100091218);
    swift_bridgeObjectRelease(v95);
    v129 = sub_100006454(&qword_100091258);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 56))(v125, 0, 1, v129);
    v70 = v154;
    sub_100007A2C((uint64_t)v125, v154, &qword_100091220);
    v40 = v136;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

unint64_t sub_10001CF18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000911E8;
  if (!qword_1000911E8)
  {
    v1 = sub_100006494(&qword_1000911D0);
    sub_10001CF9C();
    sub_1000078D8(&qword_100090978, &qword_100090950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000911E8);
  }
  return result;
}

unint64_t sub_10001CF9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000911F0;
  if (!qword_1000911F0)
  {
    v1 = sub_100006494(&qword_1000911C8);
    sub_10001D020();
    sub_1000078D8(&qword_100091208, &qword_100091210, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000911F0);
  }
  return result;
}

unint64_t sub_10001D020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000911F8;
  if (!qword_1000911F8)
  {
    v1 = sub_100006494(&qword_1000911C0);
    sub_1000078D8(&qword_100091200, &qword_1000911B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000911F8);
  }
  return result;
}

unint64_t sub_10001D0A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100090990;
  if (!qword_100090990)
  {
    v1 = type metadata accessor for WidgetRenderingMode(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetRenderingMode, v1);
    atomic_store(result, (unint64_t *)&qword_100090990);
  }
  return result;
}

uint64_t sub_10001D0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001D130(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10001D16C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

unint64_t sub_10001D198()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091268;
  if (!qword_100091268)
  {
    v1 = sub_100006494(&qword_100091270);
    sub_10001CF18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091268);
  }
  return result;
}

uint64_t *sub_10001D204(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = *(int *)(a3 + 24);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v31 = *v25;
      *v24 = *v25;
      swift_retain(v31);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
  return a1;
}

uint64_t sub_10001D3D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v10 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
}

uint64_t *sub_10001D4E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = *(int *)(a3 + 24);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = v22;
    v27 = v24;
    v28 = 1;
  }
  else
  {
    v29 = *v23;
    *v22 = *v23;
    swift_retain(v29);
    v26 = v22;
    v27 = v24;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
  return a1;
}

uint64_t *sub_10001D684(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000908D0);
    v6 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100007928((uint64_t)a1 + v12, &qword_1000907B0);
    v15 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = *(int *)(a3 + 24);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_100007928((uint64_t)a1 + v21, &qword_1000907A8);
    v24 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  return a1;
}

char *sub_10001D85C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  return a1;
}

char *sub_10001D9F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000908D0);
    v6 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100007928((uint64_t)&a1[v8], &qword_1000907B0);
    v11 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = *(int *)(a3 + 24);
    v14 = &a1[v13];
    v15 = &a2[v13];
    sub_100007928((uint64_t)&a1[v13], &qword_1000907A8);
    v16 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001DBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001DBC8);
}

uint64_t sub_10001DBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100006454(&qword_1000908C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_100006454(&qword_1000907C0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_100006454(&qword_1000907B8);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10001DC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001DC78);
}

uint64_t sub_10001DC78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100006454(&qword_1000908C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_100006454(&qword_1000907C0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_100006454(&qword_1000907B8);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AFEmptyStateView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000912D0;
  if (!qword_1000912D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFEmptyStateView);
  return result;
}

void sub_10001DD60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_10000764C(319, (unint64_t *)&unk_1000912E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10001DE30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000749F0, 1);
}

uint64_t sub_10001DE40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  type metadata accessor for AFEmptyStateView(0);
  v15 = sub_100015074((uint64_t)v14);
  static WidgetRenderingMode.accented.getter(v15);
  v16 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v17 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v8, v16);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  v18(v14, v8);
  if ((v17 & 1) != 0)
  {
    v19 = enum case for BlendMode.normal(_:);
    v20 = type metadata accessor for BlendMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v28, v19, v20);
  }
  else
  {
    v22 = v28;
    sub_1000152D8((uint64_t)v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ColorScheme.dark(_:), v1);
    v23 = static ColorScheme.== infix(_:_:)(v7, v4);
    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v4, v1);
    v24(v7, v1);
    v25 = type metadata accessor for BlendMode(0);
    if ((v23 & 1) != 0)
      v26 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    else
      v26 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v22, *v26, v25);
  }
}

void sub_10001E064()
{
  NSString v0;
  id v1;
  id v2;
  id v3;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v0);

  if (v1)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleTitle1);
    v3 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v2);

    objc_msgSend(v1, "imageWithConfiguration:", v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10001E160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;

  v2 = v1;
  v4 = sub_100006454(&qword_100091318);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100091320);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100091328);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100091330);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v17 = sub_100006454(&qword_100091338);
  v18 = sub_10001E440(v2, (uint64_t *)&v6[*(int *)(v17 + 44)]);
  LOBYTE(v2) = static Edge.Set.top.getter(v18);
  v19 = EdgeInsets.init(_all:)(28.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  sub_100007964((uint64_t)v6, (uint64_t)v9, &qword_100091318);
  v26 = &v9[*(int *)(v7 + 36)];
  *v26 = v2;
  *((double *)v26 + 1) = v19;
  *((_QWORD *)v26 + 2) = v21;
  *((_QWORD *)v26 + 3) = v23;
  *((_QWORD *)v26 + 4) = v25;
  v26[40] = 0;
  v27 = sub_100007928((uint64_t)v6, &qword_100091318);
  v28 = static Edge.Set.leading.getter(v27);
  v29 = static Edge.Set.trailing.getter();
  v30 = Edge.Set.init(rawValue:)(0);
  v31 = Edge.Set.init(rawValue:)(v30);
  if (Edge.Set.init(rawValue:)(v31 & v28) != v28)
    v30 = Edge.Set.init(rawValue:)(v30 | v28);
  v32 = Edge.Set.init(rawValue:)(v30);
  if (Edge.Set.init(rawValue:)(v32 & v29) != v29)
    LOBYTE(v30) = Edge.Set.init(rawValue:)(v30 | v29);
  sub_100007964((uint64_t)v9, (uint64_t)v12, &qword_100091320);
  v33 = &v12[*(int *)(v10 + 36)];
  *v33 = v30;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  v33[40] = 1;
  v34 = sub_100007928((uint64_t)v9, &qword_100091320);
  v35 = static Edge.Set.bottom.getter(v34);
  v36 = EdgeInsets.init(_all:)(5.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_100007964((uint64_t)v12, (uint64_t)v15, &qword_100091328);
  v43 = &v15[*(int *)(v13 + 36)];
  *v43 = v35;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  sub_100007928((uint64_t)v12, &qword_100091328);
  return sub_100007A2C((uint64_t)v15, a1, &qword_100091330);
}

uint64_t sub_10001E440@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(_QWORD);
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t OpaqueTypeConformance2;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  void (*v211)(uint64_t, uint64_t);
  void (*v212)(char *, _QWORD, uint64_t);
  unsigned int v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int8 v221;
  uint64_t v222;
  unsigned __int8 v223;
  uint64_t v224;
  uint64_t v225;

  v210 = a2;
  v207 = sub_100006454(&qword_100091340);
  __chkstk_darwin(v207);
  v209 = (uint64_t)&v156 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_100006454(&qword_100091348);
  __chkstk_darwin(v208);
  v164 = (uint64_t)&v156 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100006454(&qword_100091350);
  v5 = __chkstk_darwin(v203);
  v206 = (uint64_t)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0, v5);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v160 = (char *)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100006454(&qword_100091358);
  __chkstk_darwin(v196);
  v156 = (uint64_t)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100006454(&qword_100091360);
  v158 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v157 = (char *)&v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100006454(&qword_100091368);
  v161 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v159 = (char *)&v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for BlendMode(0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v179 = (uint64_t)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for DynamicTypeFont(0);
  __chkstk_darwin(v168);
  v167 = (uint64_t *)((char *)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v13);
  v15 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v156 - v17;
  v165 = sub_100006454(&qword_100091378);
  __chkstk_darwin(v165);
  v171 = (char *)&v156 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100006454(&qword_100091380);
  __chkstk_darwin(v170);
  v174 = (uint64_t)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100006454(&qword_100091388);
  __chkstk_darwin(v169);
  v172 = (char *)&v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100006454(&qword_100091390);
  __chkstk_darwin(v176);
  v173 = (uint64_t)&v156 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100006454(&qword_100091398);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v175 = (char *)&v156 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100006454(&qword_1000913A0);
  __chkstk_darwin(v192);
  v195 = (char *)&v156 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100006454(&qword_1000913A8);
  __chkstk_darwin(v199);
  v191 = (char *)&v156 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v200 = (uint64_t)&v156 - v27;
  v28 = sub_100006454(&qword_1000913B0);
  __chkstk_darwin(v28);
  v205 = (uint64_t)&v156 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v197 = (char *)&v156 - v31;
  __chkstk_darwin(v32);
  v198 = (uint64_t)&v156 - v33;
  __chkstk_darwin(v34);
  v202 = (uint64_t)&v156 - v35;
  v36 = sub_100006454(&qword_1000913B8);
  __chkstk_darwin(v36);
  v38 = (char *)&v156 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for WidgetFamily(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v156 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v45 = (char *)&v156 - v44;
  v46 = *(int *)(type metadata accessor for AFEmptyStateView(0) + 20);
  v189 = a1;
  v214 = a1 + v46;
  sub_100014E8C((uint64_t)v45);
  v47 = *(void (**)(_QWORD))(v40 + 104);
  v213 = enum case for WidgetFamily.systemSmall(_:);
  v212 = (void (*)(char *, _QWORD, uint64_t))v47;
  v47(v42);
  v182 = sub_100007A70(&qword_1000913C0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v48 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v42, v39, v182);
  v49 = *(void (**)(char *, uint64_t))(v40 + 8);
  v216 = v42;
  v49(v42, v39);
  v215 = v45;
  v166 = v39;
  v211 = (void (*)(uint64_t, uint64_t))v49;
  v49(v45, v39);
  v50 = 0;
  KeyPath = 0;
  v52 = 0;
  if ((v48 & 1) == 0)
  {
    sub_10001E064();
    v53 = Image.init(uiImage:)();
    v54 = enum case for Image.TemplateRenderingMode.template(_:);
    v55 = type metadata accessor for Image.TemplateRenderingMode(0);
    v56 = *(_QWORD *)(v55 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v38, v54, v55);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v38, 0, 1, v55);
    v50 = Image.renderingMode(_:)(v38, v53);
    swift_release(v53);
    v57 = sub_100007928((uint64_t)v38, &qword_1000913B8);
    v58 = static Color.primary.getter(v57);
    v52 = Color.opacity(_:)(0.6);
    swift_release(v58);
    KeyPath = swift_getKeyPath(&unk_100071738);
  }
  v190 = KeyPath;
  v193 = v52;
  v194 = v50;
  v59 = static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(&v220, 0, 1, 0x4024000000000000, 0, v59, v60);
  v188 = v220;
  v187 = v221;
  v186 = v222;
  v185 = v223;
  v184 = v224;
  v183 = v225;
  v61 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x8000000100073ED0);
  v62 = Text.init(_:tableName:bundle:comment:)(v61);
  v64 = v63;
  v66 = v65;
  v68 = v67 & 1;
  v69 = static Font.footnote.getter();
  v70 = enum case for ContentSizeCategory.extraLarge(_:);
  v71 = type metadata accessor for ContentSizeCategory(0);
  v72 = *(_QWORD *)(v71 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 104))(v18, v70, v71);
  v73 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v18, 0, 1, v71);
  v74 = static Font.Weight.medium.getter(v73);
  sub_100007964((uint64_t)v18, (uint64_t)v15, &qword_100091370);
  v75 = swift_getKeyPath(&unk_100071768);
  v76 = (uint64_t)v167;
  *v167 = v75;
  v77 = sub_100006454(&qword_100090EA0);
  swift_storeEnumTagMultiPayload(v76, v77, 0);
  v78 = v168;
  *(_QWORD *)(v76 + *(int *)(v168 + 20)) = v69;
  sub_100007A2C((uint64_t)v15, v76 + *(int *)(v78 + 24), &qword_100091370);
  *(double *)(v76 + *(int *)(v78 + 28)) = v74;
  v79 = (uint64_t)v171;
  sub_10001F680(v76, (uint64_t)&v171[*(int *)(v165 + 36)]);
  *(_QWORD *)v79 = v62;
  *(_QWORD *)(v79 + 8) = v64;
  *(_BYTE *)(v79 + 16) = v68;
  *(_QWORD *)(v79 + 24) = v66;
  sub_10001F6C4(v62, v64, v68);
  swift_bridgeObjectRetain(v66);
  sub_10001F6D4(v76);
  sub_100007928((uint64_t)v18, &qword_100091370);
  sub_100007918(v62, v64, v68);
  v80 = swift_bridgeObjectRelease(v66);
  v81 = static Color.primary.getter(v80);
  v82 = Color.opacity(_:)(0.6);
  swift_release(v81);
  v83 = swift_getKeyPath(&unk_100071738);
  v84 = v174;
  sub_100007964(v79, v174, &qword_100091378);
  v85 = (uint64_t *)(v84 + *(int *)(v170 + 36));
  *v85 = v83;
  v85[1] = v82;
  sub_100007928(v79, &qword_100091378);
  v86 = v179;
  sub_10001DE40(v179);
  v87 = (uint64_t)v172;
  v88 = v180;
  v89 = v181;
  (*(void (**)(char *, uint64_t, uint64_t))(v180 + 16))(&v172[*(int *)(v169 + 36)], v86, v181);
  sub_100007964(v84, v87, &qword_100091380);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v89);
  sub_100007928(v84, &qword_100091380);
  v90 = v173;
  sub_100007964(v87, v173, &qword_100091388);
  v91 = v176;
  *(_WORD *)(v90 + *(int *)(v176 + 36)) = 256;
  sub_100007928(v87, &qword_100091388);
  v92 = sub_10001FB4C(&qword_1000913C8, &qword_100091390, (void (*)(void))sub_10001F710);
  v93 = v175;
  View.unredacted()(v91, v92);
  sub_100007928(v90, &qword_100091390);
  v94 = swift_getKeyPath(&unk_100071798);
  v95 = v177;
  v96 = (uint64_t)v195;
  v97 = v178;
  (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v195, v93, v178);
  v98 = v192;
  v99 = v96 + *(int *)(v192 + 36);
  *(_QWORD *)v99 = v94;
  *(_BYTE *)(v99 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v97);
  v100 = (uint64_t)v215;
  sub_100014E8C((uint64_t)v215);
  v101 = v216;
  v102 = v166;
  v212(v216, v213, v166);
  v103 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v217, v102, v103);
  dispatch thunk of RawRepresentable.rawValue.getter(&v219, v102, v103);
  v104 = v217;
  v105 = v219;
  v106 = v101;
  v107 = v211;
  v211((uint64_t)v106, v102);
  v107(v100, v102);
  if (v104 == v105)
  {
    v108 = swift_getKeyPath(&unk_1000717C8);
    v109 = v156;
    sub_100007964(v96, v156, &qword_1000913A0);
    v110 = v196;
    v111 = v109 + *(int *)(v196 + 36);
    *(_QWORD *)v111 = v108;
    *(_BYTE *)(v111 + 8) = 0;
    v112 = sub_10001F920(&qword_100091400, &qword_100091358, (void (*)(void))sub_10001F844);
    v113 = v157;
    View.lineLimit(_:reservesSpace:)(6, 1, v110, v112);
    v114 = sub_100007928(v109, &qword_100091358);
    v115 = v160;
    static TypesettingLanguageAwareLineHeightRatio.legacy.getter(v114);
    v217 = v110;
    v218 = v112;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.lineLimit(_:reservesSpace:)>>, 1);
    v117 = v159;
    v118 = v201;
    View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v115, 1, v201, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v115, v163);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v113, v118);
    v119 = v161;
    v120 = v206;
    v121 = v204;
    (*(void (**)(uint64_t, char *, uint64_t))(v161 + 16))(v206, v117, v204);
    swift_storeEnumTagMultiPayload(v120, v203, 0);
    v217 = v118;
    v218 = OpaqueTypeConformance2;
    v122 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
    v123 = sub_10001F844();
    v124 = (uint64_t)v191;
    _ConditionalContent<>.init(storage:)(v120, v121, v98, v122, v123);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v121);
  }
  else
  {
    v125 = v206;
    sub_100007964(v96, v206, &qword_1000913A0);
    swift_storeEnumTagMultiPayload(v125, v203, 1);
    v126 = sub_10001F920(&qword_100091400, &qword_100091358, (void (*)(void))sub_10001F844);
    v217 = v196;
    v218 = v126;
    v127 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.lineLimit(_:reservesSpace:)>>, 1);
    v217 = v201;
    v218 = v127;
    v128 = swift_getOpaqueTypeConformance2(&v217, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
    v129 = sub_10001F844();
    v124 = (uint64_t)v191;
    _ConditionalContent<>.init(storage:)(v125, v204, v98, v128, v129);
  }
  v130 = v200;
  sub_100007A2C(v124, v200, &qword_1000913A8);
  sub_100007928(v96, &qword_1000913A0);
  v131 = (uint64_t)v215;
  sub_100014E8C((uint64_t)v215);
  v132 = v216;
  v212(v216, v213, v102);
  v133 = dispatch thunk of static Equatable.== infix(_:_:)(v131, v132, v102, v182);
  v134 = v211;
  v211((uint64_t)v132, v102);
  v134(v131, v102);
  if ((v133 & 1) != 0)
  {
    v135 = v209;
    sub_100007964(v130, v209, &qword_1000913A8);
    swift_storeEnumTagMultiPayload(v135, v207, 1);
    v136 = sub_10001F920(&qword_100091430, &qword_100091348, (void (*)(void))sub_10001F9A4);
    v137 = sub_10001F9A4();
    v138 = (uint64_t)v197;
    _ConditionalContent<>.init(storage:)(v135, v208, v199, v136, v137);
  }
  else
  {
    v139 = swift_getKeyPath(&unk_1000717C8);
    v140 = v164;
    sub_100007964(v130, v164, &qword_1000913A8);
    v142 = v208;
    v141 = v209;
    v143 = v140 + *(int *)(v208 + 36);
    *(_QWORD *)v143 = v139;
    *(_BYTE *)(v143 + 8) = 1;
    sub_100007964(v140, v141, &qword_100091348);
    swift_storeEnumTagMultiPayload(v141, v207, 0);
    v144 = sub_10001F920(&qword_100091430, &qword_100091348, (void (*)(void))sub_10001F9A4);
    v145 = sub_10001F9A4();
    v138 = (uint64_t)v197;
    _ConditionalContent<>.init(storage:)(v141, v142, v199, v144, v145);
    sub_100007928(v140, &qword_100091348);
  }
  v146 = v198;
  sub_100007A2C(v138, v198, &qword_1000913B0);
  sub_100007928(v130, &qword_1000913A8);
  v147 = v202;
  sub_100007A2C(v146, v202, &qword_1000913B0);
  v148 = v205;
  sub_100007964(v147, v205, &qword_1000913B0);
  v149 = v210;
  v150 = v194;
  v151 = v190;
  *v210 = v194;
  v149[1] = v151;
  v152 = v193;
  v149[2] = v193;
  v149[3] = 0;
  *((_BYTE *)v149 + 32) = 1;
  v149[5] = v188;
  *((_BYTE *)v149 + 48) = v187;
  v149[7] = v186;
  *((_BYTE *)v149 + 64) = v185;
  v153 = v183;
  v149[9] = v184;
  v149[10] = v153;
  v154 = sub_100006454(&qword_100091440);
  sub_100007964(v148, (uint64_t)v149 + *(int *)(v154 + 64), &qword_1000913B0);
  sub_10001FA80(v150, v151, v152);
  sub_100007928(v147, &qword_1000913B0);
  sub_100007928(v148, &qword_1000913B0);
  return sub_10001FABC(v150, v151, v152);
}

uint64_t sub_10001F680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DynamicTypeFont(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F6C4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001F6D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DynamicTypeFont(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001F710()
{
  return sub_10001FB4C(&qword_1000913D0, &qword_100091388, (void (*)(void))sub_10001F734);
}

unint64_t sub_10001F734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000913D8;
  if (!qword_1000913D8)
  {
    v1 = sub_100006494(&qword_100091380);
    sub_10001F7B8();
    sub_1000078D8(&qword_1000913F0, &qword_1000913F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000913D8);
  }
  return result;
}

unint64_t sub_10001F7B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000913E0;
  if (!qword_1000913E0)
  {
    v1 = sub_100006494(&qword_100091378);
    sub_100007A70(&qword_1000913E8, type metadata accessor for DynamicTypeFont, (uint64_t)&unk_100071C30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000913E0);
  }
  return result;
}

unint64_t sub_10001F844()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100091408;
  if (!qword_100091408)
  {
    v1 = sub_100006494(&qword_1000913A0);
    v2[0] = sub_100006494(&qword_100091390);
    v2[1] = sub_10001FB4C(&qword_1000913C8, &qword_100091390, (void (*)(void))sub_10001F710);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    sub_1000078D8(&qword_100091410, &qword_100091418, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091408);
  }
  return result;
}

uint64_t sub_10001F920(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    a3();
    sub_1000078D8(&qword_100091420, &qword_100091428, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001F9A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_100091438;
  if (!qword_100091438)
  {
    v1 = sub_100006494(&qword_1000913A8);
    v2 = sub_100006494(&qword_100091360);
    v4 = sub_100006494(&qword_100091358);
    v5 = sub_10001F920(&qword_100091400, &qword_100091358, (void (*)(void))sub_10001F844);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.lineLimit(_:reservesSpace:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)>>, 1);
    sub_10001F844();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091438);
  }
  return result;
}

uint64_t sub_10001FA80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = result;
    swift_retain(a3);
    swift_retain(v4);
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10001FABC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_10001FAF4()
{
  return sub_10001FB4C(&qword_100091448, &qword_100091330, (void (*)(void))sub_10001FB28);
}

uint64_t sub_10001FB28()
{
  return sub_10001FB4C(&qword_100091450, &qword_100091328, (void (*)(void))sub_10001FBB4);
}

uint64_t sub_10001FB4C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001FBB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091458;
  if (!qword_100091458)
  {
    v1 = sub_100006494(&qword_100091320);
    sub_1000078D8(&qword_100091460, &qword_100091318, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091458);
  }
  return result;
}

void *sub_10001FC38(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v8 = 0x6867696C68676968;
    v9 = 0xE900000000000074;
  }
  else
  {
    v8 = 0x6C616D726F6ELL;
    v9 = 0xE600000000000000;
  }
  v10 = (void *)sub_10004CF70(v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v11 == enum case for WidgetFamily.systemSmall(_:))
  {
    if (v10)
    {
      v12 = v10;
      objc_msgSend(v12, "size");
      v14 = v13 * 0.0375;
      objc_msgSend(v12, "scale");
      v16 = v14 * v15;
      objc_msgSend(v12, "size");
      v18 = v17 * 0.0375;
      objc_msgSend(v12, "scale");
      v20 = v18 * v19;
      objc_msgSend(v12, "size");
      v22 = 0.925;
LABEL_7:
      v23 = v21 * v22;
      objc_msgSend(v12, "scale");
      v25 = v23 * v24;
      objc_msgSend(v12, "size");
      v27 = v26 * v22;
LABEL_8:
      objc_msgSend(v12, "scale");
      v29 = v27 * v28;
      objc_msgSend(v12, "size");
      v31 = v30;
      objc_msgSend(v12, "size");
      v10 = sub_10002B47C(v16, v20, v25, v29, v31, v32);

    }
  }
  else
  {
    if (v11 == enum case for WidgetFamily.systemMedium(_:))
      return v10;
    if (v11 == enum case for WidgetFamily.systemLarge(_:))
    {
      if (!v10)
        return v10;
      v12 = v10;
      objc_msgSend(v12, "size");
      v35 = round(v34 * 0.0);
      objc_msgSend(v12, "scale");
      v16 = v36 * v35;
      objc_msgSend(v12, "size");
      v38 = round(v37 * 0.213576159);
      objc_msgSend(v12, "scale");
      v20 = v39 * v38;
      objc_msgSend(v12, "size");
      v41 = v40;
      objc_msgSend(v12, "scale");
      v25 = v41 * v42;
      objc_msgSend(v12, "size");
      v27 = v43 * 0.572847682;
      goto LABEL_8;
    }
    if (v11 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v50 = sub_10004CF70(0x6C616D726F6ELL, 0xE600000000000000);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return (void *)v50;
    }
    if (v10)
    {
      v12 = v10;
      objc_msgSend(v12, "size");
      v45 = round(v44 * 0.07145);
      objc_msgSend(v12, "scale");
      v16 = v46 * v45;
      objc_msgSend(v12, "size");
      v48 = round(v47 * 0.07145);
      objc_msgSend(v12, "scale");
      v20 = v49 * v48;
      objc_msgSend(v12, "size");
      v22 = 0.8571;
      goto LABEL_7;
    }
  }
  return v10;
}

uint64_t sub_10001FFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FFAC);
}

uint64_t sub_10001FFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for GeometryProxy(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for AFTimelineEntry(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100020048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100020054);
}

uint64_t sub_100020054(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for GeometryProxy(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for AFTimelineEntry(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AFExtraLargeContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000914C0;
  if (!qword_1000914C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFExtraLargeContentView);
  return result;
}

uint64_t sub_100020134(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074A40, 1);
}

void sub_100020144(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD v40[2];

  v38 = a2;
  v39 = a1;
  v3 = type metadata accessor for RedactionReasons(0);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006454(&qword_100091000);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100006454(&qword_100091550);
  __chkstk_darwin(v35);
  v33 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100006454(&qword_100091010);
  __chkstk_darwin(v32);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v2 + *(int *)(type metadata accessor for AFExtraLargeContentView(0) + 24);
  v20 = *(_QWORD *)(v19 + *(int *)(type metadata accessor for AFTimelineEntry(0) + 36));
  if (*(_QWORD *)(v20 + 16) <= v39)
    goto LABEL_4;
  if ((v39 & 0x8000000000000000) == 0)
  {
    v21 = v20 + 24 * v39;
    if ((*(_BYTE *)(v21 + 48) & 1) == 0)
    {
      v28 = *(_QWORD *)(v21 + 40);
      v29 = *(id *)(v21 + 32);
      swift_bridgeObjectRetain(v28);
      sub_100014E8C((uint64_t)v13);
      static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)(v18, v16, v29, 0, v13, 0xD000000000000017, 0x8000000100073B00, v28);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v30 = sub_100007928((uint64_t)v16, &qword_100090BC8);
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v30, &opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>, 1);
      v27 = AnyView.init<A>(_:)(v18, v32, OpaqueTypeConformance2);
      swift_bridgeObjectRelease(v28);

      goto LABEL_6;
    }
LABEL_4:
    sub_100014E8C((uint64_t)v13);
    static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)(v13);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v23 = static RedactionReasons.placeholder.getter(v22);
    v24 = swift_getOpaqueTypeConformance2(v23, &opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>, 1);
    v25 = v33;
    View.redacted(reason:)(v5, v6, v24);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
    v40[0] = v6;
    v40[1] = v24;
    v26 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v27 = AnyView.init<A>(_:)(v25, v35, v26);
LABEL_6:
    *v38 = v27;
    return;
  }
  __break(1u);
}

uint64_t sub_100020490@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  void (*v16)(char *, uint64_t);
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = a1;
  v2 = sub_100006454(&qword_100091500);
  __chkstk_darwin(v2);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100006454(&qword_100091508);
  __chkstk_darwin(v60);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100006454(&qword_100091510);
  __chkstk_darwin(v61);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AFExtraLargeContentView(0);
  v14 = v1 + *(int *)(v13 + 20);
  sub_100014E8C((uint64_t)v12);
  v15 = sub_10000ABA8(v14, (uint64_t)v12);
  v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  sub_100014E8C((uint64_t)v12);
  v17 = sub_10000ABA8(v14, (uint64_t)v12);
  v18 = ((uint64_t (*)(char *, uint64_t))v16)(v12, v9);
  v19 = v17 + v17;
  v20 = GeometryProxy.size.getter(v18) - v19 + -32.0;
  GeometryProxy.size.getter(v21);
  v23 = v22 + -28.0 - v19;
  v24 = v20 * 0.5;
  v25 = v1 + *(int *)(v13 + 24);
  v26 = v23
      / (double)(*(_QWORD *)(*(_QWORD *)(v25 + *(int *)(type metadata accessor for AFTimelineEntry(0) + 36)) + 16) >> 1);
  *(_QWORD *)v4 = static VerticalAlignment.bottom.getter();
  *((_QWORD *)v4 + 1) = 0x402F000000000000;
  v4[16] = 0;
  v27 = sub_100006454(&qword_100091518);
  v28 = sub_100020858(v1, (uint64_t)&v4[*(int *)(v27 + 44)], v24, v26);
  v29 = static Edge.Set.leading.getter(v28);
  v30 = static Edge.Set.trailing.getter();
  v31 = v30;
  v32 = static Edge.Set.bottom.getter(v30);
  v33 = Edge.Set.init(rawValue:)(0);
  v34 = Edge.Set.init(rawValue:)(v33);
  if (Edge.Set.init(rawValue:)(v34 & v29) != v29)
    v33 = Edge.Set.init(rawValue:)(v33 | v29);
  v35 = Edge.Set.init(rawValue:)(v33);
  if (Edge.Set.init(rawValue:)(v35 & v31) != v31)
    v33 = Edge.Set.init(rawValue:)(v33 | v31);
  v36 = Edge.Set.init(rawValue:)(v33);
  if (Edge.Set.init(rawValue:)(v36 & v32) != v32)
    LOBYTE(v33) = Edge.Set.init(rawValue:)(v33 | v32);
  v37 = EdgeInsets.init(_all:)(v15);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_100007964((uint64_t)v4, (uint64_t)v6, &qword_100091500);
  v44 = &v6[*(int *)(v60 + 36)];
  *v44 = v33;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_100007928((uint64_t)v4, &qword_100091500);
  v46 = static Edge.Set.top.getter(v45);
  v47 = Edge.Set.init(rawValue:)(0);
  v48 = v47;
  v49 = Edge.Set.init(rawValue:)(v47);
  if (Edge.Set.init(rawValue:)(v49 & v46) != v46)
    LOBYTE(v48) = Edge.Set.init(rawValue:)(v48 | v46);
  v50 = EdgeInsets.init(_all:)(v15 + 28.0);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  sub_100007964((uint64_t)v6, (uint64_t)v8, &qword_100091508);
  v57 = &v8[*(int *)(v61 + 36)];
  *v57 = v48;
  *((double *)v57 + 1) = v50;
  *((_QWORD *)v57 + 2) = v52;
  *((_QWORD *)v57 + 3) = v54;
  *((_QWORD *)v57 + 4) = v56;
  v57[40] = 0;
  sub_100007928((uint64_t)v6, &qword_100091508);
  return sub_100021380((uint64_t)v8, v62);
}

uint64_t sub_100020858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  __n128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;

  v8 = sub_100006454(&qword_100091520);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - v15;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v48 - v19;
  *(_QWORD *)v20 = static HorizontalAlignment.leading.getter(v18);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 0;
  v21 = sub_100006454(&qword_100091528);
  v22 = (uint64_t)&v20[*(int *)(v21 + 44)];
  v54 = a1;
  sub_100020BA8(a1, v22, a3, a4);
  v23 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v24 = objc_msgSend(v23, "colorWithAlphaComponent:", 0.12);

  v25 = Color.init(_:)(v24);
  v26 = static Alignment.center.getter(v25);
  v28 = _FrameLayout.init(width:height:alignment:)(&v55, 0x3FF0000000000000, 0, 0, 1, v26, v27);
  v53 = v55;
  v52 = v56;
  v51 = v57;
  v50 = v58;
  v48 = v60;
  v49 = v59;
  v29 = static Edge.Set.top.getter(v28);
  v30 = v29;
  v31 = static Edge.Set.bottom.getter(v29);
  v32 = Edge.Set.init(rawValue:)(0);
  v33 = Edge.Set.init(rawValue:)(v32);
  if (Edge.Set.init(rawValue:)(v33 & v30) != v30)
    v32 = Edge.Set.init(rawValue:)(v32 | v30);
  v34 = Edge.Set.init(rawValue:)(v32);
  if (Edge.Set.init(rawValue:)(v34 & v31) != v31)
    LOBYTE(v32) = Edge.Set.init(rawValue:)(v32 | v31);
  v35.n128_f64[0] = EdgeInsets.init(_all:)(16.0);
  v36 = v35.n128_u64[0];
  v38 = v37;
  v40 = v39;
  v42 = v41;
  *(_QWORD *)v16 = static HorizontalAlignment.leading.getter(v35);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 0;
  sub_100020E90(v54, (uint64_t)&v16[*(int *)(v21 + 44)], a3, a4);
  sub_100007964((uint64_t)v20, (uint64_t)v13, &qword_100091520);
  sub_100007964((uint64_t)v16, (uint64_t)v10, &qword_100091520);
  sub_100007964((uint64_t)v13, a2, &qword_100091520);
  v43 = sub_100006454(&qword_100091530);
  v44 = a2 + *(int *)(v43 + 48);
  v45 = v53;
  *(_QWORD *)v44 = v25;
  *(_QWORD *)(v44 + 8) = v45;
  *(_BYTE *)(v44 + 16) = v52;
  *(_QWORD *)(v44 + 24) = v51;
  *(_BYTE *)(v44 + 32) = v50;
  v46 = v48;
  *(_QWORD *)(v44 + 40) = v49;
  *(_QWORD *)(v44 + 48) = v46;
  *(_BYTE *)(v44 + 56) = v32;
  *(_QWORD *)(v44 + 64) = v36;
  *(_QWORD *)(v44 + 72) = v38;
  *(_QWORD *)(v44 + 80) = v40;
  *(_QWORD *)(v44 + 88) = v42;
  *(_BYTE *)(v44 + 96) = 0;
  sub_100007964((uint64_t)v10, a2 + *(int *)(v43 + 64), &qword_100091520);
  swift_retain(v25);
  sub_100007928((uint64_t)v16, &qword_100091520);
  sub_100007928((uint64_t)v20, &qword_100091520);
  sub_100007928((uint64_t)v10, &qword_100091520);
  swift_release(v25);
  return sub_100007928((uint64_t)v13, &qword_100091520);
}

uint64_t sub_100020BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v38 = a2;
  v7 = type metadata accessor for AFExtraLargeContentView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v17 = sub_100006454(&qword_100091538);
  v36 = *(_QWORD *)(v17 - 8);
  v37 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E8C((uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  v21 = 0;
  if (v20 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v20 != enum case for WidgetFamily.systemMedium(_:))
    {
      if (v20 != enum case for WidgetFamily.systemLarge(_:))
      {
        if (v20 == enum case for WidgetFamily.systemExtraLarge(_:))
        {
          v21 = 4;
          goto LABEL_17;
        }
        if (v20 == enum case for WidgetFamily.accessoryCircular(_:)
          || v20 == enum case for WidgetFamily.accessoryRectangular(_:)
          || v20 == enum case for WidgetFamily.accessoryInline(_:))
        {
          v21 = 0;
          goto LABEL_17;
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
      v21 = 2;
      goto LABEL_17;
    }
    v21 = 1;
  }
LABEL_17:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  v39[0] = 0;
  v39[1] = v21;
  KeyPath = swift_getKeyPath(&unk_1000718B0);
  sub_1000213C8(a1, (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(unsigned __int8 *)(v8 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v9 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_10008E370, v27 + 16, v25 | 7);
  sub_100021410((uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v26);
  v29 = (double *)(v28 + v27);
  *v29 = a3;
  v29[1] = a4;
  v30 = sub_100006454(&qword_100090F90);
  v31 = sub_100006454(&qword_100091540);
  v32 = sub_100017DF4();
  v33 = sub_100021458();
  ForEach<>.init(_:id:content:)(v39, KeyPath, sub_100021454, v28, v30, v31, v32, &protocol witness table for Int, v33);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 32))(v38, v19, v37);
}

uint64_t sub_100020E90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t (*v25)(char *, uint64_t);
  int v26;
  uint64_t v27;
  int v28;
  void (*v29)(char *, uint64_t);
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD v54[2];

  v52 = a2;
  v7 = type metadata accessor for AFExtraLargeContentView(0);
  v47 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v48 = v8;
  v51 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v46 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v46 - v20;
  v22 = sub_100006454(&qword_100091538);
  v49 = *(_QWORD *)(v22 - 8);
  v50 = v22;
  __chkstk_darwin(v22);
  v46 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E8C((uint64_t)v21);
  v24 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v24(v18, v21, v9);
  v25 = *(uint64_t (**)(char *, uint64_t))(v10 + 88);
  v26 = v25(v18, v9);
  v27 = 0;
  v28 = enum case for WidgetFamily.systemSmall(_:);
  if (v26 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v26 == enum case for WidgetFamily.systemMedium(_:))
    {
      v27 = 1;
      goto LABEL_8;
    }
    if (v26 == enum case for WidgetFamily.systemLarge(_:))
      goto LABEL_5;
    if (v26 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v27 = 4;
    }
    else
    {
      v27 = 0;
      if (v26 != enum case for WidgetFamily.accessoryCircular(_:)
        && v26 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v26 != enum case for WidgetFamily.accessoryInline(_:))
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
LABEL_5:
        v27 = 2;
      }
    }
  }
LABEL_8:
  v53 = v27;
  v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v21, v9);
  sub_100014E8C((uint64_t)v15);
  v24(v12, v15, v9);
  v30 = v25(v12, v9);
  if (v30 == v28)
  {
    v31 = 1;
  }
  else
  {
    if (v30 != enum case for WidgetFamily.systemMedium(_:))
      goto LABEL_14;
    v31 = 2;
  }
  while (1)
  {
    v30 = ((uint64_t (*)(char *, uint64_t))v29)(v15, v9);
    v32 = v53;
    if (v31 >= v53)
      break;
    __break(1u);
LABEL_14:
    if (v30 == enum case for WidgetFamily.systemLarge(_:))
      goto LABEL_15;
    if (v30 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v31 = 8;
      goto LABEL_18;
    }
    v31 = 1;
    if (v30 != enum case for WidgetFamily.accessoryCircular(_:)
      && v30 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v30 != enum case for WidgetFamily.accessoryInline(_:))
    {
      v29(v12, v9);
LABEL_15:
      v31 = 4;
LABEL_18:
      v29(v15, v9);
      v32 = v53;
      break;
    }
  }
  v54[0] = v32;
  v54[1] = v31;
  KeyPath = swift_getKeyPath(&unk_1000718B0);
  v34 = v51;
  sub_1000213C8(a1, v51);
  v35 = *(unsigned __int8 *)(v47 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = (v48 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_10008E348, v37 + 16, v35 | 7);
  sub_100021410(v34, v38 + v36);
  v39 = (double *)(v38 + v37);
  *v39 = a3;
  v39[1] = a4;
  v40 = sub_100006454(&qword_100090F90);
  v41 = sub_100006454(&qword_100091540);
  v42 = sub_100017DF4();
  v43 = sub_100021458();
  v44 = v46;
  ForEach<>.init(_:id:content:)(v54, KeyPath, sub_100021454, v38, v40, v41, v42, &protocol witness table for Int, v43);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v52, v44, v50);
}

double sub_1000212D8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  sub_100020144(*a1, &v16);
  v7 = v16;
  v9 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v17, *(_QWORD *)&a3, 0, *(_QWORD *)&a4, 0, v9, v10);
  v11 = v17;
  v12 = v18;
  v13 = v19;
  v14 = v20;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v14;
  result = *(double *)&v21;
  *(_OWORD *)(a2 + 40) = v21;
  return result;
}

uint64_t sub_100021380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100091510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000213C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFExtraLargeContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100021410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFExtraLargeContentView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100021458()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091548;
  if (!qword_100091548)
  {
    v1 = sub_100006494(&qword_100091540);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091548);
  }
  return result;
}

uint64_t sub_1000214C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for AFExtraLargeContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v10 = (char *)v6 + *(int *)(v1 + 20);
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)v6 + *(int *)(v1 + 24);
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = type metadata accessor for AFTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v12[*(int *)(v14 + 36)]);
  return swift_deallocObject(v0, v9, v3 | 7);
}

double sub_1000215D0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double *v6;

  v5 = type metadata accessor for AFExtraLargeContentView(0);
  v6 = (double *)(v2
                + ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
                  + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1000212D8(a1, a2, *v6, v6[1]);
}

uint64_t sub_100021638()
{
  return sub_100021680(&qword_100091558, &qword_100091510, (void (*)(void))sub_100021664);
}

uint64_t sub_100021664()
{
  return sub_100021680(&qword_100091560, &qword_100091508, (void (*)(void))sub_1000216EC);
}

uint64_t sub_100021680(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000216EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091568;
  if (!qword_100091568)
  {
    v1 = sub_100006494(&qword_100091500);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100091568);
  }
  return result;
}

uint64_t sub_100021738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  int v5;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  uint64_t v14;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CPTitleView(0);
  sub_100014E8C((uint64_t)v3);
  v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if (v4 == enum case for WidgetFamily.systemSmall(_:))
    return static Font.caption2.getter();
  v5 = v4;
  if (v4 == enum case for WidgetFamily.systemMedium(_:))
    return static Font.caption2.getter();
  if (v4 == enum case for WidgetFamily.systemLarge(_:) || v4 == enum case for WidgetFamily.systemExtraLarge(_:))
    return static Font.footnote.getter();
  v9 = enum case for WidgetFamily.accessoryCircular(_:);
  v10 = enum case for WidgetFamily.accessoryRectangular(_:);
  v11 = enum case for WidgetFamily.accessoryInline(_:);
  v7 = static Font.caption2.getter();
  if (v5 != v9 && v5 != v10 && v5 != v11)
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v7;
}

uint64_t sub_100021884@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  _BYTE v25[16];
  uint64_t v26;

  v24 = a2;
  v23 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006454(&qword_100091640);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v23 - v14;
  type metadata accessor for CPTitleView(0);
  sub_100014E8C((uint64_t)v5);
  sub_10004CC8C(0xD000000000000015, 0x80000001000737B0, (uint64_t)v5, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v23);
  v26 = a1;
  v16 = sub_100006454(&qword_100091648);
  v17 = sub_100025AD0();
  Link.init(destination:label:)(v8, sub_100025AC8, v25, v16, v17);
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v18(v12, v15, v9);
  v19 = v24;
  v18(v24, v12, v9);
  v20 = &v19[*(int *)(sub_100006454(&qword_100091668) + 48)];
  *(_QWORD *)v20 = 0;
  v20[8] = 0;
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v21)(v12, v9);
}

uint64_t sub_100021A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006454(&qword_100091660);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v9);
  *((_QWORD *)v11 + 1) = 0x4024000000000000;
  v11[16] = 0;
  v12 = sub_100006454(&qword_100091670);
  sub_100021BF0(a1, (uint64_t)&v11[*(int *)(v12 + 44)]);
  KeyPath = swift_getKeyPath(&unk_100071950);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
  v14 = (uint64_t *)(a2 + *(int *)(sub_100006454(&qword_100091648) + 36));
  v15 = sub_100006454(&qword_100090950);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v14 + *(int *)(v15 + 28), v7, v4);
  *v14 = KeyPath;
  sub_100007964((uint64_t)v11, a2, &qword_100091660);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100007928((uint64_t)v11, &qword_100091660);
}

uint64_t sub_100021BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (**v119)(__int128 *);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD v165[3];

  v158 = a2;
  v3 = type metadata accessor for ViewGeometryAnalyzer(0);
  __chkstk_darwin(v3);
  v145 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100091678);
  __chkstk_darwin(v5);
  v144 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100006454(&qword_100091680);
  __chkstk_darwin(v152);
  v153 = (uint64_t)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100006454(&qword_100091688);
  __chkstk_darwin(v143);
  v156 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100006454(&qword_100091690);
  __chkstk_darwin(v155);
  v146 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v154 = (uint64_t)&v126 - v11;
  __chkstk_darwin(v12);
  v157 = (uint64_t)&v126 - v13;
  v14 = sub_100006454(&qword_100091698);
  __chkstk_darwin(v14);
  v138 = (uint64_t *)((char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v128 = sub_100006454(&qword_1000916A0);
  __chkstk_darwin(v128);
  v139 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100006454(&qword_1000916A8);
  __chkstk_darwin(v130);
  v133 = (uint64_t)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100006454(&qword_1000916B0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (uint64_t)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v131 = (uint64_t)&v126 - v20;
  v141 = sub_100006454(&qword_1000916B8);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v135 = (uint64_t)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CPTitleView(0);
  v148 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v151 = (uint64_t)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v126 - v25;
  v27 = type metadata accessor for WidgetFamily(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v142 = (char *)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v129 = (char *)&v126 - v31;
  __chkstk_darwin(v32);
  v134 = (uint64_t)&v126 - v33;
  __chkstk_darwin(v34);
  v127 = (uint64_t)&v126 - v35;
  __chkstk_darwin(v36);
  v38 = (char *)&v126 - v37;
  __chkstk_darwin(v39);
  v41 = (char *)&v126 - v40;
  v42 = sub_100006454(&qword_1000916C0);
  __chkstk_darwin(v42);
  v150 = (uint64_t)&v126 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v162 = (uint64_t)&v126 - v45;
  v147 = v22;
  v163 = a1 + *(int *)(v22 + 24);
  sub_100014E8C((uint64_t)v41);
  v46 = *(void (**)(char *))(v28 + 104);
  v161 = enum case for WidgetFamily.systemLarge(_:);
  v46(v38);
  v47 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v165, v27, v47);
  dispatch thunk of RawRepresentable.rawValue.getter(&v164, v27, v47);
  v49 = v164;
  v48 = *(_QWORD *)&v165[0];
  v159 = v28;
  v50 = *(void (**)(char *, uint64_t))(v28 + 8);
  v50(v38, v27);
  v50(v41, v27);
  v160 = a1;
  sub_100007AF4(a1, (uint64_t)v26, type metadata accessor for CPTitleView);
  v126 = (void (*)(uint64_t, uint64_t))v50;
  if (v48 == v49)
  {
    v51 = v27;
    sub_10000A7C0((uint64_t)v26, type metadata accessor for CPTitleView);
  }
  else
  {
    sub_100014E8C((uint64_t)v41);
    ((void (*)(char *, _QWORD, uint64_t))v46)(v38, enum case for WidgetFamily.systemExtraLarge(_:), v27);
    dispatch thunk of RawRepresentable.rawValue.getter(v165, v27, v47);
    dispatch thunk of RawRepresentable.rawValue.getter(&v164, v27, v47);
    v53 = v164;
    v52 = *(_QWORD *)&v165[0];
    v50(v38, v27);
    v51 = v27;
    v50(v41, v27);
    sub_10000A7C0((uint64_t)v26, type metadata accessor for CPTitleView);
    if (v52 != v53)
    {
      v74 = 1;
      v75 = (uint64_t)v146;
      v76 = (uint64_t)v145;
      v67 = (uint64_t)v144;
      v69 = v143;
      v70 = v162;
      v71 = (uint64_t)v142;
      v77 = v141;
      v78 = v140;
      goto LABEL_37;
    }
  }
  v54 = sub_10004CF70(0x6C616D726F6ELL, 0xE600000000000000);
  if (v54)
  {
    v55 = (void *)v54;
    v56 = static Alignment.center.getter(v54);
    v57 = v138;
    *v138 = v56;
    v57[1] = v58;
    v59 = sub_100006454(&qword_1000916E0);
    sub_100022AC4(v55, (uint64_t)v57 + *(int *)(v59 + 44));
    v60 = v127;
    sub_100014E8C(v127);
    v61 = *(uint64_t (**)(uint64_t, uint64_t))(v159 + 88);
    v62 = v51;
    v63 = v61(v60, v51);
    v64 = enum case for WidgetFamily.systemSmall(_:);
    v65 = enum case for WidgetFamily.systemMedium(_:);
    v66 = 0x4048000000000000;
    if (v63 == enum case for WidgetFamily.systemSmall(_:))
    {
      v67 = (uint64_t)v144;
    }
    else
    {
      v67 = (uint64_t)v144;
      if (v63 != enum case for WidgetFamily.systemMedium(_:) && v63 != v161)
      {
        if (v63 == enum case for WidgetFamily.systemExtraLarge(_:))
        {
          v66 = 0x4053800000000000;
        }
        else
        {
          v66 = 0;
          if (v63 != enum case for WidgetFamily.accessoryCircular(_:)
            && v63 != enum case for WidgetFamily.accessoryRectangular(_:)
            && v63 != enum case for WidgetFamily.accessoryInline(_:))
          {
            v50((char *)v60, v62);
          }
        }
      }
    }
    v79 = v138;
    v80 = v139;
    sub_100007964((uint64_t)v138, v139, &qword_100091698);
    *(_QWORD *)(v80 + *(int *)(v128 + 36)) = v66;
    sub_100007928((uint64_t)v79, &qword_100091698);
    v81 = v134;
    sub_100014E8C(v134);
    v82 = v61(v81, v62);
    v83 = 0x4048000000000000;
    if (v82 == v64)
    {
      v84 = (uint64_t)v129;
    }
    else
    {
      v84 = (uint64_t)v129;
      if (v82 != v65 && v82 != v161)
      {
        v83 = 0x4053800000000000;
        if (v82 != enum case for WidgetFamily.systemExtraLarge(_:))
        {
          v83 = 0;
          if (v82 != enum case for WidgetFamily.accessoryCircular(_:)
            && v82 != enum case for WidgetFamily.accessoryRectangular(_:)
            && v82 != enum case for WidgetFamily.accessoryInline(_:))
          {
            v126(v134, v62);
            v83 = 0;
          }
        }
      }
    }
    sub_100014E8C(v84);
    v85 = v61(v84, v62);
    v86 = 0x4048000000000000;
    if ((_DWORD)v85 == v64)
    {
      v87 = v143;
      v70 = v162;
    }
    else
    {
      v87 = v143;
      v70 = v162;
      if ((_DWORD)v85 != v65 && (_DWORD)v85 != v161)
      {
        v86 = 0x4053800000000000;
        if ((_DWORD)v85 != enum case for WidgetFamily.systemExtraLarge(_:))
        {
          v86 = 0;
          if ((_DWORD)v85 != enum case for WidgetFamily.accessoryCircular(_:)
            && (_DWORD)v85 != enum case for WidgetFamily.accessoryRectangular(_:)
            && (_DWORD)v85 != enum case for WidgetFamily.accessoryInline(_:))
          {
            v85 = ((uint64_t (*)(uint64_t, uint64_t))v126)(v84, v62);
            v86 = 0;
          }
        }
      }
    }
    v51 = v62;
    v69 = v87;
    v88 = static Alignment.center.getter(v85);
    _FrameLayout.init(width:height:alignment:)(v165, v83, 0, v86, 0, v88, v89);
    v90 = v139;
    v91 = v133;
    sub_100007964(v139, v133, &qword_1000916A0);

    v92 = (_OWORD *)(v91 + *(int *)(v130 + 36));
    v93 = v165[1];
    *v92 = v165[0];
    v92[1] = v93;
    v92[2] = v165[2];
    sub_100007928(v90, &qword_1000916A0);
    v94 = v132;
    sub_100007964(v91, v132, &qword_1000916A8);
    v72 = v137;
    *(_QWORD *)(v94 + *(int *)(v137 + 36)) = 0x3FF0000000000000;
    sub_100007928(v91, &qword_1000916A8);
    v95 = v131;
    sub_100007A2C(v94, v131, &qword_1000916B0);
    v96 = v95;
    v73 = v135;
    sub_100007A2C(v96, v135, &qword_1000916B0);
    v68 = 0;
    v71 = (uint64_t)v142;
  }
  else
  {
    v68 = 1;
    v67 = (uint64_t)v144;
    v69 = v143;
    v70 = v162;
    v71 = (uint64_t)v142;
    v72 = v137;
    v73 = v135;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56))(v73, v68, 1, v72);
  sub_100007A2C(v73, v70, &qword_1000916B8);
  v74 = 0;
  v75 = (uint64_t)v146;
  v77 = v141;
  v78 = v140;
  v76 = (uint64_t)v145;
LABEL_37:
  v97.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v70, v74, 1, v77);
  v98 = static HorizontalAlignment.leading.getter(v97);
  sub_100014E8C(v71);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v159 + 88))(v71, v51);
  v100 = 0x3FF0000000000000;
  if (v99 == enum case for WidgetFamily.systemSmall(_:) || v99 == enum case for WidgetFamily.systemMedium(_:))
  {
    v101 = v160;
  }
  else
  {
    v101 = v160;
    if (v99 != v161)
    {
      if (v99 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        v100 = 0x4010000000000000;
      }
      else
      {
        v100 = 0x3FF0000000000000;
        if (v99 != enum case for WidgetFamily.accessoryCircular(_:)
          && v99 != enum case for WidgetFamily.accessoryRectangular(_:)
          && v99 != enum case for WidgetFamily.accessoryInline(_:))
        {
          v126(v71, v51);
          v100 = 0x3FF0000000000000;
        }
      }
    }
  }
  *(_QWORD *)v67 = v98;
  *(_QWORD *)(v67 + 8) = v100;
  *(_BYTE *)(v67 + 16) = 0;
  v102 = sub_100006454(&qword_1000916C8);
  sub_1000233BC(v101, v67 + *(int *)(v102 + 44));
  v103 = v153;
  sub_100007964(v67, v153, &qword_100091678);
  *(_QWORD *)(v103 + *(int *)(v152 + 36)) = 0x4000000000000000;
  sub_100007928(v67, &qword_100091678);
  v104 = enum case for CoordinateSpace.global(_:);
  v105 = type metadata accessor for CoordinateSpace(0);
  v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 104))(v76, v104, v105);
  v107 = static Alignment.center.getter(v106);
  v109 = v108;
  v110 = *(int *)(v69 + 36);
  v111 = (uint64_t)v156;
  v112 = &v156[v110];
  sub_100007AF4(v76, (uint64_t)&v156[v110], type metadata accessor for ViewGeometryAnalyzer);
  v113 = (uint64_t *)&v112[*(int *)(sub_100006454(&qword_1000916D0) + 36)];
  *v113 = v107;
  v113[1] = v109;
  sub_100007964(v103, v111, &qword_100091680);
  sub_10000A7C0(v76, type metadata accessor for ViewGeometryAnalyzer);
  sub_100007928(v103, &qword_100091680);
  v114 = v151;
  sub_100007AF4(v101, v151, type metadata accessor for CPTitleView);
  v115 = *(unsigned __int8 *)(v148 + 80);
  v116 = (v115 + 16) & ~v115;
  v117 = swift_allocObject(&unk_10008E3D0, v116 + v149, v115 | 7);
  sub_100025D94(v114, v117 + v116);
  v118 = v154;
  sub_100007964(v111, v154, &qword_100091688);
  v119 = (uint64_t (**)(__int128 *))(v118 + *(int *)(v155 + 36));
  *v119 = sub_100025DD8;
  v119[1] = (uint64_t (*)(__int128 *))v117;
  sub_100007928(v111, &qword_100091688);
  v120 = v157;
  sub_100007A2C(v118, v157, &qword_100091690);
  v121 = v162;
  v122 = v150;
  sub_100007964(v162, v150, &qword_1000916C0);
  sub_100007964(v120, v75, &qword_100091690);
  v123 = v158;
  sub_100007964(v122, v158, &qword_1000916C0);
  v124 = sub_100006454(&qword_1000916D8);
  sub_100007964(v75, v123 + *(int *)(v124 + 48), &qword_100091690);
  sub_100007928(v120, &qword_100091690);
  sub_100007928(v121, &qword_1000916C0);
  sub_100007928(v75, &qword_100091690);
  return sub_100007928(v122, &qword_1000916C0);
}

uint64_t sub_100022AC4@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;

  v114 = a1;
  v112 = a2;
  v110 = sub_100006454(&qword_1000916E8);
  __chkstk_darwin(v110);
  v111 = (uint64_t *)((char *)&v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v109 = sub_100006454(&qword_1000916F0);
  __chkstk_darwin(v109);
  v106 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_1000916F8);
  __chkstk_darwin(v4);
  v100 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100006454(&qword_100091700);
  v102 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v101 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v105 = (char *)&v88 - v8;
  v96 = type metadata accessor for BlendMode(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Image.ResizingMode(0);
  v108 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100006454(&qword_100091708);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100091710);
  v103 = *(_QWORD *)(v12 - 8);
  v104 = v12;
  __chkstk_darwin(v12);
  v97 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RedactionReasons(0);
  v99 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v98 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v88 - v17;
  v19 = sub_100006454(&qword_100091718);
  __chkstk_darwin(v19);
  v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v88 - v23;
  v25 = type metadata accessor for WidgetRenderingMode(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v88 - v30;
  type metadata accessor for CPTitleView(0);
  v32 = sub_100015074((uint64_t)v31);
  static WidgetRenderingMode.accented.getter(v32);
  v33 = static WidgetRenderingMode.== infix(_:_:)(v31, v28);
  v34 = *(void (**)(char *, uint64_t))(v26 + 8);
  v34(v28, v25);
  v34(v31, v25);
  if ((v33 & 1) != 0)
  {
    v35 = (uint64_t)v97;
    v89 = v21;
    v36 = v108;
    v90 = v24;
    v37 = v114;
    sub_100015308((uint64_t)v18);
    v38 = sub_100007A70(&qword_100091728, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v39 = v98;
    dispatch thunk of SetAlgebra.init()(v14, v38);
    v40 = sub_100007A70(&qword_100091730, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v41 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v39, v14, v40);
    v42 = *(void (**)(char *, uint64_t))(v99 + 8);
    v42(v39, v14);
    v42(v18, v14);
    v43 = (uint64_t)v106;
    v44 = v107;
    v45 = v115;
    if ((v41 & 1) != 0)
    {
      v46 = Image.init(uiImage:)(v37);
      LODWORD(v99) = enum case for Image.ResizingMode.stretch(_:);
      v47 = v36;
      v48 = *(void (**)(char *))(v36 + 104);
      v49 = v113;
      v48(v113);
      v50 = Image.resizable(capInsets:resizingMode:)(v49, v46, 0.0, 0.0, 0.0, 0.0);
      swift_release(v46);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v45);
      v116 = v50;
      v51 = v91;
      View.widgetAccentable(_:)(1, &type metadata for Image, &protocol witness table for Image);
      swift_release(v50);
      v52 = v95;
      v53 = v94;
      v54 = v96;
      (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, enum case for BlendMode.destinationOut(_:), v96);
      v55 = v104;
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v35 + *(int *)(v104 + 36), v53, v54);
      v56 = v92;
      v57 = v93;
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 16))(v35, v51, v93);
      v58 = v53;
      v43 = (uint64_t)v106;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v54);
      v59 = v51;
      v45 = v115;
      v60 = v57;
      v61 = v99;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v60);
      v62 = (uint64_t)v90;
      sub_100007A2C(v35, (uint64_t)v90, &qword_100091710);
      v63 = v55;
      v44 = v107;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v103 + 56))(v62, 0, 1, v63);
      v64 = v114;
      v65 = v105;
    }
    else
    {
      v62 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v90, 1, 1, v104);
      v61 = enum case for Image.ResizingMode.stretch(_:);
      v65 = v105;
      v64 = v37;
      v47 = v36;
      v49 = v113;
    }
    v75 = Image.init(uiImage:)(v64);
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 104))(v49, v61, v45);
    v76 = Image.resizable(capInsets:resizingMode:)(v49, v75, 0.0, 0.0, 0.0, 0.0);
    swift_release(v75);
    v77 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v49, v45);
    v78 = (uint64_t)v100;
    static WidgetAccentedRenderingMode.accentedDesaturated.getter(v77);
    v79 = type metadata accessor for WidgetAccentedRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v78, 0, 1, v79);
    v80 = v101;
    Image.widgetAccentedRenderingMode(_:)(v78, v76);
    swift_release(v76);
    sub_100007928(v78, &qword_1000916F8);
    v81 = v102;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v65, v80, v44);
    v82 = (uint64_t)v89;
    sub_100007964(v62, (uint64_t)v89, &qword_100091718);
    v83 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    v83(v80, v65, v44);
    sub_100007964(v82, v43, &qword_100091718);
    v84 = sub_100006454(&qword_100091738);
    v83((char *)(v43 + *(int *)(v84 + 48)), v80, v44);
    v85 = *(void (**)(char *, uint64_t))(v81 + 8);
    v85(v80, v44);
    sub_100007928(v82, &qword_100091718);
    v86 = v111;
    sub_100007964(v43, (uint64_t)v111, &qword_1000916F0);
    swift_storeEnumTagMultiPayload(v86, v110, 0);
    v87 = sub_1000078D8(&qword_100091720, &qword_1000916F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v86, v109, &type metadata for Image, v87, &protocol witness table for Image);
    sub_100007928(v43, &qword_1000916F0);
    v85(v65, v44);
    return sub_100007928(v62, &qword_100091718);
  }
  else
  {
    v66 = Image.init(uiImage:)(v114);
    v67 = v108;
    v68 = v113;
    v69 = v115;
    (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v113, enum case for Image.ResizingMode.stretch(_:), v115);
    v70 = Image.resizable(capInsets:resizingMode:)(v68, v66, 0.0, 0.0, 0.0, 0.0);
    swift_release(v66);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
    v71 = v110;
    v72 = v111;
    *v111 = v70;
    swift_storeEnumTagMultiPayload(v72, v71, 1);
    v73 = sub_1000078D8(&qword_100091720, &qword_1000916F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    return _ConditionalContent<>.init(storage:)(v72, v109, &type metadata for Image, v73, &protocol witness table for Image);
  }
}

uint64_t sub_1000233BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t OpaqueTypeConformance2;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v166;
  char *v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  unsigned int v170;
  void (*v171)(char *, _QWORD, uint64_t);
  uint64_t v172;
  int v173;
  char *v174;
  uint64_t v175;
  uint64_t KeyPath;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, _QWORD, uint64_t);
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;

  v202 = a2;
  v195 = sub_100006454(&qword_100091748);
  __chkstk_darwin(v195);
  v196 = (char *)&v167 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100006454(&qword_100091750);
  v168 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v167 = (char *)&v167 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v5);
  v188 = (char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for BlendMode(0);
  v204 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v203 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for WidgetRenderingMode(0);
  v179 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v183 = (char *)&v167 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v182 = (uint64_t)&v167 - v11;
  v212 = type metadata accessor for Font.Leading(0, v10);
  v178 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v210 = (char *)&v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v167 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v167 - v21;
  v205 = sub_100006454(&qword_100091758);
  __chkstk_darwin(v205);
  v174 = (char *)&v167 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100006454(&qword_100091760);
  v192 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v25 = (char *)&v167 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006454(&qword_100091768);
  __chkstk_darwin(v26);
  v201 = (uint64_t)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)&v167 - v29;
  __chkstk_darwin(v31);
  v190 = (uint64_t)&v167 - v32;
  __chkstk_darwin(v33);
  v211 = (uint64_t)&v167 - v34;
  v35 = type metadata accessor for CPTitleView(0);
  v36 = *(int *)(v35 + 24);
  v209 = a1;
  v207 = a1 + v36;
  sub_100014E8C((uint64_t)v22);
  v37 = *(void (**)(_QWORD))(v14 + 104);
  v208 = enum case for WidgetFamily.systemSmall(_:);
  v181 = (void (*)(char *, _QWORD, uint64_t))v37;
  v37(v19);
  v38 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v213, v13, v38);
  v180 = v38;
  dispatch thunk of RawRepresentable.rawValue.getter(&v215, v13, v38);
  v39 = v213;
  v40 = v215;
  v198 = v14;
  v41 = *(void (**)(char *, uint64_t))(v14 + 8);
  v186 = v19;
  v41(v19, v13);
  v185 = v22;
  v194 = (void (*)(uint64_t, uint64_t))v41;
  v41(v22, v13);
  v199 = v16;
  v200 = v13;
  v191 = v25;
  v189 = v30;
  v206 = v35;
  if (v39 == v40)
  {
    v42 = 0x8000000100073E50;
    v43 = 0xD000000000000016;
  }
  else
  {
    v43 = sub_10004CAD4();
  }
  v44 = LocalizedStringKey.init(_:)(v43, v42);
  v45 = Text.init(_:tableName:bundle:comment:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  v52 = static Font.Weight.semibold.getter();
  v53 = Text.fontWeight(_:)(*(_QWORD *)&v52, 0, v45, v47, v51, v49);
  v55 = v54;
  v57 = v56;
  v59 = v58 & 1;
  sub_100007918(v45, v47, v51);
  swift_bridgeObjectRelease(v49);
  v60 = sub_100021738();
  v61 = v178;
  v62 = *(void (**)(_QWORD))(v178 + 104);
  v63 = v210;
  v170 = enum case for Font.Leading.tight(_:);
  v64 = v212;
  v171 = (void (*)(char *, _QWORD, uint64_t))v62;
  v62(v210);
  v65 = Font.leading(_:)(v63, v60);
  swift_release(v60);
  v169 = *(void (**)(char *, uint64_t))(v61 + 8);
  v169(v63, v64);
  v66 = Text.font(_:)(v65, v53, v55, v59, v57);
  v177 = v67;
  v173 = v68;
  v178 = v69;
  swift_release(v65);
  sub_100007918(v53, v55, v59);
  swift_bridgeObjectRelease(v57);
  KeyPath = swift_getKeyPath(&unk_100071980);
  v175 = swift_getKeyPath(&unk_1000719B0);
  v70 = v182;
  v71 = sub_100015074(v182);
  v72 = v183;
  static WidgetRenderingMode.accented.getter(v71);
  LOBYTE(v57) = static WidgetRenderingMode.== infix(_:_:)(v70, v72);
  v73 = *(void (**)(char *, uint64_t))(v179 + 8);
  v74 = v184;
  v73(v72, v184);
  v75 = ((uint64_t (*)(uint64_t, uint64_t))v73)(v70, v74);
  if ((v57 & 1) != 0)
    v76 = static Color.primary.getter(v75);
  else
    v76 = static Color.secondary.getter(v75);
  v179 = v76;
  v77 = swift_getKeyPath(&unk_1000719E0);
  v78 = sub_100015074(v70);
  static WidgetRenderingMode.accented.getter(v78);
  v79 = static WidgetRenderingMode.== infix(_:_:)(v70, v72);
  v73(v72, v74);
  v73((char *)v70, v74);
  v80 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v81 = v204;
  if ((v79 & 1) == 0)
    v80 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  v82 = v203;
  v83 = v187;
  (*(void (**)(char *, _QWORD, uint64_t))(v204 + 104))(v203, *v80, v187);
  v84 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v85 = (uint64_t)v188;
  v84(v188, v82, v83);
  v86 = (uint64_t)v174;
  sub_100007AF4(v85, (uint64_t)&v174[*(int *)(v205 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v87 = v177;
  *(_QWORD *)v86 = v66;
  *(_QWORD *)(v86 + 8) = v87;
  v88 = v66;
  v172 = v66;
  v89 = v173 & 1;
  *(_BYTE *)(v86 + 16) = v173 & 1;
  v90 = v178;
  v91 = KeyPath;
  *(_QWORD *)(v86 + 24) = v178;
  *(_QWORD *)(v86 + 32) = v91;
  *(_BYTE *)(v86 + 40) = 1;
  v92 = v175;
  *(_QWORD *)(v86 + 48) = v175;
  *(_QWORD *)(v86 + 56) = 1;
  *(_BYTE *)(v86 + 64) = 0;
  v93 = v179;
  *(_QWORD *)(v86 + 72) = v77;
  *(_QWORD *)(v86 + 80) = v93;
  sub_10001F6C4(v88, v87, v89);
  swift_bridgeObjectRetain(v90);
  swift_retain(v91);
  swift_retain(v92);
  swift_retain(v77);
  swift_retain(v93);
  sub_10000A7C0(v85, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v204 + 8))(v203, v83);
  sub_100007918(v172, v87, v89);
  swift_release(v93);
  swift_release(v77);
  swift_release(v92);
  v94 = v205;
  swift_release(v91);
  swift_bridgeObjectRelease(v90);
  v95 = sub_100025E2C();
  v96 = v191;
  View.widgetAccentable(_:)(1, v94, v95);
  sub_100007928(v86, &qword_100091758);
  v97 = (uint64_t)v185;
  sub_100014E8C((uint64_t)v185);
  v98 = v186;
  v99 = v200;
  v181(v186, v208, v200);
  v100 = v180;
  dispatch thunk of RawRepresentable.rawValue.getter(&v213, v99, v180);
  dispatch thunk of RawRepresentable.rawValue.getter(&v215, v99, v100);
  v101 = v213;
  v102 = v215;
  v103 = v194;
  v194((uint64_t)v98, v99);
  v103(v97, v99);
  if (v101 == v102)
  {
    v213 = v94;
    v214 = v95;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v213, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v105 = v167;
    v106 = v193;
    View.unredacted()(v193, OpaqueTypeConformance2);
    v107 = v168;
    v108 = v196;
    v109 = v197;
    (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v196, v105, v197);
    swift_storeEnumTagMultiPayload(v108, v195, 0);
    v213 = v106;
    v214 = OpaqueTypeConformance2;
    v110 = swift_getOpaqueTypeConformance2(&v213, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v111 = (uint64_t)v189;
    _ConditionalContent<>.init(storage:)(v108, v109, v106, v110, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v109);
    v112 = v209;
    v113 = v192;
  }
  else
  {
    v113 = v192;
    v114 = v196;
    v106 = v193;
    (*(void (**)(char *, char *, uint64_t))(v192 + 16))(v196, v96, v193);
    swift_storeEnumTagMultiPayload(v114, v195, 1);
    v213 = v94;
    v214 = v95;
    v115 = swift_getOpaqueTypeConformance2(&v213, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v213 = v106;
    v214 = v115;
    v116 = swift_getOpaqueTypeConformance2(&v213, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v111 = (uint64_t)v189;
    _ConditionalContent<>.init(storage:)(v114, v197, v106, v116, v115);
    v112 = v209;
  }
  v117 = v190;
  sub_100007A2C(v111, v190, &qword_100091768);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v96, v106);
  sub_100007A2C(v117, v211, &qword_100091768);
  v118 = *(_QWORD *)(v112 + *(int *)(v206 + 40));
  v119 = *(_QWORD *)(v118 + 48);
  v213 = *(_QWORD *)(v118 + 40);
  v214 = v119;
  v120 = sub_10000778C();
  swift_bridgeObjectRetain(v119);
  v121 = Text.init<A>(_:)(&v213, &type metadata for String, v120);
  v123 = v122;
  v125 = v124;
  v127 = v126 & 1;
  v128 = static Font.Weight.semibold.getter();
  v129 = Text.fontWeight(_:)(*(_QWORD *)&v128, 0, v121, v123, v127, v125);
  v131 = v130;
  v133 = v132;
  v135 = v134;
  sub_100007918(v121, v123, v127);
  swift_bridgeObjectRelease(v125);
  v136 = (uint64_t)v199;
  sub_100014E8C((uint64_t)v199);
  v137 = (*(uint64_t (**)(uint64_t, uint64_t))(v198 + 88))(v136, v99);
  if (v137 == v208 || (v138 = v137, v137 == enum case for WidgetFamily.systemMedium(_:)))
  {
    v139 = static Font.footnote.getter();
    goto LABEL_19;
  }
  if (v137 == enum case for WidgetFamily.systemLarge(_:))
  {
    v139 = static Font.callout.getter();
LABEL_19:
    v140 = v139;
    goto LABEL_20;
  }
  if (v137 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v139 = static Font.title3.getter();
    goto LABEL_19;
  }
  v166 = enum case for WidgetFamily.accessoryCircular(_:);
  v140 = static Font.caption2.getter();
  if (v138 != v166
    && v138 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v138 != enum case for WidgetFamily.accessoryInline(_:))
  {
    v103(v136, v99);
  }
LABEL_20:
  v141 = v169;
  v142 = v133 & 1;
  v143 = v210;
  v144 = v212;
  v171(v210, v170, v212);
  v145 = Font.leading(_:)(v143, v140);
  swift_release(v140);
  v141(v143, v144);
  v210 = (char *)Text.font(_:)(v145, v129, v131, v142, v135);
  v147 = v146;
  LOBYTE(v141) = v148;
  v212 = v149;
  swift_release(v145);
  LOBYTE(v145) = v141 & 1;
  sub_100007918(v129, v131, v142);
  swift_bridgeObjectRelease(v135);
  v150 = swift_getKeyPath(&unk_1000719B0);
  v151 = static Color.primary.getter(v150);
  v152 = swift_getKeyPath(&unk_1000719E0);
  v153 = swift_getKeyPath(&unk_100071A10);
  v154 = v211;
  v155 = v201;
  sub_100007964(v211, v201, &qword_100091768);
  v156 = v202;
  sub_100007964(v155, v202, &qword_100091768);
  v157 = v156 + *(int *)(sub_100006454(&qword_1000917B8) + 48);
  v158 = (uint64_t)v210;
  *(_QWORD *)v157 = v210;
  *(_QWORD *)(v157 + 8) = v147;
  *(_BYTE *)(v157 + 16) = v145;
  v159 = v212;
  *(_QWORD *)(v157 + 24) = v212;
  *(_QWORD *)(v157 + 32) = v150;
  *(_QWORD *)(v157 + 40) = 1;
  *(_BYTE *)(v157 + 48) = 0;
  *(_QWORD *)(v157 + 56) = v152;
  *(_QWORD *)(v157 + 64) = v151;
  *(_QWORD *)(v157 + 72) = v153;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v157 + 80) = _Q0;
  sub_10001F6C4(v158, v147, v145);
  swift_bridgeObjectRetain(v159);
  swift_retain(v150);
  swift_retain(v152);
  swift_retain(v151);
  swift_retain(v153);
  sub_100007928(v154, &qword_100091768);
  sub_100007918(v158, v147, v145);
  swift_release(v153);
  swift_release(v151);
  swift_release(v152);
  swift_release(v150);
  swift_bridgeObjectRelease(v159);
  return sub_100007928(v155, &qword_100091768);
}

uint64_t sub_10002422C(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v9 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for CPTitleView(0) + 44));
  v5 = v4[1];
  v13 = *v4;
  v14 = v5;
  v6 = *((_OWORD *)v4 + 2);
  v15 = *((_OWORD *)v4 + 1);
  v16 = v6;
  v10 = v9;
  v11 = v2;
  v12 = v3;
  v7 = sub_100006454(&qword_100091740);
  return Binding.wrappedValue.setter(&v10, v7);
}

uint64_t sub_1000242AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_100006454(&qword_100091628);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v7 = sub_100006454(&qword_100091630);
  v8 = sub_100021884(v1, &v6[*(int *)(v7 + 44)]);
  v9 = static Edge.Set.all.getter(v8);
  sub_100007964((uint64_t)v6, a1, &qword_100091628);
  v10 = a1 + *(int *)(sub_100006454(&qword_100091638) + 36);
  *(_BYTE *)v10 = v9;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 40) = 1;
  return sub_100007928((uint64_t)v6, &qword_100091628);
}

double sub_100024388(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  double v9;
  double v10;
  int v12;
  int v13;
  int v14;
  uint64_t v17;

  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for WidgetFamily.systemSmall(_:))
    return GeometryProxy.size.getter();
  v8 = v7;
  if (v7 == enum case for WidgetFamily.systemMedium(_:))
    goto LABEL_6;
  if (v7 == enum case for WidgetFamily.systemLarge(_:))
    return GeometryProxy.size.getter();
  if (v7 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
LABEL_6:
    GeometryProxy.size.getter();
    return v10;
  }
  v12 = enum case for WidgetFamily.accessoryCircular(_:);
  v13 = enum case for WidgetFamily.accessoryRectangular(_:);
  v14 = enum case for WidgetFamily.accessoryInline(_:);
  v9 = GeometryProxy.size.getter() * 0.4085;
  if (v8 != v12 && v8 != v13 && v8 != v14)
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

uint64_t *sub_1000244EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100006454(&qword_1000908D8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v31 = *v25;
      *v24 = *v25;
      swift_retain(v31);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    v32 = a3[7];
    v33 = (uint64_t *)((char *)v4 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
      v37 = v33;
      v38 = v35;
      v39 = 1;
    }
    else
    {
      v40 = *v34;
      *v33 = *v34;
      swift_retain(v40);
      v37 = v33;
      v38 = v35;
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v38, v39);
    v41 = a3[8];
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    v44 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    v45 = a3[9];
    v46 = (char *)v4 + v45;
    v47 = (char *)a2 + v45;
    v48 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    v49 = (int *)type metadata accessor for CPTimelineEntry(0);
    v50 = v49[5];
    v51 = *(_QWORD *)&v47[v50];
    *(_QWORD *)&v46[v50] = v51;
    v46[v49[6]] = v47[v49[6]];
    v46[v49[7]] = v47[v49[7]];
    v46[v49[8]] = v47[v49[8]];
    v46[v49[9]] = v47[v49[9]];
    v52 = a3[10];
    v53 = a3[11];
    v54 = *(uint64_t *)((char *)a2 + v52);
    *(uint64_t *)((char *)v4 + v52) = v54;
    v55 = (char *)v4 + v53;
    v56 = (char *)a2 + v53;
    v57 = *(_QWORD *)v56;
    v12 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v12;
    v58 = *((_OWORD *)v56 + 2);
    *((_OWORD *)v55 + 1) = *((_OWORD *)v56 + 1);
    *((_OWORD *)v55 + 2) = v58;
    swift_bridgeObjectRetain(v51);
    swift_retain(v54);
    swift_retain(v57);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_100024810(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)a1 + a2[6]);
  v10 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)a1 + a2[7]);
  v13 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (char *)a1 + a2[8];
  v16 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = (char *)a1 + a2[9];
  v18 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v17[*(int *)(v19 + 20)]);
  swift_release(*(_QWORD *)((char *)a1 + a2[10]));
  v20 = (_QWORD *)((char *)a1 + a2[11]);
  swift_release(*v20);
  return swift_release(v20[1]);
}

uint64_t *sub_1000249EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;

  v6 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = v22;
    v27 = v24;
    v28 = 1;
  }
  else
  {
    v29 = *v23;
    *v22 = *v23;
    swift_retain(v29);
    v26 = v22;
    v27 = v24;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
  v30 = a3[7];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  v33 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
    v35 = v31;
    v36 = v33;
    v37 = 1;
  }
  else
  {
    v38 = *v32;
    *v31 = *v32;
    swift_retain(v38);
    v35 = v31;
    v36 = v33;
    v37 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v36, v37);
  v39 = a3[8];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = a3[9];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
  v47 = (int *)type metadata accessor for CPTimelineEntry(0);
  v48 = v47[5];
  v49 = *(_QWORD *)&v45[v48];
  *(_QWORD *)&v44[v48] = v49;
  v44[v47[6]] = v45[v47[6]];
  v44[v47[7]] = v45[v47[7]];
  v44[v47[8]] = v45[v47[8]];
  v44[v47[9]] = v45[v47[9]];
  v50 = a3[10];
  v51 = a3[11];
  v52 = *(uint64_t *)((char *)a2 + v50);
  *(uint64_t *)((char *)a1 + v50) = v52;
  v53 = (char *)a1 + v51;
  v54 = (char *)a2 + v51;
  v55 = *(_QWORD *)v54;
  v56 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *((_QWORD *)v53 + 1) = v56;
  v57 = *((_OWORD *)v54 + 2);
  *((_OWORD *)v53 + 1) = *((_OWORD *)v54 + 1);
  *((_OWORD *)v53 + 2) = v57;
  swift_bridgeObjectRetain(v49);
  swift_retain(v52);
  swift_retain(v55);
  swift_retain(v56);
  return a1;
}

uint64_t *sub_100024CE8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000908D8);
    v6 = sub_100006454(&qword_1000908D8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100007928((uint64_t)a1 + v12, &qword_1000907A8);
    v15 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = a3[6];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_100007928((uint64_t)a1 + v21, &qword_1000907B0);
    v24 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
    v30 = a3[7];
    v31 = (uint64_t *)((char *)a1 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    sub_100007928((uint64_t)a1 + v30, &qword_1000908D0);
    v33 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = v31;
      v36 = v33;
      v37 = 1;
    }
    else
    {
      v38 = *v32;
      *v31 = *v32;
      swift_retain(v38);
      v35 = v31;
      v36 = v33;
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v36, v37);
  }
  v39 = a3[8];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[9];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  v47 = (int *)type metadata accessor for CPTimelineEntry(0);
  v48 = v47[5];
  v49 = *(_QWORD *)&v45[v48];
  v50 = *(_QWORD *)&v44[v48];
  *(_QWORD *)&v44[v48] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v44[v47[6]] = v45[v47[6]];
  v44[v47[7]] = v45[v47[7]];
  v44[v47[8]] = v45[v47[8]];
  v44[v47[9]] = v45[v47[9]];
  v51 = a3[10];
  v52 = *(uint64_t *)((char *)a2 + v51);
  v53 = *(uint64_t *)((char *)a1 + v51);
  *(uint64_t *)((char *)a1 + v51) = v52;
  swift_retain(v52);
  swift_release(v53);
  v54 = a3[11];
  v55 = (uint64_t *)((char *)a1 + v54);
  v56 = (uint64_t *)((char *)a2 + v54);
  v57 = *(uint64_t *)((char *)a1 + v54);
  v58 = *v56;
  *(uint64_t *)((char *)a1 + v54) = *v56;
  swift_retain(v58);
  swift_release(v57);
  v59 = v56[1];
  v60 = v55[1];
  v55[1] = v59;
  swift_retain(v59);
  swift_release(v60);
  v55[2] = v56[2];
  v55[3] = v56[3];
  v55[4] = v56[4];
  v55[5] = v56[5];
  return a1;
}

char *sub_10002507C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;

  v6 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)&v28[v31[5]] = *(_QWORD *)&v29[v31[5]];
  v28[v31[6]] = v29[v31[6]];
  v28[v31[7]] = v29[v31[7]];
  v28[v31[8]] = v29[v31[8]];
  v28[v31[9]] = v29[v31[9]];
  v32 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *((_OWORD *)v34 + 2);
  v36 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = *((_OWORD *)v34 + 1);
  *((_OWORD *)v33 + 2) = v35;
  *(_OWORD *)v33 = v36;
  return a1;
}

char *sub_100025348(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000908D8);
    v6 = sub_100006454(&qword_1000908D8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100007928((uint64_t)&a1[v8], &qword_1000907A8);
    v11 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = &a2[v13];
    sub_100007928((uint64_t)&a1[v13], &qword_1000907B0);
    v16 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v18 = a3[7];
    v19 = &a1[v18];
    v20 = &a2[v18];
    sub_100007928((uint64_t)&a1[v18], &qword_1000908D0);
    v21 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
      swift_storeEnumTagMultiPayload(v19, v21, 1);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = (int *)type metadata accessor for CPTimelineEntry(0);
  v32 = v31[5];
  v33 = *(_QWORD *)&v28[v32];
  *(_QWORD *)&v28[v32] = *(_QWORD *)&v29[v32];
  swift_bridgeObjectRelease(v33);
  v28[v31[6]] = v29[v31[6]];
  v28[v31[7]] = v29[v31[7]];
  v28[v31[8]] = v29[v31[8]];
  v28[v31[9]] = v29[v31[9]];
  v34 = a3[10];
  v35 = *(_QWORD *)&a1[v34];
  *(_QWORD *)&a1[v34] = *(_QWORD *)&a2[v34];
  swift_release(v35);
  v36 = a3[11];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *(_QWORD *)&a1[v36];
  *(_QWORD *)&a1[v36] = *(_QWORD *)v38;
  swift_release(v39);
  v40 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_release(v40);
  v41 = *((_OWORD *)v38 + 2);
  *((_OWORD *)v37 + 1) = *((_OWORD *)v38 + 1);
  *((_OWORD *)v37 + 2) = v41;
  return a1;
}

uint64_t sub_10002568C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025698);
}

uint64_t sub_100025698(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;

  v6 = sub_100006454(&qword_100091570);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907B8);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_13:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_13;
  }
  v15 = sub_100006454(&qword_1000908C0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_13;
  }
  v16 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[8];
    goto LABEL_13;
  }
  v17 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[9];
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(a1 + a3[10]);
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

uint64_t sub_1000257E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000257EC);
}

uint64_t sub_1000257EC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v8 = sub_100006454(&qword_100091570);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907B8);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_13:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_13;
  }
  v17 = sub_100006454(&qword_1000908C0);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[7];
    goto LABEL_13;
  }
  v18 = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[8];
    goto LABEL_13;
  }
  result = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CPTitleView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000915D0;
  if (!qword_1000915D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPTitleView);
  return result;
}

void sub_10002596C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[8];

  sub_10000764C(319, (unint64_t *)&unk_1000915E0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10000764C(319, (unint64_t *)&unk_1000912E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for GeometryProxy(319);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            v12 = type metadata accessor for CPTimelineEntry(319);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              v14[6] = (char *)&value witness table for Builtin.NativeObject + 64;
              v14[7] = "0";
              swift_initStructMetadata(a1, 256, 8, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100025AB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074A90, 1);
}

uint64_t sub_100025AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100021A80(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100025AD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091650;
  if (!qword_100091650)
  {
    v1 = sub_100006494(&qword_100091648);
    sub_1000078D8(&qword_100091658, &qword_100091660, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_1000078D8(&qword_100090978, &qword_100090950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091650);
  }
  return result;
}

uint64_t sub_100025B74()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = (int *)type metadata accessor for CPTitleView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)v6 + v1[6]);
  v13 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (_QWORD *)((char *)v6 + v1[7]);
  v16 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = v3 | 7;
  v19 = v4 + v5;
  v20 = (char *)v6 + v1[8];
  v21 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (char *)v6 + v1[9];
  v23 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v22[*(int *)(v24 + 20)]);
  swift_release(*(_QWORD *)((char *)v6 + v1[10]));
  v25 = (_QWORD *)((char *)v6 + v1[11]);
  swift_release(*v25);
  swift_release(v25[1]);
  return swift_deallocObject(v0, v19, v18);
}

uint64_t sub_100025D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CPTitleView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025DD8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CPTitleView(0) - 8) + 80);
  return sub_10002422C(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_100025E2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091770;
  if (!qword_100091770)
  {
    v1 = sub_100006494(&qword_100091758);
    sub_100025E98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091770);
  }
  return result;
}

unint64_t sub_100025E98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091778;
  if (!qword_100091778)
  {
    v1 = sub_100006494(&qword_100091780);
    sub_100025F1C();
    sub_1000078D8(&qword_1000913F0, &qword_1000913F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091778);
  }
  return result;
}

unint64_t sub_100025F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091788;
  if (!qword_100091788)
  {
    v1 = sub_100006494(&qword_100091790);
    sub_100025FA0();
    sub_1000078D8(&qword_1000917A8, &qword_1000917B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091788);
  }
  return result;
}

unint64_t sub_100025FA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091798;
  if (!qword_100091798)
  {
    v1 = sub_100006494(&qword_1000917A0);
    sub_1000078D8(&qword_100091410, &qword_100091418, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091798);
  }
  return result;
}

unint64_t sub_100026030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000917C0;
  if (!qword_1000917C0)
  {
    v1 = sub_100006494(&qword_100091638);
    sub_1000078D8(&qword_1000917C8, &qword_100091628, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000917C0);
  }
  return result;
}

uint64_t sub_1000260B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000260C0);
}

uint64_t sub_1000260C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_9;
  }
  v15 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[9] + 32);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_1000261C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000261D4);
}

uint64_t sub_1000261D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_9;
  }
  result = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[9] + 32) = a2;
  return result;
}

uint64_t type metadata accessor for CPExtraLargeContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100091828;
  if (!qword_100091828)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPExtraLargeContentView);
  return result;
}

void sub_100026308(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      v6 = type metadata accessor for GeometryProxy(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for CPTimelineEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100071AA0;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1000263F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074AE0, 1);
}

uint64_t sub_100026404@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v3 = sub_100006454(&qword_100091888);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - v7;
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - v14;
  v16 = a1 + *(int *)(type metadata accessor for CPExtraLargeContentView(0) + 24);
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_100006904(*(_QWORD *)v16, v18);
  v19 = sub_100014EBC(v17, v18);
  sub_100006A4C(v17, v18);
  v21 = 0;
  if ((v19 & 1) != 0)
  {
    v22 = sub_100015074((uint64_t)v15);
    static WidgetRenderingMode.accented.getter(v22);
    v23 = sub_10001D0A4();
    v24 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v9, v23);
    v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v12, v9);
    v25(v15, v9);
    if ((v24 & 1) != 0)
    {
      v21 = 0;
    }
    else
    {
      if (qword_1000906D8 != -1)
        swift_once(&qword_1000906D8, sub_10000AB08);
      v21 = qword_1000959B0;
      swift_retain(qword_1000959B0);
    }
  }
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v26 = sub_100006454(&qword_100091890);
  sub_100026660(a1, (uint64_t)&v8[*(int *)(v26 + 44)]);
  sub_100007964((uint64_t)v8, (uint64_t)v5, &qword_100091888);
  v27 = v31;
  *v31 = v21;
  v28 = sub_100006454(&qword_100091898);
  sub_100007964((uint64_t)v5, (uint64_t)v27 + *(int *)(v28 + 48), &qword_100091888);
  swift_retain(v21);
  sub_100007928((uint64_t)v8, &qword_100091888);
  sub_100007928((uint64_t)v5, &qword_100091888);
  return swift_release(v21);
}

uint64_t sub_100026660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[3];

  v65 = a2;
  v3 = sub_100006454(&qword_1000918A0);
  __chkstk_darwin(v3);
  v63 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CPAppGridView(0);
  __chkstk_darwin(v5);
  v61 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100006454(&qword_1000918A8);
  __chkstk_darwin(v62);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v64 = (uint64_t)&v56 - v10;
  v60 = type metadata accessor for WidgetFamily(0);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_1000918B0);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100006454(&qword_1000918B8);
  __chkstk_darwin(v57);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v56 - v19;
  v21 = sub_100006454(&qword_1000918C0);
  __chkstk_darwin(v21);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100006454(&qword_1000918C8);
  __chkstk_darwin(v24);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v59 = (uint64_t)&v56 - v28;
  sub_100026B7C((uint64_t)v23);
  sub_1000279D8(a1, (uint64_t)v15);
  v29 = *(int *)(type metadata accessor for CPExtraLargeContentView(0) + 28);
  v56 = a1;
  v30 = a1 + v29;
  sub_100014E8C((uint64_t)v12);
  v31 = sub_100024388(v30, (uint64_t)v12);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v12, v60);
  v33 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(v66, *(_QWORD *)&v31, 0, 0, 1, v33, v34);
  sub_100007964((uint64_t)v15, (uint64_t)v17, &qword_1000918B0);
  v35 = &v17[*(int *)(v57 + 36)];
  v36 = v66[1];
  *(_OWORD *)v35 = v66[0];
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v66[2];
  sub_100007928((uint64_t)v15, &qword_1000918B0);
  v37 = sub_100007A2C((uint64_t)v17, (uint64_t)v20, &qword_1000918B8);
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = (uint64_t)&v26[*(int *)(v24 + 36)];
  sub_100007964((uint64_t)v20, v41, &qword_1000918B8);
  v42 = (uint64_t *)(v41 + *(int *)(sub_100006454(&qword_1000918D0) + 36));
  *v42 = v38;
  v42[1] = v40;
  sub_100007964((uint64_t)v23, (uint64_t)v26, &qword_1000918C0);
  sub_100007928((uint64_t)v20, &qword_1000918B8);
  sub_100007928((uint64_t)v23, &qword_1000918C0);
  v43 = v59;
  sub_100007A2C((uint64_t)v26, v59, &qword_1000918C8);
  v44 = v61;
  sub_1000270F8(v61);
  v45 = v63;
  v46 = sub_100027398(v63);
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  v50 = (uint64_t)&v8[*(int *)(v62 + 36)];
  sub_100007964(v45, v50, &qword_1000918A0);
  v51 = (uint64_t *)(v50 + *(int *)(sub_100006454(&qword_1000918D8) + 36));
  *v51 = v47;
  v51[1] = v49;
  sub_100007AF4(v44, (uint64_t)v8, type metadata accessor for CPAppGridView);
  sub_100007928(v45, &qword_1000918A0);
  sub_10000A7C0(v44, type metadata accessor for CPAppGridView);
  v52 = v64;
  sub_100007A2C((uint64_t)v8, v64, &qword_1000918A8);
  sub_100007964(v43, (uint64_t)v26, &qword_1000918C8);
  sub_100007964(v52, (uint64_t)v8, &qword_1000918A8);
  v53 = v65;
  sub_100007964((uint64_t)v26, v65, &qword_1000918C8);
  v54 = sub_100006454(&qword_1000918E0);
  sub_100007964((uint64_t)v8, v53 + *(int *)(v54 + 48), &qword_1000918A8);
  sub_100007928(v52, &qword_1000918A8);
  sub_100007928(v43, &qword_1000918C8);
  sub_100007928((uint64_t)v8, &qword_1000918A8);
  return sub_100007928((uint64_t)v26, &qword_1000918C8);
}

uint64_t sub_100026B7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[3];

  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  __chkstk_darwin(v3);
  v68 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100006454(&qword_100091A20);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v62 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100006454(&qword_100091A28);
  __chkstk_darwin(v64);
  v67 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100091A30);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v66 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v12);
  v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v73 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v71 = (char *)v59 - v19;
  v20 = type metadata accessor for CPExtraLargeContentView(0);
  v21 = v1;
  v22 = v1 + *(int *)(v20 + 32);
  v23 = type metadata accessor for CPTimelineEntry(0);
  v24 = *(_QWORD *)(v22 + *(int *)(v23 + 20));
  if (!((unint64_t)v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*(_QWORD *)(v22 + *(int *)(v23 + 20)));
    if (v25)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v24);
    v31 = 1;
    goto LABEL_14;
  }
  if (v24 < 0)
    v58 = *(_QWORD *)(v22 + *(int *)(v23 + 20));
  else
    v58 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v22 + *(int *)(v23 + 20)));
  result = _CocoaArrayWrapper.endIndex.getter(v58);
  if (!result)
    goto LABEL_13;
LABEL_3:
  v61 = a1;
  if ((v24 & 0xC000000000000001) != 0)
  {
    v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
    v27 = v21;
    goto LABEL_6;
  }
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v27 = v21;
    v60 = *(_QWORD *)(v24 + 32);
    swift_retain(v60);
LABEL_6:
    swift_bridgeObjectRelease(v24);
    sub_100014E8C((uint64_t)v11);
    sub_1000083FC((uint64_t)v11, (uint64_t)v14);
    v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v11, v72);
    v29 = v73;
    v30 = v74;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v14, 1, v74) != 1)
    {
      v32 = v30;
      v33 = v71;
      v34 = v32;
      (*(void (**)(void))(v29 + 32))();
      v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 16))(v17, v33, v34);
      v59[1] = v59;
      __chkstk_darwin(v35);
      v36 = v60;
      v59[-2] = v27;
      v59[-1] = v36;
      v37 = sub_100006454(&qword_100091A38);
      v38 = sub_1000078D8(&qword_100091A40, &qword_100091A38, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v39 = v27;
      v40 = v62;
      Link.init(destination:label:)(v17, sub_100029AB8, &v59[-4], v37, v38);
      v41 = v39 + *(int *)(v20 + 28);
      sub_100014E8C((uint64_t)v11);
      v42 = sub_100024388(v41, (uint64_t)v11);
      v43 = ((uint64_t (*)(char *, uint64_t))v28)(v11, v72);
      v44 = static Alignment.center.getter(v43);
      _FrameLayout.init(width:height:alignment:)(v77, *(_QWORD *)&v42, 0, 0, 1, v44, v45);
      v46 = v63;
      v47 = (uint64_t)v67;
      v48 = v65;
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v67, v40, v65);
      v49 = v64;
      v50 = (_OWORD *)(v47 + *(int *)(v64 + 36));
      v51 = v77[1];
      *v50 = v77[0];
      v50[1] = v51;
      v50[2] = v77[2];
      v52 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v40, v48);
      v53 = v68;
      static AccessibilityChildBehavior.combine.getter(v52);
      v54 = sub_100029AC0();
      v55 = v66;
      View.accessibilityElement(children:)(v53, v49, v54);
      swift_release(v36);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v70);
      sub_100007928(v47, &qword_100091A28);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v74);
      v57 = v75;
      v56 = v76;
      a1 = v61;
      (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v61, v55, v76);
      v31 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(a1, v31, 1, v56);
    }
    swift_release(v60);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
    v31 = 1;
    a1 = v61;
LABEL_14:
    v57 = v75;
    v56 = v76;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(a1, v31, 1, v56);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000270F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;

  v3 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for GeometryProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CPExtraLargeContentView(0);
  sub_100007AF4(v1 + *(int *)(v16 + 32), (uint64_t)v15, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v1 + *(int *)(v16 + 28), v9);
  *v8 = swift_getKeyPath(&unk_100071B38);
  v17 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v8, v17, 0);
  *v5 = swift_getKeyPath(&unk_100071B08);
  v18 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v5, v18, 0);
  sub_100007AB0((uint64_t)v15, a1, type metadata accessor for CPTimelineEntry);
  v19 = (int *)type metadata accessor for CPAppGridView(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1 + v19[5], v12, v9);
  *(_QWORD *)(a1 + v19[6]) = 2;
  *(_QWORD *)(a1 + v19[7]) = 3;
  *(_BYTE *)(a1 + v19[8]) = 0;
  v20 = (_QWORD *)(a1 + v19[9]);
  *v20 = swift_getKeyPath(&unk_100071B68);
  v21 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = (_QWORD *)(a1 + v19[10]);
  *v22 = swift_getKeyPath(&unk_100071B98);
  v23 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  sub_100007A2C((uint64_t)v8, a1 + v19[11], &qword_1000907C0);
  return sub_100007A2C((uint64_t)v5, a1 + v19[12], &qword_1000908C0);
}

uint64_t sub_100027398@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];

  v2 = v1;
  v34 = a1;
  v3 = sub_100006454(&qword_1000918E8);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006454(&qword_1000918F0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetRenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - v15;
  v17 = sub_100015074((uint64_t)&v33 - v15);
  static WidgetRenderingMode.accented.getter(v17);
  v18 = sub_10001D0A4();
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v10, v18);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  v20(v16, v10);
  if ((v19 & 1) != 0)
  {
    v21 = 1;
    v22 = v34;
  }
  else
  {
    sub_100028AB8(v2, (uint64_t)v5);
    v23 = type metadata accessor for CPExtraLargeContentView(0);
    GeometryProxy.size.getter(v23);
    v25 = v24;
    v27 = static Alignment.center.getter(v26);
    _FrameLayout.init(width:height:alignment:)(v35, 0, 1, v25, 0, v27, v28);
    sub_100007964((uint64_t)v5, (uint64_t)v9, &qword_1000918E8);
    v29 = &v9[*(int *)(v6 + 36)];
    v30 = v35[1];
    *(_OWORD *)v29 = v35[0];
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v35[2];
    sub_100007928((uint64_t)v5, &qword_1000918E8);
    v31 = v34;
    sub_100007A2C((uint64_t)v9, v34, &qword_1000918F0);
    v21 = 0;
    v22 = v31;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v22, v21, 1, v6);
}

uint64_t sub_1000275B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v6 = sub_100006454(&qword_100091A58);
  return sub_100027614(a1, a2, (_QWORD *)(a3 + *(int *)(v6 + 44)));
}

uint64_t sub_100027614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a3;
  v48 = a2;
  v4 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v4);
  v46 = (uint64_t *)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v11;
  v12 = type metadata accessor for GeometryProxy(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for CPTitleView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v43 - v20;
  v22 = (int *)type metadata accessor for CPExtraLargeContentView(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1 + v22[7], v12);
  sub_100007AF4(a1 + v22[8], (uint64_t)v11, type metadata accessor for CPTimelineEntry);
  v23 = (__int128 *)(a1 + v22[9]);
  v24 = *((_QWORD *)v23 + 4);
  v25 = v23[1];
  v49 = *v23;
  v50 = v25;
  v51 = v24;
  swift_retain(v48);
  v26 = sub_100006454(&qword_1000908C8);
  State.projectedValue.getter(v52, v26);
  v27 = v52[0];
  v44 = v52[1];
  v43 = v53;
  v28 = v54;
  v29 = v55;
  *v8 = swift_getKeyPath(&unk_100071B38);
  v30 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v8, v30, 0);
  KeyPath = swift_getKeyPath(&unk_100071B08);
  v32 = (uint64_t)v46;
  *v46 = KeyPath;
  v33 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  *(_QWORD *)v18 = swift_getKeyPath(&unk_100071B68);
  v34 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v18, v34, 0);
  v35 = &v18[v16[5]];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_100071B98);
  v36 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  sub_100007A2C((uint64_t)v8, (uint64_t)&v18[v16[6]], &qword_1000907C0);
  sub_100007A2C(v32, (uint64_t)&v18[v16[7]], &qword_1000908C0);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v16[8]], v15, v12);
  sub_100007AB0((uint64_t)v45, (uint64_t)&v18[v16[9]], type metadata accessor for CPTimelineEntry);
  *(_QWORD *)&v18[v16[10]] = v48;
  v37 = &v18[v16[11]];
  v38 = v44;
  *(_QWORD *)v37 = v27;
  *((_QWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 1) = v43;
  *((_QWORD *)v37 + 4) = v28;
  *((_QWORD *)v37 + 5) = v29;
  sub_100007AB0((uint64_t)v18, (uint64_t)v21, type metadata accessor for CPTitleView);
  sub_100007AF4((uint64_t)v21, (uint64_t)v18, type metadata accessor for CPTitleView);
  v39 = v47;
  *v47 = 0;
  *((_BYTE *)v39 + 8) = 0;
  v40 = v39;
  v41 = sub_100006454(&qword_100091A60);
  sub_100007AF4((uint64_t)v18, (uint64_t)v40 + *(int *)(v41 + 48), type metadata accessor for CPTitleView);
  sub_10000A7C0((uint64_t)v21, type metadata accessor for CPTitleView);
  return sub_10000A7C0((uint64_t)v18, type metadata accessor for CPTitleView);
}

uint64_t sub_1000279D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v3 = sub_100006454(&qword_100091990);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100006454(&qword_100091998);
  __chkstk_darwin(v41);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WidgetFamily(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006454(&qword_1000919A0);
  __chkstk_darwin(v42);
  v43 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CPExtraLargeContentView(0);
  v12 = a1 + *(int *)(v11 + 32);
  v13 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 32)) == 1)
  {
    v14 = a1 + *(int *)(v11 + 24);
    v15 = *(_QWORD *)v14;
    v38 = v8;
    v16 = *(_BYTE *)(v14 + 8);
    sub_100006904(v15, v16);
    v17 = sub_100014EBC(v15, v16);
    v18 = v16;
    v8 = v38;
    sub_100006A4C(v15, v18);
    if ((v17 & 1) == 0)
    {
      v26 = v43;
      swift_storeEnumTagMultiPayload(v43, v42, 0);
      v27 = sub_1000078D8(&qword_1000919B8, &qword_100091998, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v28 = v44;
      _ConditionalContent<>.init(storage:)(v26, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v27);
      v29 = sub_100006454(&qword_1000919A8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    }
  }
  v19 = *(_QWORD *)(v12 + *(int *)(v13 + 20));
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v35 = v19;
    else
      v35 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    result = _CocoaArrayWrapper.endIndex.getter(v35);
    if (result)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease(v19);
    goto LABEL_19;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v19);
  if (!v20)
    goto LABEL_18;
LABEL_5:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v22 = *(_QWORD *)(v19 + 32);
    swift_retain(v22);
  }
  swift_bridgeObjectRelease(v19);
  if (!*(_QWORD *)(v22 + 32)
    && (v25 = sub_10004CF70(0xD00000000000001ELL, 0x8000000100073F10), (v24 = (void *)v25) != 0)
    || (v23 = v39,
        sub_100014E8C(v39),
        v24 = sub_10001FC38(v23, 1),
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v23, v8),
        v24))
  {
    *v7 = static Alignment.center.getter(v25);
    v7[1] = v30;
    v31 = sub_100006454(&qword_1000919B0);
    sub_100027E20(v24, a1, (uint64_t)v7 + *(int *)(v31 + 44));
    v32 = v43;
    sub_100007964((uint64_t)v7, v43, &qword_100091998);
    swift_storeEnumTagMultiPayload(v32, v42, 1);
    v33 = sub_1000078D8(&qword_1000919B8, &qword_100091998, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v32, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v33);

    swift_release(v22);
    sub_100007928((uint64_t)v7, &qword_100091998);
    v34 = sub_100006454(&qword_1000919A8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 0, 1, v34);
    return sub_100007A2C((uint64_t)v5, v44, &qword_100091990);
  }
  swift_release(v22);
LABEL_19:
  v36 = sub_100006454(&qword_1000919A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v44, 1, 1, v36);
}

uint64_t sub_100027E20@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v108 = a2;
  v125 = a3;
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v123 = *(_QWORD *)(v4 - 8);
  v124 = v4;
  __chkstk_darwin(v4);
  v118 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v115 = (uint64_t)&v99 - v7;
  v8 = type metadata accessor for BlendMode(0);
  v121 = *(_QWORD *)(v8 - 8);
  v122 = v8;
  __chkstk_darwin(v8);
  v120 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100006454(&qword_1000919C0);
  __chkstk_darwin(v112);
  v109 = (uint64_t *)((char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100006454(&qword_1000919C8);
  v116 = *(_QWORD *)(v11 - 8);
  v117 = v11;
  __chkstk_darwin(v11);
  v110 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100006454(&qword_1000919D0);
  __chkstk_darwin(v113);
  v119 = (uint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v111 = (char *)&v99 - v15;
  __chkstk_darwin(v16);
  v114 = (uint64_t)&v99 - v17;
  v107 = type metadata accessor for ColorScheme(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for WidgetFamily(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Image.ResizingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006454(&qword_1000908F8);
  __chkstk_darwin(v25);
  v27 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100006454(&qword_100090900);
  __chkstk_darwin(v28);
  v30 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100006454(&qword_1000919D8);
  __chkstk_darwin(v31);
  v99 = (uint64_t)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100006454(&qword_1000919E0);
  __chkstk_darwin(v100);
  v34 = (char *)&v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100006454(&qword_1000919E8);
  __chkstk_darwin(v35);
  v103 = (char *)&v99 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v104 = (uint64_t)&v99 - v38;
  v39 = Image.init(uiImage:)(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for Image.ResizingMode.stretch(_:), v21);
  v40 = Image.resizable(capInsets:resizingMode:)(v24, v39, 0.0, 0.0, 0.0, 0.0);
  swift_release(v39);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  *(_QWORD *)v27 = static Alignment.center.getter(v41);
  *((_QWORD *)v27 + 1) = v42;
  v43 = sub_100006454(&qword_100090948);
  sub_100054948(v40, &v27[*(int *)(v43 + 44)], 0.3);
  swift_release(v40);
  sub_100007964((uint64_t)v27, (uint64_t)v30, &qword_1000908F8);
  v44 = &v30[*(int *)(v28 + 36)];
  *(_QWORD *)v44 = 0;
  *((_WORD *)v44 + 4) = 257;
  sub_100007928((uint64_t)v27, &qword_1000908F8);
  v45 = type metadata accessor for CPExtraLargeContentView(0);
  v46 = v108;
  v47 = v108 + *(int *)(v45 + 28);
  sub_100014E8C((uint64_t)v20);
  v48 = sub_100024388(v47, (uint64_t)v20);
  v49 = *(void (**)(char *, uint64_t))(v101 + 8);
  v50 = v102;
  v49(v20, v102);
  v51 = v48;
  sub_100014E8C((uint64_t)v20);
  v52 = sub_100024388(v47, (uint64_t)v20);
  v53 = ((uint64_t (*)(char *, uint64_t))v49)(v20, v50);
  v54 = v52;
  GeometryProxy.size.getter(v53);
  v56 = v55;
  GeometryProxy.size.getter(v57);
  v59 = v58;
  v61 = static Alignment.center.getter(v60);
  v62 = v99;
  sub_100062FB8(0.0, 1, v51, 0, v54, 0, 0.0, 1, v99, v56, 0, v59, 0, v61, v63);
  sub_100007928((uint64_t)v30, &qword_100090900);
  v64 = v106;
  v65 = v105;
  v66 = v107;
  (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v105, enum case for ColorScheme.light(_:), v107);
  KeyPath = swift_getKeyPath(&unk_100071BC8);
  v68 = v100;
  v69 = (uint64_t *)&v34[*(int *)(v100 + 36)];
  v70 = sub_100006454(&qword_100090950);
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))((char *)v69 + *(int *)(v70 + 28), v65, v66);
  *v69 = KeyPath;
  sub_100007964(v62, (uint64_t)v34, &qword_1000919D8);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  sub_100007928(v62, &qword_1000919D8);
  v71 = sub_1000299C8(&qword_1000919F0, &qword_1000919E0, (void (*)(void))sub_100029A4C);
  v72 = (uint64_t)v103;
  View.accessibility(hidden:)(1, v68, v71);
  sub_100007928((uint64_t)v34, &qword_1000919E0);
  v73 = v104;
  v74 = sub_100007A2C(v72, v104, &qword_1000919E8);
  v75 = static HorizontalAlignment.center.getter(v74);
  v76 = (uint64_t)v109;
  *v109 = v75;
  *(_QWORD *)(v76 + 8) = 0;
  *(_BYTE *)(v76 + 16) = 1;
  v77 = sub_100006454(&qword_100091A00);
  sub_100028704(v46, v76 + *(int *)(v77 + 44));
  v78 = sub_1000078D8(&qword_100091A08, &qword_1000919C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v79 = v110;
  View.widgetAccentable(_:)(1, v112, v78);
  sub_100007928(v76, &qword_1000919C0);
  v80 = v115;
  v81 = sub_100015074(v115);
  v82 = v118;
  static WidgetRenderingMode.accented.getter(v81);
  v83 = v82;
  LOBYTE(v82) = static WidgetRenderingMode.== infix(_:_:)(v80, v82);
  v84 = *(void (**)(char *, uint64_t))(v123 + 8);
  v85 = v83;
  v86 = v124;
  v84(v85, v124);
  v84((char *)v80, v86);
  v87 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
  v89 = v120;
  v88 = v121;
  if ((v82 & 1) == 0)
    v87 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v90 = v122;
  (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v120, *v87, v122);
  v91 = (uint64_t)v111;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(&v111[*(int *)(v113 + 36)], v89, v90);
  v93 = v116;
  v92 = v117;
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v91, v79, v117);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v90);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v79, v92);
  v94 = v114;
  sub_100007A2C(v91, v114, &qword_1000919D0);
  sub_100007964(v73, v72, &qword_1000919E8);
  v95 = v119;
  sub_100007964(v94, v119, &qword_1000919D0);
  v96 = v125;
  sub_100007964(v72, v125, &qword_1000919E8);
  v97 = sub_100006454(&qword_100091A10);
  sub_100007964(v95, v96 + *(int *)(v97 + 48), &qword_1000919D0);
  sub_100007928(v94, &qword_1000919D0);
  sub_100007928(v73, &qword_1000919E8);
  sub_100007928(v95, &qword_1000919D0);
  return sub_100007928(v72, &qword_1000919E8);
}

uint64_t sub_100028704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v46 = type metadata accessor for CPTitleGradientView(0);
  __chkstk_darwin(v46);
  v4 = (uint64_t (**)(char *, uint64_t))((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v45 = (uint64_t)&v40 - v6;
  v7 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v7);
  v44 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CPHeaderGradientView(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t (**)(char *, uint64_t))((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v43 = (uint64_t)&v40 - v17;
  v18 = (int *)type metadata accessor for CPExtraLargeContentView(0);
  v19 = a1 + v18[7];
  v42 = a1 + v18[5];
  sub_100014E8C((uint64_t)v12);
  v20 = sub_100024388(v19, (uint64_t)v12);
  v40 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v21 = v40(v12, v9);
  GeometryProxy.size.getter(v21);
  v23 = v22 * 0.20625;
  v24 = a1 + v18[8];
  v25 = v44;
  sub_100007AF4(v24, v44, type metadata accessor for CPTimelineEntry);
  *v15 = swift_getKeyPath(&unk_100071B98);
  v26 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v15, v26, 0);
  v27 = (double *)((char *)v15 + *(int *)(v13 + 20));
  *v27 = v20;
  v27[1] = v23;
  sub_100007AB0(v25, (uint64_t)v15 + *(int *)(v13 + 24), type metadata accessor for CPTimelineEntry);
  v28 = v43;
  sub_100007AB0((uint64_t)v15, v43, type metadata accessor for CPHeaderGradientView);
  sub_100014E8C((uint64_t)v12);
  v29 = sub_100024388(v19, (uint64_t)v12);
  v30 = v40(v12, v41);
  GeometryProxy.size.getter(v30);
  v32 = v31 * 0.4;
  sub_100007AF4(v24, v25, type metadata accessor for CPTimelineEntry);
  *v4 = swift_getKeyPath(&unk_100071B98);
  swift_storeEnumTagMultiPayload(v4, v26, 0);
  v33 = v46;
  v34 = (double *)((char *)v4 + *(int *)(v46 + 20));
  *v34 = v29;
  v34[1] = v32;
  sub_100007AB0(v25, (uint64_t)v4 + *(int *)(v33 + 24), type metadata accessor for CPTimelineEntry);
  v35 = v45;
  sub_100007AB0((uint64_t)v4, v45, type metadata accessor for CPTitleGradientView);
  sub_100007AF4(v28, (uint64_t)v15, type metadata accessor for CPHeaderGradientView);
  sub_100007AF4(v35, (uint64_t)v4, type metadata accessor for CPTitleGradientView);
  v36 = v47;
  sub_100007AF4((uint64_t)v15, v47, type metadata accessor for CPHeaderGradientView);
  v37 = sub_100006454(&qword_100091A18);
  v38 = v36 + *(int *)(v37 + 48);
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 0;
  sub_100007AF4((uint64_t)v4, v36 + *(int *)(v37 + 64), type metadata accessor for CPTitleGradientView);
  sub_10000A7C0(v35, type metadata accessor for CPTitleGradientView);
  sub_10000A7C0(v28, type metadata accessor for CPHeaderGradientView);
  sub_10000A7C0((uint64_t)v4, type metadata accessor for CPTitleGradientView);
  return sub_10000A7C0((uint64_t)v15, type metadata accessor for CPHeaderGradientView);
}

uint64_t sub_100028AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v3 = sub_100006454(&qword_1000918F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100006454(&qword_100091900);
  __chkstk_darwin(v41);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WidgetFamily(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006454(&qword_100091908);
  __chkstk_darwin(v42);
  v43 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CPExtraLargeContentView(0);
  v12 = a1 + *(int *)(v11 + 32);
  v13 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 32)) == 1)
  {
    v14 = a1 + *(int *)(v11 + 24);
    v15 = *(_QWORD *)v14;
    v38 = v8;
    v16 = *(_BYTE *)(v14 + 8);
    sub_100006904(v15, v16);
    v17 = sub_100014EBC(v15, v16);
    v18 = v16;
    v8 = v38;
    sub_100006A4C(v15, v18);
    if ((v17 & 1) == 0)
    {
      v26 = v43;
      swift_storeEnumTagMultiPayload(v43, v42, 0);
      v27 = sub_1000078D8(&qword_100091920, &qword_100091900, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v28 = v44;
      _ConditionalContent<>.init(storage:)(v26, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v27);
      v29 = sub_100006454(&qword_100091910);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    }
  }
  v19 = *(_QWORD *)(v12 + *(int *)(v13 + 20));
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v35 = v19;
    else
      v35 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    result = _CocoaArrayWrapper.endIndex.getter(v35);
    if (result)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease(v19);
    goto LABEL_19;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v19);
  if (!v20)
    goto LABEL_18;
LABEL_5:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v22 = *(_QWORD *)(v19 + 32);
    swift_retain(v22);
  }
  swift_bridgeObjectRelease(v19);
  if (!*(_QWORD *)(v22 + 32)
    && (v25 = sub_10004CF70(0xD00000000000001ELL, 0x8000000100073F10), (v24 = (void *)v25) != 0)
    || (v23 = v39,
        sub_100014E8C(v39),
        v24 = sub_10001FC38(v23, 1),
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v23, v8),
        v24))
  {
    *v7 = static Alignment.center.getter(v25);
    v7[1] = v30;
    v31 = sub_100006454(&qword_100091918);
    sub_100028F04(v24, a1, v22, (_QWORD *)((char *)v7 + *(int *)(v31 + 44)));
    v32 = v43;
    sub_100007964((uint64_t)v7, v43, &qword_100091900);
    swift_storeEnumTagMultiPayload(v32, v42, 1);
    v33 = sub_1000078D8(&qword_100091920, &qword_100091900, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v32, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v33);

    swift_release(v22);
    sub_100007928((uint64_t)v7, &qword_100091900);
    v34 = sub_100006454(&qword_100091910);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 0, 1, v34);
    return sub_100007A2C((uint64_t)v5, v44, &qword_1000918F8);
  }
  swift_release(v22);
LABEL_19:
  v36 = sub_100006454(&qword_100091910);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v44, 1, 1, v36);
}

uint64_t sub_100028F04@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;

  v80 = a3;
  v87 = a2;
  v94 = a4;
  v92 = sub_100006454(&qword_100091928);
  __chkstk_darwin(v92);
  v93 = (uint64_t *)((char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ColorScheme(0);
  v85 = *(_QWORD *)(v6 - 8);
  v86 = v6;
  __chkstk_darwin(v6);
  v84 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100006454(&qword_100091228);
  v8 = __chkstk_darwin(v78);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Material(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_100091230);
  __chkstk_darwin(v15);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006454(&qword_100091238);
  __chkstk_darwin(v77);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100006454(&qword_100091930);
  __chkstk_darwin(v79);
  v82 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006454(&qword_100091938);
  __chkstk_darwin(v89);
  v81 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v83 = (uint64_t)&v76 - v23;
  v24 = sub_100006454(&qword_100091940);
  __chkstk_darwin(v24);
  v91 = (uint64_t)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v90 = (char *)&v76 - v27;
  v28 = type metadata accessor for Image.ResizingMode(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = Image.init(uiImage:)(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for Image.ResizingMode.stretch(_:), v28);
  v88 = Image.resizable(capInsets:resizingMode:)(v31, v32, 0.0, 0.0, 0.0, 0.0);
  swift_release(v32);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  v34 = static UnitPoint.center.getter(v33);
  v36 = v35;
  type metadata accessor for CPExtraLargeContentView(0);
  if (sub_1000081B4())
  {
    v38 = static Material.ultraThin.getter(v37);
    v39 = static Edge.Set.all.getter(v38);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v14, v11);
    v10[*(int *)(v78 + 36)] = v39;
    sub_100007964((uint64_t)v10, (uint64_t)v17, &qword_100091228);
    sub_100007928((uint64_t)v10, &qword_100091228);
    v40 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v41 = static Color.black.getter(v40);
    v42 = Color.opacity(_:)(0.2);
    v43 = swift_release(v41);
    LOBYTE(v41) = static Edge.Set.all.getter(v43);
    sub_100007964((uint64_t)v17, (uint64_t)v19, &qword_100091230);
    v44 = &v19[*(int *)(v77 + 36)];
    *(_QWORD *)v44 = v42;
    v44[8] = v41;
    sub_100007928((uint64_t)v17, &qword_100091230);
    v45 = *(void **)(v80 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    if (v45)
    {
      v46 = *(id *)(v80 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    }
    else
    {
      v52 = *(void **)(v80 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v52)
        v53 = v52;
      else
        v53 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v46 = v53;
    }
    v54 = v45;
    v55 = Color.init(uiColor:)(v46);
    v56 = Color.opacity(_:)(0.7);
    v57 = swift_release(v55);
    LOBYTE(v55) = static Edge.Set.all.getter(v57);
    v58 = v82;
    sub_100007964((uint64_t)v19, v82, &qword_100091238);
    v59 = v58 + *(int *)(v79 + 36);
    *(_QWORD *)v59 = v56;
    *(_BYTE *)(v59 + 8) = v55;
    sub_100007928((uint64_t)v19, &qword_100091238);
    KeyPath = swift_getKeyPath(&unk_100071B08);
    v62 = v84;
    v61 = v85;
    v63 = v86;
    (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, enum case for ColorScheme.light(_:), v86);
    v64 = v89;
    v65 = (uint64_t)v81;
    v66 = (uint64_t *)&v81[*(int *)(v89 + 36)];
    v67 = sub_100006454(&qword_100090950);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)v66 + *(int *)(v67 + 28), v62, v63);
    *v66 = KeyPath;
    sub_100007964(v58, v65, &qword_100091930);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    sub_100007928(v58, &qword_100091930);
    v68 = v83;
    sub_100007A2C(v65, v83, &qword_100091938);
    v69 = v93;
    sub_100007964(v68, (uint64_t)v93, &qword_100091938);
    swift_storeEnumTagMultiPayload(v69, v92, 0);
    v70 = sub_1000299C8((unint64_t *)&qword_100091948, &qword_100091938, (void (*)(void))sub_1000297D4);
    v51 = (uint64_t)v90;
    _ConditionalContent<>.init(storage:)(v69, v64, &type metadata for Color, v70, &protocol witness table for Color);
    sub_100007928(v68, &qword_100091938);
  }
  else
  {
    if (qword_1000906E0 != -1)
      swift_once(&qword_1000906E0, sub_10000AB40);
    v47 = qword_1000959B8;
    v48 = v92;
    v49 = v93;
    *v93 = qword_1000959B8;
    swift_storeEnumTagMultiPayload(v49, v48, 1);
    v50 = sub_1000299C8((unint64_t *)&qword_100091948, &qword_100091938, (void (*)(void))sub_1000297D4);
    swift_retain(v47);
    v51 = (uint64_t)v90;
    _ConditionalContent<>.init(storage:)(v49, v89, &type metadata for Color, v50, &protocol witness table for Color);
  }
  v71 = v91;
  sub_100007964(v51, v91, &qword_100091940);
  v72 = v94;
  v73 = v88;
  *v94 = v88;
  *(_OWORD *)(v72 + 1) = xmmword_100071A50;
  v72[3] = 0x3FF0000000000000;
  *((double *)v72 + 4) = v34;
  v72[5] = v36;
  v74 = sub_100006454(&qword_100091988);
  sub_100007964(v71, (uint64_t)v72 + *(int *)(v74 + 48), &qword_100091940);
  swift_retain(v73);
  sub_100007928(v51, &qword_100091940);
  sub_100007928(v71, &qword_100091940);
  return swift_release(v73);
}

uint64_t sub_100029668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for ContainerBackgroundPlacement(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100091870);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = static Alignment.center.getter(v8);
  v7[1] = v9;
  v10 = sub_100006454(&qword_100091878);
  v11 = sub_100026404(v0, (_QWORD *)((char *)v7 + *(int *)(v10 + 44)));
  v12 = static ContainerBackgroundPlacement.widget.getter(v11);
  v13 = static Alignment.center.getter(v12);
  v15 = v14;
  v16 = sub_1000078D8(&qword_100091880, &qword_100091870, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.containerBackground<A>(for:alignment:content:)(v4, v13, v15, sub_100005EF8, 0, v5, &type metadata for Color, v16, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100007928((uint64_t)v7, &qword_100091870);
}

unint64_t sub_1000297D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091950;
  if (!qword_100091950)
  {
    v1 = sub_100006494(&qword_100091930);
    sub_100029858();
    sub_1000078D8(&qword_100091978, &qword_100091980, (uint64_t)&protocol conformance descriptor for _OverlayStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091950);
  }
  return result;
}

unint64_t sub_100029858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091958;
  if (!qword_100091958)
  {
    v1 = sub_100006494(&qword_100091238);
    sub_1000298DC();
    sub_1000078D8(&qword_100091978, &qword_100091980, (uint64_t)&protocol conformance descriptor for _OverlayStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091958);
  }
  return result;
}

unint64_t sub_1000298DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091960;
  if (!qword_100091960)
  {
    v1 = sub_100006494(&qword_100091230);
    sub_100029960();
    sub_1000078D8(&qword_100091970, &qword_100091228, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091960);
  }
  return result;
}

unint64_t sub_100029960()
{
  unint64_t result;

  result = qword_100091968;
  if (!qword_100091968)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_100091968);
  }
  return result;
}

uint64_t sub_1000299C8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    a3();
    sub_1000078D8(&qword_100090978, &qword_100090950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100029A4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000919F8;
  if (!qword_1000919F8)
  {
    v1 = sub_100006494(&qword_1000919D8);
    sub_100007854();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000919F8);
  }
  return result;
}

uint64_t sub_100029AB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000275B8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100029AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091A48;
  if (!qword_100091A48)
  {
    v1 = sub_100006494(&qword_100091A28);
    sub_1000078D8(&qword_100091A50, &qword_100091A20, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091A48);
  }
  return result;
}

uint64_t sub_100029B44()
{
  _QWORD v1[4];

  v1[0] = sub_100006494(&qword_100091870);
  v1[1] = &type metadata for Color;
  v1[2] = sub_1000078D8(&qword_100091880, &qword_100091870, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = &protocol witness table for Color;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

void sub_100029BBC()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  if (!v2)
  {
    v7 = 0xE900000000000072;
    v5 = 0x6567676F6C637767;
    goto LABEL_5;
  }

  v3 = objc_msgSend(v0, "mainBundle");
  v4 = objc_msgSend(v3, "bundleIdentifier");

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

LABEL_5:
    qword_100091A68 = v5;
    unk_100091A70 = v7;
    return;
  }
  __break(1u);
}

uint64_t sub_100029CA4(uint64_t a1)
{
  return sub_100029D20(a1, qword_1000959C0, 0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_100029CC4(uint64_t a1)
{
  return sub_100029D20(a1, qword_1000959D8, 0x6568636163, 0xE500000000000000);
}

uint64_t sub_100029CE0(uint64_t a1)
{
  return sub_100029D20(a1, qword_1000959F0, 7564641, 0xE300000000000000);
}

uint64_t sub_100029CF8(uint64_t a1)
{
  return sub_100029D20(a1, qword_100095A08, 0x7974697669746361, 0xEC00000064656546);
}

uint64_t sub_100029D20(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for Logger(0);
  sub_100029DCC(v7, a2);
  sub_10000A720(v7, (uint64_t)a2);
  if (qword_1000906E8 != -1)
    swift_once(&qword_1000906E8, sub_100029BBC);
  v8 = qword_100091A68;
  v9 = unk_100091A70;
  swift_bridgeObjectRetain(unk_100091A70);
  return Logger.init(subsystem:category:)(v8, v9, a3, a4);
}

uint64_t *sub_100029DCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t *sub_100029E0C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_100090EA0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    v19 = type metadata accessor for ContentSizeCategory(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_retain(v16);
    if (v21(v18, 1, v19))
    {
      v22 = sub_100006454(&qword_100091370);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100029F90(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_100006454(&qword_100090EA0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for ContentSizeCategory(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t *sub_10002A058(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;

  v6 = sub_100006454(&qword_100090EA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v17 = type metadata accessor for ContentSizeCategory(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  swift_retain(v14);
  if (v19(v16, 1, v17))
  {
    v20 = sub_100006454(&qword_100091370);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t *sub_10002A1B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_100090EA0);
    v6 = sub_100006454(&qword_100090EA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = *(uint64_t *)((char *)a1 + v12);
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  swift_retain(v14);
  swift_release(v13);
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for ContentSizeCategory(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_11;
  }
  if (v22)
  {
LABEL_11:
    v23 = sub_100006454(&qword_100091370);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_12:
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

char *sub_10002A370(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100006454(&qword_100090EA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ContentSizeCategory(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100006454(&qword_100091370);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *sub_10002A4B4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_100090EA0);
    v6 = sub_100006454(&qword_100090EA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for ContentSizeCategory(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_10;
  }
  if (v17)
  {
LABEL_10:
    v18 = sub_100006454(&qword_100091370);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_11:
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t sub_10002A668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002A674);
}

uint64_t sub_10002A674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = sub_100006454(&qword_100091A78);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_100006454(&qword_100091370);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t sub_10002A730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002A73C);
}

uint64_t sub_10002A73C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100006454(&qword_100091A78);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = sub_100006454(&qword_100091370);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DynamicTypeFont(uint64_t a1)
{
  uint64_t result;

  result = qword_100091AD8;
  if (!qword_100091AD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DynamicTypeFont);
  return result;
}

void sub_10002A824(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_10002A8DC(319, &qword_100091AE8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    sub_10002A8DC(319, (unint64_t *)&unk_100091AF0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_10002A8DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ContentSizeCategory(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10002A934(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074B30, 1);
}

uint64_t sub_10002A944(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;

  v3 = sub_100006454(&qword_100091B38);
  __chkstk_darwin(v3);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentSizeCategory(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - v14;
  if (a1)
  {
    v16 = type metadata accessor for DynamicTypeFont(0);
    sub_10002B00C(v1 + *(int *)(v16 + 24), (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      swift_retain(a1);
      sub_100007928((uint64_t)v8, &qword_100091370);
LABEL_9:
      v17 = Font.weight(_:)(a1, *(double *)(v1 + *(int *)(v16 + 28)));
      swift_release(a1);
      return v17;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    swift_retain(a1);
    sub_100015334((uint64_t)v12);
    v18 = sub_10002B054((uint64_t)v12, (uint64_t)v15);
    v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    v19(v12, v9);
    if (!v18)
    {
      v19(v15, v9);
      goto LABEL_9;
    }
    v20 = swift_retain(a1);
    v21 = static Font.largeTitle.getter(v20);
    v22 = static Font.== infix(_:_:)(v21, a1);
    swift_release(a1);
    swift_release(v21);
    if ((v22 & 1) != 0)
    {
      v23 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v5, 1, 1, v23);
      v24.n128_u64[0] = 0x4041000000000000;
    }
    else
    {
      v25 = swift_retain(a1);
      v26 = static Font.title.getter(v25);
      v27 = static Font.== infix(_:_:)(v26, a1);
      swift_release(a1);
      swift_release(v26);
      if ((v27 & 1) != 0)
      {
        v28 = type metadata accessor for Font.Design(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v5, 1, 1, v28);
        v24.n128_u64[0] = 28.0;
      }
      else
      {
        v29 = swift_retain(a1);
        v30 = static Font.title2.getter(v29);
        v31 = static Font.== infix(_:_:)(v30, a1);
        swift_release(a1);
        swift_release(v30);
        if ((v31 & 1) != 0)
        {
          v32 = type metadata accessor for Font.Design(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v5, 1, 1, v32);
          v24.n128_u64[0] = 22.0;
        }
        else
        {
          v33 = swift_retain(a1);
          v34 = static Font.title3.getter(v33);
          v35 = static Font.== infix(_:_:)(v34, a1);
          swift_release(a1);
          swift_release(v34);
          if ((v35 & 1) != 0)
          {
            v36 = type metadata accessor for Font.Design(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v5, 1, 1, v36);
            v24.n128_u64[0] = 20.0;
          }
          else
          {
            v37 = swift_retain(a1);
            v38 = static Font.headline.getter(v37);
            v39 = static Font.== infix(_:_:)(v38, a1);
            swift_release(a1);
            swift_release(v38);
            if ((v39 & 1) != 0)
              goto LABEL_17;
            v41 = swift_retain(a1);
            v42 = static Font.subheadline.getter(v41);
            v43 = static Font.== infix(_:_:)(v42, a1);
            swift_release(a1);
            swift_release(v42);
            if ((v43 & 1) != 0)
            {
              v44 = type metadata accessor for Font.Design(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v5, 1, 1, v44);
              v24.n128_u64[0] = 15.0;
              goto LABEL_20;
            }
            v49 = swift_retain(a1);
            v50 = static Font.body.getter(v49);
            v51 = static Font.== infix(_:_:)(v50, a1);
            swift_release(a1);
            swift_release(v50);
            if ((v51 & 1) != 0)
            {
LABEL_17:
              v40 = type metadata accessor for Font.Design(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v5, 1, 1, v40);
              v24.n128_u64[0] = 17.0;
            }
            else
            {
              v52 = swift_retain(a1);
              v53 = static Font.callout.getter(v52);
              v54 = static Font.== infix(_:_:)(v53, a1);
              swift_release(a1);
              swift_release(v53);
              if ((v54 & 1) != 0)
              {
                v55 = type metadata accessor for Font.Design(0);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v5, 1, 1, v55);
                v24.n128_u64[0] = 16.0;
              }
              else
              {
                v56 = swift_retain(a1);
                v57 = static Font.footnote.getter(v56);
                v58 = static Font.== infix(_:_:)(v57, a1);
                swift_release(a1);
                swift_release(v57);
                if ((v58 & 1) != 0)
                {
                  v59 = type metadata accessor for Font.Design(0);
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v5, 1, 1, v59);
                  v24.n128_u64[0] = 13.0;
                }
                else
                {
                  v60 = swift_retain(a1);
                  v61 = static Font.caption.getter(v60);
                  v62 = static Font.== infix(_:_:)(v61, a1);
                  swift_release(a1);
                  swift_release(v61);
                  if ((v62 & 1) != 0)
                  {
                    v63 = type metadata accessor for Font.Design(0);
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v5, 1, 1, v63);
                    v24.n128_u64[0] = 12.0;
                  }
                  else
                  {
                    v64 = swift_retain(a1);
                    v65 = static Font.caption2.getter(v64);
                    v66 = static Font.== infix(_:_:)(v65, a1);
                    swift_release(a1);
                    swift_release(v65);
                    if ((v66 & 1) == 0)
                    {
                      swift_retain(a1);
                      v45 = a1;
                      goto LABEL_21;
                    }
                    v67 = type metadata accessor for Font.Design(0);
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v5, 1, 1, v67);
                    v24.n128_u64[0] = 11.0;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    v45 = static Font.system(size:weight:design:)(0, 1, v5, v24);
    sub_100007928((uint64_t)v5, &qword_100091B38);
LABEL_21:
    v46 = *(double *)(v1 + *(int *)(v16 + 28));
    v47 = swift_retain(v45);
    v17 = Font.weight(_:)(v47, v46);
    swift_release(a1);
    swift_release_n(v45, 2);
    v19(v15, v9);
    return v17;
  }
  return 0;
}

uint64_t sub_10002AF68()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10002AF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;

  v6 = sub_10002A944(*(_QWORD *)(v3 + *(int *)(a2 + 20)));
  KeyPath = swift_getKeyPath(&unk_100071C80);
  v8 = sub_100006454(&qword_100091B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, a1, v8);
  result = sub_100006454(&qword_100091B30);
  v10 = (uint64_t *)(a3 + *(int *)(result + 36));
  *v10 = KeyPath;
  v10[1] = v6;
  return result;
}

uint64_t sub_10002B00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100091370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_10002B054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a1, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a2, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 >= v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 >= v17;
}

unint64_t sub_10002B3E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091B40;
  if (!qword_100091B40)
  {
    v1 = sub_100006494(&qword_100091B30);
    sub_1000078D8(&qword_100091B48, &qword_100091B28, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_1000078D8(&qword_100091B50, &qword_100091B58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091B40);
  }
  return result;
}

CGImage *sub_10002B47C(double a1, double a2, double a3, double a4, double a5, double a6)
{
  void *v6;
  double v13;
  double v14;
  double v15;
  double v16;
  CGImage *v17;
  CGImage *v18;
  double v19;
  CGImageRef v20;
  CGRect v22;

  objc_msgSend(v6, "size");
  v14 = v13;
  objc_msgSend(v6, "size");
  v16 = v15;
  v17 = (CGImage *)objc_msgSend(v6, "CGImage");
  v18 = v17;
  if (v17)
  {
    v19 = v14 / a5;
    if (v14 / a5 <= v16 / a6)
      v19 = v16 / a6;
    v22.size.height = v19 * a4;
    v22.size.width = v19 * a3;
    v22.origin.y = v19 * a2;
    v22.origin.x = v19 * a1;
    v20 = CGImageCreateWithImageInRect(v17, v22);

    if (v20)
    {
      v18 = (CGImage *)objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:", v20);

    }
    else
    {
      return 0;
    }
  }
  return v18;
}

uint64_t sub_10002B574@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  void *object;
  Swift::String v53;
  uint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t, uint64_t);
  void (*v108)(char *, uint64_t);
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124[3];

  v121 = a1;
  v119 = a4;
  v120 = type metadata accessor for WidgetCreationAttempt(0);
  v117 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v105 = (uint64_t)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v102 - v8;
  v10 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v10);
  v12 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v111 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v114 = (char *)&v102 - v16;
  __chkstk_darwin(v17);
  v115 = (char *)&v102 - v18;
  __chkstk_darwin(v19);
  v116 = (char *)&v102 - v20;
  v21 = type metadata accessor for WidgetFamily(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v109 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v102 - v25;
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v122 = v13;
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10000A720(v27, (uint64_t)qword_1000959D8);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v113 = a3;
  v107 = v29;
  v29(v26, a3, v21);
  v30 = swift_bridgeObjectRetain_n(a2, 2);
  v112 = v28;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  v33 = os_log_type_enabled(v31, v32);
  v106 = v9;
  v110 = v21;
  if (v33)
  {
    v34 = swift_slowAlloc(22, -1);
    v104 = v12;
    v35 = v34;
    v103 = swift_slowAlloc(64, -1);
    v124[0] = v103;
    *(_DWORD *)v35 = 136315394;
    swift_bridgeObjectRetain(a2);
    v123 = sub_1000155A4(v121, a2, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v35 + 12) = 2080;
    v36 = sub_100007A70(&qword_100090E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v21, v36);
    v39 = v38;
    v123 = sub_1000155A4(v37, v38, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
    swift_bridgeObjectRelease(v39);
    v108 = *(void (**)(char *, uint64_t))(v22 + 8);
    v108(v26, v21);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Fetch last widget attempt for %s, widgetFamily: %s", (uint8_t *)v35, 0x16u);
    v40 = v103;
    swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    v41 = v35;
    v12 = v104;
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    v108 = *(void (**)(char *, uint64_t))(v22 + 8);
    v108(v26, v21);
  }

  v42 = (void *)objc_opt_self(NSFileManager);
  v43 = objc_msgSend(v42, "defaultManager");
  v44 = 1;
  v45 = objc_msgSend(v43, "URLsForDirectory:inDomains:", 13, 1);

  v46 = v118;
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v118);

  v48 = v122;
  if (*(_QWORD *)(v47 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v122 + 16))(v12, v47 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80)), v46);
    v44 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v12, v44, 1, v46);
  swift_bridgeObjectRelease(v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v12, 1, v46) == 1)
  {
    sub_100007928((uint64_t)v12, &qword_100090BC8);
LABEL_16:
    v88 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v119, v88, 1, v120);
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v116, v12, v46);
  URL.appendingPathComponent(_:isDirectory:)(v121, a2, 1);
  v124[0] = 0;
  v124[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v49 = swift_bridgeObjectRelease(v124[1]);
  strcpy((char *)v124, "last_attempt_");
  HIWORD(v124[1]) = -4864;
  v50 = v113;
  v123 = WidgetFamily.rawValue.getter(v49);
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(object);
  v53._countAndFlagsBits = 0x6E6F736A2ELL;
  v53._object = (void *)0xE500000000000000;
  String.append(_:)(v53);
  v54 = v124[1];
  v55 = v114;
  URL.appendingPathComponent(_:)(v124[0], v124[1]);
  swift_bridgeObjectRelease(v54);
  v56 = objc_msgSend(v42, "defaultManager");
  ((void (*)(void))URL.path.getter)();
  v58 = v57;
  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v58);
  LOBYTE(v58) = objc_msgSend(v56, "fileExistsAtPath:", v59);

  if ((v58 & 1) == 0)
  {
    v68 = v109;
    v67 = v110;
    v107(v109, v50, v110);
    v69 = v111;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v111, v55, v46);
    v70 = swift_bridgeObjectRetain_n(a2, 2);
    v71 = v55;
    v72 = Logger.logObject.getter(v70);
    v73 = static os_log_type_t.default.getter();
    v74 = v73;
    if (os_log_type_enabled(v72, v73))
    {
      v75 = swift_slowAlloc(32, -1);
      v76 = swift_slowAlloc(96, -1);
      v124[0] = v76;
      *(_DWORD *)v75 = 136315650;
      LODWORD(v113) = v74;
      swift_bridgeObjectRetain(a2);
      v123 = sub_1000155A4(v121, a2, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v75 + 12) = 2080;
      v77 = sub_100007A70(&qword_100090E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v67, v77);
      v80 = v79;
      v123 = sub_1000155A4(v78, v79, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
      swift_bridgeObjectRelease(v80);
      v81 = ((uint64_t (*)(char *, uint64_t))v108)(v68, v67);
      *(_WORD *)(v75 + 22) = 2080;
      v82 = v111;
      v83 = URL.path.getter(v81);
      v85 = v84;
      v123 = sub_1000155A4(v83, v84, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
      swift_bridgeObjectRelease(v85);
      v86 = *(void (**)(char *, uint64_t))(v122 + 8);
      v86(v82, v46);
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v113, "Last widget attempt does not exist for %s, widgetFamily: %s at %s", (uint8_t *)v75, 0x20u);
      swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      v87 = v114;
    }
    else
    {

      v86 = *(void (**)(char *, uint64_t))(v48 + 8);
      v86(v69, v46);
      v108(v68, v67);
      swift_bridgeObjectRelease_n(a2, 2);
      v87 = v71;
    }
    v86(v87, v46);
    v86(v115, v46);
    v86(v116, v46);
    goto LABEL_16;
  }
  v60 = Data.init(contentsOf:options:)(v55, 0);
  v62 = v61;
  v63 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
  v64 = JSONDecoder.init()();
  v65 = sub_100007A70(&qword_100091CB8, type metadata accessor for WidgetCreationAttempt, (uint64_t)&unk_100071E60);
  v66 = (uint64_t)v106;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v120, v60, v62, v120, v65);
  swift_release(v64);
  v90 = v105;
  v91 = sub_100007AF4(v66, v105, type metadata accessor for WidgetCreationAttempt);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v95 = (uint8_t *)swift_slowAlloc(12, -1);
    v121 = swift_slowAlloc(32, -1);
    v124[0] = v121;
    *(_DWORD *)v95 = 136315138;
    v96 = sub_10002D248();
    v98 = v97;
    v123 = sub_1000155A4(v96, v97, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124);
    swift_bridgeObjectRelease(v98);
    sub_10000A7C0(v90, type metadata accessor for WidgetCreationAttempt);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Decoded widget attempt -> %s", v95, 0xCu);
    v99 = v121;
    swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    v100 = v95;
    v66 = (uint64_t)v106;
    swift_slowDealloc(v100, -1, -1);
    sub_10000ADC4(v60, v62);

    v101 = *(void (**)(char *, uint64_t))(v122 + 8);
  }
  else
  {
    sub_10000ADC4(v60, v62);

    sub_10000A7C0(v90, type metadata accessor for WidgetCreationAttempt);
    v101 = *(void (**)(char *, uint64_t))(v48 + 8);
  }
  v101(v114, v46);
  v101(v115, v46);
  v101(v116, v46);
  sub_100007AB0(v66, v119, type metadata accessor for WidgetCreationAttempt);
  v88 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v119, v88, 1, v120);
}

uint64_t sub_10002C220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t isa_low;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  id v69;
  NSURL *v70;
  void *v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  id v75;
  Swift::String v76;
  void *object;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_log_type_t v106;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void (*v116)(char *, uint64_t);
  os_log_t v117;
  char *v118;
  uint8_t *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  os_log_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131[2];

  v1 = v0;
  v2 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v2);
  v4 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v127 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v118 - v9;
  __chkstk_darwin(v11);
  v121 = (char *)&v118 - v12;
  __chkstk_darwin(v13);
  v126 = (char *)&v118 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v118 - v16;
  v128 = (os_log_t)type metadata accessor for WidgetCreationAttempt(0);
  __chkstk_darwin(v128);
  v19 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v118 - v21;
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000A720(v23, (uint64_t)qword_1000959D8);
  sub_100007AF4(v0, (uint64_t)v22, type metadata accessor for WidgetCreationAttempt);
  v25 = sub_100007AF4(v0, (uint64_t)v19, type metadata accessor for WidgetCreationAttempt);
  v125 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v122 = v10;
  v120 = v7;
  if (v28)
  {
    v29 = swift_slowAlloc(22, -1);
    v119 = (uint8_t *)v5;
    v30 = v29;
    v31 = swift_slowAlloc(32, -1);
    v123 = v17;
    v32 = v31;
    v131[0] = v31;
    *(_DWORD *)v30 = 136315394;
    v118 = v4;
    v33 = v128;
    v34 = (uint64_t *)&v22[SHIDWORD(v128[3].isa)];
    v124 = v1;
    v36 = *v34;
    v35 = v34[1];
    swift_bridgeObjectRetain(v35);
    v129 = sub_1000155A4(v36, v35, v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130);
    swift_bridgeObjectRelease(v35);
    sub_10000A7C0((uint64_t)v22, type metadata accessor for WidgetCreationAttempt);
    *(_WORD *)(v30 + 12) = 2048;
    isa_low = SLODWORD(v33[4].isa);
    v4 = v118;
    v38 = *(_QWORD *)&v19[isa_low];
    sub_10000A7C0((uint64_t)v19, type metadata accessor for WidgetCreationAttempt);
    v129 = v38;
    v1 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Write widget creation attempt for %s, widgetFamily: %ld", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v39 = v32;
    v17 = v123;
    swift_slowDealloc(v39, -1, -1);
    v40 = v30;
    v5 = (uint64_t)v119;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    sub_10000A7C0((uint64_t)v19, type metadata accessor for WidgetCreationAttempt);
    sub_10000A7C0((uint64_t)v22, type metadata accessor for WidgetCreationAttempt);
  }

  v41 = (void *)objc_opt_self(NSFileManager);
  v42 = objc_msgSend(v41, "defaultManager");
  v43 = 1;
  v44 = objc_msgSend(v42, "URLsForDirectory:inDomains:", 13, 1);

  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v5);
  v46 = v127;
  if (*(_QWORD *)(v45 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v127 + 16))(v4, v45 + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80)), v5);
    v43 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v4, v43, 1, v5);
  swift_bridgeObjectRelease(v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v4, 1, v5) == 1)
    return sub_100007928((uint64_t)v4, &qword_100090BC8);
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v17, v4, v5);
  v48 = v128;
  v49 = v126;
  URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(v1 + SHIDWORD(v128[3].isa)), *(_QWORD *)(v1 + SHIDWORD(v128[3].isa) + 8), 1);
  v50 = objc_msgSend(v41, "defaultManager");
  URL.path.getter(v50);
  v52 = v51;
  v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  LOBYTE(v52) = objc_msgSend(v50, "fileExistsAtPath:", v53);

  if ((v52 & 1) == 0)
  {
    v124 = v1;
    v54 = v121;
    v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 16))(v121, v49, v5);
    v56 = v46;
    v57 = Logger.logObject.getter(v55);
    v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v123 = v17;
      v61 = v5;
      v62 = v60;
      v131[0] = v60;
      *(_DWORD *)v59 = 136315138;
      v119 = v59 + 4;
      v63 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v61, v63);
      v66 = v65;
      v129 = sub_1000155A4(v64, v65, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130);
      swift_bridgeObjectRelease(v66);
      v121 = *(char **)(v56 + 8);
      ((void (*)(char *, uint64_t))v121)(v54, v61);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Creating directory for app metadata at %s", v59, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      v67 = v62;
      v5 = v61;
      v17 = v123;
      swift_slowDealloc(v67, -1, -1);
      v68 = v59;
      v49 = v126;
      swift_slowDealloc(v68, -1, -1);
    }
    else
    {
      v121 = *(char **)(v56 + 8);
      ((void (*)(char *, uint64_t))v121)(v54, v5);
    }

    v69 = objc_msgSend(v41, "defaultManager");
    URL._bridgeToObjectiveC()(v70);
    v72 = v71;
    v131[0] = 0;
    v73 = objc_msgSend(v69, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v71, 1, 0, v131);

    v74 = v131[0];
    v1 = v124;
    v48 = v128;
    if (!v73)
    {
      v88 = (id)v131[0];
      v89 = _convertNSErrorToError(_:)(v74);

      swift_willThrow();
      swift_errorRetain(v89);
      v90 = swift_errorRetain(v89);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v94 = swift_slowAlloc(32, -1);
        v131[0] = v94;
        *(_DWORD *)v93 = 136315138;
        v129 = v89;
        swift_errorRetain(v89);
        v95 = sub_100006454(&qword_100090BD0);
        v123 = v17;
        v96 = String.init<A>(describing:)(&v129, v95);
        v97 = v5;
        v99 = v98;
        v129 = sub_1000155A4(v96, v98, v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130);
        swift_bridgeObjectRelease(v99);
        swift_errorRelease(v89);
        swift_errorRelease(v89);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Unable to create metadata directory %s.", v93, 0xCu);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

        swift_errorRelease(v89);
        v100 = v121;
        ((void (*)(char *, uint64_t))v121)(v126, v97);
        return ((uint64_t (*)(char *, uint64_t))v100)(v123, v97);
      }

      swift_errorRelease(v89);
      swift_errorRelease(v89);
      swift_errorRelease(v89);
      v101 = v121;
      ((void (*)(char *, uint64_t))v121)(v126, v5);
      return ((uint64_t (*)(char *, uint64_t))v101)(v17, v5);
    }
    v75 = (id)v131[0];
    v46 = v127;
  }
  v131[0] = 0;
  v131[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v131[1]);
  strcpy((char *)v131, "last_attempt_");
  HIWORD(v131[1]) = -4864;
  v129 = *(_QWORD *)(v1 + SLODWORD(v48[4].isa));
  v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v76._object;
  String.append(_:)(v76);
  swift_bridgeObjectRelease(object);
  v78._countAndFlagsBits = 0x6E6F736A2ELL;
  v78._object = (void *)0xE500000000000000;
  String.append(_:)(v78);
  v79 = v131[1];
  v80 = v1;
  v81 = v122;
  URL.appendingPathComponent(_:)(v131[0], v131[1]);
  swift_bridgeObjectRelease(v79);
  v82 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
  v83 = JSONEncoder.init()();
  v84 = sub_100007A70(&qword_100091CB0, type metadata accessor for WidgetCreationAttempt, (uint64_t)&unk_100071E88);
  v85 = dispatch thunk of JSONEncoder.encode<A>(_:)(v80, v48, v84);
  v87 = v86;
  swift_release(v83);
  Data.write(to:options:)(v81, 0, v85, v87);
  v102 = v120;
  v103 = (*(uint64_t (**)(char *, char *, uint64_t))(v46 + 16))(v120, v81, v5);
  v104 = Logger.logObject.getter(v103);
  v105 = v46;
  v106 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v104, v106))
  {
    v108 = (uint8_t *)swift_slowAlloc(12, -1);
    v109 = swift_slowAlloc(32, -1);
    v123 = v17;
    v110 = v5;
    v111 = v109;
    v131[0] = v109;
    v128 = v104;
    *(_DWORD *)v108 = 136315138;
    v112 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v113 = dispatch thunk of CustomStringConvertible.description.getter(v110, v112);
    v115 = v114;
    v129 = sub_1000155A4(v113, v114, v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130);
    swift_bridgeObjectRelease(v115);
    v116 = *(void (**)(char *, uint64_t))(v127 + 8);
    v116(v102, v110);
    v117 = v128;
    _os_log_impl((void *)&_mh_execute_header, v128, v106, "Wrote widget creation attempt to %s", v108, 0xCu);
    swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v111, -1, -1);
    swift_slowDealloc(v108, -1, -1);
    sub_10000ADC4(v85, v87);

    v116(v122, v110);
    v116(v126, v110);
    return ((uint64_t (*)(char *, uint64_t))v116)(v123, v110);
  }
  sub_10000ADC4(v85, v87);

  v101 = *(char **)(v105 + 8);
  ((void (*)(char *, uint64_t))v101)(v102, v5);
  ((void (*)(char *, uint64_t))v101)(v81, v5);
  ((void (*)(char *, uint64_t))v101)(v49, v5);
  return ((uint64_t (*)(char *, uint64_t))v101)(v17, v5);
}

uint64_t sub_10002CF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v3 = v2;
  if (qword_1000906F0 != -1)
    swift_once(&qword_1000906F0, sub_100029CA4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000A720(v6, (uint64_t)qword_1000959C0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchActivityFeedData...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (_QWORD *)swift_allocObject(&unk_10008E500, 40, 7);
  v11[2] = v3;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n(a2, 2);
  v12 = sub_10006B320();
  if (v12)
  {
    v13 = (void *)v12;
    v14 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForPlayer:", v12);
    v15 = objc_msgSend(v14, "utilityServicePrivate");

    v16 = (_QWORD *)swift_allocObject(&unk_10008E550, 40, 7);
    v16[2] = v3;
    v16[3] = sub_100035CE4;
    v16[4] = v11;
    v21[4] = sub_100011C40;
    v22 = v16;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 1107296256;
    v21[2] = sub_10002DFE0;
    v21[3] = &unk_10008E568;
    v17 = _Block_copy(v21);
    v18 = v22;
    swift_retain(v11);
    swift_release(v18);
    objc_msgSend(v15, "getWidgetStoreBagValueWithHandler:", v17);
    _Block_release(v17);
    swift_release(a2);
    swift_release(v11);

    return swift_unknownObjectRelease(v15);
  }
  else
  {
    sub_100039B50(86400, 0xD000000000000011, 0x8000000100073F50, 0x7974697669746341, 0xEC00000064656546);
    v20 = swift_allocObject(&unk_10008E528, 32, 7);
    *(_QWORD *)(v20 + 16) = a1;
    *(_QWORD *)(v20 + 24) = a2;
    swift_retain(a2);
    sub_100034D1C((void (*)(_QWORD *, unint64_t, id))sub_100039DDC, v20);
    swift_release(a2);
    swift_release(v11);
    return swift_release(v20);
  }
}

uint64_t sub_10002D248()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;

  _StringGuts.grow(_:)(95);
  v1._countAndFlagsBits = 0xD00000000000001DLL;
  v1._object = (void *)0x8000000100074160;
  String.append(_:)(v1);
  v2 = type metadata accessor for Date(0);
  v3 = sub_100007A70(&qword_100091C48, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._object = (void *)0x8000000100074180;
  v6._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  v7 = type metadata accessor for WidgetCreationAttempt(0);
  if (*(_BYTE *)(v0 + *(int *)(v7 + 20)))
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v7 + 20)))
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x547972746572202CLL;
  v11._object = (void *)0xEC0000003A656D69;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0x6568636163202C73;
  v14._object = (void *)0xEB000000003A4449;
  String.append(_:)(v14);
  v15 = (uint64_t *)(v0 + *(int *)(v7 + 28));
  v16 = *v15;
  v17 = (void *)v15[1];
  swift_bridgeObjectRetain(v17);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 0x746567646977202CLL;
  v19._object = (void *)0xEF3A796C696D6146;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  v22._countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 0;
}

BOOL sub_10002D4A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10002D4B4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002D4F8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10002D520(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10002D560()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002D588 + 4 * byte_100071D30[*v0]))(1702125924, 0xE400000000000000);
}

uint64_t sub_10002D588()
{
  return 0x646944726F727265;
}

uint64_t sub_10002D5AC()
{
  return 0x6D69547972746572;
}

uint64_t sub_10002D5C8()
{
  return 0x44496568636163;
}

uint64_t sub_10002D5E0()
{
  return 0x6146746567646977;
}

uint64_t sub_10002D600@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100039E4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002D624()
{
  return 0;
}

void sub_10002D630(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10002D63C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003CDB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002D664(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003CDB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002D68C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = v1;
  v5 = sub_100006454(&qword_100091E00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003CD90(a1, v9);
  v11 = sub_10003CDB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetCreationAttempt.CodingKeys, &type metadata for WidgetCreationAttempt.CodingKeys, v11, v9, v10);
  v27 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100007A70(&qword_100091C38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v27, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for WidgetCreationAttempt(0);
    v15 = *(unsigned __int8 *)(v3 + v14[5]);
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v26, v5);
    v16 = *(_QWORD *)(v3 + v14[6]);
    v25 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v25, v5);
    v17 = (uint64_t *)(v3 + v14[7]);
    v18 = *v17;
    v19 = v17[1];
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v24, v5);
    v20 = *(_QWORD *)(v3 + v14[8]);
    v23 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10002D868@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v26 = a2;
  v27 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v28 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100006454(&qword_100091E10);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for WidgetCreationAttempt(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10003CD90(a1, v12);
  v13 = sub_10003CDB4();
  v30 = v7;
  v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetCreationAttempt.CodingKeys, &type metadata for WidgetCreationAttempt.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_100015C84(a1);
  v15 = v5;
  v31 = a1;
  v16 = (uint64_t)v10;
  v36 = 0;
  v17 = sub_100007A70(&qword_100091C40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v19 = v27;
  v18 = v28;
  v20 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, &v36, v29, v27, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v16, v18, v19);
  v35 = 1;
  *(_BYTE *)(v16 + v8[5]) = KeyedDecodingContainer.decode(_:forKey:)(&v35, v20) & 1;
  v34 = 2;
  *(_QWORD *)(v16 + v8[6]) = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
  v33 = 3;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v20);
  v22 = (uint64_t *)(v16 + v8[7]);
  *v22 = v21;
  v22[1] = v23;
  v32 = 4;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v30, v20);
  *(_QWORD *)(v16 + v8[8]) = v24;
  sub_100007AF4(v16, v26, type metadata accessor for WidgetCreationAttempt);
  sub_100015C84(v31);
  return sub_10000A7C0(v16, type metadata accessor for WidgetCreationAttempt);
}

uint64_t sub_10002DB98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002D868(a1, a2);
}

uint64_t sub_10002DBAC(_QWORD *a1)
{
  return sub_10002D68C(a1);
}

uint64_t sub_10002DBC4()
{
  return 1;
}

Swift::Int sub_10002DBCC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10002DC0C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10002DC30(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

NSNumber sub_10002DC6C()
{
  NSNumber result;

  sub_100011E4C(0, &qword_100091CA8, NSNumber_ptr);
  result.super.super.isa = NSNumber.init(integerLiteral:)(20).super.super.isa;
  qword_100091B60 = (uint64_t)result.super.super.isa;
  return result;
}

uint64_t sub_10002DCB0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t (*a5)(_QWORD, __n128), uint64_t a6)
{
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  __n128 v26;
  uint64_t v28;
  uint64_t (*v29)(_QWORD, __n128);
  uint64_t v30;
  uint64_t v31;

  if (qword_100090708 != -1)
    swift_once(&qword_100090708, sub_100029CF8);
  v11 = type metadata accessor for Logger(0);
  sub_10000A720(v11, (uint64_t)qword_100095A08);
  swift_errorRetain(a1);
  v12 = a2;
  v13 = a3;
  swift_errorRetain(a1);
  v14 = v12;
  v15 = v13;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v28 = a6;
    v18 = swift_slowAlloc(32, -1);
    v19 = (uint64_t *)swift_slowAlloc(24, -1);
    *(_DWORD *)v18 = 138412802;
    v29 = a5;
    if (a1)
    {
      swift_errorRetain(a1);
      v20 = _swift_stdlib_bridgeErrorToNSError(a1);
      v30 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    }
    else
    {
      v30 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      v20 = 0;
    }
    *v19 = v20;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    *(_WORD *)(v18 + 12) = 2112;
    v30 = (uint64_t)v14;
    v21 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v19[1] = (uint64_t)v14;

    *(_WORD *)(v18 + 22) = 2112;
    v30 = (uint64_t)v15;
    v22 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v19[2] = (uint64_t)v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "activityFeedStoreBagValue error %@, activityFeedWidgetTTL %@, activityFeedWidgetLivePreview %@", (uint8_t *)v18, 0x20u);
    v23 = sub_100006454(&qword_100091C00);
    swift_arrayDestroy(v19, 3, v23);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    a5 = v29;
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  if (objc_msgSend(v14, "integerValue", v28))
    v24 = (uint64_t)objc_msgSend(v14, "integerValue");
  else
    v24 = 86400;
  objc_msgSend(v15, "doubleValue");
  v25 = v26.n128_f64[0];
  v26.n128_u64[0] = 1.0;
  if (v25 != 0.0)
    objc_msgSend(v15, "doubleValue", 1.0);
  return a5(v24, v26);
}

void sub_10002DFE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, id, id);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(void *, id, id))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v9 = a2;
  v11 = a3;
  v10 = a4;
  v8(a2, v11, v10);
  swift_release(v7);

}

uint64_t sub_10002E068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a1;
  v24 = a5;
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a4, v10, v13);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_10008E708, v18 + 16, v15 | 7);
  *(_QWORD *)(v19 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19 + v16, v14, v10);
  v20 = (_QWORD *)(v19 + v17);
  *v20 = v23;
  v20[1] = a2;
  v21 = (_QWORD *)(v19 + v18);
  *v21 = v24;
  v21[1] = a6;
  swift_bridgeObjectRetain(a2);
  swift_retain(a6);
  swift_retain(v19);
  sub_10003A0A0(0xD000000000000020, 0x8000000100073FE0, (void (*)(id))sub_10003BA10, v19);
  return swift_release_n(v19, 2);
}

uint64_t sub_10002E1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, uint64_t), uint64_t a7)
{
  sub_100039B50(a1, 0xD000000000000014, 0x8000000100074010, 0x65756E69746E6F43, 0xEF676E6979616C50);
  swift_retain(a7);
  sub_10003A688(a3, a4, a5, a2, a6, a7);
  return swift_release(a7);
}

uint64_t sub_10002E260(unint64_t isa, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  id v33;
  id v35;
  id v36;
  unint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  id v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  id v64;
  id v65;
  unint64_t v66;
  char v67;
  id v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  id v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  os_log_type_t v84;
  id v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  NSObject *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  NSObject *v117;
  int v118;
  uint8_t *v119;
  _QWORD *v120;
  int64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  void (*v147)(uint64_t, NSObject *, int64_t);
  NSObject *v148;
  uint64_t v149;
  int64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(unint64_t, NSObject *, int64_t, __n128);
  uint64_t v178;
  unint64_t v179;
  int64_t v180;
  NSObject *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  char *v194;
  uint64_t v195;
  __int128 v196;
  int64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  NSObject *v203;
  objc_class *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209[8];
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  NSObject *v213;
  _QWORD *v214;
  _QWORD v215[2];
  objc_class *v216;

  v206 = a6;
  v14 = sub_100006454(&qword_100091C58);
  __chkstk_darwin(v14);
  v205 = (char *)&v175 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AppMetadata(0);
  v17 = *(_QWORD *)(v16 - 8);
  v207 = v16;
  v208 = v17;
  __chkstk_darwin(v16);
  v195 = (uint64_t)&v175 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v204 = (objc_class *)((char *)&v175 - v20);
  __chkstk_darwin(v21);
  v203 = ((char *)&v175 - v22);
  v23 = type metadata accessor for WidgetFamily(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v23);
  v28 = __chkstk_darwin(v26);
  v30 = (unint64_t)&v175 - v29;
  v201 = isa;
  if (isa >> 62)
  {
LABEL_110:
    v166 = isa & 0xFFFFFFFFFFFFFF8;
    if ((isa & 0x8000000000000000) != 0)
      v166 = isa;
    v202 = v166;
    v186 = v25;
    v167 = v27;
    swift_bridgeObjectRetain(isa);
    v168 = _CocoaArrayWrapper.endIndex.getter(v202);
    v169 = isa;
    isa = v168;
    swift_bridgeObjectRelease(v169);
    v27 = v167;
    v25 = v186;
    if (isa)
      goto LABEL_3;
LABEL_113:
    if (qword_1000906F8 != -1)
      swift_once(&qword_1000906F8, sub_100029CC4);
    v170 = type metadata accessor for Logger(0);
    v171 = sub_10000A720(v170, (uint64_t)qword_1000959D8);
    v172 = Logger.logObject.getter(v171);
    v173 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v172, v173))
    {
      v174 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v174 = 0;
      _os_log_impl((void *)&_mh_execute_header, v172, v173, "retreived no summaries", v174, 2u);
      swift_slowDealloc(v174, -1, -1);
    }

    return ((uint64_t (*)(_QWORD *, _QWORD))a3)(_swiftEmptyArrayStorage, 0);
  }
  isa = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!isa)
    goto LABEL_113;
LABEL_3:
  v178 = v27;
  v177 = *(void (**)(unint64_t, NSObject *, int64_t, __n128))(v24 + 16);
  v177(v30, a5, v23, v28);
  v31 = (*(uint64_t (**)(unint64_t, int64_t))(v24 + 88))(v30, v23);
  v185 = a4;
  v184 = a3;
  v183 = a8;
  v182 = a7;
  v181 = a5;
  v180 = v23;
  v179 = v24;
  v186 = v25;
  if (v31 == enum case for WidgetFamily.systemSmall(_:))
  {
    v32 = 3;
  }
  else if (v31 == enum case for WidgetFamily.systemMedium(_:))
  {
    v32 = 6;
  }
  else if (v31 == enum case for WidgetFamily.systemLarge(_:))
  {
    v32 = 8;
  }
  else
  {
    if (v31 != enum case for WidgetFamily.systemExtraLarge(_:))
      (*(void (**)(unint64_t, int64_t))(v24 + 8))(v30, v23);
    v32 = 14;
  }
  v188 = v32;
  v210 = _swiftEmptyArrayStorage;
  v23 = objc_opt_self(GKGameDescriptor);
  a7 = v201;
  v202 = v201 & 0xC000000000000001;
  v200 = v201 & 0xFFFFFFFFFFFFFF8;
  v199 = v201 + 32;
  swift_bridgeObjectRetain(v201);
  v25 = 0;
  a3 = 40;
  do
  {
    if (v202)
    {
      v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a7);
    }
    else
    {
      if (v25 >= *(_QWORD *)(v200 + 16))
        goto LABEL_108;
      v33 = *(id *)(v199 + 8 * v25);
    }
    a4 = (uint64_t)v33;
    if (__OFADD__(v25++, 1))
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    a5 = isa;
    v35 = objc_msgSend(v33, "compatiblePlatforms");
    a8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v36 = objc_msgSend((id)v23, "currentPlatformServerString");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v24 = v37;

    v214 = (_QWORD *)v30;
    v215[0] = v24;
    AnyHashable.init<A>(_:)(&v216, &v214, &type metadata for String, &protocol witness table for String);
    if (!*(_QWORD *)(a8 + 16)
      || (v38 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a8 + 40)),
          v39 = -1 << *(_BYTE *)(a8 + 32),
          v24 = v38 & ~v39,
          ((*(_QWORD *)(a8 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0))
    {
      swift_bridgeObjectRelease(a8);
      sub_10003BBC4((uint64_t)&v216);
LABEL_14:

      goto LABEL_15;
    }
    v40 = ~v39;
    while (1)
    {
      sub_10003BB88(*(_QWORD *)(a8 + 48) + 40 * v24, (uint64_t)&v214);
      v30 = static AnyHashable.== infix(_:_:)(&v214, &v216);
      sub_10003BBC4((uint64_t)&v214);
      if ((v30 & 1) != 0)
        break;
      v24 = (v24 + 1) & v40;
      if (((*(_QWORD *)(a8 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      {
        swift_bridgeObjectRelease(a8);
        sub_10003BBC4((uint64_t)&v216);

        a7 = v201;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(a8);
    sub_10003BBC4((uint64_t)&v216);
    v30 = (unint64_t)objc_msgSend((id)a4, "adamID");

    a7 = v201;
    if (!v30)
      goto LABEL_14;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v30 = v210[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
    v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, a4);
    specialized ContiguousArray._endMutation()(v41);
LABEL_15:
    isa = (unint64_t)a5;
  }
  while (v25 != a5);
  swift_bridgeObjectRelease(a7);
  v42 = v210;
  v176 = sub_100011874(v188, (unint64_t)v210);
  v198 = v43;
  a8 = v44;
  isa = (unint64_t)v45;
  swift_release(v42);
  v46 = swift_allocObject(&unk_10008E7A8, 24, 7);
  v47 = sub_10004C47C((uint64_t)_swiftEmptyArrayStorage);
  v187 = v46;
  *(_QWORD *)(v46 + 16) = v47;
  v30 = v46 + 16;
  v201 = v30;
  v199 = a8;
  v200 = isa >> 1;
  v23 = (isa >> 1) - a8;
  if (__OFSUB__(isa >> 1, a8))
  {
    __break(1u);
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    if (v23)
    {
      a7 = 0;
      v190 = v215;
      *(_QWORD *)&v48 = 136315394;
      v196 = v48;
      v194 = (char *)&type metadata for Any + 8;
      *(_QWORD *)&v48 = 136315650;
      v189 = v48;
      a3 = (uint64_t)v205;
      v197 = (isa >> 1) - a8;
      do
      {
        a8 = a7 + 1;
        if (__OFADD__(a7, 1))
          goto LABEL_105;
        if (a7 >= v200 || v199 > 0 || a7 >= v23)
          goto LABEL_106;
        v54 = qword_1000906F8;
        v55 = *(id *)(v198 + 8 * a7);
        if (v54 != -1)
          swift_once(&qword_1000906F8, sub_100029CC4);
        v56 = type metadata accessor for Logger(0);
        a4 = sub_10000A720(v56, (uint64_t)qword_1000959D8);
        v30 = (unint64_t)v55;
        v57 = Logger.logObject.getter(v30);
        v58 = static os_log_type_t.default.getter();
        v24 = v58;
        v59 = os_log_type_enabled(v57, v58);
        v202 = a7 + 1;
        if (v59)
        {
          a8 = swift_slowAlloc(22, -1);
          v25 = swift_slowAlloc(32, -1);
          v216 = (objc_class *)v25;
          *(_DWORD *)a8 = v196;
          v60 = objc_msgSend((id)v30, "bundleID");
          v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          a5 = v62;

          v23 = v197;
          v63 = v61;
          a3 = (uint64_t)v205;
          *(_QWORD *)(a8 + 4) = sub_1000155A4(v63, (unint64_t)a5, (uint64_t *)&v216);

          swift_bridgeObjectRelease(a5);
          *(_WORD *)(a8 + 12) = 2048;
          *(_QWORD *)(a8 + 14) = a7;
          _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v24, "received the following summary: %s with %ld", (uint8_t *)a8, 0x16u);
          swift_arrayDestroy(v25, 1, v194);
          swift_slowDealloc(v25, -1, -1);
          swift_slowDealloc(a8, -1, -1);

        }
        else
        {

        }
        v64 = objc_msgSend((id)v30, "adamID");
        if (v64)
        {
          a8 = (unint64_t)v64;
          v65 = objc_msgSend(v64, "stringValue");
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
          v24 = v66;

          isa = *(_QWORD *)v201;
          if (*(_QWORD *)(*(_QWORD *)v201 + 16) && (sub_10004D860(v25, v24), (v67 & 1) != 0))
          {

            swift_bridgeObjectRelease(v24);
          }
          else
          {
            swift_bridgeObjectRelease(v24);
            v68 = (id)v30;
            v69 = (id)a8;
            a8 = (unint64_t)v68;
            v30 = (unint64_t)v69;
            v70 = Logger.logObject.getter(v30);
            v71 = static os_log_type_t.default.getter();
            v72 = v71;
            if (os_log_type_enabled(v70, v71))
            {
              v73 = swift_slowAlloc(32, -1);
              v193 = v72;
              v74 = v73;
              v192 = swift_slowAlloc(64, -1);
              v216 = (objc_class *)v192;
              *(_DWORD *)v74 = v189;
              v75 = objc_msgSend((id)a8, "bundleID");
              v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
              v78 = v77;

              v214 = (_QWORD *)sub_1000155A4(v76, v78, (uint64_t *)&v216);
              v24 = (unint64_t)v190;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v190);

              swift_bridgeObjectRelease(v78);
              *(_WORD *)(v74 + 12) = 2080;
              v191 = v74 + 14;
              v79 = (id)v30;
              v80 = objc_msgSend(v79, "description");
              v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
              v82 = v81;

              v23 = v197;
              v214 = (_QWORD *)sub_1000155A4(v25, v82, (uint64_t *)&v216);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v24);

              swift_bridgeObjectRelease(v82);
              *(_WORD *)(v74 + 22) = 2048;
              v214 = (_QWORD *)a7;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v24);
              _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v193, "adding the following summary: %s, %s with %ld", (uint8_t *)v74, 0x20u);
              v83 = v192;
              swift_arrayDestroy(v192, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v83, -1, -1);
              swift_slowDealloc(v74, -1, -1);

            }
            else
            {

            }
            v49 = objc_msgSend((id)v30, "stringValue");
            a4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
            v51 = v50;

            a5 = v201;
            v52 = *(_QWORD *)v201;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v201);
            v216 = (objc_class *)v52;
            a5->isa = (Class)0x8000000000000000;
            sub_10004E55C(a8, a7, a4, v51, isUniquelyReferenced_nonNull_native);
            isa = (unint64_t)a5->isa;
            a5->isa = v216;

            swift_bridgeObjectRelease(v51);
            swift_bridgeObjectRelease(isa);
            a3 = (uint64_t)v205;
          }
        }
        else
        {
          v30 = (unint64_t)(id)v30;
          isa = Logger.logObject.getter(v30);
          v84 = static os_log_type_t.default.getter();
          a4 = v84;
          if (os_log_type_enabled((os_log_t)isa, v84))
          {
            a8 = swift_slowAlloc(22, -1);
            v24 = swift_slowAlloc(32, -1);
            v216 = (objc_class *)v24;
            *(_DWORD *)a8 = v196;
            v85 = objc_msgSend((id)v30, "bundleID");
            a5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
            v87 = v86;

            a3 = (uint64_t)v205;
            *(_QWORD *)(a8 + 4) = sub_1000155A4((uint64_t)a5, v87, (uint64_t *)&v216);

            v88 = v87;
            v23 = v197;
            swift_bridgeObjectRelease(v88);
            *(_WORD *)(a8 + 12) = 2048;
            *(_QWORD *)(a8 + 14) = a7;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)isa, (os_log_type_t)a4, "received nil adamID for: %s with %ld", (uint8_t *)a8, 0x16u);
            swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v24, -1, -1);
            swift_slowDealloc(a8, -1, -1);

          }
          else
          {

          }
        }
        ++a7;
      }
      while (v202 != v23);
      a7 = *(_QWORD *)v201;
    }
    else
    {
      a7 = v47;
      a3 = (uint64_t)v205;
    }
    v212 = _swiftEmptyArrayStorage;
    v213 = _swiftEmptyArrayStorage;
    v89 = *(_QWORD *)(a7 + 64);
    v202 = a7 + 64;
    v90 = 1 << *(_BYTE *)(a7 + 32);
    v91 = -1;
    if (v90 < 64)
      v91 = ~(-1 << v90);
    v23 = v91 & v89;
    a5 = ((unint64_t)(v90 + 63) >> 6);
    swift_bridgeObjectRetain(a7);
    v24 = 0;
    v25 = (unint64_t)type metadata accessor for AppMetadata;
    while (1)
    {
      if (v23)
      {
        v92 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        v93 = v92 | (v24 << 6);
      }
      else
      {
        v94 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_107;
        if (v94 >= (uint64_t)a5)
        {
LABEL_86:
          swift_release(a7);
          if (qword_1000906F8 != -1)
            goto LABEL_120;
          goto LABEL_87;
        }
        v95 = *(_QWORD *)(v202 + 8 * v94);
        ++v24;
        if (!v95)
        {
          v24 = v94 + 1;
          if (v94 + 1 >= (uint64_t)a5)
            goto LABEL_86;
          v95 = *(_QWORD *)(v202 + 8 * v24);
          if (!v95)
          {
            v24 = v94 + 2;
            if (v94 + 2 >= (uint64_t)a5)
              goto LABEL_86;
            v95 = *(_QWORD *)(v202 + 8 * v24);
            if (!v95)
            {
              v96 = v94 + 3;
              if (v96 >= (uint64_t)a5)
                goto LABEL_86;
              v95 = *(_QWORD *)(v202 + 8 * v96);
              if (!v95)
              {
                while (1)
                {
                  v24 = v96 + 1;
                  if (__OFADD__(v96, 1))
                    goto LABEL_109;
                  if ((uint64_t)v24 >= (uint64_t)a5)
                    goto LABEL_86;
                  v95 = *(_QWORD *)(v202 + 8 * v24);
                  ++v96;
                  if (v95)
                    goto LABEL_74;
                }
              }
              v24 = v96;
            }
          }
        }
LABEL_74:
        v23 = (v95 - 1) & v95;
        v93 = __clz(__rbit64(v95)) + (v24 << 6);
      }
      v97 = (unint64_t *)(*(_QWORD *)(a7 + 48) + 16 * v93);
      a8 = *v97;
      v30 = v97[1];
      swift_bridgeObjectRetain(v30);
      sub_10002F9FC(0x65756E69746E6F43, 0xEF676E6979616C50, a8, v30, a3);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(a3, 1, v207) == 1)
      {
        sub_100007928(a3, &qword_100091C58);
        isa = (unint64_t)v213;
        if ((swift_isUniquelyReferenced_nonNull_native(v213) & 1) == 0)
          isa = (unint64_t)sub_10000EEA4(0, *(_QWORD *)(isa + 16) + 1, 1, (char *)isa);
        v99 = *(_QWORD *)(isa + 16);
        v98 = *(_QWORD *)(isa + 24);
        a4 = v99 + 1;
        if (v99 >= v98 >> 1)
          isa = (unint64_t)sub_10000EEA4((char *)(v98 > 1), v99 + 1, 1, (char *)isa);
        *(_QWORD *)(isa + 16) = a4;
        v100 = (isa + 16 * v99);
        v100[4].isa = (Class)a8;
        v100[5].isa = (Class)v30;
        v213 = isa;
        a3 = (uint64_t)v205;
      }
      else
      {
        swift_bridgeObjectRelease(v30);
        v101 = (uint64_t)v203;
        sub_100007AB0(a3, (uint64_t)v203, type metadata accessor for AppMetadata);
        sub_100007AF4(v101, (uint64_t)v204, type metadata accessor for AppMetadata);
        v30 = (unint64_t)v212;
        if ((swift_isUniquelyReferenced_nonNull_native(v212) & 1) == 0)
          v30 = sub_10000F1BC(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
        a8 = *(_QWORD *)(v30 + 16);
        v102 = *(_QWORD *)(v30 + 24);
        isa = a8 + 1;
        if (a8 >= v102 >> 1)
          v30 = sub_10000F1BC(v102 > 1, a8 + 1, 1, v30);
        *(_QWORD *)(v30 + 16) = isa;
        sub_100007AB0((uint64_t)v204, v30+ ((*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80))+ *(_QWORD *)(v208 + 72) * a8, type metadata accessor for AppMetadata);
        v212 = (_QWORD *)v30;
        sub_10000A7C0((uint64_t)v203, type metadata accessor for AppMetadata);
      }
    }
  }
  __break(1u);
LABEL_120:
  swift_once(&qword_1000906F8, sub_100029CC4);
LABEL_87:
  v103 = type metadata accessor for Logger(0);
  v104 = sub_10000A720(v103, (uint64_t)qword_1000959D8);
  v105 = v187;
  v106 = swift_retain_n(v187, 2);
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    v205 = (char *)v104;
    v109 = (uint8_t *)swift_slowAlloc(12, -1);
    v110 = swift_slowAlloc(32, -1);
    v216 = (objc_class *)v110;
    *(_DWORD *)v109 = 136315138;
    swift_beginAccess(v201, v209, 0, 0);
    v111 = *(_QWORD *)(v105 + 16);
    swift_bridgeObjectRetain(v111);
    v112 = sub_100006454(&qword_100091C60);
    v113 = Dictionary.Keys.description.getter(v111, &type metadata for String, v112, &protocol witness table for String);
    v115 = v114;
    swift_bridgeObjectRelease(v111);
    v214 = (_QWORD *)sub_1000155A4(v113, v115, (uint64_t *)&v216);
    v104 = (uint64_t)v205;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215);
    swift_release_n(v105, 2);
    swift_bridgeObjectRelease(v115);
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Need app metadata for the following adam IDs: %s", v109, 0xCu);
    swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    swift_slowDealloc(v109, -1, -1);

  }
  else
  {

    v116 = swift_release_n(v105, 2);
  }
  v117 = Logger.logObject.getter(v116);
  v118 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v117, (os_log_type_t)v118))
  {
    v119 = (uint8_t *)swift_slowAlloc(12, -1);
    v204 = (objc_class *)swift_slowAlloc(32, -1);
    v216 = v204;
    *(_DWORD *)v119 = 136315138;
    swift_beginAccess(&v212, &v210, 0, 0);
    v120 = v212;
    v121 = v212[2];
    v122 = _swiftEmptyArrayStorage;
    if (v121)
    {
      LODWORD(v201) = v118;
      v202 = (unint64_t)v119;
      v203 = v117;
      v205 = (char *)v104;
      v214 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v212);
      sub_100036088(0, v121, 0);
      v123 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
      v200 = (unint64_t)v120;
      v124 = (uint64_t)v120 + v123;
      v125 = *(_QWORD *)(v208 + 72);
      v122 = v214;
      do
      {
        v126 = v195;
        sub_100007AF4(v124, v195, type metadata accessor for AppMetadata);
        v127 = (uint64_t *)(v126 + *(int *)(v207 + 20));
        v128 = *v127;
        v129 = v127[1];
        swift_bridgeObjectRetain(v129);
        sub_10000A7C0(v126, type metadata accessor for AppMetadata);
        if ((swift_isUniquelyReferenced_nonNull_native(v122) & 1) == 0)
        {
          sub_100036088(0, v122[2] + 1, 1);
          v122 = v214;
        }
        v131 = v122[2];
        v130 = v122[3];
        if (v131 >= v130 >> 1)
        {
          sub_100036088(v130 > 1, v131 + 1, 1);
          v122 = v214;
        }
        v122[2] = v131 + 1;
        v132 = &v122[2 * v131];
        v132[4] = v128;
        v132[5] = v129;
        v124 += v125;
        --v121;
      }
      while (v121);
      swift_bridgeObjectRelease(v200);
      v117 = v203;
      v119 = (uint8_t *)v202;
      LOBYTE(v118) = v201;
    }
    v134 = Array.description.getter(v122, &type metadata for String);
    v136 = v135;
    swift_bridgeObjectRelease(v122);
    v214 = (_QWORD *)sub_1000155A4(v134, v136, (uint64_t *)&v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, v215);
    swift_bridgeObjectRelease(v136);
    _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v118, "Found cached app metadata for: %s", v119, 0xCu);
    v137 = (uint64_t)v204;
    swift_arrayDestroy(v204, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v137, -1, -1);
    swift_slowDealloc(v119, -1, -1);

  }
  else
  {

  }
  v138 = Logger.logObject.getter(v133);
  v139 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v138, v139))
  {
    v140 = (uint8_t *)swift_slowAlloc(12, -1);
    v141 = swift_slowAlloc(32, -1);
    v216 = (objc_class *)v141;
    *(_DWORD *)v140 = 136315138;
    swift_beginAccess(&v213, &v214, 0, 0);
    v142 = v213;
    v143 = swift_bridgeObjectRetain(v213);
    v144 = Array.description.getter(v143, &type metadata for String);
    v146 = v145;
    swift_bridgeObjectRelease(v142);
    v211 = sub_1000155A4(v144, v146, (uint64_t *)&v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212);
    swift_bridgeObjectRelease(v146);
    _os_log_impl((void *)&_mh_execute_header, v138, v139, "Reaching out to MAPI to retrieve app metadata for: %s", v140, 0xCu);
    swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v141, -1, -1);
    swift_slowDealloc(v140, -1, -1);
  }

  v147 = (void (*)(uint64_t, NSObject *, int64_t))v177;
  swift_beginAccess(&v213, &v216, 0, 0);
  v148 = v213;
  v149 = v178;
  v150 = v180;
  v147(v178, v181, v180);
  v151 = v179;
  v152 = *(unsigned __int8 *)(v179 + 80);
  v153 = (v152 + 40) & ~v152;
  v154 = (v186 + v153 + 7) & 0xFFFFFFFFFFFFFFF8;
  v155 = (v154 + 15) & 0xFFFFFFFFFFFFFFF8;
  v156 = (v155 + 23) & 0xFFFFFFFFFFFFFFF8;
  v157 = (char *)swift_allocObject(&unk_10008E7D0, v156 + 16, v152 | 7);
  *((_QWORD *)v157 + 2) = v188;
  *((_QWORD *)v157 + 3) = &v212;
  *((_QWORD *)v157 + 4) = v206;
  (*(void (**)(char *, uint64_t, int64_t))(v151 + 32))(&v157[v153], v149, v150);
  v158 = v187;
  *(_QWORD *)&v157[v154] = v187;
  v159 = (uint64_t *)&v157[v155];
  v160 = v183;
  *v159 = v182;
  v159[1] = v160;
  v161 = (uint64_t *)&v157[v156];
  v162 = v185;
  *v161 = v184;
  v161[1] = v162;
  swift_bridgeObjectRetain(v160);
  swift_retain(v162);
  swift_retain(v158);
  v163 = swift_bridgeObjectRetain(v148);
  sub_100032E74(v163, sub_10003BC9C, (uint64_t)v157);
  swift_release(v157);
  swift_unknownObjectRelease(v176);
  swift_bridgeObjectRelease(v148);
  swift_bridgeObjectRelease(v212);
  v164 = v213;
  swift_release(v158);
  return swift_bridgeObjectRelease(v164);
}

uint64_t sub_10002F9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v87 = a3;
  v78 = a1;
  v79 = a2;
  v85 = a5;
  v86 = type metadata accessor for AppMetadata(0);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v74 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v75 = (uint64_t)&v73 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v73 - v10;
  v12 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v12);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v80 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v81 = (char *)&v73 - v19;
  __chkstk_darwin(v20);
  v82 = (char *)&v73 - v21;
  __chkstk_darwin(v22);
  v83 = (char *)&v73 - v23;
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10000A720(v24, (uint64_t)qword_1000959D8);
  v26 = swift_bridgeObjectRetain_n(a4, 2);
  v77 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v76 = v11;
  if (v29)
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v89 = v31;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain(a4);
    v88 = sub_1000155A4(v87, a4, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Fetch cached metadata for %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v32 = (void *)objc_opt_self(NSFileManager);
  v33 = objc_msgSend(v32, "defaultManager");
  v34 = 1;
  v35 = objc_msgSend(v33, "URLsForDirectory:inDomains:", 13, 1);

  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v15);
  v37 = v16;
  if (*(_QWORD *)(v36 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v14, v36 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v15);
    v34 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v34, 1, v15);
  swift_bridgeObjectRelease(v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100007928((uint64_t)v14, &qword_100090BC8);
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v83, v14, v15);
  URL.appendingPathComponent(_:isDirectory:)(v78, v79, 1);
  swift_bridgeObjectRetain(a4);
  URL.appendingPathComponent(_:isDirectory:)(v87, a4, 1);
  swift_bridgeObjectRelease(a4);
  v38 = v80;
  URL.appendingPathComponent(_:)(0x617461646174656DLL, 0xED00006E6F736A2ELL);
  v39 = objc_msgSend(v32, "defaultManager");
  URL.path.getter(v39);
  v41 = v40;
  v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  LOBYTE(v41) = objc_msgSend(v39, "fileExistsAtPath:", v42);

  if ((v41 & 1) == 0)
  {
    v50 = swift_bridgeObjectRetain_n(a4, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v89 = v54;
      *(_DWORD *)v53 = 136315138;
      swift_bridgeObjectRetain(a4);
      v88 = sub_1000155A4(v87, a4, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Cached metadata does not exist for %s", v53, 0xCu);
      v55 = 1;
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      v56 = *(void (**)(char *, uint64_t))(v37 + 8);
      v56(v38, v15);
      v56(v81, v15);
      v56(v82, v15);
      v56(v83, v15);
LABEL_16:
      v58 = v85;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v58, v55, 1, v86);
    }
    swift_bridgeObjectRelease_n(a4, 2);

    v57 = *(void (**)(char *, uint64_t))(v37 + 8);
    v57(v38, v15);
    v57(v81, v15);
    v57(v82, v15);
    v57(v83, v15);
LABEL_15:
    v55 = 1;
    goto LABEL_16;
  }
  v43 = Data.init(contentsOf:options:)(v38, 0);
  v45 = v44;
  v46 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
  v47 = JSONDecoder.init()();
  v48 = sub_100007A70(&qword_100091CA0, type metadata accessor for AppMetadata, (uint64_t)&unk_1000727D0);
  v49 = (uint64_t)v76;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v86, v43, v45, v86, v48);
  swift_release(v47);
  v60 = v75;
  sub_100007AF4(v49, v75, type metadata accessor for AppMetadata);
  v61 = swift_bridgeObjectRetain_n(a4, 2);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v65 = v60;
    v66 = swift_slowAlloc(22, -1);
    v79 = swift_slowAlloc(64, -1);
    v89 = v79;
    *(_DWORD *)v66 = 136315394;
    swift_bridgeObjectRetain(a4);
    v88 = sub_1000155A4(v87, a4, &v89);
    v87 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v66 + 12) = 2080;
    v67 = v74;
    sub_100007AF4(v65, v74, type metadata accessor for AppMetadata);
    v68 = String.init<A>(describing:)(v67, v86);
    v70 = v69;
    v88 = sub_1000155A4(v68, v69, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
    swift_bridgeObjectRelease(v70);
    sub_10000A7C0(v65, type metadata accessor for AppMetadata);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Decoded metadata with adamID %s -> %s", (uint8_t *)v66, 0x16u);
    v71 = v79;
    swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
    v49 = (uint64_t)v76;
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v66, -1, -1);
    sub_10000ADC4(v43, v45);

    v72 = *(void (**)(char *, uint64_t))(v87 + 8);
    v72(v80, v15);
  }
  else
  {
    sub_10000ADC4(v43, v45);

    sub_10000A7C0(v60, type metadata accessor for AppMetadata);
    swift_bridgeObjectRelease_n(a4, 2);
    v72 = *(void (**)(char *, uint64_t))(v37 + 8);
    v72(v38, v15);
  }
  v72(v81, v15);
  v72(v82, v15);
  v72(v83, v15);
  v58 = v85;
  sub_100007AB0(v49, v85, type metadata accessor for AppMetadata);
  v55 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v58, v55, 1, v86);
}

void sub_1000304F4(unint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  dispatch_group_t v50;
  uint64_t v51;
  unint64_t v52;
  NSObject *v53;
  void (*v54)(char *, _QWORD, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void (*v58)(char *, uint64_t);
  int v59;
  double v60;
  double v61;
  _BOOL4 v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  dispatch_group_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  id v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  dispatch_group_t v141;
  char *v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD aBlock[5];
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  char v160[8];

  v137 = a8;
  v136 = a7;
  v140 = a6;
  v150 = a4;
  v14 = type metadata accessor for AppMetadata(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v120 - v19;
  v149 = v21;
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v120 - v24;
  v127 = type metadata accessor for DispatchWorkItemFlags(0, v23);
  v126 = *(_QWORD *)(v127 - 8);
  v26 = __chkstk_darwin(v127);
  v125 = (char *)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for DispatchQoS(0, v26);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v122 = (char *)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for WidgetFamily(0);
  v155 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v145 = v29;
  v142 = (char *)&v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = dispatch_group_create();
  v30 = swift_allocObject(&unk_10008E7F8, 24, 7);
  v31 = sub_100031124(0, a2);
  v139 = v30;
  *(_QWORD *)(v30 + 16) = v31;
  v32 = *(_QWORD *)(a1 + 16);
  v151 = v25;
  v152 = v20;
  v153 = a5;
  if (v32)
  {
    v33 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v34 = a1 + v33;
    v154 = v15;
    v35 = *(_QWORD *)(v15 + 72);
    v148 = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_10004F690(0x65756E69746E6F43, 0xEF676E6979616C50);
      sub_100007AF4(v34, (uint64_t)v17, type metadata accessor for AppMetadata);
      swift_beginAccess(a3, aBlock, 33, 0);
      v36 = *a3;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
      *a3 = v36;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v36 = sub_10000F1BC(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
        *a3 = v36;
      }
      v39 = *(_QWORD *)(v36 + 16);
      v38 = *(_QWORD *)(v36 + 24);
      if (v39 >= v38 >> 1)
      {
        v36 = sub_10000F1BC(v38 > 1, v39 + 1, 1, v36);
        *a3 = v36;
      }
      *(_QWORD *)(v36 + 16) = v39 + 1;
      sub_100007AB0((uint64_t)v17, v36 + v33 + v39 * v35, type metadata accessor for AppMetadata);
      swift_endAccess(aBlock);
      v34 += v35;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease(v148);
    a5 = v153;
    v15 = v154;
    v25 = v151;
    v20 = v152;
  }
  swift_beginAccess(a3, v160, 0, 0);
  v40 = *a3;
  v41 = *(_QWORD *)(v40 + 16);
  if (v41)
  {
    v134 = (id)objc_opt_self(UIDevice);
    v42 = *(unsigned __int8 *)(v15 + 80);
    v43 = v40 + ((v42 + 32) & ~v42);
    v133 = *(_QWORD *)(v15 + 72);
    v44 = v42 | 7;
    v154 = (v42 + 24) & ~v42;
    v147 = (v149 + v154 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v147 + 15) & 0xFFFFFFFFFFFFFFF8;
    v149 = v45 + 8;
    v135 = enum case for WidgetFamily.systemLarge(_:);
    v129 = enum case for WidgetFamily.systemExtraLarge(_:);
    v148 = v45;
    v132 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v131 = (v132 + 15) & 0xFFFFFFFFFFFFFFF8;
    v130 = v131 + 16;
    v138 = v145 + 7;
    v121 = v40;
    swift_bridgeObjectRetain(v40);
    v46 = v128;
    v47 = (uint64_t)v20;
    v48 = v155;
    v49 = v142;
    v146 = v44;
    while (1)
    {
      v145 = v41;
      v144 = v43;
      sub_100007AF4(v43, (uint64_t)v25, type metadata accessor for AppMetadata);
      aBlock[0] = sub_10004C244((uint64_t)_swiftEmptyArrayStorage);
      v50 = v141;
      dispatch_group_enter(v141);
      sub_100007AF4((uint64_t)v25, v47, type metadata accessor for AppMetadata);
      v51 = swift_allocObject(&unk_10008E820, v149, v44);
      *(_QWORD *)(v51 + 16) = v150;
      sub_100007AB0(v47, v51 + v154, type metadata accessor for AppMetadata);
      v52 = v147;
      *(_QWORD *)(v51 + v147) = aBlock;
      *(_QWORD *)(v51 + v148) = v50;
      v53 = v50;
      sub_100050274(0x65756E69746E6F43, 0xEF676E6979616C50, 350, 350, 0, (void (*)(_QWORD))sub_10003BD80, v51);
      swift_release(v51);
      v54 = *(void (**)(char *, _QWORD, uint64_t))(v48 + 104);
      v54(v49, v135, v46);
      v55 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
      dispatch thunk of RawRepresentable.rawValue.getter(&v159, v46, v55);
      dispatch thunk of RawRepresentable.rawValue.getter(&v158, v46, v55);
      v57 = v158;
      v56 = v159;
      v58 = *(void (**)(char *, uint64_t))(v48 + 8);
      v58(v49, v46);
      if (v56 == v57)
      {
        v59 = 1;
        v60 = 430.0;
        v61 = 246.324503;
      }
      else
      {
        v54(v49, v129, v46);
        dispatch thunk of RawRepresentable.rawValue.getter(&v159, v46, v55);
        dispatch thunk of RawRepresentable.rawValue.getter(&v158, v46, v55);
        v62 = v159 == v158;
        v58(v49, v46);
        v59 = 2 * v62;
        v61 = 350.0;
        v60 = 350.0;
      }
      dispatch_group_enter(v53);
      v63 = round(v60);
      v64 = (uint64_t)v152;
      v65 = v149;
      if ((~*(_QWORD *)&v63 & 0x7FF0000000000000) == 0)
        break;
      if (v63 <= -9.22337204e18)
        goto LABEL_28;
      if (v63 >= 9.22337204e18)
        goto LABEL_29;
      v66 = round(v61);
      if ((~*(_QWORD *)&v66 & 0x7FF0000000000000) == 0)
        goto LABEL_30;
      if (v66 <= -9.22337204e18)
        goto LABEL_31;
      if (v66 >= 9.22337204e18)
        goto LABEL_32;
      v67 = (uint64_t)v63;
      v68 = v59;
      v69 = (uint64_t)v66;
      v70 = (uint64_t)v151;
      sub_100007AF4((uint64_t)v151, (uint64_t)v152, type metadata accessor for AppMetadata);
      v71 = swift_allocObject(&unk_10008E848, v65, v146);
      *(_QWORD *)(v71 + 16) = v150;
      sub_100007AB0(v64, v71 + v154, type metadata accessor for AppMetadata);
      *(_QWORD *)(v71 + v52) = aBlock;
      v72 = v46;
      v73 = v148;
      *(_QWORD *)(v71 + v148) = v53;
      v74 = v53;
      v143 = v74;
      v75 = v67;
      v76 = v70;
      sub_100050274(0x65756E69746E6F43, 0xEF676E6979616C50, v75, v69, v68, (void (*)(_QWORD))sub_10003BE80, v71);
      swift_release(v71);
      dispatch_group_enter(v74);
      v77 = objc_msgSend(v134, "currentDevice");
      v78 = objc_msgSend(v77, "userInterfaceIdiom");

      if (v78 == (id)1)
        v79 = 110;
      else
        v79 = 95;
      sub_100007AF4(v76, v64, type metadata accessor for AppMetadata);
      v80 = v155;
      v81 = v142;
      v46 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v142, v153, v72);
      v82 = *(unsigned __int8 *)(v80 + 80);
      v83 = (v130 + v82) & ~v82;
      v84 = v146;
      v85 = (v138 + v83) & 0xFFFFFFFFFFFFFFF8;
      v86 = swift_allocObject(&unk_10008E870, v85 + 8, v146 | v82);
      *(_QWORD *)(v86 + 16) = v79;
      sub_100007AB0(v64, v86 + v154, type metadata accessor for AppMetadata);
      v87 = v143;
      *(_QWORD *)(v86 + v147) = v143;
      v88 = v140;
      *(_QWORD *)(v86 + v73) = v140;
      *(_QWORD *)(v86 + v132) = aBlock;
      v89 = (_QWORD *)(v86 + v131);
      v90 = v137;
      *v89 = v136;
      v89[1] = v90;
      v91 = v86 + v83;
      v49 = v81;
      (*(void (**)(unint64_t, char *, uint64_t))(v155 + 32))(v91, v81, v46);
      v92 = v139;
      *(_QWORD *)(v86 + v85) = v139;
      swift_retain(v92);
      v93 = v88;
      v44 = v84;
      swift_retain(v93);
      v94 = v87;
      v25 = v151;
      v47 = (uint64_t)v152;
      v95 = v90;
      v48 = v155;
      swift_bridgeObjectRetain(v95);
      sub_100050274(0x65756E69746E6F43, 0xEF676E6979616C50, v79, v79, 0, (void (*)(_QWORD))sub_10003C084, v86);
      swift_release(v86);
      sub_10000A7C0((uint64_t)v25, type metadata accessor for AppMetadata);
      swift_bridgeObjectRelease(aBlock[0]);
      v43 = v144 + v133;
      v41 = v145 - 1;
      if (v145 == 1)
      {
        swift_bridgeObjectRelease(v121);
        v96 = v138;
        a5 = v153;
        v97 = v48;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    v96 = v145 + 7;
    v97 = v155;
LABEL_26:
    sub_100011E4C(0, &qword_100091C08, OS_dispatch_queue_ptr);
    v98 = (void *)static OS_dispatch_queue.main.getter();
    v99 = v142;
    v100 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v142, a5, v128);
    v101 = *(unsigned __int8 *)(v97 + 80);
    v102 = (v101 + 24) & ~v101;
    v103 = (v96 + v102) & 0xFFFFFFFFFFFFFFF8;
    v104 = (v103 + 15) & 0xFFFFFFFFFFFFFFF8;
    v105 = swift_allocObject(&unk_10008E898, v104 + 16, v101 | 7);
    v106 = v97;
    v107 = v139;
    *(_QWORD *)(v105 + 16) = v139;
    (*(void (**)(uint64_t, char *, uint64_t))(v106 + 32))(v105 + v102, v99, v100);
    v108 = v140;
    *(_QWORD *)(v105 + v103) = v140;
    v109 = (_QWORD *)(v105 + v104);
    *v109 = a9;
    v109[1] = a10;
    aBlock[4] = sub_10003C20C;
    v157 = v105;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100032E48;
    aBlock[3] = &unk_10008E8B0;
    v110 = _Block_copy(aBlock);
    swift_retain(v107);
    swift_retain(v108);
    v111 = swift_retain(a10);
    v112 = v122;
    static DispatchQoS.unspecified.getter(v111);
    v159 = _swiftEmptyArrayStorage;
    v113 = sub_100007A70(&qword_100091C10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v114 = sub_100006454(&qword_100091C18);
    v115 = sub_10003B8BC();
    v116 = v125;
    v117 = v127;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v114, v115, v127, v113);
    v118 = v141;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v112, v116, v98, v110);
    _Block_release(v110);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v116, v117);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v112, v124);
    v119 = v157;
    swift_release(v107);
    swift_release(v119);
  }
}

uint64_t sub_100031124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = sub_100006454(&qword_100091C98);
      v5 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      v5[2] = a2;
      v9 = v5;
      v5[4] = a1;
      if (a2 != 1)
      {
        v5[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v5 + 6;
          do
          {
            *v7++ = a1;
            swift_retain(a1);
            --v6;
          }
          while (v6);
        }
        v5 = (_QWORD *)swift_retain(a1);
      }
    }
    else
    {
      v9 = _swiftEmptyArrayStorage;
      v5 = (_QWORD *)swift_release(a1);
    }
    specialized Array._endMutation()(v5);
    return (uint64_t)v9;
  }
  return result;
}

void sub_100031220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, NSObject *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v11 = type metadata accessor for AppMetadata(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v14 = type metadata accessor for Logger(0);
  sub_10000A720(v14, (uint64_t)qword_1000959D8);
  sub_100007AF4(a4, (uint64_t)v13, type metadata accessor for AppMetadata);
  swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(42, -1);
    v20 = swift_slowAlloc(64, -1);
    v34 = v20;
    *(_DWORD *)v19 = 134218754;
    v33 = v18;
    v36 = v20;
    v37 = 350;
    v35 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    *(_WORD *)(v19 + 12) = 2048;
    v37 = 350;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    *(_WORD *)(v19 + 22) = 2080;
    v21 = (uint64_t *)&v13[*(int *)(v11 + 28)];
    v23 = *v21;
    v22 = v21[1];
    swift_bridgeObjectRetain(v22);
    v37 = sub_1000155A4(v23, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_bridgeObjectRelease(v22);
    sub_10000A7C0((uint64_t)v13, type metadata accessor for AppMetadata);
    *(_WORD *)(v19 + 32) = 2080;
    v37 = a1;
    v38[0] = a2;
    swift_bridgeObjectRetain(a2);
    v24 = sub_100006454(&qword_100091C50);
    v25 = String.init<A>(describing:)(&v37, v24);
    v27 = v26;
    v37 = sub_1000155A4(v25, v26, &v36);
    a6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v33, "%ldx%ld highlight image data for %s = %s", (uint8_t *)v19, 0x2Au);
    v28 = v34;
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {
    sub_10000A7C0((uint64_t)v13, type metadata accessor for AppMetadata);

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(a5, &v37, 33, 0);
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
    v36 = *a5;
    *a5 = 0x8000000000000000;
    sub_10004E3E8(a1, a2, 0x6867696C68676968, 0xE900000000000074, isUniquelyReferenced_nonNull_native);
    v30 = *a5;
    *a5 = v36;
  }
  else
  {
    sub_100035DD0(0x6867696C68676968, 0xE900000000000074);
    v30 = v31;
  }
  swift_bridgeObjectRelease(v30);
  swift_endAccess(&v37);
  dispatch_group_leave(a6);
}

void sub_1000315AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, NSObject *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v11 = type metadata accessor for AppMetadata(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v14 = type metadata accessor for Logger(0);
  sub_10000A720(v14, (uint64_t)qword_1000959D8);
  sub_100007AF4(a4, (uint64_t)v13, type metadata accessor for AppMetadata);
  swift_bridgeObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(42, -1);
    v41 = swift_slowAlloc(64, -1);
    v42 = v41;
    *(_DWORD *)v19 = 134218754;
    v43 = 350;
    v40 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
    *(_WORD *)(v19 + 12) = 2048;
    v43 = 350;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
    *(_WORD *)(v19 + 22) = 2080;
    v20 = (uint64_t *)&v13[*(int *)(v11 + 28)];
    v39 = v18;
    v21 = a1;
    v22 = a6;
    v24 = *v20;
    v23 = v20[1];
    swift_bridgeObjectRetain(v23);
    v43 = sub_1000155A4(v24, v23, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
    v25 = v23;
    a6 = v22;
    a1 = v21;
    swift_bridgeObjectRelease(v25);
    sub_10000A7C0((uint64_t)v13, type metadata accessor for AppMetadata);
    *(_WORD *)(v19 + 32) = 2080;
    v43 = v21;
    v44[0] = a2;
    swift_bridgeObjectRetain(a2);
    v26 = sub_100006454(&qword_100091C50);
    v27 = String.init<A>(describing:)(&v43, v26);
    v29 = v28;
    v43 = sub_1000155A4(v27, v28, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v29);
    v30 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v39, "%ldx%ld editorial image data for %s = %s", (uint8_t *)v19, 0x2Au);
    v31 = v41;
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {
    sub_10000A7C0((uint64_t)v13, type metadata accessor for AppMetadata);

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(a5, &v43, 33, 0);
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
    v42 = *a5;
    *a5 = 0x8000000000000000;
    sub_10004E3E8(a1, a2, 0xD000000000000019, 0x80000001000740F0, isUniquelyReferenced_nonNull_native);
    v33 = *a5;
    *a5 = v42;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRetain(a2);
    v34 = swift_isUniquelyReferenced_nonNull_native(*a5);
    v42 = *a5;
    *a5 = 0x8000000000000000;
    sub_10004E3E8(a1, a2, 0xD00000000000001ELL, 0x8000000100073F10, v34);
    v35 = *a5;
    *a5 = v42;
  }
  else
  {
    sub_100035DD0(0xD000000000000019, 0x80000001000740F0);
    swift_bridgeObjectRelease(v36);
    sub_100035DD0(0xD00000000000001ELL, 0x8000000100073F10);
    v35 = v37;
  }
  swift_bridgeObjectRelease(v35);
  swift_endAccess(&v43);
  dispatch_group_leave(a6);
}

void sub_1000319C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5, unint64_t a6, _QWORD *a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  id v112;
  Class isa;
  id v114;
  int *v115;
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  id v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, id);
  void (*v131)(int *, uint64_t, id);
  uint64_t v132;
  uint64_t v133;
  id v134;
  Class v135;
  id v136;
  id v137;
  id v138;
  id v139;
  void *v140;
  uint64_t v141;
  char v142;
  void *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  int *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  id v161;
  dispatch_group_t v162;
  int *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166[3];
  uint64_t v167;
  _QWORD v168[3];

  v159 = a8;
  v160 = a7;
  v164 = (uint64_t *)a1;
  v157 = type metadata accessor for WidgetFamily(0);
  v154 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v17 = (int *)((char *)&v152 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v20 = (char *)&v152 - v19;
  v21 = type metadata accessor for Date(0);
  __chkstk_darwin(v21);
  v158 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for AppMetadata(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10000A720(v26, (uint64_t)qword_1000959D8);
  sub_100007AF4(a4, (uint64_t)v25, type metadata accessor for AppMetadata);
  swift_bridgeObjectRetain_n(a2, 2);
  v161 = (id)v27;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  LODWORD(v162) = v30;
  v31 = os_log_type_enabled(v29, v30);
  v155 = v20;
  v156 = v17;
  v163 = (int *)v23;
  if (v31)
  {
    v32 = swift_slowAlloc(42, -1);
    v152 = swift_slowAlloc(64, -1);
    v166[0] = v152;
    *(_DWORD *)v32 = 134218754;
    v167 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168);
    *(_WORD *)(v32 + 12) = 2048;
    v167 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168);
    *(_WORD *)(v32 + 22) = 2080;
    v33 = (uint64_t *)&v25[*(int *)(v23 + 28)];
    v153 = a6;
    v34 = a4;
    v35 = a5;
    v36 = *v33;
    v37 = v33[1];
    swift_bridgeObjectRetain(v37);
    v167 = sub_1000155A4(v36, v37, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168);
    v38 = v37;
    a5 = v35;
    a4 = v34;
    swift_bridgeObjectRelease(v38);
    sub_10000A7C0((uint64_t)v25, type metadata accessor for AppMetadata);
    *(_WORD *)(v32 + 32) = 2080;
    v167 = (uint64_t)v164;
    v168[0] = a2;
    swift_bridgeObjectRetain(a2);
    v39 = sub_100006454(&qword_100091C50);
    v40 = String.init<A>(describing:)(&v167, v39);
    v42 = v41;
    v167 = sub_1000155A4(v40, v41, v166);
    a6 = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v168);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v162, "%ldx%ld image data for %s = %s", (uint8_t *)v32, 0x2Au);
    v43 = v152;
    swift_arrayDestroy(v152, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    if (a2)
      goto LABEL_5;
LABEL_16:
    dispatch_group_leave(a5);
    return;
  }
  sub_10000A7C0((uint64_t)v25, type metadata accessor for AppMetadata);

  swift_bridgeObjectRelease_n(a2, 2);
  if (!a2)
    goto LABEL_16;
LABEL_5:
  v162 = a5;
  v44 = v163;
  v45 = (uint64_t *)(a4 + v163[5]);
  v47 = *v45;
  v46 = v45[1];
  swift_beginAccess(a6 + 16, &v167, 32, 0);
  v48 = *(_QWORD *)(a6 + 16);
  v49 = *(_QWORD *)(v48 + 16);
  swift_bridgeObjectRetain(a2);
  if (v49)
  {
    swift_bridgeObjectRetain(v46);
    v50 = sub_10004D860(v47, v46);
    if ((v51 & 1) != 0)
    {
      v52 = *(_QWORD *)(v48 + 56) + 16 * v50;
      v53 = *(void **)v52;
      v153 = *(_QWORD *)(v52 + 8);
      swift_endAccess(&v167);
      v54 = a2;
      v55 = v53;
      swift_bridgeObjectRelease(v46);
      v56 = v160;
      swift_beginAccess(v160, &v167, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v56);
      v166[0] = *v56;
      *v56 = 0x8000000000000000;
      sub_10004E3E8((uint64_t)v164, v54, 0x6C616D726F6ELL, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
      v58 = *v56;
      *v56 = v166[0];
      swift_bridgeObjectRelease(v58);
      swift_endAccess(&v167);
      v161 = v55;
      if (a9)
      {
        v59 = HIBYTE(a9) & 0xF;
        if ((a9 & 0x2000000000000000) == 0)
          v59 = v159 & 0xFFFFFFFFFFFFLL;
        if (v59)
        {
          v60 = *v45;
          v61 = v45[1];
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(a9);
          v62 = sub_100032708(v60, v61);
          if ((v63 & 1) != 0)
            v64 = 0;
          else
            v64 = v62;
          v164 = (uint64_t *)v64;
          v65 = (uint64_t *)(a4 + v44[7]);
          v66 = *v65;
          v67 = v65[1];
          swift_bridgeObjectRetain(v67);
          v68 = objc_msgSend(v55, "playedAt");
          v69 = (uint64_t)v158;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v70 = (uint64_t *)(a4 + v44[6]);
          v71 = *v70;
          v72 = v70[1];
          v73 = v160;
          swift_beginAccess(v160, &v167, 0, 0);
          v74 = *v73;
          v75 = type metadata accessor for AppDisplayData(0);
          swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
          swift_bridgeObjectRetain(v72);
          swift_bridgeObjectRetain(v74);
          for (i = sub_10004C810((uint64_t)v164, v66, v67, v69, v71, v72, v74, 0, 0, v159, a9);
                ;
                i = sub_10004C810(v87, v99, v100, v102, v104, v105, v107, 0, 0, 0, 0))
          {
            v109 = i;
            v110 = (uint64_t *)(a11 + 16);
            v111 = *(_QWORD *)(a4 + v44[10]);
            v112 = objc_allocWithZone((Class)AMSMediaArtwork);
            swift_bridgeObjectRetain(v111);
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v111);
            v114 = objc_msgSend(v112, "initWithDictionary:", isa);

            v115 = (int *)AMSMediaArtworkColorKindBackground;
            v116 = objc_msgSend(v114, "colorWithKind:", AMSMediaArtworkColorKindBackground);
            v117 = v114;
            v118 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v116);

            v119 = OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor;
            v120 = *(void **)(v109 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
            *(_QWORD *)(v109 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor) = v118;

            v121 = *(void **)(v109 + v119);
            v55 = (id)OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor;
            v122 = *(void **)(v109 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
            *(_QWORD *)(v109 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor) = v121;
            v123 = v121;

            v124 = *(_QWORD *)(a4 + v44[11]);
            v125 = v162;
            if (!v124)
              goto LABEL_74;
            v160 = v55;
            v163 = v115;
            v164 = (uint64_t *)(a11 + 16);
            v126 = v154;
            a4 = (uint64_t)v155;
            v55 = (id)v157;
            v159 = *(_QWORD *)(v154 + 104);
            ((void (*)(char *, _QWORD, uint64_t))v159)(v155, enum case for WidgetFamily.systemLarge(_:), v157);
            v127 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
            swift_bridgeObjectRetain(v124);
            dispatch thunk of RawRepresentable.rawValue.getter(v166, v55, v127);
            dispatch thunk of RawRepresentable.rawValue.getter(&v165, v55, v127);
            v129 = v165;
            v128 = v166[0];
            v130 = *(void (**)(uint64_t, id))(v126 + 8);
            v130(a4, v55);
            v131 = *(void (**)(int *, uint64_t, id))(v126 + 16);
            v44 = v156;
            v131(v156, a10, v55);
            if (v128 == v129)
            {
              v130((uint64_t)v44, v55);
            }
            else
            {
              ((void (*)(uint64_t, _QWORD, id))v159)(a4, enum case for WidgetFamily.systemExtraLarge(_:), v55);
              dispatch thunk of RawRepresentable.rawValue.getter(v166, v55, v127);
              dispatch thunk of RawRepresentable.rawValue.getter(&v165, v55, v127);
              v133 = v165;
              v132 = v166[0];
              v130(a4, v55);
              v130((uint64_t)v44, v55);
              if (v132 != v133)
              {
                swift_bridgeObjectRelease(v124);
                goto LABEL_73;
              }
            }
            v134 = objc_allocWithZone((Class)AMSMediaArtwork);
            v135 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v124);
            v136 = objc_msgSend(v134, "initWithDictionary:", v135);

            v137 = objc_msgSend(v136, "colorWithKind:", v163);
            v138 = v136;
            v139 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v137);

            v140 = *(void **)((char *)v160 + v109);
            *(_QWORD *)((char *)v160 + v109) = v139;

LABEL_73:
            v125 = v162;
            v110 = v164;
LABEL_74:
            swift_beginAccess(v110, v166, 33, 0);
            v141 = *v110;
            swift_retain(v109);
            v142 = swift_isUniquelyReferenced_nonNull_native(v141);
            *v110 = v141;
            v143 = v161;
            if ((v142 & 1) != 0)
            {
              v144 = v153;
              if ((v153 & 0x8000000000000000) != 0)
                goto LABEL_85;
            }
            else
            {
              v141 = sub_1000362F0(v141);
              *v110 = v141;
              v144 = v153;
              if ((v153 & 0x8000000000000000) != 0)
              {
LABEL_85:
                __break(1u);
                goto LABEL_86;
              }
            }
            if (v144 < *(_QWORD *)(v141 + 16))
            {
              v145 = v141 + 8 * v144;
              v146 = *(_QWORD *)(v145 + 32);
              *(_QWORD *)(v145 + 32) = v109;
              v147 = swift_release(v146);
              specialized Array._endMutation()(v147);
              swift_endAccess(v166);
              dispatch_group_leave(v125);

              swift_release(v109);
              return;
            }
LABEL_86:
            __break(1u);
LABEL_87:
            v87 = 0;
LABEL_66:
            v98 = (uint64_t *)(a4 + v44[7]);
            v99 = *v98;
            v100 = v98[1];
            swift_bridgeObjectRetain(v100);
            v101 = objc_msgSend(v55, "playedAt");
            v102 = (uint64_t)v158;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v103 = (uint64_t *)(a4 + v44[6]);
            v104 = *v103;
            v105 = v103[1];
            v106 = v160;
            swift_beginAccess(v160, &v167, 0, 0);
            v107 = *v106;
            v108 = type metadata accessor for AppDisplayData(0);
            swift_allocObject(v108, *(unsigned int *)(v108 + 48), *(unsigned __int16 *)(v108 + 52));
            swift_bridgeObjectRetain(v105);
            swift_bridgeObjectRetain(v107);
          }
        }
      }
      v81 = *v45;
      v82 = v45[1];
      v83 = HIBYTE(v82) & 0xF;
      v84 = *v45 & 0xFFFFFFFFFFFFLL;
      if ((v82 & 0x2000000000000000) != 0)
        v85 = HIBYTE(v82) & 0xF;
      else
        v85 = *v45 & 0xFFFFFFFFFFFFLL;
      if (!v85)
        goto LABEL_87;
      if ((v82 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v45[1]);
        v87 = (uint64_t)sub_10003620C(v81, v82, 10);
        LOBYTE(v81) = v151;
        swift_bridgeObjectRelease(v82);
        goto LABEL_64;
      }
      if ((v82 & 0x2000000000000000) == 0)
      {
        if ((v81 & 0x1000000000000000) != 0)
          v86 = (unsigned __int8 *)((v82 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v86 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*v45, v45[1]);
        v87 = (uint64_t)sub_100036304(v86, v84, 10);
        LOBYTE(v81) = v88 & 1;
LABEL_64:
        if ((v81 & 1) != 0)
          v87 = 0;
        goto LABEL_66;
      }
      v167 = *v45;
      v168[0] = v82 & 0xFFFFFFFFFFFFFFLL;
      if (v81 == 43)
      {
        if (!v83)
        {
LABEL_91:
          __break(1u);
          return;
        }
        if (v83 == 1 || (BYTE1(v81) - 48) > 9u)
          goto LABEL_51;
        v87 = (BYTE1(v81) - 48);
        if (v83 != 2)
        {
          if ((BYTE2(v81) - 48) > 9u)
            goto LABEL_51;
          v87 = 10 * (BYTE1(v81) - 48) + (BYTE2(v81) - 48);
          v89 = v83 - 3;
          if (v89)
          {
            v90 = (unsigned __int8 *)&v167 + 3;
            while (1)
            {
              v91 = *v90 - 48;
              if (v91 > 9)
                goto LABEL_51;
              v92 = 10 * v87;
              if ((unsigned __int128)(v87 * (__int128)10) >> 64 != (10 * v87) >> 63)
                goto LABEL_51;
              v87 = v92 + v91;
              if (__OFADD__(v92, v91))
                goto LABEL_51;
              LOBYTE(v81) = 0;
              ++v90;
              if (!--v89)
                goto LABEL_64;
            }
          }
        }
      }
      else
      {
        if (v81 == 45)
        {
          if (v83)
          {
            if (v83 != 1 && (BYTE1(v81) - 48) <= 9u)
            {
              if (v83 == 2)
              {
                LOBYTE(v81) = 0;
                v87 = -(uint64_t)(BYTE1(v81) - 48);
                goto LABEL_64;
              }
              if ((BYTE2(v81) - 48) <= 9u)
              {
                v87 = -10 * (BYTE1(v81) - 48) - (BYTE2(v81) - 48);
                v97 = v83 - 3;
                if (!v97)
                  goto LABEL_63;
                v148 = (unsigned __int8 *)&v167 + 3;
                while (1)
                {
                  v149 = *v148 - 48;
                  if (v149 > 9)
                    break;
                  v150 = 10 * v87;
                  if ((unsigned __int128)(v87 * (__int128)10) >> 64 != (10 * v87) >> 63)
                    break;
                  v87 = v150 - v149;
                  if (__OFSUB__(v150, v149))
                    break;
                  LOBYTE(v81) = 0;
                  ++v148;
                  if (!--v97)
                    goto LABEL_64;
                }
              }
            }
LABEL_51:
            v87 = 0;
            LOBYTE(v81) = 1;
            goto LABEL_64;
          }
          __break(1u);
          goto LABEL_91;
        }
        if (!v83 || (v81 - 48) > 9u)
          goto LABEL_51;
        v87 = (v81 - 48);
        if (v83 != 1)
        {
          if ((BYTE1(v81) - 48) > 9u)
            goto LABEL_51;
          v87 = 10 * (v81 - 48) + (BYTE1(v81) - 48);
          v93 = v83 - 2;
          if (v93)
          {
            v94 = (unsigned __int8 *)&v167 + 2;
            while (1)
            {
              v95 = *v94 - 48;
              if (v95 > 9)
                goto LABEL_51;
              v96 = 10 * v87;
              if ((unsigned __int128)(v87 * (__int128)10) >> 64 != (10 * v87) >> 63)
                goto LABEL_51;
              v87 = v96 + v95;
              if (__OFADD__(v96, v95))
                goto LABEL_51;
              LOBYTE(v81) = 0;
              ++v94;
              if (!--v93)
                goto LABEL_64;
            }
          }
        }
      }
LABEL_63:
      LOBYTE(v81) = 0;
      goto LABEL_64;
    }
    swift_bridgeObjectRelease(v46);
  }
  swift_endAccess(&v167);
  v77 = swift_bridgeObjectRelease(a2);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "unable to find tuple", v80, 2u);
    swift_slowDealloc(v80, -1, -1);
  }

  dispatch_group_leave(v162);
}

uint64_t sub_100032708(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_100036304(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_10003620C(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_100032954(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD *, uint64_t);
  char *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69[3];
  char v70[32];

  v64 = a5;
  v65 = a4;
  v62 = a3;
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v70, 0, 0);
  v11 = *(_QWORD *)(a1 + 16);
  v69[0] = (uint64_t)_swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain_n(v11, 2);
    for (i = 0; i != v12; ++i)
    {
      v15 = v11 + 8 * i;
      v16 = *(_QWORD *)(v15 + 32);
      if (v16)
      {
        v17 = swift_retain(*(_QWORD *)(v15 + 32));
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v19 = *(_QWORD *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v18 = *(_QWORD *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v19 >= v18 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
        specialized Array._endMutation()(v14);
      }
    }
    swift_bridgeObjectRelease(v11);
    v20 = (_QWORD *)v69[0];
  }
  else
  {
    swift_bridgeObjectRetain(v11);
    v20 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v21 == enum case for WidgetFamily.systemSmall(_:))
  {
    v22 = 1;
  }
  else if (v21 == enum case for WidgetFamily.systemMedium(_:))
  {
    v22 = 3;
  }
  else if (v21 == enum case for WidgetFamily.systemLarge(_:))
  {
    v22 = 4;
  }
  else
  {
    if (v21 != enum case for WidgetFamily.systemExtraLarge(_:))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v22 = 7;
  }
  v23 = sub_100011A3C(v22, (unint64_t)v20);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  swift_bridgeObjectRelease(v20);
  v31 = v29 >> 1;
  v32 = (v29 >> 1) - v27;
  if (v29 >> 1 == v27)
    goto LABEL_28;
  if ((uint64_t)(v29 >> 1) <= v27)
    goto LABEL_43;
  v58 = v29 >> 1;
  v63 = v27;
  v60 = v29;
  v61 = v23;
  v33 = qword_1000906F8;
  swift_unknownObjectRetain(v23, v30);
  if (v33 != -1)
    goto LABEL_44;
  while (1)
  {
    v34 = type metadata accessor for Logger(0);
    v59 = v25;
    v35 = (uint64_t *)(v25 + 8 * v63);
    *(_QWORD *)&v36 = 136315138;
    v67 = v36;
    v66 = (char *)&type metadata for Any + 8;
    v68 = v34;
    do
    {
      v37 = *v35;
      sub_10000A720(v34, (uint64_t)qword_1000959D8);
      v38 = swift_retain_n(v37, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v69[0] = v42;
        *(_DWORD *)v41 = v67;
        swift_retain(v37);
        v43 = sub_10004D614();
        v45 = v44;
        swift_release(v37);
        *(_QWORD *)(v41 + 4) = sub_1000155A4(v43, v45, v69);
        swift_release_n(v37, 2);
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "compactedAppDisplayData: %s", (uint8_t *)v41, 0xCu);
        swift_arrayDestroy(v42, 1, v66);
        v46 = v42;
        v34 = v68;
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_release_n(v37, 2);
      }
      ++v35;
      --v32;
    }
    while (v32);
    v23 = v61;
    swift_unknownObjectRelease(v61);
    v25 = v59;
    v29 = v60;
    v27 = v63;
    v31 = v58;
LABEL_28:
    v47 = v31 - v27;
    if (!__OFSUB__(v31, v27))
      break;
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_once(&qword_1000906F8, sub_100029CC4);
  }
  if (v47 || (v50 = v62 + 16, swift_beginAccess(v62 + 16, v69, 0, 0), !*(_QWORD *)(*(_QWORD *)v50 + 16)))
  {
    v48 = 0;
    if ((v29 & 1) != 0)
      goto LABEL_35;
LABEL_31:
    swift_unknownObjectRetain(v23, v30);
LABEL_32:
    v49 = sub_1000105EC(v23, v25, v27, v29);
    goto LABEL_39;
  }
  v48 = 1;
  if ((v29 & 1) == 0)
    goto LABEL_31;
LABEL_35:
  v51 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v52 = swift_unknownObjectRetain_n(v23, 3);
  v53 = (_QWORD *)swift_dynamicCastClass(v52, v51);
  if (!v53)
  {
    swift_unknownObjectRelease(v23);
    v53 = _swiftEmptyArrayStorage;
  }
  v54 = v53[2];
  swift_release(v53);
  if (v54 != v47)
  {
    swift_unknownObjectRelease(v23);
    goto LABEL_32;
  }
  v49 = (_QWORD *)swift_dynamicCastClass(v23, v51);
  if (!v49)
  {
    swift_unknownObjectRelease(v23);
    v55 = _swiftEmptyArrayStorage;
    goto LABEL_40;
  }
LABEL_39:
  v55 = v49;
LABEL_40:
  swift_unknownObjectRelease(v23);
  v65(v55, v48);
  swift_release(v55);
  return swift_unknownObjectRelease(v23);
}

uint64_t sub_100032E48(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100032E74(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  NSString v47;
  id v48;
  id v49;
  id v50;
  NSString v51;
  NSString v52;
  id v53;
  Class isa;
  unint64_t v55;
  Class v56;
  id v57;
  id v58;
  NSObject *v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  _BOOL4 v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  id v75;
  id v76;
  void *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE v128[12];
  int v129;
  void *v130;
  id v131;
  void *v132;
  os_log_t v133;
  NSObject *v134;
  _BYTE *v135;
  uint64_t v136;
  void (*v137)(_QWORD);
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;

  v136 = a3;
  v5 = sub_100006454(&qword_100091C58);
  __chkstk_darwin(v5);
  v7 = &v128[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v144 = type metadata accessor for AppMetadata(0);
  v8 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v138 = &v128[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v139 = &v128[-v11];
  __chkstk_darwin(v12);
  v14 = &v128[-v13];
  __chkstk_darwin(v15);
  v141 = &v128[-v16];
  __chkstk_darwin(v17);
  v140 = &v128[-v18];
  if (qword_100090700 != -1)
    swift_once(&qword_100090700, sub_100029CE0);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000A720(v19, (uint64_t)qword_1000959F0);
  v21 = ((uint64_t (*)(uint64_t, uint64_t))swift_bridgeObjectRetain_n)(a1, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  v143 = v20;
  v137 = a2;
  v135 = v14;
  if (v24)
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = (void *)swift_slowAlloc(64, -1);
    v147 = v26;
    *(_DWORD *)v25 = 136315394;
    v27 = swift_bridgeObjectRetain(a1);
    v28 = Array.description.getter(v27, &type metadata for String);
    v29 = a1;
    v31 = v30;
    swift_bridgeObjectRelease(v29);
    v145 = sub_1000155A4(v28, v31, (uint64_t *)&v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
    swift_bridgeObjectRelease_n(v29, 2);
    v32 = swift_bridgeObjectRelease(v31);
    *(_WORD *)(v25 + 12) = 2080;
    v33 = String.init<A>(describing:)(v32, &type metadata for CacheType);
    v35 = v34;
    v145 = sub_1000155A4(v33, v34, (uint64_t *)&v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fetching app metadatas for %s, cacheType: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v36 = v25;
    a2 = v137;
    swift_slowDealloc(v36, -1, -1);

    if (*(_QWORD *)(v29 + 16))
      goto LABEL_5;
LABEL_10:
    a2(_swiftEmptyArrayStorage);
    return;
  }

  swift_bridgeObjectRelease_n(a1, 2);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_10;
LABEL_5:
  v37 = (void *)objc_opt_self(AMSMediaTask);
  v38 = objc_msgSend(v37, "bagSubProfile");
  if (v38)
  {
    v39 = v38;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v42 = objc_msgSend(v37, "bagSubProfileVersion");
    if (v42)
    {
      v43 = v42;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41);
      v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45);
      v48 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v46, v47);

      v49 = objc_allocWithZone((Class)AMSMediaTask);
      v50 = v48;
      v132 = (void *)0x8000000100074060;
      v51 = String._bridgeToObjectiveC()();
      v52 = String._bridgeToObjectiveC()();
      v53 = objc_msgSend(v49, "initWithType:clientIdentifier:clientVersion:bag:", 0, v51, v52, v50);

      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v53, "setItemIdentifiers:", isa);

      v55 = sub_10004C244((uint64_t)&off_10008D800);
      v56 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v55);
      objc_msgSend(v53, "setAdditionalQueryParams:", v56);

      v57 = v50;
      v58 = v53;
      v59 = v57;
      v60 = v58;
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.default.getter();
      v63 = v62;
      v133 = v61;
      v64 = os_log_type_enabled(v61, v62);
      v134 = v59;
      if (v64)
      {
        v65 = swift_slowAlloc(32, -1);
        v66 = (_QWORD *)swift_slowAlloc(16, -1);
        v130 = (void *)swift_slowAlloc(32, -1);
        v147 = v130;
        *(_DWORD *)v65 = 138412802;
        v145 = (uint64_t)v60;
        v67 = v60;
        v129 = v63;
        v68 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
        *v66 = v60;

        *(_WORD *)(v65 + 12) = 2112;
        v145 = (uint64_t)v59;
        v69 = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
        v66[1] = v59;

        *(_WORD *)(v65 + 22) = 2080;
        v145 = sub_1000155A4(0xD00000000000002CLL, (unint64_t)v132, (uint64_t *)&v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
        v70 = v133;
        _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v129, "Task %@, Bag %@, CID %s", (uint8_t *)v65, 0x20u);
        v71 = sub_100006454(&qword_100091C00);
        swift_arrayDestroy(v66, 2, v71);
        swift_slowDealloc(v66, -1, -1);
        v72 = v130;
        swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v65, -1, -1);

      }
      else
      {

      }
      v73 = (uint64_t)v135;
      v74 = objc_msgSend(v60, "perform");
      v147 = 0;
      v133 = v74;
      v75 = -[NSObject resultWithError:](v74, "resultWithError:", &v147);
      v76 = v147;
      if (!v75)
      {
        v94 = v147;
        v95 = _convertNSErrorToError(_:)(v76);

        swift_willThrow();
        swift_errorRetain(v95);
        v96 = swift_errorRetain(v95);
        v97 = Logger.logObject.getter(v96);
        v98 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc(12, -1);
          v100 = (void *)swift_slowAlloc(32, -1);
          v147 = v100;
          *(_DWORD *)v99 = 136315138;
          v145 = v95;
          swift_errorRetain(v95);
          v101 = sub_100006454(&qword_100090BD0);
          v102 = String.init<A>(describing:)(&v145, v101);
          v104 = v103;
          v145 = sub_1000155A4(v102, v103, (uint64_t *)&v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146);
          swift_bridgeObjectRelease(v104);
          swift_errorRelease(v95);
          swift_errorRelease(v95);
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "AMSMediaTask Error in fetchAppMetadatas: %s", v99, 0xCu);
          swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1, -1);
          swift_slowDealloc(v99, -1, -1);
        }
        else
        {
          swift_errorRelease(v95);
          swift_errorRelease(v95);
        }

        v107 = v134;
        v137(_swiftEmptyArrayStorage);
        swift_errorRelease(v95);

        v108 = v133;
        goto LABEL_42;
      }
      v77 = v75;
      v78 = Logger.logObject.getter(v147);
      v79 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v80 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Received data response. Creating app metadatas.", v80, 2u);
        swift_slowDealloc(v80, -1, -1);
      }

      v81 = objc_msgSend(v77, "responseDataItems");
      v131 = v60;
      v132 = v77;
      if (v81)
      {
        v82 = v81;
        v83 = sub_100006454(&qword_100091C68);
        v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v82, v83);

        v85 = *(_QWORD *)(v84 + 16);
        v130 = (void *)v84;
        if (v85)
        {
          v86 = (_QWORD *)(v84 + 32);
          v87 = _swiftEmptyArrayStorage;
          do
          {
            v88 = *v86;
            v89 = swift_bridgeObjectRetain(*v86);
            sub_100033C1C(v89, (uint64_t)v7);
            swift_bridgeObjectRelease(v88);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v144) == 1)
            {
              sub_100007928((uint64_t)v7, &qword_100091C58);
            }
            else
            {
              v90 = v140;
              sub_100007AB0((uint64_t)v7, (uint64_t)v140, type metadata accessor for AppMetadata);
              sub_100007AF4((uint64_t)v90, (uint64_t)v141, type metadata accessor for AppMetadata);
              if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) != 0)
                v91 = (unint64_t)v87;
              else
                v91 = sub_10000F1BC(0, v87[2] + 1, 1, (unint64_t)v87);
              v93 = *(_QWORD *)(v91 + 16);
              v92 = *(_QWORD *)(v91 + 24);
              if (v93 >= v92 >> 1)
                v91 = sub_10000F1BC(v92 > 1, v93 + 1, 1, v91);
              *(_QWORD *)(v91 + 16) = v93 + 1;
              v87 = (_QWORD *)v91;
              sub_100007AB0((uint64_t)v141, v91+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v93, type metadata accessor for AppMetadata);
              sub_10000A7C0((uint64_t)v140, type metadata accessor for AppMetadata);
            }
            ++v86;
            --v85;
          }
          while (v85);
        }
        else
        {
          v87 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease(v130);
        v77 = v132;
        v105 = v87;
        v106 = v87[2];
        if (!v106)
          goto LABEL_41;
      }
      else
      {
        v105 = _swiftEmptyArrayStorage;
        v106 = _swiftEmptyArrayStorage[2];
        if (!v106)
        {
LABEL_41:
          v127 = v105;
          ((void (*)(void))v137)();
          swift_bridgeObjectRelease(v127);

          v108 = v134;
LABEL_42:

          return;
        }
      }
      v109 = (uint64_t)&v105[(*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)];
      v110 = *(_QWORD *)(v8 + 72);
      v140 = v105;
      v111 = swift_bridgeObjectRetain_n(v105, 2);
      v111.n128_u64[0] = 136315138;
      v142 = v111;
      v141 = (char *)&type metadata for Any + 8;
      v112 = (uint64_t)v139;
      do
      {
        sub_100007AF4(v109, v73, type metadata accessor for AppMetadata);
        v113 = sub_100007AF4(v73, v112, type metadata accessor for AppMetadata);
        v114 = Logger.logObject.getter(v113);
        v115 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v114, v115))
        {
          v116 = v73;
          v117 = swift_slowAlloc(12, -1);
          v118 = (void *)swift_slowAlloc(32, -1);
          v147 = v118;
          *(_DWORD *)v117 = v142.n128_u32[0];
          v119 = v112;
          v120 = v138;
          sub_100007AF4(v119, (uint64_t)v138, type metadata accessor for AppMetadata);
          v121 = String.init<A>(describing:)(v120, v144);
          v123 = v122;
          *(_QWORD *)(v117 + 4) = sub_1000155A4(v121, v122, (uint64_t *)&v147);
          v124 = v123;
          v112 = (uint64_t)v139;
          swift_bridgeObjectRelease(v124);
          sub_10000A7C0(v112, type metadata accessor for AppMetadata);
          _os_log_impl((void *)&_mh_execute_header, v114, v115, "Received metadata: %s", (uint8_t *)v117, 0xCu);
          swift_arrayDestroy(v118, 1, v141);
          swift_slowDealloc(v118, -1, -1);
          v125 = v117;
          v73 = v116;
          swift_slowDealloc(v125, -1, -1);
        }
        else
        {
          sub_10000A7C0(v112, type metadata accessor for AppMetadata);
        }

        sub_10000A7C0(v73, type metadata accessor for AppMetadata);
        v109 += v110;
        --v106;
      }
      while (v106);
      v126 = v140;
      swift_bridgeObjectRelease_n(v140, 2);
      v105 = v126;
      v77 = v132;
      goto LABEL_41;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100033B84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_100011E4C(0, &qword_100090D20, GKGameSummaryInternal_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v7);
  swift_retain(v5);
  v9 = a3;
  v6(v8, a3);
  swift_release(v5);
  swift_bridgeObjectRelease(v8);

}

uint64_t sub_100033C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  unint64_t v22;
  char v23;
  int v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  NSObject *v75;
  unint64_t v76;
  char v77;
  int v78;
  NSObject *v79;
  unint64_t v80;
  char v81;
  int v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int64_t v99;
  unint64_t v100;
  int64_t v101;
  os_log_t v102;
  uint64_t v103;
  char v106;
  NSObject *v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  NSObject *loga;
  os_log_t log;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  int v121;
  os_log_type_t type;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  _OWORD v129[2];
  __int128 v130;
  _OWORD v131[2];
  uint64_t v132;
  os_log_t v133;
  __int128 v134;

  *(_QWORD *)&v130 = 25705;
  *((_QWORD *)&v130 + 1) = 0xE200000000000000;
  AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v3 = sub_10004D8C4((uint64_t)&v132), (v4 & 1) != 0))
  {
    sub_100015CA4(*(_QWORD *)(a1 + 56) + 32 * v3, (uint64_t)&v130);
  }
  else
  {
    v130 = 0u;
    v131[0] = 0u;
  }
  sub_10003BBC4((uint64_t)&v132);
  if (!*((_QWORD *)&v131[0] + 1))
  {
    sub_100007928((uint64_t)&v130, &qword_100091C70);
    goto LABEL_9;
  }
  if ((swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_9:
    v5 = 0;
    v127 = 0;
    goto LABEL_10;
  }
  v127 = *((_QWORD *)&v129[0] + 1);
  v5 = *(_QWORD *)&v129[0];
LABEL_10:
  *(_QWORD *)&v129[0] = 0x7475626972747461;
  *((_QWORD *)&v129[0] + 1) = 0xEA00000000007365;
  AnyHashable.init<A>(_:)(&v132, v129, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v6 = sub_10004D8C4((uint64_t)&v132), (v7 & 1) != 0))
  {
    sub_100015CA4(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v130);
  }
  else
  {
    v130 = 0u;
    v131[0] = 0u;
  }
  sub_10003BBC4((uint64_t)&v132);
  v124 = v5;
  if (*((_QWORD *)&v131[0] + 1))
  {
    v8 = sub_100006454(&qword_100091C68);
    result = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, v8, 6);
    if ((result & 1) != 0)
    {
      v10 = *(_QWORD *)&v129[0];
      strcpy((char *)&v130, "supportsArcade");
      HIBYTE(v130) = -18;
      AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v10 + 16) && (v11 = sub_10004D8C4((uint64_t)&v132), (v12 & 1) != 0))
      {
        sub_100015CA4(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v130);
      }
      else
      {
        v130 = 0u;
        v131[0] = 0u;
      }
      sub_10003BBC4((uint64_t)&v132);
      if (*((_QWORD *)&v131[0] + 1))
      {
        if (swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))v21 = LOBYTE(v129[0]);
        else
          v21 = 2;
      }
      else
      {
        sub_100007928((uint64_t)&v130, &qword_100091C70);
        v21 = 2;
      }
      *(_QWORD *)&v130 = 1701667182;
      *((_QWORD *)&v130 + 1) = 0xE400000000000000;
      AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v10 + 16) && (v22 = sub_10004D8C4((uint64_t)&v132), (v23 & 1) != 0))
      {
        sub_100015CA4(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)&v130);
      }
      else
      {
        v130 = 0u;
        v131[0] = 0u;
      }
      sub_10003BBC4((uint64_t)&v132);
      if (*((_QWORD *)&v131[0] + 1))
      {
        v24 = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        if (v24)
          v13 = *(_QWORD *)&v129[0];
        else
          v13 = 0;
        if (v24)
          v14 = *((_QWORD *)&v129[0] + 1);
        else
          v14 = 0;
      }
      else
      {
        sub_100007928((uint64_t)&v130, &qword_100091C70);
        v13 = 0;
        v14 = 0;
      }
      *(_QWORD *)&v129[0] = 0xD000000000000012;
      *((_QWORD *)&v129[0] + 1) = 0x8000000100074090;
      AnyHashable.init<A>(_:)(&v132, v129, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v10 + 16) && (v25 = sub_10004D8C4((uint64_t)&v132), (v26 & 1) != 0))
      {
        sub_100015CA4(*(_QWORD *)(v10 + 56) + 32 * v25, (uint64_t)&v130);
      }
      else
      {
        v130 = 0u;
        v131[0] = 0u;
      }
      swift_bridgeObjectRelease(v10);
      sub_10003BBC4((uint64_t)&v132);
      if (*((_QWORD *)&v131[0] + 1))
      {
        result = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, v8, 6);
        if ((result & 1) == 0)
        {
LABEL_55:
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          goto LABEL_56;
        }
        v27 = *(_QWORD *)&v129[0];
        *(_QWORD *)&v129[0] = 7565161;
        *((_QWORD *)&v129[0] + 1) = 0xE300000000000000;
        AnyHashable.init<A>(_:)(&v132, v129, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v27 + 16) && (v28 = sub_10004D8C4((uint64_t)&v132), (v29 & 1) != 0))
        {
          sub_100015CA4(*(_QWORD *)(v27 + 56) + 32 * v28, (uint64_t)&v130);
        }
        else
        {
          v130 = 0u;
          v131[0] = 0u;
        }
        swift_bridgeObjectRelease(v27);
        sub_10003BBC4((uint64_t)&v132);
        if (*((_QWORD *)&v131[0] + 1))
        {
          result = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, v8, 6);
          if ((result & 1) != 0)
          {
            v30 = *(_QWORD *)&v129[0];
            *(_QWORD *)&v130 = 0x6D614E74726F6873;
            *((_QWORD *)&v130 + 1) = 0xE900000000000065;
            AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v30 + 16) && (v31 = sub_10004D8C4((uint64_t)&v132), (v32 & 1) != 0))
            {
              sub_100015CA4(*(_QWORD *)(v30 + 56) + 32 * v31, (uint64_t)&v130);
            }
            else
            {
              v130 = 0u;
              v131[0] = 0u;
            }
            sub_10003BBC4((uint64_t)&v132);
            if (*((_QWORD *)&v131[0] + 1))
            {
              v73 = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6);
              v74 = *(_QWORD *)&v129[0];
              if (!v73)
                v74 = 0;
              v111 = v74;
              if (v73)
                v75 = *((_QWORD *)&v129[0] + 1);
              else
                v75 = 0;
              v113 = v75;
            }
            else
            {
              sub_100007928((uint64_t)&v130, &qword_100091C70);
              v111 = 0;
              v113 = 0;
            }
            *(_QWORD *)&v130 = 0x656C746974627573;
            *((_QWORD *)&v130 + 1) = 0xE800000000000000;
            AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v30 + 16) && (v76 = sub_10004D8C4((uint64_t)&v132), (v77 & 1) != 0))
            {
              sub_100015CA4(*(_QWORD *)(v30 + 56) + 32 * v76, (uint64_t)&v130);
            }
            else
            {
              v130 = 0u;
              v131[0] = 0u;
            }
            sub_10003BBC4((uint64_t)&v132);
            if (*((_QWORD *)&v131[0] + 1))
            {
              v78 = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6);
              if (v78)
                v17 = *(_QWORD *)&v129[0];
              else
                v17 = 0;
              if (v78)
                v79 = *((_QWORD *)&v129[0] + 1);
              else
                v79 = 0;
              log = v79;
            }
            else
            {
              sub_100007928((uint64_t)&v130, &qword_100091C70);
              v17 = 0;
              log = 0;
            }
            *(_QWORD *)&v130 = 0x6449656C646E7562;
            *((_QWORD *)&v130 + 1) = 0xE800000000000000;
            AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v30 + 16) && (v80 = sub_10004D8C4((uint64_t)&v132), (v81 & 1) != 0))
            {
              sub_100015CA4(*(_QWORD *)(v30 + 56) + 32 * v80, (uint64_t)&v130);
            }
            else
            {
              v130 = 0u;
              v131[0] = 0u;
            }
            sub_10003BBC4((uint64_t)&v132);
            if (*((_QWORD *)&v131[0] + 1))
            {
              v82 = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6);
              if (v82)
                v19 = *(_QWORD *)&v129[0];
              else
                v19 = 0;
              if (v82)
                v20 = *((_QWORD *)&v129[0] + 1);
              else
                v20 = 0;
            }
            else
            {
              sub_100007928((uint64_t)&v130, &qword_100091C70);
              v19 = 0;
              v20 = 0;
            }
            *(_QWORD *)&v130 = 0x6B726F77747261;
            *((_QWORD *)&v130 + 1) = 0xE700000000000000;
            AnyHashable.init<A>(_:)(&v132, &v130, &type metadata for String, &protocol witness table for String);
            if (*(_QWORD *)(v30 + 16) && (v83 = sub_10004D8C4((uint64_t)&v132), (v84 & 1) != 0))
            {
              sub_100015CA4(*(_QWORD *)(v30 + 56) + 32 * v83, (uint64_t)&v130);
            }
            else
            {
              v130 = 0u;
              v131[0] = 0u;
            }
            sub_10003BBC4((uint64_t)&v132);
            if (*((_QWORD *)&v131[0] + 1))
            {
              if ((swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
              {
                v112 = *(_QWORD *)&v129[0];
LABEL_111:
                if (v21 == 2)
                {
                  result = swift_bridgeObjectRelease(v30);
LABEL_157:
                  v15 = 0;
                  goto LABEL_158;
                }
                *(_QWORD *)&v129[0] = 0xD000000000000010;
                *((_QWORD *)&v129[0] + 1) = 0x80000001000740B0;
                AnyHashable.init<A>(_:)(&v132, v129, &type metadata for String, &protocol witness table for String);
                if (*(_QWORD *)(v30 + 16) && (v85 = sub_10004D8C4((uint64_t)&v132), (v86 & 1) != 0))
                {
                  sub_100015CA4(*(_QWORD *)(v30 + 56) + 32 * v85, (uint64_t)&v130);
                }
                else
                {
                  v130 = 0u;
                  v131[0] = 0u;
                }
                swift_bridgeObjectRelease(v30);
                sub_10003BBC4((uint64_t)&v132);
                if (!*((_QWORD *)&v131[0] + 1))
                {
                  result = sub_100007928((uint64_t)&v130, &qword_100091C70);
                  goto LABEL_157;
                }
                v119 = v13;
                v109 = v14;
                v87 = sub_100006454(&qword_100091C88);
                result = swift_dynamicCast(v129, &v130, (char *)&type metadata for Any + 8, v87, 6);
                if ((result & 1) == 0)
                {
                  v15 = 0;
LABEL_158:
                  v16 = v112;
                  v18 = log;
                  if (v113)
                  {
                    v107 = v14;
                    v14 = v113;
                    result = swift_bridgeObjectRelease(v107);
                    v13 = v111;
                  }
                  goto LABEL_56;
                }
                v121 = v21;
                v88 = 0;
                v89 = *(_QWORD *)&v129[0];
                v110 = *(_QWORD *)&v129[0] + 64;
                v90 = 1 << *(_BYTE *)(*(_QWORD *)&v129[0] + 32);
                v91 = -1;
                if (v90 < 64)
                  v91 = ~(-1 << v90);
                v92 = v91 & *(_QWORD *)(*(_QWORD *)&v129[0] + 64);
                v117 = (unint64_t)(v90 + 63) >> 6;
                v118 = v17;
                v108 = *(_QWORD *)&v129[0] + 104;
                v93 = 0;
                while (!v92)
                {
                  v99 = v88 + 1;
                  if (__OFADD__(v88, 1))
                  {
                    __break(1u);
                    return result;
                  }
                  if (v99 >= v117)
                  {
                    v101 = v88;
                  }
                  else
                  {
                    v100 = *(_QWORD *)(v110 + 8 * v99);
                    if (v100)
                      goto LABEL_128;
                    v101 = v88 + 1;
                    if (v88 + 2 < v117)
                    {
                      v100 = *(_QWORD *)(v110 + 8 * (v88 + 2));
                      if (v100)
                      {
                        v99 = v88 + 2;
                        goto LABEL_128;
                      }
                      v101 = v88 + 2;
                      if (v88 + 3 < v117)
                      {
                        v100 = *(_QWORD *)(v110 + 8 * (v88 + 3));
                        if (v100)
                        {
                          v99 = v88 + 3;
LABEL_128:
                          v92 = (v100 - 1) & v100;
                          v95 = __clz(__rbit64(v100)) + (v99 << 6);
                          v88 = v99;
LABEL_124:
                          v96 = *(_QWORD *)(v89 + 56);
                          v97 = (_QWORD *)(*(_QWORD *)(v89 + 48) + 16 * v95);
                          v98 = v97[1];
                          *(_QWORD *)&v130 = *v97;
                          *((_QWORD *)&v130 + 1) = v98;
                          sub_100015CA4(v96 + 32 * v95, (uint64_t)v131);
                          swift_bridgeObjectRetain(v98);
                          goto LABEL_131;
                        }
                        v99 = v88 + 4;
                        v101 = v88 + 3;
                        if (v88 + 4 < v117)
                        {
                          v100 = *(_QWORD *)(v110 + 8 * v99);
                          if (v100)
                            goto LABEL_128;
                          while (v117 - 5 != v88)
                          {
                            v100 = *(_QWORD *)(v108 + 8 * v88++);
                            if (v100)
                            {
                              v99 = v88 + 4;
                              goto LABEL_128;
                            }
                          }
                          v101 = v117 - 1;
                        }
                      }
                    }
                  }
                  v92 = 0;
                  memset(v131, 0, sizeof(v131));
                  v88 = v101;
                  v130 = 0u;
LABEL_131:
                  sub_10003BD24((uint64_t)&v130, (uint64_t)&v132);
                  v102 = v133;
                  if (!v133)
                  {
                    v15 = v93;
                    result = swift_release(v89);
                    v21 = v121;
                    v14 = v109;
                    v17 = v118;
                    v13 = v119;
                    goto LABEL_158;
                  }
                  v103 = v132;
                  sub_10003BD6C(&v134, &v130);
                  if (v103 == 0xD000000000000010 && v102 == (os_log_t)0x80000001000740D0)
                  {
                    swift_bridgeObjectRelease(0x80000001000740D0);
                    goto LABEL_145;
                  }
                  v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v103, v102, 0xD000000000000010, 0x80000001000740D0, 0);
                  swift_bridgeObjectRelease(v102);
                  if ((v106 & 1) != 0)
                  {
LABEL_145:
                    sub_10003BD6C(&v130, v129);
                    result = swift_dynamicCast(&v128, v129, (char *)&type metadata for Any + 8, v8, 6);
                    if ((_DWORD)result)
                    {
                      result = swift_bridgeObjectRelease(v93);
                      v93 = v128;
                    }
                  }
                  else
                  {
                    result = sub_100015C84(&v130);
                  }
                }
                v94 = __clz(__rbit64(v92));
                v92 &= v92 - 1;
                v95 = v94 | (v88 << 6);
                goto LABEL_124;
              }
            }
            else
            {
              sub_100007928((uint64_t)&v130, &qword_100091C70);
            }
            v112 = 0;
            goto LABEL_111;
          }
          goto LABEL_55;
        }
      }
      result = sub_100007928((uint64_t)&v130, &qword_100091C70);
      goto LABEL_55;
    }
  }
  else
  {
    result = sub_100007928((uint64_t)&v130, &qword_100091C70);
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 2;
LABEL_56:
  if (v127 && v20 && v14 && v21 != 2 && v16)
  {
    Date.init()(result);
    v33 = (int *)type metadata accessor for AppMetadata(0);
    v34 = (uint64_t *)(a2 + v33[5]);
    *v34 = v124;
    v34[1] = v127;
    v35 = (uint64_t *)(a2 + v33[6]);
    *v35 = v19;
    v35[1] = (uint64_t)v20;
    v36 = (uint64_t *)(a2 + v33[7]);
    *v36 = v13;
    v36[1] = (uint64_t)v14;
    v37 = (uint64_t *)(a2 + v33[8]);
    *v37 = v17;
    v37[1] = (uint64_t)v18;
    *(_BYTE *)(a2 + v33[9]) = v21 & 1;
    *(_QWORD *)(a2 + v33[10]) = v16;
    *(_QWORD *)(a2 + v33[11]) = v15;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v33 - 1) + 56))(a2, 0, 1, v33);
  }
  else
  {
    v123 = v19;
    v38 = v21;
    v39 = v20;
    v40 = v13;
    v41 = v16;
    if (qword_100090700 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v42 = type metadata accessor for Logger(0);
    sub_10000A720(v42, (uint64_t)qword_1000959F0);
    v125 = v15;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v127);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v18);
    v43 = swift_bridgeObjectRetain(v16);
    v44 = Logger.logObject.getter(v43);
    type = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, type))
    {
      loga = v44;
      v45 = v18;
      v46 = swift_slowAlloc(72, -1);
      v116 = swift_slowAlloc(224, -1);
      *(_QWORD *)&v130 = v116;
      *(_DWORD *)v46 = 136316674;
      v120 = v38;
      v132 = v124;
      v133 = (os_log_t)v127;
      swift_bridgeObjectRetain(v127);
      v47 = v14;
      v48 = sub_100006454(&qword_100091C50);
      v49 = String.init<A>(describing:)(&v132, v48);
      v51 = v50;
      v132 = sub_1000155A4(v49, v50, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease_n(v127, 2);
      swift_bridgeObjectRelease(v51);
      *(_WORD *)(v46 + 12) = 2080;
      v132 = v123;
      v133 = v39;
      swift_bridgeObjectRetain(v39);
      v52 = String.init<A>(describing:)(&v132, v48);
      v54 = v53;
      v132 = sub_1000155A4(v52, v53, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease_n(v39, 2);
      swift_bridgeObjectRelease(v54);
      *(_WORD *)(v46 + 22) = 2080;
      v132 = v40;
      v133 = v47;
      swift_bridgeObjectRetain(v47);
      v55 = String.init<A>(describing:)(&v132, v48);
      v57 = v56;
      v132 = sub_1000155A4(v55, v56, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease_n(v47, 2);
      swift_bridgeObjectRelease(v57);
      *(_WORD *)(v46 + 32) = 2080;
      v132 = v17;
      v133 = v45;
      swift_bridgeObjectRetain(v45);
      v58 = String.init<A>(describing:)(&v132, v48);
      v60 = v59;
      v132 = sub_1000155A4(v58, v59, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease_n(v45, 2);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v46 + 42) = 2080;
      LOBYTE(v132) = v120;
      v61 = sub_100006454(&qword_100091C78);
      v62 = String.init<A>(describing:)(&v132, v61);
      v64 = v63;
      v132 = sub_1000155A4(v62, v63, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease(v64);
      *(_WORD *)(v46 + 52) = 2080;
      v132 = v41;
      swift_bridgeObjectRetain(v41);
      v65 = sub_100006454(&qword_100091C80);
      v66 = String.init<A>(describing:)(&v132, v65);
      v68 = v67;
      v132 = sub_1000155A4(v66, v67, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease_n(v41, 2);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v46 + 62) = 2080;
      v132 = v125;
      swift_bridgeObjectRetain(v125);
      v69 = String.init<A>(describing:)(&v132, v65);
      v71 = v70;
      v132 = sub_1000155A4(v69, v70, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
      swift_bridgeObjectRelease_n(v125, 2);
      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, loga, type, "adamID=%s, bundleID=%s, title=%s, subtitle=%s, supportsArcade=%s, artworkDictionary=%s, editorialArtworkDictionary=%s", (uint8_t *)v46, 0x48u);
      swift_arrayDestroy(v116, 7, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v15, 2);
      swift_bridgeObjectRelease_n(v41, 2);
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease_n(v39, 2);
      swift_bridgeObjectRelease_n(v127, 2);
    }
    v72 = type metadata accessor for AppMetadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(a2, 1, 1, v72);
  }
}

uint64_t sub_100034C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_100039B50(a1, 0xD000000000000011, 0x8000000100073F50, 0x7974697669746341, 0xEC00000064656546);
  v6 = swift_allocObject(&unk_10008E6E0, 32, 7);
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain(a4);
  sub_100034D1C((void (*)(_QWORD *, unint64_t, id))sub_100039DDC, v6);
  return swift_release(v6);
}

void sub_100034D1C(void (*a1)(_QWORD *, unint64_t, id), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  void *v12;
  void **v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void **v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  id v29;
  void **aBlock;
  _QWORD v31[4];
  _QWORD *v32;

  v3 = v2;
  if (qword_100090708 != -1)
    swift_once(&qword_100090708, sub_100029CF8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000A720(v6, (uint64_t)qword_100095A08);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchActivityFeedViews...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (void *)sub_10006B320();
  if (v11)
  {
    v12 = v11;
    v13 = v11;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      aBlock = v13;
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v31);
      *v28 = v12;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Current player is %@", v16, 0xCu);
      v18 = sub_100006454(&qword_100091C00);
      swift_arrayDestroy(v28, 1, v18);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
    v23 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForPlayer:", v13);
    v24 = objc_msgSend(v23, "friendServicePrivate");

    v25 = (_QWORD *)swift_allocObject(&unk_10008E5A0, 40, 7);
    v25[2] = a1;
    v25[3] = a2;
    v25[4] = v3;
    v31[3] = sub_100039E1C;
    v32 = v25;
    aBlock = _NSConcreteStackBlock;
    v31[0] = 1107296256;
    v31[1] = sub_100035C2C;
    v31[2] = &unk_10008E5B8;
    v26 = _Block_copy(&aBlock);
    v27 = v32;
    swift_retain(a2);
    swift_release(v27);
    objc_msgSend(v24, "getPlayerActivityFeed:bundleID:continuation:handler:", 0, 0, 0, v26);
    _Block_release(v26);

    swift_unknownObjectRelease(v24);
  }
  else
  {
    v19 = Logger.logObject.getter(0);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to get local player!", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = sub_10004C364((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_10005600C();
    a1(_swiftEmptyArrayStorage, v22, v29);
    swift_bridgeObjectRelease(v22);

  }
}

void sub_1000350FC(void *a1, id a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  id v86;
  _QWORD *v87;
  uint64_t v88;
  id aBlock[5];
  _QWORD *v90;

  v9 = type metadata accessor for DispatchWorkItemFlags(0, a5);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0, v11);
  __chkstk_darwin(v14);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v74 = v18;
    v75 = v16;
    v76 = v15;
    v79 = v9;
    v29 = swift_allocObject(&unk_10008E5F0, 24, 7);
    v73 = v29;
    *(_QWORD *)(v29 + 16) = _swiftEmptyArrayStorage;
    v30 = (uint64_t *)(v29 + 16);
    v80 = a4;
    v77 = v13;
    v78 = v10;
    if (a1)
    {
      v31 = objc_msgSend(a1, "sections");
      if (v31)
      {
        a2 = v31;
        v32 = sub_100011E4C(0, &qword_100091C28, GKPlayerActivitySectionInternal_ptr);
        v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v32);

        v72 = a3;
        if ((unint64_t)v33 >> 62)
        {
          if (v33 < 0)
            a2 = (id)v33;
          else
            a2 = (id)(v33 & 0xFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain(v33);
          v34 = _CocoaArrayWrapper.endIndex.getter(a2);
          if (v34)
          {
LABEL_9:
            v35 = 0;
            a3 = 0;
            v85 = v33 & 0xC000000000000001;
            v81 = v33 + 32;
            v83 = v33;
            v84 = (char *)&type metadata for Any + 8;
            v82 = v34;
            while (1)
            {
              v36 = v85
                  ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v33)
                  : *(id *)(v81 + 8 * v35);
              v37 = v36;
              if (__OFADD__(v35++, 1))
                break;
              v39 = objc_msgSend(v36, "items");
              if (v39)
              {
                a2 = v39;
                v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, v84);

                v41 = *(_QWORD *)(v40 + 16);
                if (v41)
                {
                  v42 = v40 + 32;
                  swift_bridgeObjectRetain(v40);
                  do
                  {
                    sub_100015CA4(v42, (uint64_t)aBlock);
                    if (a3 <= 15)
                    {
                      sub_100015CA4((uint64_t)aBlock, (uint64_t)&v87);
                      v43 = sub_100011E4C(0, &qword_100090CB8, GKPlayerActivityItemInternal_ptr);
                      if (swift_dynamicCast(&v86, &v87, (char *)&type metadata for Any + 8, v43, 6))
                      {
                        a2 = v86;
                        v44 = objc_msgSend(v86, "activityType");
                        if (v44)
                        {
                          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
                          v46 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
                          v45 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
                          if (v46 >= v45 >> 1)
                            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
                          v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, a2);
                          specialized Array._endMutation()(v47);
                          ++a3;
                        }
                        else
                        {

                        }
                      }
                    }
                    sub_100015C84(aBlock);
                    v42 += 32;
                    --v41;
                  }
                  while (v41);

                  swift_bridgeObjectRelease_n(v40, 2);
                  v34 = v82;
                  v33 = v83;
                }
                else
                {

                  swift_bridgeObjectRelease(v40);
                }
              }
              else
              {

              }
              if (v35 == v34)
                goto LABEL_37;
            }
            __break(1u);
            goto LABEL_32;
          }
        }
        else
        {
          v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v33);
          if (v34)
            goto LABEL_9;
        }
LABEL_37:
        swift_bridgeObjectRelease_n(v33, 2);
        a3 = v72;
      }
    }
    v49 = a3;
    v50 = swift_allocObject(&unk_10008E618, 24, 7);
    *(_QWORD *)(v50 + 16) = sub_10004C364((uint64_t)_swiftEmptyArrayStorage);
    v51 = dispatch_group_create();
    v52 = *v30;
    if ((unint64_t)v52 >> 62)
    {
      if (v52 < 0)
        v57 = v52;
      else
        v57 = v52 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v52, 2);
      v53 = _CocoaArrayWrapper.endIndex.getter(v57);
      if (!v53)
        goto LABEL_50;
    }
    else
    {
      v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v52, 2);
      if (!v53)
        goto LABEL_50;
    }
    if (v53 < 1)
    {
      __break(1u);
      return;
    }
    v54 = 0;
    do
    {
      if ((v52 & 0xC000000000000001) != 0)
        v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v52);
      else
        v55 = *(id *)(v52 + 8 * v54 + 32);
      v56 = v55;
      ++v54;
      aBlock[0] = v55;
      sub_10003B5F8(aBlock, v51, v50);

    }
    while (v53 != v54);
LABEL_50:
    swift_bridgeObjectRelease_n(v52, 2);
    sub_100011E4C(0, &qword_100091C08, OS_dispatch_queue_ptr);
    v58 = (void *)static OS_dispatch_queue.main.getter();
    v59 = (_QWORD *)swift_allocObject(&unk_10008E640, 48, 7);
    v60 = v73;
    v59[2] = v73;
    v59[3] = v50;
    v61 = v80;
    v59[4] = v49;
    v59[5] = v61;
    aBlock[4] = sub_10003B8B0;
    v90 = v59;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_100032E48;
    aBlock[3] = &unk_10008E658;
    v62 = _Block_copy(aBlock);
    swift_retain(v60);
    swift_retain(v50);
    v63 = swift_retain(v61);
    v64 = v74;
    static DispatchQoS.unspecified.getter(v63);
    v87 = _swiftEmptyArrayStorage;
    v65 = sub_100007A70(&qword_100091C10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v66 = sub_100006454(&qword_100091C18);
    v67 = sub_10003B8BC();
    v68 = v77;
    v69 = v79;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v87, v66, v67, v79, v65);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v64, v68, v58, v62);

    _Block_release(v62);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v68, v69);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v64, v76);
    v70 = v90;
    swift_release(v60);
    swift_release(v50);
    swift_release(v70);
    return;
  }
  if (qword_100090708 != -1)
LABEL_32:
    swift_once(&qword_100090708, sub_100029CF8);
  v19 = type metadata accessor for Logger(0);
  sub_10000A720(v19, (uint64_t)qword_100095A08);
  swift_errorRetain(a2);
  v20 = swift_errorRetain(a2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = (void *)swift_slowAlloc(32, -1);
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v87 = a2;
    swift_errorRetain(a2);
    v25 = sub_100006454(&qword_100091C30);
    v26 = String.init<A>(describing:)(&v87, v25);
    v28 = v27;
    v87 = (_QWORD *)sub_1000155A4(v26, v27, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
    swift_bridgeObjectRelease(v28);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Received error %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  v48 = sub_10004C364((uint64_t)_swiftEmptyArrayStorage);
  ((void (*)(_QWORD *, unint64_t, id))a3)(_swiftEmptyArrayStorage, v48, a2);
  swift_bridgeObjectRelease(v48);
}

void sub_1000358B4(void *a1, int a2, int a3, uint64_t a4, void *a5, dispatch_group_t group)
{
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  if (a1)
  {
    v9 = a4 + 16;
    v10 = a1;
    v11 = objc_msgSend(a5, "playerID");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    swift_beginAccess(v9, v19, 33, 0);
    v15 = v10;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a4 + 16));
    v18 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = 0x8000000000000000;
    sub_10004E6D0((uint64_t)v15, v12, v14, isUniquelyReferenced_nonNull_native);
    v17 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v18;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v17);
    swift_endAccess(v19);

  }
  dispatch_group_leave(group);
}

void sub_1000359B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, id);
  id v9;
  id v10;

  v8 = *(void (**)(void *, uint64_t, id))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a4;
  v8(a2, a3, v9);
  swift_release(v7);

}

uint64_t sub_100035A2C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;

  if (qword_100090708 != -1)
    swift_once(&qword_100090708, sub_100029CF8);
  v6 = (uint64_t *)(a1 + 16);
  v7 = type metadata accessor for Logger(0);
  sub_10000A720(v7, (uint64_t)qword_100095A08);
  v8 = swift_retain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    swift_beginAccess(a1 + 16, v18, 0, 0);
    v12 = *v6;
    if ((unint64_t)*v6 >> 62)
    {
      if (v12 < 0)
        v17 = *v6;
      else
        v17 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v6);
      v13 = _CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v20 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_release(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received %ld brick(s) from gamed", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  swift_beginAccess(a1 + 16, &v20, 0, 0);
  v14 = *v6;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  v15 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  a3(v14, v15, 0);
  swift_bridgeObjectRelease(v15);
  return swift_bridgeObjectRelease(v14);
}

void sub_100035C2C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t type metadata accessor for GameCenterStore()
{
  return objc_opt_self(_TtC9GCWidgets15GameCenterStore);
}

uint64_t sub_100035CC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100035CE4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100034C7C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100035CF0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100035D10(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  uint64_t v6;
  uint64_t result;
  double v8;
  uint64_t v9;

  v5 = a4();
  v6 = *a1 + 8;
  v8 = v5;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
  *a1 = v6;
  return result;
}

uint64_t sub_100035D60(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_1000155A4(v6, v7, a3);
  v10 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_100035DD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10004D860(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004E82C();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v7);
  sub_100035EB4(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_100035EB4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100036088(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000360A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000360A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006454(&qword_100090CE0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unsigned __int8 *sub_10003620C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_100036580(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_100036304(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

uint64_t sub_1000362F0(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

unsigned __int8 *sub_100036304(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100036580(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1000365FC(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1000365FC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_100036740(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100015A34(v12, 0);
      v5 = sub_10003682C((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_100036740(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100015A98(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100015A98(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10003682C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100015A98(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100015A98(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_100036A3C(void (*a1)(_QWORD, _QWORD))
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  NSString v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  double v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void (*v48)(_QWORD, _QWORD);
  double v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = objc_msgSend((id)objc_opt_self(AMSMediaTask), "bagSubProfileVersion");
  if (!v2)
    __break(1u);
  v3 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = String._bridgeToObjectiveC()();
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v6, v7);

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "doubleForKey:", v9);

  v49 = 0.0;
  v11 = objc_msgSend(v10, "valueWithError:", &v49);
  v12 = v49;
  if (v11)
  {
    v13 = v11;
    v14 = *(id *)&v49;
    v15 = (double)arc4random_uniform(0x64u) / 100.0;
    objc_msgSend(v13, "doubleValue");
    if (v15 >= v16)
      *(double *)&v17 = 0.0;
    else
      *(double *)&v17 = 8.75484263e189;
    if (v15 >= v16)
      v18 = 0;
    else
      v18 = 0xEC00000073635F63;
    if (qword_100090700 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v19 = type metadata accessor for Logger(0);
    sub_10000A720(v19, (uint64_t)qword_1000959F0);
    swift_bridgeObjectRetain_n(v18, 2);
    v20 = v13;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v48 = a1;
      v23 = swift_slowAlloc(42, -1);
      v24 = swift_slowAlloc(64, -1);
      v51 = v24;
      *(_DWORD *)v23 = 136315906;
      v49 = COERCE_DOUBLE(sub_1000155A4(0x697274656D2D6B67, 0xEE007463702D7363, &v51));
      v47 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      *(_WORD *)(v23 + 12) = 2048;
      objc_msgSend(v20, "doubleValue");
      v49 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

      *(_WORD *)(v23 + 22) = 2048;
      v49 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      *(_WORD *)(v23 + 32) = 2080;
      v49 = *(double *)&v17;
      v50 = v18;
      swift_bridgeObjectRetain(v18);
      v26 = sub_100006454(&qword_100091C50);
      v27 = String.init<A>(describing:)(&v49, v26);
      v29 = v28;
      v49 = COERCE_DOUBLE(sub_1000155A4(v27, v28, &v51));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v18, 2);
      v30 = v29;
      v8 = v47;
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "fetchMetricsPercentage %s - %f. Candidate Percentage: %f => Topic: %s", (uint8_t *)v23, 0x2Au);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      v31 = v23;
      a1 = v48;
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
    }
    a1(v17, v18);

    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v32 = *(id *)&v49;
    v33 = _convertNSErrorToError(_:)(*(_QWORD *)&v12);

    swift_willThrow();
    if (qword_100090700 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v34 = type metadata accessor for Logger(0);
    sub_10000A720(v34, (uint64_t)qword_1000959F0);
    swift_errorRetain(v33);
    v35 = swift_errorRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = COERCE_DOUBLE(swift_slowAlloc(64, -1));
      v49 = v39;
      *(_DWORD *)v38 = 136315394;
      v51 = sub_1000155A4(0x697274656D2D6B67, 0xEE007463702D7363, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *(_WORD *)(v38 + 12) = 2080;
      v51 = v33;
      swift_errorRetain(v33);
      v40 = sub_100006454(&qword_100090BD0);
      v41 = String.init<A>(describing:)(&v51, v40);
      v42 = v10;
      v43 = v8;
      v45 = v44;
      v51 = sub_1000155A4(v41, v44, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      v46 = v45;
      v8 = v43;
      v10 = v42;
      swift_bridgeObjectRelease(v46);
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "fetchMetricsPercentage %s - defaulting to 0, unable to retrieve: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(*(_QWORD *)&v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(*(_QWORD *)&v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_errorRelease(v33);
      swift_errorRelease(v33);
    }

    a1(0, 0);
    swift_errorRelease(v33);
  }
}

void sub_1000370CC(uint64_t a1, unint64_t a2, void (*a3)(double), uint64_t a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  NSString v13;
  id v14;
  NSString v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  __objc2_class_ro *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v8 = objc_msgSend((id)objc_opt_self(AMSMediaTask), "bagSubProfileVersion");
  if (!v8)
  {
    swift_release(a4);
    __break(1u);
  }
  v9 = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = String._bridgeToObjectiveC()();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v14 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v12, v13);

  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "doubleForKey:", v15);

  v49 = 0;
  v17 = objc_msgSend(v16, "valueWithError:", &v49);
  v18 = v49;
  if (v17)
  {
    v19 = v17;
    v20 = qword_100090700;
    v21 = v49;
    if (v20 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v22 = type metadata accessor for Logger(0);
    sub_10000A720(v22, (uint64_t)qword_1000959F0);
    swift_bridgeObjectRetain_n(a2, 2);
    v23 = v19;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    v26 = &SeededRandomNumberGenerator;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = swift_slowAlloc(22, -1);
      v45 = v16;
      v28 = (void *)swift_slowAlloc(32, -1);
      v49 = v28;
      *(_DWORD *)v27 = 136315394;
      v44 = v14;
      swift_bridgeObjectRetain(a2);
      v47 = sub_1000155A4(a1, a2, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v27 + 12) = 2048;
      objc_msgSend(v23, "doubleValue");
      v47 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "fetchLivePreviewRateInSeconds %s - %f", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v30 = v28;
      v16 = v45;
      swift_slowDealloc(v30, -1, -1);
      v31 = v27;
      v26 = &SeededRandomNumberGenerator;
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    ((void (*)(id))a3)(objc_msgSend(v23, (SEL)v26[17].base_meths, v44));

  }
  else
  {
    v46 = v16;
    v32 = v49;
    v33 = _convertNSErrorToError(_:)(v18);

    swift_willThrow();
    if (qword_100090700 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v34 = type metadata accessor for Logger(0);
    sub_10000A720(v34, (uint64_t)qword_1000959F0);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(v33);
    swift_bridgeObjectRetain(a2);
    v35 = swift_errorRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(32, -1);
      v39 = (void *)swift_slowAlloc(64, -1);
      v49 = v39;
      *(_DWORD *)v38 = 136315650;
      swift_bridgeObjectRetain(a2);
      v47 = sub_1000155A4(a1, a2, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v38 + 12) = 2048;
      v47 = 0x3FF0000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *(_WORD *)(v38 + 22) = 2080;
      v47 = v33;
      swift_errorRetain(v33);
      v40 = sub_100006454(&qword_100090BD0);
      v41 = String.init<A>(describing:)(&v47, v40);
      v43 = v42;
      v47 = sub_1000155A4(v41, v42, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "fetchLivePreviewRateInSeconds %s - defaulting to %f, unable to retrieve: %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(v33);
      swift_errorRelease(v33);
    }

    a3(1.0);
    swift_errorRelease(v33);
  }
}

void sub_1000376A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  void *v85;
  id v86;
  char *v87;
  NSURL *v88;
  void *v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint8_t *v105;
  char *v106;
  void *v107;
  uint64_t v108;
  id v109;
  char *v110;
  NSURL *v111;
  void *v112;
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint8_t *v128;
  char *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  void *v138;
  Swift::String v139;
  unint64_t v140;
  char *v141;
  uint8_t *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint8_t *v148;
  uint64_t v149;
  uint8_t *v150;
  uint64_t *v151;
  char *v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;

  v2 = type metadata accessor for URL(0);
  v155 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v150 = (uint8_t *)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v145 = (char *)&v142 - v5;
  __chkstk_darwin(v6);
  v152 = (char *)&v142 - v7;
  __chkstk_darwin(v8);
  v10 = (char *)&v142 - v9;
  v11 = type metadata accessor for GameCenterStore.CacheConfig(0);
  __chkstk_darwin(v11);
  v147 = (uint64_t)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v146 = (uint64_t)&v142 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v142 - v16;
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10000A720(v18, (uint64_t)qword_1000959D8);
  v20 = sub_100007AF4(a1, (uint64_t)v17, type metadata accessor for GameCenterStore.CacheConfig);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v149 = a1;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v154 = v25;
    v153 = v24;
    *(_DWORD *)v24 = 136315138;
    v151 = (uint64_t *)(v24 + 4);
    v156 = v25;
    v157 = 0x5F726579616C70;
    v158 = 0xE700000000000000;
    v26 = (uint64_t *)&v17[*(int *)(v11 + 24)];
    v148 = (uint8_t *)v19;
    v27 = v11;
    v28 = v10;
    v29 = v2;
    v30 = *v26;
    v31 = (void *)v26[1];
    swift_bridgeObjectRetain(v31);
    v32._countAndFlagsBits = v30;
    v32._object = v31;
    String.append(_:)(v32);
    v33 = v31;
    v2 = v29;
    v10 = v28;
    v11 = v27;
    swift_bridgeObjectRelease(v33);
    v34 = v158;
    URL.appendingPathComponent(_:)(v157, v158);
    swift_bridgeObjectRelease(v34);
    v35 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v2, v35);
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v155 + 8))(v10, v2);
    v157 = sub_1000155A4(v36, v38, &v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158);
    v39 = v38;
    v19 = (uint64_t)v148;
    swift_bridgeObjectRelease(v39);
    sub_10000A7C0((uint64_t)v17, type metadata accessor for GameCenterStore.CacheConfig);
    v40 = v22;
    v41 = v153;
    _os_log_impl((void *)&_mh_execute_header, v21, v40, "Cache player metadata url = %s", v153, 0xCu);
    v42 = v154;
    swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    a1 = v149;
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    sub_10000A7C0((uint64_t)v17, type metadata accessor for GameCenterStore.CacheConfig);
  }

  v43 = (void *)sub_10006B320();
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "alias");
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v153 = v47;
    v154 = v46;

  }
  else
  {
    v154 = 0x6E776F6E6B6E75;
    v153 = (uint8_t *)0xE700000000000000;
  }
  v157 = 0x5F726579616C70;
  v158 = 0xE700000000000000;
  v48 = (uint64_t *)(a1 + *(int *)(v11 + 24));
  v49 = *v48;
  v50 = (void *)v48[1];
  v151 = v48;
  swift_bridgeObjectRetain(v50);
  v51._countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v50);
  v52 = v158;
  v53 = v152;
  URL.appendingPathComponent(_:)(v157, v158);
  swift_bridgeObjectRelease(v52);
  v54 = Data.init(contentsOf:options:)(v53, 0);
  v55 = v11;
  v56 = v54;
  v58 = v57;
  v144 = v55;
  v155 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v53, v2);
  v59 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  v60 = JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for String, v56, v58, &type metadata for String, &protocol witness table for String);
  sub_10000ADC4(v56, v58);
  v61 = swift_release(v60);
  v63 = (id)v157;
  v62 = (uint8_t *)v158;
  v64 = Logger.logObject.getter(v61);
  v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Cached player appears to exist - comparing name to logged in player...", v66, 2u);
    swift_slowDealloc(v66, -1, -1);
  }

  v67 = swift_bridgeObjectRetain_n(v62, 2);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.default.getter();
  v70 = os_log_type_enabled(v68, v69);
  v143 = v10;
  if (v70)
  {
    v152 = (char *)v2;
    v71 = (uint8_t *)swift_slowAlloc(12, -1);
    v72 = swift_slowAlloc(32, -1);
    v149 = a1;
    v73 = v72;
    v157 = v72;
    *(_DWORD *)v71 = 136315138;
    swift_bridgeObjectRetain(v62);
    v156 = sub_1000155A4((uint64_t)v63, (unint64_t)v62, &v157);
    v2 = (uint64_t)v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
    swift_bridgeObjectRelease_n(v62, 3);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Cached player is %s", v71, 0xCu);
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    v74 = v73;
    a1 = v149;
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v71, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v62, 2);
  }
  v75 = v153;
  if (v63 == (id)v154 && v62 == v153)
  {
    swift_bridgeObjectRelease(v153);
LABEL_20:
    v78 = swift_bridgeObjectRelease(v75);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "The cache is still valid. Deferring to it for data where possible.", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
    }

    return;
  }
  v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v62, v154, v153, 0);
  v77 = swift_bridgeObjectRelease(v62);
  if ((v76 & 1) != 0)
    goto LABEL_20;
  v82 = Logger.logObject.getter(v77);
  v83 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v84 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "The cache is out of date. Erasing it and fetching new data.", v84, 2u);
    swift_slowDealloc(v84, -1, -1);
  }

  v85 = (void *)objc_opt_self(NSFileManager);
  v86 = objc_msgSend(v85, "defaultManager");
  v87 = v143;
  URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(a1 + *(int *)(v144 + 20)), *(_QWORD *)(a1 + *(int *)(v144 + 20) + 8), 1);
  URL._bridgeToObjectiveC()(v88);
  v90 = v89;
  ((void (*)(char *, uint64_t))v155)(v87, v2);
  v157 = 0;
  LODWORD(v87) = objc_msgSend(v86, "removeItemAtURL:error:", v90, &v157);

  v91 = (id)v157;
  if ((_DWORD)v87)
  {
    v92 = v146;
    v93 = sub_100007AF4(a1, v146, type metadata accessor for GameCenterStore.CacheConfig);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(12, -1);
      v97 = (char *)swift_slowAlloc(32, -1);
      v152 = v97;
      v149 = a1;
      v150 = v96;
      *(_DWORD *)v96 = 136315138;
      v157 = (uint64_t)v97;
      v142 = v96 + 4;
      v98 = v143;
      v99 = URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(v92 + *(int *)(v144 + 20)), *(_QWORD *)(v92 + *(int *)(v144 + 20) + 8), 1);
      v100 = URL.path.getter(v99);
      v148 = (uint8_t *)v19;
      v101 = v2;
      v103 = v102;
      ((void (*)(char *, uint64_t))v155)(v98, v101);
      v156 = sub_1000155A4(v100, v103, &v157);
      a1 = v149;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
      v104 = v103;
      v2 = v101;
      swift_bridgeObjectRelease(v104);
      sub_10000A7C0(v92, type metadata accessor for GameCenterStore.CacheConfig);
      v105 = v150;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Deleted cache directory at %s", v150, 0xCu);
      v106 = v152;
      swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);
    }
    else
    {
      sub_10000A7C0(v92, type metadata accessor for GameCenterStore.CacheConfig);
    }

    v75 = v153;
  }
  else
  {
    v107 = v91;
    v108 = _convertNSErrorToError(_:)(v91);

    swift_willThrow();
    swift_errorRelease(v108);
  }
  v109 = objc_msgSend(v85, "defaultManager");
  v110 = v143;
  URL.appendingPathComponent(_:)(*v151, v151[1]);
  URL._bridgeToObjectiveC()(v111);
  v113 = v112;
  ((void (*)(char *, uint64_t))v155)(v110, v2);
  v157 = 0;
  LODWORD(v110) = objc_msgSend(v109, "removeItemAtURL:error:", v113, &v157);

  v114 = (id)v157;
  if ((_DWORD)v110)
  {
    v115 = v147;
    v116 = sub_100007AF4(a1, v147, type metadata accessor for GameCenterStore.CacheConfig);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v117, v118))
    {
      v119 = (uint8_t *)swift_slowAlloc(12, -1);
      v120 = (char *)swift_slowAlloc(32, -1);
      v152 = v120;
      v149 = a1;
      v150 = v119;
      *(_DWORD *)v119 = 136315138;
      v157 = (uint64_t)v120;
      v148 = v119 + 4;
      v121 = v143;
      v122 = URL.appendingPathComponent(_:)(*(_QWORD *)(v115 + *(int *)(v144 + 24)), *(_QWORD *)(v115 + *(int *)(v144 + 24) + 8));
      v123 = URL.path.getter(v122);
      v124 = v2;
      v126 = v125;
      ((void (*)(char *, uint64_t))v155)(v121, v124);
      v156 = sub_1000155A4(v123, v126, &v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &v157);
      v127 = v126;
      v2 = v124;
      v75 = v153;
      swift_bridgeObjectRelease(v127);
      sub_10000A7C0(v115, type metadata accessor for GameCenterStore.CacheConfig);
      v128 = v150;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Deleted cache metadata at %s", v150, 0xCu);
      v129 = v152;
      swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v128, -1, -1);
    }
    else
    {
      sub_10000A7C0(v115, type metadata accessor for GameCenterStore.CacheConfig);
    }

  }
  else
  {
    v130 = v114;
    v131 = _convertNSErrorToError(_:)(v114);

    swift_willThrow();
    swift_errorRelease(v131);
  }
  v132 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v132, *(unsigned int *)(v132 + 48), *(unsigned __int16 *)(v132 + 52));
  v133 = JSONEncoder.init()();
  v157 = v154;
  v158 = (unint64_t)v75;
  v134 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v157, &type metadata for String, &protocol witness table for String);
  v136 = v135;
  swift_release(v133);
  swift_bridgeObjectRelease(v75);
  v157 = 0x5F726579616C70;
  v158 = 0xE700000000000000;
  v137 = *v151;
  v138 = (void *)v151[1];
  swift_bridgeObjectRetain(v138);
  v139._countAndFlagsBits = v137;
  v139._object = v138;
  String.append(_:)(v139);
  swift_bridgeObjectRelease(v138);
  v140 = v158;
  v141 = v145;
  URL.appendingPathComponent(_:)(v157, v158);
  swift_bridgeObjectRelease(v140);
  Data.write(to:options:)(v141, 0, v134, v136);
  ((void (*)(char *, uint64_t))v155)(v141, v2);
  sub_10000ADC4(v134, v136);
}

uint64_t sub_100038898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  void (**v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void (**v62)(char *, char *, uint64_t);
  double v63;
  char *v64;
  double v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  uint8_t *v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint8_t *v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  id v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint8_t *v108;
  id v109;
  NSURL *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  unsigned int v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  uint8_t *v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  void (**v129)(char *, char *, uint64_t);
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  char *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  double *v150;
  double v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  _QWORD *v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (**v173)(char *, char *, uint64_t);
  char *v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  _QWORD v178[2];

  v2 = type metadata accessor for GameCenterStore.CacheConfig(0);
  __chkstk_darwin(v2);
  v162 = (uint64_t)&v154 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v163 = (char *)&v154 - v5;
  v6 = type metadata accessor for URL(0);
  v172 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v165 = (char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v161 = (char *)&v154 - v9;
  __chkstk_darwin(v10);
  v164 = (char *)&v154 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v154 - v13;
  v15 = type metadata accessor for Date(0);
  v173 = *(void (***)(char *, char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v154 - v19;
  __chkstk_darwin(v21);
  v23 = (char *)&v154 - v22;
  __chkstk_darwin(v24);
  v169 = (char *)&v154 - v25;
  __chkstk_darwin(v26);
  v28 = (char *)&v154 - v27;
  __chkstk_darwin(v29);
  v174 = (char *)&v154 - v30;
  Date.init()(v31);
  v32 = (_QWORD *)(a1 + *(int *)(v2 + 24));
  v33 = *v32;
  v34 = v32[1];
  v166 = v32;
  v170 = a1;
  URL.appendingPathComponent(_:)(v33, v34);
  v167 = Data.init(contentsOf:options:)(v14, 0);
  v168 = v35;
  v156 = v23;
  v157 = v20;
  v158 = v17;
  v159 = v2;
  v160 = v28;
  v36 = *(void (**)(char *, uint64_t))(v172 + 8);
  v172 = v6;
  v36(v14, v6);
  v37 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v38 = JSONDecoder.init()();
  v39 = sub_100007A70(&qword_100091C40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v41 = (unint64_t)v168;
  v40 = v169;
  v42 = v167;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v15, v167, v168, v15, v39);
  v171 = 0;
  sub_10000ADC4(v42, v41);
  swift_release(v38);
  v44 = v173;
  v45 = v160;
  v173[4](v160, v40, v15);
  v46 = v174;
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v155 = v36;
  v47 = type metadata accessor for Logger(0);
  v48 = sub_10000A720(v47, (uint64_t)qword_1000959D8);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Cache appears to exist - checking creation date...", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  v52 = v156;
  v168 = v44[2];
  v53 = ((uint64_t (*)(char *, char *, uint64_t))v168)(v156, v45, v15);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v177 = v57;
    *(_DWORD *)v56 = 136315138;
    v58 = sub_100007A70(&qword_100091C48, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v59 = dispatch thunk of CustomStringConvertible.description.getter(v15, v58);
    v61 = v60;
    v175 = sub_1000155A4(v59, v60, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176);
    swift_bridgeObjectRelease(v61);
    v62 = (void (**)(char *, char *, uint64_t))v173[1];
    v46 = v174;
    ((void (*)(char *, uint64_t))v62)(v52, v15);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Decoded cache creation date %s", v56, 0xCu);
    swift_arrayDestroy(*(_QWORD *)&v57, 1, (char *)&type metadata for Any + 8);
    v63 = v57;
    v45 = v160;
    swift_slowDealloc(*(_QWORD *)&v63, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    v62 = (void (**)(char *, char *, uint64_t))v44[1];
    ((void (*)(char *, uint64_t))v62)(v52, v15);
  }

  v64 = v157;
  v65 = Date.timeIntervalSince(_:)(v45);
  v66 = ((uint64_t (*)(char *, char *, uint64_t))v168)(v64, v46, v15);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.default.getter();
  v69 = os_log_type_enabled(v67, v68);
  v169 = (char *)v48;
  if (v69)
  {
    v70 = (uint8_t *)swift_slowAlloc(12, -1);
    v71 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v177 = v71;
    *(_DWORD *)v70 = 136315138;
    v72 = sub_100007A70(&qword_100091C48, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v73 = dispatch thunk of CustomStringConvertible.description.getter(v15, v72);
    v75 = v74;
    v175 = sub_1000155A4(v73, v74, (uint64_t *)&v177);
    v46 = v174;
    v45 = v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176);
    swift_bridgeObjectRelease(v75);
    ((void (*)(char *, uint64_t))v62)(v64, v15);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Current date = %s", v70, 0xCu);
    swift_arrayDestroy(*(_QWORD *)&v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v71, -1, -1);
    swift_slowDealloc(v70, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v62)(v64, v15);
  }

  v76 = v158;
  v77 = ((uint64_t (*)(char *, char *, uint64_t))v168)(v158, v45, v15);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(12, -1);
    v81 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    v173 = v62;
    v82 = v81;
    v177 = v81;
    *(_DWORD *)v80 = 136315138;
    v83 = sub_100007A70(&qword_100091C48, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v84 = dispatch thunk of CustomStringConvertible.description.getter(v15, v83);
    v86 = v85;
    v175 = sub_1000155A4(v84, v85, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176);
    swift_bridgeObjectRelease(v86);
    ((void (*)(char *, uint64_t))v173)(v76, v15);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Cache creation date = %s", v80, 0xCu);
    swift_arrayDestroy(*(_QWORD *)&v82, 1, (char *)&type metadata for Any + 8);
    v87 = v82;
    v62 = v173;
    swift_slowDealloc(*(_QWORD *)&v87, -1, -1);
    swift_slowDealloc(v80, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v62)(v76, v15);
  }

  v88 = v170;
  v89 = (uint64_t)v163;
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v91, v92))
  {
    v93 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v93 = 134217984;
    v177 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Time since cache creation date = %f", v93, 0xCu);
    v94 = v93;
    v88 = v170;
    swift_slowDealloc(v94, -1, -1);
  }

  v95 = sub_100007AF4(v88, v89, type metadata accessor for GameCenterStore.CacheConfig);
  v96 = Logger.logObject.getter(v95);
  v97 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v96, v97))
  {
    v98 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v98 = 134217984;
    v99 = v159;
    v100 = v89;
    v101 = *(double *)(v89 + *(int *)(v159 + 28));
    sub_10000A7C0(v100, type metadata accessor for GameCenterStore.CacheConfig);
    v177 = v101;
    v88 = v170;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
    _os_log_impl((void *)&_mh_execute_header, v96, v97, "Cache TTL = %ld", v98, 0xCu);
    swift_slowDealloc(v98, -1, -1);
    v102 = v155;
  }
  else
  {
    sub_10000A7C0(v89, type metadata accessor for GameCenterStore.CacheConfig);
    v102 = v155;
    v99 = v159;
  }
  v103 = v164;

  if (v65 <= (double)*(uint64_t *)(v88 + *(int *)(v99 + 28))
    || (v104 = objc_msgSend((id)objc_opt_self(GKReachability), "_gkIsOnline"), !(_DWORD)v104))
  {
    v132 = Logger.logObject.getter(v104);
    v133 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v132, v133))
    {
      v134 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v134 = 0;
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "The cache is still valid. Deferring to it for data where possible.", v134, 2u);
      swift_slowDealloc(v134, -1, -1);
    }

    goto LABEL_29;
  }
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v105, v106))
  {
    v107 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v107 = 0;
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "The cache is out of date. Erasing it and fetching new data.", v107, 2u);
    v108 = v107;
    v88 = v170;
    swift_slowDealloc(v108, -1, -1);
  }

  v109 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(v88 + *(int *)(v99 + 20)), *(_QWORD *)(v88 + *(int *)(v99 + 20) + 8), 1);
  URL._bridgeToObjectiveC()(v110);
  v112 = v111;
  v102(v103, v172);
  v177 = 0.0;
  v113 = v88;
  v114 = objc_msgSend(v109, "removeItemAtURL:error:", v112, &v177);

  v115 = *(id *)&v177;
  if (v114)
  {
    v116 = v113;
    v117 = v162;
    v118 = sub_100007AF4(v116, v162, type metadata accessor for GameCenterStore.CacheConfig);
    v119 = Logger.logObject.getter(v118);
    v120 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v119, v120))
    {
      v121 = v99;
      v122 = (uint8_t *)swift_slowAlloc(12, -1);
      v123 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v173 = *(void (***)(char *, char *, uint64_t))&v123;
      *(_DWORD *)v122 = 136315138;
      v177 = v123;
      v168 = (void (*)(char *, char *, uint64_t))(v122 + 4);
      v124 = URL.appendingPathComponent(_:isDirectory:)(*(_QWORD *)(v117 + *(int *)(v121 + 20)), *(_QWORD *)(v117 + *(int *)(v121 + 20) + 8), 1);
      v125 = URL.path.getter(v124);
      v127 = v126;
      v155(v103, v172);
      v175 = sub_1000155A4(v125, v127, (uint64_t *)&v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176);
      v128 = v127;
      v46 = v174;
      swift_bridgeObjectRelease(v128);
      sub_10000A7C0(v117, type metadata accessor for GameCenterStore.CacheConfig);
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "Deleted cache directory at %s", v122, 0xCu);
      v129 = v173;
      swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
      v130 = v155;
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v122, -1, -1);

      v131 = v171;
      goto LABEL_33;
    }
    sub_10000A7C0(v117, type metadata accessor for GameCenterStore.CacheConfig);

    v131 = v171;
  }
  else
  {
    v136 = v115;
    v137 = _convertNSErrorToError(_:)(v115);

    swift_willThrow();
    swift_errorRelease(v137);
    v131 = 0;
  }
  v130 = v155;
LABEL_33:
  v138 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v138, *(unsigned int *)(v138 + 48), *(unsigned __int16 *)(v138 + 52));
  v139 = JSONEncoder.init()();
  v140 = sub_100007A70(&qword_100091C38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v141 = dispatch thunk of JSONEncoder.encode<A>(_:)(v46, v15, v140);
  if (!v131)
  {
    v143 = v141;
    v144 = v142;
    swift_release(v139);
    v145 = v161;
    URL.appendingPathComponent(_:)(*v166, v166[1]);
    Data.write(to:options:)(v145, 0, v143, v144);
    sub_10000ADC4(v143, v144);
    v130(v145, v172);
LABEL_29:
    v135 = v160;
    goto LABEL_40;
  }
  swift_release(v139);
  swift_errorRetain(v131);
  v146 = swift_errorRetain(v131);
  v147 = Logger.logObject.getter(v146);
  v148 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v147, v148))
  {
    v149 = (uint8_t *)swift_slowAlloc(12, -1);
    v150 = (double *)swift_slowAlloc(8, -1);
    *(_DWORD *)v149 = 138412290;
    swift_errorRetain(v131);
    v151 = COERCE_DOUBLE(_swift_stdlib_bridgeErrorToNSError(v131));
    v177 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178);
    *v150 = v151;
    v46 = v174;
    swift_errorRelease(v131);
    swift_errorRelease(v131);
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "Failed to write JSON data with error: %@", v149, 0xCu);
    v152 = sub_100006454(&qword_100091C00);
    swift_arrayDestroy(v150, 1, v152);
    swift_slowDealloc(v150, -1, -1);
    swift_slowDealloc(v149, -1, -1);

  }
  else
  {

    swift_errorRelease(v131);
    swift_errorRelease(v131);
  }
  v153 = v160;
  swift_errorRelease(v131);
  v135 = v153;
LABEL_40:
  ((void (*)(char *, uint64_t))v62)(v135, v15);
  return ((uint64_t (*)(char *, uint64_t))v62)(v46, v15);
}

uint64_t sub_100039B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a4;
  v25 = a2;
  v26 = a1;
  v27 = a3;
  v6 = (int *)type metadata accessor for GameCenterStore.CacheConfig(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v17 = 1;
  v18 = objc_msgSend(v16, "URLsForDirectory:inDomains:", 13, 1);

  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v12);
  if (*(_QWORD *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, v19 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    v17 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v17, 1, v12);
  swift_bridgeObjectRelease(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return sub_100007928((uint64_t)v11, &qword_100090BC8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
  v21 = &v8[v6[5]];
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = a5;
  v22 = &v8[v6[6]];
  v23 = v27;
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v23;
  *(_QWORD *)&v8[v6[7]] = v26;
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(v23);
  sub_1000376A8((uint64_t)v8);
  sub_100038898((uint64_t)v8);
  sub_10000A7C0((uint64_t)v8, type metadata accessor for GameCenterStore.CacheConfig);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100039DB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039DF0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100039DF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100039E1C(void *a1, void *a2, __n128 a3)
{
  uint64_t v3;

  sub_1000350FC(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t sub_100039E28()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039E4C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646944726F727265 && a2 == 0xED0000727563634FLL)
  {
    v7 = 0xED0000727563634FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646944726F727265, 0xED0000727563634FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D69547972746572 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D69547972746572, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x44496568636163 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496568636163, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6146746567646977 && a2 == 0xEC000000796C696DLL)
  {
    swift_bridgeObjectRelease(0xEC000000796C696DLL);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6146746567646977, 0xEC000000796C696DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_10003A0A0(uint64_t a1, unint64_t a2, void (*a3)(id), uint64_t a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  NSString v13;
  id v14;
  NSString v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  __objc2_class_ro *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  v8 = objc_msgSend((id)objc_opt_self(AMSMediaTask), "bagSubProfileVersion");
  if (!v8)
  {
    swift_release(a4);
    __break(1u);
  }
  v9 = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = String._bridgeToObjectiveC()();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v14 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v12, v13);

  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "integerForKey:", v15);

  v49 = 0;
  v17 = objc_msgSend(v16, "valueWithError:", &v49);
  v18 = v49;
  if (v17)
  {
    v19 = v17;
    v20 = qword_100090700;
    v21 = v49;
    if (v20 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v22 = type metadata accessor for Logger(0);
    sub_10000A720(v22, (uint64_t)qword_1000959F0);
    swift_bridgeObjectRetain_n(a2, 2);
    v23 = v19;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    v26 = &SeededRandomNumberGenerator;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = swift_slowAlloc(22, -1);
      v45 = v16;
      v28 = (void *)swift_slowAlloc(32, -1);
      v49 = v28;
      *(_DWORD *)v27 = 136315394;
      v44 = v14;
      swift_bridgeObjectRetain(a2);
      v47 = sub_1000155A4(a1, a2, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v27 + 12) = 2048;
      v29 = objc_msgSend(v23, "integerValue");

      v47 = (uint64_t)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "fetchTTLInSeconds %s - %ld", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v30 = v28;
      v16 = v45;
      swift_slowDealloc(v30, -1, -1);
      v31 = v27;
      v26 = &SeededRandomNumberGenerator;
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    a3(objc_msgSend(v23, v26[17].name, v44));

  }
  else
  {
    v46 = v16;
    v32 = v49;
    v33 = _convertNSErrorToError(_:)(v18);

    swift_willThrow();
    if (qword_100090700 != -1)
      swift_once(&qword_100090700, sub_100029CE0);
    v34 = type metadata accessor for Logger(0);
    sub_10000A720(v34, (uint64_t)qword_1000959F0);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(v33);
    swift_bridgeObjectRetain(a2);
    v35 = swift_errorRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(32, -1);
      v39 = (void *)swift_slowAlloc(64, -1);
      v49 = v39;
      *(_DWORD *)v38 = 136315650;
      swift_bridgeObjectRetain(a2);
      v47 = sub_1000155A4(a1, a2, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v38 + 12) = 2048;
      v47 = 86400;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      *(_WORD *)(v38 + 22) = 2080;
      v47 = v33;
      swift_errorRetain(v33);
      v40 = sub_100006454(&qword_100090BD0);
      v41 = String.init<A>(describing:)(&v47, v40);
      v43 = v42;
      v47 = sub_1000155A4(v41, v42, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "fetchTTLInSeconds %s - defaulting to %ld, unable to retrieve: %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(v33);
      swift_errorRelease(v33);
    }

    a3((id)86400);
    swift_errorRelease(v33);
  }
}

void sub_10003A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void *v20;
  void **v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  uint8_t *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  id v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **aBlock;
  _QWORD v65[4];
  uint64_t v66;

  v62 = a4;
  v58 = a1;
  v10 = type metadata accessor for WidgetFamily(0);
  v60 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  v11 = *(_QWORD *)(v60 + 64);
  __chkstk_darwin(v10);
  v59 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_10008E730, 32, 7);
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  v63 = v12;
  v13 = qword_1000906F8;
  swift_retain(a6);
  if (v13 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000A720(v14, (uint64_t)qword_1000959D8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "fetchAppDisplayDataForContinuePlaying", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = (void *)sub_10006B320();
  if (v19)
  {
    v20 = v19;
    v21 = v19;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    v24 = os_log_type_enabled(v22, v23);
    v56 = a2;
    v57 = a3;
    v54 = v11;
    if (v24)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      aBlock = v21;
      v27 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v65);
      *v26 = v20;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Current player is %@", v25, 0xCu);
      v28 = sub_100006454(&qword_100091C00);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    v32 = objc_msgSend((id)objc_opt_self(GKDaemonProxy), "proxyForPlayer:", v21);
    v55 = objc_msgSend(v32, "gameServicePrivate");

    v33 = objc_msgSend(v21, "internal");
    v34 = objc_msgSend(v33, "playerID");

    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v36 = v35;
      v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    v53 = v21;
    if (qword_100090710 != -1)
      swift_once(&qword_100090710, sub_10002DC6C);
    v52 = qword_100091B60;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v39 = v59;
    v38 = v60;
    v40 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v58, v61);
    v41 = *(unsigned __int8 *)(v38 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = (v54 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v45 = swift_allocObject(&unk_10008E758, v44 + 16, v41 | 7);
    v46 = v63;
    *(_QWORD *)(v45 + 16) = sub_10003B95C;
    *(_QWORD *)(v45 + 24) = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v45 + v42, v39, v40);
    *(_QWORD *)(v45 + v43) = v62;
    v47 = (_QWORD *)(v45 + v44);
    v48 = v57;
    *v47 = v56;
    v47[1] = v48;
    v65[3] = sub_10003BB14;
    v66 = v45;
    aBlock = _NSConcreteStackBlock;
    v65[0] = 1107296256;
    v65[1] = sub_100033B84;
    v65[2] = &unk_10008E770;
    v49 = _Block_copy(&aBlock);
    v50 = v66;
    swift_bridgeObjectRetain(v48);
    swift_retain(v46);
    swift_release(v50);
    v51 = v55;
    objc_msgSend(v55, "getGamesPlayedSummaries:limit:withinSecs:handler:", v34, v52, isa, v49);
    _Block_release(v49);
    swift_release(v46);

    swift_unknownObjectRelease(v51);
  }
  else
  {
    v29 = Logger.logObject.getter(0);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to get local player!", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    a5(_swiftEmptyArrayStorage, 1);
    swift_release(v63);
  }
}

void sub_10003ABD0(void **a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  _QWORD v47[2];
  os_log_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t aBlock[5];
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a3;
  v6 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v6);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v16 = (char *)v47 - v15;
  v17 = *a1;
  v18 = objc_msgSend(v17, "identifier", v14);
  if (!v18)
    goto LABEL_4;
  v19 = v18;
  v52 = v3;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  GKPlayerActivityRelationshipPlayer.imageURL(size:)(80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease(v21);
    sub_100007928((uint64_t)v8, &qword_100090BC8);
LABEL_4:
    v22 = objc_msgSend(v17, "playerInternal");
    if (v22)
    {
      v23 = v22;
      dispatch_group_enter(a2);
      v24 = objc_msgSend(objc_allocWithZone((Class)GKPlayer), "initWithInternalRepresentation:", v23);
      v25 = (_QWORD *)swift_allocObject(&unk_10008E690, 40, 7);
      v26 = v53;
      v25[2] = v53;
      v25[3] = v23;
      v25[4] = a2;
      aBlock[4] = (uint64_t)sub_10003B93C;
      v55 = v25;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000359B0;
      aBlock[3] = (uint64_t)&unk_10008E6A8;
      v27 = _Block_copy(aBlock);
      v28 = v55;
      swift_retain(v26);
      v29 = a2;
      v30 = v23;
      swift_release(v28);
      objc_msgSend(v24, "playerAvatarImageWithSize:completionHandler:", 0x10000, v27);
      _Block_release(v27);

    }
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
  dispatch_group_enter(a2);
  if (qword_100090708 != -1)
    swift_once(&qword_100090708, sub_100029CF8);
  v31 = type metadata accessor for Logger(0);
  sub_10000A720(v31, (uint64_t)qword_100095A08);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v16, v9);
  swift_bridgeObjectRetain_n(v21, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    v36 = swift_slowAlloc(22, -1);
    v50 = swift_slowAlloc(64, -1);
    aBlock[0] = v50;
    *(_DWORD *)v36 = 136315394;
    v47[1] = v36 + 4;
    v37 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v49 = v35;
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v9, v37);
    v40 = v39;
    v56 = sub_1000155A4(v38, v39, aBlock);
    v48 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease(v40);
    v41 = *(void (**)(char *, uint64_t))(v10 + 8);
    v41(v12, v9);
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain(v21);
    v42 = v51;
    v56 = sub_1000155A4(v51, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
    swift_bridgeObjectRelease_n(v21, 3);
    v43 = v48;
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Fetching avatar %s for %s", (uint8_t *)v36, 0x16u);
    v44 = v50;
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    v41 = *(void (**)(char *, uint64_t))(v10 + 8);
    v41(v12, v9);

    swift_bridgeObjectRelease_n(v21, 2);
    v42 = v51;
  }
  swift_bridgeObjectRetain(v21);
  v45 = v53;
  swift_retain(v53);
  v46 = a2;
  sub_10000AD40((uint64_t)v16, v42, v21, v45, v42, v21, v46);
  swift_release(v45);
  swift_bridgeObjectRelease_n(v21, 2);

  v41(v16, v9);
}

id sub_10003B0B0(void **a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (**v10)(uint64_t, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  id result;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v56 = a3;
  v6 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(void (***)(uint64_t, char *, uint64_t))(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v57 = (uint64_t)&v49 - v13;
  v14 = *a1;
  if (qword_100090708 != -1)
    swift_once(&qword_100090708, sub_100029CF8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10000A720(v15, (uint64_t)qword_100095A08);
  v17 = v14;
  v53 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v52 = v3;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(8, -1);
    v51 = v9;
    v49 = (_QWORD *)v22;
    v55 = a2;
    *(_DWORD *)v21 = 138412290;
    v60 = (uint64_t)v17;
    v23 = v17;
    v50 = v8;
    v24 = v23;
    a2 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    v25 = v49;
    *v49 = v17;

    v8 = v50;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "game is %@", v21, 0xCu);
    v26 = sub_100006454(&qword_100091C00);
    swift_arrayDestroy(v25, 1, v26);
    v9 = v51;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  result = objc_msgSend(v17, "identifier");
  if (result)
  {
    v28 = result;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v31 = v30;

    GKPlayerActivityRelationshipGame.imageURL(size:)(80);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v10[6])(v8, 1, v9) == 1)
    {
      swift_bridgeObjectRelease(v31);
      return (id)sub_100007928((uint64_t)v8, &qword_100090BC8);
    }
    else
    {
      v52 = v29;
      v32 = v57;
      v10[4](v57, v8, v9);
      dispatch_group_enter(a2);
      v33 = v54;
      v10[2]((uint64_t)v54, (char *)v32, v9);
      swift_bridgeObjectRetain_n(v31, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      v37 = v36;
      if (os_log_type_enabled(v35, v36))
      {
        v38 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(64, -1);
        v60 = v53;
        *(_DWORD *)v38 = 136315394;
        v50 = (char *)v10;
        v39 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        LODWORD(v51) = v37;
        v40 = dispatch thunk of CustomStringConvertible.description.getter(v9, v39);
        v42 = v41;
        v58 = sub_1000155A4(v40, v41, &v60);
        v55 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        swift_bridgeObjectRelease(v42);
        v43 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v50 + 1);
        ((void (*)(char *, uint64_t))v43)(v33, v9);
        *(_WORD *)(v38 + 12) = 2080;
        swift_bridgeObjectRetain(v31);
        v44 = v52;
        v58 = sub_1000155A4(v52, v31, &v60);
        a2 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        swift_bridgeObjectRelease_n(v31, 3);
        _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v51, "Fetching icon %s for %s", (uint8_t *)v38, 0x16u);
        v45 = v53;
        swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {
        v43 = v10[1];
        ((void (*)(char *, uint64_t))v43)(v33, v9);

        swift_bridgeObjectRelease_n(v31, 2);
        v44 = v52;
      }
      swift_bridgeObjectRetain(v31);
      v46 = v56;
      swift_retain(v56);
      v47 = a2;
      v48 = v57;
      sub_10000AD40(v57, v44, v31, v46, v44, v31, v47);
      swift_release(v46);
      swift_bridgeObjectRelease_n(v31, 2);

      return (id)((uint64_t (*)(uint64_t, uint64_t))v43)(v48, v9);
    }
  }
  return result;
}

void sub_10003B5F8(id *a1, NSObject *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "relationships");
  v7 = objc_msgSend(v6, "players");

  if (v7)
  {
    v8 = sub_100011E4C(0, &qword_100090CD8, GKPlayerActivityRelationshipPlayer_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v14 = v9;
      else
        v14 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v10 = _CocoaArrayWrapper.endIndex.getter(v14);
      if (v10)
        goto LABEL_4;
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v9);
      if (v10)
      {
LABEL_4:
        if (v10 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        v11 = 0;
        do
        {
          if ((v9 & 0xC000000000000001) != 0)
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
          else
            v12 = *(id *)(v9 + 8 * v11 + 32);
          v13 = v12;
          ++v11;
          v24 = v12;
          sub_10003ABD0(&v24, a2, a3);

        }
        while (v10 != v11);
      }
    }
    swift_bridgeObjectRelease_n(v9, 2);
  }
  v15 = objc_msgSend(v5, "relationships");
  v16 = objc_msgSend(v15, "games");

  if (!v16)
    return;
  v17 = sub_100011E4C(0, &qword_100090CD0, GKPlayerActivityRelationshipGame_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v23 = v18;
    else
      v23 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v19 = _CocoaArrayWrapper.endIndex.getter(v23);
    if (v19)
    {
LABEL_18:
      if (v19 >= 1)
      {
        v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
          else
            v21 = *(id *)(v18 + 8 * v20 + 32);
          v22 = v21;
          ++v20;
          v24 = v21;
          sub_10003B0B0(&v24, a2, a3);

        }
        while (v19 != v20);
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return;
    }
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v18);
    if (v19)
      goto LABEL_18;
  }
LABEL_28:
  swift_bridgeObjectRelease_n(v18, 2);
}

uint64_t sub_10003B87C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003B8B0()
{
  uint64_t v0;

  return sub_100035A2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 32));
}

unint64_t sub_10003B8BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091C20;
  if (!qword_100091C20)
  {
    v1 = sub_100006494(&qword_100091C18);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100091C20);
  }
  return result;
}

uint64_t sub_10003B908()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10003B93C(void *a1, int a2, int a3)
{
  uint64_t v3;

  sub_1000358B4(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(dispatch_group_t *)(v3 + 32));
}

uint64_t type metadata accessor for GameCenterStore.CacheConfig(uint64_t a1)
{
  return sub_10003C274(a1, qword_100091DB8, (uint64_t)&nominal type descriptor for GameCenterStore.CacheConfig);
}

uint64_t sub_10003B95C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10003B97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10003BA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002E1BC(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(_QWORD *, uint64_t))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10003BA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10003BB14(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002E260(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (v2 + v6), *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10003BB88(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10003BBC4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10003BBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

void sub_10003BC9C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000304F4(a1, *(_QWORD *)(v1 + 16), *(unint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10003BD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100091C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10003BD6C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10003BD80(uint64_t a1, uint64_t a2)
{
  return sub_10003BE8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_100031220);
}

uint64_t sub_10003BD90()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for AppMetadata(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[11]));

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10003BE80(uint64_t a1, uint64_t a2)
{
  return sub_10003BE8C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1000315AC);
}

uint64_t sub_10003BE8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = *(_QWORD *)(type metadata accessor for AppMetadata(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(a1, a2, *(_QWORD *)(v3 + 16), v3 + v7, *(_QWORD *)(v3 + v8), *(_QWORD *)(v3 + ((v8 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10003BF0C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = (int *)type metadata accessor for AppMetadata(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + v7 + 16) & ~v10;
  v12 = v3 | v10 | 7;
  v13 = (*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = v12;
  v14 = v0 + v4;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v1[10]));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v1[11]));

  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);
  swift_release(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v13 + 8, v17);
}

void sub_10003C084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(type metadata accessor for AppMetadata(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + v10 + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  sub_1000319C0(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(NSObject **)(v2 + v7), *(_QWORD *)(v2 + v8), *(_QWORD **)(v2 + v9), *(_QWORD *)(v2 + v10), *(_QWORD *)(v2 + v10 + 8), v2 + v12, *(_QWORD *)(v2 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10003C168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10003C20C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100032954(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(_QWORD *, uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t type metadata accessor for WidgetCreationAttempt(uint64_t a1)
{
  return sub_10003C274(a1, qword_100091D18, (uint64_t)&nominal type descriptor for WidgetCreationAttempt);
}

uint64_t sub_10003C274(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

_QWORD *sub_10003C2A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_10003C358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_10003C3A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_10003C424(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10003C4C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_10003C53C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10003C5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C5D4);
}

uint64_t sub_10003C5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003C654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C660);
}

uint64_t sub_10003C660(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10003C6DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100071D88;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100071DA0;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CacheType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CacheType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003C7FC + 4 * byte_100071D35[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003C81C + 4 * byte_100071D3A[v4]))();
}

_BYTE *sub_10003C7FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003C81C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003C824(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003C82C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003C834(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003C83C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10003C848()
{
  return 0;
}

ValueMetadata *type metadata accessor for CacheType()
{
  return &type metadata for CacheType;
}

uint64_t *sub_10003C860(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

uint64_t sub_10003C918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10003C970(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_10003C9FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003CAB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003CB20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003CBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003CBC0);
}

uint64_t sub_10003CBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003CC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003CC4C);
}

uint64_t sub_10003CC4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10003CCC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100071DA0;
    v4[2] = &unk_100071DA0;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10003CD4C()
{
  unint64_t result;

  result = qword_100091DF8;
  if (!qword_100091DF8)
  {
    result = swift_getWitnessTable(&unk_100071E10, &type metadata for CacheType);
    atomic_store(result, (unint64_t *)&qword_100091DF8);
  }
  return result;
}

_QWORD *sub_10003CD90(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10003CDB4()
{
  unint64_t result;

  result = qword_100091E08;
  if (!qword_100091E08)
  {
    result = swift_getWitnessTable(&unk_100071F74, &type metadata for WidgetCreationAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091E08);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for WidgetCreationAttempt.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetCreationAttempt.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetCreationAttempt.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003CEE0 + 4 * byte_100071D44[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003CF14 + 4 * byte_100071D3F[v4]))();
}

uint64_t sub_10003CF14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CF1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003CF24);
  return result;
}

uint64_t sub_10003CF30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003CF38);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003CF3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CF44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CF50(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10003CF58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WidgetCreationAttempt.CodingKeys()
{
  return &type metadata for WidgetCreationAttempt.CodingKeys;
}

unint64_t sub_10003CF74()
{
  unint64_t result;

  result = qword_100091E18;
  if (!qword_100091E18)
  {
    result = swift_getWitnessTable(&unk_100071F4C, &type metadata for WidgetCreationAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091E18);
  }
  return result;
}

unint64_t sub_10003CFBC()
{
  unint64_t result;

  result = qword_100091E20;
  if (!qword_100091E20)
  {
    result = swift_getWitnessTable(&unk_100071EBC, &type metadata for WidgetCreationAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091E20);
  }
  return result;
}

unint64_t sub_10003D004()
{
  unint64_t result;

  result = qword_100091E28;
  if (!qword_100091E28)
  {
    result = swift_getWitnessTable(&unk_100071EE4, &type metadata for WidgetCreationAttempt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100091E28);
  }
  return result;
}

_QWORD *sub_10003D088(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for CPTimelineEntry(0);
    v9 = v8[5];
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    *((_BYTE *)a1 + v8[9]) = *((_BYTE *)a2 + v8[9]);
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for GeometryProxy(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v10);
    v15(v12, v13, v14);
    v16 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
    v17 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v18 = (_QWORD *)((char *)a1 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = sub_100006454(&qword_1000908D8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v24 = *v19;
      *v18 = *v19;
      swift_retain(v24);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v25 = a3[10];
    v26 = (_QWORD *)((char *)a1 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = v26;
      v31 = v28;
      v32 = 1;
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v30 = v26;
      v31 = v28;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
    v34 = a3[11];
    v35 = (_QWORD *)((char *)a1 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
      v39 = v35;
      v40 = v37;
      v41 = 1;
    }
    else
    {
      v42 = *v36;
      *v35 = *v36;
      swift_retain(v42);
      v39 = v35;
      v40 = v37;
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v40, v41);
    v43 = a3[12];
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = v44;
      v49 = v46;
      v50 = 1;
    }
    else
    {
      v51 = *v45;
      *v44 = *v45;
      swift_retain(v51);
      v48 = v44;
      v49 = v46;
      v50 = 0;
    }
    swift_storeEnumTagMultiPayload(v48, v49, v50);
  }
  return a1;
}

uint64_t sub_10003D394(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  v6 = a1 + a2[5];
  v7 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (_QWORD *)(a1 + a2[9]);
  v9 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + a2[10]);
  v12 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(a1 + a2[11]);
  v15 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(a1 + a2[12]);
  v18 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v17, v18) != 1)
    return swift_release(*v17);
  v19 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
}

uint64_t sub_10003D554(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CPTimelineEntry(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for GeometryProxy(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  v15 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = a3[10];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
    v28 = v24;
    v29 = v26;
    v30 = 1;
  }
  else
  {
    v31 = *v25;
    *v24 = *v25;
    swift_retain(v31);
    v28 = v24;
    v29 = v26;
    v30 = 0;
  }
  swift_storeEnumTagMultiPayload(v28, v29, v30);
  v32 = a3[11];
  v33 = (uint64_t *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v35 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
    v37 = v33;
    v38 = v35;
    v39 = 1;
  }
  else
  {
    v40 = *v34;
    *v33 = *v34;
    swift_retain(v40);
    v37 = v33;
    v38 = v35;
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v37, v38, v39);
  v41 = a3[12];
  v42 = (uint64_t *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v44 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v45 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
    v46 = v42;
    v47 = v44;
    v48 = 1;
  }
  else
  {
    v49 = *v43;
    *v42 = *v43;
    swift_retain(v49);
    v46 = v42;
    v47 = v44;
    v48 = 0;
  }
  swift_storeEnumTagMultiPayload(v46, v47, v48);
  return a1;
}

uint64_t sub_10003D834(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CPTimelineEntry(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v11 = a3[5];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v15 = a3[9];
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_100007928(a1 + v15, &qword_1000908D8);
    v18 = sub_100006454(&qword_1000908D8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
    v22 = a3[10];
    v23 = (uint64_t *)(a1 + v22);
    v24 = (uint64_t *)(a2 + v22);
    sub_100007928(a1 + v22, &qword_1000907A8);
    v25 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
      v27 = v23;
      v28 = v25;
      v29 = 1;
    }
    else
    {
      v30 = *v24;
      *v23 = *v24;
      swift_retain(v30);
      v27 = v23;
      v28 = v25;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    v31 = a3[11];
    v32 = (uint64_t *)(a1 + v31);
    v33 = (uint64_t *)(a2 + v31);
    sub_100007928(a1 + v31, &qword_1000907B0);
    v34 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
      v36 = v32;
      v37 = v34;
      v38 = 1;
    }
    else
    {
      v39 = *v33;
      *v32 = *v33;
      swift_retain(v39);
      v36 = v32;
      v37 = v34;
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v36, v37, v38);
    v40 = a3[12];
    v41 = (uint64_t *)(a1 + v40);
    v42 = (uint64_t *)(a2 + v40);
    sub_100007928(a1 + v40, &qword_1000908D0);
    v43 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
      v45 = v41;
      v46 = v43;
      v47 = 1;
    }
    else
    {
      v48 = *v42;
      *v41 = *v42;
      swift_retain(v48);
      v45 = v41;
      v46 = v43;
      v47 = 0;
    }
    swift_storeEnumTagMultiPayload(v45, v46, v47);
  }
  return a1;
}

uint64_t sub_10003DB64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[10];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  v23 = a3[11];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
    swift_storeEnumTagMultiPayload(v24, v26, 1);
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  v28 = a3[12];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
    swift_storeEnumTagMultiPayload(v29, v31, 1);
  }
  else
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10003DE28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CPTimelineEntry(0);
  v8 = v7[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + v7[6]) = *(_BYTE *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  if (a1 != a2)
  {
    v15 = a3[9];
    v16 = (void *)(a1 + v15);
    v17 = (const void *)(a2 + v15);
    sub_100007928(a1 + v15, &qword_1000908D8);
    v18 = sub_100006454(&qword_1000908D8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v20 = a3[10];
    v21 = (void *)(a1 + v20);
    v22 = (const void *)(a2 + v20);
    sub_100007928(a1 + v20, &qword_1000907A8);
    v23 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    v25 = a3[11];
    v26 = (void *)(a1 + v25);
    v27 = (const void *)(a2 + v25);
    sub_100007928(a1 + v25, &qword_1000907B0);
    v28 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v26, v27, v29);
      swift_storeEnumTagMultiPayload(v26, v28, 1);
    }
    else
    {
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    v30 = a3[12];
    v31 = (void *)(a1 + v30);
    v32 = (const void *)(a2 + v30);
    sub_100007928(a1 + v30, &qword_1000908D0);
    v33 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
      swift_storeEnumTagMultiPayload(v31, v33, 1);
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10003E144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E150);
}

uint64_t sub_10003E150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for CPTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for GeometryProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v14 = sub_100006454(&qword_100091570);
    v10 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v14;
      v12 = a3[9];
    }
    else
    {
      v15 = sub_100006454(&qword_1000907B8);
      v10 = *(_QWORD *)(v15 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v15;
        v12 = a3[10];
      }
      else
      {
        v16 = sub_100006454(&qword_1000907C0);
        v10 = *(_QWORD *)(v16 - 8);
        if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
        {
          v11 = v16;
          v12 = a3[11];
        }
        else
        {
          v11 = sub_100006454(&qword_1000908C0);
          v10 = *(_QWORD *)(v11 - 8);
          v12 = a3[12];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[8]);
  if (v13 >= 2)
    return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10003E2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E2B0);
}

uint64_t sub_10003E2B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = type metadata accessor for CPTimelineEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for GeometryProxy(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[8]) = a2 + 1;
        return result;
      }
      v16 = sub_100006454(&qword_100091570);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[9];
      }
      else
      {
        v17 = sub_100006454(&qword_1000907B8);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[10];
        }
        else
        {
          v18 = sub_100006454(&qword_1000907C0);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[11];
          }
          else
          {
            v10 = sub_100006454(&qword_1000908C0);
            v14 = *(_QWORD *)(v10 - 8);
            v15 = a4[12];
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CPAppGridView(uint64_t a1)
{
  uint64_t result;

  result = qword_100091E88;
  if (!qword_100091E88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPAppGridView);
  return result;
}

void sub_10003E42C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[9];

  v2 = type metadata accessor for CPTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for GeometryProxy(319);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      v14[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v14[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v14[4] = &unk_100072018;
      sub_10000764C(319, (unint64_t *)&unk_1000915E0, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
      if (v7 <= 0x3F)
      {
        v14[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
        if (v9 <= 0x3F)
        {
          v14[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
          if (v11 <= 0x3F)
          {
            v14[7] = *(_QWORD *)(v10 - 8) + 64;
            sub_10000764C(319, (unint64_t *)&unk_1000912E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
            if (v13 <= 0x3F)
            {
              v14[8] = *(_QWORD *)(v12 - 8) + 64;
              swift_initStructMetadata(a1, 256, 9, v14, a1 + 16);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10003E578(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074CA4, 1);
}

uint64_t sub_10003E588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  id v18;
  uint64_t v19;
  double v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for ColorScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - v13;
  type metadata accessor for CPAppGridView(0);
  v26 = v0;
  v15 = sub_100015074((uint64_t)v14);
  static WidgetRenderingMode.accented.getter(v15);
  v16 = static WidgetRenderingMode.== infix(_:_:)(v14, v11);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  v17(v14, v8);
  v18 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray4Color");
  v19 = Color.init(_:)(v18);
  v20 = 0.25;
  if ((v16 & 1) == 0)
  {
    sub_1000152D8((uint64_t)v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ColorScheme.dark(_:), v1);
    v21 = static ColorScheme.== infix(_:_:)(v7, v4);
    v22 = *(void (**)(char *, uint64_t))(v2 + 8);
    v22(v4, v1);
    v22(v7, v1);
    v20 = 0.5;
    if ((v21 & 1) != 0)
      v20 = 0.25;
  }
  v23 = Color.opacity(_:)(v20);
  swift_release(v19);
  return v23;
}

uint64_t sub_10003E778@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a1;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - v7;
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - v14;
  type metadata accessor for CPAppGridView(0);
  v28 = v1;
  v16 = sub_100015074((uint64_t)v15);
  static WidgetRenderingMode.accented.getter(v16);
  v17 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v9, v17);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  v19(v15, v9);
  if ((v18 & 1) != 0)
  {
    v20 = enum case for BlendMode.normal(_:);
    v21 = type metadata accessor for BlendMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v29, v20, v21);
  }
  else
  {
    v23 = v29;
    sub_1000152D8((uint64_t)v8);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.dark(_:), v2);
    v24 = static ColorScheme.== infix(_:_:)(v8, v5);
    v25 = *(void (**)(char *, uint64_t))(v3 + 8);
    v25(v5, v2);
    v25(v8, v2);
    v26 = type metadata accessor for BlendMode(0);
    if ((v24 & 1) != 0)
      v27 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    else
      v27 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v23, *v27, v26);
  }
}

double sub_10003E9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  int v12;
  int v13;
  int v14;
  double v15;
  uint64_t v18;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CPAppGridView(0);
  sub_100014E8C((uint64_t)v3);
  v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if ((_DWORD)v4 == enum case for WidgetFamily.systemSmall(_:)
    || (_DWORD)v4 == enum case for WidgetFamily.systemMedium(_:))
  {
    GeometryProxy.size.getter(v4);
    v7 = 0.43;
LABEL_11:
    v9 = v6 * v7;
    return round(v9);
  }
  v8 = v4;
  if ((_DWORD)v4 == enum case for WidgetFamily.systemLarge(_:))
  {
    v9 = GeometryProxy.size.getter(v4) * 0.26;
    return round(v9);
  }
  if ((_DWORD)v4 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    GeometryProxy.size.getter(v4);
    v7 = 0.28;
    goto LABEL_11;
  }
  v12 = enum case for WidgetFamily.accessoryCircular(_:);
  v13 = enum case for WidgetFamily.accessoryRectangular(_:);
  v14 = enum case for WidgetFamily.accessoryInline(_:);
  GeometryProxy.size.getter(v4);
  v10 = round(v15 * 0.43);
  if (v8 != v12 && v8 != v13 && v8 != v14)
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v10;
}

uint64_t sub_10003EB5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v3 = sub_100006454(&qword_100091EE0);
  __chkstk_darwin(v3);
  v41 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006454(&qword_100091EE8);
  __chkstk_darwin(v42);
  v43 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - v11;
  type metadata accessor for CPAppGridView(0);
  sub_100014E8C((uint64_t)v12);
  v13 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  v14 = v13(v12, v6);
  v15 = enum case for WidgetFamily.systemExtraLarge(_:);
  if ((_DWORD)v14 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    GeometryProxy.size.getter(v14);
    v17 = round(v16 * 0.14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v17 = 0.0;
  }
  sub_100014E8C((uint64_t)v9);
  v18 = v13(v9, v6);
  v19 = 16.0;
  v20 = (uint64_t)v41;
  if ((_DWORD)v18 != v15)
  {
    v18 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v19 = 0.0;
  }
  *(_QWORD *)v20 = static HorizontalAlignment.center.getter(v18);
  *(_QWORD *)(v20 + 8) = 0;
  *(_BYTE *)(v20 + 16) = 0;
  v21 = sub_100006454(&qword_100091EF0);
  v22 = sub_10003EE74(a1, (_QWORD *)(v20 + *(int *)(v21 + 44)), v17);
  v23 = static Edge.Set.bottom.getter(v22);
  v24 = static Edge.Set.trailing.getter();
  v25 = v24;
  v26 = static Edge.Set.leading.getter(v24);
  v27 = Edge.Set.init(rawValue:)(0);
  v28 = Edge.Set.init(rawValue:)(v27);
  if (Edge.Set.init(rawValue:)(v28 & v23) != v23)
    v27 = Edge.Set.init(rawValue:)(v27 | v23);
  v29 = Edge.Set.init(rawValue:)(v27);
  if (Edge.Set.init(rawValue:)(v29 & v25) != v25)
    v27 = Edge.Set.init(rawValue:)(v27 | v25);
  v30 = Edge.Set.init(rawValue:)(v27);
  if (Edge.Set.init(rawValue:)(v30 & v26) != v26)
    LOBYTE(v27) = Edge.Set.init(rawValue:)(v27 | v26);
  v31 = EdgeInsets.init(_all:)(v19);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = v43;
  sub_100007964(v20, v43, &qword_100091EE0);
  v39 = v38 + *(int *)(v42 + 36);
  *(_BYTE *)v39 = v27;
  *(double *)(v39 + 8) = v31;
  *(_QWORD *)(v39 + 16) = v33;
  *(_QWORD *)(v39 + 24) = v35;
  *(_QWORD *)(v39 + 32) = v37;
  *(_BYTE *)(v39 + 40) = 0;
  sub_100007928(v20, &qword_100091EE0);
  return sub_100007A2C(v38, v44, &qword_100091EE8);
}

uint64_t sub_10003EE74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t (*v26)(char *, uint64_t);
  int v27;
  int v28;
  int v29;
  int v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;

  v74 = a2;
  v5 = type metadata accessor for CPAppGridView(0);
  v67 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v68 = v6;
  v69 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100091EF8);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = sub_100006454(&qword_100091F00);
  __chkstk_darwin(v71);
  v73 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v70 = (uint64_t)&v66 - v12;
  __chkstk_darwin(v13);
  v72 = (uint64_t)&v66 - v14;
  v15 = type metadata accessor for WidgetFamily(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v66 - v20;
  v22 = sub_10003E9A4();
  v24 = v23;
  v25 = sub_10003E9A4();
  v75 = v5;
  sub_100014E8C((uint64_t)v21);
  v66 = v16;
  v26 = *(uint64_t (**)(char *, uint64_t))(v16 + 88);
  v27 = v26(v21, v15);
  v28 = enum case for WidgetFamily.systemSmall(_:);
  v29 = enum case for WidgetFamily.systemMedium(_:);
  if (v27 == enum case for WidgetFamily.systemSmall(_:) || v27 == enum case for WidgetFamily.systemMedium(_:))
  {
    v25 = v25 + 4.0;
    v31 = enum case for WidgetFamily.systemLarge(_:);
  }
  else
  {
    v31 = enum case for WidgetFamily.systemLarge(_:);
    if (v27 == enum case for WidgetFamily.systemLarge(_:))
    {
      v31 = v27;
    }
    else if (v27 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v25 = v25 + 8.0;
    }
    else if (v27 != enum case for WidgetFamily.accessoryCircular(_:)
           && v27 != enum case for WidgetFamily.accessoryRectangular(_:)
           && v27 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v21, v15);
    }
  }
  sub_100014E8C((uint64_t)v18);
  v32 = v26(v18, v15);
  v33 = 0.0;
  if ((_DWORD)v32 != v28 && (_DWORD)v32 != v29 && (_DWORD)v32 != v31)
  {
    if ((_DWORD)v32 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v34 = v75;
      GeometryProxy.size.getter(v32);
      v33 = round(v35 * 0.08);
      goto LABEL_25;
    }
    if ((_DWORD)v32 != enum case for WidgetFamily.accessoryCircular(_:)
      && (_DWORD)v32 != enum case for WidgetFamily.accessoryRectangular(_:)
      && (_DWORD)v32 != enum case for WidgetFamily.accessoryInline(_:))
    {
      v32 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v18, v15);
    }
  }
  v34 = v75;
LABEL_25:
  result = static HorizontalAlignment.center.getter(v32);
  *(_QWORD *)v9 = result;
  v9[1] = v33;
  *((_BYTE *)v9 + 16) = 0;
  v37 = *(_QWORD *)(a1 + *(int *)(v34 + 24));
  if (v37 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_100006454(&qword_100091F08);
    v38 = v69;
    sub_100007AF4(a1, v69, type metadata accessor for CPAppGridView);
    v39 = *(unsigned __int8 *)(v67 + 80);
    v40 = (v39 + 16) & ~v39;
    v41 = (v68 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_10008EAE0, v42 + 8, v39 | 7);
    sub_100042048(v38, v43 + v40);
    v44 = (double *)(v43 + v41);
    *v44 = v22;
    *((_QWORD *)v44 + 1) = v24;
    *(double *)(v43 + v42) = v25;
    v45 = sub_100006454(&qword_100091F10);
    v46 = sub_1000078D8(&qword_100091F18, &qword_100091F10, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v47 = ForEach<>.init(_:content:)(0, v37, sub_1000422E0, v43, v45, v46);
    v48 = static Edge.Set.top.getter(v47);
    v49 = Edge.Set.init(rawValue:)(0);
    v50 = v49;
    v51 = Edge.Set.init(rawValue:)(v49);
    if (Edge.Set.init(rawValue:)(v51 & v48) != v48)
      LOBYTE(v50) = Edge.Set.init(rawValue:)(v50 | v48);
    v52 = EdgeInsets.init(_all:)(a3);
    v54 = v53;
    v56 = v55;
    v58 = v57;
    v59 = v70;
    sub_100007964((uint64_t)v9, v70, &qword_100091EF8);
    v60 = v59 + *(int *)(v71 + 36);
    *(_BYTE *)v60 = v50;
    *(double *)(v60 + 8) = v52;
    *(_QWORD *)(v60 + 16) = v54;
    *(_QWORD *)(v60 + 24) = v56;
    *(_QWORD *)(v60 + 32) = v58;
    *(_BYTE *)(v60 + 40) = 0;
    sub_100007928((uint64_t)v9, &qword_100091EF8);
    v61 = v72;
    sub_100007A2C(v59, v72, &qword_100091F00);
    v62 = v73;
    sub_100007964(v61, v73, &qword_100091F00);
    v63 = v74;
    *v74 = 0;
    *((_BYTE *)v63 + 8) = 0;
    v64 = sub_100006454(&qword_100091F20);
    sub_100007964(v62, (uint64_t)v63 + *(int *)(v64 + 48), &qword_100091F00);
    v65 = (char *)v63 + *(int *)(v64 + 64);
    *(_QWORD *)v65 = 0;
    v65[8] = 0;
    sub_100007928(v61, &qword_100091F00);
    return sub_100007928(v62, &qword_100091F00);
  }
  return result;
}

uint64_t sub_10003F3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v12 = type metadata accessor for CPAppGridView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  v17 = (char *)&v52 - v16;
  v18 = sub_100006454(&qword_100091F28);
  __chkstk_darwin(v18);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100006454(&qword_100091F30);
  __chkstk_darwin(v59);
  v58 = (uint64_t)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v52 - v24;
  *(_QWORD *)v20 = static VerticalAlignment.center.getter(v23);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 0;
  result = sub_100006454(&qword_100091F38);
  v27 = *(_QWORD *)(a2 + *(int *)(v12 + 28));
  v28 = a1 * v27;
  if ((unsigned __int128)(a1 * (__int128)v27) >> 64 != (a1 * v27) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  v29 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v30 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v31 = v30 * v27;
  if ((unsigned __int128)(v30 * (__int128)v27) >> 64 != (v30 * v27) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v31 + 1;
  if (__OFADD__(v31, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v32 < v29)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v52 = a1;
  v53 = v29;
  v56 = a3;
  v54 = &v20[*(int *)(result + 44)];
  sub_100007AF4(a2, (uint64_t)v17, type metadata accessor for CPAppGridView);
  v33 = *(unsigned __int8 *)(v13 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = (v14 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = a2;
  v36 = v12;
  v37 = (uint64_t)v25;
  v38 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_10008EB08, v39 + 8, v33 | 7);
  sub_100042048((uint64_t)v17, v40 + v34);
  v41 = (double *)(v40 + v35);
  *v41 = a4;
  v41[1] = a5;
  *(double *)(v40 + v38) = a6;
  v42 = v37;
  *(_QWORD *)(v40 + v39) = v32;
  v43 = sub_100006454(&qword_100091F40);
  v44 = sub_1000078D8(&qword_100091F48, &qword_100091F40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:content:)(v53, v32, sub_100042560, v40, v43, v44);
  v45 = v58;
  sub_100007964((uint64_t)v20, v58, &qword_100091F28);
  *(_QWORD *)(v45 + *(int *)(v59 + 36)) = 0x4024000000000000;
  sub_100007928((uint64_t)v20, &qword_100091F28);
  sub_100007A2C(v45, v37, &qword_100091F30);
  v46 = *(_QWORD *)(v55 + *(int *)(v36 + 24));
  v47 = v57;
  sub_100007AF4(v55, v57, type metadata accessor for CPAppGridView);
  if (v46 < 2)
  {
    sub_10000A7C0(v47, type metadata accessor for CPAppGridView);
    v49 = v56;
    goto LABEL_12;
  }
  v48 = *(_QWORD *)(v47 + *(int *)(v36 + 24));
  result = sub_10000A7C0(v47, type metadata accessor for CPAppGridView);
  v49 = v56;
  if (!__OFSUB__(v48, 1))
  {
    if (v48 - 1 == v52)
    {
      v50 = 0;
LABEL_13:
      sub_100007964(v42, v45, &qword_100091F30);
      sub_100007964(v45, v49, &qword_100091F30);
      v51 = v49 + *(int *)(sub_100006454(&qword_100091F50) + 48);
      *(_QWORD *)v51 = 0;
      *(_BYTE *)(v51 + 8) = 0;
      *(_BYTE *)(v51 + 9) = v50;
      sub_100007928(v42, &qword_100091F30);
      return sub_100007928(v45, &qword_100091F30);
    }
LABEL_12:
    v50 = 1;
    goto LABEL_13;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_10003F7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  _OWORD v85[7];

  v82 = a3;
  v83 = a1;
  v75 = a4;
  v11 = sub_100006454(&qword_100091F58);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_100006454(&qword_100091F60);
  __chkstk_darwin(v80);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100006454(&qword_100091F68);
  v72 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v71 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v69 - v18;
  v76 = sub_100006454(&qword_100091F70);
  __chkstk_darwin(v76);
  v79 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006454(&qword_100091F78);
  __chkstk_darwin(v77);
  v70 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v69 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v69 - v29;
  v31 = sub_100006454(&qword_100091F80);
  __chkstk_darwin(v31);
  v74 = (uint64_t)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v78 = (char *)&v69 - v34;
  v73 = *(unsigned __int8 *)(a2 + *(int *)(type metadata accessor for CPAppGridView(0) + 32));
  v35 = *(unsigned __int8 *)(a2 + v22[6]);
  sub_100007AF4(a2, (uint64_t)v30, type metadata accessor for CPTimelineEntry);
  if (v35 != 1)
  {
    sub_10000A7C0((uint64_t)v30, type metadata accessor for CPTimelineEntry);
    sub_100007AF4(a2, (uint64_t)v27, type metadata accessor for CPTimelineEntry);
    goto LABEL_15;
  }
  v36 = v30[v22[9]];
  sub_10000A7C0((uint64_t)v30, type metadata accessor for CPTimelineEntry);
  sub_100007AF4(a2, (uint64_t)v27, type metadata accessor for CPTimelineEntry);
  if ((v36 & 1) == 0)
  {
LABEL_15:
    v39 = v83;
    goto LABEL_16;
  }
  v37 = *(_QWORD *)&v27[v22[5]];
  if ((unint64_t)v37 >> 62)
    goto LABEL_23;
  v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v39 = v83;
    v40 = sub_10000A7C0((uint64_t)v27, type metadata accessor for CPTimelineEntry);
    if (!v38)
      goto LABEL_17;
    sub_100007AF4(a2, (uint64_t)v24, type metadata accessor for CPTimelineEntry);
    if (v39 < 0)
    {
      v27 = v24;
LABEL_16:
      v40 = sub_10000A7C0((uint64_t)v27, type metadata accessor for CPTimelineEntry);
LABEL_17:
      *v13 = static HorizontalAlignment.center.getter(v40);
      v13[1] = 0x4018000000000000;
      *((_BYTE *)v13 + 16) = 0;
      v45 = sub_100006454(&qword_100091F88);
      v46.n128_f64[0] = a5;
      v47 = sub_1000416A8((uint64_t)v13 + *(int *)(v45 + 44), v46, a6, a7);
      v22 = (int *)static Alignment.center.getter(v47);
      v41 = v48;
      goto LABEL_18;
    }
    v41 = *(_QWORD *)&v24[v22[5]];
    if ((unint64_t)v41 >> 62)
    {
      if (v41 < 0)
        v64 = *(_QWORD *)&v24[v22[5]];
      else
        v64 = v41 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)&v24[v22[5]]);
      v37 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease(v41);
    }
    else
    {
      v37 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v40 = sub_10000A7C0((uint64_t)v24, type metadata accessor for CPTimelineEntry);
    if (v37 <= v39)
      goto LABEL_17;
    v42 = *(_QWORD *)(a2 + v22[5]);
    if ((v42 & 0xC000000000000001) != 0)
    {
      v22 = (int *)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v42);
      goto LABEL_13;
    }
    if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v39)
    {
      v22 = *(int **)(v42 + 8 * v39 + 32);
      swift_retain(v22);
LABEL_13:
      v24 = v70;
      sub_10003FFD8((uint64_t)v22, (uint64_t)v70, a5, a6, a7);
      v13 = &qword_100091F78;
      v27 = v79;
      sub_100007964((uint64_t)v24, (uint64_t)v79, &qword_100091F78);
      swift_storeEnumTagMultiPayload(v27, v76, 0);
      v19 = (char *)sub_100042660();
      v43 = sub_1000425DC();
      *(_QWORD *)&v85[0] = v80;
      *((_QWORD *)&v85[0] + 1) = v43;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v85, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
      a2 = (uint64_t)v78;
      _ConditionalContent<>.init(storage:)(v27, v77, v81, v19, OpaqueTypeConformance2);
      swift_release(v22);
      sub_100007928((uint64_t)v24, &qword_100091F78);
      goto LABEL_19;
    }
    __break(1u);
    v65 = static os_log_type_t.fault.getter(v40);
    v66 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

LABEL_18:
    LOBYTE(v68) = 1;
    LOBYTE(v67) = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v85, *(_QWORD *)&a7, 0, 0, 1, *(_QWORD *)&a7, 0, 0, 1, 0, v67, 0, v68, v22, v41);
    sub_100007964((uint64_t)v13, (uint64_t)v15, &qword_100091F58);
    v49 = v80;
    v50 = &v15[*(int *)(v80 + 36)];
    v51 = v85[5];
    *((_OWORD *)v50 + 4) = v85[4];
    *((_OWORD *)v50 + 5) = v51;
    *((_OWORD *)v50 + 6) = v85[6];
    v52 = v85[1];
    *(_OWORD *)v50 = v85[0];
    *((_OWORD *)v50 + 1) = v52;
    v53 = v85[3];
    *((_OWORD *)v50 + 2) = v85[2];
    *((_OWORD *)v50 + 3) = v53;
    sub_100007928((uint64_t)v13, &qword_100091F58);
    v22 = (int *)sub_1000425DC();
    v54 = v71;
    View.unredacted()(v49, v22);
    sub_100007928((uint64_t)v15, &qword_100091F60);
    v37 = v72;
    v55 = v54;
    v27 = (char *)v81;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v19, v55, v81);
    v24 = v79;
    (*(void (**)(char *, char *, char *))(v37 + 16))(v79, v19, v27);
    swift_storeEnumTagMultiPayload(v24, v76, 1);
    v13 = (uint64_t *)sub_100042660();
    v84[0] = v49;
    v84[1] = v22;
    v56 = swift_getOpaqueTypeConformance2(v84, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    a2 = (uint64_t)v78;
    _ConditionalContent<>.init(storage:)(v24, v77, v27, v13, v56);
    (*(void (**)(char *, char *))(v37 + 8))(v19, v27);
LABEL_19:
    if (!__OFSUB__(v82, 1))
      break;
    __break(1u);
LABEL_23:
    if (v37 < 0)
      v63 = v37;
    else
      v63 = v37 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v37);
    v38 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v37);
  }
  v57 = v82 - 1 <= v39;
  v58 = v74;
  sub_100007964(a2, v74, &qword_100091F80);
  v59 = v75;
  *v75 = 0;
  *((_BYTE *)v59 + 8) = 0;
  *((_BYTE *)v59 + 9) = v73 ^ 1;
  v60 = sub_100006454(&qword_100091FC8);
  sub_100007964(v58, (uint64_t)v59 + *(int *)(v60 + 48), &qword_100091F80);
  v61 = (char *)v59 + *(int *)(v60 + 64);
  *(_QWORD *)v61 = 0;
  v61[8] = 0;
  v61[9] = v57;
  sub_100007928(a2, &qword_100091F80);
  return sub_100007928(v58, &qword_100091F80);
}

uint64_t sub_10003FFD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  __n128 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  _BYTE *v48;
  _BYTE v50[16];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD v61[7];

  v6 = v5;
  v57 = a2;
  v58 = type metadata accessor for AccessibilityTraits(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v55 = &v50[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = type metadata accessor for AccessibilityChildBehavior(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100006454(&qword_100091FC0);
  __chkstk_darwin(v14);
  v16 = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_100006454(&qword_100091FA8);
  __chkstk_darwin(v17);
  v19 = &v50[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_100006454(&qword_100091FD0);
  v54 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = &v50[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = sub_100006454(&qword_100091F78);
  v23 = __chkstk_darwin(v53);
  v25 = &v50[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v16 = static Alignment.top.getter(v23);
  v16[1] = v26;
  v27 = sub_100006454(&qword_100091FD8);
  v28 = sub_10004045C(a1, v6, (uint64_t)v16 + *(int *)(v27 + 44), a3, a4, a5);
  v29 = static Alignment.center.getter(v28);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v61, *(_QWORD *)&a5, 0, 0, 1, *(_QWORD *)&a5, 0, 0, 1, 0, 1, 0, 1, v29, v30);
  sub_100007964((uint64_t)v16, (uint64_t)v19, &qword_100091FC0);
  v31 = &v19[*(int *)(v17 + 36)];
  v32 = v61[5];
  v31[4] = v61[4];
  v31[5] = v32;
  v31[6] = v61[6];
  v33 = v61[1];
  *v31 = v61[0];
  v31[1] = v33;
  v34 = v61[3];
  v31[2] = v61[2];
  v31[3] = v34;
  v35 = sub_100007928((uint64_t)v16, &qword_100091FC0);
  static AccessibilityChildBehavior.ignore.getter(v35);
  v36 = sub_10004270C();
  View.accessibilityElement(children:)(v13, v17, v36);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v13, v52);
  sub_100007928((uint64_t)v19, &qword_100091FA8);
  v37 = *(_QWORD *)(a1 + 48);
  v59 = *(_QWORD *)(a1 + 40);
  v60 = v37;
  v38 = sub_10000778C();
  swift_bridgeObjectRetain(v37);
  v39 = Text.init<A>(_:)(&v59, &type metadata for String, v38);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v59 = v17;
  v60 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibility(label:)(v39, v41, v45, v43, v20, OpaqueTypeConformance2);
  sub_100007918(v39, v41, v45);
  swift_bridgeObjectRelease(v43);
  v47 = (*(uint64_t (**)(_BYTE *, uint64_t))(v54 + 8))(v22, v20);
  v48 = v55;
  static AccessibilityTraits.isButton.getter(v47);
  ModifiedContent<>.accessibility(addTraits:)(v48, v53);
  (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v48, v58);
  return sub_100007928((uint64_t)v25, &qword_100091F78);
}

uint64_t sub_10004045C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[3];

  v111 = a3;
  v11 = sub_100006454(&qword_100091FE0);
  __chkstk_darwin(v11);
  v110 = (uint64_t)v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v102 = *(_QWORD *)(v13 - 8);
  v103 = v13;
  __chkstk_darwin(v13);
  v101 = (uint64_t)v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  __chkstk_darwin(v15);
  v104 = (uint64_t)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100006454(&qword_100091FE8);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v108 = (char *)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v105 = (char *)v86 - v19;
  v20 = sub_100006454(&qword_1000916F8);
  __chkstk_darwin(v20);
  v96 = (char *)v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Image.ResizingMode(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v23 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100006454(&qword_100091700);
  v93 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v92 = (char *)v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100006454(&qword_100091FF0);
  __chkstk_darwin(v91);
  v26 = (char *)v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100006454(&qword_100091FF8);
  __chkstk_darwin(v90);
  v97 = (uint64_t)v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100006454(&qword_100092000);
  v99 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v94 = (uint64_t)v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for WidgetRenderingMode(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v36 = (char *)v86 - v35;
  v37 = sub_100006454(&qword_100092008);
  __chkstk_darwin(v37);
  v100 = (uint64_t)v86 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v41 = (char *)v86 - v40;
  v106 = a1;
  v42 = (void *)sub_10004CF70(0x6C616D726F6ELL, 0xE600000000000000);
  if (v42)
  {
    v98 = v42;
    v86[1] = type metadata accessor for CPAppGridView(0);
    v87 = a2;
    v43 = sub_100015074((uint64_t)v36);
    static WidgetRenderingMode.accented.getter(v43);
    v44 = static WidgetRenderingMode.== infix(_:_:)(v36, v33);
    v45 = *(void (**)(char *, uint64_t))(v31 + 8);
    v45(v33, v30);
    v45(v36, v30);
    v46 = 1;
    v47 = v28;
    if ((v44 & 1) != 0)
    {
      v48 = Image.init(uiImage:)(v98);
      v49 = v88;
      v50 = v89;
      (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v23, enum case for Image.ResizingMode.stretch(_:), v89);
      v51 = Image.resizable(capInsets:resizingMode:)(v23, v48, 0.0, 0.0, 0.0, 0.0);
      swift_release(v48);
      v52 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v23, v50);
      v53 = (uint64_t)v96;
      static WidgetAccentedRenderingMode.accentedDesaturated.getter(v52);
      v54 = type metadata accessor for WidgetAccentedRenderingMode(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
      v55 = v92;
      Image.widgetAccentedRenderingMode(_:)(v53, v51);
      swift_release(v51);
      sub_100007928(v53, &qword_1000916F8);
      v56 = v93;
      v57 = v95;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v26, v55, v95);
      v58 = &v26[*(int *)(v91 + 36)];
      *(_QWORD *)v58 = 0;
      *((_WORD *)v58 + 4) = 1;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
      v59 = v97;
      sub_100007964((uint64_t)v26, v97, &qword_100091FF0);
      *(double *)(v59 + *(int *)(v90 + 36)) = a4;
      v60 = sub_100007928((uint64_t)v26, &qword_100091FF0);
      v61 = static Alignment.center.getter(v60);
      _FrameLayout.init(width:height:alignment:)(v112, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v61, v62);
      v63 = v94;
      sub_100007964(v59, v94, &qword_100091FF8);
      v64 = (_OWORD *)(v63 + *(int *)(v47 + 36));
      v65 = v112[1];
      *v64 = v112[0];
      v64[1] = v65;
      v64[2] = v112[2];
      sub_100007928(v59, &qword_100091FF8);
      sub_100007A2C(v63, (uint64_t)v41, &qword_100092000);
      v46 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v41, v46, 1, v47);
    v66 = v87;
    v67 = v101;
    sub_100014E8C(v101);
    v68 = v104;
    v69 = v106;
    sub_10004CC8C(0xD000000000000015, 0x80000001000737B0, v67, v104);
    v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 8))(v67, v103);
    __chkstk_darwin(v70);
    v71 = v98;
    v86[-6] = v66;
    v86[-5] = v71;
    *(double *)&v86[-4] = a4;
    *(double *)&v86[-3] = a5;
    v86[-2] = v69;
    *(double *)&v86[-1] = a6;
    v72 = sub_100006454(&qword_100092018);
    v73 = sub_1000078D8(&qword_100092020, &qword_100092018, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v74 = v105;
    Link.init(destination:label:)(v68, sub_100042790, &v86[-8], v72, v73);
    v75 = v100;
    sub_100007964((uint64_t)v41, v100, &qword_100092008);
    v77 = v107;
    v76 = v108;
    v78 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
    v79 = v109;
    v78(v108, v74, v109);
    v80 = v110;
    sub_100007964(v75, v110, &qword_100092008);
    v81 = sub_100006454(&qword_100092028);
    v78((char *)(v80 + *(int *)(v81 + 48)), v76, v79);

    v82 = *(void (**)(char *, uint64_t))(v77 + 8);
    v82(v74, v79);
    sub_100007928((uint64_t)v41, &qword_100092008);
    v82(v76, v79);
    sub_100007928(v75, &qword_100092008);
    v83 = sub_100006454(&qword_100092010);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v80, 0, 1, v83);
    return sub_100007A2C(v80, v111, &qword_100091FE0);
  }
  else
  {
    v85 = sub_100006454(&qword_100092010);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v111, 1, 1, v85);
  }
}

void *sub_100040CE8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v14;
  __n128 v15;
  _BYTE v17[272];
  _BYTE __src[279];

  v14 = static HorizontalAlignment.center.getter(a1);
  v15.n128_f64[0] = a5;
  sub_100040DA4(a1, a2, a3, (uint64_t)v17, v15, a6, a7);
  memcpy(&__src[7], v17, 0x110uLL);
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = 0x4020000000000000;
  *(_BYTE *)(a4 + 16) = 0;
  return memcpy((void *)(a4 + 17), __src, 0x117uLL);
}

uint64_t sub_100040DA4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>, double a6@<D1>, double a7@<D2>)
{
  double v10;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v81;
  _BYTE v82[4];
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD v100[11];
  uint64_t v101;
  _BYTE v102[7];
  char v103;
  _BYTE v104[7];
  char v105;
  _BYTE v106[7];
  char v107;
  _OWORD v108[11];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;

  v10 = a5.n128_f64[0];
  v14 = type metadata accessor for Font.Leading(0, a5);
  v86 = *(_QWORD *)(v14 - 8);
  v87 = v14;
  __chkstk_darwin(v14);
  v16 = &v82[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for WidgetFamily(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v82[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100041390(a2, &v110, v10);
  v98 = *((_QWORD *)&v110 + 1);
  v99 = v110;
  v96 = *((_QWORD *)&v111 + 1);
  v97 = v111;
  v95 = v112;
  v22 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(&v122, *(_QWORD *)&v10, 0, *(_QWORD *)&a6, 0, v22, v23);
  v93 = v124;
  v94 = v122;
  v89 = v125;
  v90 = v123;
  v91 = v127;
  v92 = v126;
  v24 = *(_QWORD *)(a3 + 40);
  v25 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)&v110 = v24;
  *((_QWORD *)&v110 + 1) = v25;
  v26 = sub_10000778C();
  swift_bridgeObjectRetain(v25);
  v27 = Text.init<A>(_:)(&v110, &type metadata for String, v26);
  v84 = v28;
  v85 = v29;
  v31 = v30;
  type metadata accessor for CPAppGridView(0);
  v88 = a1;
  sub_100014E8C((uint64_t)v20);
  v32 = (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 88))(v20, v17);
  if ((_DWORD)v32 == enum case for WidgetFamily.systemSmall(_:)
    || (_DWORD)v32 == enum case for WidgetFamily.systemMedium(_:)
    || (_DWORD)v32 == enum case for WidgetFamily.systemLarge(_:))
  {
    v35 = static Font.caption2.getter(v32);
LABEL_12:
    v37 = v35;
    goto LABEL_13;
  }
  v36 = v32;
  if ((_DWORD)v32 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v35 = static Font.footnote.getter(v32);
    goto LABEL_12;
  }
  v83 = v31;
  v81 = enum case for WidgetFamily.accessoryCircular(_:);
  v37 = static Font.caption2.getter(v32);
  if (v36 == v81)
  {
    LOBYTE(v31) = v83;
  }
  else
  {
    LOBYTE(v31) = v83;
    if (v36 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v36 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
    }
  }
LABEL_13:
  v38 = v31 & 1;
  v40 = v86;
  v39 = v87;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v86 + 104))(v16, enum case for Font.Leading.tight(_:), v87);
  v41 = Font.leading(_:)(v16, v37);
  swift_release(v37);
  (*(void (**)(_BYTE *, uint64_t))(v40 + 8))(v16, v39);
  v42 = v27;
  v43 = v27;
  v44 = v84;
  v45 = v85;
  v46 = Text.font(_:)(v41, v42, v84, v38, v85);
  v48 = v47;
  v50 = v49;
  v86 = v51;
  swift_release(v41);
  v52 = v50 & 1;
  sub_100007918(v43, v44, v38);
  swift_bridgeObjectRelease(v45);
  v53 = sub_100042FF0();
  v54 = v86;
  v55 = Text.foregroundColor(_:)(v53, v46, v48, v52, v86);
  v87 = v56;
  v88 = v55;
  LOBYTE(v45) = v57;
  v59 = v58;
  swift_release(v53);
  LOBYTE(v45) = v45 & 1;
  sub_100007918(v46, v48, v52);
  swift_bridgeObjectRelease(v54);
  KeyPath = swift_getKeyPath(&unk_100072080);
  v61 = swift_getKeyPath(&unk_1000720B0);
  v128 = v55;
  v62 = v87;
  v129 = v87;
  v130 = v45;
  v131 = v59;
  v132 = KeyPath;
  v133 = 1;
  v134 = v61;
  v135 = 1;
  v136 = 0;
  v63 = static Alignment.center.getter(v61);
  sub_1000631DC(0.0, 0, 0.0, 1, a7, 0, 0.0, 1, (uint64_t)&v110, 0.0, 1, 0.0, 1, v63, v64);
  sub_100007918(v88, v62, v45);
  swift_release(v61);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v59);
  v108[8] = v118;
  v108[9] = v119;
  v108[10] = v120;
  v65 = v114;
  v108[4] = v114;
  v108[5] = v115;
  v108[6] = v116;
  v108[7] = v117;
  v66 = v110;
  v108[0] = v110;
  v108[1] = v111;
  v108[2] = v112;
  v108[3] = v113;
  v67 = v119;
  v100[8] = v118;
  v100[9] = v119;
  v100[10] = v120;
  v68 = v115;
  v69 = v116;
  v100[4] = v114;
  v100[5] = v115;
  v70 = v117;
  v100[6] = v116;
  v100[7] = v117;
  v71 = v111;
  v72 = v112;
  v100[0] = v110;
  v100[1] = v111;
  v73 = v113;
  v100[2] = v112;
  v100[3] = v113;
  *(_OWORD *)(a4 + 216) = v118;
  *(_OWORD *)(a4 + 232) = v67;
  *(_OWORD *)(a4 + 248) = v120;
  *(_OWORD *)(a4 + 152) = v65;
  *(_OWORD *)(a4 + 168) = v68;
  *(_OWORD *)(a4 + 184) = v69;
  *(_OWORD *)(a4 + 200) = v70;
  *(_OWORD *)(a4 + 88) = v66;
  *(_OWORD *)(a4 + 104) = v71;
  *(_OWORD *)(a4 + 120) = v72;
  v109 = v121;
  v101 = v121;
  LOBYTE(v45) = v95;
  v107 = v95;
  v105 = v90;
  v103 = v89;
  *(_QWORD *)(a4 + 264) = v121;
  *(_OWORD *)(a4 + 136) = v73;
  *(_DWORD *)(a4 + 33) = *(_DWORD *)v106;
  *(_DWORD *)(a4 + 36) = *(_DWORD *)&v106[3];
  v74 = v105;
  *(_DWORD *)(a4 + 49) = *(_DWORD *)v104;
  *(_DWORD *)(a4 + 52) = *(_DWORD *)&v104[3];
  v75 = v103;
  *(_DWORD *)(a4 + 65) = *(_DWORD *)v102;
  *(_DWORD *)(a4 + 68) = *(_DWORD *)&v102[3];
  v77 = v98;
  v76 = v99;
  *(_QWORD *)a4 = v99;
  *(_QWORD *)(a4 + 8) = v77;
  v78 = v96;
  *(_QWORD *)(a4 + 16) = v97;
  *(_QWORD *)(a4 + 24) = v78;
  *(_BYTE *)(a4 + 32) = v45;
  *(_QWORD *)(a4 + 40) = v94;
  *(_BYTE *)(a4 + 48) = v74;
  *(_QWORD *)(a4 + 56) = v93;
  *(_BYTE *)(a4 + 64) = v75;
  v79 = v91;
  *(_QWORD *)(a4 + 72) = v92;
  *(_QWORD *)(a4 + 80) = v79;
  j__swift_retain(v76);
  sub_1000427B8((uint64_t)v100);
  sub_100042810((uint64_t)v108);
  return j__swift_release(v76);
}

double sub_100041390@<D0>(void *a1@<X1>, _OWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double result;
  __int128 v35;
  char v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  double v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v51;

  v41 = a1;
  v44 = a2;
  v4 = type metadata accessor for Image.ResizingMode(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v40 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RedactionReasons(0);
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - v10;
  v12 = type metadata accessor for WidgetRenderingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - v17;
  type metadata accessor for CPAppGridView(0);
  v19 = sub_100015074((uint64_t)v18);
  static WidgetRenderingMode.accented.getter(v19);
  v20 = static WidgetRenderingMode.== infix(_:_:)(v18, v15);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v15, v12);
  v21(v18, v12);
  if ((v20 & 1) == 0)
    goto LABEL_4;
  sub_100015308((uint64_t)v11);
  v22 = sub_100007A70(&qword_100091728, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  dispatch thunk of SetAlgebra.init()(v6, v22);
  v23 = sub_100007A70(&qword_100091730, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v6, v23);
  v25 = *(void (**)(char *, uint64_t))(v39 + 8);
  v25(v8, v6);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v11, v6);
  if ((v24 & 1) != 0)
  {
    v45 = static Color.clear.getter(v26);
    v46 = 0uLL;
    v47 = 0.0;
    v48 = 0;
  }
  else
  {
LABEL_4:
    v27 = Image.init(uiImage:)(v41);
    v29 = v42;
    v28 = v43;
    v30 = v40;
    (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v40, enum case for Image.ResizingMode.stretch(_:), v43);
    v31 = Image.resizable(capInsets:resizingMode:)(v30, v27, 0.0, 0.0, 0.0, 0.0);
    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
    v45 = v31;
    v46 = xmmword_100071FF0;
    v47 = a3;
    v48 = 1;
  }
  v32 = sub_100006454(&qword_100092030);
  v33 = sub_10004286C();
  _ConditionalContent<>.init(storage:)(&v45, &type metadata for Color, v32, &protocol witness table for Color, v33);
  result = *(double *)&v49;
  v35 = v50;
  v36 = v51;
  v37 = v44;
  *v44 = v49;
  v37[1] = v35;
  *((_BYTE *)v37 + 32) = v36;
  return result;
}

uint64_t sub_1000416A8@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, double a3@<D1>, double a4@<D2>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[11];
  uint64_t v93;
  _OWORD v94[11];
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _OWORD v108[3];
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;

  v6 = a2.n128_u64[0];
  v88 = a1;
  v7 = type metadata accessor for Font.Leading(0, a2);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin(v7);
  v84 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for WidgetFamily(0);
  v83 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v90 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for BlendMode(0);
  v13 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006454(&qword_100092058);
  __chkstk_darwin(v16);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006454(&qword_100092060);
  __chkstk_darwin(v82);
  v81 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = (char *)sub_100006454(&qword_100092068);
  __chkstk_darwin(v87);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v91 = (uint64_t)&v79 - v23;
  v24 = sub_10003E588();
  sub_10003E778((uint64_t)v15);
  v25 = v80;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v12, v15, v80);
  sub_100007AF4((uint64_t)v12, (uint64_t)&v18[*(int *)(v16 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v18 = v24;
  *((_WORD *)v18 + 4) = 256;
  swift_retain(v24);
  sub_10000A7C0((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v25);
  v26 = swift_release(v24);
  v27 = static Alignment.center.getter(v26);
  _FrameLayout.init(width:height:alignment:)(v108, v6, 0, *(_QWORD *)&a3, 0, v27, v28);
  v29 = v81;
  sub_100007964((uint64_t)v18, v81, &qword_100092058);
  v30 = (_OWORD *)(v29 + *(int *)(v82 + 36));
  v31 = v108[1];
  *v30 = v108[0];
  v30[1] = v31;
  v30[2] = v108[2];
  v32 = (uint64_t)v18;
  v33 = v83;
  sub_100007928(v32, &qword_100092058);
  sub_100007964(v29, (uint64_t)v21, &qword_100092060);
  *(_QWORD *)&v21[*((int *)v87 + 9)] = v6;
  sub_100007928(v29, &qword_100092060);
  v87 = v21;
  sub_100007A2C((uint64_t)v21, v91, &qword_100092068);
  v34 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v35 = Text.init(_:tableName:bundle:comment:)(v34);
  v37 = v36;
  v39 = v38;
  v82 = v40;
  type metadata accessor for CPAppGridView(0);
  v41 = v90;
  sub_100014E8C(v90);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v41, v89);
  if ((_DWORD)v42 == enum case for WidgetFamily.systemSmall(_:)
    || (v43 = v42, (_DWORD)v42 == enum case for WidgetFamily.systemMedium(_:))
    || (_DWORD)v42 == enum case for WidgetFamily.systemLarge(_:))
  {
    v44 = static Font.caption2.getter(v42);
    goto LABEL_7;
  }
  if ((_DWORD)v42 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v44 = static Font.footnote.getter(v42);
LABEL_7:
    v45 = v44;
    goto LABEL_8;
  }
  v78 = enum case for WidgetFamily.accessoryCircular(_:);
  v45 = static Font.caption2.getter(v42);
  if (v43 != v78
    && v43 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v43 != enum case for WidgetFamily.accessoryInline(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v90, v89);
  }
LABEL_8:
  v46 = v39 & 1;
  v48 = v84;
  v47 = v85;
  v49 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, enum case for Font.Leading.tight(_:), v86);
  v50 = Font.leading(_:)(v48, v45);
  swift_release(v45);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  v51 = v82;
  v52 = Text.font(_:)(v50, v35, v37, v46, v82);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  swift_release(v50);
  sub_100007918(v35, v37, v46);
  swift_bridgeObjectRelease(v51);
  KeyPath = swift_getKeyPath(&unk_100072080);
  v60 = swift_getKeyPath(&unk_1000720B0);
  v109 = v52;
  v110 = v54;
  v111 = v56 & 1;
  v112 = v58;
  v113 = KeyPath;
  v114 = 1;
  v115 = v60;
  v116 = 1;
  v117 = 0;
  v61 = static Alignment.center.getter(v60);
  sub_1000631DC(0.0, 0, 0.0, 1, a4, 0, 0.0, 1, (uint64_t)&v96, 0.0, 1, 0.0, 1, v61, v62);
  sub_100007918(v52, v54, v56 & 1);
  swift_release(v60);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v58);
  v63 = v91;
  v64 = (uint64_t)v87;
  sub_100007964(v91, (uint64_t)v87, &qword_100092068);
  v65 = v88;
  sub_100007964(v64, v88, &qword_100092068);
  v66 = *(int *)(sub_100006454(&qword_100092070) + 48);
  v67 = v103;
  v92[8] = v104;
  v92[9] = v105;
  v68 = v105;
  v92[10] = v106;
  v69 = v100;
  v70 = v99;
  v92[4] = v100;
  v92[5] = v101;
  v71 = v101;
  v72 = v102;
  v92[6] = v102;
  v92[7] = v103;
  v92[0] = v96;
  v92[1] = v97;
  v74 = v96;
  v73 = v97;
  v75 = v98;
  v92[2] = v98;
  v92[3] = v99;
  v76 = v65 + v66;
  *(_OWORD *)(v76 + 128) = v104;
  *(_OWORD *)(v76 + 144) = v68;
  *(_OWORD *)(v76 + 160) = v106;
  *(_OWORD *)(v76 + 64) = v69;
  *(_OWORD *)(v76 + 80) = v71;
  *(_OWORD *)(v76 + 96) = v72;
  *(_OWORD *)(v76 + 112) = v67;
  *(_OWORD *)v76 = v74;
  *(_OWORD *)(v76 + 16) = v73;
  v93 = v107;
  *(_QWORD *)(v76 + 176) = v107;
  *(_OWORD *)(v76 + 32) = v75;
  *(_OWORD *)(v76 + 48) = v70;
  sub_1000427B8((uint64_t)v92);
  sub_100007928(v63, &qword_100092068);
  v94[8] = v104;
  v94[9] = v105;
  v94[10] = v106;
  v95 = v107;
  v94[4] = v100;
  v94[5] = v101;
  v94[6] = v102;
  v94[7] = v103;
  v94[0] = v96;
  v94[1] = v97;
  v94[2] = v98;
  v94[3] = v99;
  sub_100042810((uint64_t)v94);
  return sub_100007928(v64, &qword_100092068);
}

uint64_t sub_100041DA8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_100007AF4(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CPAppGridView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10008EAB8, v7 + v5, v6 | 7);
  result = sub_100042048((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *a2 = sub_10004208C;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v8;
  return result;
}

uint64_t sub_100041E54()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for CPAppGridView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + *(int *)(v8 + 20)));
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (_QWORD *)(v0 + v4 + v1[9]);
  v12 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v6 + v1[10]);
  v15 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v6 + v1[11]);
  v18 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v6 + v1[12]);
  v21 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100042048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CPAppGridView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004208C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CPAppGridView(0) - 8) + 80);
  return sub_10003EB5C(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1000420D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for CPAppGridView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + *(int *)(v8 + 20)));
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (_QWORD *)(v0 + v4 + v1[9]);
  v12 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v6 + v1[10]);
  v15 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v6 + v1[11]);
  v18 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v6 + v1[12]);
  v21 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000422E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CPAppGridView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10003F3F8(a1, v2 + v6, a2, *(double *)(v2 + v7), *(double *)(v2 + v7 + 8), *(double *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100042350()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for CPAppGridView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + *(int *)(v8 + 20)));
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (_QWORD *)(v0 + v4 + v1[9]);
  v12 = sub_100006454(&qword_1000908D8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v6 + v1[10]);
  v15 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v6 + v1[11]);
  v18 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = (_QWORD *)(v6 + v1[12]);
  v21 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  return swift_deallocObject(v0, ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100042560@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CPAppGridView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10003F7D4(a1, v2 + v6, *(_QWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), a2, *(double *)(v2 + v7), *(double *)(v2 + v7 + 8), *(double *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_1000425DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091F90;
  if (!qword_100091F90)
  {
    v1 = sub_100006494(&qword_100091F60);
    sub_1000078D8(&qword_100091F98, &qword_100091F58, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091F90);
  }
  return result;
}

unint64_t sub_100042660()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100091FA0;
  if (!qword_100091FA0)
  {
    v1 = sub_100006494(&qword_100091F78);
    v2[0] = sub_100006494(&qword_100091FA8);
    v2[1] = sub_10004270C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100007A70(&qword_100090988, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091FA0);
  }
  return result;
}

unint64_t sub_10004270C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091FB0;
  if (!qword_100091FB0)
  {
    v1 = sub_100006494(&qword_100091FA8);
    sub_1000078D8(&qword_100091FB8, &qword_100091FC0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091FB0);
  }
  return result;
}

void *sub_100042790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100040CE8(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 48), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 56));
}

uint64_t sub_1000427B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  sub_10001F6C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_100042810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  sub_100007918(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10004286C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092038;
  if (!qword_100092038)
  {
    v1 = sub_100006494(&qword_100092030);
    sub_1000428D8();
    sub_10004293C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092038);
  }
  return result;
}

unint64_t sub_1000428D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092040;
  if (!qword_100092040)
  {
    v1 = sub_100006494(&qword_100092048);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092040);
  }
  return result;
}

unint64_t sub_10004293C()
{
  unint64_t result;

  result = qword_100092050;
  if (!qword_100092050)
  {
    result = swift_getWitnessTable(&unk_100072168, &type metadata for AppIconMask);
    atomic_store(result, (unint64_t *)&qword_100092050);
  }
  return result;
}

uint64_t sub_100042980()
{
  return sub_1000078D8(&qword_100092078, &qword_100092080, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_1000429AC()
{
  uint64_t v0;
  _QWORD v2[2];

  v2[0] = 0xD000000000000015;
  v2[1] = 0x80000001000737B0;
  swift_bridgeObjectRetain(0x80000001000737B0);
  v0 = sub_100006454(&qword_100092090);
  TupleWidget.init(_:)(v2, v0);
  return swift_bridgeObjectRelease(0x80000001000737B0);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100042A50();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_100042A50()
{
  unint64_t result;

  result = qword_100092088;
  if (!qword_100092088)
  {
    result = swift_getWitnessTable(&unk_100072104, &type metadata for GameCenterWidgets);
    atomic_store(result, (unint64_t *)&qword_100092088);
  }
  return result;
}

ValueMetadata *type metadata accessor for GameCenterWidgets()
{
  return &type metadata for GameCenterWidgets;
}

uint64_t sub_100042AA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074CE8, 1);
}

unint64_t sub_100042AB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092098;
  if (!qword_100092098)
  {
    v1 = sub_100006494(&qword_1000920A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100092098);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIconMask()
{
  return &type metadata for AppIconMask;
}

uint64_t sub_100042B14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074D2C, 1);
}

uint64_t sub_100042B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;

  v41 = a1;
  v42 = a2;
  v4 = sub_100006454(&qword_1000920A8);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100006454(&qword_1000920B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)v9 + *(int *)(v7 + 20);
  v14 = enum case for RoundedCornerStyle.continuous(_:);
  v15 = a3 / 4.7;
  v16 = type metadata accessor for RoundedCornerStyle(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104);
  v17(v13, v14, v16);
  *v9 = v15;
  v9[1] = v15;
  v18 = (uint64_t)&v12[*(int *)(v10 + 36)];
  sub_100042E4C((uint64_t)v9, v18);
  *(_WORD *)(v18 + *(int *)(sub_100006454(&qword_1000920B8) + 36)) = 256;
  v19 = sub_100006454(&qword_1000920C0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v12, v41, v19);
  sub_100042E90((uint64_t)v9);
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)((char *)v9 + *(int *)(v7 + 20), v14, v16);
  *v9 = v15;
  v9[1] = v15;
  LODWORD(v17) = static HierarchicalShapeStyle.primary.getter(v20);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v43, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  sub_100042E4C((uint64_t)v9, (uint64_t)v6);
  v21 = *(double *)v43 * 0.5;
  v22 = (uint64_t)&v6[*(int *)(v4 + 68)];
  sub_100042E4C((uint64_t)v9, v22);
  *(double *)(v22 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v21;
  v23 = v22 + *(int *)(sub_100006454(&qword_1000920C8) + 36);
  v24 = v43[1];
  *(_OWORD *)v23 = v43[0];
  *(_OWORD *)(v23 + 16) = v24;
  *(_QWORD *)(v23 + 32) = v44;
  v25 = sub_100006454(&qword_1000920D0);
  v26 = (_DWORD *)(v22 + *(int *)(v25 + 52));
  *v26 = (_DWORD)v17;
  v26[1] = 1034147594;
  *(_WORD *)(v22 + *(int *)(v25 + 56)) = 256;
  v27 = static Alignment.center.getter(v25);
  v29 = v28;
  v30 = (uint64_t *)(v22 + *(int *)(sub_100006454(&qword_1000920D8) + 36));
  *v30 = v27;
  v30[1] = v29;
  v31 = sub_100042E90((uint64_t)v9);
  v32 = static Alignment.center.getter(v31);
  v34 = v33;
  v35 = sub_100006454(&qword_1000920E0);
  v36 = v42;
  v37 = v42 + *(int *)(v35 + 36);
  sub_100007964((uint64_t)v6, v37, &qword_1000920A8);
  v38 = (uint64_t *)(v37 + *(int *)(sub_100006454(&qword_1000920E8) + 36));
  *v38 = v32;
  v38[1] = v34;
  sub_100007964((uint64_t)v12, v36, &qword_1000920B0);
  sub_100007928((uint64_t)v6, &qword_1000920A8);
  return sub_100007928((uint64_t)v12, &qword_1000920B0);
}

uint64_t sub_100042E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_100042B24(a1, a2, *v2);
}

uint64_t sub_100042E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042E90(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100042ED0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000920F0;
  if (!qword_1000920F0)
  {
    v1 = sub_100006494(&qword_1000920E0);
    sub_100042F54();
    sub_1000078D8(&qword_100092110, &qword_1000920E8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000920F0);
  }
  return result;
}

unint64_t sub_100042F54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000920F8;
  if (!qword_1000920F8)
  {
    v1 = sub_100006494(&qword_1000920B0);
    sub_1000078D8(&qword_100092100, &qword_1000920C0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_1000078D8(&qword_100092108, &qword_1000920B8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000920F8);
  }
  return result;
}

uint64_t sub_100042FF0()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_1000081B4();
  if (!v1)
    return static Color.primary.getter(v1);
  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CPTimelineEntry(0) + 20));
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v2);
    if (v3)
      goto LABEL_4;
LABEL_19:
    v15 = swift_bridgeObjectRelease(v2);
    return static Color.white.getter(v15);
  }
  if (v2 < 0)
    v14 = v2;
  else
    v14 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!result)
    goto LABEL_19;
LABEL_4:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
  }
  else
  {
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v5 = *(_QWORD *)(v2 + 32);
    swift_retain(v5);
  }
  swift_bridgeObjectRelease(v2);
  v6 = *(void **)(v5 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
  if (v6)
  {
    v7 = *(id *)(v5 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
  }
  else
  {
    v8 = *(void **)(v5 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
    if (v8)
      v9 = v8;
    else
      v9 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
    v7 = v9;
  }
  v10 = v6;
  v11 = Color.init(uiColor:)(v7);
  v12 = swift_release(v5);
  v13 = static Color.white.getter(v12);
  swift_release(v11);
  return v13;
}

uint64_t sub_100043168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CPTimelineEntry(0) + 20));
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v1);
    if (v2)
      goto LABEL_3;
LABEL_17:
    v15 = swift_bridgeObjectRelease(v1);
    v12 = static Color.white.getter(v15);
    v13 = Color.opacity(_:)(0.75);
LABEL_18:
    swift_release(v12);
    return v13;
  }
  if (v1 < 0)
    v14 = v1;
  else
    v14 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!result)
    goto LABEL_17;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(_QWORD *)(v1 + 32);
    swift_retain(v4);
LABEL_6:
    swift_bridgeObjectRelease(v1);
    v5 = *(void **)(v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    if (v5)
    {
      v6 = *(id *)(v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    }
    else
    {
      v7 = *(void **)(v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v7)
        v8 = v7;
      else
        v8 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v6 = v8;
    }
    v9 = v5;
    v10 = Color.init(uiColor:)(v6);
    v11 = swift_release(v4);
    v12 = static Color.white.getter(v11);
    v13 = Color.opacity(_:)(0.75);
    swift_release(v10);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000432E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v31 = *v25;
      *v24 = *v25;
      swift_retain(v31);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = *(_QWORD *)v34;
    v36 = v34[8];
    sub_100006904(*(_QWORD *)v34, v36);
    *(_QWORD *)v33 = v35;
    v33[8] = v36;
    v37 = a3[8];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    v40 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    v41 = (int *)type metadata accessor for CPTimelineEntry(0);
    v42 = v41[5];
    v43 = *(_QWORD *)&v39[v42];
    *(_QWORD *)&v38[v42] = v43;
    v38[v41[6]] = v39[v41[6]];
    v38[v41[7]] = v39[v41[7]];
    v38[v41[8]] = v39[v41[8]];
    v38[v41[9]] = v39[v41[9]];
    v44 = a3[9];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = type metadata accessor for GeometryProxy(0);
    v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
    swift_bridgeObjectRetain(v43);
    v48(v45, v46, v47);
    v49 = a3[10];
    v50 = a3[11];
    v51 = (uint64_t *)((char *)a1 + v49);
    v52 = (uint64_t *)((char *)a2 + v49);
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    v54 = (uint64_t *)((char *)a1 + v50);
    v55 = (uint64_t *)((char *)a2 + v50);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v56);
  }
  return a1;
}

uint64_t sub_1000435B8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)a1 + a2[6]);
  v10 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  sub_100006A4C(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  v12 = (char *)a1 + a2[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v12[*(int *)(v14 + 20)]);
  v15 = (char *)a1 + a2[9];
  v16 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11] + 8));
}

uint64_t *sub_100043754(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = v22;
    v27 = v24;
    v28 = 1;
  }
  else
  {
    v29 = *v23;
    *v22 = *v23;
    swift_retain(v29);
    v26 = v22;
    v27 = v24;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = v32[8];
  sub_100006904(*(_QWORD *)v32, v34);
  *(_QWORD *)v31 = v33;
  v31[8] = v34;
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  v39 = (int *)type metadata accessor for CPTimelineEntry(0);
  v40 = v39[5];
  v41 = *(_QWORD *)&v37[v40];
  *(_QWORD *)&v36[v40] = v41;
  v36[v39[6]] = v37[v39[6]];
  v36[v39[7]] = v37[v39[7]];
  v36[v39[8]] = v37[v39[8]];
  v36[v39[9]] = v37[v39[9]];
  v42 = a3[9];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for GeometryProxy(0);
  v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
  swift_bridgeObjectRetain(v41);
  v46(v43, v44, v45);
  v47 = a3[10];
  v48 = a3[11];
  v49 = (uint64_t *)((char *)a1 + v47);
  v50 = (uint64_t *)((char *)a2 + v47);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = (uint64_t *)((char *)a1 + v48);
  v53 = (uint64_t *)((char *)a2 + v48);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v54);
  return a1;
}

uint64_t *sub_1000439FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100007928((uint64_t)a1 + v12, &qword_1000907B0);
    v15 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = a3[6];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_100007928((uint64_t)a1 + v21, &qword_1000908D0);
    v24 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = v32[8];
  sub_100006904(*(_QWORD *)v32, v34);
  v35 = *(_QWORD *)v31;
  v36 = v31[8];
  *(_QWORD *)v31 = v33;
  v31[8] = v34;
  sub_100006A4C(v35, v36);
  v37 = a3[8];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  v41 = (int *)type metadata accessor for CPTimelineEntry(0);
  v42 = v41[5];
  v43 = *(_QWORD *)&v39[v42];
  v44 = *(_QWORD *)&v38[v42];
  *(_QWORD *)&v38[v42] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v38[v41[6]] = v39[v41[6]];
  v38[v41[7]] = v39[v41[7]];
  v38[v41[8]] = v39[v41[8]];
  v38[v41[9]] = v39[v41[9]];
  v45 = a3[9];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 24))(v46, v47, v48);
  v49 = a3[10];
  v50 = (uint64_t *)((char *)a1 + v49);
  v51 = (uint64_t *)((char *)a2 + v49);
  *v50 = *v51;
  v52 = v51[1];
  v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = a3[11];
  v55 = (uint64_t *)((char *)a1 + v54);
  v56 = (uint64_t *)((char *)a2 + v54);
  *v55 = *v56;
  v57 = v56[1];
  v58 = v55[1];
  v55[1] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  return a1;
}

char *sub_100043D18(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = &a1[v19];
  v23 = &a2[v19];
  v24 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  v25 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)&v22[v25[5]] = *(_QWORD *)&v23[v25[5]];
  v22[v25[6]] = v23[v25[6]];
  v22[v25[7]] = v23[v25[7]];
  v22[v25[8]] = v23[v25[8]];
  v22[v25[9]] = v23[v25[9]];
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  v30 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  return a1;
}

char *sub_100043F74(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100007928((uint64_t)&a1[v8], &qword_1000907B0);
    v11 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = &a2[v13];
    sub_100007928((uint64_t)&a1[v13], &qword_1000908D0);
    v16 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = v20[8];
  v22 = *(_QWORD *)v19;
  v23 = v19[8];
  *(_QWORD *)v19 = v21;
  v19[8] = (char)v20;
  sub_100006A4C(v22, v23);
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = (int *)type metadata accessor for CPTimelineEntry(0);
  v29 = v28[5];
  v30 = *(_QWORD *)&v25[v29];
  *(_QWORD *)&v25[v29] = *(_QWORD *)&v26[v29];
  swift_bridgeObjectRelease(v30);
  v25[v28[6]] = v26[v28[6]];
  v25[v28[7]] = v26[v28[7]];
  v25[v28[8]] = v26[v28[8]];
  v25[v28[9]] = v26[v28[9]];
  v31 = a3[9];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[10];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v39 = *(_QWORD *)v37;
  v38 = *((_QWORD *)v37 + 1);
  v40 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[11];
  v42 = &a1[v41];
  v43 = &a2[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v46 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease(v46);
  return a1;
}

uint64_t sub_100044248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044254);
}

uint64_t sub_100044254(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_11:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100006454(&qword_1000908C0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_11;
  }
  v15 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_11;
  }
  v16 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[9];
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

uint64_t sub_100044378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044384);
}

uint64_t sub_100044384(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_11:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_100006454(&qword_1000908C0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_11;
  }
  v17 = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[8];
    goto LABEL_11;
  }
  result = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + a4[10] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CPMessageView(uint64_t a1)
{
  uint64_t result;

  result = qword_100092170;
  if (!qword_100092170)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPMessageView);
  return result;
}

void sub_1000444E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[8];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000764C(319, (unint64_t *)&unk_1000912E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        v12[3] = "\t";
        v8 = type metadata accessor for CPTimelineEntry(319);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          v10 = type metadata accessor for GeometryProxy(319);
          if (v11 <= 0x3F)
          {
            v12[5] = *(_QWORD *)(v10 - 8) + 64;
            v12[6] = &unk_100072200;
            v12[7] = &unk_100072218;
            swift_initStructMetadata(a1, 256, 8, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_100044604(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074D7C, 1);
}

uint64_t sub_100044614()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_100044634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for RedactionReasons(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.redactionReasons.setter(v4);
}

double sub_1000446B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  double v12;
  double result;
  uint64_t v14;
  uint64_t v15;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - v5;
  type metadata accessor for CPMessageView(0);
  sub_100014E8C((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetFamily.systemLarge(_:), v0);
  v7 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v15, v0, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(&v14, v0, v7);
  v9 = v14;
  v8 = v15;
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  v11 = ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
  GeometryProxy.size.getter(v11);
  result = v12 * 0.5629;
  if (v8 != v9)
    return v12;
  return result;
}

uint64_t sub_10004480C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  uint64_t v14;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CPMessageView(0);
  sub_100014E8C((uint64_t)v3);
  v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if ((_DWORD)v4 == enum case for WidgetFamily.systemSmall(_:))
    return static Font.footnote.getter(v4);
  v5 = v4;
  if ((_DWORD)v4 == enum case for WidgetFamily.systemMedium(_:))
    return static Font.footnote.getter(v4);
  if ((_DWORD)v4 == enum case for WidgetFamily.systemLarge(_:)
    || (_DWORD)v4 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    return static Font.callout.getter(v4);
  }
  v9 = enum case for WidgetFamily.accessoryCircular(_:);
  v10 = enum case for WidgetFamily.accessoryRectangular(_:);
  v11 = enum case for WidgetFamily.accessoryInline(_:);
  v7 = static Font.footnote.getter(v4);
  if (v5 != v9 && v5 != v10 && v5 != v11)
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v7;
}

uint64_t sub_100044958@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  unsigned int *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v40 = *(_QWORD *)(v1 - 8);
  v41 = v1;
  __chkstk_darwin(v1);
  v39 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v38 = (uint64_t)&v37 - v4;
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - v14;
  v16 = sub_100015074((uint64_t)&v37 - v14);
  static WidgetRenderingMode.accented.getter(v16);
  v17 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v9, v17);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  v19(v15, v9);
  if ((v18 & 1) == 0)
  {
    type metadata accessor for CPMessageView(0);
    sub_100014E8C((uint64_t)v8);
    v24 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
    v25 = v42;
    if (v24 == enum case for WidgetFamily.systemSmall(_:))
      goto LABEL_4;
    if (v24 != enum case for WidgetFamily.systemMedium(_:))
    {
      if (v24 == enum case for WidgetFamily.systemLarge(_:) || v24 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
LABEL_4:
        v26 = v38;
        sub_1000152D8(v38);
        v28 = v39;
        v27 = v40;
        v29 = v41;
        (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, enum case for ColorScheme.dark(_:), v41);
        v30 = static ColorScheme.== infix(_:_:)(v26, v28);
        v31 = *(void (**)(char *, uint64_t))(v27 + 8);
        v31(v28, v29);
        v31((char *)v26, v29);
        v21 = type metadata accessor for BlendMode(0);
        v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104);
        if ((v30 & 1) != 0)
          v32 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
        else
          v32 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
        v33 = *v32;
        v23 = v25;
        return v22(v23, v33, v21);
      }
      if (v24 != enum case for WidgetFamily.accessoryCircular(_:)
        && v24 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v24 != enum case for WidgetFamily.accessoryInline(_:))
      {
        v35 = enum case for BlendMode.normal(_:);
        v36 = type metadata accessor for BlendMode(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v25, v35, v36);
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
    v20 = enum case for BlendMode.normal(_:);
    v21 = type metadata accessor for BlendMode(0);
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104);
    v23 = v25;
    goto LABEL_8;
  }
  v20 = enum case for BlendMode.normal(_:);
  v21 = type metadata accessor for BlendMode(0);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104);
  v23 = v42;
LABEL_8:
  v33 = v20;
  return v22(v23, v33, v21);
}

uint64_t sub_100044CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - v5;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - v12;
  v14 = sub_100015074((uint64_t)&v26 - v12);
  static WidgetRenderingMode.accented.getter(v14);
  v15 = static WidgetRenderingMode.== infix(_:_:)(v13, v10);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v17 = ((uint64_t (*)(char *, uint64_t))v16)(v13, v7);
  v18 = static Color.primary.getter(v17);
  if ((v15 & 1) != 0)
  {
    v19 = 0.7;
  }
  else
  {
    type metadata accessor for CPMessageView(0);
    sub_100014E8C((uint64_t)v6);
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetFamily.systemMedium(_:), v0);
    v20 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v27, v0, v20);
    dispatch thunk of RawRepresentable.rawValue.getter(&v26, v0, v20);
    v22 = v26;
    v21 = v27;
    v23 = *(void (**)(char *, uint64_t))(v1 + 8);
    v23(v3, v0);
    v23(v6, v0);
    v19 = 0.7;
    if (v21 == v22)
      v19 = 1.0;
  }
  v24 = Color.opacity(_:)(v19);
  swift_release(v18);
  return v24;
}

uint64_t sub_100044EEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = sub_100015074((uint64_t)&v27 - v13);
  static WidgetRenderingMode.accented.getter(v15);
  v16 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v17 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v8, v16);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  v18(v14, v8);
  if ((v17 & 1) != 0)
  {
    v19 = enum case for BlendMode.normal(_:);
    v20 = type metadata accessor for BlendMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v28, v19, v20);
  }
  else
  {
    v22 = v28;
    type metadata accessor for CPMessageView(0);
    sub_1000152D8((uint64_t)v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ColorScheme.dark(_:), v1);
    v23 = static ColorScheme.== infix(_:_:)(v7, v4);
    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v4, v1);
    v24(v7, v1);
    v25 = type metadata accessor for BlendMode(0);
    if ((v23 & 1) != 0)
      v26 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    else
      v26 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v22, *v26, v25);
  }
}

uint64_t sub_10004510C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  void (*v71)(_QWORD);
  char v72;
  void (*v73)(_QWORD);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  void (**v93)(char *, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (**v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t KeyPath;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (**v128)(char *, uint64_t);
  uint64_t v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  double v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  int v224;
  double v225;
  uint64_t v226;
  double v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __n128 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(char *, char *, uint64_t);
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  int *v252;
  char *v253;
  void (*v254)(char *, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void (*v265)(char *, uint64_t);
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  void (*v272)(char *, uint64_t);
  unsigned int v273;
  void (*v274)(_QWORD);
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  void (**v308)(char *, uint64_t);
  uint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t (*v317)(char *, uint64_t);
  uint64_t v318;
  int *v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD v323[2];
  char v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  __int16 v329;
  uint64_t v330;
  char v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;

  v322 = a1;
  v306 = a2;
  v2 = sub_100006454(&qword_100092350);
  __chkstk_darwin(v2);
  v307 = (uint64_t)&v256 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v260 = (char *)&v256 - v5;
  v296 = type metadata accessor for BlendMode(0);
  v295 = *(_QWORD *)(v296 - 8);
  __chkstk_darwin(v296);
  v292 = (uint64_t)&v256 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = type metadata accessor for DynamicTypeFont(0);
  __chkstk_darwin(v285);
  v288 = (uint64_t *)((char *)&v256 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v8);
  v283 = (uint64_t)&v256 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v284 = (char *)&v256 - v11;
  v282 = sub_100006454(&qword_100091378);
  __chkstk_darwin(v282);
  v289 = (char *)&v256 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = sub_100006454(&qword_100091380);
  __chkstk_darwin(v287);
  v290 = (uint64_t)&v256 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = sub_100006454(&qword_100091388);
  __chkstk_darwin(v286);
  v298 = (char *)&v256 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v291 = sub_100006454(&qword_100092358);
  __chkstk_darwin(v291);
  v297 = (uint64_t)&v256 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = sub_100006454(&qword_100092360);
  __chkstk_darwin(v293);
  v299 = (uint64_t)&v256 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = sub_100006454(&qword_100092368);
  __chkstk_darwin(v294);
  v301 = (uint64_t)&v256 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_100006454(&qword_100092370);
  __chkstk_darwin(v258);
  v300 = (uint64_t)&v256 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = sub_100006454(&qword_100092378);
  v305 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v304 = (char *)&v256 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v302 = sub_100006454(&qword_100092380);
  __chkstk_darwin(v302);
  v259 = (char *)&v256 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v303 = (char *)&v256 - v22;
  __chkstk_darwin(v23);
  v316 = (uint64_t)&v256 - v24;
  v319 = (int *)type metadata accessor for CPMessageView(0);
  v25 = __chkstk_darwin(v319);
  v275 = (uint64_t)&v256 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = type metadata accessor for Font.Leading(0, v25);
  v274 = *(void (**)(_QWORD))(v312 - 8);
  __chkstk_darwin(v312);
  v311 = (char *)&v256 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for WidgetFamily(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v257 = (uint64_t)&v256 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v281 = (uint64_t)&v256 - v32;
  __chkstk_darwin(v33);
  v280 = (char *)&v256 - v34;
  __chkstk_darwin(v35);
  v310 = (char *)&v256 - v36;
  __chkstk_darwin(v37);
  v309 = (uint64_t)&v256 - v38;
  __chkstk_darwin(v39);
  v41 = (char *)&v256 - v40;
  v269 = sub_100006454(&qword_100092388);
  v268 = *(_QWORD *)(v269 - 8);
  __chkstk_darwin(v269);
  v267 = (char *)&v256 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_100006454(&qword_100092390);
  __chkstk_darwin(v266);
  v271 = (char *)&v256 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_100006454(&qword_100092398);
  __chkstk_darwin(v270);
  v277 = (uint64_t)&v256 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = sub_100006454(&qword_1000923A0);
  __chkstk_darwin(v279);
  v278 = (uint64_t)&v256 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = sub_100006454(&qword_1000923A8);
  v314 = *(_QWORD *)(v315 - 8);
  __chkstk_darwin(v315);
  v261 = (char *)&v256 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v276 = (char *)&v256 - v48;
  __chkstk_darwin(v49);
  v313 = (char *)&v256 - v50;
  v51 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x8000000100073E50);
  v52 = Text.init(_:tableName:bundle:comment:)(v51);
  v54 = v53;
  v56 = v55;
  v58 = v57 & 1;
  v59 = static Font.Weight.semibold.getter(v52);
  v60 = Text.fontWeight(_:)(*(_QWORD *)&v59, 0, v52, v54, v58, v56);
  v62 = v61;
  v273 = v63;
  v65 = v64;
  v318 = v28;
  sub_100007918(v52, v54, v58);
  swift_bridgeObjectRelease(v56);
  v321 = v322 + v319[5];
  sub_100014E8C((uint64_t)v41);
  v308 = (void (**)(char *, uint64_t))v29;
  v317 = *(uint64_t (**)(char *, uint64_t))(v29 + 88);
  v66 = v317(v41, v28);
  v320 = enum case for WidgetFamily.systemSmall(_:);
  if ((_DWORD)v66 == enum case for WidgetFamily.systemSmall(_:))
  {
    v67 = static Font.caption2.getter(v66);
LABEL_12:
    v70 = v67;
    goto LABEL_13;
  }
  v68 = v66;
  if ((_DWORD)v66 == enum case for WidgetFamily.systemMedium(_:))
  {
    v67 = static Font.footnote.getter(v66);
    goto LABEL_12;
  }
  if ((_DWORD)v66 == enum case for WidgetFamily.systemLarge(_:)
    || (_DWORD)v66 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v67 = static Font.callout.getter(v66);
    goto LABEL_12;
  }
  v69 = enum case for WidgetFamily.accessoryCircular(_:);
  v70 = static Font.footnote.getter(v66);
  if (v68 != v69
    && v68 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v68 != enum case for WidgetFamily.accessoryInline(_:))
  {
    v308[1](v41, v318);
  }
LABEL_13:
  v71 = v274;
  v72 = v273;
  v73 = (void (*)(_QWORD))*((_QWORD *)v274 + 13);
  v74 = v311;
  v273 = enum case for Font.Leading.tight(_:);
  v75 = v312;
  v274 = v73;
  v73(v311);
  v76 = Font.leading(_:)(v74, v70);
  swift_release(v70);
  v272 = (void (*)(char *, uint64_t))*((_QWORD *)v71 + 1);
  v272(v74, v75);
  v77 = v72 & 1;
  v78 = Text.font(_:)(v76, v60, v62, v72 & 1, v65);
  v80 = v79;
  LOBYTE(v71) = v81;
  v83 = v82;
  swift_release(v76);
  LOBYTE(v76) = v71 & 1;
  sub_100007918(v60, v62, v77);
  swift_bridgeObjectRelease(v65);
  v84 = sub_100042FF0();
  v263 = Text.foregroundColor(_:)(v84, v78, v80, v71 & 1, v83);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  swift_release(v84);
  v91 = v88 & 1;
  sub_100007918(v78, v80, v76);
  swift_bridgeObjectRelease(v83);
  v92 = v309;
  sub_100014E8C(v309);
  v93 = v308;
  v94 = v310;
  v95 = v318;
  v265 = v308[13];
  ((void (*)(char *, _QWORD, uint64_t))v265)(v310, v320, v318);
  v96 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v323, v95, v96);
  v264 = v96;
  dispatch thunk of RawRepresentable.rawValue.getter(&v334, v95, v96);
  v97 = v323[0];
  v98 = v334;
  v99 = (void (**)(char *, uint64_t))v93[1];
  ((void (*)(char *, uint64_t))v99)(v94, v95);
  v308 = v99;
  ((void (*)(uint64_t, uint64_t))v99)(v92, v95);
  if (v97 == v98)
    v100 = 2;
  else
    v100 = 1;
  KeyPath = swift_getKeyPath(&unk_100072340);
  v102 = swift_getKeyPath(&unk_100072370);
  v103 = swift_getKeyPath(&unk_1000723A0);
  v104 = v263;
  v323[0] = v263;
  v323[1] = v86;
  v324 = v91;
  v105 = v90;
  v325 = v90;
  v326 = KeyPath;
  v327 = v100;
  v328 = 0;
  v329 = 256;
  v330 = v102;
  v331 = 1;
  v332 = v103;
  v333 = 0x3FE8000000000000;
  v106 = sub_100006454(&qword_1000923B0);
  v107 = sub_10004B80C();
  v108 = v267;
  View.unredacted()(v106, v107);
  sub_100007918(v104, v86, v91);
  swift_release(v103);
  swift_release(v102);
  swift_release(KeyPath);
  v109 = swift_bridgeObjectRelease(v105);
  v110 = static Color.black.getter(v109);
  v111 = Color.opacity(_:)(0.25);
  swift_release(v110);
  v112 = v268;
  v113 = (uint64_t)v271;
  v114 = v269;
  (*(void (**)(char *, char *, uint64_t))(v268 + 16))(v271, v108, v269);
  v115 = v113 + *(int *)(v266 + 36);
  *(_QWORD *)v115 = v111;
  *(_OWORD *)(v115 + 8) = xmmword_1000721C0;
  *(_QWORD *)(v115 + 24) = 0x3FF0000000000000;
  v116 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v108, v114);
  v117 = static Edge.Set.trailing.getter(v116);
  v118 = Edge.Set.init(rawValue:)(0);
  v119 = v118;
  v120 = Edge.Set.init(rawValue:)(v118);
  if (Edge.Set.init(rawValue:)(v120 & v117) != v117)
    v119 = Edge.Set.init(rawValue:)(v119 | v117);
  LODWORD(v269) = v119;
  v121 = v309;
  sub_100014E8C(v309);
  v122 = v310;
  v123 = v318;
  v124 = v265;
  ((void (*)(char *, _QWORD, uint64_t))v265)(v310, v320, v318);
  v125 = v264;
  dispatch thunk of RawRepresentable.rawValue.getter(v323, v123, v264);
  dispatch thunk of RawRepresentable.rawValue.getter(&v334, v123, v125);
  v126 = v323[0];
  v127 = v334;
  v128 = v308;
  ((void (*)(char *, uint64_t))v308)(v122, v123);
  ((void (*)(uint64_t, uint64_t))v128)(v121, v123);
  v129 = v275;
  sub_100007AF4(v322, v275, type metadata accessor for CPMessageView);
  if (v126 == v127)
  {
    sub_10000A7C0(v129, type metadata accessor for CPMessageView);
    v130 = 40.0;
  }
  else
  {
    sub_100014E8C(v121);
    ((void (*)(char *, _QWORD, uint64_t))v124)(v122, enum case for WidgetFamily.systemLarge(_:), v123);
    dispatch thunk of RawRepresentable.rawValue.getter(v323, v123, v125);
    dispatch thunk of RawRepresentable.rawValue.getter(&v334, v123, v125);
    v131 = v323[0];
    v132 = v334;
    ((void (*)(char *, uint64_t))v128)(v122, v123);
    ((void (*)(uint64_t, uint64_t))v128)(v121, v123);
    sub_10000A7C0(v129, type metadata accessor for CPMessageView);
    v130 = 40.0;
    if (v131 != v132)
      v130 = 0.0;
  }
  v133 = (uint64_t)v280;
  v134 = EdgeInsets.init(_all:)(v130);
  v136 = v135;
  v138 = v137;
  v140 = v139;
  v141 = v277;
  sub_100007964(v113, v277, &qword_100092390);
  v142 = v141 + *(int *)(v270 + 36);
  *(_BYTE *)v142 = v269;
  *(double *)(v142 + 8) = v134;
  *(_QWORD *)(v142 + 16) = v136;
  *(_QWORD *)(v142 + 24) = v138;
  *(_QWORD *)(v142 + 32) = v140;
  *(_BYTE *)(v142 + 40) = 0;
  v143 = sub_100007928(v113, &qword_100092390);
  v144 = static Edge.Set.bottom.getter(v143);
  v145 = Edge.Set.init(rawValue:)(0);
  v146 = v145;
  v147 = Edge.Set.init(rawValue:)(v145);
  if (Edge.Set.init(rawValue:)(v147 & v144) != v144)
    LOBYTE(v146) = Edge.Set.init(rawValue:)(v146 | v144);
  sub_100014E8C(v133);
  v148 = v317((char *)v133, v123);
  v149 = 2.0;
  if (v148 != v320)
  {
    v149 = 3.0;
    if (v148 != enum case for WidgetFamily.systemMedium(_:))
    {
      v149 = 6.0;
      if (v148 != enum case for WidgetFamily.systemLarge(_:)
        && v148 != enum case for WidgetFamily.systemExtraLarge(_:)
        && v148 != enum case for WidgetFamily.accessoryCircular(_:)
        && v148 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v148 != enum case for WidgetFamily.accessoryInline(_:))
      {
        ((void (*)(uint64_t, uint64_t))v128)(v133, v123);
      }
    }
  }
  v150 = EdgeInsets.init(_all:)(v149);
  v152 = v151;
  v154 = v153;
  v156 = v155;
  v157 = v278;
  sub_100007964(v141, v278, &qword_100092398);
  v158 = v279;
  v159 = v157 + *(int *)(v279 + 36);
  *(_BYTE *)v159 = v146;
  *(double *)(v159 + 8) = v150;
  *(_QWORD *)(v159 + 16) = v152;
  *(_QWORD *)(v159 + 24) = v154;
  *(_QWORD *)(v159 + 32) = v156;
  *(_BYTE *)(v159 + 40) = 0;
  sub_100007928(v141, &qword_100092398);
  v160 = sub_10001FB4C(&qword_100092400, &qword_1000923A0, (void (*)(void))sub_10004B9B8);
  v161 = v276;
  View.widgetAccentable(_:)(1, v158, v160);
  sub_100007928(v157, &qword_1000923A0);
  (*(void (**)(char *, char *, uint64_t))(v314 + 32))(v313, v161, v315);
  v162 = (uint64_t *)(v322 + v319[10]);
  v163 = *v162;
  v164 = v162[1];
  swift_bridgeObjectRetain(v164);
  v165 = LocalizedStringKey.init(_:)(v163, v164);
  v166 = Text.init(_:tableName:bundle:comment:)(v165);
  v168 = v167;
  v170 = v169;
  LOBYTE(v161) = v171 & 1;
  v172 = sub_10004480C();
  v173 = v311;
  v174 = v312;
  ((void (*)(char *, _QWORD, uint64_t))v274)(v311, v273, v312);
  v175 = Font.leading(_:)(v173, v172);
  swift_release(v172);
  v272(v173, v174);
  v176 = enum case for ContentSizeCategory.extraLarge(_:);
  v177 = type metadata accessor for ContentSizeCategory(0);
  v178 = *(_QWORD *)(v177 - 8);
  v179 = (uint64_t)v284;
  (*(void (**)(char *, uint64_t, uint64_t))(v178 + 104))(v284, v176, v177);
  v180 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v178 + 56))(v179, 0, 1, v177);
  v181 = static Font.Weight.semibold.getter(v180);
  v182 = v283;
  sub_100007964(v179, v283, &qword_100091370);
  v183 = swift_getKeyPath(&unk_1000723D0);
  v184 = (uint64_t)v288;
  *v288 = v183;
  v185 = sub_100006454(&qword_100090EA0);
  swift_storeEnumTagMultiPayload(v184, v185, 0);
  v186 = v285;
  *(_QWORD *)(v184 + *(int *)(v285 + 20)) = v175;
  sub_100007A2C(v182, v184 + *(int *)(v186 + 24), &qword_100091370);
  *(double *)(v184 + *(int *)(v186 + 28)) = v181;
  v187 = (uint64_t)v289;
  sub_100007AF4(v184, (uint64_t)&v289[*(int *)(v282 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v187 = v166;
  *(_QWORD *)(v187 + 8) = v168;
  *(_BYTE *)(v187 + 16) = (_BYTE)v161;
  *(_QWORD *)(v187 + 24) = v170;
  sub_10001F6C4(v166, v168, (char)v161);
  swift_bridgeObjectRetain(v170);
  v188 = v184;
  v189 = v318;
  sub_10000A7C0(v188, type metadata accessor for DynamicTypeFont);
  sub_100007928(v179, &qword_100091370);
  sub_100007918(v166, v168, (char)v161);
  swift_bridgeObjectRelease(v170);
  v190 = sub_100044CE0();
  v191 = swift_getKeyPath(&unk_100072400);
  v192 = v290;
  sub_100007964(v187, v290, &qword_100091378);
  v193 = (uint64_t *)(v192 + *(int *)(v287 + 36));
  *v193 = v191;
  v193[1] = v190;
  sub_100007928(v187, &qword_100091378);
  v194 = v292;
  sub_100044958(v292);
  v195 = (uint64_t)v298;
  v196 = v295;
  v197 = v296;
  (*(void (**)(char *, uint64_t, uint64_t))(v295 + 16))(&v298[*(int *)(v286 + 36)], v194, v296);
  sub_100007964(v192, v195, &qword_100091380);
  (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v194, v197);
  sub_100007928(v192, &qword_100091380);
  v198 = v281;
  sub_100014E8C(v281);
  v199 = v317((char *)v198, v189);
  v200 = enum case for WidgetFamily.systemMedium(_:);
  v201 = 4;
  LODWORD(v312) = enum case for WidgetFamily.systemLarge(_:);
  if (v199 == v320 || v199 == enum case for WidgetFamily.systemMedium(_:))
  {
    v202 = v260;
    v203 = (uint64_t)v259;
    v204 = v258;
  }
  else
  {
    v202 = v260;
    v203 = (uint64_t)v259;
    v204 = v258;
    if (v199 != enum case for WidgetFamily.systemLarge(_:))
    {
      if (v199 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        v201 = 5;
      }
      else
      {
        v201 = 4;
        if (v199 != enum case for WidgetFamily.accessoryCircular(_:)
          && v199 != enum case for WidgetFamily.accessoryRectangular(_:)
          && v199 != enum case for WidgetFamily.accessoryInline(_:))
        {
          ((void (*)(uint64_t, uint64_t))v308)(v198, v189);
          v201 = 4;
        }
      }
    }
  }
  v205 = swift_getKeyPath(&unk_100072340);
  v206 = v297;
  sub_100007964(v195, v297, &qword_100091388);
  v207 = v206 + *(int *)(v291 + 36);
  *(_QWORD *)v207 = v205;
  *(_QWORD *)(v207 + 8) = v201;
  *(_BYTE *)(v207 + 16) = 0;
  sub_100007928(v195, &qword_100091388);
  v208 = v299;
  sub_100007964(v206, v299, &qword_100092358);
  *(_WORD *)(v208 + *(int *)(v293 + 36)) = 256;
  sub_100007928(v206, &qword_100092358);
  v209 = swift_getKeyPath(&unk_100072370);
  v210 = v301;
  sub_100007964(v208, v301, &qword_100092360);
  v211 = v210 + *(int *)(v294 + 36);
  *(_QWORD *)v211 = v209;
  *(_BYTE *)(v211 + 8) = 1;
  sub_100007928(v208, &qword_100092360);
  v212 = swift_getKeyPath(&unk_1000723A0);
  v213 = v300;
  sub_100007964(v210, v300, &qword_100092368);
  v214 = (uint64_t *)(v213 + *(int *)(v204 + 36));
  *v214 = v212;
  v214[1] = 0x3FE3333333333333;
  sub_100007928(v210, &qword_100092368);
  v215 = sub_10004BA80();
  v216 = v304;
  View.unredacted()(v204, v215);
  v217 = sub_100007928(v213, &qword_100092370);
  v218 = static Edge.Set.bottom.getter(v217);
  v219 = Edge.Set.init(rawValue:)(0);
  v220 = v219;
  v221 = Edge.Set.init(rawValue:)(v219);
  if (Edge.Set.init(rawValue:)(v221 & v218) != v218)
    LOBYTE(v220) = Edge.Set.init(rawValue:)(v220 | v218);
  v222 = (uint64_t *)(v322 + v319[11]);
  if (v222[1])
  {
    v223 = v257;
    sub_100014E8C(v257);
    v224 = v317((char *)v223, v189);
    v225 = 4.0;
    v226 = v262;
    if (v224 != v320)
    {
      v225 = 5.0;
      if (v224 != v200)
      {
        v225 = 6.0;
        if (v224 != (_DWORD)v312)
        {
          v225 = 8.0;
          if (v224 != enum case for WidgetFamily.systemExtraLarge(_:)
            && v224 != enum case for WidgetFamily.accessoryCircular(_:)
            && v224 != enum case for WidgetFamily.accessoryRectangular(_:)
            && v224 != enum case for WidgetFamily.accessoryInline(_:))
          {
            ((void (*)(uint64_t, uint64_t))v308)(v257, v189);
          }
        }
      }
    }
  }
  else
  {
    v225 = 0.0;
    v226 = v262;
  }
  v227 = EdgeInsets.init(_all:)(v225);
  v229 = v228;
  v231 = v230;
  v233 = v232;
  v234 = v305;
  v235 = (uint64_t)v303;
  (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v303, v216, v226);
  v236 = v235 + *(int *)(v302 + 36);
  *(_BYTE *)v236 = v220;
  *(double *)(v236 + 8) = v227;
  *(_QWORD *)(v236 + 16) = v229;
  *(_QWORD *)(v236 + 24) = v231;
  *(_QWORD *)(v236 + 32) = v233;
  *(_BYTE *)(v236 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v234 + 8))(v216, v226);
  v237 = v316;
  sub_100007A2C(v235, v316, &qword_100092380);
  v239 = v222[1];
  if (v239)
  {
    v240 = *v222;
    *(_QWORD *)v202 = static VerticalAlignment.center.getter(v238);
    *((_QWORD *)v202 + 1) = 0x4010000000000000;
    v202[16] = 0;
    v241 = sub_100006454(&qword_100092448);
    sub_100046AF4(v240, v239, v322, &v202[*(int *)(v241 + 44)]);
    v242 = sub_100006454(&qword_100092438);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v242 - 8) + 56))(v202, 0, 1, v242);
  }
  else
  {
    v243 = sub_100006454(&qword_100092438);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v243 - 8) + 56))(v202, 1, 1, v243);
  }
  v244 = v261;
  v245 = (uint64_t)v202;
  v246 = v314;
  v247 = *(void (**)(char *, char *, uint64_t))(v314 + 16);
  v248 = v313;
  v249 = v315;
  v247(v261, v313, v315);
  sub_100007964(v237, v203, &qword_100092380);
  v250 = v307;
  sub_100007964(v245, v307, &qword_100092350);
  v251 = v306;
  v247(v306, v244, v249);
  v252 = (int *)sub_100006454(&qword_100092440);
  sub_100007964(v203, (uint64_t)&v251[v252[12]], &qword_100092380);
  sub_100007964(v250, (uint64_t)&v251[v252[16]], &qword_100092350);
  v253 = &v251[v252[20]];
  *(_QWORD *)v253 = 0;
  v253[8] = 1;
  sub_100007928(v245, &qword_100092350);
  sub_100007928(v316, &qword_100092380);
  v254 = *(void (**)(char *, uint64_t))(v246 + 8);
  v254(v248, v249);
  sub_100007928(v250, &qword_100092350);
  sub_100007928(v203, &qword_100092380);
  return ((uint64_t (*)(char *, uint64_t))v254)(v244, v249);
}

uint64_t sub_100046AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, uint64_t);
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t KeyPath;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  void (*v145)(char *, uint64_t);
  void (*v146)(char *, uint64_t);
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, _QWORD, uint64_t);
  uint64_t (*v154)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int v155;
  uint64_t v156;
  void (*v157)(char *, _QWORD, uint64_t);
  uint64_t v158;
  int v159;
  uint64_t (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v196 = a4;
  v7 = type metadata accessor for Image.Scale(0);
  v193 = *(_QWORD *)(v7 - 8);
  v194 = v7;
  __chkstk_darwin(v7);
  v190 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100006454(&qword_100092450);
  __chkstk_darwin(v177);
  v180 = (char *)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100006454(&qword_100092458);
  __chkstk_darwin(v179);
  v182 = (uint64_t)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100006454(&qword_100092460);
  __chkstk_darwin(v178);
  v185 = (char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100006454(&qword_100092468);
  __chkstk_darwin(v181);
  v187 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100006454(&qword_100092470);
  __chkstk_darwin(v188);
  v186 = (uint64_t)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_100006454(&qword_100092478);
  v191 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v192 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v183 = (char *)&v148 - v16;
  __chkstk_darwin(v17);
  v189 = (char *)&v148 - v18;
  v205 = type metadata accessor for BlendMode(0);
  v173 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v204 = (uint64_t)&v148 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for DynamicTypeFont(0);
  __chkstk_darwin(v201);
  v21 = (uint64_t *)((char *)&v148 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v22);
  v200 = (uint64_t)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v24);
  v175 = (char *)&v148 - v26;
  v27 = type metadata accessor for Font.Leading(0, v25);
  v156 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v199 = (char *)&v148 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for WidgetFamily(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v174 = (uint64_t)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v34 = (char *)&v148 - v33;
  v158 = sub_100006454(&qword_100091378);
  __chkstk_darwin(v158);
  v36 = (char *)&v148 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100006454(&qword_100091380);
  __chkstk_darwin(v163);
  v167 = (uint64_t)&v148 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100006454(&qword_100091388);
  __chkstk_darwin(v162);
  v168 = (char *)&v148 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100006454(&qword_100092358);
  __chkstk_darwin(v164);
  v169 = (uint64_t)&v148 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100006454(&qword_100092480);
  __chkstk_darwin(v166);
  v171 = (uint64_t)&v148 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100006454(&qword_100092488);
  __chkstk_darwin(v172);
  v170 = (uint64_t)&v148 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100006454(&qword_100092490);
  v206 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v176 = (char *)&v148 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v165 = (char *)&v148 - v44;
  __chkstk_darwin(v45);
  v202 = (char *)&v148 - v46;
  swift_bridgeObjectRetain(a2);
  v47 = LocalizedStringKey.init(_:)(a1, a2);
  v48 = Text.init(_:tableName:bundle:comment:)(v47);
  v50 = v49;
  v150 = v51;
  v151 = v52;
  v53 = *(int *)(type metadata accessor for CPMessageView(0) + 20);
  v184 = a3;
  v161 = a3 + v53;
  sub_100014E8C((uint64_t)v34);
  v148 = v30;
  v54 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 88);
  v197 = v29;
  v160 = v54;
  v55 = v54((uint64_t)v34, v29);
  v159 = enum case for WidgetFamily.systemSmall(_:);
  v198 = v27;
  v149 = enum case for WidgetFamily.systemMedium(_:);
  if ((_DWORD)v55 == enum case for WidgetFamily.systemSmall(_:)
    || (v56 = v55, (_DWORD)v55 == enum case for WidgetFamily.systemMedium(_:)))
  {
    v60 = static Font.caption.getter(v55);
LABEL_11:
    v58 = v60;
LABEL_12:
    v59 = (uint64_t)v175;
    goto LABEL_13;
  }
  if ((_DWORD)v55 == enum case for WidgetFamily.systemLarge(_:)
    || (_DWORD)v55 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v60 = static Font.subheadline.getter(v55);
    goto LABEL_11;
  }
  v57 = enum case for WidgetFamily.accessoryCircular(_:);
  v58 = static Font.caption.getter(v55);
  if (v56 == v57)
  {
    v59 = (uint64_t)v175;
    v27 = v198;
    goto LABEL_13;
  }
  v27 = v198;
  if (v56 == enum case for WidgetFamily.accessoryRectangular(_:))
    goto LABEL_12;
  v59 = (uint64_t)v175;
  if (v56 != enum case for WidgetFamily.accessoryInline(_:))
    (*(void (**)(char *, uint64_t))(v148 + 8))(v34, v197);
LABEL_13:
  v61 = v156;
  v62 = *(void (**)(_QWORD))(v156 + 104);
  v63 = v199;
  LODWORD(v175) = enum case for Font.Leading.tight(_:);
  v157 = (void (*)(char *, _QWORD, uint64_t))v62;
  v62(v199);
  v64 = Font.leading(_:)(v63, v58);
  swift_release(v58);
  v156 = *(_QWORD *)(v61 + 8);
  ((void (*)(char *, uint64_t))v156)(v63, v27);
  v65 = enum case for ContentSizeCategory.extraLarge(_:);
  v66 = type metadata accessor for ContentSizeCategory(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(void (**)(uint64_t, _QWORD, uint64_t))(v67 + 104);
  v155 = v65;
  v153 = v68;
  v68(v59, v65, v66);
  v154 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56);
  v69 = v154(v59, 0, 1, v66);
  v70 = static Font.Weight.medium.getter(v69);
  v71 = v200;
  sub_100007964(v59, v200, &qword_100091370);
  *v21 = swift_getKeyPath(&unk_1000723D0);
  v152 = sub_100006454(&qword_100090EA0);
  swift_storeEnumTagMultiPayload(v21, v152, 0);
  v72 = v201;
  *(_QWORD *)((char *)v21 + *(int *)(v201 + 20)) = v64;
  sub_100007A2C(v71, (uint64_t)v21 + *(int *)(v72 + 24), &qword_100091370);
  *(double *)((char *)v21 + *(int *)(v72 + 28)) = v70;
  sub_100007AF4((uint64_t)v21, (uint64_t)&v36[*(int *)(v158 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v36 = v48;
  *((_QWORD *)v36 + 1) = v50;
  LOBYTE(v71) = v150 & 1;
  v36[16] = v150 & 1;
  v73 = v151;
  *((_QWORD *)v36 + 3) = v151;
  sub_10001F6C4(v48, v50, v71);
  swift_bridgeObjectRetain(v73);
  sub_10000A7C0((uint64_t)v21, type metadata accessor for DynamicTypeFont);
  sub_100007928(v59, &qword_100091370);
  sub_100007918(v48, v50, v71);
  v74 = swift_bridgeObjectRelease(v73);
  v75 = static Color.secondary.getter(v74);
  KeyPath = swift_getKeyPath(&unk_100072400);
  v77 = v167;
  sub_100007964((uint64_t)v36, v167, &qword_100091378);
  v78 = (uint64_t *)(v77 + *(int *)(v163 + 36));
  *v78 = KeyPath;
  v78[1] = v75;
  sub_100007928((uint64_t)v36, &qword_100091378);
  v79 = v204;
  sub_100044EEC(v204);
  v80 = (uint64_t)v168;
  v81 = &v168[*(int *)(v162 + 36)];
  v82 = v173;
  v83 = v205;
  v163 = *(_QWORD *)(v173 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v163)(v81, v79, v205);
  sub_100007964(v77, v80, &qword_100091380);
  v173 = *(_QWORD *)(v82 + 8);
  ((void (*)(uint64_t, uint64_t))v173)(v79, v83);
  sub_100007928(v77, &qword_100091380);
  v84 = swift_getKeyPath(&unk_100072340);
  v85 = v169;
  sub_100007964(v80, v169, &qword_100091388);
  v86 = v85 + *(int *)(v164 + 36);
  *(_QWORD *)v86 = v84;
  *(_QWORD *)(v86 + 8) = 2;
  *(_BYTE *)(v86 + 16) = 0;
  sub_100007928(v80, &qword_100091388);
  v87 = swift_getKeyPath(&unk_100072370);
  v88 = v171;
  sub_100007964(v85, v171, &qword_100092358);
  v89 = v88 + *(int *)(v166 + 36);
  *(_QWORD *)v89 = v87;
  *(_BYTE *)(v89 + 8) = 1;
  sub_100007928(v85, &qword_100092358);
  v90 = swift_getKeyPath(&unk_1000723A0);
  v91 = v170;
  sub_100007964(v88, v170, &qword_100092480);
  v92 = v172;
  v93 = (uint64_t *)(v91 + *(int *)(v172 + 36));
  *v93 = v90;
  v93[1] = 0x3FECCCCCCCCCCCCDLL;
  sub_100007928(v88, &qword_100092480);
  v94 = sub_10004BC4C();
  v95 = v165;
  View.unredacted()(v92, v94);
  sub_100007928(v91, &qword_100092488);
  (*(void (**)(char *, char *, uint64_t))(v206 + 32))(v202, v95, v203);
  v96 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v97 = v174;
  sub_100014E8C(v174);
  v98 = v160(v97, v197);
  if ((_DWORD)v98 == v159 || (v99 = v98, (_DWORD)v98 == v149))
  {
    v103 = static Font.caption.getter(v98);
LABEL_23:
    v102 = v103;
    goto LABEL_24;
  }
  if ((_DWORD)v98 == enum case for WidgetFamily.systemLarge(_:)
    || (_DWORD)v98 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v103 = static Font.subheadline.getter(v98);
    goto LABEL_23;
  }
  v100 = v59;
  v101 = enum case for WidgetFamily.accessoryCircular(_:);
  v102 = static Font.caption.getter(v98);
  if (v99 == v101)
  {
    v59 = v100;
  }
  else
  {
    v59 = v100;
    if (v99 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v99 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v97, v197);
    }
  }
LABEL_24:
  v105 = v198;
  v104 = v199;
  v157(v199, v175, v198);
  v106 = Font.leading(_:)(v104, v102);
  swift_release(v102);
  ((void (*)(char *, uint64_t))v156)(v104, v105);
  v153(v59, v155, v66);
  v107 = v154(v59, 0, 1, v66);
  v108 = static Font.Weight.semibold.getter(v107);
  v109 = v200;
  sub_100007964(v59, v200, &qword_100091370);
  *v21 = swift_getKeyPath(&unk_1000723D0);
  swift_storeEnumTagMultiPayload(v21, v152, 0);
  v110 = v201;
  *(_QWORD *)((char *)v21 + *(int *)(v201 + 20)) = v106;
  sub_100007A2C(v109, (uint64_t)v21 + *(int *)(v110 + 24), &qword_100091370);
  *(double *)((char *)v21 + *(int *)(v110 + 28)) = v108;
  v111 = (uint64_t)v180;
  sub_100007AF4((uint64_t)v21, (uint64_t)&v180[*(int *)(v177 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v111 = v96;
  *(_BYTE *)(v111 + 8) = 1;
  swift_retain(v96);
  sub_10000A7C0((uint64_t)v21, type metadata accessor for DynamicTypeFont);
  sub_100007928(v59, &qword_100091370);
  v112 = swift_release(v96);
  v113 = static Color.secondary.getter(v112);
  v114 = swift_getKeyPath(&unk_100072400);
  v115 = v182;
  sub_100007964(v111, v182, &qword_100092450);
  v116 = (uint64_t *)(v115 + *(int *)(v179 + 36));
  *v116 = v114;
  v116[1] = v113;
  sub_100007928(v111, &qword_100092450);
  v117 = v204;
  sub_100044EEC(v204);
  v118 = (uint64_t)v185;
  v119 = v205;
  ((void (*)(char *, uint64_t, uint64_t))v163)(&v185[*(int *)(v178 + 36)], v117, v205);
  sub_100007964(v115, v118, &qword_100092458);
  ((void (*)(uint64_t, uint64_t))v173)(v117, v119);
  sub_100007928(v115, &qword_100092458);
  v121 = v193;
  v120 = v194;
  v122 = v190;
  (*(void (**)(char *, _QWORD, uint64_t))(v193 + 104))(v190, enum case for Image.Scale.small(_:), v194);
  v123 = swift_getKeyPath(&unk_100072430);
  v124 = (uint64_t)v187;
  v125 = (uint64_t *)&v187[*(int *)(v181 + 36)];
  v126 = sub_100006454(&qword_1000924A8);
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))((char *)v125 + *(int *)(v126 + 28), v122, v120);
  *v125 = v123;
  sub_100007964(v118, v124, &qword_100092460);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v120);
  sub_100007928(v118, &qword_100092460);
  v127 = swift_getKeyPath(&unk_1000723A0);
  v128 = v186;
  sub_100007964(v124, v186, &qword_100092468);
  v129 = v188;
  v130 = (uint64_t *)(v128 + *(int *)(v188 + 36));
  *v130 = v127;
  v130[1] = 0x3FECCCCCCCCCCCCDLL;
  sub_100007928(v124, &qword_100092468);
  v131 = sub_10004BD5C();
  v132 = v183;
  View.unredacted()(v129, v131);
  sub_100007928(v128, &qword_100092470);
  v133 = v191;
  v134 = v189;
  v135 = v195;
  (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v189, v132, v195);
  v136 = *(void (**)(char *, char *, uint64_t))(v206 + 16);
  v137 = v176;
  v138 = v202;
  v139 = v203;
  v136(v176, v202, v203);
  v140 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
  v141 = v192;
  v140(v192, v134, v135);
  v142 = v196;
  v136(v196, v137, v139);
  v143 = sub_100006454(&qword_1000924F8);
  v140(&v142[*(int *)(v143 + 48)], v141, v135);
  v144 = &v142[*(int *)(v143 + 64)];
  *(_QWORD *)v144 = 0;
  v144[8] = 1;
  v145 = *(void (**)(char *, uint64_t))(v133 + 8);
  v145(v134, v135);
  v146 = *(void (**)(char *, uint64_t))(v206 + 8);
  v146(v138, v139);
  v145(v141, v135);
  return ((uint64_t (*)(char *, uint64_t))v146)(v137, v139);
}

uint64_t sub_100047C30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _OWORD v101[3];

  v100 = a2;
  v3 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for GeometryProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for CPAppGridView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100006454(&qword_1000922C8);
  __chkstk_darwin(v90);
  v92 = (uint64_t)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100006454(&qword_1000922D0);
  __chkstk_darwin(v91);
  v94 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100006454(&qword_1000922D8);
  __chkstk_darwin(v93);
  v97 = (uint64_t)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100006454(&qword_1000922E0);
  __chkstk_darwin(v96);
  v99 = (uint64_t)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v95 = (uint64_t)&v90 - v24;
  __chkstk_darwin(v25);
  v98 = (uint64_t)&v90 - v26;
  v27 = type metadata accessor for CPMessageView(0);
  sub_100007AF4(a1 + *(int *)(v27 + 32), (uint64_t)v15, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1 + *(int *)(v27 + 36), v9);
  *v8 = swift_getKeyPath(&unk_100072280);
  v28 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v8, v28, 0);
  *v5 = swift_getKeyPath(&unk_1000722B0);
  v29 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v5, v29, 0);
  sub_10000A6DC((uint64_t)v15, (uint64_t)v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v16[5]], v12, v9);
  *(_QWORD *)&v18[v16[6]] = 1;
  *(_QWORD *)&v18[v16[7]] = 2;
  v18[v16[8]] = 0;
  v30 = &v18[v16[9]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1000722E0);
  v31 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = &v18[v16[10]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_100072310);
  v33 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  sub_100007A2C((uint64_t)v8, (uint64_t)&v18[v16[11]], &qword_1000907C0);
  v34 = sub_100007A2C((uint64_t)v5, (uint64_t)&v18[v16[12]], &qword_1000908C0);
  v35 = static Edge.Set.trailing.getter(v34);
  v36 = v35;
  v37 = static Edge.Set.bottom.getter(v35);
  v38 = Edge.Set.init(rawValue:)(0);
  v39 = Edge.Set.init(rawValue:)(v38);
  if (Edge.Set.init(rawValue:)(v39 & v36) != v36)
    v38 = Edge.Set.init(rawValue:)(v38 | v36);
  v40 = Edge.Set.init(rawValue:)(v38);
  if (Edge.Set.init(rawValue:)(v40 & v37) != v37)
    LOBYTE(v38) = Edge.Set.init(rawValue:)(v38 | v37);
  v41 = (uint64_t)v94;
  v42 = v92;
  sub_100007AF4((uint64_t)v18, v92, type metadata accessor for CPAppGridView);
  v43 = v42 + *(int *)(v90 + 36);
  *(_BYTE *)v43 = v38;
  *(_OWORD *)(v43 + 8) = 0u;
  *(_OWORD *)(v43 + 24) = 0u;
  *(_BYTE *)(v43 + 40) = 1;
  v44 = sub_10000A7C0((uint64_t)v18, type metadata accessor for CPAppGridView);
  v45 = static Edge.Set.leading.getter(v44);
  v46 = Edge.Set.init(rawValue:)(0);
  v47 = v46;
  v48 = Edge.Set.init(rawValue:)(v46);
  v49 = Edge.Set.init(rawValue:)(v48 & v45);
  if (v49 != v45)
  {
    v49 = Edge.Set.init(rawValue:)(v47 | v45);
    LOBYTE(v47) = v49;
  }
  GeometryProxy.size.getter(v49);
  v50 = 16.0;
  if (v51 < 155.0)
    v50 = 8.0;
  v52 = EdgeInsets.init(_all:)(v50);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_100007964(v42, v41, &qword_1000922C8);
  v59 = v41 + *(int *)(v91 + 36);
  *(_BYTE *)v59 = v47;
  *(double *)(v59 + 8) = v52;
  *(_QWORD *)(v59 + 16) = v54;
  *(_QWORD *)(v59 + 24) = v56;
  *(_QWORD *)(v59 + 32) = v58;
  *(_BYTE *)(v59 + 40) = 0;
  v60 = sub_100007928(v42, &qword_1000922C8);
  v61 = static Edge.Set.top.getter(v60);
  v62 = Edge.Set.init(rawValue:)(0);
  v63 = v62;
  v64 = Edge.Set.init(rawValue:)(v62);
  if (Edge.Set.init(rawValue:)(v64 & v61) != v61)
    LOBYTE(v63) = Edge.Set.init(rawValue:)(v63 | v61);
  v65 = EdgeInsets.init(_all:)(33.0);
  v67 = v66;
  v69 = v68;
  v71 = v70;
  v72 = v97;
  sub_100007964(v41, v97, &qword_1000922D0);
  v73 = v72 + *(int *)(v93 + 36);
  *(_BYTE *)v73 = v63;
  *(double *)(v73 + 8) = v65;
  *(_QWORD *)(v73 + 16) = v67;
  *(_QWORD *)(v73 + 24) = v69;
  *(_QWORD *)(v73 + 32) = v71;
  *(_BYTE *)(v73 + 40) = 0;
  v74 = sub_100007928(v41, &qword_1000922D0);
  v75 = GeometryProxy.size.getter(v74);
  GeometryProxy.size.getter(v76);
  v78 = v75 - v77;
  v80 = static Alignment.center.getter(v79);
  _FrameLayout.init(width:height:alignment:)(v101, *(_QWORD *)&v78, 0, 0, 1, v80, v81);
  v82 = v95;
  sub_100007964(v72, v95, &qword_1000922D8);
  v83 = (_OWORD *)(v82 + *(int *)(v96 + 36));
  v84 = v101[1];
  *v83 = v101[0];
  v83[1] = v84;
  v83[2] = v101[2];
  sub_100007928(v72, &qword_1000922D8);
  v85 = v98;
  sub_100007A2C(v82, v98, &qword_1000922E0);
  v86 = v99;
  sub_100007964(v85, v99, &qword_1000922E0);
  v87 = v100;
  *v100 = 0;
  *((_BYTE *)v87 + 8) = 1;
  v88 = sub_100006454(&qword_1000922E8);
  sub_100007964(v86, (uint64_t)v87 + *(int *)(v88 + 48), &qword_1000922E0);
  sub_100007928(v85, &qword_1000922E0);
  return sub_100007928(v86, &qword_1000922E0);
}

uint64_t sub_100048348@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v50[3];
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _OWORD v56[3];

  v55 = a2;
  v3 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v3);
  v51 = (_QWORD *)((char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v5);
  v50[0] = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GeometryProxy(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v11);
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CPAppGridView(0);
  __chkstk_darwin(v14);
  v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006454(&qword_1000922C8);
  __chkstk_darwin(v52);
  v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100006454(&qword_1000922F0);
  __chkstk_darwin(v54);
  v20 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v53 = (uint64_t)v50 - v22;
  v23 = type metadata accessor for CPMessageView(0);
  v24 = *(int *)(v23 + 32);
  v50[2] = a1;
  sub_100007AF4(a1 + v24, (uint64_t)v13, type metadata accessor for CPTimelineEntry);
  v50[1] = a1 + *(int *)(v23 + 36);
  (*(void (**)(char *))(v8 + 16))(v10);
  KeyPath = swift_getKeyPath(&unk_100072280);
  v26 = v50[0];
  *(_QWORD *)v50[0] = KeyPath;
  v27 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = swift_getKeyPath(&unk_1000722B0);
  v29 = (uint64_t)v51;
  *v51 = v28;
  v30 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  sub_10000A6DC((uint64_t)v13, (uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v16[v14[5]], v10, v7);
  *(_QWORD *)&v16[v14[6]] = 1;
  *(_QWORD *)&v16[v14[7]] = 3;
  v16[v14[8]] = 0;
  v31 = &v16[v14[9]];
  *(_QWORD *)v31 = swift_getKeyPath(&unk_1000722E0);
  v32 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v31, v32, 0);
  v33 = &v16[v14[10]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_100072310);
  v34 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  sub_100007A2C(v26, (uint64_t)&v16[v14[11]], &qword_1000907C0);
  v35 = sub_100007A2C(v29, (uint64_t)&v16[v14[12]], &qword_1000908C0);
  LOBYTE(v14) = static Edge.Set.all.getter(v35);
  sub_100007AF4((uint64_t)v16, (uint64_t)v18, type metadata accessor for CPAppGridView);
  v36 = &v18[*(int *)(v52 + 36)];
  *v36 = (char)v14;
  *(_OWORD *)(v36 + 8) = 0u;
  *(_OWORD *)(v36 + 24) = 0u;
  v36[40] = 1;
  v37 = sub_10000A7C0((uint64_t)v16, type metadata accessor for CPAppGridView);
  GeometryProxy.size.getter(v37);
  v39 = v38 - sub_1000446B0();
  v41 = static Alignment.center.getter(v40);
  _FrameLayout.init(width:height:alignment:)(v56, 0, 1, *(_QWORD *)&v39, 0, v41, v42);
  sub_100007964((uint64_t)v18, (uint64_t)v20, &qword_1000922C8);
  v43 = &v20[*(int *)(v54 + 36)];
  v44 = v56[1];
  *(_OWORD *)v43 = v56[0];
  *((_OWORD *)v43 + 1) = v44;
  *((_OWORD *)v43 + 2) = v56[2];
  sub_100007928((uint64_t)v18, &qword_1000922C8);
  v45 = v53;
  sub_100007A2C((uint64_t)v20, v53, &qword_1000922F0);
  sub_100007964(v45, (uint64_t)v20, &qword_1000922F0);
  v46 = v55;
  *v55 = 0;
  *((_BYTE *)v46 + 8) = 1;
  v47 = v46;
  v48 = sub_100006454(&qword_1000922F8);
  sub_100007964((uint64_t)v20, (uint64_t)v47 + *(int *)(v48 + 48), &qword_1000922F0);
  sub_100007928(v45, &qword_1000922F0);
  return sub_100007928((uint64_t)v20, &qword_1000922F0);
}

uint64_t sub_100048810@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v48[3];
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _OWORD v56[3];

  v55 = a2;
  v3 = type metadata accessor for WidgetFamily(0);
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  __chkstk_darwin(v3);
  v52 = (uint64_t)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v5);
  v49 = (_QWORD *)((char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for GeometryProxy(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v14);
  v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for CPAppGridView(0);
  __chkstk_darwin(v17);
  v19 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100006454(&qword_100092300);
  __chkstk_darwin(v51);
  v21 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v50 = (uint64_t)v48 - v23;
  v24 = type metadata accessor for CPMessageView(0);
  v48[1] = v24;
  v48[2] = a1;
  sub_100007AF4(a1 + *(int *)(v24 + 32), (uint64_t)v16, type metadata accessor for CPTimelineEntry);
  v25 = a1 + *(int *)(v24 + 36);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, v10);
  *v9 = swift_getKeyPath(&unk_100072280);
  v26 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v9, v26, 0);
  KeyPath = swift_getKeyPath(&unk_1000722B0);
  v28 = (uint64_t)v49;
  *v49 = KeyPath;
  v29 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  sub_10000A6DC((uint64_t)v16, (uint64_t)v19);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v19[v17[5]], v13, v10);
  *(_QWORD *)&v19[v17[6]] = 2;
  *(_QWORD *)&v19[v17[7]] = 3;
  v19[v17[8]] = 0;
  v30 = &v19[v17[9]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1000722E0);
  v31 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = &v19[v17[10]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_100072310);
  v33 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  sub_100007A2C((uint64_t)v9, (uint64_t)&v19[v17[11]], &qword_1000907C0);
  v34 = sub_100007A2C(v28, (uint64_t)&v19[v17[12]], &qword_1000908C0);
  v35 = GeometryProxy.size.getter(v34);
  v36 = v52;
  sub_100014E8C(v52);
  v37 = sub_100024388(v25, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v36, v54);
  v39 = static Alignment.center.getter(v38);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(v56, v35 - v37, 0, 0, 1, v39, v40);
  sub_100007AF4((uint64_t)v19, (uint64_t)v21, type metadata accessor for CPAppGridView);
  v41 = &v21[*(int *)(v51 + 36)];
  v42 = v56[1];
  *(_OWORD *)v41 = v56[0];
  *((_OWORD *)v41 + 1) = v42;
  *((_OWORD *)v41 + 2) = v56[2];
  sub_10000A7C0((uint64_t)v19, type metadata accessor for CPAppGridView);
  v43 = v50;
  sub_100007A2C((uint64_t)v21, v50, &qword_100092300);
  sub_100007964(v43, (uint64_t)v21, &qword_100092300);
  v44 = v55;
  *v55 = 0;
  *((_BYTE *)v44 + 8) = 1;
  v45 = v44;
  v46 = sub_100006454(&qword_100092308);
  sub_100007964((uint64_t)v21, (uint64_t)v45 + *(int *)(v46 + 48), &qword_100092300);
  sub_100007928(v43, &qword_100092300);
  return sub_100007928((uint64_t)v21, &qword_100092300);
}

double sub_100048CB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  double result;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;

  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000906E0 != -1)
    swift_once(&qword_1000906E0, sub_10000AB40);
  v8 = qword_1000959B8;
  v9 = a1 + *(int *)(type metadata accessor for CPMessageView(0) + 36);
  swift_retain(v8);
  v11 = GeometryProxy.size.getter(v10);
  sub_100014E8C((uint64_t)v7);
  v12 = sub_100024388(v9, (uint64_t)v7);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = static Alignment.center.getter(v13);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v21, v11 - v12, 0, 0, 1, v14, v15);
  v16 = v21;
  v17 = v22;
  v18 = v23;
  v19 = v24;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v18;
  *(_BYTE *)(a2 + 48) = v19;
  result = *(double *)&v25;
  *(_OWORD *)(a2 + 56) = v25;
  return result;
}

uint64_t sub_100048E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[2];
  _BYTE v97[2];

  v95 = a1;
  v85 = sub_100006454(&qword_100092220);
  __chkstk_darwin(v85);
  v80 = (uint64_t *)((char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = sub_100006454(&qword_100092228);
  __chkstk_darwin(v82);
  v84 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100006454(&qword_100092230);
  __chkstk_darwin(v90);
  v86 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100006454(&qword_100092238);
  __chkstk_darwin(v83);
  v81 = (uint64_t *)((char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_100006454(&qword_100092240);
  __chkstk_darwin(v91);
  v87 = (uint64_t *)((char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = sub_100006454(&qword_100092248);
  __chkstk_darwin(v93);
  v92 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100006454(&qword_100092250);
  __chkstk_darwin(v89);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100092258);
  __chkstk_darwin(v10);
  v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100092260);
  __chkstk_darwin(v13);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100006454(&qword_100092268);
  __chkstk_darwin(v94);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WidgetFamily(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CPMessageView(0);
  v88 = v1;
  sub_100014E8C((uint64_t)v21);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if ((_DWORD)v22 == enum case for WidgetFamily.systemSmall(_:))
  {
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v24 = sub_1000078D8(&qword_100092288, &qword_100092240, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v12, &type metadata for EmptyView, v91, &protocol witness table for EmptyView, v24);
    sub_100007964((uint64_t)v15, (uint64_t)v9, &qword_100092260);
    swift_storeEnumTagMultiPayload(v9, v89, 0);
    v25 = sub_10004C0C8(&qword_100092280, &qword_100092260, &qword_100092288, &qword_100092240);
    v26 = sub_10004B6C4();
    _ConditionalContent<>.init(storage:)(v9, v13, v90, v25, v26);
    sub_100007928((uint64_t)v15, &qword_100092260);
    v27 = &qword_100092268;
    v28 = (uint64_t)v92;
    sub_100007964((uint64_t)v17, (uint64_t)v92, &qword_100092268);
    swift_storeEnumTagMultiPayload(v28, v93, 0);
    v29 = sub_100006454(&qword_100092270);
    v30 = sub_10004B638();
    v31 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v28, v94, v29, v30, v31);
    v32 = (uint64_t)v17;
LABEL_10:
    v44 = v27;
    return sub_100007928(v32, v44);
  }
  v33 = v91;
  v79 = v13;
  if ((_DWORD)v22 == enum case for WidgetFamily.systemMedium(_:))
  {
    v34 = static VerticalAlignment.center.getter(v23);
    v35 = (uint64_t)v87;
    *v87 = v34;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v36 = sub_100006454(&qword_1000922C0);
    sub_100047C30(v88, (_QWORD *)(v35 + *(int *)(v36 + 44)));
    sub_100007964(v35, (uint64_t)v12, &qword_100092240);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v37 = sub_1000078D8(&qword_100092288, &qword_100092240, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v12, &type metadata for EmptyView, v33, &protocol witness table for EmptyView, v37);
    sub_100007964((uint64_t)v15, (uint64_t)v9, &qword_100092260);
    swift_storeEnumTagMultiPayload(v9, v89, 0);
    v38 = sub_10004C0C8(&qword_100092280, &qword_100092260, &qword_100092288, &qword_100092240);
    v39 = sub_10004B6C4();
    _ConditionalContent<>.init(storage:)(v9, v79, v90, v38, v39);
    sub_100007928((uint64_t)v15, &qword_100092260);
    v40 = (uint64_t)v92;
    sub_100007964((uint64_t)v17, (uint64_t)v92, &qword_100092268);
    swift_storeEnumTagMultiPayload(v40, v93, 0);
    v41 = sub_100006454(&qword_100092270);
    v42 = sub_10004B638();
    v43 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v40, v94, v41, v42, v43);
    sub_100007928((uint64_t)v17, &qword_100092268);
    v32 = v35;
    v44 = &qword_100092240;
    return sub_100007928(v32, v44);
  }
  if ((_DWORD)v22 == enum case for WidgetFamily.systemLarge(_:))
  {
    v45 = static HorizontalAlignment.center.getter(v22);
    v46 = (uint64_t)v81;
    *v81 = v45;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v47 = sub_100006454(&qword_1000922B8);
    sub_100048348(v88, (_QWORD *)(v46 + *(int *)(v47 + 44)));
    v27 = &qword_100092238;
    v48 = v84;
    sub_100007964(v46, v84, &qword_100092238);
    swift_storeEnumTagMultiPayload(v48, v82, 0);
    v49 = sub_1000078D8(&qword_100092298, &qword_100092238, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v50 = sub_1000078D8(&qword_1000922A0, &qword_100092220, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v51 = (uint64_t)v86;
    _ConditionalContent<>.init(storage:)(v48, v83, v85, v49, v50);
    sub_100007964(v51, (uint64_t)v9, &qword_100092230);
    swift_storeEnumTagMultiPayload(v9, v89, 1);
    v52 = v9;
    v53 = sub_10004C0C8(&qword_100092280, &qword_100092260, &qword_100092288, &qword_100092240);
    v54 = sub_10004B6C4();
    _ConditionalContent<>.init(storage:)(v52, v79, v90, v53, v54);
    sub_100007928(v51, &qword_100092230);
    v55 = (uint64_t)v92;
    sub_100007964((uint64_t)v17, (uint64_t)v92, &qword_100092268);
    swift_storeEnumTagMultiPayload(v55, v93, 0);
    v56 = sub_100006454(&qword_100092270);
    v57 = sub_10004B638();
    v58 = sub_10004B760();
    v59 = (_BYTE *)v55;
LABEL_9:
    _ConditionalContent<>.init(storage:)(v59, v94, v56, v57, v58);
    sub_100007928((uint64_t)v17, &qword_100092268);
    v32 = v46;
    goto LABEL_10;
  }
  v60 = v92;
  if ((_DWORD)v22 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v61 = static VerticalAlignment.center.getter(v23);
    v46 = (uint64_t)v80;
    *v80 = v61;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v62 = sub_100006454(&qword_1000922B0);
    sub_100048810(v88, (_QWORD *)(v46 + *(int *)(v62 + 44)));
    v27 = &qword_100092220;
    v63 = v84;
    sub_100007964(v46, v84, &qword_100092220);
    swift_storeEnumTagMultiPayload(v63, v82, 1);
    v64 = sub_1000078D8(&qword_100092298, &qword_100092238, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v65 = sub_1000078D8(&qword_1000922A0, &qword_100092220, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v66 = (uint64_t)v86;
    _ConditionalContent<>.init(storage:)(v63, v83, v85, v64, v65);
    sub_100007964(v66, (uint64_t)v9, &qword_100092230);
    swift_storeEnumTagMultiPayload(v9, v89, 1);
    v67 = v9;
    v68 = sub_10004C0C8(&qword_100092280, &qword_100092260, &qword_100092288, &qword_100092240);
    v69 = sub_10004B6C4();
    _ConditionalContent<>.init(storage:)(v67, v79, v90, v68, v69);
    sub_100007928(v66, &qword_100092230);
    sub_100007964((uint64_t)v17, (uint64_t)v60, &qword_100092268);
    swift_storeEnumTagMultiPayload(v60, v93, 0);
    v56 = sub_100006454(&qword_100092270);
    v57 = sub_10004B638();
    v58 = sub_10004B760();
    v59 = v60;
    goto LABEL_9;
  }
  v71 = v93;
  v72 = v94;
  if ((_DWORD)v22 == enum case for WidgetFamily.accessoryCircular(_:)
    || (_DWORD)v22 == enum case for WidgetFamily.accessoryRectangular(_:)
    || (_DWORD)v22 == enum case for WidgetFamily.accessoryInline(_:))
  {
    v96[0] = 0;
    _ConditionalContent<>.init(storage:)(v96, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
    *v60 = v96[1];
    swift_storeEnumTagMultiPayload(v60, v71, 1);
    v76 = sub_100006454(&qword_100092270);
    v77 = sub_10004B638();
    v78 = sub_10004B760();
    return _ConditionalContent<>.init(storage:)(v60, v72, v76, v77, v78);
  }
  else
  {
    v97[0] = 1;
    _ConditionalContent<>.init(storage:)(v97, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
    *v60 = v97[1];
    swift_storeEnumTagMultiPayload(v60, v71, 1);
    v73 = sub_100006454(&qword_100092270);
    v74 = sub_10004B638();
    v75 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v60, v72, v73, v74, v75);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
}

uint64_t sub_1000498C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 v90;
  unsigned __int8 v91;
  uint64_t v92;
  char v93;

  v3 = type metadata accessor for WidgetFamily(0);
  v76 = *(_QWORD *)(v3 - 8);
  v77 = v3;
  __chkstk_darwin(v3);
  v75 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v74 = (uint64_t)&v63 - v6;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - v12;
  v14 = v1 + *(int *)(type metadata accessor for CPMessageView(0) + 28);
  v15 = *(_QWORD *)v14;
  v16 = *(_BYTE *)(v14 + 8);
  sub_100006904(*(_QWORD *)v14, v16);
  v17 = sub_100014EBC(v15, v16);
  result = sub_100006A4C(v15, v16);
  if ((v17 & 1) != 0
    && (v19 = sub_100015074((uint64_t)v13),
        static WidgetRenderingMode.accented.getter(v19),
        v20 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode), v21 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v7, v20), v22 = *(void (**)(char *, uint64_t))(v8 + 8), v22(v10, v7), result = ((uint64_t (*)(char *, uint64_t))v22)(v13, v7), (v21 & 1) == 0))
  {
    v37 = v74;
    sub_100014E8C(v74);
    v39 = v75;
    v38 = v76;
    v40 = v77;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v75, enum case for WidgetFamily.systemSmall(_:), v77);
    v41 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v78, v40, v41);
    dispatch thunk of RawRepresentable.rawValue.getter(&v92, v40, v41);
    v42 = v78;
    v43 = v92;
    v44 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v44(v39, v40);
    v44(v37, v40);
    if (v42 == v43)
    {
      if (qword_1000906E0 != -1)
        swift_once(&qword_1000906E0, sub_10000AB40);
      v45 = qword_1000959B8;
      v92 = qword_1000959B8;
      v93 = 0;
    }
    else
    {
      if (qword_1000906D8 != -1)
        swift_once(&qword_1000906D8, sub_10000AB08);
      v45 = qword_1000959B0;
      v92 = qword_1000959B0;
      v93 = 1;
    }
    swift_retain(v45);
    _ConditionalContent<>.init(storage:)(&v92, &type metadata for Color, &type metadata for Color, &protocol witness table for Color, &protocol witness table for Color);
    v76 = v78;
    v70 = v79;
    sub_100049DB0((uint64_t)&v78);
    v46 = v79;
    v77 = v78;
    v71 = v79;
    v74 = v81;
    v75 = v80;
    v69 = v82;
    v72 = v84;
    v73 = v83;
    v47 = v86;
    v68 = v85;
    v65 = v86;
    v48 = v87;
    v33 = v88;
    v64 = v87;
    v34 = v89;
    v49 = v90;
    v50 = v91;
    swift_retain(v76);
    v66 = v50;
    v67 = v49;
    v59 = v47;
    v60 = v48;
    v51 = v77;
    v52 = v46;
    v54 = v74;
    v53 = v75;
    v55 = v69;
    v30 = v68;
    sub_10004B44C(v77, v52, v75, v74, v69, v73, v72, v68, v59, v60, v33, v34, v49, v50);
    v62 = v50;
    v61 = v49;
    v32 = v64;
    v31 = v65;
    v56 = v53;
    v57 = v54;
    v29 = v72;
    v28 = v73;
    sub_10004B58C(v51, v71, v56, v57, v55, v73, v72, v30, v65, v64, v33, v34, v61, v62);
    v23 = v76;
    result = swift_release(v76);
    v27 = v55;
    v26 = v74;
    v25 = v75;
    v24 = v71;
    v36 = v70;
    if (v66)
      v58 = 0x10000;
    else
      v58 = 0;
    v35 = v58 | v67;
  }
  else
  {
    v23 = 0;
    v77 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 255;
  }
  *(_QWORD *)a1 = v23;
  *(_QWORD *)(a1 + 8) = v36;
  *(_QWORD *)(a1 + 16) = v77;
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  *(_QWORD *)(a1 + 48) = v27;
  *(_QWORD *)(a1 + 56) = v28;
  *(_QWORD *)(a1 + 64) = v29;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_WORD *)(a1 + 112) = v35;
  *(_BYTE *)(a1 + 114) = BYTE2(v35);
  return result;
}

uint64_t sub_100049DB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int16 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  unsigned __int8 v105;
  char v106;
  _BYTE v107[98];
  char v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[3];
  __int128 v112;
  __int16 v113;
  char v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  unsigned __int8 v118;
  __int128 v119;

  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CPMessageView(0);
  sub_100014E8C((uint64_t)v6);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if ((_DWORD)v7 != enum case for WidgetFamily.systemSmall(_:))
  {
    if ((_DWORD)v7 == enum case for WidgetFamily.systemMedium(_:))
    {
      v21 = static VerticalAlignment.center.getter(v8);
      if (qword_1000906E0 != -1)
        swift_once(&qword_1000906E0, sub_10000AB40);
      v22 = qword_1000959B8;
      swift_retain(qword_1000959B8);
      v24 = GeometryProxy.size.getter(v23);
      GeometryProxy.size.getter(v25);
      v27 = v24 - v26;
      v29 = static Alignment.center.getter(v28);
      _FrameLayout.init(width:height:alignment:)(&v115, *(_QWORD *)&v27, 0, 0, 1, v29, v30);
      v109 = (unint64_t)v21;
      v110 = 0uLL;
      *(_QWORD *)&v111[0] = 1;
      *((_QWORD *)&v111[0] + 1) = v22;
      *(_QWORD *)&v111[1] = v115;
      *((_QWORD *)&v111[1] + 1) = v116;
      *(_QWORD *)&v111[2] = v117;
      *((_QWORD *)&v111[2] + 1) = v118;
      v112 = v119;
      LOBYTE(v113) = 1;
      swift_retain(v22);
      v31 = sub_100006454(&qword_100092528);
      v32 = sub_1000078D8(&qword_100092520, &qword_100092528, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(&v109, &type metadata for EmptyView, v31, &protocol witness table for EmptyView, v32);
      v109 = *(_OWORD *)v107;
      v110 = *(_OWORD *)&v107[16];
      v111[0] = *(_OWORD *)&v107[32];
      v111[1] = *(_OWORD *)&v107[48];
      v111[2] = *(_OWORD *)&v107[64];
      v112 = *(_OWORD *)&v107[80];
      v113 = v107[96];
      v33 = sub_100006454(&qword_100092518);
      v34 = sub_100006454(&qword_100092538);
      v35 = sub_10004C0C8(&qword_100092510, &qword_100092518, &qword_100092520, &qword_100092528);
      v36 = sub_10004C148();
      v37 = v33;
      v38 = v34;
    }
    else
    {
      if ((_DWORD)v7 != enum case for WidgetFamily.systemLarge(_:))
      {
        if ((_DWORD)v7 != enum case for WidgetFamily.systemExtraLarge(_:))
        {
          if ((_DWORD)v7 != enum case for WidgetFamily.accessoryCircular(_:)
            && (_DWORD)v7 != enum case for WidgetFamily.accessoryRectangular(_:)
            && (_DWORD)v7 != enum case for WidgetFamily.accessoryInline(_:))
          {
            v107[0] = 1;
            _ConditionalContent<>.init(storage:)(v107, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
            *(_QWORD *)v107 = v109;
            memset(&v107[8], 0, 90);
            v108 = 1;
            v89 = sub_100006454(&qword_100092500);
            v90 = sub_100006454(&qword_100092270);
            v91 = sub_10004C03C();
            v92 = sub_10004B760();
            _ConditionalContent<>.init(storage:)(v107, v89, v90, v91, v92);
            v97 = v110;
            v98 = v109;
            v95 = v111[1];
            v96 = v111[0];
            v93 = v112;
            v94 = v111[2];
            v64 = v113;
            v65 = v114;
            result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
            v63 = v93;
            v62 = v94;
            v61 = v95;
            v60 = v96;
            v59 = v97;
            v58 = v98;
            goto LABEL_21;
          }
          v107[0] = 0;
          _ConditionalContent<>.init(storage:)(v107, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
          *(_QWORD *)v107 = v109;
          memset(&v107[8], 0, 90);
          v108 = 1;
          goto LABEL_6;
        }
        v66 = static VerticalAlignment.center.getter(v8);
        sub_100048CB8(v1, (uint64_t)&v109);
        v67 = v109;
        v68 = BYTE8(v109);
        v69 = v110;
        v70 = LOBYTE(v111[0]);
        v71 = *((_QWORD *)&v111[0] + 1);
        v72 = LOBYTE(v111[1]);
        v73 = *(_OWORD *)((char *)&v111[1] + 8);
        v109 = (unint64_t)v66;
        *(_QWORD *)&v110 = 0;
        *((_QWORD *)&v110 + 1) = v67;
        *(_QWORD *)&v111[0] = v68;
        *(_OWORD *)((char *)v111 + 8) = v69;
        *((_QWORD *)&v111[1] + 1) = v70;
        *(_QWORD *)&v111[2] = v71;
        *((_QWORD *)&v111[2] + 1) = v72;
        v112 = v73;
        LOBYTE(v113) = 1;
        swift_retain(v69);
        v74 = sub_100006454(&qword_100092548);
        v75 = sub_100006454(&qword_100092528);
        v76 = sub_1000078D8(&qword_100092540, &qword_100092548, (uint64_t)&protocol conformance descriptor for VStack<A>);
        v77 = sub_1000078D8(&qword_100092520, &qword_100092528, (uint64_t)&protocol conformance descriptor for HStack<A>);
        _ConditionalContent<>.init(storage:)(&v109, v74, v75, v76, v77);
        v109 = *(_OWORD *)v107;
        v110 = *(_OWORD *)&v107[16];
        v111[0] = *(_OWORD *)&v107[32];
        v111[1] = *(_OWORD *)&v107[48];
        v111[2] = *(_OWORD *)&v107[64];
        v112 = *(_OWORD *)&v107[80];
        LOBYTE(v113) = v107[96];
        HIBYTE(v113) = 1;
        v78 = sub_100006454(&qword_100092518);
        v79 = sub_100006454(&qword_100092538);
        v80 = sub_10004C0C8(&qword_100092510, &qword_100092518, &qword_100092520, &qword_100092528);
        v81 = sub_10004C148();
        _ConditionalContent<>.init(storage:)(&v109, v78, v79, v80, v81);
        if (v106)
          v82 = 256;
        else
          v82 = 0;
        *(_OWORD *)v107 = v99;
        *(_OWORD *)&v107[16] = v100;
        *(_OWORD *)&v107[32] = v101;
        *(_OWORD *)&v107[48] = v102;
        *(_OWORD *)&v107[64] = v103;
        *(_OWORD *)&v107[80] = v104;
        *(_WORD *)&v107[96] = v82 | v105;
        v108 = 0;
        v83 = sub_100006454(&qword_100092500);
        v84 = sub_100006454(&qword_100092270);
        v85 = sub_10004C03C();
        v86 = sub_10004B760();
        _ConditionalContent<>.init(storage:)(v107, v83, v84, v85, v86);
        v57 = v69;
LABEL_19:
        result = swift_release(v57);
        goto LABEL_20;
      }
      v39 = static HorizontalAlignment.center.getter(v7);
      if (qword_1000906E0 != -1)
        swift_once(&qword_1000906E0, sub_10000AB40);
      v22 = qword_1000959B8;
      swift_retain(qword_1000959B8);
      GeometryProxy.size.getter(v40);
      v42 = v41 - sub_1000446B0();
      v44 = static Alignment.center.getter(v43);
      _FrameLayout.init(width:height:alignment:)(&v115, 0, 1, *(_QWORD *)&v42, 0, v44, v45);
      v109 = (unint64_t)v39;
      v110 = 0uLL;
      *(_QWORD *)&v111[0] = 1;
      *((_QWORD *)&v111[0] + 1) = v22;
      *(_QWORD *)&v111[1] = v115;
      *((_QWORD *)&v111[1] + 1) = v116;
      *(_QWORD *)&v111[2] = v117;
      *((_QWORD *)&v111[2] + 1) = v118;
      v112 = v119;
      LOBYTE(v113) = 0;
      swift_retain(v22);
      v46 = sub_100006454(&qword_100092548);
      v47 = sub_100006454(&qword_100092528);
      v48 = sub_1000078D8(&qword_100092540, &qword_100092548, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v49 = sub_1000078D8(&qword_100092520, &qword_100092528, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(&v109, v46, v47, v48, v49);
      v109 = *(_OWORD *)v107;
      v110 = *(_OWORD *)&v107[16];
      v111[0] = *(_OWORD *)&v107[32];
      v111[1] = *(_OWORD *)&v107[48];
      v111[2] = *(_OWORD *)&v107[64];
      v112 = *(_OWORD *)&v107[80];
      LOBYTE(v113) = v107[96];
      HIBYTE(v113) = 1;
      v50 = sub_100006454(&qword_100092518);
      v51 = sub_100006454(&qword_100092538);
      v35 = sub_10004C0C8(&qword_100092510, &qword_100092518, &qword_100092520, &qword_100092528);
      v36 = sub_10004C148();
      v37 = v50;
      v38 = v51;
    }
    _ConditionalContent<>.init(storage:)(&v109, v37, v38, v35, v36);
    if (v106)
      v52 = 256;
    else
      v52 = 0;
    *(_OWORD *)v107 = v99;
    *(_OWORD *)&v107[16] = v100;
    *(_OWORD *)&v107[32] = v101;
    *(_OWORD *)&v107[48] = v102;
    *(_OWORD *)&v107[64] = v103;
    *(_OWORD *)&v107[80] = v104;
    *(_WORD *)&v107[96] = v52 | v105;
    v108 = 0;
    v53 = sub_100006454(&qword_100092500);
    v54 = sub_100006454(&qword_100092270);
    v55 = sub_10004C03C();
    v56 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v107, v53, v54, v55, v56);
    v57 = v22;
    goto LABEL_19;
  }
  LOBYTE(v113) = 0;
  v112 = 0u;
  memset(v111, 0, sizeof(v111));
  v109 = 0u;
  v110 = 0u;
  v9 = sub_100006454(&qword_100092528);
  v10 = sub_1000078D8(&qword_100092520, &qword_100092528, (uint64_t)&protocol conformance descriptor for HStack<A>);
  _ConditionalContent<>.init(storage:)(&v109, &type metadata for EmptyView, v9, &protocol witness table for EmptyView, v10);
  v109 = *(_OWORD *)v107;
  v110 = *(_OWORD *)&v107[16];
  v111[0] = *(_OWORD *)&v107[32];
  v111[1] = *(_OWORD *)&v107[48];
  v111[2] = *(_OWORD *)&v107[64];
  v112 = *(_OWORD *)&v107[80];
  v113 = v107[96];
  v11 = sub_100006454(&qword_100092518);
  v12 = sub_100006454(&qword_100092538);
  v13 = sub_10004C0C8(&qword_100092510, &qword_100092518, &qword_100092520, &qword_100092528);
  v14 = sub_10004C148();
  _ConditionalContent<>.init(storage:)(&v109, v11, v12, v13, v14);
  if (v106)
    v15 = 256;
  else
    v15 = 0;
  *(_OWORD *)v107 = v99;
  *(_OWORD *)&v107[16] = v100;
  *(_OWORD *)&v107[32] = v101;
  *(_OWORD *)&v107[48] = v102;
  *(_OWORD *)&v107[64] = v103;
  *(_OWORD *)&v107[80] = v104;
  *(_WORD *)&v107[96] = v15 | v105;
  v108 = 0;
LABEL_6:
  v16 = sub_100006454(&qword_100092500);
  v17 = sub_100006454(&qword_100092270);
  v18 = sub_10004C03C();
  v19 = sub_10004B760();
  result = _ConditionalContent<>.init(storage:)(v107, v16, v17, v18, v19);
LABEL_20:
  v58 = v109;
  v59 = v110;
  v60 = v111[0];
  v61 = v111[1];
  v62 = v111[2];
  v63 = v112;
  v64 = v113;
  v65 = v114;
LABEL_21:
  *(_OWORD *)a1 = v58;
  *(_OWORD *)(a1 + 16) = v59;
  *(_OWORD *)(a1 + 32) = v60;
  *(_OWORD *)(a1 + 48) = v61;
  *(_OWORD *)(a1 + 64) = v62;
  *(_OWORD *)(a1 + 80) = v63;
  *(_WORD *)(a1 + 96) = v64;
  *(_BYTE *)(a1 + 98) = v65;
  return result;
}

uint64_t sub_10004A780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD v31[3];

  v1 = type metadata accessor for ContainerBackgroundPlacement(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_1000921C0);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100006454(&qword_1000921C8);
  __chkstk_darwin(v8);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v7 = static Alignment.center.getter(v11);
  v7[1] = v12;
  v13 = sub_100006454(&qword_1000921D0);
  sub_10004A98C(v0, (uint64_t)v7 + *(int *)(v13 + 44));
  v14 = type metadata accessor for CPMessageView(0);
  v15 = GeometryProxy.size.getter(v14);
  GeometryProxy.size.getter(v16);
  v18 = v17;
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(v31, *(_QWORD *)&v15, 0, v18, 0, v20, v21);
  sub_100007964((uint64_t)v7, (uint64_t)v10, &qword_1000921C0);
  v22 = &v10[*(int *)(v8 + 36)];
  v23 = v31[1];
  *(_OWORD *)v22 = v31[0];
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v31[2];
  v24 = sub_100007928((uint64_t)v7, &qword_1000921C0);
  v25 = static ContainerBackgroundPlacement.widget.getter(v24);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  v29 = sub_10004B2FC();
  View.containerBackground<A>(for:alignment:content:)(v4, v26, v28, sub_100005EF8, 0, v8, &type metadata for Color, v29, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100007928((uint64_t)v10, &qword_1000921C8);
}

uint64_t sub_10004A98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 v97;
  unsigned __int8 v98;

  v4 = sub_100006454(&qword_1000921E8);
  __chkstk_darwin(v4);
  v73 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v69 = (uint64_t)&v62 - v7;
  v8 = sub_100006454(&qword_1000921F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v62 - v12;
  v14 = sub_100006454(&qword_1000921F8);
  __chkstk_darwin(v14);
  v67 = (uint64_t)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - v17;
  v19 = sub_1000498C4((uint64_t)&v83);
  v20 = v84;
  v81 = v83;
  v66 = v84;
  v22 = v85;
  v21 = v86;
  v65 = v85;
  v74 = v86;
  v82 = v87;
  v72 = v88;
  v71 = v89;
  v70 = v90;
  v79 = v92;
  v80 = v91;
  v77 = v94;
  v78 = v93;
  v63 = v98;
  v64 = v97;
  v68 = v97 | (v98 << 16);
  v75 = v95;
  v76 = v96;
  *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v19);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 0;
  v23 = (uint64_t)&v18[*(int *)(sub_100006454(&qword_100092200) + 44)];
  v62 = v18;
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v25 = sub_100006454(&qword_100092208);
  sub_10004AF30(a1, (uint64_t)&v13[*(int *)(v25 + 44)]);
  sub_100007964((uint64_t)v13, (uint64_t)v10, &qword_1000921F0);
  sub_100007964((uint64_t)v10, v23, &qword_1000921F0);
  v26 = v23 + *(int *)(sub_100006454(&qword_100092210) + 48);
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  sub_100007928((uint64_t)v13, &qword_1000921F0);
  sub_100007928((uint64_t)v10, &qword_1000921F0);
  v27 = v69;
  sub_100048E28(v69);
  v28 = v67;
  sub_100007964((uint64_t)v18, v67, &qword_1000921F8);
  v29 = v73;
  sub_100007964(v27, v73, &qword_1000921E8);
  *(_QWORD *)a2 = v81;
  *(_QWORD *)(a2 + 8) = v20;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v21;
  v30 = v72;
  *(_QWORD *)(a2 + 32) = v82;
  *(_QWORD *)(a2 + 40) = v30;
  v31 = v70;
  *(_QWORD *)(a2 + 48) = v71;
  *(_QWORD *)(a2 + 56) = v31;
  v32 = v79;
  v33 = v80;
  *(_QWORD *)(a2 + 64) = v80;
  *(_QWORD *)(a2 + 72) = v32;
  v35 = v77;
  v34 = v78;
  *(_QWORD *)(a2 + 80) = v78;
  *(_QWORD *)(a2 + 88) = v35;
  v36 = v75;
  v37 = v76;
  *(_QWORD *)(a2 + 96) = v75;
  *(_QWORD *)(a2 + 104) = v37;
  *(_BYTE *)(a2 + 114) = v63;
  *(_WORD *)(a2 + 112) = v64;
  v38 = sub_100006454(&qword_100092218);
  sub_100007964(v28, a2 + *(int *)(v38 + 48), &qword_1000921F8);
  sub_100007964(v29, a2 + *(int *)(v38 + 64), &qword_1000921E8);
  LODWORD(v28) = v68;
  v59 = v36;
  v60 = v37;
  v57 = v34;
  v58 = v35;
  v55 = v33;
  v56 = v32;
  v39 = v33;
  v40 = v81;
  v41 = v82;
  LOBYTE(a2) = v66;
  v42 = v65;
  v43 = v74;
  v44 = v72;
  v45 = v71;
  v46 = v70;
  sub_10004B380(v81, v66, v65, v74, v82, v72, v71, v70, v55, v56, v57, v58, v59, v60, v68, SBYTE2(v68));
  sub_10004B380(v40, a2, v42, v43, v41, v44, v45, v46, v39, v79, v78, v77, v75, v76, v28, SBYTE2(v28));
  sub_100007928(v69, &qword_1000921E8);
  sub_100007928((uint64_t)v62, &qword_1000921F8);
  v61 = v28;
  v47 = v76;
  v48 = v75;
  v49 = v77;
  v50 = v78;
  v51 = v79;
  v52 = v40;
  LOBYTE(v40) = v66;
  v53 = v65;
  sub_10004B4C0(v52, v66, v65, v74, v82, v44, v45, v46, v80, v79, v78, v77, v75, v76, v61, SBYTE2(v61));
  sub_100007928(v73, &qword_1000921E8);
  sub_100007928(v67, &qword_1000921F8);
  return sub_10004B4C0(v81, v40, v53, v74, v82, v44, v45, v46, v80, v51, v50, v49, v48, v47, v68, SBYTE2(v68));
}

uint64_t sub_10004AF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[3];

  v45 = a2;
  v3 = type metadata accessor for WidgetFamily(0);
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006454(&qword_100092310);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - v10;
  v12 = sub_100006454(&qword_100092318);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100006454(&qword_100092320);
  __chkstk_darwin(v41);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006454(&qword_100092328);
  __chkstk_darwin(v42);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v40 - v21;
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v23 = (uint64_t)&v14[*(int *)(sub_100006454(&qword_100092330) + 44)];
  *(_QWORD *)v11 = static HorizontalAlignment.leading.getter(v24);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v25 = sub_100006454(&qword_100092338);
  sub_10004510C(a1, &v11[*(int *)(v25 + 44)]);
  sub_100007964((uint64_t)v11, (uint64_t)v8, &qword_100092310);
  sub_100007964((uint64_t)v8, v23, &qword_100092310);
  v26 = v23 + *(int *)(sub_100006454(&qword_100092340) + 48);
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  sub_100007928((uint64_t)v11, &qword_100092310);
  v27 = sub_100007928((uint64_t)v8, &qword_100092310);
  LOBYTE(v8) = static Edge.Set.all.getter(v27);
  sub_100007964((uint64_t)v14, (uint64_t)v16, &qword_100092318);
  v28 = &v16[*(int *)(v41 + 36)];
  *v28 = (char)v8;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  v28[40] = 1;
  sub_100007928((uint64_t)v14, &qword_100092318);
  v29 = a1 + *(int *)(type metadata accessor for CPMessageView(0) + 36);
  sub_100014E8C((uint64_t)v5);
  v30 = sub_100024388(v29, (uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v5, v44);
  v31 = sub_1000446B0();
  v33 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(v46, *(_QWORD *)&v30, 0, *(_QWORD *)&v31, 0, v33, v34);
  sub_100007964((uint64_t)v16, (uint64_t)v18, &qword_100092320);
  v35 = &v18[*(int *)(v42 + 36)];
  v36 = v46[1];
  *(_OWORD *)v35 = v46[0];
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v46[2];
  sub_100007928((uint64_t)v16, &qword_100092320);
  sub_100007A2C((uint64_t)v18, (uint64_t)v22, &qword_100092328);
  sub_100007964((uint64_t)v22, (uint64_t)v18, &qword_100092328);
  v37 = v45;
  sub_100007964((uint64_t)v18, v45, &qword_100092328);
  v38 = v37 + *(int *)(sub_100006454(&qword_100092348) + 48);
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 1;
  sub_100007928((uint64_t)v22, &qword_100092328);
  return sub_100007928((uint64_t)v18, &qword_100092328);
}

unint64_t sub_10004B2FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000921D8;
  if (!qword_1000921D8)
  {
    v1 = sub_100006494(&qword_1000921C8);
    sub_1000078D8(&qword_1000921E0, &qword_1000921C0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000921D8);
  }
  return result;
}

uint64_t sub_10004B380(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a2 != -1)
  {
    swift_retain(result);
    return sub_10004B44C(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 & 1);
  }
  return result;
}

uint64_t sub_10004B44C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, char a14)
{
  int v14;

  if ((a14 & 1) == 0)
    return sub_10004B5E4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (unsigned __int16)(a13 & 0x1FF) >> 8, v14, (char)sub_10004B4A4, (unint64_t)sub_10004B4A4 >> 32, (char)sub_10004B4B8);
  return result;
}

uint64_t sub_10004B4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t result;

  if ((a13 & 1) != 0)
    return swift_retain(a6);
  return result;
}

uint64_t sub_10004B4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return swift_retain(a6);
}

uint64_t sub_10004B4C0(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a2 != -1)
  {
    swift_release(result);
    return sub_10004B58C(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 & 1);
  }
  return result;
}

uint64_t sub_10004B58C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, char a14)
{
  int v14;

  if ((a14 & 1) == 0)
    return sub_10004B5E4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (unsigned __int16)(a13 & 0x1FF) >> 8, v14, (char)sub_10004B61C, (unint64_t)sub_10004B61C >> 32, (char)sub_10004B630);
  return result;
}

uint64_t sub_10004B5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, int a15, char a16, int a17, char a18)
{
  char *v18;

  v18 = &a16;
  if ((a14 & 1) != 0)
    v18 = &a18;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(a1, a2, a3, a4);
}

uint64_t sub_10004B61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t result;

  if ((a13 & 1) != 0)
    return swift_release(a6);
  return result;
}

uint64_t sub_10004B630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return swift_release(a6);
}

unint64_t sub_10004B638()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092278;
  if (!qword_100092278)
  {
    v1 = sub_100006494(&qword_100092268);
    sub_10004C0C8(&qword_100092280, &qword_100092260, &qword_100092288, &qword_100092240);
    sub_10004B6C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092278);
  }
  return result;
}

unint64_t sub_10004B6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092290;
  if (!qword_100092290)
  {
    v1 = sub_100006494(&qword_100092230);
    sub_1000078D8(&qword_100092298, &qword_100092238, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000078D8(&qword_1000922A0, &qword_100092220, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092290);
  }
  return result;
}

unint64_t sub_10004B760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000922A8;
  if (!qword_1000922A8)
  {
    v1 = sub_100006494(&qword_100092270);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000922A8);
  }
  return result;
}

uint64_t sub_10004B7C8()
{
  return EnvironmentValues.redactionReasons.getter();
}

unint64_t sub_10004B80C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000923B8;
  if (!qword_1000923B8)
  {
    v1 = sub_100006494(&qword_1000923B0);
    sub_10004B890();
    sub_1000078D8(&qword_1000923F0, &qword_1000923F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000923B8);
  }
  return result;
}

unint64_t sub_10004B890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000923C0;
  if (!qword_1000923C0)
  {
    v1 = sub_100006494(&qword_1000923C8);
    sub_10001FB4C(&qword_1000923D0, &qword_1000923D8, (void (*)(void))sub_10004B934);
    sub_1000078D8(&qword_100091410, &qword_100091418, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000923C0);
  }
  return result;
}

unint64_t sub_10004B934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000923E0;
  if (!qword_1000923E0)
  {
    v1 = sub_100006494(&qword_1000923E8);
    sub_1000078D8(&qword_1000917A8, &qword_1000917B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000923E0);
  }
  return result;
}

uint64_t sub_10004B9B8()
{
  return sub_10001FB4C(&qword_100092408, &qword_100092398, (void (*)(void))sub_10004B9DC);
}

unint64_t sub_10004B9DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100092410;
  if (!qword_100092410)
  {
    v1 = sub_100006494(&qword_100092390);
    v2[0] = sub_100006494(&qword_1000923B0);
    v2[1] = sub_10004B80C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092410);
  }
  return result;
}

unint64_t sub_10004BA80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092418;
  if (!qword_100092418)
  {
    v1 = sub_100006494(&qword_100092370);
    sub_10004BB04();
    sub_1000078D8(&qword_1000923F0, &qword_1000923F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092418);
  }
  return result;
}

unint64_t sub_10004BB04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092420;
  if (!qword_100092420)
  {
    v1 = sub_100006494(&qword_100092368);
    sub_10001FB4C(&qword_100092428, &qword_100092360, (void (*)(void))sub_10004BBA8);
    sub_1000078D8(&qword_100091410, &qword_100091418, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092420);
  }
  return result;
}

unint64_t sub_10004BBA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092430;
  if (!qword_100092430)
  {
    v1 = sub_100006494(&qword_100092358);
    sub_10001FB4C(&qword_1000913D0, &qword_100091388, (void (*)(void))sub_10001F734);
    sub_1000078D8(&qword_1000917A8, &qword_1000917B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092430);
  }
  return result;
}

unint64_t sub_10004BC4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092498;
  if (!qword_100092498)
  {
    v1 = sub_100006494(&qword_100092488);
    sub_10004BCD0();
    sub_1000078D8(&qword_1000923F0, &qword_1000923F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092498);
  }
  return result;
}

unint64_t sub_10004BCD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000924A0;
  if (!qword_1000924A0)
  {
    v1 = sub_100006494(&qword_100092480);
    sub_10004BBA8();
    sub_1000078D8(&qword_100091410, &qword_100091418, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000924A0);
  }
  return result;
}

unint64_t sub_10004BD5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000924B0;
  if (!qword_1000924B0)
  {
    v1 = sub_100006494(&qword_100092470);
    sub_10004BDE0();
    sub_1000078D8(&qword_1000923F0, &qword_1000923F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000924B0);
  }
  return result;
}

unint64_t sub_10004BDE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000924B8;
  if (!qword_1000924B8)
  {
    v1 = sub_100006494(&qword_100092468);
    sub_10001FB4C(&qword_1000924C0, &qword_100092460, (void (*)(void))sub_10004BE84);
    sub_1000078D8(&qword_1000924F0, &qword_1000924A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000924B8);
  }
  return result;
}

unint64_t sub_10004BE84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000924C8;
  if (!qword_1000924C8)
  {
    v1 = sub_100006494(&qword_100092458);
    sub_10004BF08();
    sub_1000078D8(&qword_1000913F0, &qword_1000913F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000924C8);
  }
  return result;
}

unint64_t sub_10004BF08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000924D0;
  if (!qword_1000924D0)
  {
    v1 = sub_100006494(&qword_100092450);
    sub_10004BF8C();
    sub_100007A70(&qword_1000913E8, type metadata accessor for DynamicTypeFont, (uint64_t)&unk_100071C30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000924D0);
  }
  return result;
}

unint64_t sub_10004BF8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000924D8;
  if (!qword_1000924D8)
  {
    v1 = sub_100006494(&qword_1000924E0);
    sub_10004BFF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000924D8);
  }
  return result;
}

unint64_t sub_10004BFF8()
{
  unint64_t result;

  result = qword_1000924E8;
  if (!qword_1000924E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _FlipForRTLEffect, &type metadata for _FlipForRTLEffect);
    atomic_store(result, (unint64_t *)&qword_1000924E8);
  }
  return result;
}

unint64_t sub_10004C03C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092508;
  if (!qword_100092508)
  {
    v1 = sub_100006494(&qword_100092500);
    sub_10004C0C8(&qword_100092510, &qword_100092518, &qword_100092520, &qword_100092528);
    sub_10004C148();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092508);
  }
  return result;
}

uint64_t sub_10004C0C8(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100006494(a2);
    sub_1000078D8(a3, a4, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004C148()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092530;
  if (!qword_100092530)
  {
    v1 = sub_100006494(&qword_100092538);
    sub_1000078D8(&qword_100092540, &qword_100092548, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000078D8(&qword_100092520, &qword_100092528, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092530);
  }
  return result;
}

uint64_t sub_10004C1E4()
{
  _QWORD v1[4];

  v1[0] = sub_100006494(&qword_1000921C8);
  v1[1] = &type metadata for Color;
  v1[2] = sub_10004B2FC();
  v1[3] = &protocol witness table for Color;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

unint64_t sub_10004C244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006454(&qword_100092788);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10004D860(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004C364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006454(&qword_100090CF0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10004D860(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004C47C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006454(&qword_1000927A0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = (void *)*(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain(v8);
    v11 = v9;
    result = sub_10004D860(v7, v8);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v4[6] + 16 * result);
    *v14 = v7;
    v14[1] = v8;
    v15 = (_QWORD *)(v4[7] + 16 * result);
    *v15 = v11;
    v15[1] = v10;
    v16 = v4[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v18;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004C59C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006454(&qword_100092790);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007964(v7, (uint64_t)&v16, &qword_100092798);
    v8 = v16;
    v9 = v17;
    result = sub_10004D860(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10003BD6C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004C6D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100006454(&qword_1000927A8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100007964(v7, (uint64_t)v16, &qword_1000927B0);
    result = sub_10004D8C4((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10003BD6C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  _QWORD *v12;
  char *v17;
  _QWORD *v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  unint64_t v40;
  _BYTE v41[24];
  _BYTE v42[24];

  v12 = v11;
  v12[3] = 0;
  v12[2] = 973039644;
  v12[4] = 0;
  v12[5] = 0xD000000000000011;
  v12[6] = 0x80000001000742A0;
  v17 = (char *)v12 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_lastPlayedDate;
  Date.init()(a1);
  v18 = (_QWORD *)((char *)v12 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID);
  *v18 = 0xD00000000000001FLL;
  v18[1] = 0x80000001000742C0;
  v19 = (_QWORD *)((char *)v12 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons);
  *v19 = sub_10004C244((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor) = 0;
  *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor) = 0;
  v20 = (_QWORD *)((char *)v12 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_metricsTopic);
  *v20 = 0;
  v20[1] = 0;
  v12[2] = a1;
  v21 = v12[6];
  v12[5] = a2;
  v12[6] = a3;
  swift_bridgeObjectRelease(v21);
  swift_beginAccess(v17, v42, 33, 0);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 24))(v17, a4, v22);
  swift_endAccess(v42);
  v24 = v18[1];
  *v18 = a5;
  v18[1] = a6;
  swift_bridgeObjectRelease(v24);
  swift_beginAccess(v19, v42, 1, 0);
  v25 = *v19;
  *v19 = a7;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRelease(v25);
  v26 = v20[1];
  *v20 = a10;
  v20[1] = a11;
  swift_bridgeObjectRelease(v26);
  if (!a9)
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, v22);
    v35 = *v19;
    *v19 = a7;
    swift_bridgeObjectRelease(v35);
    return (uint64_t)v12;
  }
  swift_bridgeObjectRelease(a7);
  v27 = v12[4];
  v12[3] = a8;
  v12[4] = a9;
  swift_bridgeObjectRelease(v27);
  v28 = sub_10004C244((uint64_t)&_swiftEmptyArrayStorage);
  v29 = *v19;
  *v19 = v28;
  result = swift_bridgeObjectRelease(v29);
  v31 = v12[4];
  if (v31)
  {
    v32 = v12[3];
    swift_beginAccess(v19, v41, 33, 0);
    swift_bridgeObjectRetain_n(v31, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    v40 = *v19;
    *v19 = 0x8000000000000000;
    sub_10004E3E8(v32, v31, v32, v31, isUniquelyReferenced_nonNull_native);
    v34 = *v19;
    *v19 = v40;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v34);
    swift_endAccess(v41);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, v22);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004CAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  uint64_t v7;
  double v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  id v11;
  Class isa;
  uint64_t v13;
  Class v14;
  id v15;
  _BYTE v18[24];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_lastPlayedDate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_lastPlayedDate, v18, 0, 0);
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v7 = v6(v4, v5, v1);
  v8 = Date.timeIntervalSinceNow.getter(v7);
  v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(v4, v1);
  if (v8 > -3600.0)
    return 0x414C505F5453554ALL;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSRelativeDateTimeFormatter), "init");
  objc_msgSend(v11, "setUnitsStyle:", 0);
  v6(v4, v5, v1);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v13 = ((uint64_t (*)(char *, uint64_t))v9)(v4, v1);
  Date.init()(v13);
  v14 = Date._bridgeToObjectiveC()().super.isa;
  v9(v4, v1);
  v15 = objc_msgSend(v11, "localizedStringForDate:relativeToDate:", isa, v14);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  return v10;
}

void sub_10004CC8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  NSString v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = v4;
  v35 = a1;
  v36 = a2;
  v37 = a4;
  v7 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(v4 + 16);
  v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v11 = v10;
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID);
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID + 8);
  v31 = v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID;
  v14 = swift_bridgeObjectRetain(v12);
  v33 = a3;
  WidgetFamily.rawValue.getter(v14);
  v15 = *(_QWORD *)(v4 + 48);
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_metricsTopic + 8);
  v32 = v4 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_metricsTopic;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  static ActivityFeedLockupVendor.makeRemoteLaunchTrampolineURL(adamId:bundleId:widgetId:widgetSize:localizedName:topic:)(v34, v11, v13, v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
  {
    sub_10000AD84((uint64_t)v9);
    v38 = *(_QWORD *)(v5 + 16);
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v20 = v19;
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v22 = *(_QWORD *)(v31 + 8);
    swift_bridgeObjectRetain(v22);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    v24 = String._bridgeToObjectiveC()();
    v25 = WidgetFamily.rawValue.getter(v24);
    v26 = *(_QWORD *)(v5 + 48);
    swift_bridgeObjectRetain(v26);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    v28 = *(_QWORD *)(v32 + 8);
    if (v28)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v32 + 8));
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = objc_msgSend((id)objc_opt_self(ASCAppLaunchTrampolineURL), "URLWithAdamId:bundleId:widgetId:widgetSize:localizedName:topic:", v21, v23, v24, v25, v27, v29);

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v30);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v37, v9, v17);
  }
}

uint64_t sub_10004CF70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  NSString v10;
  id v11;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t result;
  _BYTE v22[24];

  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
  {
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons);
    swift_beginAccess(v2 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons, v22, 0, 0);
    v15 = *v14;
    if (*(_QWORD *)(*v14 + 16))
    {
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v15);
      v16 = sub_10004D860(a1, a2);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v16 + 8);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v15);
        v19 = objc_allocWithZone((Class)UIImage);
        v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v18);
        v11 = objc_msgSend(v19, "initWithContentsOfFile:", v20);

        return (uint64_t)v11;
      }
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v15);
    }
    return 0;
  }
  v4 = *(_QWORD *)(v2 + 24);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons);
  swift_beginAccess(v5, v22, 0, 0);
  v6 = *v5;
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v6);
    v7 = sub_10004D860(v4, v3);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v7 + 8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v6);
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      v11 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v10);

      return (uint64_t)v11;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease(v3);
  result = swift_bridgeObjectRelease(v6);
  __break(1u);
  return result;
}

void sub_10004D14C()
{
  qword_100092550 = * infix(_:_:)(3600, 24.0);
}

uint64_t sub_10004D170()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for Date(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100090718 != -1)
    swift_once(&qword_100090718, sub_10004D14C);
  Date.init(timeIntervalSinceNow:)(*(double *)&qword_100092550 * -50.0);
  v3 = sub_10004C244((uint64_t)&_swiftEmptyArrayStorage);
  v4 = type metadata accessor for AppDisplayData(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = sub_10004C810(973039644, 0xD000000000000011, 0x80000001000742A0, (uint64_t)v2, 0xD00000000000001FLL, 0x80000001000742C0, v3, 0x6E6F63496B636F4DLL, 0xE900000000000036, 0, 0);
  qword_100092558 = v5;
  return result;
}

uint64_t sub_10004D2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_100006454(&qword_100090CC0);
  v1 = swift_allocObject(v0, 120, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100072460;
  if (qword_100090720 != -1)
    swift_once(&qword_100090720, sub_10004D170);
  v2 = qword_100092558;
  *(_QWORD *)(v1 + 32) = qword_100092558;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v2;
  *(_QWORD *)(v1 + 96) = v2;
  *(_QWORD *)(v1 + 104) = v2;
  *(_QWORD *)(v1 + 112) = v2;
  v3 = swift_retain_n(v2, 5);
  v4 = swift_retain_n(v3, 4);
  specialized Array._endMutation()(v4);
  qword_100095A28 = v1;
  return swift_retain_n(v2, 2);
}

uint64_t sub_10004D380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v1 = v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_lastPlayedDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_metricsTopic + 8));
  return v0;
}

uint64_t sub_10004D42C()
{
  uint64_t v0;

  sub_10004D380();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004D450()
{
  return type metadata accessor for AppDisplayData(0);
}

uint64_t type metadata accessor for AppDisplayData(uint64_t a1)
{
  uint64_t result;

  result = qword_100092588;
  if (!qword_100092588)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppDisplayData);
  return result;
}

uint64_t sub_10004D494(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1000724A8;
  v4[2] = &unk_1000724C0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1000724C0;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = &unk_1000724D8;
    v4[7] = &unk_1000724D8;
    v4[8] = &unk_1000724A8;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

Swift::Int sub_10004D548()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  return Hasher._finalize()();
}

void sub_10004D58C()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

Swift::Int sub_10004D5B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v1 + 16));
  return Hasher._finalize()();
}

BOOL sub_10004D5F8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

uint64_t sub_10004D614()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  _QWORD v20[3];
  uint64_t v21;
  unint64_t v22;

  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v21 = 0;
  v22 = 0xE000000000000000;
  v1._object = (void *)0x8000000100074280;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  v20[0] = v0[2];
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x6C746974090A202CLL;
  v4._object = (void *)0xEB00000000203A65;
  String.append(_:)(v4);
  v5 = v0[5];
  v6 = (void *)v0[6];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x646E7562090A202CLL;
  v8._object = (void *)0xEE00203A4449656CLL;
  String.append(_:)(v8);
  v9 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID);
  v10 = *(void **)((char *)v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_bundleID + 8);
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._object = (void *)0xEB00000000203A73;
  v12._countAndFlagsBits = 0x6E6F6369090A202CLL;
  String.append(_:)(v12);
  v13 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons);
  swift_beginAccess((char *)v0 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_icons, v20, 0, 0);
  v14 = *v13;
  v15 = swift_bridgeObjectRetain(v14);
  v16._countAndFlagsBits = Dictionary.description.getter(v15, &type metadata for String, &type metadata for String, &protocol witness table for String);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 10506;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  return v21;
}

uint64_t sub_10004D7F4()
{
  return sub_10004D614();
}

unint64_t sub_10004D818()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092780;
  if (!qword_100092780)
  {
    v1 = type metadata accessor for AppDisplayData(255);
    result = swift_getWitnessTable(&unk_100072518, v1);
    atomic_store(result, (unint64_t *)&qword_100092780);
  }
  return result;
}

unint64_t sub_10004D860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10004D8F4(a1, a2, v5);
}

unint64_t sub_10004D8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10004D9D4(a1, v4);
}

unint64_t sub_10004D8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10004D9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10003BB88(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10003BBC4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

Swift::Int sub_10004DA98(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006454(&qword_100092788);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10004DDBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;
  char v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006454(&qword_1000927A0);
  v44 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v43 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v41 = v3;
  v42 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v42)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v43 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v42)
        goto LABEL_36;
      v26 = *(_QWORD *)(v43 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v42)
        {
LABEL_36:
          swift_release(v5);
          v3 = v41;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v43 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v42)
              goto LABEL_36;
            v26 = *(_QWORD *)(v43 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = *(_QWORD *)(v5 + 56) + v32;
    v38 = *(void **)v36;
    v37 = *(_QWORD *)(v36 + 8);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      v39 = v38;
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v45, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v38;
    v21[1] = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v41;
  v25 = (_QWORD *)(v5 + 64);
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10004E0DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006454(&qword_100090CF0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10004E3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10004D860(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10004E82C();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease(v21[1]);
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }
    goto LABEL_14;
  }
  sub_10004DA98(v17, a5 & 1);
  v23 = sub_10004D860(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10004E55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10004D860(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10004E9E4();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;

      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_10004DDBC(v17, a5 & 1);
  v22 = sub_10004D860(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10004E6D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10004D860(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10004EB98();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10004E0DC(v15, a4 & 1);
  v20 = sub_10004D860(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void *sub_10004E82C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100006454(&qword_100092788);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10004E9E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100006454(&qword_1000927A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v22 = *(void **)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v22;
    v24[1] = v21;
    swift_bridgeObjectRetain(v18);
    result = v22;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10004EB98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100006454(&qword_100090CF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10004ED48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10004ED84(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CoordinateSpace(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10004EDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004EDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004EE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004EE84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10004EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004EED4);
}

uint64_t sub_10004EED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10004EF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004EF1C);
}

uint64_t sub_10004EF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoordinateSpace(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ViewGeometryAnalyzer(uint64_t a1)
{
  uint64_t result;

  result = qword_100092810;
  if (!qword_100092810)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ViewGeometryAnalyzer);
  return result;
}

uint64_t sub_10004EF98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for CoordinateSpace(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004F000(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100074F60, 1);
}

double sub_10004F010()
{
  double result;

  result = 0.0;
  xmmword_100095A60 = 0u;
  *(_OWORD *)algn_100095A70 = 0u;
  return result;
}

double sub_10004F024@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (qword_100090730 != -1)
    swift_once(&qword_100090730, sub_10004F010);
  result = *(double *)&xmmword_100095A60;
  v3 = *(_OWORD *)algn_100095A70;
  *a1 = xmmword_100095A60;
  a1[1] = v3;
  return result;
}

double sub_10004F078(_OWORD *a1, void (*a2)(_OWORD *__return_ptr))
{
  double result;
  __int128 v4;
  _OWORD v5[2];

  a2(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *a1 = v5[0];
  a1[1] = v4;
  return result;
}

uint64_t sub_10004F0B8@<X0>(uint64_t a1@<X0>, void (**a2)(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_10004F15C(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10008ED00, v7 + v5, v6 | 7);
  result = sub_10004F210((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *a2 = sub_10004F254;
  a2[1] = (void (*)(uint64_t@<X8>))v8;
  return result;
}

uint64_t sub_10004F15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ViewGeometryAnalyzer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004F1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for ViewGeometryAnalyzer(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10004F210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ViewGeometryAnalyzer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10004F254(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for ViewGeometryAnalyzer(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = static Color.clear.getter(v3);
  v7 = GeometryProxy.frame(in:)(v5);
  *(_QWORD *)a1 = v6;
  *(_WORD *)(a1 + 8) = 256;
  *(double *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
}

ValueMetadata *type metadata accessor for CGRectPreferenceKey()
{
  return &type metadata for CGRectPreferenceKey;
}

unint64_t sub_10004F2D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092848;
  if (!qword_100092848)
  {
    v1 = sub_100006494(&qword_100092850);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100092848);
  }
  return result;
}

void sub_10004F320(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10004F384(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10004F454 + 4 * byte_100072668[a2]))(0x44496D616461);
}

uint64_t sub_10004F454(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x44496D616461 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x44496D616461, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_10004F588(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6B726F77747261;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000015;
    else
      v4 = 0xD00000000000001ALL;
    if (v3 == 1)
      v5 = 0x80000001000736D0;
    else
      v5 = 0x80000001000736F0;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0xD000000000000015;
      else
        v2 = 0xD00000000000001ALL;
      if (v6 == 1)
        v7 = 0x80000001000736D0;
      else
        v7 = 0x80000001000736F0;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6B726F77747261;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x6B726F77747261)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_10004F690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  __objc2_class_ro *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  NSURL *v52;
  void *v53;
  void *v54;
  unsigned int v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;

  v103 = type metadata accessor for AppMetadata(0);
  __chkstk_darwin(v103);
  v101 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v5);
  v7 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v102 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v99 - v12;
  __chkstk_darwin(v14);
  v108 = (char *)&v99 - v15;
  __chkstk_darwin(v16);
  v107 = (char *)&v99 - v17;
  __chkstk_darwin(v18);
  v104 = (char *)&v99 - v19;
  __chkstk_darwin(v20);
  v105 = (char *)&v99 - v21;
  v22 = (void *)objc_opt_self(NSFileManager);
  v23 = objc_msgSend(v22, "defaultManager");
  v24 = 1;
  v25 = objc_msgSend(v23, "URLsForDirectory:inDomains:", 13, 1);

  v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v8);
  if (*(_QWORD *)(v26 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, v26 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    v24 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v24, 1, v8);
  swift_bridgeObjectRelease(v26);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v28 = v108;
  if (v27 == 1)
  {
    sub_10000AD84((uint64_t)v7);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v105, v7, v8);
  URL.appendingPathComponent(_:isDirectory:)(a1, a2, 1);
  v29 = v103;
  v30 = (uint64_t *)(v106 + *(int *)(v103 + 20));
  v31 = *v30;
  v32 = v30[1];
  swift_bridgeObjectRetain(v32);
  URL.appendingPathComponent(_:isDirectory:)(v31, v32, 1);
  swift_bridgeObjectRelease(v32);
  URL.appendingPathComponent(_:)(0x617461646174656DLL, 0xED00006E6F736A2ELL);
  v33 = objc_msgSend(v22, "defaultManager");
  URL.path.getter(v33);
  v35 = v34;
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  LOBYTE(v35) = objc_msgSend(v33, "fileExistsAtPath:", v36);

  v37 = &SeededRandomNumberGenerator;
  if ((v35 & 1) == 0)
  {
    if (qword_1000906F8 != -1)
      swift_once(&qword_1000906F8, sub_100029CC4);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10000A720(v38, (uint64_t)qword_1000959D8);
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v13, v107, v8);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(12, -1);
      v99 = v39;
      v44 = (uint8_t *)v43;
      v45 = (void *)swift_slowAlloc(32, -1);
      v111 = v45;
      *(_DWORD *)v44 = 136315138;
      v100 = (void (*)(char *, uint64_t))(v44 + 4);
      v46 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v8, v46);
      v49 = v48;
      v109 = sub_1000155A4(v47, v48, (uint64_t *)&v111);
      v28 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
      swift_bridgeObjectRelease(v49);
      v100 = *(void (**)(char *, uint64_t))(v9 + 8);
      v100(v13, v8);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Creating directory for app metadata at %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      v50 = v45;
      v37 = &SeededRandomNumberGenerator;
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      v100 = *(void (**)(char *, uint64_t))(v9 + 8);
      v100(v13, v8);
    }

    v51 = objc_msgSend(v22, "defaultManager");
    URL._bridgeToObjectiveC()(v52);
    v54 = v53;
    v111 = 0;
    v55 = objc_msgSend(v51, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v53, 1, 0, &v111);

    v56 = v111;
    v29 = v103;
    if (!v55)
    {
      v84 = v111;
      v85 = _convertNSErrorToError(_:)(v56);

      swift_willThrow();
      swift_errorRetain(v85);
      v86 = swift_errorRetain(v85);
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12, -1);
        v90 = (void *)swift_slowAlloc(32, -1);
        v111 = v90;
        *(_DWORD *)v89 = 136315138;
        v109 = v85;
        swift_errorRetain(v85);
        v91 = sub_100006454(&qword_100090BD0);
        v92 = String.init<A>(describing:)(&v109, v91);
        v94 = v93;
        v109 = sub_1000155A4(v92, v93, (uint64_t *)&v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
        swift_bridgeObjectRelease(v94);
        swift_errorRelease(v85);
        swift_errorRelease(v85);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Unable to create metadata directory %s.", v89, 0xCu);
        swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v89, -1, -1);

        swift_errorRelease(v85);
        v95 = v108;
      }
      else
      {

        swift_errorRelease(v85);
        swift_errorRelease(v85);
        swift_errorRelease(v85);
        v95 = v28;
      }
      v96 = v100;
      v100(v95, v8);
      v96(v107, v8);
      v96(v104, v8);
      v96(v105, v8);
      return 0;
    }
    v57 = v111;
  }
  if (v37[24].weak_ivar_lyt != (void *)-1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v58 = type metadata accessor for Logger(0);
  v59 = sub_10000A720(v58, (uint64_t)qword_1000959D8);
  v60 = v101;
  sub_1000530A4(v106, v101);
  v61 = v102;
  v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v102, v108, v8);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = swift_slowAlloc(22, -1);
    v66 = (void *)swift_slowAlloc(64, -1);
    v111 = v66;
    *(_DWORD *)v65 = 136315394;
    v67 = (uint64_t *)(v60 + *(int *)(v29 + 20));
    v100 = (void (*)(char *, uint64_t))v59;
    v68 = *v67;
    v69 = v67[1];
    swift_bridgeObjectRetain(v69);
    v109 = sub_1000155A4(v68, v69, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
    swift_bridgeObjectRelease(v69);
    sub_1000530E8(v60);
    *(_WORD *)(v65 + 12) = 2080;
    v70 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v71 = v102;
    v72 = dispatch thunk of CustomStringConvertible.description.getter(v8, v70);
    v74 = v73;
    v109 = sub_1000155A4(v72, v73, (uint64_t *)&v111);
    v29 = v103;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
    swift_bridgeObjectRelease(v74);
    v75 = *(void (**)(char *, uint64_t))(v9 + 8);
    v75(v71, v8);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Encoding %s's metadata and writing to %s", (uint8_t *)v65, 0x16u);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);
  }
  else
  {
    sub_1000530E8(v60);
    v75 = *(void (**)(char *, uint64_t))(v9 + 8);
    v75(v61, v8);
  }

  v76 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
  v77 = JSONEncoder.init()();
  v78 = sub_100007A70(&qword_100092858, type metadata accessor for AppMetadata, (uint64_t)&unk_1000727F8);
  v79 = dispatch thunk of JSONEncoder.encode<A>(_:)(v106, v29, v78);
  v80 = v108;
  v81 = v79;
  v83 = v82;
  swift_release(v77);
  Data.write(to:options:)(v80, 0, v81, v83);
  sub_10000ADC4(v81, v83);
  v75(v80, v8);
  v75(v107, v8);
  v75(v104, v8);
  v75(v105, v8);
  return 1;
}

uint64_t sub_100050274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  void *object;
  Swift::String v71;
  Swift::String v72;
  void *v73;
  Swift::String v74;
  uint64_t v75;
  __objc2_class_ro *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(char *, uint64_t);
  id v94;
  uint64_t v95;
  uint64_t v96;
  NSString v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  char *v116;
  NSURL *v117;
  void *v118;
  void *v119;
  unsigned int v120;
  id v121;
  id v122;
  id v123;
  double v124;
  double v125;
  uint64_t v126;
  id v127;
  Class isa;
  int *v129;
  unint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  void (*v158)(char *, uint64_t);
  char *v159;
  char *v160;
  unint64_t v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  char v166;
  char v167;
  id v168;
  Class v169;
  int *v170;
  double v171;
  id v172;
  char *v173;
  void *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char v184;
  char *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  char v200;
  uint64_t v201;
  char *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  os_log_type_t v216;
  _BOOL4 v217;
  uint8_t *v218;
  void *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  void *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  void (*v230)(char *, uint64_t);
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[2];
  void (*v236)(char *, uint64_t);
  void (*v237)(char *, char *, uint64_t);
  unsigned int (*v238)(uint64_t, uint64_t, uint64_t);
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  void (*v246)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int *v257;
  void (*v258)(void);
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  void (*v263)(_QWORD);
  char *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  id v270;
  uint64_t v271;

  v262 = a7;
  v263 = a6;
  v256 = a5;
  v255 = a4;
  v254 = a3;
  v257 = (int *)type metadata accessor for AppMetadata(0);
  __chkstk_darwin(v257);
  v251 = (uint64_t)v235 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v10);
  v241 = (char *)v235 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v244 = (char *)v235 - v13;
  __chkstk_darwin(v14);
  v248 = (uint64_t)v235 - v15;
  __chkstk_darwin(v16);
  v247 = (char *)v235 - v17;
  __chkstk_darwin(v18);
  v250 = (char *)v235 - v19;
  __chkstk_darwin(v20);
  v22 = (char *)v235 - v21;
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v245 = (char *)v235 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v240 = (char *)v235 - v27;
  __chkstk_darwin(v28);
  v239 = (char *)v235 - v29;
  __chkstk_darwin(v30);
  v243 = (char *)v235 - v31;
  __chkstk_darwin(v32);
  v242 = (char *)v235 - v33;
  __chkstk_darwin(v34);
  v252 = (char *)v235 - v35;
  __chkstk_darwin(v36);
  v249 = (char *)v235 - v37;
  __chkstk_darwin(v38);
  v40 = (char *)v235 - v39;
  __chkstk_darwin(v41);
  v43 = (char *)v235 - v42;
  __chkstk_darwin(v44);
  v264 = (char *)v235 - v45;
  __chkstk_darwin(v46);
  v265 = (char *)v235 - v47;
  __chkstk_darwin(v48);
  v259 = (char *)v235 - v49;
  __chkstk_darwin(v50);
  v260 = (char *)v235 - v51;
  __chkstk_darwin(v52);
  v261 = (char *)v235 - v53;
  v54 = (void *)objc_opt_self(NSFileManager);
  v55 = objc_msgSend(v54, "defaultManager");
  v56 = objc_msgSend(v55, "URLsForDirectory:inDomains:", 13, 1);

  v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v23);
  if (*(_QWORD *)(v57 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v22, v57 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)), v23);
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v59 = v22;
    v60 = 0;
  }
  else
  {
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v59 = v22;
    v60 = 1;
  }
  v246 = v58;
  v58((uint64_t)v59, v60, 1, v23);
  swift_bridgeObjectRelease(v57);
  v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v61(v22, 1, v23) == 1)
  {
    sub_10000AD84((uint64_t)v22);
    return ((uint64_t (*)(_QWORD, _QWORD))v263)(0, 0);
  }
  v238 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v61;
  v253 = v24;
  v237 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v237(v261, v22, v23);
  URL.appendingPathComponent(_:isDirectory:)(a1, a2, 1);
  v63 = (uint64_t *)((char *)v258 + v257[5]);
  v64 = *v63;
  v65 = v63[1];
  swift_bridgeObjectRetain(v65);
  URL.appendingPathComponent(_:isDirectory:)(v64, v65, 1);
  swift_bridgeObjectRelease(v65);
  v66 = v265;
  URL.appendingPathComponent(_:isDirectory:)(0x6B726F77747261, 0xE700000000000000, 1);
  LOBYTE(v270) = v256;
  v270 = (id)String.init<A>(describing:)(&v270, &type metadata for AppMetadata.AppArtworkType);
  v271 = v67;
  v68._countAndFlagsBits = 95;
  v68._object = (void *)0xE100000000000000;
  String.append(_:)(v68);
  v268 = v254;
  v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v69._object;
  String.append(_:)(v69);
  swift_bridgeObjectRelease(object);
  v71._countAndFlagsBits = 120;
  v71._object = (void *)0xE100000000000000;
  String.append(_:)(v71);
  v268 = v255;
  v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v73 = v72._object;
  String.append(_:)(v72);
  swift_bridgeObjectRelease(v73);
  v74._countAndFlagsBits = 0x636965682ELL;
  v74._object = (void *)0xE500000000000000;
  String.append(_:)(v74);
  v75 = v271;
  URL.appendingPathComponent(_:isDirectory:)(v270, v271, 0);
  swift_bridgeObjectRelease(v75);
  v76 = &SeededRandomNumberGenerator;
  v77 = objc_msgSend(v54, "defaultManager");
  URL.path.getter(v77);
  v79 = v78;
  v80 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v79);
  LODWORD(v79) = objc_msgSend(v77, "fileExistsAtPath:", v80);

  if ((_DWORD)v79)
  {
    if (qword_1000906F8 != -1)
      swift_once(&qword_1000906F8, sub_100029CC4);
    v81 = type metadata accessor for Logger(0);
    sub_10000A720(v81, (uint64_t)qword_1000959D8);
    v82 = v253;
    v83 = v264;
    v84 = (*(uint64_t (**)(char *, char *, uint64_t))(v253 + 16))(v43, v264, v23);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = (void *)swift_slowAlloc(32, -1);
      v270 = v88;
      *(_DWORD *)v87 = 136315138;
      v89 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v23, v89);
      v92 = v91;
      v268 = sub_1000155A4(v90, v91, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269);
      swift_bridgeObjectRelease(v92);
      v93 = *(void (**)(char *, uint64_t))(v253 + 8);
      v93(v43, v23);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Fetching cached image from %s", v87, 0xCu);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      v93 = *(void (**)(char *, uint64_t))(v82 + 8);
      v93(v43, v23);
    }

    v112 = URL.path.getter(v111);
    v114 = v113;
    v263(v112);
    swift_bridgeObjectRelease(v114);
    v93(v83, v23);
    v93(v265, v23);
    v93(v259, v23);
    v93(v260, v23);
    return ((uint64_t (*)(char *, uint64_t))v93)(v261, v23);
  }
  v94 = objc_msgSend(v54, "defaultManager");
  URL.path.getter(v94);
  v96 = v95;
  v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v96);
  LOBYTE(v96) = objc_msgSend(v94, "fileExistsAtPath:", v97);

  if ((v96 & 1) == 0)
  {
    if (qword_1000906F8 != -1)
      swift_once(&qword_1000906F8, sub_100029CC4);
    v98 = type metadata accessor for Logger(0);
    v99 = sub_10000A720(v98, (uint64_t)qword_1000959D8);
    v100 = v253;
    v101 = (*(uint64_t (**)(char *, char *, uint64_t))(v253 + 16))(v40, v66, v23);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = (void *)swift_slowAlloc(32, -1);
      v235[1] = v99;
      v106 = v105;
      v270 = v105;
      *(_DWORD *)v104 = 136315138;
      v236 = (void (*)(char *, uint64_t))(v104 + 4);
      v107 = sub_100007A70(&qword_100090BD8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v108 = dispatch thunk of CustomStringConvertible.description.getter(v23, v107);
      v110 = v109;
      v268 = sub_1000155A4(v108, v109, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269);
      swift_bridgeObjectRelease(v110);
      v236 = *(void (**)(char *, uint64_t))(v100 + 8);
      v236(v40, v23);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Creating directory for cached images at %s", v104, 0xCu);
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      v76 = &SeededRandomNumberGenerator;
      swift_slowDealloc(v104, -1, -1);
    }
    else
    {
      v236 = *(void (**)(char *, uint64_t))(v100 + 8);
      v236(v40, v23);
    }

    v115 = objc_msgSend(v54, *(SEL *)&v76[14].ivar_base_size);
    v116 = v265;
    URL._bridgeToObjectiveC()(v117);
    v119 = v118;
    v270 = 0;
    v120 = objc_msgSend(v115, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v118, 1, 0, &v270);

    v121 = v270;
    if (!v120)
    {
      v135 = v270;
      v136 = _convertNSErrorToError(_:)(v121);

      swift_willThrow();
      swift_errorRetain(v136);
      v137 = swift_errorRetain(v136);
      v138 = Logger.logObject.getter(v137);
      v139 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v138, v139))
      {
        v140 = (uint8_t *)swift_slowAlloc(12, -1);
        v141 = (void *)swift_slowAlloc(32, -1);
        v270 = v141;
        *(_DWORD *)v140 = 136315138;
        v268 = v136;
        swift_errorRetain(v136);
        v142 = sub_100006454(&qword_100090BD0);
        v143 = String.init<A>(describing:)(&v268, v142);
        v145 = v144;
        v268 = sub_1000155A4(v143, v144, (uint64_t *)&v270);
        v116 = v265;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, &v269);
        swift_bridgeObjectRelease(v145);
        swift_errorRelease(v136);
        swift_errorRelease(v136);
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "Unable to create artwork directory %s.", v140, 0xCu);
        swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        swift_slowDealloc(v140, -1, -1);
      }
      else
      {
        swift_errorRelease(v136);
        swift_errorRelease(v136);
      }

      v160 = v264;
      ((void (*)(_QWORD, _QWORD))v263)(0, 0);
      swift_errorRelease(v136);
      v158 = v236;
      v236(v160, v23);
      goto LABEL_63;
    }
    v122 = v270;
  }
  v123 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v123, "scale");
  v125 = v124;

  v126 = *(_QWORD *)((char *)v258 + v257[10]);
  v127 = objc_allocWithZone((Class)AMSMediaArtwork);
  swift_bridgeObjectRetain(v126);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v126);
  v129 = (int *)objc_msgSend(v127, "initWithDictionary:", isa);

  v130 = 0x80000001000736D0;
  v131 = v256;
  if ((_BYTE)v256)
  {
    v132 = v253;
    if (v256 == 1)
    {
LABEL_31:
      swift_bridgeObjectRelease(v130);
      goto LABEL_32;
    }
    v133 = 0xD00000000000001ALL;
    v134 = 0x80000001000736F0;
  }
  else
  {
    v134 = 0xE700000000000000;
    v133 = 0x6B726F77747261;
    v132 = v253;
  }
  v146 = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v134, 0xD000000000000015, 0x80000001000736D0, 0);
  swift_bridgeObjectRelease(v134);
  if ((v146 & 1) != 0)
  {
LABEL_32:
    v149 = v251;
    sub_1000530A4((uint64_t)v258, v251);
    goto LABEL_33;
  }
  v130 = 0x80000001000736F0;
  if (v131)
  {
    if (v131 == 1)
    {
      v147 = 0x80000001000736D0;
      v148 = 0xD000000000000015;
      goto LABEL_49;
    }
    goto LABEL_31;
  }
  v147 = 0xE700000000000000;
  v148 = 0x6B726F77747261;
LABEL_49:
  v166 = _stringCompareWithSmolCheck(_:_:expecting:)(v148, v147, 0xD00000000000001ALL, 0x80000001000736F0, 0);
  swift_bridgeObjectRelease(v147);
  v149 = v251;
  sub_1000530A4((uint64_t)v258, v251);
  if ((v166 & 1) == 0)
  {
    sub_1000530E8(v149);
    v150 = v257;
    goto LABEL_34;
  }
LABEL_33:
  v150 = v257;
  v151 = v149;
  v152 = *(_QWORD *)(v149 + v257[11]);
  sub_1000530E8(v151);
  if (!v152)
  {
    ((void (*)(_QWORD, _QWORD))v263)(0, 0);

    v158 = *(void (**)(char *, uint64_t))(v132 + 8);
    v158(v264, v23);
    v159 = v265;
LABEL_64:
    v158(v159, v23);
    v158(v259, v23);
    v158(v260, v23);
    return ((uint64_t (*)(char *, uint64_t))v158)(v261, v23);
  }
LABEL_34:
  v153 = *(_QWORD *)((char *)v258 + v150[11]);
  if (!v153)
  {
    v116 = v265;
    v156 = (uint64_t)v250;
    goto LABEL_58;
  }
  v155 = v131;
  v154 = v131 == 0;
  v156 = (uint64_t)v250;
  if (v154)
  {
    v161 = 0xE700000000000000;
    v162 = 0x6B726F77747261;
  }
  else
  {
    if (v155 == 1)
    {
      swift_bridgeObjectRetain(*(_QWORD *)((char *)v258 + v150[11]));
      v157 = 0x80000001000736D0;
LABEL_55:
      swift_bridgeObjectRelease(v157);
      goto LABEL_56;
    }
    v162 = 0xD00000000000001ALL;
    v161 = 0x80000001000736F0;
  }
  v163 = _stringCompareWithSmolCheck(_:_:expecting:)(v162, v161, 0xD000000000000015, 0x80000001000736D0, 0);
  swift_bridgeObjectRetain(v153);
  swift_bridgeObjectRelease(v161);
  if ((v163 & 1) != 0)
    goto LABEL_56;
  if ((_BYTE)v256)
  {
    if (v256 != 1)
    {
      v157 = 0x80000001000736F0;
      goto LABEL_55;
    }
    v164 = 0x80000001000736D0;
    v165 = 0xD000000000000015;
  }
  else
  {
    v164 = 0xE700000000000000;
    v165 = 0x6B726F77747261;
  }
  v167 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v164, 0xD00000000000001ALL, 0x80000001000736F0, 0);
  swift_bridgeObjectRelease(v164);
  if ((v167 & 1) != 0)
  {
LABEL_56:
    v168 = objc_allocWithZone((Class)AMSMediaArtwork);
    v169 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v153);
    v170 = (int *)objc_msgSend(v168, "initWithDictionary:", v169);

    v129 = v170;
    goto LABEL_57;
  }
  swift_bridgeObjectRelease(v153);
LABEL_57:
  v116 = v265;
  v132 = v253;
LABEL_58:
  v171 = * infix(_:_:)(v254, v125);
  v172 = objc_msgSend(v129, "URLWithSize:cropStyle:format:", AMSMediaArtworkCropStyleBoundedBox, AMSMediaArtworkFormatHEIC, v171, * infix(_:_:)(v255, v125));
  v173 = v264;
  if (v172)
  {
    v174 = v172;
    v175 = v247;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v176 = (uint64_t)v175;
    v177 = 0;
  }
  else
  {
    v177 = 1;
    v176 = (uint64_t)v247;
  }
  v246(v176, v177, 1, v23);
  sub_100053124(v176, v156);
  v178 = v248;
  sub_10005316C(v156, v248);
  if (v238(v178, 1, v23) == 1)
  {
    sub_10000AD84(v178);
    ((void (*)(_QWORD, _QWORD))v263)(0, 0);

    sub_10000AD84(v156);
    v158 = *(void (**)(char *, uint64_t))(v132 + 8);
    v158(v173, v23);
LABEL_63:
    v159 = v116;
    goto LABEL_64;
  }
  v179 = v178;
  v180 = v249;
  v237(v249, (char *)v179, v23);
  v258 = *(void (**)(void))(v132 + 16);
  ((void (*)(char *, char *, uint64_t))v258)(v252, v180, v23);
  if (v153)
  {
    if ((_BYTE)v256)
    {
      if (v256 == 1)
      {
        v181 = swift_bridgeObjectRelease(0x80000001000736D0);
LABEL_72:
        v185 = v249;
        v186 = (void *)URL.absoluteString.getter(v181);
        v188 = v187;
        v270 = v186;
        v271 = v187;
        v268 = 0x636965682E6262;
        v269 = 0xE700000000000000;
        v266 = 0xD000000000000012;
        v267 = 0x8000000100074300;
        v189 = sub_10000778C();
        v190 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v268, &v266, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v189, v189, v189);
        v192 = v191;
        swift_bridgeObjectRelease(v188);
        v193 = (uint64_t)v244;
        URL.init(string:)(v190, v192);
        swift_bridgeObjectRelease(v192);
        v194 = v243;
        ((void (*)(char *, char *, uint64_t))v258)(v243, v185, v23);
        if (v238(v193, 1, v23) == 1)
        {
          v195 = v242;
          v237(v242, v194, v23);
          sub_10000AD84(v193);
LABEL_84:
          v212 = v252;
          v198 = v253;
LABEL_87:
          (*(void (**)(char *, char *, uint64_t))(v198 + 40))(v212, v195, v23);
          goto LABEL_88;
        }
        v198 = v253;
        (*(void (**)(char *, uint64_t))(v253 + 8))(v194, v23);
        v199 = (unint64_t *)&v271;
        goto LABEL_86;
      }
      v183 = 0xD00000000000001ALL;
      v182 = 0x80000001000736F0;
    }
    else
    {
      v182 = 0xE700000000000000;
      v183 = 0x6B726F77747261;
    }
    v184 = _stringCompareWithSmolCheck(_:_:expecting:)(v183, v182, 0xD000000000000015, 0x80000001000736D0, 0);
    v181 = swift_bridgeObjectRelease(v182);
    if ((v184 & 1) != 0)
      goto LABEL_72;
    if ((_BYTE)v256)
    {
      if (v256 != 1)
      {
        v201 = swift_bridgeObjectRelease(0x80000001000736F0);
LABEL_82:
        v202 = v249;
        v203 = (void *)URL.absoluteString.getter(v201);
        v205 = v204;
        v270 = v203;
        v271 = v204;
        v268 = 0x636965682E6262;
        v269 = 0xE700000000000000;
        v266 = 0xD000000000000013;
        v267 = 0x80000001000742E0;
        v206 = sub_10000778C();
        v207 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v268, &v266, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v206, v206, v206);
        v209 = v208;
        swift_bridgeObjectRelease(v205);
        v193 = (uint64_t)v241;
        URL.init(string:)(v207, v209);
        swift_bridgeObjectRelease(v209);
        v210 = v240;
        ((void (*)(char *, char *, uint64_t))v258)(v240, v202, v23);
        if (v238(v193, 1, v23) == 1)
        {
          v211 = v239;
          v237(v239, v210, v23);
          sub_10000AD84(v193);
          v195 = v211;
          goto LABEL_84;
        }
        v198 = v253;
        (*(void (**)(char *, uint64_t))(v253 + 8))(v210, v23);
        v199 = &v269;
LABEL_86:
        v195 = (char *)*(v199 - 32);
        v237(v195, (char *)v193, v23);
        v212 = v252;
        goto LABEL_87;
      }
      v196 = 0x80000001000736D0;
      v197 = 0xD000000000000015;
    }
    else
    {
      v196 = 0xE700000000000000;
      v197 = 0x6B726F77747261;
    }
    v200 = _stringCompareWithSmolCheck(_:_:expecting:)(v197, v196, 0xD00000000000001ALL, 0x80000001000736F0, 0);
    v201 = swift_bridgeObjectRelease(v196);
    if ((v200 & 1) == 0)
      goto LABEL_88;
    goto LABEL_82;
  }
LABEL_88:
  if (qword_1000906F8 != -1)
    swift_once(&qword_1000906F8, sub_100029CC4);
  v213 = type metadata accessor for Logger(0);
  v214 = sub_10000A720(v213, (uint64_t)qword_1000959D8);
  v215 = Logger.logObject.getter(v214);
  v216 = static os_log_type_t.default.getter();
  v217 = os_log_type_enabled(v215, v216);
  v257 = v129;
  if (v217)
  {
    v218 = (uint8_t *)swift_slowAlloc(12, -1);
    v219 = (void *)swift_slowAlloc(32, -1);
    v270 = v219;
    *(_DWORD *)v218 = 136315138;
    v220 = v252;
    v221 = swift_beginAccess(v252, &v268, 0, 0);
    v222 = URL.absoluteString.getter(v221);
    v224 = v223;
    v266 = sub_1000155A4(v222, v223, (uint64_t *)&v270);
    v173 = v264;
    v156 = (uint64_t)v250;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, &v267);
    swift_bridgeObjectRelease(v224);
    _os_log_impl((void *)&_mh_execute_header, v215, v216, "attempting download of image from %s", v218, 0xCu);
    swift_arrayDestroy(v219, 1, (char *)&type metadata for Any + 8);
    v225 = v219;
    v116 = v265;
    swift_slowDealloc(v225, -1, -1);
    swift_slowDealloc(v218, -1, -1);

  }
  else
  {

    v220 = v252;
  }
  swift_beginAccess(v220, &v270, 0, 0);
  v226 = v245;
  v258();
  v227 = Data.init(contentsOf:options:)(v226, 0);
  v229 = v228;
  v230 = *(void (**)(char *, uint64_t))(v253 + 8);
  v230(v226, v23);
  v231 = Data.write(to:options:)(v173, 0, v227, v229);
  v232 = URL.path.getter(v231);
  v234 = v233;
  v263(v232);
  swift_bridgeObjectRelease(v234);
  sub_10000ADC4(v227, v229);

  v230(v249, v23);
  sub_10000AD84(v156);
  v230(v173, v23);
  v230(v116, v23);
  v230(v259, v23);
  v230(v260, v23);
  v230(v261, v23);
  return ((uint64_t (*)(char *, uint64_t))v230)(v252, v23);
}

uint64_t sub_100051CB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10004F588(*a1, *a2);
}

Swift::Int sub_100051CC0()
{
  char *v0;

  return sub_100051CC8(*v0);
}

Swift::Int sub_100051CC8(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000015;
    else
      v2 = 0xD00000000000001ALL;
    if (a1 == 1)
      v3 = 0x80000001000736D0;
    else
      v3 = 0x80000001000736F0;
  }
  else
  {
    v3 = 0xE700000000000000;
    v2 = 0x6B726F77747261;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100051D6C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x80000001000736D0;
  v3 = 0xD000000000000015;
  if (*v1 != 1)
  {
    v3 = 0xD00000000000001ALL;
    v2 = 0x80000001000736F0;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6B726F77747261;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

void sub_100051DEC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100051E34(uint64_t a1)
{
  String.hash(into:)(a1, 0x44496D616461, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

Swift::Int sub_100051F00(uint64_t a1)
{
  char *v1;

  return sub_100051F08(a1, *v1);
}

Swift::Int sub_100051F08(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000015;
    else
      v3 = 0xD00000000000001ALL;
    if (a2 == 1)
      v4 = 0x80000001000736D0;
    else
      v4 = 0x80000001000736F0;
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6B726F77747261;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100051FA8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_100051FFC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x44496D616461, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000520DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100052118 + 4 * byte_100072680[a1]))(0x6E6F697461657263, 0xEC00000065746144);
}

uint64_t sub_100052118()
{
  return 0x44496D616461;
}

uint64_t sub_10005212C()
{
  return 0x4449656C646E7562;
}

uint64_t sub_100052144()
{
  return 0x656C746974;
}

uint64_t sub_100052158()
{
  return 0x656C746974627573;
}

uint64_t sub_100052170()
{
  return 0x7374726F70707573;
}

unint64_t sub_100052194()
{
  return 0xD000000000000011;
}

unint64_t sub_1000521B0()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1000521D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005220C + 4 * byte_100072688[a1]))(0x6E6F697461657263, 0xEC00000065746144);
}

uint64_t sub_10005220C()
{
  return 0x44496D616461;
}

uint64_t sub_100052220()
{
  return 0x4449656C646E7562;
}

uint64_t sub_100052238()
{
  return 0x656C746974;
}

uint64_t sub_10005224C()
{
  return 0x656C746974627573;
}

uint64_t sub_100052264()
{
  return 0x7374726F70707573;
}

unint64_t sub_100052288()
{
  return 0xD000000000000011;
}

unint64_t sub_1000522A4()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_1000522C4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100053B5C(*a1);
  *a2 = result;
  return result;
}

void sub_1000522F0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x80000001000736D0;
  v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    v5 = 0xD00000000000001ALL;
    v4 = 0x80000001000736F0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6B726F77747261;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t type metadata accessor for AppMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_1000928B8;
  if (!qword_1000928B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppMetadata);
  return result;
}

void sub_100052390(char *a1)
{
  sub_10004F320(*a1);
}

void sub_10005239C()
{
  char *v0;

  sub_100051FA8(0, *v0);
}

void sub_1000523A8(uint64_t a1)
{
  char *v1;

  sub_100051DEC(a1, *v1);
}

void sub_1000523B0(uint64_t a1)
{
  char *v1;

  sub_100051FA8(a1, *v1);
}

unint64_t sub_1000523B8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100053DD8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000523E4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000520DC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005240C()
{
  unsigned __int8 *v0;

  return sub_1000521D0(*v0);
}

unint64_t sub_100052414@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100053DD8(a1);
  *a2 = result;
  return result;
}

void sub_100052438(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100052444(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053A7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005246C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100053A7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100052494(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  id v30;
  id v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Class v36;
  id v37;
  id v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  void *v45;
  id v46;
  unint64_t v47;
  char v48;
  id v49;
  unint64_t v50;

  v3 = v1;
  v5 = sub_100006454(&qword_100092910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003CD90(a1, v9);
  v11 = sub_100053A7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppMetadata.CodingKeys, &type metadata for AppMetadata.CodingKeys, v11, v9, v10);
  LOBYTE(v49) = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100007A70(&qword_100091C38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v49, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AppMetadata(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    LOBYTE(v49) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v49, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v49) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v49, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v49) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v49, v5);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v49) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v49, v5);
    v27 = *(unsigned __int8 *)(v3 + v14[9]);
    LOBYTE(v49) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v49, v5);
    v28 = (void *)objc_opt_self(NSJSONSerialization);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v49 = 0;
    v30 = objc_msgSend(v28, "dataWithJSONObject:options:error:", isa, 0, &v49);

    v31 = v49;
    if (!v30)
    {
      v42 = v31;
      _convertNSErrorToError(_:)(v31);

      goto LABEL_9;
    }
    v46 = v28;
    v32 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v34 = v33;

    v49 = v32;
    v50 = v34;
    v48 = 6;
    v47 = sub_100053AC0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v48, v5, &type metadata for Data, v47);
    sub_10000ADC4((uint64_t)v32, v34);
    v35 = v47;
    if (*(_QWORD *)(v3 + v14[11]))
    {
      v36 = Dictionary._bridgeToObjectiveC()().super.isa;
      v49 = 0;
      v37 = objc_msgSend(v46, "dataWithJSONObject:options:error:", v36, 0, &v49);

      v38 = v49;
      if (v37)
      {
        v39 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v41 = v40;

        v49 = v39;
        v50 = v41;
        v48 = 7;
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v48, v5, &type metadata for Data, v35);
        sub_10000ADC4((uint64_t)v39, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
      v45 = v38;
      _convertNSErrorToError(_:)(v38);

LABEL_9:
      swift_willThrow(v43);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000528B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  Class isa;
  id v41;
  id v42;
  id v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  int v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Class v53;
  id v54;
  id v55;
  id v56;
  int v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  _QWORD *v73;
  char *v74;
  unint64_t v75;
  id v76;
  unint64_t v77;

  v70 = a2;
  v4 = type metadata accessor for Date(0);
  v71 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100092928);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = (int *)type metadata accessor for AppMetadata(0);
  __chkstk_darwin(v72);
  v73 = a1;
  v74 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_10003CD90(a1, v13);
  v14 = sub_100053A7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppMetadata.CodingKeys, &type metadata for AppMetadata.CodingKeys, v14, v13, v12);
  if (v2)
    return sub_100015C84(v73);
  v15 = v8;
  v16 = v70;
  LOBYTE(v76) = 0;
  v17 = sub_100007A70(&qword_100091C40, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, &v76, v7, v4, v17);
  v19 = v74;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v74, v6, v4);
  LOBYTE(v76) = 1;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v76, v7);
  v21 = v72;
  v22 = (uint64_t *)&v19[v72[5]];
  *v22 = v20;
  v22[1] = v23;
  LOBYTE(v76) = 2;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v76, v7);
  v25 = (uint64_t *)&v19[v21[6]];
  *v25 = v24;
  v25[1] = v26;
  LOBYTE(v76) = 3;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v76, v7);
  v28 = (uint64_t *)&v19[v21[7]];
  *v28 = v27;
  v28[1] = v29;
  LOBYTE(v76) = 4;
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v76, v7);
  v31 = (uint64_t *)&v19[v21[8]];
  *v31 = v30;
  v31[1] = v32;
  LOBYTE(v76) = 5;
  v69 = 0;
  v19[v21[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v76, v7) & 1;
  LOBYTE(v75) = 6;
  v33 = sub_100053B04();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v75, v7, &type metadata for Data, v33);
  v35 = v33;
  v67 = v4;
  v68 = v7;
  v37 = (uint64_t)v76;
  v36 = v77;
  v38 = (void *)objc_opt_self(NSJSONSerialization);
  v39 = v37;
  v66 = v36;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v76 = 0;
  v64 = v38;
  v41 = objc_msgSend(v38, "JSONObjectWithData:options:error:", isa, 0, &v76);

  v42 = v76;
  if (v41)
  {
    v65 = v10;
    v43 = v76;
    _bridgeAnyObjectToAny(_:)(&v76, v41);
    swift_unknownObjectRelease(v41);
    v63 = sub_100006454(&qword_100091C68);
    if (swift_dynamicCast(&v75, &v76, (char *)&type metadata for Any + 8, v63, 6))
      v44 = v75;
    else
      v44 = sub_10004C6D0((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)&v74[v72[10]] = v44;
    LOBYTE(v75) = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v76, &type metadata for Data, &v75, v68, &type metadata for Data, v35);
    if (v77 >> 60 == 15)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v65, v68);
      sub_10000ADC4(v39, v66);
      v51 = (uint64_t)v74;
      *(_QWORD *)&v74[v72[11]] = 0;
LABEL_22:
      sub_1000530A4(v51, v16);
      sub_100015C84(v73);
      return sub_1000530E8(v51);
    }
    v52 = (uint64_t)v76;
    v62 = v77;
    v53 = Data._bridgeToObjectiveC()().super.isa;
    v76 = 0;
    v54 = objc_msgSend(v64, "JSONObjectWithData:options:error:", v53, 0, &v76);

    v55 = v76;
    if (v54)
    {
      v56 = v76;
      _bridgeAnyObjectToAny(_:)(&v76, v54);
      sub_10000ADC4(v39, v66);
      sub_100053B48(v52, v62);
      swift_unknownObjectRelease(v54);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v65, v68);
      v57 = swift_dynamicCast(&v75, &v76, (char *)&type metadata for Any + 8, v63, 6);
      v51 = (uint64_t)v74;
      v58 = v75;
      if (!v57)
        v58 = 0;
      *(_QWORD *)&v74[v72[11]] = v58;
      goto LABEL_22;
    }
    v59 = v76;
    _convertNSErrorToError(_:)(v55);

    swift_willThrow(v60);
    sub_10000ADC4(v39, v66);
    sub_100053B48(v52, v62);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v65, v68);
    v47 = 1;
  }
  else
  {
    v45 = v76;
    _convertNSErrorToError(_:)(v42);

    swift_willThrow(v46);
    sub_10000ADC4(v39, v66);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v68);
    v47 = 0;
  }
  v48 = v74;
  v49 = v72;
  v50 = v67;
  v34 = v69;
  sub_100015C84(v73);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v48, v50);
  swift_bridgeObjectRelease(*(_QWORD *)&v48[v49[5] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v48[v49[6] + 8]);
  result = swift_bridgeObjectRelease(*(_QWORD *)&v48[v49[7] + 8]);
  if (v34)
  {
    if (v47)
      return swift_bridgeObjectRelease(*(_QWORD *)&v48[v49[10]]);
  }
  else
  {
    result = swift_bridgeObjectRelease(*(_QWORD *)&v48[v49[8] + 8]);
    if ((v47 & 1) != 0)
      return swift_bridgeObjectRelease(*(_QWORD *)&v48[v49[10]]);
  }
  return result;
}

uint64_t sub_10005307C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000528B0(a1, a2);
}

uint64_t sub_100053090(_QWORD *a1)
{
  return sub_100052494(a1);
}

uint64_t sub_1000530A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000530E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100053124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100090BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005316C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100090BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for AppMetadata.AppArtworkType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadata.AppArtworkType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100053290 + 4 * byte_100072695[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000532C4 + 4 * byte_100072690[v4]))();
}

uint64_t sub_1000532C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000532CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000532D4);
  return result;
}

uint64_t sub_1000532E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000532E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000532EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000532F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadata.AppArtworkType()
{
  return &type metadata for AppMetadata.AppArtworkType;
}

_QWORD *sub_100053310(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (_QWORD *)((char *)a1 + v16);
    v19 = (_QWORD *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (_QWORD *)((char *)a1 + v17);
    v22 = (_QWORD *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v25 = *(_QWORD *)((char *)a2 + v24);
    *(_QWORD *)((char *)a1 + v24) = v25;
    v26 = a3[11];
    v27 = *(_QWORD *)((char *)a2 + v26);
    *(_QWORD *)((char *)a1 + v26) = v27;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
  }
  return a1;
}

uint64_t sub_100053430(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
}

uint64_t sub_1000534C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  v25 = a3[11];
  v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t sub_1000535B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v27 = a3[10];
  v28 = *(_QWORD *)(a2 + v27);
  v29 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[11];
  v31 = *(_QWORD *)(a1 + v30);
  v32 = *(_QWORD *)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_1000536F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100053790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v32 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_bridgeObjectRelease(v32);
  v33 = a3[11];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_bridgeObjectRelease(v34);
  return a1;
}

uint64_t sub_100053880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005388C);
}

uint64_t sub_10005388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10005390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053918);
}

uint64_t sub_100053918(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100053994(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000726D0;
    v4[2] = &unk_1000726D0;
    v4[3] = &unk_1000726D0;
    v4[4] = &unk_1000726E8;
    v4[5] = &unk_100072700;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[7] = &unk_100072718;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100053A38()
{
  unint64_t result;

  result = qword_100092908;
  if (!qword_100092908)
  {
    result = swift_getWitnessTable(&unk_1000727A8, &type metadata for AppMetadata.AppArtworkType);
    atomic_store(result, (unint64_t *)&qword_100092908);
  }
  return result;
}

unint64_t sub_100053A7C()
{
  unint64_t result;

  result = qword_100092918;
  if (!qword_100092918)
  {
    result = swift_getWitnessTable(&unk_10007291C, &type metadata for AppMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100092918);
  }
  return result;
}

unint64_t sub_100053AC0()
{
  unint64_t result;

  result = qword_100092920;
  if (!qword_100092920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100092920);
  }
  return result;
}

unint64_t sub_100053B04()
{
  unint64_t result;

  result = qword_100092930;
  if (!qword_100092930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100092930);
  }
  return result;
}

uint64_t sub_100053B48(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000ADC4(result, a2);
  return result;
}

unint64_t sub_100053B5C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10008D840, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t getEnumTagSinglePayload for AppMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100053C80 + 4 * byte_10007269F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100053CB4 + 4 * byte_10007269A[v4]))();
}

uint64_t sub_100053CB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053CBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053CC4);
  return result;
}

uint64_t sub_100053CD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053CD8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100053CDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053CE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppMetadata.CodingKeys()
{
  return &type metadata for AppMetadata.CodingKeys;
}

unint64_t sub_100053D04()
{
  unint64_t result;

  result = qword_100092938;
  if (!qword_100092938)
  {
    result = swift_getWitnessTable(&unk_1000728F4, &type metadata for AppMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100092938);
  }
  return result;
}

unint64_t sub_100053D4C()
{
  unint64_t result;

  result = qword_100092940;
  if (!qword_100092940)
  {
    result = swift_getWitnessTable(&unk_10007282C, &type metadata for AppMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100092940);
  }
  return result;
}

unint64_t sub_100053D94()
{
  unint64_t result;

  result = qword_100092948;
  if (!qword_100092948)
  {
    result = swift_getWitnessTable(&unk_100072854, &type metadata for AppMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100092948);
  }
  return result;
}

unint64_t sub_100053DD8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10008D8A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t *sub_100053E28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100006454(&qword_1000907A8);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100053EF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_100053F54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_100053FF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v4 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_1000540A4(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_10005413C(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v4 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000541EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000541F8);
}

uint64_t sub_1000541F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_1000907B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100054238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054244);
}

uint64_t sub_100054244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_1000907B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GameCenterLogo(uint64_t a1)
{
  uint64_t result;

  result = qword_1000929A8;
  if (!qword_1000929A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GameCenterLogo);
  return result;
}

void sub_1000542C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10001BD3C(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_10005432C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100075010, 1);
}

uint64_t sub_10005433C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];

  v50 = a1;
  v46 = type metadata accessor for Image.ResizingMode(0);
  v1 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - v9;
  v11 = sub_100006454(&qword_1000929E0);
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100006454(&qword_1000929E8);
  __chkstk_darwin(v44);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100006454(&qword_1000929F0);
  __chkstk_darwin(v49);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006454(&qword_1000929F8);
  __chkstk_darwin(v18);
  v45 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100015074((uint64_t)v10);
  static WidgetRenderingMode.accented.getter(v20);
  v21 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v21);
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v7, v4);
  v23(v10, v4);
  if ((v22 & 1) != 0)
    v24 = Image.init(_internalSystemName:)(0x746E6563656D6167, 0xEF6C6C69662E7265);
  else
    v24 = Image.init(_:bundle:)(0xD000000000000013, 0x8000000100074320, 0);
  v25 = v24;
  v26 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Image.ResizingMode.stretch(_:), v46);
  v27 = Image.resizable(capInsets:resizingMode:)(v3, v25, 0.0, 0.0, 0.0, 0.0);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v26);
  *(_QWORD *)&v51[0] = v27;
  View.unredacted()(&type metadata for Image, &protocol witness table for Image);
  v28 = swift_release(v27);
  v29 = static Color.black.getter(v28);
  v30 = Color.opacity(_:)(0.25);
  swift_release(v29);
  v32 = v47;
  v31 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v15, v13, v48);
  v33 = &v15[*(int *)(v44 + 36)];
  *(_QWORD *)v33 = v30;
  *(_OWORD *)(v33 + 8) = xmmword_1000721C0;
  *((_QWORD *)v33 + 3) = 0x3FF0000000000000;
  v34 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v31);
  v35 = static Alignment.center.getter(v34);
  _FrameLayout.init(width:height:alignment:)(v51, 0x4031000000000000, 0, 0x4031000000000000, 0, v35, v36);
  sub_100054734((uint64_t)v15, (uint64_t)v17);
  v37 = v49;
  v38 = &v17[*(int *)(v49 + 36)];
  v39 = v51[1];
  *(_OWORD *)v38 = v51[0];
  *((_OWORD *)v38 + 1) = v39;
  *((_OWORD *)v38 + 2) = v51[2];
  sub_100007928((uint64_t)v15, &qword_1000929E8);
  v40 = sub_10005477C();
  v41 = (uint64_t)v45;
  View.accessibility(hidden:)(1, v37, v40);
  sub_100007928((uint64_t)v17, &qword_1000929F0);
  return sub_100054878(v41, v50);
}

uint64_t sub_100054734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_1000929E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005477C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092A00;
  if (!qword_100092A00)
  {
    v1 = sub_100006494(&qword_1000929F0);
    sub_1000547E8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092A00);
  }
  return result;
}

unint64_t sub_1000547E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100092A08;
  if (!qword_100092A08)
  {
    v1 = sub_100006494(&qword_1000929E8);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092A08);
  }
  return result;
}

uint64_t sub_100054878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_1000929F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000548C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092A10;
  if (!qword_100092A10)
  {
    v1 = sub_100006494(&qword_1000929F8);
    sub_10005477C();
    sub_100007A70(&qword_100090988, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092A10);
  }
  return result;
}

uint64_t sub_100054948@<X0>(uint64_t a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;

  v30 = a2;
  v29 = sub_100006454(&qword_100092A18);
  v5 = __chkstk_darwin(v29);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  v10 = sub_100006454(&qword_1000916F8);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100091700);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v29 - v19;
  static WidgetAccentedRenderingMode.desaturated.getter(v18);
  v21 = type metadata accessor for WidgetAccentedRenderingMode(0);
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v12, 0, 1, v21);
  Image.widgetAccentedRenderingMode(_:)(v12, a1);
  sub_100007928((uint64_t)v12, &qword_1000916F8);
  v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v20, v17, v13);
  static WidgetAccentedRenderingMode.accentedDesaturated.getter(v23);
  v22(v12, 0, 1, v21);
  Image.widgetAccentedRenderingMode(_:)(v12, a1);
  sub_100007928((uint64_t)v12, &qword_1000916F8);
  v24 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v24(v7, v17, v13);
  *(double *)&v7[*(int *)(v29 + 36)] = a3;
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v17, v13);
  sub_100054BE4((uint64_t)v7, (uint64_t)v9);
  v24(v17, v20, v13);
  sub_100054C2C((uint64_t)v9, (uint64_t)v7);
  v26 = v30;
  v24(v30, v17, v13);
  v27 = sub_100006454(&qword_100092A20);
  sub_100054C2C((uint64_t)v7, (uint64_t)&v26[*(int *)(v27 + 48)]);
  sub_100007928((uint64_t)v9, &qword_100092A18);
  v25(v20, v13);
  sub_100007928((uint64_t)v7, &qword_100092A18);
  return ((uint64_t (*)(char *, uint64_t))v25)(v17, v13);
}

uint64_t sub_100054BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100092A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100054C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100092A18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100054C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054C80);
}

uint64_t sub_100054C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for CPTimelineEntry(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100054CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054D04);
}

uint64_t sub_100054D04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for CPTimelineEntry(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CPHeaderGradientView(uint64_t a1)
{
  uint64_t result;

  result = qword_100092A80;
  if (!qword_100092A80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPHeaderGradientView);
  return result;
}

void sub_100054DC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10001BD3C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100072A08;
    v4 = type metadata accessor for CPTimelineEntry(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100054E4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100075060, 1);
}

uint64_t sub_100054E5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t KeyPath;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;

  v2 = v1;
  v77 = a1;
  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_1000911B8);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100006454(&qword_1000911C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100006454(&qword_1000911C8);
  __chkstk_darwin(v73);
  v74 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006454(&qword_1000911D0);
  __chkstk_darwin(v14);
  v75 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - v17;
  v76 = sub_100006454(&qword_1000911D8);
  __chkstk_darwin(v76);
  v78 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CPHeaderGradientView(0);
  v21 = v2 + *(int *)(v20 + 24);
  v22 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v21 + *(int *)(v22 + 32)) == 1)
  {
    v23 = v78;
    swift_storeEnumTagMultiPayload(v78, v76, 0);
    v24 = sub_10001CF18();
    return _ConditionalContent<>.init(storage:)(v23, &type metadata for EmptyView, v14, &protocol witness table for EmptyView, v24);
  }
  else
  {
    *v9 = static Alignment.center.getter(v22);
    v9[1] = v26;
    v27 = sub_100006454(&qword_1000911E0);
    v28 = sub_1000553C4(v2, (uint64_t)v9 + *(int *)(v27 + 44));
    v29 = (double *)(v2 + *(int *)(v20 + 20));
    v30 = *v29;
    v31 = v29[1];
    v32 = static Alignment.center.getter(v28);
    sub_100062DD8(v30, 0, 0.0, 1, v30, 0, v31, 0, (uint64_t)v12, 0.0, 1, v31, 0, v32, v33);
    v34 = sub_100007928((uint64_t)v9, &qword_1000911B8);
    v35 = *v29;
    v36 = v29[1];
    v37 = static Alignment.center.getter(v34);
    sub_100062E30(v35, 0, 0.0, 1, v35, 0, v36, 0, (uint64_t)&v79, 0.0, 1, v36, 0, v37, v38);
    v39 = v79;
    LOBYTE(v31) = v80;
    v40 = v81;
    v71 = v3;
    v41 = v82;
    v69 = v4;
    v42 = v83;
    v72 = v18;
    v43 = v84;
    v67 = v85;
    v70 = v14;
    v44 = v86;
    v66 = v87;
    v68 = v6;
    v45 = v88;
    v65 = v89;
    v64 = v90;
    v63 = v91;
    v62 = v92;
    v46 = (uint64_t)v12;
    v47 = (uint64_t)v12;
    v48 = v74;
    sub_100007964(v46, v74, &qword_1000911C0);
    v49 = v48 + *(int *)(v73 + 36);
    *(_QWORD *)v49 = v39;
    *(_BYTE *)(v49 + 8) = LOBYTE(v31);
    *(_QWORD *)(v49 + 16) = v40;
    *(_BYTE *)(v49 + 24) = v41;
    *(_QWORD *)(v49 + 32) = v42;
    *(_BYTE *)(v49 + 40) = v43;
    *(_QWORD *)(v49 + 48) = v67;
    *(_BYTE *)(v49 + 56) = v44;
    *(_QWORD *)(v49 + 64) = v66;
    *(_BYTE *)(v49 + 72) = v45;
    *(_QWORD *)(v49 + 80) = v65;
    *(_BYTE *)(v49 + 88) = v64;
    v50 = v62;
    *(_QWORD *)(v49 + 96) = v63;
    *(_QWORD *)(v49 + 104) = v50;
    sub_100007928(v47, &qword_1000911C0);
    KeyPath = swift_getKeyPath(&unk_100072A70);
    v52 = v69;
    v53 = v68;
    v54 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for ColorScheme.light(_:), v71);
    v55 = v70;
    v56 = (uint64_t)v75;
    v57 = (uint64_t *)&v75[*(int *)(v70 + 36)];
    v58 = sub_100006454(&qword_100090950);
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))((char *)v57 + *(int *)(v58 + 28), v53, v54);
    *v57 = KeyPath;
    sub_100007964(v48, v56, &qword_1000911C8);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    sub_100007928(v48, &qword_1000911C8);
    v59 = (uint64_t)v72;
    sub_100007A2C(v56, (uint64_t)v72, &qword_1000911D0);
    v60 = v78;
    sub_100007964(v59, v78, &qword_1000911D0);
    swift_storeEnumTagMultiPayload(v60, v76, 1);
    v61 = sub_10001CF18();
    _ConditionalContent<>.init(storage:)(v60, &type metadata for EmptyView, v55, &protocol witness table for EmptyView, v61);
    return sub_100007928(v59, &qword_1000911D0);
  }
}

uint64_t sub_1000553C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  id v84;
  _QWORD *v85;
  uint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  _QWORD *v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;

  v155 = a1;
  v152 = a2;
  v2 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v2);
  v148 = (char *)&v141 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for BlendMode(0);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100006454(&qword_100091218);
  __chkstk_darwin(v144);
  v150 = (char *)&v141 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v149 = (uint64_t)&v141 - v7;
  v158 = type metadata accessor for WidgetRenderingMode(0);
  v159 = *(_QWORD **)(v158 - 8);
  __chkstk_darwin(v158);
  *(_QWORD *)&v157 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v156 = (uint64_t)&v141 - v10;
  v11 = sub_100006454(&qword_100091220);
  __chkstk_darwin(v11);
  v151 = (uint64_t *)((char *)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v160 = (uint64_t)&v141 - v14;
  *(_QWORD *)&v153 = sub_100006454(&qword_100091228);
  v15 = __chkstk_darwin(v153);
  v17 = (char *)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Material(0, v15);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006454(&qword_100091230);
  __chkstk_darwin(v22);
  v24 = (char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006454(&qword_100091238);
  __chkstk_darwin(v25);
  v27 = (uint64_t)&v141 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v154 = sub_100006454(&qword_100091240);
  __chkstk_darwin(v154);
  v29 = (char *)&v141 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v141 - v32;
  v34 = static Material.ultraThin.getter(v31);
  v35 = static Edge.Set.all.getter(v34);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v17, v21, v18);
  v17[*(int *)(v153 + 36)] = v35;
  sub_100007964((uint64_t)v17, (uint64_t)v24, &qword_100091228);
  sub_100007928((uint64_t)v17, &qword_100091228);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v37 = static Color.black.getter(v36);
  v38 = Color.opacity(_:)(0.2);
  v39 = swift_release(v37);
  LOBYTE(v37) = static Edge.Set.all.getter(v39);
  sub_100007964((uint64_t)v24, v27, &qword_100091230);
  v40 = (uint64_t)v33;
  v41 = v27 + *(int *)(v25 + 36);
  *(_QWORD *)v41 = v38;
  *(_BYTE *)(v41 + 8) = v37;
  sub_100007928((uint64_t)v24, &qword_100091230);
  v42 = sub_100006454(&qword_100091248);
  v43 = swift_allocObject(v42, 48, 7);
  v143 = xmmword_100071470;
  *(_OWORD *)(v43 + 16) = xmmword_100071470;
  v44 = static Color.black.getter(v43);
  *(_QWORD *)(v43 + 32) = v44;
  v45 = static Color.black.getter(v44);
  v46 = Color.opacity(_:)(0.0);
  v47 = v45;
  v48 = v155;
  v49 = swift_release(v47);
  *(_QWORD *)(v43 + 40) = v46;
  v169 = v43;
  specialized Array._endMutation()(v49);
  v50 = Gradient.init(colors:)(v169);
  v51 = static UnitPoint.top.getter();
  v53 = v52;
  v54 = static UnitPoint.bottom.getter();
  v56 = LinearGradient.init(gradient:startPoint:endPoint:)(&v161, v50, v51, v53, v54, v55);
  v57 = v161;
  v153 = v162;
  v58 = v163;
  v59 = v164;
  v60 = static UnitPoint.bottomLeading.getter(v56);
  v62 = v61;
  v63 = static UnitPoint.leading.getter();
  v65 = v64;
  sub_100007964(v27, (uint64_t)v29, &qword_100091238);
  v66 = &v29[*(int *)(v154 + 36)];
  *(_QWORD *)v66 = v57;
  *(_OWORD *)(v66 + 8) = v153;
  *((_QWORD *)v66 + 3) = v58;
  *((_QWORD *)v66 + 4) = v59;
  *((_QWORD *)v66 + 5) = 0xBFD1DF46A2529D39;
  *((double *)v66 + 6) = v60;
  *((_QWORD *)v66 + 7) = v62;
  v154 = xmmword_1000715F0;
  *((_OWORD *)v66 + 4) = xmmword_1000715F0;
  *((double *)v66 + 10) = v63;
  *((_QWORD *)v66 + 11) = v65;
  sub_100007928(v27, &qword_100091238);
  sub_100007A2C((uint64_t)v29, (uint64_t)v33, &qword_100091240);
  v67 = v156;
  v68 = sub_100015074(v156);
  v69 = v157;
  static WidgetRenderingMode.accented.getter(v68);
  v70 = sub_10001D0A4();
  v71 = v158;
  LOBYTE(v27) = dispatch thunk of static Equatable.== infix(_:_:)(v67, v69, v158, v70);
  v72 = (void (*)(uint64_t, uint64_t))v159[1];
  v72(v69, v71);
  v72(v67, v71);
  v73 = v160;
  if ((v27 & 1) != 0)
    goto LABEL_22;
  v74 = v48 + *(int *)(type metadata accessor for CPHeaderGradientView(0) + 24);
  v75 = type metadata accessor for CPTimelineEntry(0);
  v76 = *(_QWORD *)(v74 + *(int *)(v75 + 20));
  if (!((unint64_t)v76 >> 62))
  {
    v77 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v76);
    if (v77)
      goto LABEL_4;
    goto LABEL_21;
  }
  if (v76 < 0)
    v137 = *(_QWORD *)(v74 + *(int *)(v75 + 20));
  else
    v137 = v76 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v76);
  result = _CocoaArrayWrapper.endIndex.getter(v137);
  if (!result)
  {
LABEL_21:
    swift_bridgeObjectRelease(v76);
    v73 = v160;
LABEL_22:
    v138 = sub_100006454(&qword_100091258);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v73, 1, 1, v138);
    v131 = (uint64_t)v151;
    v136 = v73;
LABEL_23:
    sub_100007964(v40, (uint64_t)v29, &qword_100091240);
    sub_100007964(v136, v131, &qword_100091220);
    v139 = v152;
    sub_100007964((uint64_t)v29, v152, &qword_100091240);
    v140 = sub_100006454(&qword_100091260);
    sub_100007964(v131, v139 + *(int *)(v140 + 48), &qword_100091220);
    sub_100007928(v136, &qword_100091220);
    sub_100007928(v40, &qword_100091240);
    sub_100007928(v131, &qword_100091220);
    return sub_100007928((uint64_t)v29, &qword_100091240);
  }
LABEL_4:
  if ((v76 & 0xC000000000000001) != 0)
  {
    v79 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v76);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v79 = *(_QWORD *)(v76 + 32);
    swift_retain(v79);
LABEL_7:
    swift_bridgeObjectRelease(v76);
    v80 = *(void **)(v79 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    v142 = v40;
    if (v80)
    {
      v81 = v80;
    }
    else
    {
      v82 = *(void **)(v79 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v82)
        v83 = v82;
      else
        v83 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v81 = v83;
    }
    v84 = v80;
    swift_release(v79);
    v85 = v81;
    v86 = Color.init(uiColor:)(v85);
    v159 = v85;
    objc_msgSend(v85, "_luminance");
    if (v87 <= 0.8)
      v88 = -0.2;
    else
      v88 = (v87 + -0.8) / -0.2 * 0.2 + -0.2;
    v158 = *(_QWORD *)&v88;
    v89 = swift_allocObject(v42, 64, 7);
    *(_OWORD *)(v89 + 16) = xmmword_1000713B0;
    *(_QWORD *)(v89 + 32) = v86;
    *(_QWORD *)(v89 + 40) = v86;
    swift_retain_n(v86, 2);
    v90 = Color.opacity(_:)(0.5);
    *(_QWORD *)(v89 + 48) = v90;
    v91 = static Color.clear.getter(v90);
    *(_QWORD *)(v89 + 56) = v91;
    v169 = v89;
    specialized Array._endMutation()(v91);
    v92 = Gradient.init(colors:)(v169);
    v93 = static UnitPoint.top.getter();
    v95 = v94;
    v96 = static UnitPoint.bottom.getter();
    v98 = LinearGradient.init(gradient:startPoint:endPoint:)(&v165, v92, v93, v95, v96, v97);
    v99 = v165;
    v157 = v166;
    v156 = v167;
    v155 = v168;
    *(_QWORD *)&v153 = static UnitPoint.bottomLeading.getter(v98);
    v141 = v100;
    v101 = static UnitPoint.leading.getter();
    v103 = v102;
    v104 = swift_allocObject(v42, 48, 7);
    *(_OWORD *)(v104 + 16) = v143;
    *(_QWORD *)(v104 + 32) = v86;
    swift_retain(v86);
    v106 = static Color.black.getter(v105);
    v107 = Color.opacity(_:)(0.0);
    v108 = swift_release(v106);
    *(_QWORD *)(v104 + 40) = v107;
    v169 = v104;
    specialized Array._endMutation()(v108);
    v109 = Gradient.init(colors:)(v169);
    v110 = static UnitPoint.top.getter();
    v112 = v111;
    v113 = static UnitPoint.bottom.getter();
    v115 = LinearGradient.init(gradient:startPoint:endPoint:)(&v169, v109, v110, v112, v113, v114);
    v116 = v169;
    v143 = v170;
    v117 = v171;
    v118 = v172;
    v119 = static UnitPoint.bottomLeading.getter(v115);
    v121 = v120;
    v122 = static UnitPoint.leading.getter();
    v124 = v123;
    v125 = v146;
    v126 = v145;
    v127 = v147;
    (*(void (**)(char *, _QWORD, uint64_t))(v146 + 104))(v145, enum case for BlendMode.color(_:), v147);
    v128 = (uint64_t)v148;
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v148, v126, v127);
    v129 = (uint64_t)v150;
    sub_10001D0EC(v128, (uint64_t)&v150[*(int *)(v144 + 36)]);
    *(_QWORD *)v129 = v116;
    *(_OWORD *)(v129 + 8) = v143;
    *(_QWORD *)(v129 + 24) = v117;
    *(_QWORD *)(v129 + 32) = v118;
    *(_QWORD *)(v129 + 40) = 0xBFD1DF46A2529D39;
    *(double *)(v129 + 48) = v119;
    *(_QWORD *)(v129 + 56) = v121;
    *(_OWORD *)(v129 + 64) = v154;
    *(double *)(v129 + 80) = v122;
    *(_QWORD *)(v129 + 88) = v124;
    swift_bridgeObjectRetain(v116);
    sub_10001D130(v128);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v127);
    sub_10001D16C(&v169);
    v130 = v149;
    sub_100007A2C(v129, v149, &qword_100091218);
    sub_100007964(v130, v129, &qword_100091218);
    v131 = (uint64_t)v151;
    *v151 = v99;
    *(_OWORD *)(v131 + 8) = v157;
    v132 = v155;
    *(_QWORD *)(v131 + 24) = v156;
    *(_QWORD *)(v131 + 32) = v132;
    *(_QWORD *)(v131 + 40) = 0xBFD1DF46A2529D39;
    v133 = v141;
    *(_QWORD *)(v131 + 48) = v153;
    *(_QWORD *)(v131 + 56) = v133;
    *(_OWORD *)(v131 + 64) = v154;
    *(double *)(v131 + 80) = v101;
    *(_QWORD *)(v131 + 88) = v103;
    *(_QWORD *)(v131 + 96) = v158;
    v134 = sub_100006454(&qword_100091250);
    sub_100007964(v129, v131 + *(int *)(v134 + 48), &qword_100091218);
    swift_bridgeObjectRetain(v99);

    swift_release(v86);
    sub_100007928(v130, &qword_100091218);
    sub_100007928(v129, &qword_100091218);
    swift_bridgeObjectRelease(v99);
    v135 = sub_100006454(&qword_100091258);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v131, 0, 1, v135);
    v136 = v160;
    sub_100007A2C(v131, v160, &qword_100091220);
    v40 = v142;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

id sub_10005600C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  id v4;
  NSString v5;
  Class isa;
  id v7;
  uint64_t v9;

  v0 = sub_100006454(&qword_100092AC0);
  inited = swift_initStackObject(v0, &v9);
  *(_OWORD *)(inited + 16) = xmmword_100070F40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 56) = 0x8000000100074340;
  v3 = sub_10004C59C(inited);
  v4 = objc_allocWithZone((Class)NSError);
  v5 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v5, 404, isa);

  return v7;
}

uint64_t sub_100056124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100056130);
}

uint64_t sub_100056130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_9;
  }
  v15 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[9] + 32);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_100056238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056244);
}

uint64_t sub_100056244(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_9;
  }
  result = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[9] + 32) = a2;
  return result;
}

uint64_t type metadata accessor for CPLargeContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100092B20;
  if (!qword_100092B20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPLargeContentView);
  return result;
}

void sub_100056378(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      v6 = type metadata accessor for GeometryProxy(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for CPTimelineEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100072B10;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100056464(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000750B0, 1);
}

uint64_t sub_100056474@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v3 = sub_100006454(&qword_100092B80);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - v7;
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - v14;
  v16 = a1 + *(int *)(type metadata accessor for CPLargeContentView(0) + 24);
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_100006904(*(_QWORD *)v16, v18);
  v19 = sub_100014EBC(v17, v18);
  v20 = sub_100006A4C(v17, v18);
  v21 = 0;
  if ((v19 & 1) != 0)
  {
    v22 = sub_100015074((uint64_t)v15);
    static WidgetRenderingMode.accented.getter(v22);
    v23 = sub_10001D0A4();
    v24 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v9, v23);
    v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v12, v9);
    v20 = ((uint64_t (*)(char *, uint64_t))v25)(v15, v9);
    if ((v24 & 1) != 0)
    {
      v21 = 0;
    }
    else
    {
      if (qword_1000906D8 != -1)
        swift_once(&qword_1000906D8, sub_10000AB08);
      v21 = qword_1000959B0;
      swift_retain(qword_1000959B0);
    }
  }
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v20);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v26 = sub_100006454(&qword_100092B88);
  sub_1000566D0(a1, (uint64_t)&v8[*(int *)(v26 + 44)]);
  sub_100007964((uint64_t)v8, (uint64_t)v5, &qword_100092B80);
  v27 = v31;
  *v31 = v21;
  v28 = sub_100006454(&qword_100092B90);
  sub_100007964((uint64_t)v5, (uint64_t)v27 + *(int *)(v28 + 48), &qword_100092B80);
  swift_retain(v21);
  sub_100007928((uint64_t)v8, &qword_100092B80);
  sub_100007928((uint64_t)v5, &qword_100092B80);
  return swift_release(v21);
}

uint64_t sub_1000566D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[3];

  v63 = a2;
  v3 = sub_100006454(&qword_100092B98);
  __chkstk_darwin(v3);
  v61 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_1000922C8);
  __chkstk_darwin(v5);
  v59 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100006454(&qword_100092BA0);
  __chkstk_darwin(v60);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v62 = (uint64_t)&v56 - v10;
  v11 = sub_100006454(&qword_100092BA8);
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100006454(&qword_100092BB0);
  __chkstk_darwin(v57);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - v17;
  v19 = sub_100006454(&qword_100092BB8);
  __chkstk_darwin(v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100006454(&qword_100092BC0);
  __chkstk_darwin(v22);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v58 = (uint64_t)&v56 - v26;
  sub_100056B9C((uint64_t)v21);
  sub_100057B04(a1, (uint64_t)v13);
  v27 = type metadata accessor for CPLargeContentView(0);
  v28 = GeometryProxy.size.getter(v27);
  GeometryProxy.size.getter(v29);
  v31 = round(v30 * 0.575);
  v33 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(v64, *(_QWORD *)&v28, 0, *(_QWORD *)&v31, 0, v33, v34);
  sub_100007964((uint64_t)v13, (uint64_t)v15, &qword_100092BA8);
  v35 = &v15[*(int *)(v57 + 36)];
  v36 = v64[1];
  *(_OWORD *)v35 = v64[0];
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v64[2];
  sub_100007928((uint64_t)v13, &qword_100092BA8);
  v37 = sub_100007A2C((uint64_t)v15, (uint64_t)v18, &qword_100092BB0);
  v38 = static Alignment.center.getter(v37);
  v40 = v39;
  v41 = (uint64_t)&v24[*(int *)(v22 + 36)];
  sub_100007964((uint64_t)v18, v41, &qword_100092BB0);
  v42 = (uint64_t *)(v41 + *(int *)(sub_100006454(&qword_100092BC8) + 36));
  *v42 = v38;
  v42[1] = v40;
  sub_100007964((uint64_t)v21, (uint64_t)v24, &qword_100092BB8);
  sub_100007928((uint64_t)v18, &qword_100092BB0);
  sub_100007928((uint64_t)v21, &qword_100092BB8);
  v43 = v58;
  sub_100007A2C((uint64_t)v24, v58, &qword_100092BC0);
  v44 = v59;
  sub_100056FDC(v59);
  v45 = v61;
  v46 = sub_1000573B8(v61);
  v47 = static Alignment.center.getter(v46);
  v49 = v48;
  v50 = (uint64_t)&v8[*(int *)(v60 + 36)];
  sub_100007964(v45, v50, &qword_100092B98);
  v51 = (uint64_t *)(v50 + *(int *)(sub_100006454(&qword_100092BD0) + 36));
  *v51 = v47;
  v51[1] = v49;
  sub_100007964(v44, (uint64_t)v8, &qword_1000922C8);
  sub_100007928(v45, &qword_100092B98);
  sub_100007928(v44, &qword_1000922C8);
  v52 = v62;
  sub_100007A2C((uint64_t)v8, v62, &qword_100092BA0);
  sub_100007964(v43, (uint64_t)v24, &qword_100092BC0);
  sub_100007964(v52, (uint64_t)v8, &qword_100092BA0);
  v53 = v63;
  sub_100007964((uint64_t)v24, v63, &qword_100092BC0);
  v54 = sub_100006454(&qword_100092BD8);
  sub_100007964((uint64_t)v8, v53 + *(int *)(v54 + 48), &qword_100092BA0);
  sub_100007928(v52, &qword_100092BA0);
  sub_100007928(v43, &qword_100092BC0);
  sub_100007928((uint64_t)v8, &qword_100092BA0);
  return sub_100007928((uint64_t)v24, &qword_100092BC0);
}

uint64_t sub_100056B9C@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  __chkstk_darwin(v2);
  v49 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100092C80);
  v47 = *(_QWORD *)(v4 - 8);
  v48 = v4;
  __chkstk_darwin(v4);
  v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006454(&qword_100092C88);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v52 = *(_QWORD *)(v15 - 8);
  v53 = v15;
  __chkstk_darwin(v15);
  v43 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v44 = (char *)&v43 - v18;
  v19 = &v1[*(int *)(type metadata accessor for CPLargeContentView(0) + 32)];
  v20 = type metadata accessor for CPTimelineEntry(0);
  v21 = *(_QWORD *)&v19[*(int *)(v20 + 20)];
  if (!((unint64_t)v21 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*(_QWORD *)&v19[*(int *)(v20 + 20)]);
    if (v22)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v21);
    goto LABEL_14;
  }
  if (v21 < 0)
    v42 = *(_QWORD *)&v19[*(int *)(v20 + 20)];
  else
    v42 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)&v19[*(int *)(v20 + 20)]);
  result = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!result)
    goto LABEL_13;
LABEL_3:
  if ((v21 & 0xC000000000000001) != 0)
  {
    v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v24 = *(_QWORD *)(v21 + 32);
    swift_retain(v24);
LABEL_6:
    swift_bridgeObjectRelease(v21);
    sub_100014E8C((uint64_t)v11);
    sub_1000083FC((uint64_t)v11, (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v26 = v52;
    v25 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v14, 1, v53) != 1)
    {
      v27 = v44;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v44, v14, v25);
      v28 = v43;
      v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v43, v27, v25);
      __chkstk_darwin(v29);
      *(&v43 - 2) = v1;
      *(&v43 - 1) = (char *)v24;
      v30 = sub_100006454(&qword_100092C90);
      v31 = sub_100059BAC();
      v32 = v46;
      v33 = Link.init(destination:label:)(v28, sub_100059BA4, &v43 - 4, v30, v31);
      v34 = v49;
      static AccessibilityChildBehavior.combine.getter(v33);
      v35 = sub_1000078D8(&qword_100092CA0, &qword_100092C80, (uint64_t)&protocol conformance descriptor for Link<A>);
      v36 = v45;
      v37 = v48;
      View.accessibilityElement(children:)(v34, v48, v35);
      swift_release(v24);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v37);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
      v39 = v54;
      v38 = v55;
      v40 = v56;
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v56, v36, v55);
      v41 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40, v41, 1, v38);
    }
    swift_release(v24);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
LABEL_14:
    v41 = 1;
    v38 = v55;
    v40 = v56;
    v39 = v54;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40, v41, 1, v38);
  }
  __break(1u);
  return result;
}

uint64_t sub_100056FDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v40 = a1;
  v3 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for GeometryProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for CPAppGridView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100006454(&qword_1000922C8);
  __chkstk_darwin(v38);
  v39 = (uint64_t)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CPLargeContentView(0);
  sub_100007AF4(v2 + *(int *)(v20 + 32), (uint64_t)v15, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v2 + *(int *)(v20 + 28), v9);
  *v8 = swift_getKeyPath(&unk_100072BA8);
  v21 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v8, v21, 0);
  *v5 = swift_getKeyPath(&unk_100072B78);
  v22 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v5, v22, 0);
  sub_100007AB0((uint64_t)v15, (uint64_t)v18, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v16[5]], v12, v9);
  *(_QWORD *)&v18[v16[6]] = 1;
  *(_QWORD *)&v18[v16[7]] = 3;
  v18[v16[8]] = 0;
  v23 = &v18[v16[9]];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_100072BD8);
  v24 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = &v18[v16[10]];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_100072C08);
  v26 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  sub_100007A2C((uint64_t)v8, (uint64_t)&v18[v16[11]], &qword_1000907C0);
  v27 = sub_100007A2C((uint64_t)v5, (uint64_t)&v18[v16[12]], &qword_1000908C0);
  v28 = static Edge.Set.trailing.getter(v27);
  v29 = v28;
  v30 = static Edge.Set.leading.getter(v28);
  v31 = Edge.Set.init(rawValue:)(0);
  v32 = Edge.Set.init(rawValue:)(v31);
  if (Edge.Set.init(rawValue:)(v32 & v29) != v29)
    v31 = Edge.Set.init(rawValue:)(v31 | v29);
  v33 = Edge.Set.init(rawValue:)(v31);
  if (Edge.Set.init(rawValue:)(v33 & v30) != v30)
    LOBYTE(v31) = Edge.Set.init(rawValue:)(v31 | v30);
  v34 = v39;
  sub_100007AF4((uint64_t)v18, v39, type metadata accessor for CPAppGridView);
  v35 = v34 + *(int *)(v38 + 36);
  *(_BYTE *)v35 = v31;
  *(_OWORD *)(v35 + 8) = 0u;
  *(_OWORD *)(v35 + 24) = 0u;
  *(_BYTE *)(v35 + 40) = 1;
  sub_10000A7C0((uint64_t)v18, type metadata accessor for CPAppGridView);
  return sub_100007A2C(v34, v40, &qword_1000922C8);
}

uint64_t sub_1000573B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = sub_100006454(&qword_1000918E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100006454(&qword_100092BE0);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetRenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - v15;
  v17 = sub_100015074((uint64_t)&v36 - v15);
  static WidgetRenderingMode.accented.getter(v17);
  v18 = sub_10001D0A4();
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v10, v18);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  v20(v16, v10);
  v21 = 1;
  if ((v19 & 1) == 0)
  {
    sub_100058D90(v2, (uint64_t)v6);
    v22 = type metadata accessor for CPLargeContentView(0);
    v23 = GeometryProxy.size.getter(v22);
    v25 = GeometryProxy.size.getter(v24);
    GeometryProxy.size.getter(v26);
    v28 = v27;
    GeometryProxy.size.getter(v29);
    v31 = v28 - round(v30 * 0.575);
    v33 = static Alignment.center.getter(v32);
    sub_100063394(v23, 0, 0.0, 1, v25, 0, 0.0, 1, (uint64_t)v9, v31, 0, 0.0, 1, v33, v34);
    sub_100007928((uint64_t)v6, &qword_1000918E8);
    sub_100007A2C((uint64_t)v9, a1, &qword_100092BE0);
    v21 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, v21, 1, v37);
}

uint64_t sub_100057600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD v22[3];

  v6 = sub_100006454(&qword_100091A38);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v10 = sub_100006454(&qword_100091A58);
  sub_100057740(a1, a2, &v8[*(int *)(v10 + 44)]);
  v11 = type metadata accessor for CPLargeContentView(0);
  v12 = GeometryProxy.size.getter(v11);
  GeometryProxy.size.getter(v13);
  v15 = round(v14 * 0.575);
  v17 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(v22, *(_QWORD *)&v12, 0, *(_QWORD *)&v15, 0, v17, v18);
  sub_100007964((uint64_t)v8, a3, &qword_100091A38);
  v19 = (_OWORD *)(a3 + *(int *)(sub_100006454(&qword_100092C90) + 36));
  v20 = v22[1];
  *v19 = v22[0];
  v19[1] = v20;
  v19[2] = v22[2];
  return sub_100007928((uint64_t)v8, &qword_100091A38);
}

uint64_t sub_100057740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a3;
  v48 = a2;
  v4 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v4);
  v46 = (uint64_t *)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v11;
  v12 = type metadata accessor for GeometryProxy(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for CPTitleView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v43 - v20;
  v22 = (int *)type metadata accessor for CPLargeContentView(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1 + v22[7], v12);
  sub_100007AF4(a1 + v22[8], (uint64_t)v11, type metadata accessor for CPTimelineEntry);
  v23 = (__int128 *)(a1 + v22[9]);
  v24 = *((_QWORD *)v23 + 4);
  v25 = v23[1];
  v49 = *v23;
  v50 = v25;
  v51 = v24;
  swift_retain(v48);
  v26 = sub_100006454(&qword_1000908C8);
  State.projectedValue.getter(v52, v26);
  v27 = v52[0];
  v44 = v52[1];
  v43 = v53;
  v28 = v54;
  v29 = v55;
  *v8 = swift_getKeyPath(&unk_100072BA8);
  v30 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v8, v30, 0);
  KeyPath = swift_getKeyPath(&unk_100072B78);
  v32 = (uint64_t)v46;
  *v46 = KeyPath;
  v33 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  *(_QWORD *)v18 = swift_getKeyPath(&unk_100072BD8);
  v34 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v18, v34, 0);
  v35 = &v18[v16[5]];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_100072C08);
  v36 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  sub_100007A2C((uint64_t)v8, (uint64_t)&v18[v16[6]], &qword_1000907C0);
  sub_100007A2C(v32, (uint64_t)&v18[v16[7]], &qword_1000908C0);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v16[8]], v15, v12);
  sub_100007AB0((uint64_t)v45, (uint64_t)&v18[v16[9]], type metadata accessor for CPTimelineEntry);
  *(_QWORD *)&v18[v16[10]] = v48;
  v37 = &v18[v16[11]];
  v38 = v44;
  *(_QWORD *)v37 = v27;
  *((_QWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 1) = v43;
  *((_QWORD *)v37 + 4) = v28;
  *((_QWORD *)v37 + 5) = v29;
  sub_100007AB0((uint64_t)v18, (uint64_t)v21, type metadata accessor for CPTitleView);
  sub_100007AF4((uint64_t)v21, (uint64_t)v18, type metadata accessor for CPTitleView);
  v39 = v47;
  *v47 = 0;
  *((_BYTE *)v39 + 8) = 0;
  v40 = v39;
  v41 = sub_100006454(&qword_100091A60);
  sub_100007AF4((uint64_t)v18, (uint64_t)v40 + *(int *)(v41 + 48), type metadata accessor for CPTitleView);
  sub_10000A7C0((uint64_t)v21, type metadata accessor for CPTitleView);
  return sub_10000A7C0((uint64_t)v18, type metadata accessor for CPTitleView);
}

uint64_t sub_100057B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v3 = sub_100006454(&qword_100092BE8);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100006454(&qword_100092BF0);
  __chkstk_darwin(v41);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WidgetFamily(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006454(&qword_100092BF8);
  __chkstk_darwin(v42);
  v43 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CPLargeContentView(0);
  v12 = a1 + *(int *)(v11 + 32);
  v13 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 32)) == 1)
  {
    v14 = a1 + *(int *)(v11 + 24);
    v15 = *(_QWORD *)v14;
    v38 = v8;
    v16 = *(_BYTE *)(v14 + 8);
    sub_100006904(v15, v16);
    v17 = sub_100014EBC(v15, v16);
    v18 = v16;
    v8 = v38;
    sub_100006A4C(v15, v18);
    if ((v17 & 1) == 0)
    {
      v26 = v43;
      swift_storeEnumTagMultiPayload(v43, v42, 0);
      v27 = sub_1000078D8(&qword_100092C10, &qword_100092BF0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v28 = v44;
      _ConditionalContent<>.init(storage:)(v26, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v27);
      v29 = sub_100006454(&qword_100092C00);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    }
  }
  v19 = *(_QWORD *)(v12 + *(int *)(v13 + 20));
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v35 = v19;
    else
      v35 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    result = _CocoaArrayWrapper.endIndex.getter(v35);
    if (result)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease(v19);
    goto LABEL_19;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v19);
  if (!v20)
    goto LABEL_18;
LABEL_5:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v22 = *(_QWORD *)(v19 + 32);
    swift_retain(v22);
  }
  swift_bridgeObjectRelease(v19);
  if (!*(_QWORD *)(v22 + 32)
    && (v25 = sub_10004CF70(0xD000000000000019, 0x80000001000740F0), (v24 = (void *)v25) != 0)
    || (v23 = v39,
        sub_100014E8C(v39),
        v24 = sub_10001FC38(v23, 1),
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v23, v8),
        v24))
  {
    *v7 = static Alignment.center.getter(v25);
    v7[1] = v30;
    v31 = sub_100006454(&qword_100092C08);
    sub_100057F4C(v24, a1, (uint64_t)v7 + *(int *)(v31 + 44));
    v32 = v43;
    sub_100007964((uint64_t)v7, v43, &qword_100092BF0);
    swift_storeEnumTagMultiPayload(v32, v42, 1);
    v33 = sub_1000078D8(&qword_100092C10, &qword_100092BF0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v32, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v33);

    swift_release(v22);
    sub_100007928((uint64_t)v7, &qword_100092BF0);
    v34 = sub_100006454(&qword_100092C00);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 0, 1, v34);
    return sub_100007A2C((uint64_t)v5, v44, &qword_100092BE8);
  }
  swift_release(v22);
LABEL_19:
  v36 = sub_100006454(&qword_100092C00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v44, 1, 1, v36);
}

uint64_t sub_100057F4C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD v139[7];

  v119 = a2;
  v138 = a3;
  v135 = type metadata accessor for WidgetRenderingMode(0);
  v132 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v131 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v130 = (uint64_t)&v110 - v6;
  v7 = type metadata accessor for BlendMode(0);
  v136 = *(_QWORD *)(v7 - 8);
  v137 = v7;
  __chkstk_darwin(v7);
  v133 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100006454(&qword_100092C18);
  __chkstk_darwin(v123);
  v122 = (uint64_t *)((char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v129 = sub_100006454(&qword_100092C20);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v126 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100006454(&qword_100092C28);
  __chkstk_darwin(v124);
  v134 = (uint64_t)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v125 = (char *)&v110 - v13;
  __chkstk_darwin(v14);
  v128 = (uint64_t)&v110 - v15;
  v16 = type metadata accessor for ViewGeometryAnalyzer(0);
  __chkstk_darwin(v16);
  v116 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for ColorScheme(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v19 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Image.ResizingMode(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100006454(&qword_1000908F8);
  __chkstk_darwin(v24);
  v26 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100006454(&qword_100090900);
  __chkstk_darwin(v111);
  v28 = (char *)&v110 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100006454(&qword_100090908);
  __chkstk_darwin(v112);
  v30 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100006454(&qword_100092C30);
  __chkstk_darwin(v113);
  v32 = (char *)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100006454(&qword_100092C38);
  __chkstk_darwin(v33);
  v110 = (char *)&v110 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100006454(&qword_100092C40);
  __chkstk_darwin(v117);
  v121 = (uint64_t)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v118 = (uint64_t)&v110 - v37;
  __chkstk_darwin(v38);
  v120 = (uint64_t)&v110 - v39;
  v40 = Image.init(uiImage:)(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for Image.ResizingMode.stretch(_:), v20);
  v41 = Image.resizable(capInsets:resizingMode:)(v23, v40, 0.0, 0.0, 0.0, 0.0);
  swift_release(v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  *(_QWORD *)v26 = static Alignment.center.getter(v42);
  *((_QWORD *)v26 + 1) = v43;
  v44 = sub_100006454(&qword_100090948);
  sub_100054948(v41, &v26[*(int *)(v44 + 44)], 0.3);
  swift_release(v41);
  sub_100007964((uint64_t)v26, (uint64_t)v28, &qword_1000908F8);
  v45 = &v28[*(int *)(v111 + 36)];
  *(_QWORD *)v45 = 0;
  *((_WORD *)v45 + 4) = 257;
  sub_100007928((uint64_t)v26, &qword_1000908F8);
  v46 = v114;
  v47 = v115;
  (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v19, enum case for ColorScheme.light(_:), v115);
  KeyPath = swift_getKeyPath(&unk_100072C38);
  v49 = (uint64_t *)&v30[*(int *)(v112 + 36)];
  v50 = sub_100006454(&qword_100090950);
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v49 + *(int *)(v50 + 28), v19, v47);
  *v49 = KeyPath;
  v51 = (uint64_t)v110;
  sub_100007964((uint64_t)v28, (uint64_t)v30, &qword_100090900);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
  sub_100007928((uint64_t)v28, &qword_100090900);
  v52 = enum case for CoordinateSpace.global(_:);
  v53 = type metadata accessor for CoordinateSpace(0);
  v54 = (uint64_t)v116;
  v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v116, v52, v53);
  v56 = static Alignment.center.getter(v55);
  v58 = v57;
  v59 = v113;
  v60 = (uint64_t)&v32[*(int *)(v113 + 36)];
  sub_100007AF4(v54, v60, type metadata accessor for ViewGeometryAnalyzer);
  v61 = (uint64_t *)(v60 + *(int *)(sub_100006454(&qword_1000916D0) + 36));
  v62 = v119;
  *v61 = v56;
  v61[1] = v58;
  sub_100007964((uint64_t)v30, (uint64_t)v32, &qword_100090908);
  sub_10000A7C0(v54, type metadata accessor for ViewGeometryAnalyzer);
  sub_100007928((uint64_t)v30, &qword_100090908);
  v63 = sub_100059B20();
  View.accessibility(hidden:)(1, v59, v63);
  sub_100007928((uint64_t)v32, &qword_100092C30);
  v64 = type metadata accessor for CPLargeContentView(0);
  v65 = GeometryProxy.size.getter(v64);
  v67 = GeometryProxy.size.getter(v66);
  GeometryProxy.size.getter(v68);
  v70 = round(v69 * 0.575);
  v72 = static Alignment.center.getter(v71);
  v73 = v72;
  v75 = v74;
  if (v65 > v67)
  {
    v76 = static os_log_type_t.fault.getter(v72);
    v77 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v77, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v139, *(_QWORD *)&v65, 0, 0, 1, *(_QWORD *)&v67, 0, *(_QWORD *)&v70, 0, 0, 1, 0, 1, v73, v75);
  v78 = v118;
  sub_100007964(v51, v118, &qword_100092C38);
  v79 = (_OWORD *)(v78 + *(int *)(v117 + 36));
  v80 = v139[5];
  v79[4] = v139[4];
  v79[5] = v80;
  v79[6] = v139[6];
  v81 = v139[1];
  *v79 = v139[0];
  v79[1] = v81;
  v82 = v139[3];
  v79[2] = v139[2];
  v79[3] = v82;
  sub_100007928(v51, &qword_100092C38);
  v83 = v120;
  v84 = sub_100007A2C(v78, v120, &qword_100092C40);
  v85 = static HorizontalAlignment.center.getter(v84);
  v86 = (uint64_t)v122;
  *v122 = v85;
  *(_QWORD *)(v86 + 8) = 0;
  *(_BYTE *)(v86 + 16) = 1;
  v87 = sub_100006454(&qword_100092C58);
  sub_100058A14(v62, v86 + *(int *)(v87 + 44));
  v88 = sub_1000078D8(&qword_100092C60, &qword_100092C18, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v89 = v126;
  View.widgetAccentable(_:)(1, v123, v88);
  sub_100007928(v86, &qword_100092C18);
  v90 = v130;
  v91 = sub_100015074(v130);
  v92 = v131;
  static WidgetRenderingMode.accented.getter(v91);
  v93 = static WidgetRenderingMode.== infix(_:_:)(v90, v92);
  v94 = *(void (**)(char *, uint64_t))(v132 + 8);
  v95 = v92;
  v96 = v135;
  v94(v95, v135);
  v94((char *)v90, v96);
  v97 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
  v98 = v136;
  if ((v93 & 1) == 0)
    v97 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v99 = v133;
  v100 = v137;
  (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v133, *v97, v137);
  v101 = (uint64_t)v125;
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(&v125[*(int *)(v124 + 36)], v99, v100);
  v102 = v127;
  v103 = v129;
  (*(void (**)(uint64_t, char *, uint64_t))(v127 + 16))(v101, v89, v129);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v89, v103);
  v104 = v128;
  sub_100007A2C(v101, v128, &qword_100092C28);
  v105 = v121;
  sub_100007964(v83, v121, &qword_100092C40);
  v106 = v134;
  sub_100007964(v104, v134, &qword_100092C28);
  v107 = v138;
  sub_100007964(v105, v138, &qword_100092C40);
  v108 = sub_100006454(&qword_100092C68);
  sub_100007964(v106, v107 + *(int *)(v108 + 48), &qword_100092C28);
  sub_100007928(v104, &qword_100092C28);
  sub_100007928(v83, &qword_100092C40);
  sub_100007928(v106, &qword_100092C28);
  return sub_100007928(v105, &qword_100092C40);
}

uint64_t sub_100058A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a2;
  v39 = type metadata accessor for CPTitleGradientView(0);
  __chkstk_darwin(v39);
  v4 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_100006454(&qword_100092C70);
  __chkstk_darwin(v40);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v38 = (uint64_t)&v38 - v8;
  v9 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CPHeaderGradientView(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - v16;
  v18 = type metadata accessor for CPLargeContentView(0);
  v19 = GeometryProxy.size.getter(v18);
  GeometryProxy.size.getter(v20);
  v22 = v21 * 0.20625;
  v23 = a1 + *(int *)(v18 + 32);
  sub_100007AF4(v23, (uint64_t)v11, type metadata accessor for CPTimelineEntry);
  *v14 = swift_getKeyPath(&unk_100072C08);
  v24 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v14, v24, 0);
  v25 = (double *)((char *)v14 + *(int *)(v12 + 20));
  *v25 = v19;
  v25[1] = v22;
  sub_100007AB0((uint64_t)v11, (uint64_t)v14 + *(int *)(v12 + 24), type metadata accessor for CPTimelineEntry);
  v26 = sub_100007AB0((uint64_t)v14, (uint64_t)v17, type metadata accessor for CPHeaderGradientView);
  v27 = GeometryProxy.size.getter(v26);
  GeometryProxy.size.getter(v28);
  v30 = v29 * 0.2975;
  sub_100007AF4(v23, (uint64_t)v11, type metadata accessor for CPTimelineEntry);
  *v4 = swift_getKeyPath(&unk_100072C08);
  swift_storeEnumTagMultiPayload(v4, v24, 0);
  v31 = v39;
  v32 = (double *)((char *)v4 + *(int *)(v39 + 20));
  *v32 = v27;
  v32[1] = v30;
  sub_100007AB0((uint64_t)v11, (uint64_t)v4 + *(int *)(v31 + 24), type metadata accessor for CPTimelineEntry);
  sub_100007AF4((uint64_t)v4, (uint64_t)v6, type metadata accessor for CPTitleGradientView);
  *(_OWORD *)&v6[*(int *)(v40 + 36)] = xmmword_100072AB0;
  sub_10000A7C0((uint64_t)v4, type metadata accessor for CPTitleGradientView);
  v33 = v38;
  sub_100007A2C((uint64_t)v6, v38, &qword_100092C70);
  sub_100007AF4((uint64_t)v17, (uint64_t)v14, type metadata accessor for CPHeaderGradientView);
  sub_100007964(v33, (uint64_t)v6, &qword_100092C70);
  v34 = v41;
  sub_100007AF4((uint64_t)v14, v41, type metadata accessor for CPHeaderGradientView);
  v35 = sub_100006454(&qword_100092C78);
  v36 = v34 + *(int *)(v35 + 48);
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 0;
  sub_100007964((uint64_t)v6, v34 + *(int *)(v35 + 64), &qword_100092C70);
  sub_100007928(v33, &qword_100092C70);
  sub_10000A7C0((uint64_t)v17, type metadata accessor for CPHeaderGradientView);
  sub_100007928((uint64_t)v6, &qword_100092C70);
  return sub_10000A7C0((uint64_t)v14, type metadata accessor for CPHeaderGradientView);
}

uint64_t sub_100058D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a2;
  v3 = sub_100006454(&qword_1000918F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100006454(&qword_100091900);
  __chkstk_darwin(v41);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WidgetFamily(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100006454(&qword_100091908);
  __chkstk_darwin(v42);
  v43 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CPLargeContentView(0);
  v12 = a1 + *(int *)(v11 + 32);
  v13 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v12 + *(int *)(v13 + 32)) == 1)
  {
    v14 = a1 + *(int *)(v11 + 24);
    v15 = *(_QWORD *)v14;
    v38 = v8;
    v16 = *(_BYTE *)(v14 + 8);
    sub_100006904(v15, v16);
    v17 = sub_100014EBC(v15, v16);
    v18 = v16;
    v8 = v38;
    sub_100006A4C(v15, v18);
    if ((v17 & 1) == 0)
    {
      v26 = v43;
      swift_storeEnumTagMultiPayload(v43, v42, 0);
      v27 = sub_1000078D8(&qword_100091920, &qword_100091900, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v28 = v44;
      _ConditionalContent<>.init(storage:)(v26, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v27);
      v29 = sub_100006454(&qword_100091910);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    }
  }
  v19 = *(_QWORD *)(v12 + *(int *)(v13 + 20));
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v35 = v19;
    else
      v35 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    result = _CocoaArrayWrapper.endIndex.getter(v35);
    if (result)
      goto LABEL_5;
LABEL_18:
    swift_bridgeObjectRelease(v19);
    goto LABEL_19;
  }
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v19);
  if (!v20)
    goto LABEL_18;
LABEL_5:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v22 = *(_QWORD *)(v19 + 32);
    swift_retain(v22);
  }
  swift_bridgeObjectRelease(v19);
  if (!*(_QWORD *)(v22 + 32)
    && (v25 = sub_10004CF70(0xD000000000000019, 0x80000001000740F0), (v24 = (void *)v25) != 0)
    || (v23 = v39,
        sub_100014E8C(v39),
        v24 = sub_10001FC38(v23, 1),
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v23, v8),
        v24))
  {
    *v7 = static Alignment.center.getter(v25);
    v7[1] = v30;
    v31 = sub_100006454(&qword_100091918);
    sub_1000591DC(v24, a1, v22, (_QWORD *)((char *)v7 + *(int *)(v31 + 44)));
    v32 = v43;
    sub_100007964((uint64_t)v7, v43, &qword_100091900);
    swift_storeEnumTagMultiPayload(v32, v42, 1);
    v33 = sub_1000078D8(&qword_100091920, &qword_100091900, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v32, &type metadata for EmptyView, v41, &protocol witness table for EmptyView, v33);

    swift_release(v22);
    sub_100007928((uint64_t)v7, &qword_100091900);
    v34 = sub_100006454(&qword_100091910);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 0, 1, v34);
    return sub_100007A2C((uint64_t)v5, v44, &qword_1000918F8);
  }
  swift_release(v22);
LABEL_19:
  v36 = sub_100006454(&qword_100091910);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v44, 1, 1, v36);
}

uint64_t sub_1000591DC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;

  v80 = a3;
  v87 = a2;
  v88 = a4;
  v93 = sub_100006454(&qword_100091928);
  __chkstk_darwin(v93);
  v94 = (uint64_t *)((char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ColorScheme(0);
  v85 = *(_QWORD *)(v6 - 8);
  v86 = v6;
  __chkstk_darwin(v6);
  v84 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100006454(&qword_100091228);
  v8 = __chkstk_darwin(v78);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Material(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_100091230);
  __chkstk_darwin(v15);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006454(&qword_100091238);
  __chkstk_darwin(v77);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100006454(&qword_100091930);
  __chkstk_darwin(v79);
  v82 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100006454(&qword_100091938);
  __chkstk_darwin(v90);
  v81 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v83 = (uint64_t)&v76 - v23;
  v24 = sub_100006454(&qword_100091940);
  __chkstk_darwin(v24);
  v92 = (uint64_t)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v91 = (char *)&v76 - v27;
  v28 = type metadata accessor for Image.ResizingMode(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = Image.init(uiImage:)(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for Image.ResizingMode.stretch(_:), v28);
  v89 = Image.resizable(capInsets:resizingMode:)(v31, v32, 0.0, 0.0, 0.0, 0.0);
  swift_release(v32);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  v34 = static UnitPoint.center.getter(v33);
  v36 = v35;
  type metadata accessor for CPLargeContentView(0);
  if (sub_1000081B4())
  {
    v38 = static Material.ultraThin.getter(v37);
    v39 = static Edge.Set.all.getter(v38);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v14, v11);
    v10[*(int *)(v78 + 36)] = v39;
    sub_100007964((uint64_t)v10, (uint64_t)v17, &qword_100091228);
    sub_100007928((uint64_t)v10, &qword_100091228);
    v40 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v41 = static Color.black.getter(v40);
    v42 = Color.opacity(_:)(0.2);
    v43 = swift_release(v41);
    LOBYTE(v41) = static Edge.Set.all.getter(v43);
    sub_100007964((uint64_t)v17, (uint64_t)v19, &qword_100091230);
    v44 = &v19[*(int *)(v77 + 36)];
    *(_QWORD *)v44 = v42;
    v44[8] = v41;
    sub_100007928((uint64_t)v17, &qword_100091230);
    v45 = *(void **)(v80 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    if (v45)
    {
      v46 = *(id *)(v80 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    }
    else
    {
      v52 = *(void **)(v80 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v52)
        v53 = v52;
      else
        v53 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v46 = v53;
    }
    v54 = v45;
    v55 = Color.init(uiColor:)(v46);
    v56 = Color.opacity(_:)(0.7);
    v57 = swift_release(v55);
    LOBYTE(v55) = static Edge.Set.all.getter(v57);
    v58 = v82;
    sub_100007964((uint64_t)v19, v82, &qword_100091238);
    v59 = v58 + *(int *)(v79 + 36);
    *(_QWORD *)v59 = v56;
    *(_BYTE *)(v59 + 8) = v55;
    sub_100007928((uint64_t)v19, &qword_100091238);
    KeyPath = swift_getKeyPath(&unk_100072B78);
    v62 = v84;
    v61 = v85;
    v63 = v86;
    (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v84, enum case for ColorScheme.light(_:), v86);
    v64 = v90;
    v65 = (uint64_t)v81;
    v66 = (uint64_t *)&v81[*(int *)(v90 + 36)];
    v67 = sub_100006454(&qword_100090950);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)v66 + *(int *)(v67 + 28), v62, v63);
    *v66 = KeyPath;
    sub_100007964(v58, v65, &qword_100091930);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    sub_100007928(v58, &qword_100091930);
    v68 = v83;
    sub_100007A2C(v65, v83, &qword_100091938);
    v69 = v94;
    sub_100007964(v68, (uint64_t)v94, &qword_100091938);
    swift_storeEnumTagMultiPayload(v69, v93, 0);
    v70 = sub_100059A78();
    v51 = (uint64_t)v91;
    _ConditionalContent<>.init(storage:)(v69, v64, &type metadata for Color, v70, &protocol witness table for Color);
    sub_100007928(v68, &qword_100091938);
  }
  else
  {
    if (qword_1000906E0 != -1)
      swift_once(&qword_1000906E0, sub_10000AB40);
    v47 = qword_1000959B8;
    v48 = v93;
    v49 = v94;
    *v94 = qword_1000959B8;
    swift_storeEnumTagMultiPayload(v49, v48, 1);
    v50 = sub_100059A78();
    swift_retain(v47);
    v51 = (uint64_t)v91;
    _ConditionalContent<>.init(storage:)(v49, v90, &type metadata for Color, v50, &protocol witness table for Color);
  }
  v71 = v92;
  sub_100007964(v51, v92, &qword_100091940);
  v72 = v88;
  v73 = v89;
  *v88 = v89;
  *(_OWORD *)(v72 + 1) = xmmword_100072AC0;
  v72[3] = 0xBFF0000000000000;
  *((double *)v72 + 4) = v34;
  v72[5] = v36;
  v74 = sub_100006454(&qword_100091988);
  sub_100007964(v71, (uint64_t)v72 + *(int *)(v74 + 48), &qword_100091940);
  swift_retain(v73);
  sub_100007928(v51, &qword_100091940);
  sub_100007928(v71, &qword_100091940);
  return swift_release(v73);
}

uint64_t sub_10005990C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for ContainerBackgroundPlacement(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100092B68);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = static Alignment.center.getter(v8);
  v7[1] = v9;
  v10 = sub_100006454(&qword_100092B70);
  v11 = sub_100056474(v0, (_QWORD *)((char *)v7 + *(int *)(v10 + 44)));
  v12 = static ContainerBackgroundPlacement.widget.getter(v11);
  v13 = static Alignment.center.getter(v12);
  v15 = v14;
  v16 = sub_1000078D8(&qword_100092B78, &qword_100092B68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.containerBackground<A>(for:alignment:content:)(v4, v13, v15, sub_100005EF8, 0, v5, &type metadata for Color, v16, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100007928((uint64_t)v7, &qword_100092B68);
}

unint64_t sub_100059A78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100091948;
  if (!qword_100091948)
  {
    v1 = sub_100006494(&qword_100091938);
    sub_1000297D4();
    sub_1000078D8(&qword_100090978, &qword_100090950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100091948);
  }
  return result;
}

unint64_t sub_100059B20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092C48;
  if (!qword_100092C48)
  {
    v1 = sub_100006494(&qword_100092C30);
    sub_1000077D0();
    sub_1000078D8(&qword_100092C50, &qword_1000916D0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092C48);
  }
  return result;
}

uint64_t sub_100059BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100057600(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100059BAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092C98;
  if (!qword_100092C98)
  {
    v1 = sub_100006494(&qword_100092C90);
    sub_1000078D8(&qword_100091A40, &qword_100091A38, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092C98);
  }
  return result;
}

uint64_t sub_100059C30()
{
  _QWORD v1[4];

  v1[0] = sub_100006494(&qword_100092B68);
  v1[1] = &type metadata for Color;
  v1[2] = sub_1000078D8(&qword_100092B78, &qword_100092B68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = &protocol witness table for Color;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t *sub_100059CA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = (int *)type metadata accessor for CPTimelineEntry(0);
    v19 = v18[5];
    v20 = *(_QWORD *)&v16[v19];
    *(_QWORD *)&v15[v19] = v20;
    v15[v18[6]] = v16[v18[6]];
    v15[v18[7]] = v16[v18[7]];
    v15[v18[8]] = v16[v18[8]];
    v15[v18[9]] = v16[v18[9]];
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_100059DEC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = *(_QWORD *)&v6[*(int *)(type metadata accessor for CPTimelineEntry(0) + 20)];
  return swift_bridgeObjectRelease(v8);
}

uint64_t *sub_100059E88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = (int *)type metadata accessor for CPTimelineEntry(0);
  v17 = v16[5];
  v18 = *(_QWORD *)&v14[v17];
  *(_QWORD *)&v13[v17] = v18;
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v13[v16[9]] = v14[v16[9]];
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t *sub_100059FA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = (int *)type metadata accessor for CPTimelineEntry(0);
  v17 = v16[5];
  v18 = *(_QWORD *)&v14[v17];
  v19 = *(_QWORD *)&v13[v17];
  *(_QWORD *)&v13[v17] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v13[v16[9]] = v14[v16[9]];
  return a1;
}

char *sub_10005A0E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)&v9[v12[5]] = *(_QWORD *)&v10[v12[5]];
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v9[v12[9]] = v10[v12[9]];
  return a1;
}

char *sub_10005A1F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for CPTimelineEntry(0);
  v13 = v12[5];
  v14 = *(_QWORD *)&v9[v13];
  *(_QWORD *)&v9[v13] = *(_QWORD *)&v10[v13];
  swift_bridgeObjectRelease(v14);
  v9[v12[6]] = v10[v12[6]];
  v9[v12[7]] = v10[v12[7]];
  v9[v12[8]] = v10[v12[8]];
  v9[v12[9]] = v10[v12[9]];
  return a1;
}

uint64_t sub_10005A320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A32C);
}

uint64_t sub_10005A32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for CPTimelineEntry(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10005A3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A3B0);
}

uint64_t sub_10005A3B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for CPTimelineEntry(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CPEntryView(uint64_t a1)
{
  uint64_t result;

  result = qword_100092D00;
  if (!qword_100092D00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPEntryView);
  return result;
}

void sub_10005A46C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1000126B4(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for CPTimelineEntry(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_10005A4F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100075100, 1);
}

uint64_t sub_10005A500@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  int *v31;
  char *v32;
  uint64_t result;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v5 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CPEntryView(0);
  sub_100007AF4(v2 + *(int *)(v18 + 20), (uint64_t)v17, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  type metadata accessor for LockdownModeManager(0);
  v19 = (void *)static LockdownModeManager.shared.getter();
  v20 = LockdownModeManager.enabled.getter();

  if ((v20 & 1) != 0)
    v21 = 0xD000000000000015;
  else
    v21 = 0x5F4E495F4E474953;
  v22 = 0x8000000100073DA0;
  if ((v20 & 1) == 0)
    v22 = 0xEF4547415353454DLL;
  v39 = v22;
  v40 = v21;
  v23 = (void *)static LockdownModeManager.shared.getter();
  v24 = LockdownModeManager.enabled.getter();

  if ((v24 & 1) != 0)
    v25 = 0;
  else
    v25 = 0xD000000000000016;
  v38 = v25;
  if ((v24 & 1) != 0)
    v26 = 0;
  else
    v26 = 0x8000000100073D80;
  *v10 = swift_getKeyPath(&unk_100072CD0);
  v27 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v10, v27, 0);
  *v7 = swift_getKeyPath(&unk_100072D00);
  v28 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v7, v28, 0);
  KeyPath = swift_getKeyPath(&unk_100072D30);
  *(_QWORD *)a2 = swift_getKeyPath(&unk_100072D58);
  v30 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(a2, v30, 0);
  v31 = (int *)type metadata accessor for CPMessageView(0);
  sub_100007A2C((uint64_t)v10, (uint64_t)&a2[v31[5]], &qword_1000907C0);
  sub_100007A2C((uint64_t)v7, (uint64_t)&a2[v31[6]], &qword_1000908C0);
  v32 = &a2[v31[7]];
  *(_QWORD *)v32 = KeyPath;
  v32[8] = 0;
  sub_100007AB0((uint64_t)v17, (uint64_t)&a2[v31[8]], type metadata accessor for CPTimelineEntry);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(&a2[v31[9]], v14, v11);
  v34 = (unint64_t *)&a2[v31[10]];
  v35 = v39;
  *v34 = v40;
  v34[1] = v35;
  v36 = (unint64_t *)&a2[v31[11]];
  *v36 = v38;
  v36[1] = v26;
  return result;
}

uint64_t sub_10005A834@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t result;
  char *v26;
  char *v27;
  uint64_t v28;

  v5 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CPEntryView(0);
  sub_100007AF4(v2 + *(int *)(v18 + 20), (uint64_t)v17, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  *v10 = swift_getKeyPath(&unk_100072CD0);
  v19 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v10, v19, 0);
  *v7 = swift_getKeyPath(&unk_100072D00);
  v20 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v7, v20, 0);
  KeyPath = swift_getKeyPath(&unk_100072D30);
  *(_QWORD *)a2 = swift_getKeyPath(&unk_100072D58);
  v22 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(a2, v22, 0);
  v23 = (int *)type metadata accessor for CPMessageView(0);
  sub_100007A2C((uint64_t)v10, (uint64_t)&a2[v23[5]], &qword_1000907C0);
  sub_100007A2C((uint64_t)v7, (uint64_t)&a2[v23[6]], &qword_1000908C0);
  v24 = &a2[v23[7]];
  *(_QWORD *)v24 = KeyPath;
  v24[8] = 0;
  sub_100007AB0((uint64_t)v17, (uint64_t)&a2[v23[8]], type metadata accessor for CPTimelineEntry);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(&a2[v23[9]], v14, v11);
  v26 = &a2[v23[10]];
  *(_QWORD *)v26 = 0xD000000000000017;
  *((_QWORD *)v26 + 1) = 0x8000000100074360;
  v27 = &a2[v23[11]];
  *(_QWORD *)v27 = 0xD00000000000001ELL;
  *((_QWORD *)v27 + 1) = 0x8000000100074380;
  return result;
}

uint64_t sub_10005AADC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t result;
  char *v26;
  char *v27;
  uint64_t v28;

  v5 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CPEntryView(0);
  sub_100007AF4(v2 + *(int *)(v18 + 20), (uint64_t)v17, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  *v10 = swift_getKeyPath(&unk_100072CD0);
  v19 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v10, v19, 0);
  *v7 = swift_getKeyPath(&unk_100072D00);
  v20 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v7, v20, 0);
  KeyPath = swift_getKeyPath(&unk_100072D30);
  *(_QWORD *)a2 = swift_getKeyPath(&unk_100072D58);
  v22 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(a2, v22, 0);
  v23 = (int *)type metadata accessor for CPMessageView(0);
  sub_100007A2C((uint64_t)v10, (uint64_t)&a2[v23[5]], &qword_1000907C0);
  sub_100007A2C((uint64_t)v7, (uint64_t)&a2[v23[6]], &qword_1000908C0);
  v24 = &a2[v23[7]];
  *(_QWORD *)v24 = KeyPath;
  v24[8] = 0;
  sub_100007AB0((uint64_t)v17, (uint64_t)&a2[v23[8]], type metadata accessor for CPTimelineEntry);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(&a2[v23[9]], v14, v11);
  v26 = &a2[v23[10]];
  *(_QWORD *)v26 = 0xD000000000000019;
  *((_QWORD *)v26 + 1) = 0x8000000100073AE0;
  v27 = &a2[v23[11]];
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = 0;
  return result;
}

uint64_t sub_10005AD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  uint64_t v167;
  int *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  v177 = a1;
  v178 = a2;
  v184 = a3;
  v164 = type metadata accessor for CPExtraLargeContentView(0);
  __chkstk_darwin(v164);
  v157 = (uint64_t *)((char *)&v157 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v158 = (uint64_t)&v157 - v5;
  v161 = sub_100006454(&qword_100092E28);
  __chkstk_darwin(v161);
  v163 = (uint64_t)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100006454(&qword_100092E10);
  __chkstk_darwin(v174);
  v165 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for CPLargeContentView(0);
  __chkstk_darwin(v162);
  v159 = (uint64_t *)((char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v160 = (uint64_t)&v157 - v10;
  v179 = type metadata accessor for CPMediumContentView(0);
  __chkstk_darwin(v179);
  v166 = (uint64_t *)((char *)&v157 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v167 = (uint64_t)&v157 - v13;
  v181 = sub_100006454(&qword_100092E30);
  __chkstk_darwin(v181);
  v183 = (char *)&v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100006454(&qword_100092E38);
  __chkstk_darwin(v172);
  v180 = (uint64_t)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100006454(&qword_100092E40);
  __chkstk_darwin(v169);
  v176 = (uint64_t)&v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100006454(&qword_100092DF0);
  __chkstk_darwin(v173);
  v170 = (char *)&v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_100006454(&qword_100092DE0);
  __chkstk_darwin(v182);
  v171 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v19);
  v21 = (uint64_t **)((char *)&v157 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v22);
  v175 = (uint64_t)&v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for GeometryProxy(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v157 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (int *)type metadata accessor for CPSmallContentView(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v157 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v168 = (int *)((char *)&v157 - v32);
  v33 = type metadata accessor for WidgetFamily(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v157 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E8C((uint64_t)v36);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v34 + 88))(v36, v33);
  if (v37 == enum case for WidgetFamily.systemSmall(_:))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v177, v24);
    v38 = v175;
    sub_100007AF4(v178, v175, type metadata accessor for CPTimelineEntry);
    *v21 = swift_getKeyPath(&unk_100072CD0);
    v39 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v21, v39, 0);
    KeyPath = swift_getKeyPath(&unk_100072D30);
    *(_QWORD *)v30 = swift_getKeyPath(&unk_100072D58);
    v41 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v30, v41, 0);
    sub_100007A2C((uint64_t)v21, (uint64_t)&v30[v28[5]], &qword_1000907C0);
    v42 = &v30[v28[6]];
    *(_QWORD *)v42 = KeyPath;
    v42[8] = 0;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v30[v28[7]], v27, v24);
    sub_100007AB0(v38, (uint64_t)&v30[v28[8]], type metadata accessor for CPTimelineEntry);
    v43 = &v30[v28[9]];
    type metadata accessor for CGRect(0);
    v185 = 0u;
    v186 = 0u;
    State.init(wrappedValue:)(&v187, &v185, v44);
    v45 = v189;
    v46 = v188;
    *(_OWORD *)v43 = v187;
    *((_OWORD *)v43 + 1) = v46;
    *((_QWORD *)v43 + 4) = v45;
    v47 = (uint64_t)v168;
    sub_100007AB0((uint64_t)v30, (uint64_t)v168, type metadata accessor for CPSmallContentView);
    v48 = v176;
    sub_100007AF4(v47, v176, type metadata accessor for CPSmallContentView);
    swift_storeEnumTagMultiPayload(v48, v169, 0);
    v49 = sub_100007A70(&qword_100092DF8, type metadata accessor for CPSmallContentView, (uint64_t)&unk_100070DD8);
    v50 = sub_100007A70(&qword_100092E00, type metadata accessor for CPMediumContentView, (uint64_t)&unk_100073568);
    v51 = (uint64_t)v170;
    _ConditionalContent<>.init(storage:)(v48, v28, v179, v49, v50);
    v52 = v180;
    sub_100007964(v51, v180, &qword_100092DF0);
    swift_storeEnumTagMultiPayload(v52, v172, 0);
    v53 = sub_10005D750();
    v54 = sub_10005D7EC();
    v55 = (uint64_t)v171;
    _ConditionalContent<>.init(storage:)(v52, v173, v174, v53, v54);
    sub_100007928(v51, &qword_100092DF0);
    v56 = (uint64_t)v183;
    sub_100007964(v55, (uint64_t)v183, &qword_100092DE0);
    swift_storeEnumTagMultiPayload(v56, v181, 0);
    v57 = sub_100006454(&qword_100092270);
    v58 = sub_10005D72C();
    v59 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v56, v182, v57, v58, v59);
    sub_100007928(v55, &qword_100092DE0);
    v60 = v47;
    v61 = type metadata accessor for CPSmallContentView;
    return sub_10000A7C0(v60, v61);
  }
  v168 = v28;
  v62 = v25;
  v63 = v24;
  v64 = v175;
  v65 = v176;
  v66 = v178;
  v67 = (int *)v179;
  if (v37 == enum case for WidgetFamily.systemMedium(_:))
  {
    v68 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v27, v177, v63);
    v69 = v64;
    sub_100007AF4(v66, v64, type metadata accessor for CPTimelineEntry);
    v70 = (uint64_t)v21;
    *v21 = swift_getKeyPath(&unk_100072CD0);
    v71 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v21, v71, 0);
    v72 = swift_getKeyPath(&unk_100072D30);
    v73 = swift_getKeyPath(&unk_100072D58);
    v74 = (uint64_t)v166;
    *v166 = v73;
    v75 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v74, v75, 0);
    sub_100007A2C(v70, v74 + v67[5], &qword_1000907C0);
    v76 = v74 + v67[6];
    *(_QWORD *)v76 = v72;
    *(_BYTE *)(v76 + 8) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v74 + v67[7], v27, v68);
    sub_100007AB0(v69, v74 + v67[8], type metadata accessor for CPTimelineEntry);
    v77 = v74 + v67[9];
    type metadata accessor for CGRect(0);
    v185 = 0u;
    v186 = 0u;
    State.init(wrappedValue:)(&v187, &v185, v78);
    v79 = v189;
    v80 = v188;
    *(_OWORD *)v77 = v187;
    *(_OWORD *)(v77 + 16) = v80;
    *(_QWORD *)(v77 + 32) = v79;
    v81 = type metadata accessor for CPMediumContentView;
    v82 = v167;
    sub_100007AB0(v74, v167, type metadata accessor for CPMediumContentView);
    sub_100007AF4(v82, v65, type metadata accessor for CPMediumContentView);
    swift_storeEnumTagMultiPayload(v65, v169, 1);
    v83 = sub_100007A70(&qword_100092DF8, type metadata accessor for CPSmallContentView, (uint64_t)&unk_100070DD8);
    v84 = sub_100007A70(&qword_100092E00, type metadata accessor for CPMediumContentView, (uint64_t)&unk_100073568);
    v85 = (uint64_t)v170;
    _ConditionalContent<>.init(storage:)(v65, v168, v67, v83, v84);
    v86 = v180;
    sub_100007964(v85, v180, &qword_100092DF0);
    swift_storeEnumTagMultiPayload(v86, v172, 0);
    v87 = sub_10005D750();
    v88 = sub_10005D7EC();
    v89 = (uint64_t)v171;
    _ConditionalContent<>.init(storage:)(v86, v173, v174, v87, v88);
    sub_100007928(v85, &qword_100092DF0);
    v90 = (uint64_t)v183;
    sub_100007964(v89, (uint64_t)v183, &qword_100092DE0);
    swift_storeEnumTagMultiPayload(v90, v181, 0);
    v91 = sub_100006454(&qword_100092270);
    v92 = sub_10005D72C();
    v93 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v90, v182, v91, v92, v93);
    v94 = v89;
LABEL_9:
    sub_100007928(v94, &qword_100092DE0);
    v60 = v82;
    goto LABEL_10;
  }
  v95 = v62;
  if (v37 == enum case for WidgetFamily.systemLarge(_:))
  {
    v96 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v27, v177, v63);
    v97 = v64;
    sub_100007AF4(v66, v64, type metadata accessor for CPTimelineEntry);
    v98 = (uint64_t)v21;
    *v21 = swift_getKeyPath(&unk_100072CD0);
    v99 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v21, v99, 0);
    v100 = swift_getKeyPath(&unk_100072D30);
    v101 = swift_getKeyPath(&unk_100072D58);
    v102 = (uint64_t)v159;
    *v159 = v101;
    v103 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v102, v103, 0);
    v104 = (int *)v162;
    sub_100007A2C(v98, v102 + *(int *)(v162 + 20), &qword_1000907C0);
    v105 = v102 + v104[6];
    *(_QWORD *)v105 = v100;
    *(_BYTE *)(v105 + 8) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v102 + v104[7], v27, v96);
    sub_100007AB0(v97, v102 + v104[8], type metadata accessor for CPTimelineEntry);
    v106 = v102 + v104[9];
    type metadata accessor for CGRect(0);
    v185 = 0u;
    v186 = 0u;
    State.init(wrappedValue:)(&v187, &v185, v107);
    v108 = v189;
    v109 = v188;
    *(_OWORD *)v106 = v187;
    *(_OWORD *)(v106 + 16) = v109;
    *(_QWORD *)(v106 + 32) = v108;
    v81 = type metadata accessor for CPLargeContentView;
    v110 = v160;
    sub_100007AB0(v102, v160, type metadata accessor for CPLargeContentView);
    v111 = v163;
    sub_100007AF4(v110, v163, type metadata accessor for CPLargeContentView);
    swift_storeEnumTagMultiPayload(v111, v161, 0);
    v112 = sub_100007A70(&qword_100092E18, type metadata accessor for CPLargeContentView, (uint64_t)&unk_100072B28);
    v113 = sub_100007A70(&qword_100092E20, type metadata accessor for CPExtraLargeContentView, (uint64_t)&unk_100071AB8);
    v114 = (uint64_t)v165;
    _ConditionalContent<>.init(storage:)(v111, v104, v164, v112, v113);
    v115 = v180;
    sub_100007964(v114, v180, &qword_100092E10);
    swift_storeEnumTagMultiPayload(v115, v172, 1);
    v116 = sub_10005D750();
    v117 = sub_10005D7EC();
    v118 = (uint64_t)v171;
    _ConditionalContent<>.init(storage:)(v115, v173, v174, v116, v117);
    sub_100007928(v114, &qword_100092E10);
    v119 = (uint64_t)v183;
    sub_100007964(v118, (uint64_t)v183, &qword_100092DE0);
    swift_storeEnumTagMultiPayload(v119, v181, 0);
    v120 = sub_100006454(&qword_100092270);
    v121 = sub_10005D72C();
    v122 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v119, v182, v120, v121, v122);
    sub_100007928(v118, &qword_100092DE0);
    v60 = v110;
LABEL_10:
    v61 = v81;
    return sub_10000A7C0(v60, v61);
  }
  v123 = v180;
  if (v37 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v124 = v175;
    v125 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v27, v177, v63);
    v126 = v125;
    sub_100007AF4(v66, v124, type metadata accessor for CPTimelineEntry);
    *v21 = swift_getKeyPath(&unk_100072CD0);
    v127 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v21, v127, 0);
    v128 = swift_getKeyPath(&unk_100072D30);
    v129 = swift_getKeyPath(&unk_100072D58);
    v130 = (uint64_t)v157;
    *v157 = v129;
    v131 = sub_100006454(&qword_1000907A8);
    swift_storeEnumTagMultiPayload(v130, v131, 0);
    v132 = (int *)v164;
    sub_100007A2C((uint64_t)v21, v130 + *(int *)(v164 + 20), &qword_1000907C0);
    v133 = v130 + v132[6];
    *(_QWORD *)v133 = v128;
    *(_BYTE *)(v133 + 8) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v130 + v132[7], v27, v126);
    sub_100007AB0(v124, v130 + v132[8], type metadata accessor for CPTimelineEntry);
    v134 = v130 + v132[9];
    type metadata accessor for CGRect(0);
    v185 = 0u;
    v186 = 0u;
    State.init(wrappedValue:)(&v187, &v185, v135);
    v136 = v189;
    v137 = v188;
    *(_OWORD *)v134 = v187;
    *(_OWORD *)(v134 + 16) = v137;
    *(_QWORD *)(v134 + 32) = v136;
    v81 = type metadata accessor for CPExtraLargeContentView;
    v82 = v158;
    sub_100007AB0(v130, v158, type metadata accessor for CPExtraLargeContentView);
    v138 = v163;
    sub_100007AF4(v82, v163, type metadata accessor for CPExtraLargeContentView);
    swift_storeEnumTagMultiPayload(v138, v161, 1);
    v139 = sub_100007A70(&qword_100092E18, type metadata accessor for CPLargeContentView, (uint64_t)&unk_100072B28);
    v140 = sub_100007A70(&qword_100092E20, type metadata accessor for CPExtraLargeContentView, (uint64_t)&unk_100071AB8);
    v141 = (uint64_t)v165;
    _ConditionalContent<>.init(storage:)(v138, v162, v132, v139, v140);
    sub_100007964(v141, v123, &qword_100092E10);
    swift_storeEnumTagMultiPayload(v123, v172, 1);
    v142 = sub_10005D750();
    v143 = sub_10005D7EC();
    v144 = (uint64_t)v171;
    _ConditionalContent<>.init(storage:)(v123, v173, v174, v142, v143);
    sub_100007928(v141, &qword_100092E10);
    v145 = (uint64_t)v183;
    sub_100007964(v144, (uint64_t)v183, &qword_100092DE0);
    swift_storeEnumTagMultiPayload(v145, v181, 0);
    v146 = sub_100006454(&qword_100092270);
    v147 = sub_10005D72C();
    v148 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v145, v182, v146, v147, v148);
    v94 = v144;
    goto LABEL_9;
  }
  v150 = v183;
  if (v37 == enum case for WidgetFamily.accessoryCircular(_:)
    || v37 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v37 == enum case for WidgetFamily.accessoryInline(_:))
  {
    LOBYTE(v185) = 0;
    _ConditionalContent<>.init(storage:)(&v185, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
    *v150 = v187;
    swift_storeEnumTagMultiPayload(v150, v181, 1);
    v154 = sub_100006454(&qword_100092270);
    v155 = sub_10005D72C();
    v156 = sub_10004B760();
    return _ConditionalContent<>.init(storage:)(v150, v182, v154, v155, v156);
  }
  else
  {
    LOBYTE(v185) = 1;
    _ConditionalContent<>.init(storage:)(&v185, &type metadata for EmptyView, &type metadata for EmptyView, &protocol witness table for EmptyView, &protocol witness table for EmptyView);
    *v150 = v187;
    swift_storeEnumTagMultiPayload(v150, v181, 1);
    v151 = sub_100006454(&qword_100092270);
    v152 = sub_10005D72C();
    v153 = sub_10004B760();
    _ConditionalContent<>.init(storage:)(v150, v182, v151, v152, v153);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  }
}

uint64_t sub_10005BEC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v89 = a2;
  v90 = a1;
  v74 = sub_100006454(&qword_100092DA0);
  __chkstk_darwin(v74);
  v73 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetFamily(0);
  v78 = *(_QWORD *)(v4 - 8);
  v79 = v4;
  __chkstk_darwin(v4);
  v77 = (uint64_t)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for CPMessageView(0);
  __chkstk_darwin(v88);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100006454(&qword_100092DA8);
  __chkstk_darwin(v87);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v10);
  v75 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - v13;
  v15 = type metadata accessor for RedactionReasons(0);
  v84 = *(_QWORD *)(v15 - 8);
  v85 = v15;
  __chkstk_darwin(v15);
  v83 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100006454(&qword_100092DB0);
  __chkstk_darwin(v86);
  v76 = (uint64_t)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v72 - v22;
  v24 = sub_100006454(&qword_100092DB8);
  v81 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100006454(&qword_100092DC0);
  __chkstk_darwin(v82);
  v80 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for CPEntryView(0);
  v29 = v2 + *(int *)(v28 + 20);
  if (*(_BYTE *)(v29 + v17[6]) != 1)
  {
    sub_10005A500(v90, v7);
    URL.init(string:)(0xD000000000000015, 0x8000000100073AC0);
    v40 = sub_100007A70(&qword_100092DC8, type metadata accessor for CPMessageView, (uint64_t)&unk_100072230);
    v41 = v88;
    View.widgetURL(_:)(v14, v88, v40);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
    sub_10000A7C0((uint64_t)v7, type metadata accessor for CPMessageView);
    v91 = v41;
    v92 = v40;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v38 = v9;
LABEL_7:
    v39 = v87;
LABEL_8:
    result = AnyView.init<A>(_:)(v38, v39, OpaqueTypeConformance2);
    *v89 = result;
    return result;
  }
  if (*(_BYTE *)(v29 + v17[7]) == 1)
  {
    Date.init()(v28);
    if (qword_100090728 != -1)
      swift_once(&qword_100090728, sub_10004D2B0);
    v30 = qword_100095A28;
    *(_QWORD *)&v19[v17[5]] = qword_100095A28;
    v19[v17[6]] = 1;
    v19[v17[7]] = 0;
    v19[v17[8]] = 1;
    v19[v17[9]] = 0;
    swift_bridgeObjectRetain(v30);
    sub_10005AD70(v90, (uint64_t)v19, (uint64_t)v23);
    v31 = sub_10000A7C0((uint64_t)v19, type metadata accessor for CPTimelineEntry);
    v32 = v83;
    static RedactionReasons.placeholder.getter(v31);
    v33 = sub_10005D6BC(&qword_100092DD0, &qword_100092DB0, (void (*)(void))sub_10005D72C, (void (*)(void))sub_10004B760);
    v34 = v86;
    View.redacted(reason:)(v32, v86, v33);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v32, v85);
    sub_100007928((uint64_t)v23, &qword_100092DB0);
    sub_10001272C();
    v91 = v34;
    v92 = v33;
    v35 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v36 = v80;
    View.widgetURL(_:)(v14, v24, v35);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v26, v24);
    v91 = v24;
    v92 = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v38 = v36;
    v39 = v82;
    goto LABEL_8;
  }
  v43 = v90;
  if ((*(_BYTE *)(v29 + v17[9]) & 1) == 0)
  {
    sub_10005AADC(v90, v7);
    v50 = v77;
    sub_100014E8C(v77);
    v51 = sub_100007A70(&qword_100090E50, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v52 = v79;
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v79, v51);
    v55 = v54;
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v50, v52);
    static ActivityFeedLockupVendor.makeRemoteDashboardURL(widgetId:widgetFamily:)(0xD000000000000015, 0x80000001000737B0, v53, v55);
    swift_bridgeObjectRelease(v55);
    v56 = sub_100007A70(&qword_100092DC8, type metadata accessor for CPMessageView, (uint64_t)&unk_100072230);
    v57 = v9;
    v58 = v88;
    View.widgetURL(_:)(v14, v88, v56);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
    sub_10000A7C0((uint64_t)v7, type metadata accessor for CPMessageView);
    v91 = v58;
    v92 = v56;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v38 = v57;
    goto LABEL_7;
  }
  v44 = *(_QWORD *)(v29 + v17[5]);
  v45 = v9;
  v46 = v88;
  if (!((unint64_t)v44 >> 62))
  {
    v47 = v87;
    if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_12;
LABEL_32:
    v70 = v45;
    sub_10005A834(v43, v7);
    sub_10001272C();
    v71 = sub_100007A70(&qword_100092DC8, type metadata accessor for CPMessageView, (uint64_t)&unk_100072230);
    View.widgetURL(_:)(v14, v46, v71);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
    sub_10000A7C0((uint64_t)v7, type metadata accessor for CPMessageView);
    v91 = v46;
    v92 = v71;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v38 = v70;
    v39 = v47;
    goto LABEL_8;
  }
  if (v44 < 0)
    v68 = *(_QWORD *)(v29 + v17[5]);
  else
    v68 = v44 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v29 + v17[5]));
  v69 = _CocoaArrayWrapper.endIndex.getter(v68);
  swift_bridgeObjectRelease(v44);
  v45 = v9;
  v43 = v90;
  v47 = v87;
  if (!v69)
    goto LABEL_32;
LABEL_12:
  v48 = v76;
  sub_10005AD70(v43, v29, v76);
  if (*(_BYTE *)(v29 + v17[8]) == 1)
  {
    v49 = (uint64_t)v75;
    sub_10001272C();
LABEL_27:
    v65 = sub_10005D6BC(&qword_100092DD0, &qword_100092DB0, (void (*)(void))sub_10005D72C, (void (*)(void))sub_10004B760);
    v66 = v73;
    v67 = v86;
    View.widgetURL(_:)(v49, v86, v65);
    sub_100007928(v49, &qword_100090BC8);
    sub_100007928(v48, &qword_100092DB0);
    v91 = v67;
    v92 = v65;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v91, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v38 = v66;
    v39 = v74;
    goto LABEL_8;
  }
  v49 = (uint64_t)v75;
  if ((unint64_t)v44 >> 62)
  {
    if (v44 < 0)
      v60 = v44;
    else
      v60 = v44 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v44);
    result = _CocoaArrayWrapper.endIndex.getter(v60);
    v59 = result;
  }
  else
  {
    v59 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v44);
  }
  if (!v59)
  {
    swift_bridgeObjectRelease(v44);
    v64 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v49, 1, 1, v64);
    goto LABEL_27;
  }
  if ((v44 & 0xC000000000000001) != 0)
  {
    v61 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
    goto LABEL_25;
  }
  if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v61 = *(_QWORD *)(v44 + 32);
    swift_retain(v61);
LABEL_25:
    swift_bridgeObjectRelease(v44);
    v62 = v77;
    sub_100014E8C(v77);
    sub_10004CC8C(0xD000000000000015, 0x80000001000737B0, v62, v49);
    swift_release(v61);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v62, v79);
    v63 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v49, 0, 1, v63);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005C820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a1;
  v37 = a3;
  v36 = sub_100006454(&qword_100092D38);
  __chkstk_darwin(v36);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RedactionReasons(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006454(&qword_100092D40);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100092D48);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100006454(&qword_100092D50);
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v32 - v20;
  *v15 = static Alignment.center.getter(v22);
  v15[1] = v23;
  v24 = sub_100006454(&qword_100092D58);
  sub_10005CB64(a2, v35, (_QWORD *)((char *)v15 + *(int *)(v24 + 44)));
  v25 = a2 + *(int *)(type metadata accessor for CPEntryView(0) + 20);
  v26 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v25 + *(int *)(v26 + 32)) == 1)
  {
    static RedactionReasons.placeholder.getter(v26);
    v27 = sub_1000078D8(&qword_100092D60, &qword_100092D48, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    View.redacted(reason:)(v8, v13, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v12, v9);
    swift_storeEnumTagMultiPayload(v5, v36, 0);
    v38 = v13;
    v39 = v27;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v5, v9, v13, OpaqueTypeConformance2, v27);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    sub_100007964((uint64_t)v15, (uint64_t)v5, &qword_100092D48);
    swift_storeEnumTagMultiPayload(v5, v36, 1);
    v29 = sub_1000078D8(&qword_100092D60, &qword_100092D48, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v38 = v13;
    v39 = v29;
    v30 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v5, v9, v13, v30, v29);
  }
  sub_100007A2C((uint64_t)v18, (uint64_t)v21, &qword_100092D50);
  sub_100007928((uint64_t)v15, &qword_100092D48);
  return sub_100007A2C((uint64_t)v21, v37, &qword_100092D50);
}

uint64_t sub_10005CB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t OpaqueTypeConformance2;
  unint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;

  v95 = a3;
  v94 = sub_100006454(&qword_100092D68);
  __chkstk_darwin(v94);
  v84 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v85 = (uint64_t)&v75 - v7;
  v92 = sub_100006454(&qword_100092D70);
  __chkstk_darwin(v92);
  v93 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RedactionReasons(0);
  v80 = *(_QWORD *)(v9 - 8);
  v81 = v9;
  __chkstk_darwin(v9);
  v79 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v11);
  v87 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v83 = (char *)&v75 - v14;
  v15 = type metadata accessor for GeometryProxy(0);
  v96 = *(char **)(v15 - 8);
  v97 = v15;
  __chkstk_darwin(v15);
  v86 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v82 = (char *)&v75 - v18;
  v19 = (int *)type metadata accessor for CPBackgroundView(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v76 = (uint64_t *)((char *)&v75 - v23);
  v91 = sub_100006454(&qword_100092D78);
  v78 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v75 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v77 = (char *)&v75 - v26;
  v27 = type metadata accessor for CPEntryView(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v75 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100006454(&qword_100092D80);
  __chkstk_darwin(v30);
  v90 = (uint64_t)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v89 = (char *)&v75 - v33;
  v34 = a2;
  sub_10005BEC8(a2, (uint64_t *)&v98);
  v88 = (uint64_t)v98;
  v35 = a1 + *(int *)(v27 + 20);
  v36 = *(unsigned __int8 *)(v35 + v11[6]);
  sub_100007AF4(a1, (uint64_t)v29, type metadata accessor for CPEntryView);
  if (v36 != 1)
  {
    sub_10000A7C0((uint64_t)v29, type metadata accessor for CPEntryView);
LABEL_13:
    v40 = v96;
    v39 = v97;
    v46 = v86;
    (*((void (**)(char *, uint64_t, uint64_t))v96 + 2))(v86, v34, v97);
    v47 = v87;
    sub_100007AF4(v35, v87, type metadata accessor for CPTimelineEntry);
    if (!sub_1000081B4())
    {
      v38 = 0;
      goto LABEL_21;
    }
    v43 = *(_QWORD *)(v35 + v11[5]);
    if ((unint64_t)v43 >> 62)
    {
      if (v43 < 0)
        v73 = v43;
      else
        v73 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      v38 = _CocoaArrayWrapper.endIndex.getter(v73);
      if (v38)
      {
LABEL_16:
        if ((v43 & 0xC000000000000001) != 0)
        {
          v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
        }
        else
        {
          if (!*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_32;
          }
          v38 = *(_QWORD *)(v43 + 32);
          swift_retain(v38);
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v43);
      if (v38)
        goto LABEL_16;
    }
    swift_bridgeObjectRelease(v43);
LABEL_21:
    *(_QWORD *)v21 = swift_getKeyPath(&unk_100072CD0);
    v48 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v21, v48, 0);
    (*((void (**)(char *, char *, uint64_t))v40 + 4))(&v21[v19[5]], v46, v39);
    sub_100007AB0(v47, (uint64_t)&v21[v19[6]], type metadata accessor for CPTimelineEntry);
    *(_QWORD *)&v21[v19[7]] = v38;
    v49 = sub_100007A70(&qword_100092D88, type metadata accessor for CPBackgroundView, (uint64_t)&unk_100073350);
    v50 = (uint64_t)v84;
    View.accessibilityHidden(_:)(1, v19, v49);
    sub_10000A7C0((uint64_t)v21, type metadata accessor for CPBackgroundView);
    v51 = v85;
    sub_100007A2C(v50, v85, &qword_100092D68);
    v52 = v93;
    sub_100007964(v51, v93, &qword_100092D68);
    swift_storeEnumTagMultiPayload(v52, v92, 1);
    v98 = v19;
    v99 = v49;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v54 = sub_10005D620();
    v55 = (uint64_t)v89;
    _ConditionalContent<>.init(storage:)(v52, v91, v94, OpaqueTypeConformance2, v54);
    sub_100007928(v51, &qword_100092D68);
LABEL_24:
    v69 = v90;
    sub_100007964(v55, v90, &qword_100092D80);
    v70 = v95;
    v71 = v88;
    *v95 = v88;
    v72 = sub_100006454(&qword_100092D98);
    sub_100007964(v69, (uint64_t)v70 + *(int *)(v72 + 48), &qword_100092D80);
    swift_retain(v71);
    sub_100007928(v55, &qword_100092D80);
    sub_100007928(v69, &qword_100092D80);
    return swift_release(v71);
  }
  v37 = v29[*(int *)(v27 + 20) + v11[7]];
  sub_10000A7C0((uint64_t)v29, type metadata accessor for CPEntryView);
  if ((v37 & 1) == 0)
    goto LABEL_13;
  v39 = (uint64_t)v96;
  v38 = v97;
  v40 = v82;
  v41 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v96 + 2))(v82, v34, v97);
  v21 = v83;
  Date.init()(v41);
  if (qword_100090728 != -1)
    swift_once(&qword_100090728, sub_10004D2B0);
  v42 = qword_100095A28;
  *(_QWORD *)&v21[v11[5]] = qword_100095A28;
  v21[v11[6]] = 1;
  v21[v11[7]] = 0;
  v21[v11[8]] = 1;
  v21[v11[9]] = 0;
  swift_bridgeObjectRetain(v42);
  if (!sub_1000081B4())
  {
    v44 = 0;
    goto LABEL_23;
  }
  v43 = *(_QWORD *)(v35 + v11[5]);
  if ((unint64_t)v43 >> 62)
  {
LABEL_32:
    if (v43 < 0)
      v74 = v43;
    else
      v74 = v43 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v43);
    result = _CocoaArrayWrapper.endIndex.getter(v74);
    v44 = result;
    if (!result)
      goto LABEL_11;
    goto LABEL_8;
  }
  v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v43);
  if (!v44)
  {
LABEL_11:
    swift_bridgeObjectRelease(v43);
LABEL_23:
    KeyPath = swift_getKeyPath(&unk_100072CD0);
    v57 = (uint64_t)v76;
    *v76 = KeyPath;
    v58 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v57, v58, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v57 + v19[5], v40, v38);
    v59 = sub_100007AB0((uint64_t)v21, v57 + v19[6], type metadata accessor for CPTimelineEntry);
    *(_QWORD *)(v57 + v19[7]) = v44;
    v60 = v79;
    static RedactionReasons.placeholder.getter(v59);
    v61 = sub_100007A70(&qword_100092D88, type metadata accessor for CPBackgroundView, (uint64_t)&unk_100073350);
    v62 = v75;
    View.redacted(reason:)(v60, v19, v61);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
    sub_10000A7C0(v57, type metadata accessor for CPBackgroundView);
    v63 = v78;
    v64 = v77;
    v65 = v91;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v62, v91);
    v66 = v93;
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 16))(v93, v64, v65);
    swift_storeEnumTagMultiPayload(v66, v92, 0);
    v98 = v19;
    v99 = v61;
    v67 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v68 = sub_10005D620();
    v55 = (uint64_t)v89;
    _ConditionalContent<>.init(storage:)(v66, v65, v94, v67, v68);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
    goto LABEL_24;
  }
LABEL_8:
  if ((v43 & 0xC000000000000001) != 0)
  {
    v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v44 = *(_QWORD *)(v43 + 32);
    swift_retain(v44);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005D43C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_100007AF4(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CPEntryView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10008F070, v7 + v5, v6 | 7);
  result = sub_100007AB0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for CPEntryView);
  *a2 = sub_10005D5D0;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v8;
  return result;
}

uint64_t sub_10005D4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for CPEntryView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)v6 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v9[*(int *)(v11 + 20)]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005D5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CPEntryView(0) - 8) + 80);
  return sub_10005C820(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10005D620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092D90;
  if (!qword_100092D90)
  {
    v1 = sub_100006494(&qword_100092D68);
    sub_100007A70(&qword_100092D88, type metadata accessor for CPBackgroundView, (uint64_t)&unk_100073350);
    sub_100007A70(&qword_100090988, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092D90);
  }
  return result;
}

uint64_t sub_10005D6BC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100006494(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D72C()
{
  return sub_10005D6BC(&qword_100092DD8, &qword_100092DE0, (void (*)(void))sub_10005D750, (void (*)(void))sub_10005D7EC);
}

unint64_t sub_10005D750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092DE8;
  if (!qword_100092DE8)
  {
    v1 = sub_100006494(&qword_100092DF0);
    sub_100007A70(&qword_100092DF8, type metadata accessor for CPSmallContentView, (uint64_t)&unk_100070DD8);
    sub_100007A70(&qword_100092E00, type metadata accessor for CPMediumContentView, (uint64_t)&unk_100073568);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092DE8);
  }
  return result;
}

unint64_t sub_10005D7EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092E08;
  if (!qword_100092E08)
  {
    v1 = sub_100006494(&qword_100092E10);
    sub_100007A70(&qword_100092E18, type metadata accessor for CPLargeContentView, (uint64_t)&unk_100072B28);
    sub_100007A70(&qword_100092E20, type metadata accessor for CPExtraLargeContentView, (uint64_t)&unk_100071AB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100092E08);
  }
  return result;
}

uint64_t sub_10005D89C()
{
  return sub_1000078D8(&qword_100092E48, &qword_100092E50, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_10005D8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D8D4);
}

uint64_t sub_10005D8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for GeometryProxy(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for AFTimelineEntry(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10005D970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005D97C);
}

uint64_t sub_10005D97C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for GeometryProxy(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for AFTimelineEntry(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AFSmallContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_100092EB0;
  if (!qword_100092EB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AFSmallContentView);
  return result;
}

uint64_t sub_10005DA5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100075150, 1);
}

uint64_t sub_10005DA6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = a1;
  v2 = sub_100006454(&qword_100092EF0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006454(&qword_100092EF8);
  __chkstk_darwin(v5);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100006454(&qword_100092F00);
  __chkstk_darwin(v64);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100006454(&qword_100092F08);
  __chkstk_darwin(v65);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1 + *(int *)(type metadata accessor for AFSmallContentView(0) + 20);
  sub_100014E8C((uint64_t)v15);
  v17 = sub_10000ABA8(v16, (uint64_t)v15);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *v4 = static Alignment.center.getter(v18);
  v4[1] = v19;
  v20 = sub_100006454(&qword_100092F10);
  v21 = sub_10005DE34(v1, (uint64_t)v4 + *(int *)(v20 + 44));
  v22 = static Edge.Set.leading.getter(v21);
  v23 = v22;
  v24 = static Edge.Set.trailing.getter(v22);
  v25 = Edge.Set.init(rawValue:)(0);
  v26 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v26 & v23) != v23)
    v25 = Edge.Set.init(rawValue:)(v25 | v23);
  v27 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v27 & v24) != v24)
    LOBYTE(v25) = Edge.Set.init(rawValue:)(v25 | v24);
  v28 = EdgeInsets.init(_all:)(v17);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_100007964((uint64_t)v4, (uint64_t)v7, &qword_100092EF0);
  v35 = &v7[*(int *)(v5 + 36)];
  *v35 = v25;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  v36 = sub_100007928((uint64_t)v4, &qword_100092EF0);
  v37 = static Edge.Set.bottom.getter(v36);
  v38 = Edge.Set.init(rawValue:)(0);
  v39 = v38;
  v40 = Edge.Set.init(rawValue:)(v38);
  if (Edge.Set.init(rawValue:)(v40 & v37) != v37)
    LOBYTE(v39) = Edge.Set.init(rawValue:)(v39 | v37);
  v41 = EdgeInsets.init(_all:)(13.0);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_100007964((uint64_t)v7, (uint64_t)v9, &qword_100092EF8);
  v48 = &v9[*(int *)(v64 + 36)];
  *v48 = v39;
  *((double *)v48 + 1) = v41;
  *((_QWORD *)v48 + 2) = v43;
  *((_QWORD *)v48 + 3) = v45;
  *((_QWORD *)v48 + 4) = v47;
  v48[40] = 0;
  v49 = sub_100007928((uint64_t)v7, &qword_100092EF8);
  v50 = static Edge.Set.top.getter(v49);
  v51 = Edge.Set.init(rawValue:)(0);
  v52 = v51;
  v53 = Edge.Set.init(rawValue:)(v51);
  if (Edge.Set.init(rawValue:)(v53 & v50) != v50)
    LOBYTE(v52) = Edge.Set.init(rawValue:)(v52 | v50);
  v54 = EdgeInsets.init(_all:)(v17 + 28.0);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  sub_100007964((uint64_t)v9, (uint64_t)v11, &qword_100092F00);
  v61 = &v11[*(int *)(v65 + 36)];
  *v61 = v52;
  *((double *)v61 + 1) = v54;
  *((_QWORD *)v61 + 2) = v56;
  *((_QWORD *)v61 + 3) = v58;
  *((_QWORD *)v61 + 4) = v60;
  v61[40] = 0;
  sub_100007928((uint64_t)v9, &qword_100092F00);
  return sub_10005E288((uint64_t)v11, v66);
}

uint64_t sub_10005DE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a2;
  v3 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v3);
  v45 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100006454(&qword_100091010);
  v46 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100006454(&qword_100092F18);
  v48 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v47 = (char *)&v42 - v9;
  v49 = sub_100006454(&qword_100092F20);
  __chkstk_darwin(v49);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100006454(&qword_100091000);
  v16 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v42 - v20;
  v22 = a1 + *(int *)(type metadata accessor for AFSmallContentView(0) + 24);
  v23 = *(_QWORD *)(v22 + *(int *)(type metadata accessor for AFTimelineEntry(0) + 36));
  if (*(_QWORD *)(v23 + 16))
  {
    v24 = *(_QWORD *)(v23 + 40);
    v25 = *(id *)(v23 + 32);
    v43 = v25;
    swift_bridgeObjectRetain(v24);
    sub_100014E8C((uint64_t)v15);
    v26 = (uint64_t)v45;
    static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)(v6, v45, v25, 0, v15, 0xD000000000000017, 0x8000000100073B00, v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v27 = sub_100007928(v26, &qword_100090BC8);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v27, &opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>, 1);
    v29 = v44;
    v30 = v51;
    View.unredacted()(v51, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v30);
    v32 = v47;
    v31 = v48;
    v33 = v52;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v29, v52);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v11, v32, v33);
    swift_storeEnumTagMultiPayload(v11, v49, 0);
    v54 = v30;
    v55 = OpaqueTypeConformance2;
    v34 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v35 = swift_getOpaqueTypeConformance2(v34, &opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>, 1);
    _ConditionalContent<>.init(storage:)(v11, v33, v50, v34, v35);
    swift_bridgeObjectRelease(v24);

    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  }
  else
  {
    sub_100014E8C((uint64_t)v15);
    static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)(v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v37 = v50;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v18, v50);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v11, v21, v37);
    v38 = swift_storeEnumTagMultiPayload(v11, v49, 1);
    v39 = swift_getOpaqueTypeConformance2(v38, &opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetLockup(with:index:widgetFamily:widgetID:cachedImages:)>>, 1);
    v54 = v51;
    v55 = v39;
    v40 = swift_getOpaqueTypeConformance2(&v54, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v41 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of static ActivityFeedLockupVendor.makeWidgetPlaceholderLockup(for:)>>, 1);
    _ConditionalContent<>.init(storage:)(v11, v52, v37, v40, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v37);
  }
}

uint64_t sub_10005E288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_100092F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E2D0()
{
  return sub_100021680(&qword_100092F28, &qword_100092F08, (void (*)(void))sub_10005E2FC);
}

uint64_t sub_10005E2FC()
{
  return sub_100021680(&qword_100092F30, &qword_100092F00, (void (*)(void))sub_10005E318);
}

uint64_t sub_10005E318()
{
  return sub_100021680(&qword_100092F38, &qword_100092EF8, (void (*)(void))sub_10005E334);
}

unint64_t sub_10005E334()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100092F40;
  if (!qword_100092F40)
  {
    v1 = sub_100006494(&qword_100092EF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100092F40);
  }
  return result;
}

uint64_t *sub_10005E380(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_100006904(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
  }
  return a1;
}

uint64_t sub_10005E474(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return sub_100006A4C(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));
}

uint64_t *sub_10005E4EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100006904(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  return a1;
}

uint64_t *sub_10005E5B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100006904(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_100006A4C(v17, v18);
  return a1;
}

char *sub_10005E6A0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  return a1;
}

char *sub_10005E758(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_100006A4C(v12, v13);
  return a1;
}

uint64_t sub_10005E834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E840);
}

uint64_t sub_10005E840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10005E8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E8CC);
}

uint64_t sub_10005E8CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for AFBackgroundView(uint64_t a1)
{
  return sub_10003C274(a1, qword_100092FA0, (uint64_t)&nominal type descriptor for AFBackgroundView);
}

void sub_10005E960(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_10005E9E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000751C8, 1);
}

uint64_t sub_10005E9F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;

  v109 = a1;
  v90 = sub_100006454(&qword_1000931A8);
  __chkstk_darwin(v90);
  v91 = (uint64_t *)((char *)&v90 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = sub_100006454(&qword_1000931B0);
  __chkstk_darwin(v104);
  v92 = (char *)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100006454(&qword_1000931B8);
  __chkstk_darwin(v107);
  v108 = (uint64_t *)((char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = sub_100006454(&qword_1000931C0);
  __chkstk_darwin(v101);
  v103 = (uint64_t)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100006454(&qword_1000931C8);
  __chkstk_darwin(v93);
  v94 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100006454(&qword_1000931D0);
  __chkstk_darwin(v102);
  v95 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100006454(&qword_1000931D8);
  __chkstk_darwin(v106);
  v105 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Image.ResizingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100006454(&qword_1000929E0);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100006454(&qword_1000931E0);
  __chkstk_darwin(v97);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100006454(&qword_1000931E8);
  __chkstk_darwin(v100);
  v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v99 = (uint64_t)&v90 - v19;
  v20 = type metadata accessor for WidgetFamily(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E8C((uint64_t)v23);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v23, v20);
  if (v24 == enum case for WidgetFamily.systemSmall(_:))
  {
    v25 = Image.init(_:bundle:)(0xD00000000000001ALL, 0x80000001000743E0, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
    v26 = Image.resizable(capInsets:resizingMode:)(v11, v25, 0.0, 0.0, 0.0, 0.0);
    swift_release(v25);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v110 = v26;
    View.unredacted()(&type metadata for Image, &protocol witness table for Image);
    swift_release(v26);
    v27 = v96;
    v28 = v98;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v15, v13, v98);
    v29 = v97;
    *(_QWORD *)&v15[*(int *)(v97 + 36)] = 0x3FE999999999999ALL;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
    v30 = sub_100061D34();
    View.accessibility(hidden:)(1, v29, v30);
    sub_100007928((uint64_t)v15, &qword_1000931E0);
    v31 = v99;
    sub_100007A2C((uint64_t)v17, v99, &qword_1000931E8);
    v32 = v94;
    sub_100007964(v31, v94, &qword_1000931E8);
    swift_storeEnumTagMultiPayload(v32, v93, 0);
    v33 = sub_100061CB0();
    v34 = (uint64_t)v95;
    _ConditionalContent<>.init(storage:)(v32, v100, v100, v33, v33);
    v35 = v103;
    sub_100007964(v34, v103, &qword_1000931D0);
    swift_storeEnumTagMultiPayload(v35, v101, 0);
    v36 = sub_100061C4C();
    v37 = sub_100061DF0(&qword_100093210, &qword_1000931B0, (void (*)(void))sub_100061CB0);
    v38 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)(v35, v102, v104, v36, v37);
    sub_100007928(v34, &qword_1000931D0);
    v39 = v108;
    sub_100007964(v38, (uint64_t)v108, &qword_1000931D8);
    swift_storeEnumTagMultiPayload(v39, v107, 0);
    v40 = sub_100061BC8();
    _ConditionalContent<>.init(storage:)(v39, v106, &type metadata for Image, v40, &protocol witness table for Image);
    v41 = v38;
LABEL_13:
    sub_100007928(v41, &qword_1000931D8);
    return sub_100007928(v31, &qword_1000931E8);
  }
  v42 = v24;
  if (v24 == enum case for WidgetFamily.systemMedium(_:))
  {
    v43 = Image.init(_:bundle:)(0xD00000000000001ELL, 0x80000001000743C0, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
    v44 = Image.resizable(capInsets:resizingMode:)(v11, v43, 0.0, 0.0, 0.0, 0.0);
    swift_release(v43);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v110 = v44;
    View.unredacted()(&type metadata for Image, &protocol witness table for Image);
    swift_release(v44);
    v45 = v96;
    v46 = v98;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v15, v13, v98);
    v47 = v97;
    *(_QWORD *)&v15[*(int *)(v97 + 36)] = 0x3FE999999999999ALL;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
    v48 = sub_100061D34();
    View.accessibility(hidden:)(1, v47, v48);
    sub_100007928((uint64_t)v15, &qword_1000931E0);
    v31 = v99;
    sub_100007A2C((uint64_t)v17, v99, &qword_1000931E8);
    v49 = v94;
    sub_100007964(v31, v94, &qword_1000931E8);
    swift_storeEnumTagMultiPayload(v49, v93, 1);
    v50 = sub_100061CB0();
    v51 = (uint64_t)v95;
    _ConditionalContent<>.init(storage:)(v49, v100, v100, v50, v50);
    v52 = v103;
    sub_100007964(v51, v103, &qword_1000931D0);
    swift_storeEnumTagMultiPayload(v52, v101, 0);
    v53 = sub_100061C4C();
    v54 = sub_100061DF0(&qword_100093210, &qword_1000931B0, (void (*)(void))sub_100061CB0);
    v55 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)(v52, v102, v104, v53, v54);
    sub_100007928(v51, &qword_1000931D0);
    v56 = v108;
    sub_100007964(v55, (uint64_t)v108, &qword_1000931D8);
    swift_storeEnumTagMultiPayload(v56, v107, 0);
    v57 = sub_100061BC8();
    v58 = v56;
    v59 = v106;
LABEL_12:
    _ConditionalContent<>.init(storage:)(v58, v59, &type metadata for Image, v57, &protocol witness table for Image);
    v41 = v55;
    goto LABEL_13;
  }
  if (v24 == enum case for WidgetFamily.systemLarge(_:) || v24 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v67 = Image.init(_:bundle:)(0xD00000000000001DLL, 0x80000001000743A0, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
    v68 = Image.resizable(capInsets:resizingMode:)(v11, v67, 0.0, 0.0, 0.0, 0.0);
    swift_release(v67);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v110 = v68;
    View.unredacted()(&type metadata for Image, &protocol witness table for Image);
    swift_release(v68);
    v69 = v96;
    v70 = v98;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v15, v13, v98);
    v71 = v97;
    *(_QWORD *)&v15[*(int *)(v97 + 36)] = 0x3FE999999999999ALL;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v13, v70);
    v72 = sub_100061D34();
    View.accessibility(hidden:)(1, v71, v72);
    sub_100007928((uint64_t)v15, &qword_1000931E0);
    v31 = v99;
    sub_100007A2C((uint64_t)v17, v99, &qword_1000931E8);
    v73 = v91;
    sub_100007964(v31, (uint64_t)v91, &qword_1000931E8);
    swift_storeEnumTagMultiPayload(v73, v90, 0);
    v74 = sub_100061CB0();
    v75 = (uint64_t)v92;
    _ConditionalContent<>.init(storage:)(v73, v100, &type metadata for Image, v74, &protocol witness table for Image);
    v76 = v103;
    sub_100007964(v75, v103, &qword_1000931B0);
    swift_storeEnumTagMultiPayload(v76, v101, 1);
    v77 = sub_100061C4C();
    v78 = sub_100061DF0(&qword_100093210, &qword_1000931B0, (void (*)(void))sub_100061CB0);
    v55 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)(v76, v102, v104, v77, v78);
    sub_100007928(v75, &qword_1000931B0);
    v79 = v108;
    sub_100007964(v55, (uint64_t)v108, &qword_1000931D8);
    swift_storeEnumTagMultiPayload(v79, v107, 0);
    v57 = sub_100061BC8();
    v58 = v79;
    v59 = v106;
    goto LABEL_12;
  }
  v60 = enum case for WidgetFamily.accessoryCircular(_:);
  v61 = Image.init(_:bundle:)(0, 0xE000000000000000, 0);
  v62 = v61;
  if (v42 == v60
    || v42 == enum case for WidgetFamily.accessoryRectangular(_:)
    || v42 == enum case for WidgetFamily.accessoryInline(_:))
  {
    v80 = v90;
    v81 = v91;
    *v91 = v61;
    swift_storeEnumTagMultiPayload(v81, v80, 1);
    v82 = sub_100061CB0();
    swift_retain(v62);
    v83 = (uint64_t)v92;
    _ConditionalContent<>.init(storage:)(v81, v100, &type metadata for Image, v82, &protocol witness table for Image);
    v84 = v103;
    sub_100007964(v83, v103, &qword_1000931B0);
    swift_storeEnumTagMultiPayload(v84, v101, 1);
    v85 = sub_100061C4C();
    v86 = sub_100061DF0(&qword_100093210, &qword_1000931B0, (void (*)(void))sub_100061CB0);
    v87 = (uint64_t)v105;
    _ConditionalContent<>.init(storage:)(v84, v102, v104, v85, v86);
    sub_100007928(v83, &qword_1000931B0);
    v88 = v108;
    sub_100007964(v87, (uint64_t)v108, &qword_1000931D8);
    swift_storeEnumTagMultiPayload(v88, v107, 0);
    v89 = sub_100061BC8();
    _ConditionalContent<>.init(storage:)(v88, v106, &type metadata for Image, v89, &protocol witness table for Image);
    sub_100007928(v87, &qword_1000931D8);
    return swift_release(v62);
  }
  else
  {
    v63 = v107;
    v64 = v108;
    *v108 = v61;
    swift_storeEnumTagMultiPayload(v64, v63, 1);
    v65 = sub_100061BC8();
    _ConditionalContent<>.init(storage:)(v64, v106, &type metadata for Image, v65, &protocol witness table for Image);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
}

uint64_t sub_10005F678@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v1 = sub_100006454(&qword_100092FF0);
  __chkstk_darwin(v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100092FF8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - v9;
  v11 = sub_100006454(&qword_100093000);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - v15;
  v17 = sub_10005F8C4((uint64_t)&v25 - v15);
  *(_QWORD *)v3 = static HorizontalAlignment.center.getter(v17);
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  v18 = sub_100006454(&qword_100093008);
  sub_10005FDC4((uint64_t)&v3[*(int *)(v18 + 44)]);
  v19 = sub_1000078D8(&qword_100093010, &qword_100092FF0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.widgetAccentable(_:)(1, v1, v19);
  sub_100007928((uint64_t)v3, &qword_100092FF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
  sub_100007964((uint64_t)v16, (uint64_t)v13, &qword_100093000);
  v20 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v20(v7, v10, v4);
  v21 = v26;
  sub_100007964((uint64_t)v13, v26, &qword_100093000);
  v22 = sub_100006454(&qword_100093018);
  v20((char *)(v21 + *(int *)(v22 + 48)), v7, v4);
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v10, v4);
  sub_100007928((uint64_t)v16, &qword_100093000);
  v23(v7, v4);
  return sub_100007928((uint64_t)v13, &qword_100093000);
}

uint64_t sub_10005F8C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  v2 = v1;
  v58 = a1;
  v3 = sub_100006454(&qword_100093000);
  __chkstk_darwin(v3);
  v57 = (uint64_t *)((char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for AFBackgroundImage(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v54 = (uint64_t)&v53 - v9;
  v10 = sub_100006454(&qword_1000930F0);
  __chkstk_darwin(v10);
  v56 = (uint64_t)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v55 = (uint64_t *)((char *)&v53 - v13);
  v14 = type metadata accessor for WidgetRenderingMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v53 - v19;
  v21 = type metadata accessor for GKFeatureFlags(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, __n128))(v22 + 104))(v25, enum case for GKFeatureFlags.GameOverlayUI(_:), v21, v23);
  v27 = GKFeatureFlags.isEnabled.getter(v26);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  if ((v27 & 1) != 0)
  {
    v28 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v29 = objc_msgSend(v28, "userInterfaceIdiom");

    if (!v29)
      goto LABEL_5;
  }
  v30 = v2 + *(int *)(type metadata accessor for AFBackgroundView(0) + 20);
  v31 = *(_QWORD *)v30;
  v32 = *(_BYTE *)(v30 + 8);
  sub_100006904(*(_QWORD *)v30, v32);
  v33 = sub_100014EBC(v31, v32);
  sub_100006A4C(v31, v32);
  if ((v33 & 1) == 0)
    goto LABEL_5;
  v34 = sub_100015074((uint64_t)v20);
  static WidgetRenderingMode.accented.getter(v34);
  v35 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v17, v14, v35);
  v37 = *(void (**)(char *, uint64_t))(v15 + 8);
  v37(v17, v14);
  v37(v20, v14);
  if ((v36 & 1) == 0)
  {
    if (qword_1000906C8 != -1)
      swift_once(&qword_1000906C8, sub_10000AA98);
    v40 = qword_1000959A0;
    swift_retain(qword_1000959A0);
    v42 = static HorizontalAlignment.center.getter(v41);
    v43 = (uint64_t)v55;
    *v55 = v42;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 1;
    v44 = v43 + *(int *)(sub_100006454(&qword_100093100) + 44);
    *v7 = swift_getKeyPath(&unk_100072FC0);
    v45 = sub_100006454(&qword_1000907B0);
    swift_storeEnumTagMultiPayload(v7, v45, 0);
    v46 = v54;
    sub_100007AB0((uint64_t)v7, v54, type metadata accessor for AFBackgroundImage);
    sub_100007AF4(v46, (uint64_t)v7, type metadata accessor for AFBackgroundImage);
    *(_QWORD *)v44 = 0;
    *(_BYTE *)(v44 + 8) = 0;
    v47 = sub_100006454(&qword_100093108);
    sub_100007AF4((uint64_t)v7, v44 + *(int *)(v47 + 48), type metadata accessor for AFBackgroundImage);
    sub_10000A7C0(v46, type metadata accessor for AFBackgroundImage);
    sub_10000A7C0((uint64_t)v7, type metadata accessor for AFBackgroundImage);
    if (qword_1000906D0 != -1)
      swift_once(&qword_1000906D0, sub_10000AAD0);
    v48 = qword_1000959A8;
    v49 = v56;
    sub_100007964(v43, v56, &qword_1000930F0);
    v50 = (uint64_t)v57;
    *v57 = v40;
    v51 = sub_100006454(&qword_100093110);
    sub_100007964(v49, v50 + *(int *)(v51 + 48), &qword_1000930F0);
    *(_QWORD *)(v50 + *(int *)(v51 + 64)) = v48;
    swift_retain(v40);
    swift_retain_n(v48, 2);
    sub_100007928(v43, &qword_1000930F0);
    swift_release(v48);
    sub_100007928(v49, &qword_1000930F0);
    swift_release(v40);
    v52 = sub_100006454(&qword_1000930F8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
    return sub_100007A2C(v50, v58, &qword_100093000);
  }
  else
  {
LABEL_5:
    v38 = sub_100006454(&qword_1000930F8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v58, 1, 1, v38);
  }
}

uint64_t sub_10005FDC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;

  v2 = sub_100006454(&qword_100093020);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100093028);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - v9;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v29 - v13;
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v4 + 1) = 0x4020000000000000;
  v4[16] = 0;
  v15 = sub_100006454(&qword_100093030);
  v16 = sub_100060028((uint64_t)&v4[*(int *)(v15 + 44)]);
  v17 = static Edge.Set.top.getter(v16);
  v18 = v17;
  v19 = static Edge.Set.trailing.getter(v17);
  v20 = v19;
  v21 = static Edge.Set.leading.getter(v19);
  v22 = Edge.Set.init(rawValue:)(0);
  v23 = Edge.Set.init(rawValue:)(v22);
  if (Edge.Set.init(rawValue:)(v23 & v18) != v18)
    v22 = Edge.Set.init(rawValue:)(v22 | v18);
  v24 = Edge.Set.init(rawValue:)(v22);
  if (Edge.Set.init(rawValue:)(v24 & v20) != v20)
    v22 = Edge.Set.init(rawValue:)(v22 | v20);
  v25 = Edge.Set.init(rawValue:)(v22);
  if (Edge.Set.init(rawValue:)(v25 & v21) != v21)
    LOBYTE(v22) = Edge.Set.init(rawValue:)(v22 | v21);
  sub_100007964((uint64_t)v4, (uint64_t)v10, &qword_100093020);
  v26 = &v10[*(int *)(v5 + 36)];
  *v26 = v22;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  v26[40] = 1;
  sub_100007928((uint64_t)v4, &qword_100093020);
  sub_100007A2C((uint64_t)v10, (uint64_t)v14, &qword_100093028);
  sub_100007964((uint64_t)v14, (uint64_t)v7, &qword_100093028);
  sub_100007964((uint64_t)v7, a1, &qword_100093028);
  v27 = a1 + *(int *)(sub_100006454(&qword_100093038) + 48);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 0;
  sub_100007928((uint64_t)v14, &qword_100093028);
  return sub_100007928((uint64_t)v7, &qword_100093028);
}

uint64_t sub_100060028@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];

  v49 = a1;
  v1 = type metadata accessor for GameCenterLogo(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v48 = (uint64_t)&v44 - v5;
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100093040);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100093048);
  v14 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  v47 = v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006454(&qword_100093050);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v45 = (uint64_t)&v44 - v22;
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v21);
  *((_QWORD *)v12 + 1) = 0x4010000000000000;
  v12[16] = 0;
  v23 = sub_100006454(&qword_100093058);
  v24 = sub_100060410(&v12[*(int *)(v23 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v24);
  v25 = sub_1000078D8(&qword_100093060, &qword_100093040, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v9, v10, v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_100007928((uint64_t)v12, &qword_100093040);
  v26 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x8000000100073E90);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v50[0] = v10;
  v50[1] = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v35 = v46;
  View.accessibilityLabel(_:)(v27, v29, v33, v31, v46, OpaqueTypeConformance2);
  sub_100007918(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v35);
  v36 = v45;
  sub_100007A2C((uint64_t)v19, v45, &qword_100093050);
  *v3 = swift_getKeyPath(&unk_100072EA0);
  v37 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v3, v37, 0);
  v38 = v48;
  sub_100007AB0((uint64_t)v3, v48, type metadata accessor for GameCenterLogo);
  sub_100007964(v36, (uint64_t)v19, &qword_100093050);
  v39 = v38;
  sub_100007AF4(v38, (uint64_t)v3, type metadata accessor for GameCenterLogo);
  v40 = v49;
  sub_100007964((uint64_t)v19, v49, &qword_100093050);
  v41 = sub_100006454(&qword_100093068);
  v42 = v40 + *(int *)(v41 + 48);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 0;
  sub_100007AF4((uint64_t)v3, v40 + *(int *)(v41 + 64), type metadata accessor for GameCenterLogo);
  sub_10000A7C0(v39, type metadata accessor for GameCenterLogo);
  sub_100007928(v36, &qword_100093050);
  sub_10000A7C0((uint64_t)v3, type metadata accessor for GameCenterLogo);
  return sub_100007928((uint64_t)v19, &qword_100093050);
}

uint64_t sub_100060410@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  double v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;
  uint64_t v161;
  uint64_t v162;

  v155 = a1;
  v123 = sub_100006454(&qword_1000924A8);
  __chkstk_darwin(v123);
  v127 = (uint64_t *)((char *)&v122 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = type metadata accessor for Image.Scale(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (char *)&v122 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100006454(&qword_100093070);
  __chkstk_darwin(v122);
  v128 = (char *)&v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006454(&qword_100093078);
  __chkstk_darwin(v131);
  v130 = (uint64_t)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100006454(&qword_100093080);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v133 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100006454(&qword_100093088);
  __chkstk_darwin(v134);
  v132 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100093090);
  v152 = *(_QWORD *)(v7 - 8);
  v153 = v7;
  __chkstk_darwin(v7);
  v129 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GKFeatureFlags(0);
  v149 = *(_QWORD *)(v9 - 8);
  v150 = v9;
  __chkstk_darwin(v9);
  v148 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006454(&qword_100093098);
  __chkstk_darwin(v11);
  v154 = (uint64_t)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v151 = (char *)&v122 - v15;
  v147 = type metadata accessor for TypesettingLanguageAwareLineHeightRatio(0, v14);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100006454(&qword_1000930A0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v139 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100006454(&qword_1000930A8);
  __chkstk_darwin(v141);
  v140 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100006454(&qword_1000930B0);
  v144 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v137 = (char *)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v156 = (char *)&v122 - v21;
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x8000000100073E90);
  v23 = Text.init(_:tableName:bundle:comment:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = static Font.Weight.semibold.getter(v23);
  v31 = Text.fontWeight(_:)(*(_QWORD *)&v30, 0, v23, v25, v29, v27);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  sub_100007918(v23, v25, v29);
  v38 = swift_bridgeObjectRelease(v27);
  v39 = static Font.subheadline.getter(v38);
  v40 = Text.font(_:)(v39, v31, v33, v37, v35);
  v42 = v41;
  LOBYTE(v25) = v43;
  v45 = v44;
  swift_release(v39);
  LOBYTE(v39) = v25 & 1;
  v46 = v37;
  v47 = v137;
  sub_100007918(v31, v33, v46);
  v48 = swift_bridgeObjectRelease(v35);
  v49 = static Color.primary.getter(v48);
  v50 = Text.foregroundColor(_:)(v49, v40, v42, v25 & 1, v45);
  v52 = v51;
  LOBYTE(v31) = v53;
  v55 = v54;
  swift_release(v49);
  LOBYTE(v49) = v31 & 1;
  sub_100007918(v40, v42, v39);
  swift_bridgeObjectRelease(v45);
  KeyPath = swift_getKeyPath(&unk_100072ED0);
  v57 = swift_getKeyPath(&unk_100072F00);
  *(_QWORD *)&v157 = v50;
  *((_QWORD *)&v157 + 1) = v52;
  LOBYTE(v158) = v31 & 1;
  *((_QWORD *)&v158 + 1) = v55;
  *(_QWORD *)&v159 = KeyPath;
  *((_QWORD *)&v159 + 1) = 1;
  v160 = 0;
  v161 = v57;
  v162 = 0x3F847AE147AE147BLL;
  v58 = sub_100006454(&qword_1000930B8);
  v59 = sub_1000611D4();
  v60 = v139;
  View.unredacted()(v58, v59);
  v61 = v50;
  v62 = v138;
  sub_100007918(v61, v52, v49);
  swift_release(v57);
  swift_release(KeyPath);
  v63 = swift_bridgeObjectRelease(v55);
  v64 = static Alignment.center.getter(v63);
  _FrameLayout.init(width:height:alignment:)(&v157, 0, 1, 0x4034000000000000, 0, v64, v65);
  v66 = v142;
  v67 = v140;
  v68 = v143;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v140, v60, v143);
  v69 = v141;
  v70 = &v67[*(int *)(v141 + 36)];
  v71 = (uint64_t)v67;
  v72 = v158;
  *(_OWORD *)v70 = v157;
  *((_OWORD *)v70 + 1) = v72;
  *((_OWORD *)v70 + 2) = v159;
  v73 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v60, v68);
  v74 = v145;
  static TypesettingLanguageAwareLineHeightRatio.legacy.getter(v73);
  v75 = sub_100061258();
  View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(v74, 1, v69, v75);
  (*(void (**)(char *, uint64_t))(v146 + 8))(v74, v147);
  sub_100007928(v71, &qword_1000930A8);
  v76 = v144;
  (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v156, v47, v62);
  v78 = v148;
  v77 = v149;
  v79 = v150;
  v80 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v149 + 104))(v148, enum case for GKFeatureFlags.GameOverlayUI(_:), v150);
  LOBYTE(v74) = GKFeatureFlags.isEnabled.getter(v80);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  if ((v74 & 1) != 0
    && (v81 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice"),
        v82 = objc_msgSend(v81, "userInterfaceIdiom"),
        v81,
        !v82))
  {
    v114 = 1;
    v110 = v152;
    v113 = v153;
    v111 = (uint64_t)v151;
  }
  else
  {
    v83 = Image.init(systemName:)(0x2E6E6F7276656863, 0xED00007468676972);
    v84 = v125;
    v85 = v124;
    v86 = v126;
    (*(void (**)(char *, _QWORD, uint64_t))(v125 + 104))(v124, enum case for Image.Scale.small(_:), v126);
    v87 = swift_getKeyPath(&unk_100072F30);
    v88 = v127;
    (*(void (**)(char *, char *, uint64_t))(v84 + 16))((char *)v127 + *(int *)(v123 + 28), v85, v86);
    *v88 = v87;
    v89 = (uint64_t)v128;
    sub_100007964((uint64_t)v88, (uint64_t)&v128[*(int *)(v122 + 36)], &qword_1000924A8);
    *(_QWORD *)v89 = v83;
    *(_BYTE *)(v89 + 8) = 1;
    swift_retain(v83);
    sub_100007928((uint64_t)v88, &qword_1000924A8);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
    v90 = swift_release(v83);
    v91 = static Color.secondary.getter(v90);
    v92 = swift_getKeyPath(&unk_100072F60);
    v93 = v130;
    sub_100007964(v89, v130, &qword_100093070);
    v94 = v131;
    v95 = (uint64_t *)(v93 + *(int *)(v131 + 36));
    *v95 = v92;
    v95[1] = v91;
    v96 = sub_100007928(v89, &qword_100093070);
    v97 = static Font.Weight.semibold.getter(v96);
    v98 = sub_10006144C();
    v99 = v133;
    View.fontWeight(_:)(*(_QWORD *)&v97, 0, v94, v98);
    v100 = sub_100007928(v93, &qword_100093078);
    v101 = static Font.subheadline.getter(v100);
    v102 = swift_getKeyPath(&unk_100072F90);
    v103 = v135;
    v104 = (uint64_t)v132;
    v105 = v136;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v132, v99, v136);
    v106 = v134;
    v107 = (uint64_t *)(v104 + *(int *)(v134 + 36));
    *v107 = v102;
    v107[1] = v101;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v99, v105);
    v108 = sub_1000615A4();
    v109 = v129;
    View.unredacted()(v106, v108);
    sub_100007928(v104, &qword_100093088);
    v111 = (uint64_t)v151;
    v110 = v152;
    v112 = v109;
    v113 = v153;
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v151, v112, v153);
    v114 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v111, v114, 1, v113);
  v115 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v116 = v156;
  v115(v47, v156, v62);
  v117 = v154;
  sub_100007964(v111, v154, &qword_100093098);
  v118 = v155;
  v115(v155, v47, v62);
  v119 = sub_100006454(&qword_1000930E8);
  sub_100007964(v117, (uint64_t)&v118[*(int *)(v119 + 48)], &qword_100093098);
  sub_100007928(v111, &qword_100093098);
  v120 = *(void (**)(char *, uint64_t))(v76 + 8);
  v120(v116, v62);
  sub_100007928(v117, &qword_100093098);
  return ((uint64_t (*)(char *, uint64_t))v120)(v47, v62);
}

uint64_t sub_100060EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v0 = type metadata accessor for ContainerBackgroundPlacement(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100092FD8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = static Alignment.center.getter(v7);
  v6[1] = v8;
  v9 = sub_100006454(&qword_100092FE0);
  v10 = sub_10005F678((uint64_t)v6 + *(int *)(v9 + 44));
  v11 = static ContainerBackgroundPlacement.widget.getter(v10);
  v12 = static Alignment.center.getter(v11);
  v14 = v13;
  v15 = sub_1000078D8(&qword_100092FE8, &qword_100092FD8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.containerBackground<A>(for:alignment:content:)(v3, v12, v14, sub_100005EF8, 0, v4, &type metadata for Color, v15, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_100007928((uint64_t)v6, &qword_100092FD8);
}

uint64_t sub_100061034@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10006105C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100061084@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000610B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000610E4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100061110(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_10006113C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_100061164(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10006118C(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_1000611B0(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

unint64_t sub_1000611D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000930C0;
  if (!qword_1000930C0)
  {
    v1 = sub_100006494(&qword_1000930B8);
    sub_10004B934();
    sub_1000078D8(&qword_1000923F0, &qword_1000923F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000930C0);
  }
  return result;
}

unint64_t sub_100061258()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000930C8;
  if (!qword_1000930C8)
  {
    v1 = sub_100006494(&qword_1000930A8);
    v2[0] = sub_100006494(&qword_1000930B8);
    v2[1] = sub_1000611D4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000930C8);
  }
  return result;
}

uint64_t sub_1000612EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100061314(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10006133C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10006135C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10006137C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_1000613FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100061424(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_10006144C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000930D0;
  if (!qword_1000930D0)
  {
    v1 = sub_100006494(&qword_100093078);
    sub_1000614D0();
    sub_1000078D8(&qword_1000913F0, &qword_1000913F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000930D0);
  }
  return result;
}

unint64_t sub_1000614D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000930D8;
  if (!qword_1000930D8)
  {
    v1 = sub_100006494(&qword_100093070);
    sub_10004BF8C();
    sub_1000078D8(&qword_1000924F0, &qword_1000924A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000930D8);
  }
  return result;
}

uint64_t sub_100061554@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10006157C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_1000615A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000930E0;
  if (!qword_1000930E0)
  {
    v1 = sub_100006494(&qword_100093088);
    v2[0] = sub_100006494(&qword_100093078);
    v2[1] = sub_10006144C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_1000078D8(&qword_100091B50, &qword_100091B58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000930E0);
  }
  return result;
}

uint64_t type metadata accessor for AFBackgroundImage(uint64_t a1)
{
  return sub_10003C274(a1, qword_100093170, (uint64_t)&nominal type descriptor for AFBackgroundImage);
}

uint64_t *sub_100061668(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100006454(&qword_1000907B0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100061730(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_100061794(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_100061830(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v4 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_1000618E4(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_10006197C(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v4 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100061A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061A38);
}

uint64_t sub_100061A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_1000907C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100061A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100061A84);
}

uint64_t sub_100061A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006454(&qword_1000907C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_100061AC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t sub_100061B40()
{
  _QWORD v1[4];

  v1[0] = sub_100006494(&qword_100092FD8);
  v1[1] = &type metadata for Color;
  v1[2] = sub_1000078D8(&qword_100092FE8, &qword_100092FD8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = &protocol witness table for Color;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_100061BB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000751F0, 1);
}

unint64_t sub_100061BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000931F0;
  if (!qword_1000931F0)
  {
    v1 = sub_100006494(&qword_1000931D8);
    sub_100061C4C();
    sub_100061DF0(&qword_100093210, &qword_1000931B0, (void (*)(void))sub_100061CB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000931F0);
  }
  return result;
}

unint64_t sub_100061C4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000931F8;
  if (!qword_1000931F8)
  {
    v1 = sub_100006494(&qword_1000931D0);
    sub_100061CB0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000931F8);
  }
  return result;
}

unint64_t sub_100061CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093200;
  if (!qword_100093200)
  {
    v1 = sub_100006494(&qword_1000931E8);
    sub_100061D34();
    sub_100007A70(&qword_100090988, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093200);
  }
  return result;
}

unint64_t sub_100061D34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100093208;
  if (!qword_100093208)
  {
    v1 = sub_100006494(&qword_1000931E0);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093208);
  }
  return result;
}

uint64_t sub_100061DC4()
{
  return sub_100061DF0(&qword_100093218, &qword_100093220, (void (*)(void))sub_100061BC8);
}

uint64_t sub_100061DF0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006494(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_100061E60(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (_QWORD *)((char *)a1 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v31 = *v25;
      *v24 = *v25;
      swift_retain(v31);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = a3[8];
    v37 = a3[9];
    v38 = (_QWORD *)((char *)a1 + v36);
    v39 = (_QWORD *)((char *)a2 + v36);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = (_QWORD *)((char *)a1 + v37);
    v42 = (_QWORD *)((char *)a2 + v37);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v43);
  }
  return a1;
}

uint64_t sub_100062094(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)a1 + a2[6]);
  v10 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (char *)a1 + a2[7];
  v13 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));
}

_QWORD *sub_1000621E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = v22;
    v27 = v24;
    v28 = 1;
  }
  else
  {
    v29 = *v23;
    *v22 = *v23;
    swift_retain(v29);
    v26 = v22;
    v27 = v24;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  v34 = a3[8];
  v35 = a3[9];
  v36 = (_QWORD *)((char *)a1 + v34);
  v37 = (_QWORD *)((char *)a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = (_QWORD *)((char *)a1 + v35);
  v40 = (_QWORD *)((char *)a2 + v35);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  return a1;
}

_QWORD *sub_1000623EC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100007928((uint64_t)a1 + v12, &qword_1000907B0);
    v15 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = a3[6];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    sub_100007928((uint64_t)a1 + v21, &qword_1000908D0);
    v24 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  v34 = a3[8];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[9];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

char *sub_100062654(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

char *sub_100062834(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907A8);
    v6 = sub_100006454(&qword_1000907A8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100007928((uint64_t)&a1[v8], &qword_1000907B0);
    v11 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v13 = a3[6];
    v14 = &a1[v13];
    v15 = &a2[v13];
    sub_100007928((uint64_t)&a1[v13], &qword_1000908D0);
    v16 = sub_100006454(&qword_1000908D0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v27 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[9];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v33 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease(v33);
  a1[a3[10]] = a2[a3[10]];
  return a1;
}

uint64_t sub_100062A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062A7C);
}

uint64_t sub_100062A7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_100006454(&qword_1000908C0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_100062B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062B88);
}

uint64_t sub_100062B88(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_100006454(&qword_1000908C0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MessageView(uint64_t a1)
{
  uint64_t result;

  result = qword_100093280;
  if (!qword_100093280)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageView);
  return result;
}

void sub_100062CC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000764C(319, (unint64_t *)&unk_1000912E0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for GeometryProxy(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_1000730B8;
          v10[5] = &unk_1000730D0;
          v10[6] = &unk_1000730E8;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100062DC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007525C, 1);
}

double sub_100062DD8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100063010(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000911B8, &qword_1000911C0).n128_u64[0];
  return result;
}

__n128 sub_100062E30@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v26;
  double v27;
  double v28;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __n128 result;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  _OWORD v40[7];

  v16 = a12;
  v17 = a10;
  v18 = a2 & 1;
  v19 = a1;
  if ((_DWORD)v18)
    v19 = -INFINITY;
  v20 = a4 & 1;
  v21 = a3;
  if ((a4 & 1) != 0)
    v21 = v19;
  v22 = a6 & 1;
  v23 = a8 & 1;
  v24 = a5;
  if ((a6 & 1) != 0)
    v24 = v21;
  if (v19 > v21 || v21 > v24)
    goto LABEL_22;
  v26 = a7;
  if ((a8 & 1) != 0)
    v26 = -INFINITY;
  v27 = a10;
  if ((a11 & 1) != 0)
    v27 = v26;
  v28 = a12;
  if ((a13 & 1) != 0)
    v28 = v27;
  if (v26 > v27 || v27 > v28)
  {
LABEL_22:
    v39 = a7;
    v38 = a5;
    v36 = a1;
    v37 = a3;
    v35 = v18;
    v30 = static os_log_type_t.fault.getter();
    v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v18 = v35;
    a1 = v36;
    a3 = v37;
    v17 = a10;
    a5 = v38;
    v16 = a12;
    a7 = v39;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v40, *(_QWORD *)&a1, v18, *(_QWORD *)&a3, v20, *(_QWORD *)&a5, v22, *(_QWORD *)&a7, v23, *(_QWORD *)&v17, a11 & 1, *(_QWORD *)&v16, a13 & 1, a14, a15);
  v32 = v40[5];
  *(_OWORD *)(a9 + 64) = v40[4];
  *(_OWORD *)(a9 + 80) = v32;
  *(_OWORD *)(a9 + 96) = v40[6];
  v33 = v40[1];
  *(_OWORD *)a9 = v40[0];
  *(_OWORD *)(a9 + 16) = v33;
  result = (__n128)v40[3];
  *(_OWORD *)(a9 + 32) = v40[2];
  *(__n128 *)(a9 + 48) = result;
  return result;
}

double sub_100062FB8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100063010(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100090900, &qword_1000919D8).n128_u64[0];
  return result;
}

__n128 sub_100063010@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100007964(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100006454(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

uint64_t sub_1000631DC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 120) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 136) = v45[4];
  *(_OWORD *)(a9 + 152) = v37;
  *(_OWORD *)(a9 + 168) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 72) = v45[0];
  *(_OWORD *)(a9 + 88) = v38;
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(v15 + 64);
  *(_OWORD *)(a9 + 104) = v36;
  return sub_1000427B8(v15);
}

double sub_100063394@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100063010(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000918E8, &qword_100092BE0).n128_u64[0];
  return result;
}

double sub_1000633EC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100063010(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100093488, &qword_100093490).n128_u64[0];
  return result;
}

uint64_t sub_100063444()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100063464(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

uint64_t sub_1000634E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  _BYTE v50[7];
  char v51;
  _BYTE v52[7];
  char v53;
  _BYTE v54[7];
  char v55;
  _BYTE v56[7];
  char v57;

  v34 = a3;
  v33 = a1;
  v9 = type metadata accessor for Image.ResizingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(&v39, *(_QWORD *)&a5, 0, *(_QWORD *)&a5, 0, v14, v15);
  v16 = v40;
  v37 = v41;
  v38 = v39;
  v17 = v42;
  v36 = v43;
  v35 = v44;
  KeyPath = swift_getKeyPath(&unk_100073180);
  swift_retain(a3);
  swift_bridgeObjectRetain(a2);
  v19 = Image.init(_:bundle:)(v33, a2, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for Image.ResizingMode.stretch(_:), v9);
  v20 = Image.resizable(capInsets:resizingMode:)(v13, v19, 0.0, 0.0, 0.0, 0.0);
  swift_release(v19);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v22 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(&v45, *(_QWORD *)&a5, 0, *(_QWORD *)&a5, 0, v22, v23);
  v24 = v45;
  v25 = v46;
  v26 = v47;
  v57 = v16;
  v55 = v17;
  v53 = v46;
  v51 = v48;
  *(_DWORD *)(a4 + 9) = *(_DWORD *)v56;
  *(_DWORD *)(a4 + 12) = *(_DWORD *)&v56[3];
  *(_DWORD *)(a4 + 25) = *(_DWORD *)v54;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)&v54[3];
  v27 = *(_DWORD *)v52;
  *(_DWORD *)(a4 + 84) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a4 + 81) = v27;
  LOBYTE(v27) = v51;
  v28 = *(_DWORD *)v50;
  *(_DWORD *)(a4 + 100) = *(_DWORD *)&v50[3];
  *(_DWORD *)(a4 + 97) = v28;
  *(_QWORD *)a4 = v38;
  *(_BYTE *)(a4 + 8) = v16;
  *(_QWORD *)(a4 + 16) = v37;
  *(_BYTE *)(a4 + 24) = v17;
  v29 = v35;
  *(_QWORD *)(a4 + 32) = v36;
  *(_QWORD *)(a4 + 40) = v29;
  v30 = v34;
  *(_QWORD *)(a4 + 48) = KeyPath;
  *(_QWORD *)(a4 + 56) = v30;
  *(_QWORD *)(a4 + 64) = v20;
  *(_QWORD *)(a4 + 72) = v24;
  *(_BYTE *)(a4 + 80) = v25;
  *(_QWORD *)(a4 + 88) = v26;
  *(_BYTE *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 104) = v49;
  *(_WORD *)(a4 + 120) = 256;
  v31 = swift_retain(KeyPath);
  return swift_release(v31);
}

double sub_10006374C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];

  v4 = *v2;
  v5 = *((_QWORD *)v2 + 1);
  v6 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v8 = static Alignment.center.getter(a1);
  v10 = v9;
  sub_1000634E0(v5, v6, v7, (uint64_t)v15, v4);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  v11 = v19;
  *(_OWORD *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v11;
  *(_OWORD *)(a2 + 112) = v20[0];
  *(_OWORD *)(a2 + 122) = *(_OWORD *)((char *)v20 + 10);
  v12 = v15[1];
  *(_OWORD *)(a2 + 16) = v15[0];
  *(_OWORD *)(a2 + 32) = v12;
  result = *(double *)&v16;
  v14 = v17;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v14;
  return result;
}

uint64_t sub_1000637EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - v13;
  v15 = sub_100015074((uint64_t)&v27 - v13);
  static WidgetRenderingMode.accented.getter(v15);
  v16 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v17 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v11, v8, v16);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  v18(v14, v8);
  if ((v17 & 1) != 0)
  {
    v19 = enum case for BlendMode.normal(_:);
    v20 = type metadata accessor for BlendMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v28, v19, v20);
  }
  else
  {
    v22 = v28;
    type metadata accessor for MessageView(0);
    sub_1000152D8((uint64_t)v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ColorScheme.dark(_:), v1);
    v23 = static ColorScheme.== infix(_:_:)(v7, v4);
    v24 = *(void (**)(char *, uint64_t))(v2 + 8);
    v24(v4, v1);
    v24(v7, v1);
    v25 = type metadata accessor for BlendMode(0);
    if ((v23 & 1) != 0)
      v26 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    else
      v26 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v22, *v26, v25);
  }
}

uint64_t sub_100063A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - v5;
  type metadata accessor for MessageView(0);
  sub_100014E8C((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetFamily.systemExtraLarge(_:), v0);
  v7 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v14, v0, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v7);
  v9 = v13;
  v8 = v14;
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  v11 = ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
  if (v8 == v9)
    return static Font.callout.getter(v11);
  else
    return static Font.footnote.getter(v11);
}

uint64_t sub_100063B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - v6;
  v8 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MessageView(0) + 36) + 8);
  sub_100014E8C((uint64_t)v7);
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  v9(v4, enum case for WidgetFamily.systemSmall(_:), v1);
  v10 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v1, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v1, v10);
  v12 = v18;
  v11 = v19;
  v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v4, v1);
  v13(v7, v1);
  if (v11 == v12)
  {
    if (v8)
      return 4;
    else
      return 5;
  }
  else
  {
    sub_100014E8C((uint64_t)v7);
    v9(v4, enum case for WidgetFamily.systemExtraLarge(_:), v1);
    dispatch thunk of RawRepresentable.rawValue.getter(&v19, v1, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(&v18, v1, v10);
    v16 = v18;
    v15 = v19;
    v13(v4, v1);
    v13(v7, v1);
    if (v8)
      v17 = 3;
    else
      v17 = 4;
    if (v15 == v16)
      return 3;
    else
      return v17;
  }
}

double sub_100063D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for WidgetFamily(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - v5;
  type metadata accessor for MessageView(0);
  sub_100014E8C((uint64_t)v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for WidgetFamily.systemExtraLarge(_:), v0);
  v7 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v14, v0, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v7);
  v9 = v13;
  v8 = v14;
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v3, v0);
  v11 = ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
  result = GeometryProxy.size.getter(v11);
  if (v8 == v9)
    return result * 0.7;
  return result;
}

uint64_t sub_100063E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD v23[3];

  v6 = sub_100006454(&qword_1000932D0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = static Alignment.center.getter(v9);
  v8[1] = v10;
  v11 = sub_100006454(&qword_1000932D8);
  v12 = sub_100063F80(a2, a1, (uint64_t)v8 + *(int *)(v11 + 44));
  v13 = GeometryProxy.size.getter(v12);
  GeometryProxy.size.getter(v14);
  v16 = v15;
  v18 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(v23, *(_QWORD *)&v13, 0, v16, 0, v18, v19);
  sub_100007964((uint64_t)v8, a3, &qword_1000932D0);
  v20 = (_OWORD *)(a3 + *(int *)(sub_100006454(&qword_1000932E0) + 36));
  v21 = v23[1];
  *v20 = v23[0];
  v20[1] = v21;
  v20[2] = v23[2];
  return sub_100007928((uint64_t)v8, &qword_1000932D0);
}

uint64_t sub_100063F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  int v56;
  __n128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  unsigned __int8 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  int v157;
  int v158;
  uint64_t v159;
  double v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  _OWORD *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, uint64_t);
  char *v189;
  char *v190;
  uint64_t v191;
  void (*v192)(_QWORD);
  char *v193;
  int v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD v220[7];

  v196 = a2;
  v217 = a3;
  v4 = sub_100006454(&qword_1000932E8);
  __chkstk_darwin(v4);
  v202 = (char *)&v187 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_100006454(&qword_1000932F0);
  __chkstk_darwin(v197);
  v195 = (char *)&v187 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100006454(&qword_1000932F8);
  __chkstk_darwin(v198);
  v200 = (char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_100006454(&qword_100093300);
  __chkstk_darwin(v215);
  v199 = (char *)&v187 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v201 = (char *)&v187 - v10;
  v214 = sub_100006454(&qword_100093308);
  __chkstk_darwin(v214);
  v211 = (uint64_t)&v187 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100093310);
  __chkstk_darwin(v12);
  v216 = (char *)&v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006454(&qword_100093318);
  __chkstk_darwin(v14);
  v16 = (char *)&v187 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100006454(&qword_100093320);
  __chkstk_darwin(v17);
  v206 = (uint64_t)&v187 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100006454(&qword_100093328);
  __chkstk_darwin(v205);
  v203 = (char *)&v187 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100006454(&qword_100093330);
  __chkstk_darwin(v213);
  v207 = (uint64_t)&v187 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v208 = (uint64_t)&v187 - v22;
  v23 = type metadata accessor for WidgetFamily(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v187 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v29 = (char *)&v187 - v28;
  __chkstk_darwin(v30);
  v210 = (char *)&v187 - v31;
  __chkstk_darwin(v32);
  v209 = (uint64_t)&v187 - v33;
  v34 = type metadata accessor for MessageView(0);
  __chkstk_darwin(v34);
  v36 = (char *)&v187 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v187 - v38;
  __chkstk_darwin(v40);
  v42 = (char *)&v187 - v41;
  v44 = *(int *)(v43 + 40);
  v45 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + v44);
  v218 = v45;
  sub_100007AF4(v45, (uint64_t)&v187 - v41, v46);
  v212 = v24;
  v204 = v29;
  if ((a1 & 1) == 0)
  {
    sub_10000A7C0((uint64_t)v42, type metadata accessor for MessageView);
    sub_100007AF4(v218, (uint64_t)v39, type metadata accessor for MessageView);
    v56 = enum case for WidgetFamily.systemSmall(_:);
    goto LABEL_5;
  }
  v190 = v36;
  v193 = v16;
  v189 = v26;
  v47 = v23;
  v48 = v209;
  sub_100014E8C(v209);
  v49 = *(void (**)(_QWORD))(v24 + 104);
  v50 = v210;
  v194 = enum case for WidgetFamily.systemSmall(_:);
  v192 = v49;
  v49(v210);
  v51 = sub_100007A70(&qword_100090BC0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v220, v47, v51);
  v191 = v51;
  dispatch thunk of RawRepresentable.rawValue.getter(&v219, v47, v51);
  v52 = v219;
  v53 = *(_QWORD *)&v220[0];
  v54 = *(void (**)(char *, uint64_t))(v24 + 8);
  v54(v50, v47);
  v55 = v48;
  v23 = v47;
  v54((char *)v55, v47);
  sub_10000A7C0((uint64_t)v42, type metadata accessor for MessageView);
  sub_100007AF4(v218, (uint64_t)v39, type metadata accessor for MessageView);
  if (v53 == v52)
  {
    v56 = v194;
    v16 = v193;
LABEL_5:
    sub_10000A7C0((uint64_t)v39, type metadata accessor for MessageView);
    v58 = enum case for WidgetFamily.systemMedium(_:);
    goto LABEL_6;
  }
  v106 = v209;
  sub_100014E8C(v209);
  v58 = enum case for WidgetFamily.systemMedium(_:);
  v107 = v210;
  ((void (*)(char *, _QWORD, uint64_t))v192)(v210, enum case for WidgetFamily.systemMedium(_:), v47);
  v108 = v191;
  dispatch thunk of RawRepresentable.rawValue.getter(v220, v47, v191);
  dispatch thunk of RawRepresentable.rawValue.getter(&v219, v47, v108);
  v110 = v219;
  v109 = *(_QWORD *)&v220[0];
  v54(v107, v47);
  v111 = v106;
  v23 = v47;
  v54((char *)v111, v47);
  sub_10000A7C0((uint64_t)v39, type metadata accessor for MessageView);
  v112 = (char *)v34;
  v113 = v54;
  v56 = v194;
  v16 = v193;
  if (v109 == v110)
  {
LABEL_6:
    v59 = static HorizontalAlignment.leading.getter(v57);
    v60 = v218;
    v61 = (uint64_t)v204;
    sub_100014E8C((uint64_t)v204);
    v62 = v212;
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v212 + 88))(v61, v23);
    if (v63 != v56
      && v63 != v58
      && v63 != enum case for WidgetFamily.systemLarge(_:)
      && v63 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v23);
    }
    *(_QWORD *)v16 = v59;
    *((_QWORD *)v16 + 1) = 0x4018000000000000;
    v16[16] = 0;
    v64 = sub_100006454(&qword_100093388);
    v65 = sub_100065014(v60, &v16[*(int *)(v64 + 44)]);
    v66 = static Alignment.topLeading.getter(v65);
    v67 = v206;
    sub_100063010(0.0, 0, 0.0, 1, INFINITY, 0, 0.0, 0, v206, 0.0, 1, INFINITY, 0, v66, v68, &qword_100093318, &qword_100093320);
    v69 = sub_100007928((uint64_t)v16, &qword_100093318);
    v70 = static Edge.Set.leading.getter(v69);
    v71 = v70;
    v72 = static Edge.Set.top.getter(v70);
    v73 = v72;
    v74 = static Edge.Set.trailing.getter(v72);
    v75 = Edge.Set.init(rawValue:)(0);
    v76 = Edge.Set.init(rawValue:)(v75);
    if (Edge.Set.init(rawValue:)(v76 & v71) != v71)
      v75 = Edge.Set.init(rawValue:)(v75 | v71);
    v77 = Edge.Set.init(rawValue:)(v75);
    if (Edge.Set.init(rawValue:)(v77 & v73) != v73)
      v75 = Edge.Set.init(rawValue:)(v75 | v73);
    v78 = v211;
    v79 = (uint64_t)v203;
    v80 = Edge.Set.init(rawValue:)(v75);
    if (Edge.Set.init(rawValue:)(v80 & v74) != v74)
      LOBYTE(v75) = Edge.Set.init(rawValue:)(v75 | v74);
    sub_100007964(v67, v79, &qword_100093320);
    v81 = v79 + *(int *)(v205 + 36);
    *(_BYTE *)v81 = v75;
    *(_OWORD *)(v81 + 8) = 0u;
    *(_OWORD *)(v81 + 24) = 0u;
    *(_BYTE *)(v81 + 40) = 1;
    v82 = sub_100007928(v67, &qword_100093320);
    v83 = static Edge.Set.bottom.getter(v82);
    v84 = Edge.Set.init(rawValue:)(0);
    v85 = v84;
    v86 = Edge.Set.init(rawValue:)(v84);
    if (Edge.Set.init(rawValue:)(v86 & v83) != v83)
      LOBYTE(v85) = Edge.Set.init(rawValue:)(v85 | v83);
    v87 = EdgeInsets.init(_all:)(5.0);
    v89 = v88;
    v91 = v90;
    v93 = v92;
    v94 = v207;
    sub_100007964(v79, v207, &qword_100093328);
    v95 = v213;
    v96 = v94 + *(int *)(v213 + 36);
    *(_BYTE *)v96 = v85;
    *(double *)(v96 + 8) = v87;
    *(_QWORD *)(v96 + 16) = v89;
    *(_QWORD *)(v96 + 24) = v91;
    *(_QWORD *)(v96 + 32) = v93;
    *(_BYTE *)(v96 + 40) = 0;
    sub_100007928(v79, &qword_100093328);
    v97 = &qword_100093330;
    v98 = v94;
    v99 = v208;
    sub_100007A2C(v98, v208, &qword_100093330);
    sub_100007964(v99, v78, &qword_100093330);
    swift_storeEnumTagMultiPayload(v78, v214, 0);
    v100 = sub_10001FB4C(&qword_100093348, &qword_100093330, (void (*)(void))sub_100067D98);
    v101 = sub_10001FB4C(&qword_100093368, &qword_100093300, (void (*)(void))sub_100067E40);
    v102 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)(v78, v95, v215, v100, v101);
    v103 = v99;
LABEL_20:
    sub_100007928(v103, v97);
    v104 = sub_100006454(&qword_100093338);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v102, 0, 1, v104);
    return sub_100007A2C(v102, v217, &qword_100093310);
  }
  v114 = v218;
  v115 = v209;
  v208 = v218 + *((int *)v112 + 5);
  sub_100014E8C(v209);
  v116 = v210;
  LODWORD(v207) = enum case for WidgetFamily.systemLarge(_:);
  v192(v210);
  v117 = v191;
  dispatch thunk of RawRepresentable.rawValue.getter(v220, v47, v191);
  dispatch thunk of RawRepresentable.rawValue.getter(&v219, v47, v117);
  v119 = v219;
  v118 = *(_QWORD *)&v220[0];
  v113(v116, v47);
  v120 = v115;
  v121 = v47;
  v113((char *)v120, v47);
  v122 = (uint64_t)v190;
  sub_100007AF4(v114, (uint64_t)v190, type metadata accessor for MessageView);
  v188 = (void (*)(uint64_t, uint64_t))v113;
  if (v118 == v119)
  {
    v123 = sub_10000A7C0(v122, type metadata accessor for MessageView);
    v124 = enum case for WidgetFamily.systemExtraLarge(_:);
    v125 = (uint64_t)v202;
    goto LABEL_25;
  }
  v126 = v209;
  sub_100014E8C(v209);
  v124 = enum case for WidgetFamily.systemExtraLarge(_:);
  v127 = v210;
  ((void (*)(char *, _QWORD, uint64_t))v192)(v210, enum case for WidgetFamily.systemExtraLarge(_:), v47);
  v128 = v191;
  dispatch thunk of RawRepresentable.rawValue.getter(v220, v47, v191);
  dispatch thunk of RawRepresentable.rawValue.getter(&v219, v47, v128);
  v130 = v219;
  v129 = *(_QWORD *)&v220[0];
  v113(v127, v47);
  v131 = v126;
  v121 = v47;
  v113((char *)v131, v47);
  v123 = sub_10000A7C0((uint64_t)v190, type metadata accessor for MessageView);
  v125 = (uint64_t)v202;
  if (v129 == v130)
  {
LABEL_25:
    v210 = v112;
    v132 = static HorizontalAlignment.center.getter(v123);
    v133 = (uint64_t)v189;
    sub_100014E8C((uint64_t)v189);
    v134 = (*(uint64_t (**)(uint64_t, uint64_t))(v212 + 88))(v133, v121);
    if (v134 != v56 && v134 != v58 && v134 != (_DWORD)v207 && v134 != v124)
      v188(v133, v121);
    *(_QWORD *)v125 = v132;
    *(_QWORD *)(v125 + 8) = 0x4018000000000000;
    *(_BYTE *)(v125 + 16) = 0;
    v135 = sub_100006454(&qword_100093340);
    v136 = sub_100065BEC(v218, v125 + *(int *)(v135 + 44));
    v137 = static Edge.Set.leading.getter(v136);
    v138 = v137;
    v139 = static Edge.Set.trailing.getter(v137);
    v140 = v139;
    v141 = static Edge.Set.bottom.getter(v139);
    v142 = Edge.Set.init(rawValue:)(0);
    v143 = Edge.Set.init(rawValue:)(v142);
    v144 = Edge.Set.init(rawValue:)(v143 & v138);
    v145 = (uint64_t)v200;
    v146 = (uint64_t)v199;
    v147 = v198;
    if (v144 != v138)
      v142 = Edge.Set.init(rawValue:)(v142 | v138);
    v148 = Edge.Set.init(rawValue:)(v142);
    v149 = Edge.Set.init(rawValue:)(v148 & v140);
    v150 = (uint64_t)v201;
    if (v149 != v140)
      v142 = Edge.Set.init(rawValue:)(v142 | v140);
    v151 = (uint64_t)v195;
    v152 = Edge.Set.init(rawValue:)(v142);
    if (Edge.Set.init(rawValue:)(v152 & v141) != v141)
      LOBYTE(v142) = Edge.Set.init(rawValue:)(v142 | v141);
    sub_100007964(v125, v151, &qword_1000932E8);
    v153 = v151 + *(int *)(v197 + 36);
    *(_BYTE *)v153 = v142;
    *(_OWORD *)(v153 + 8) = 0u;
    *(_OWORD *)(v153 + 24) = 0u;
    *(_BYTE *)(v153 + 40) = 1;
    v154 = sub_100007928(v125, &qword_1000932E8);
    v155 = static Edge.Set.top.getter(v154);
    v156 = Edge.Set.init(rawValue:)(0);
    v157 = v156;
    v158 = Edge.Set.init(rawValue:)(v156);
    v159 = Edge.Set.init(rawValue:)(v158 & v155);
    if (v159 != v155)
    {
      v159 = Edge.Set.init(rawValue:)(v157 | v155);
      LOBYTE(v157) = v159;
    }
    GeometryProxy.size.getter(v159);
    v161 = EdgeInsets.init(_all:)(v160 * 0.32);
    v163 = v162;
    v165 = v164;
    v167 = v166;
    sub_100007964(v151, v145, &qword_1000932F0);
    v168 = v145 + *(int *)(v147 + 36);
    *(_BYTE *)v168 = v157;
    *(double *)(v168 + 8) = v161;
    *(_QWORD *)(v168 + 16) = v163;
    *(_QWORD *)(v168 + 24) = v165;
    *(_QWORD *)(v168 + 32) = v167;
    *(_BYTE *)(v168 + 40) = 0;
    sub_100007928(v151, &qword_1000932F0);
    v169 = sub_100063D1C();
    v170 = sub_100063D1C();
    v172 = static Alignment.center.getter(v171);
    v173 = v172;
    v175 = v174;
    if (v169 > v170)
    {
      v176 = static os_log_type_t.fault.getter(v172);
      v177 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v176, &_mh_execute_header, v177, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v220, *(_QWORD *)&v169, 0, 0, 1, *(_QWORD *)&v170, 0, 0, 1, 0, 1, 0, 1, v173, v175);
    sub_100007964(v145, v146, &qword_1000932F8);
    v178 = v215;
    v179 = (_OWORD *)(v146 + *(int *)(v215 + 36));
    v180 = v220[5];
    v179[4] = v220[4];
    v179[5] = v180;
    v179[6] = v220[6];
    v181 = v220[1];
    *v179 = v220[0];
    v179[1] = v181;
    v182 = v220[3];
    v179[2] = v220[2];
    v179[3] = v182;
    sub_100007928(v145, &qword_1000932F8);
    v97 = &qword_100093300;
    sub_100007A2C(v146, v150, &qword_100093300);
    v183 = v211;
    sub_100007964(v150, v211, &qword_100093300);
    swift_storeEnumTagMultiPayload(v183, v214, 1);
    v184 = sub_10001FB4C(&qword_100093348, &qword_100093330, (void (*)(void))sub_100067D98);
    v185 = sub_10001FB4C(&qword_100093368, &qword_100093300, (void (*)(void))sub_100067E40);
    v102 = (uint64_t)v216;
    _ConditionalContent<>.init(storage:)(v183, v213, v178, v184, v185);
    v103 = v150;
    goto LABEL_20;
  }
  v186 = sub_100006454(&qword_100093338);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v217, 1, 1, v186);
}

uint64_t sub_100065014@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  int *v106;
  char *v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned __int8 v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  uint64_t v156;

  v150 = a2;
  v112 = type metadata accessor for WidgetFamily(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100093390);
  v146 = *(_QWORD *)(v4 - 8);
  v147 = v4;
  __chkstk_darwin(v4);
  v114 = (uint64_t *)((char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v113 = (uint64_t)&v109 - v7;
  v8 = sub_100006454(&qword_100093398);
  __chkstk_darwin(v8);
  v149 = (uint64_t)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v148 = (char *)&v109 - v11;
  v139 = type metadata accessor for BlendMode(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (uint64_t)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for DynamicTypeFont(0);
  __chkstk_darwin(v121);
  v14 = (uint64_t *)((char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v15);
  v118 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v109 - v18;
  v120 = sub_100006454(&qword_100091378);
  __chkstk_darwin(v120);
  v119 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100006454(&qword_100091380);
  __chkstk_darwin(v126);
  v122 = (uint64_t)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100006454(&qword_100091388);
  __chkstk_darwin(v124);
  v123 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100006454(&qword_100092358);
  __chkstk_darwin(v132);
  v128 = (uint64_t)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100006454(&qword_100092360);
  __chkstk_darwin(v131);
  v127 = (uint64_t)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100006454(&qword_1000933A0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v129 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100006454(&qword_1000933A8);
  __chkstk_darwin(v133);
  v130 = (char *)&v109 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100006454(&qword_1000933B0);
  __chkstk_darwin(v134);
  v117 = (uint64_t)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v116 = (char *)&v109 - v29;
  v31 = static Alignment.center.getter(v30);
  _FrameLayout.init(width:height:alignment:)(&v151, 0, 1, 0x403C000000000000, 0, v31, v32);
  v145 = v151;
  v144 = v152;
  v143 = v153;
  v142 = v154;
  v140 = v156;
  v141 = v155;
  v125 = type metadata accessor for MessageView(0);
  v33 = *(int *)(v125 + 32);
  v115 = a1;
  v34 = (uint64_t *)(a1 + v33);
  v35 = *v34;
  v36 = v34[1];
  swift_bridgeObjectRetain(v36);
  v37 = LocalizedStringKey.init(_:)(v35, v36);
  v38 = Text.init(_:tableName:bundle:comment:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = sub_100063A0C();
  v46 = enum case for ContentSizeCategory.extraLarge(_:);
  v47 = type metadata accessor for ContentSizeCategory(0);
  v48 = *(_QWORD *)(v47 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 104))(v19, v46, v47);
  v49 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v19, 0, 1, v47);
  v50 = static Font.Weight.semibold.getter(v49);
  v51 = v118;
  sub_100007964((uint64_t)v19, v118, &qword_100091370);
  *v14 = swift_getKeyPath(&unk_100073150);
  v52 = sub_100006454(&qword_100090EA0);
  swift_storeEnumTagMultiPayload(v14, v52, 0);
  v53 = v121;
  *(_QWORD *)((char *)v14 + *(int *)(v121 + 20)) = v45;
  v54 = v53;
  sub_100007A2C(v51, (uint64_t)v14 + *(int *)(v53 + 24), &qword_100091370);
  *(double *)((char *)v14 + *(int *)(v54 + 28)) = v50;
  v55 = (uint64_t)v119;
  sub_100007AF4((uint64_t)v14, (uint64_t)&v119[*(int *)(v120 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v55 = v38;
  *(_QWORD *)(v55 + 8) = v40;
  *(_BYTE *)(v55 + 16) = v44;
  *(_QWORD *)(v55 + 24) = v42;
  swift_bridgeObjectRetain(v42);
  sub_10001F6C4(v38, v40, v44);
  v56 = (uint64_t)v14;
  v57 = v115;
  sub_10000A7C0(v56, type metadata accessor for DynamicTypeFont);
  sub_100007928((uint64_t)v19, &qword_100091370);
  sub_100007918(v38, v40, v44);
  v58 = v42;
  v59 = (uint64_t)v116;
  v60 = swift_bridgeObjectRelease(v58);
  v61 = static Color.primary.getter(v60);
  v62 = Color.opacity(_:)(0.6);
  swift_release(v61);
  KeyPath = swift_getKeyPath(&unk_100073180);
  v64 = v122;
  sub_100007964(v55, v122, &qword_100091378);
  v65 = (uint64_t *)(v64 + *(int *)(v126 + 36));
  *v65 = KeyPath;
  v65[1] = v62;
  sub_100007928(v55, &qword_100091378);
  v66 = v137;
  sub_1000637EC(v137);
  v67 = (uint64_t)v123;
  v68 = v138;
  v69 = v139;
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(&v123[*(int *)(v124 + 36)], v66, v139);
  sub_100007964(v64, v67, &qword_100091380);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v69);
  sub_100007928(v64, &qword_100091380);
  v70 = sub_100063B44();
  v71 = swift_getKeyPath(&unk_1000731B0);
  v72 = v128;
  sub_100007964(v67, v128, &qword_100091388);
  v73 = v72 + *(int *)(v132 + 36);
  *(_QWORD *)v73 = v71;
  *(_QWORD *)(v73 + 8) = v70;
  *(_BYTE *)(v73 + 16) = 0;
  sub_100007928(v67, &qword_100091388);
  v74 = v127;
  sub_100007964(v72, v127, &qword_100092358);
  v75 = v131;
  *(_WORD *)(v74 + *(int *)(v131 + 36)) = 256;
  sub_100007928(v72, &qword_100092358);
  v76 = sub_10001FB4C(&qword_100092428, &qword_100092360, (void (*)(void))sub_10004BBA8);
  v77 = v129;
  View.unredacted()(v75, v76);
  sub_100007928(v74, &qword_100092360);
  v78 = swift_getKeyPath(&unk_1000731E0);
  v79 = v135;
  v80 = (uint64_t)v130;
  v81 = v136;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v130, v77, v136);
  v82 = v80 + *(int *)(v133 + 36);
  *(_QWORD *)v82 = v78;
  *(_BYTE *)(v82 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v77, v81);
  v83 = swift_getKeyPath(&unk_100073210);
  v84 = v117;
  sub_100007964(v80, v117, &qword_1000933A8);
  v85 = (uint64_t *)(v84 + *(int *)(v134 + 36));
  *v85 = v83;
  v85[1] = 0x3FE3333333333333;
  sub_100007928(v80, &qword_1000933A8);
  v86 = v84;
  sub_100007A2C(v84, v59, &qword_1000933B0);
  v87 = (uint64_t *)(v57 + *(int *)(v125 + 36));
  v88 = v87[1];
  if (v88)
  {
    v89 = *v87;
    v90 = v110;
    sub_100014E8C(v110);
    v91 = v111;
    v92 = v112;
    v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 88))(v90, v112);
    v95 = 0x4000000000000000;
    if (v93 == enum case for WidgetFamily.systemSmall(_:))
    {
      v97 = (uint64_t)v148;
    }
    else
    {
      v96 = v91;
      v97 = (uint64_t)v148;
      if (v93 != enum case for WidgetFamily.systemMedium(_:) && v93 != enum case for WidgetFamily.systemLarge(_:))
      {
        if (v93 == enum case for WidgetFamily.systemExtraLarge(_:))
          v95 = 0x4010000000000000;
        else
          (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v90, v92);
      }
    }
    v99 = static VerticalAlignment.center.getter(v94);
    v100 = (uint64_t)v114;
    *v114 = v99;
    *(_QWORD *)(v100 + 8) = v95;
    *(_BYTE *)(v100 + 16) = 0;
    v101 = sub_100006454(&qword_1000933C0);
    sub_100066D7C(v89, v88, v57, v100 + *(int *)(v101 + 44));
    v102 = v113;
    sub_100007A2C(v100, v113, &qword_100093390);
    sub_100007A2C(v102, v97, &qword_100093390);
    v98 = 0;
  }
  else
  {
    v98 = 1;
    v97 = (uint64_t)v148;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v97, v98, 1, v147);
  sub_100007964(v59, v86, &qword_1000933B0);
  v103 = v149;
  sub_100007964(v97, v149, &qword_100093398);
  v104 = v150;
  *v150 = 0;
  *((_BYTE *)v104 + 8) = 1;
  v104[2] = v145;
  *((_BYTE *)v104 + 24) = v144;
  v104[4] = v143;
  *((_BYTE *)v104 + 40) = v142;
  v105 = v140;
  v104[6] = v141;
  v104[7] = v105;
  v106 = (int *)sub_100006454(&qword_1000933B8);
  sub_100007964(v86, (uint64_t)v104 + v106[12], &qword_1000933B0);
  sub_100007964(v103, (uint64_t)v104 + v106[16], &qword_100093398);
  v107 = (char *)v104 + v106[20];
  *(_QWORD *)v107 = 0;
  v107[8] = 0;
  sub_100007928(v97, &qword_100093398);
  sub_100007928(v59, &qword_1000933B0);
  sub_100007928(v103, &qword_100093398);
  return sub_100007928(v86, &qword_1000933B0);
}

uint64_t sub_100065BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t KeyPath;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;

  v176 = a2;
  v139 = type metadata accessor for WidgetFamily(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v137 = (uint64_t)&v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100093390);
  v172 = *(_QWORD *)(v4 - 8);
  v173 = v4;
  __chkstk_darwin(v4);
  v141 = (uint64_t *)((char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v140 = (uint64_t)&v137 - v7;
  v8 = sub_100006454(&qword_100093398);
  __chkstk_darwin(v8);
  v175 = (uint64_t)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v174 = (char *)&v137 - v11;
  v12 = type metadata accessor for BlendMode(0);
  v166 = *(_QWORD *)(v12 - 8);
  v167 = v12;
  __chkstk_darwin(v12);
  v165 = (uint64_t)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for DynamicTypeFont(0);
  __chkstk_darwin(v148);
  v151 = (uint64_t *)((char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v15);
  v145 = (uint64_t)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v137 - v18;
  v144 = sub_100006454(&qword_100091378);
  __chkstk_darwin(v144);
  v147 = (char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100006454(&qword_1000933E8);
  __chkstk_darwin(v146);
  v152 = (uint64_t)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100006454(&qword_1000933F0);
  __chkstk_darwin(v150);
  v155 = (uint64_t)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100006454(&qword_1000933F8);
  __chkstk_darwin(v149);
  v159 = (char *)&v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100006454(&qword_100093400);
  __chkstk_darwin(v153);
  v157 = (uint64_t)&v137 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100006454(&qword_100093408);
  __chkstk_darwin(v161);
  v158 = (uint64_t)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100006454(&qword_100093410);
  v163 = *(_QWORD *)(v26 - 8);
  v164 = v26;
  __chkstk_darwin(v26);
  v160 = (char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100006454(&qword_100093418);
  __chkstk_darwin(v154);
  v162 = (char *)&v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100006454(&qword_100093420);
  __chkstk_darwin(v156);
  v171 = (uint64_t)&v137 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v170 = (uint64_t)&v137 - v31;
  v32 = sub_100006454(&qword_100093428);
  __chkstk_darwin(v32);
  v34 = (char *)&v137 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100006454(&qword_100093430);
  __chkstk_darwin(v35);
  v169 = (uint64_t)&v137 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v137 - v38;
  v41 = __chkstk_darwin(v40);
  v43 = (char *)&v137 - v42;
  *(_QWORD *)v34 = static VerticalAlignment.center.getter(v41);
  *((_QWORD *)v34 + 1) = 0x4024000000000000;
  v34[16] = 0;
  v44 = sub_100006454(&qword_100093438);
  v45 = sub_100066954(&v34[*(int *)(v44 + 44)]);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = Edge.Set.init(rawValue:)(0);
  v48 = v47;
  v49 = Edge.Set.init(rawValue:)(v47);
  if (Edge.Set.init(rawValue:)(v49 & v46) != v46)
    LOBYTE(v48) = Edge.Set.init(rawValue:)(v48 | v46);
  v50 = EdgeInsets.init(_all:)(4.0);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  sub_100007964((uint64_t)v34, (uint64_t)v39, &qword_100093428);
  v57 = &v39[*(int *)(v35 + 36)];
  *v57 = v48;
  *((double *)v57 + 1) = v50;
  *((_QWORD *)v57 + 2) = v52;
  *((_QWORD *)v57 + 3) = v54;
  *((_QWORD *)v57 + 4) = v56;
  v57[40] = 0;
  sub_100007928((uint64_t)v34, &qword_100093428);
  v168 = v43;
  sub_100007A2C((uint64_t)v39, (uint64_t)v43, &qword_100093430);
  v143 = type metadata accessor for MessageView(0);
  v58 = (uint64_t *)(a1 + *(int *)(v143 + 32));
  v59 = *v58;
  v60 = v58[1];
  swift_bridgeObjectRetain(v60);
  v61 = LocalizedStringKey.init(_:)(v59, v60);
  v62 = Text.init(_:tableName:bundle:comment:)(v61);
  v64 = v63;
  v66 = v65;
  v68 = v67 & 1;
  v69 = sub_100063A0C();
  v70 = enum case for ContentSizeCategory.extraLarge(_:);
  v71 = type metadata accessor for ContentSizeCategory(0);
  v142 = a1;
  v72 = v71;
  v73 = *(_QWORD *)(v71 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 104))(v19, v70, v71);
  v74 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v19, 0, 1, v72);
  v75 = static Font.Weight.semibold.getter(v74);
  v76 = v145;
  sub_100007964((uint64_t)v19, v145, &qword_100091370);
  KeyPath = swift_getKeyPath(&unk_100073150);
  v78 = (uint64_t)v151;
  *v151 = KeyPath;
  v79 = sub_100006454(&qword_100090EA0);
  swift_storeEnumTagMultiPayload(v78, v79, 0);
  v80 = v148;
  *(_QWORD *)(v78 + *(int *)(v148 + 20)) = v69;
  v81 = v76;
  v82 = 1;
  sub_100007A2C(v81, v78 + *(int *)(v80 + 24), &qword_100091370);
  *(double *)(v78 + *(int *)(v80 + 28)) = v75;
  v83 = (uint64_t)v147;
  sub_100007AF4(v78, (uint64_t)&v147[*(int *)(v144 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v83 = v62;
  *(_QWORD *)(v83 + 8) = v64;
  *(_BYTE *)(v83 + 16) = v68;
  *(_QWORD *)(v83 + 24) = v66;
  swift_bridgeObjectRetain(v66);
  sub_10001F6C4(v62, v64, v68);
  sub_10000A7C0(v78, type metadata accessor for DynamicTypeFont);
  sub_100007928((uint64_t)v19, &qword_100091370);
  sub_100007918(v62, v64, v68);
  swift_bridgeObjectRelease(v66);
  v84 = swift_getKeyPath(&unk_100073270);
  v85 = v152;
  sub_100007964(v83, v152, &qword_100091378);
  v86 = v85 + *(int *)(v146 + 36);
  *(_QWORD *)v86 = v84;
  *(_BYTE *)(v86 + 8) = 1;
  v87 = v83;
  v88 = v142;
  v89 = sub_100007928(v87, &qword_100091378);
  v90 = static Color.primary.getter(v89);
  v91 = Color.opacity(_:)(0.6);
  swift_release(v90);
  v92 = swift_getKeyPath(&unk_100073180);
  v93 = v155;
  sub_100007964(v85, v155, &qword_1000933E8);
  v94 = (uint64_t *)(v93 + *(int *)(v150 + 36));
  *v94 = v92;
  v94[1] = v91;
  sub_100007928(v85, &qword_1000933E8);
  v95 = v165;
  sub_1000637EC(v165);
  v96 = (uint64_t)v159;
  v98 = v166;
  v97 = v167;
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(&v159[*(int *)(v149 + 36)], v95, v167);
  sub_100007964(v93, v96, &qword_1000933F0);
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v95, v97);
  sub_100007928(v93, &qword_1000933F0);
  v99 = sub_100063B44();
  v100 = swift_getKeyPath(&unk_1000731B0);
  v101 = v157;
  sub_100007964(v96, v157, &qword_1000933F8);
  v102 = v101 + *(int *)(v153 + 36);
  *(_QWORD *)v102 = v100;
  *(_QWORD *)(v102 + 8) = v99;
  *(_BYTE *)(v102 + 16) = 0;
  sub_100007928(v96, &qword_1000933F8);
  v103 = v158;
  sub_100007964(v101, v158, &qword_100093400);
  v104 = v161;
  *(_WORD *)(v103 + *(int *)(v161 + 36)) = 256;
  sub_100007928(v101, &qword_100093400);
  v105 = sub_10001FB4C(&qword_100093440, &qword_100093408, (void (*)(void))sub_100068064);
  v106 = v160;
  View.unredacted()(v104, v105);
  sub_100007928(v103, &qword_100093408);
  v107 = swift_getKeyPath(&unk_1000731E0);
  v109 = (uint64_t)v162;
  v108 = v163;
  v110 = v164;
  (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v162, v106, v164);
  v111 = v109 + *(int *)(v154 + 36);
  *(_QWORD *)v111 = v107;
  *(_BYTE *)(v111 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v110);
  v112 = swift_getKeyPath(&unk_100073210);
  v113 = v171;
  sub_100007964(v109, v171, &qword_100093418);
  v114 = (uint64_t *)(v113 + *(int *)(v156 + 36));
  *v114 = v112;
  v114[1] = 0x3FE3333333333333;
  sub_100007928(v109, &qword_100093418);
  v115 = v170;
  sub_100007A2C(v113, v170, &qword_100093420);
  v116 = (uint64_t *)(v88 + *(int *)(v143 + 36));
  v117 = v116[1];
  if (v117)
  {
    v118 = *v116;
    v119 = v137;
    sub_100014E8C(v137);
    v120 = v138;
    v121 = v139;
    v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v138 + 88))(v119, v139);
    v124 = 0x4000000000000000;
    v125 = (uint64_t)v174;
    if (v122 != enum case for WidgetFamily.systemSmall(_:)
      && v122 != enum case for WidgetFamily.systemMedium(_:)
      && v122 != enum case for WidgetFamily.systemLarge(_:))
    {
      if (v122 == enum case for WidgetFamily.systemExtraLarge(_:))
        v124 = 0x4010000000000000;
      else
        v123.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v120 + 8))(v119, v121);
    }
    v126 = static VerticalAlignment.center.getter(v123);
    v127 = (uint64_t)v141;
    *v141 = v126;
    *(_QWORD *)(v127 + 8) = v124;
    *(_BYTE *)(v127 + 16) = 0;
    v128 = sub_100006454(&qword_1000933C0);
    sub_100066D7C(v118, v117, v88, v127 + *(int *)(v128 + 44));
    v129 = v140;
    sub_100007A2C(v127, v140, &qword_100093390);
    sub_100007A2C(v129, v125, &qword_100093390);
    v82 = 0;
  }
  else
  {
    v125 = (uint64_t)v174;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56))(v125, v82, 1, v173);
  v131 = (uint64_t)v168;
  v130 = v169;
  sub_100007964((uint64_t)v168, v169, &qword_100093430);
  sub_100007964(v115, v113, &qword_100093420);
  v132 = v175;
  sub_100007964(v125, v175, &qword_100093398);
  v133 = v176;
  sub_100007964(v130, v176, &qword_100093430);
  v134 = (int *)sub_100006454(&qword_100093468);
  sub_100007964(v113, v133 + v134[12], &qword_100093420);
  sub_100007964(v132, v133 + v134[16], &qword_100093398);
  v135 = v133 + v134[20];
  *(_QWORD *)v135 = 0;
  *(_BYTE *)(v135 + 8) = 0;
  sub_100007928(v125, &qword_100093398);
  sub_100007928(v115, &qword_100093420);
  sub_100007928(v131, &qword_100093430);
  sub_100007928(v132, &qword_100093398);
  sub_100007928(v113, &qword_100093420);
  return sub_100007928(v130, &qword_100093430);
}

uint64_t sub_100066954@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  double v51;
  _DWORD v52[4];
  uint64_t v53;

  v50 = a1;
  v1 = type metadata accessor for Color.RGBColorSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100093470);
  v48 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v49 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v47 = (char *)&v43 - v8;
  __chkstk_darwin(v9);
  v46 = (char *)&v43 - v10;
  __chkstk_darwin(v11);
  v45 = (char *)&v43 - v12;
  __chkstk_darwin(v13);
  v15 = (char *)&v43 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - v17;
  v19 = type metadata accessor for MessageView(0);
  GeometryProxy.size.getter(v19);
  v21 = v20 * 0.291746641;
  GeometryProxy.size.getter(v22);
  v24 = v23 * 0.199616123;
  v25 = enum case for Color.RGBColorSpace.sRGB(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v26(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
  v27 = Color.init(_:red:green:blue:opacity:)(v4, 0.635294118, 0.647058824, 0.854901961, 1.0);
  v51 = v24;
  strcpy((char *)v52, "Memoji-Left");
  v52[3] = -352321536;
  v53 = v27;
  v28 = sub_100068210();
  v44 = v18;
  View.unredacted()(&type metadata for MessageViewMemoji, v28);
  swift_release(v27);
  v26(v4, v25, v1);
  v29 = Color.init(_:red:green:blue:opacity:)(v4, 0.945098039, 0.854901961, 0.584313725, 1.0);
  v51 = v21;
  strcpy((char *)v52, "Memoji-Center");
  HIWORD(v52[3]) = -4864;
  v53 = v29;
  View.unredacted()(&type metadata for MessageViewMemoji, v28);
  swift_release(v29);
  v26(v4, v25, v1);
  v30 = Color.init(_:red:green:blue:opacity:)(v4, 0.725490196, 0.882352941, 0.945098039, 1.0);
  v51 = v24;
  strcpy((char *)v52, "Memoji-Right");
  BYTE1(v52[3]) = 0;
  HIWORD(v52[3]) = -5120;
  v53 = v30;
  v31 = v45;
  View.unredacted()(&type metadata for MessageViewMemoji, v28);
  swift_release(v30);
  v32 = v48;
  v33 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v34 = v46;
  v33(v46, v18, v5);
  v35 = v47;
  v36 = v15;
  v33(v47, v15, v5);
  v37 = v49;
  v38 = v31;
  v33(v49, v31, v5);
  v39 = v50;
  v33(v50, v34, v5);
  v40 = sub_100006454(&qword_100093480);
  v33(&v39[*(int *)(v40 + 48)], v35, v5);
  v33(&v39[*(int *)(v40 + 64)], v37, v5);
  v41 = *(void (**)(char *, uint64_t))(v32 + 8);
  v41(v38, v5);
  v41(v36, v5);
  v41(v44, v5);
  v41(v37, v5);
  v41(v35, v5);
  return ((uint64_t (*)(char *, uint64_t))v41)(v34, v5);
}

uint64_t sub_100066D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  _QWORD v119[2];
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t (*v126)(char *, _QWORD, uint64_t, uint64_t);
  void (*v127)(char *, uint64_t, uint64_t);
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v119[1] = a3;
  v158 = a4;
  v6 = type metadata accessor for Image.Scale(0);
  v156 = *(_QWORD *)(v6 - 8);
  v157 = v6;
  __chkstk_darwin(v6);
  v155 = (char *)v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100006454(&qword_100092450);
  __chkstk_darwin(v142);
  v141 = (char *)v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100006454(&qword_100092458);
  __chkstk_darwin(v146);
  v143 = (uint64_t)v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100006454(&qword_100092460);
  __chkstk_darwin(v145);
  v144 = (char *)v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100006454(&qword_100092468);
  __chkstk_darwin(v148);
  v147 = (char *)v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100006454(&qword_100092470);
  __chkstk_darwin(v152);
  v149 = (uint64_t)v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100092478);
  v153 = *(_QWORD *)(v13 - 8);
  v154 = v13;
  __chkstk_darwin(v13);
  v150 = (char *)v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v151 = (char *)v119 - v16;
  v162 = type metadata accessor for BlendMode(0);
  v140 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v161 = (uint64_t)v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DynamicTypeFont(0);
  __chkstk_darwin(v160);
  v19 = (_QWORD *)((char *)v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_100006454(&qword_100091370);
  __chkstk_darwin(v20);
  v159 = (uint64_t)v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)v119 - v23;
  v121 = sub_100006454(&qword_100091378);
  __chkstk_darwin(v121);
  v26 = (char *)v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100006454(&qword_100091380);
  __chkstk_darwin(v130);
  v124 = (uint64_t)v119 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100006454(&qword_100091388);
  __chkstk_darwin(v129);
  v125 = (char *)v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100006454(&qword_100092358);
  __chkstk_darwin(v135);
  v131 = (uint64_t)v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100006454(&qword_1000933C8);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v132 = (char *)v119 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100006454(&qword_1000933D0);
  __chkstk_darwin(v136);
  v133 = (char *)v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100006454(&qword_1000933D8);
  __chkstk_darwin(v137);
  v134 = (uint64_t)v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v163 = (uint64_t)v119 - v34;
  swift_bridgeObjectRetain(a2);
  v35 = LocalizedStringKey.init(_:)(a1, a2);
  v36 = Text.init(_:tableName:bundle:comment:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v119[0] = sub_100063A0C();
  v43 = enum case for ContentSizeCategory.extraLarge(_:);
  v128 = enum case for ContentSizeCategory.extraLarge(_:);
  v44 = type metadata accessor for ContentSizeCategory(0);
  v45 = *(_QWORD *)(v44 - 8);
  v127 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 104);
  v122 = v44;
  v127(v24, v43, v44);
  v126 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56);
  v46 = (uint64_t)v24;
  v47 = v126(v24, 0, 1, v44);
  v48 = static Font.Weight.regular.getter(v47);
  v120 = v24;
  v49 = v159;
  sub_100007964((uint64_t)v24, v159, &qword_100091370);
  *v19 = swift_getKeyPath(&unk_100073150);
  v123 = sub_100006454(&qword_100090EA0);
  swift_storeEnumTagMultiPayload(v19, v123, 0);
  v50 = v160;
  *(_QWORD *)((char *)v19 + *(int *)(v160 + 20)) = v119[0];
  v51 = v50;
  sub_100007A2C(v49, (uint64_t)v19 + *(int *)(v50 + 24), &qword_100091370);
  *(double *)((char *)v19 + *(int *)(v51 + 28)) = v48;
  sub_100007AF4((uint64_t)v19, (uint64_t)&v26[*(int *)(v121 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v26 = v36;
  *((_QWORD *)v26 + 1) = v38;
  v26[16] = v42;
  *((_QWORD *)v26 + 3) = v40;
  sub_10001F6C4(v36, v38, v42);
  swift_bridgeObjectRetain(v40);
  sub_10000A7C0((uint64_t)v19, type metadata accessor for DynamicTypeFont);
  sub_100007928(v46, &qword_100091370);
  sub_100007918(v36, v38, v42);
  v52 = swift_bridgeObjectRelease(v40);
  v53 = static Color.secondary.getter(v52);
  KeyPath = swift_getKeyPath(&unk_100073180);
  v55 = v124;
  sub_100007964((uint64_t)v26, v124, &qword_100091378);
  v56 = (uint64_t *)(v55 + *(int *)(v130 + 36));
  *v56 = KeyPath;
  v56[1] = v53;
  sub_100007928((uint64_t)v26, &qword_100091378);
  v57 = v161;
  sub_1000637EC(v161);
  v58 = (uint64_t)v125;
  v59 = &v125[*(int *)(v129 + 36)];
  v60 = v140;
  v130 = *(_QWORD *)(v140 + 16);
  v61 = v162;
  ((void (*)(char *, uint64_t, uint64_t))v130)(v59, v57, v162);
  sub_100007964(v55, v58, &qword_100091380);
  v140 = *(_QWORD *)(v60 + 8);
  ((void (*)(uint64_t, uint64_t))v140)(v57, v61);
  sub_100007928(v55, &qword_100091380);
  v62 = swift_getKeyPath(&unk_1000731B0);
  v63 = v131;
  sub_100007964(v58, v131, &qword_100091388);
  v64 = v135;
  v65 = v63 + *(int *)(v135 + 36);
  *(_QWORD *)v65 = v62;
  *(_QWORD *)(v65 + 8) = 1;
  *(_BYTE *)(v65 + 16) = 0;
  sub_100007928(v58, &qword_100091388);
  v66 = sub_10004BBA8();
  v67 = v132;
  View.unredacted()(v64, v66);
  sub_100007928(v63, &qword_100092358);
  v68 = swift_getKeyPath(&unk_1000731E0);
  v69 = v138;
  v70 = (uint64_t)v133;
  v71 = v139;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v133, v67, v139);
  v72 = v70 + *(int *)(v136 + 36);
  *(_QWORD *)v72 = v68;
  *(_BYTE *)(v72 + 8) = 1;
  (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v71);
  v73 = swift_getKeyPath(&unk_100073210);
  v74 = v134;
  sub_100007964(v70, v134, &qword_1000933D0);
  v75 = (uint64_t *)(v74 + *(int *)(v137 + 36));
  *v75 = v73;
  v75[1] = 0x3FE8000000000000;
  sub_100007928(v70, &qword_1000933D0);
  sub_100007A2C(v74, v163, &qword_1000933D8);
  v76 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v77 = sub_100063A0C();
  v78 = (uint64_t)v120;
  v79 = v122;
  v127(v120, v128, v122);
  v80 = v126((char *)v78, 0, 1, v79);
  v81 = static Font.Weight.semibold.getter(v80);
  v82 = v159;
  sub_100007964(v78, v159, &qword_100091370);
  *v19 = swift_getKeyPath(&unk_100073150);
  swift_storeEnumTagMultiPayload(v19, v123, 0);
  v83 = v160;
  *(_QWORD *)((char *)v19 + *(int *)(v160 + 20)) = v77;
  v84 = v83;
  sub_100007A2C(v82, (uint64_t)v19 + *(int *)(v83 + 24), &qword_100091370);
  *(double *)((char *)v19 + *(int *)(v84 + 28)) = v81;
  v85 = (uint64_t)v141;
  sub_100007AF4((uint64_t)v19, (uint64_t)&v141[*(int *)(v142 + 36)], type metadata accessor for DynamicTypeFont);
  *(_QWORD *)v85 = v76;
  *(_BYTE *)(v85 + 8) = 1;
  swift_retain(v76);
  sub_10000A7C0((uint64_t)v19, type metadata accessor for DynamicTypeFont);
  sub_100007928(v78, &qword_100091370);
  v86 = swift_release(v76);
  v87 = static Color.secondary.getter(v86);
  v88 = swift_getKeyPath(&unk_100073180);
  v89 = v143;
  sub_100007964(v85, v143, &qword_100092450);
  v90 = (uint64_t *)(v89 + *(int *)(v146 + 36));
  *v90 = v88;
  v90[1] = v87;
  sub_100007928(v85, &qword_100092450);
  v91 = v161;
  sub_1000637EC(v161);
  v92 = (uint64_t)v144;
  v93 = v162;
  ((void (*)(char *, uint64_t, uint64_t))v130)(&v144[*(int *)(v145 + 36)], v91, v162);
  sub_100007964(v89, v92, &qword_100092458);
  ((void (*)(uint64_t, uint64_t))v140)(v91, v93);
  sub_100007928(v89, &qword_100092458);
  v95 = v155;
  v94 = v156;
  v96 = v157;
  (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for Image.Scale.small(_:), v157);
  v97 = swift_getKeyPath(&unk_100073240);
  v98 = (uint64_t)v147;
  v99 = (uint64_t *)&v147[*(int *)(v148 + 36)];
  v100 = sub_100006454(&qword_1000924A8);
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))((char *)v99 + *(int *)(v100 + 28), v95, v96);
  *v99 = v97;
  sub_100007964(v92, v98, &qword_100092460);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v96);
  sub_100007928(v92, &qword_100092460);
  v101 = swift_getKeyPath(&unk_100073210);
  v102 = v149;
  sub_100007964(v98, v149, &qword_100092468);
  v103 = v152;
  v104 = (uint64_t *)(v102 + *(int *)(v152 + 36));
  *v104 = v101;
  v104[1] = 0x3FE8000000000000;
  sub_100007928(v98, &qword_100092468);
  v105 = sub_10004BD5C();
  v106 = v150;
  View.unredacted()(v103, v105);
  sub_100007928(v102, &qword_100092470);
  v108 = v153;
  v107 = v154;
  v109 = v151;
  v110 = v106;
  (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v151, v106, v154);
  v111 = v163;
  sub_100007964(v163, v74, &qword_1000933D8);
  v112 = *(void (**)(char *, char *, uint64_t))(v108 + 16);
  v113 = v108;
  v114 = v107;
  v112(v110, v109, v107);
  v115 = v158;
  sub_100007964(v74, v158, &qword_1000933D8);
  v116 = sub_100006454(&qword_1000933E0);
  v112((char *)(v115 + *(int *)(v116 + 48)), v110, v114);
  v117 = *(void (**)(char *, uint64_t))(v113 + 8);
  v117(v109, v114);
  sub_100007928(v111, &qword_1000933D8);
  v117(v110, v114);
  return sub_100007928(v74, &qword_1000933D8);
}

uint64_t sub_100067AC8@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_100007AF4(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MessageView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10008F190, v7 + v5, v6 | 7);
  result = sub_100067D08((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *a2 = sub_100067D4C;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v8;
  return result;
}

uint64_t sub_100067B74()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v1 = (int *)type metadata accessor for MessageView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100006454(&qword_1000907A8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)v6 + v1[6]);
  v13 = sub_100006454(&qword_1000908D0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = v3 | 7;
  v16 = v4 + v5;
  v17 = (char *)v6 + v1[7];
  v18 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[9] + 8));
  return swift_deallocObject(v0, v16, v15);
}

uint64_t sub_100067D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessageView(0) - 8) + 80);
  return sub_100063E6C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100067D98()
{
  return sub_10001FB4C(&qword_100093350, &qword_100093328, (void (*)(void))sub_100067DBC);
}

unint64_t sub_100067DBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093358;
  if (!qword_100093358)
  {
    v1 = sub_100006494(&qword_100093320);
    sub_1000078D8(&qword_100093360, &qword_100093318, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093358);
  }
  return result;
}

uint64_t sub_100067E40()
{
  return sub_10001FB4C(&qword_100093370, &qword_1000932F8, (void (*)(void))sub_100067E64);
}

unint64_t sub_100067E64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093378;
  if (!qword_100093378)
  {
    v1 = sub_100006494(&qword_1000932F0);
    sub_1000078D8(&qword_100093380, &qword_1000932E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093378);
  }
  return result;
}

uint64_t sub_100067EE8()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100067F14@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100067F40(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_100067F64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100067F8C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100067FB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100067FE4(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_100068018@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100068040(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_100068064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093448;
  if (!qword_100093448)
  {
    v1 = sub_100006494(&qword_100093400);
    sub_10001FB4C(&qword_100093450, &qword_1000933F8, (void (*)(void))sub_100068108);
    sub_1000078D8(&qword_1000917A8, &qword_1000917B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093448);
  }
  return result;
}

unint64_t sub_100068108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093458;
  if (!qword_100093458)
  {
    v1 = sub_100006494(&qword_1000933F0);
    sub_10006818C();
    sub_1000078D8(&qword_1000913F0, &qword_1000913F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093458);
  }
  return result;
}

unint64_t sub_10006818C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093460;
  if (!qword_100093460)
  {
    v1 = sub_100006494(&qword_1000933E8);
    sub_10001F7B8();
    sub_1000078D8(&qword_100091420, &qword_100091428, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093460);
  }
  return result;
}

unint64_t sub_100068210()
{
  unint64_t result;

  result = qword_100093478;
  if (!qword_100093478)
  {
    result = swift_getWitnessTable(&unk_1000732B4, &type metadata for MessageViewMemoji);
    atomic_store(result, (unint64_t *)&qword_100093478);
  }
  return result;
}

uint64_t destroy for MessageViewMemoji(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for MessageViewMemoji(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for MessageViewMemoji(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for MessageViewMemoji(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(a1[2]);
  v4 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageViewMemoji(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageViewMemoji(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageViewMemoji()
{
  return &type metadata for MessageViewMemoji;
}

uint64_t sub_100068408()
{
  return sub_1000078D8(&qword_100093498, &qword_1000934A0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_100068434(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100075284, 1);
}

uint64_t sub_100068444()
{
  return sub_1000078D8(&qword_1000934A8, &qword_1000934B0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t *sub_100068470(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[6];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = (int *)type metadata accessor for CPTimelineEntry(0);
    v23 = v22[5];
    v24 = *(_QWORD *)&v20[v23];
    *(_QWORD *)&v19[v23] = v24;
    v19[v22[6]] = v20[v22[6]];
    v19[v22[7]] = v20[v22[7]];
    v19[v22[8]] = v20[v22[8]];
    v19[v22[9]] = v20[v22[9]];
    v25 = a3[7];
    v12 = *(uint64_t *)((char *)a2 + v25);
    *(uint64_t *)((char *)v4 + v25) = v12;
    swift_bridgeObjectRetain(v24);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_1000685F8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + a2[5];
  v7 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + a2[6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = type metadata accessor for CPTimelineEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[*(int *)(v10 + 20)]);
  return swift_release(*(_QWORD *)((char *)a1 + a2[7]));
}

uint64_t *sub_1000686CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = (int *)type metadata accessor for CPTimelineEntry(0);
  v21 = v20[5];
  v22 = *(_QWORD *)&v18[v21];
  *(_QWORD *)&v17[v21] = v22;
  v17[v20[6]] = v18[v20[6]];
  v17[v20[7]] = v18[v20[7]];
  v17[v20[8]] = v18[v20[8]];
  v17[v20[9]] = v18[v20[9]];
  v23 = a3[7];
  v24 = *(uint64_t *)((char *)a2 + v23);
  *(uint64_t *)((char *)a1 + v23) = v24;
  swift_bridgeObjectRetain(v22);
  swift_retain(v24);
  return a1;
}

uint64_t *sub_10006882C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = (int *)type metadata accessor for CPTimelineEntry(0);
  v21 = v20[5];
  v22 = *(_QWORD *)&v18[v21];
  v23 = *(_QWORD *)&v17[v21];
  *(_QWORD *)&v17[v21] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v17[v20[6]] = v18[v20[6]];
  v17[v20[7]] = v18[v20[7]];
  v17[v20[8]] = v18[v20[8]];
  v17[v20[9]] = v18[v20[9]];
  v24 = a3[7];
  v25 = *(uint64_t *)((char *)a1 + v24);
  v26 = *(uint64_t *)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = v26;
  swift_retain(v26);
  swift_release(v25);
  return a1;
}

char *sub_1000689C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;

  v6 = sub_100006454(&qword_1000907B0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = (int *)type metadata accessor for CPTimelineEntry(0);
  *(_QWORD *)&v13[v16[5]] = *(_QWORD *)&v14[v16[5]];
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v13[v16[9]] = v14[v16[9]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100068B0C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100007928((uint64_t)a1, &qword_1000907B0);
    v6 = sub_100006454(&qword_1000907B0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = (int *)type metadata accessor for CPTimelineEntry(0);
  v17 = v16[5];
  v18 = *(_QWORD *)&v13[v17];
  *(_QWORD *)&v13[v17] = *(_QWORD *)&v14[v17];
  swift_bridgeObjectRelease(v18);
  v13[v16[6]] = v14[v16[6]];
  v13[v16[7]] = v14[v16[7]];
  v13[v16[8]] = v14[v16[8]];
  v13[v16[9]] = v14[v16[9]];
  v19 = a3[7];
  v20 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  swift_release(v20);
  return a1;
}

uint64_t sub_100068C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100068C90);
}

uint64_t sub_100068C90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;

  v6 = sub_100006454(&qword_1000907C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  v17 = v16 - 1;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t sub_100068D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100068D78);
}

uint64_t sub_100068D78(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907C0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7]) = a2;
  return result;
}

uint64_t type metadata accessor for CPBackgroundView(uint64_t a1)
{
  uint64_t result;

  result = qword_100093510;
  if (!qword_100093510)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPBackgroundView);
  return result;
}

void sub_100068E80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_1000126B4(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for GeometryProxy(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for CPTimelineEntry(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = "\b";
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100068F28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000752D4, 1);
}

uint64_t sub_100068F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a2;
  v3 = sub_100006454(&qword_100093568);
  __chkstk_darwin(v3);
  v67 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v58 - v6;
  v8 = type metadata accessor for CPBackgroundView(0);
  __chkstk_darwin(v8);
  v60 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v10);
  v59 = (uint64_t)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - v13;
  v15 = sub_100006454(&qword_100093570);
  v62 = *(_QWORD *)(v15 - 8);
  v63 = v15;
  __chkstk_darwin(v15);
  v61 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WidgetFamily(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v58 - v22;
  v24 = sub_100006454(&qword_100093578);
  __chkstk_darwin(v24);
  v65 = (uint64_t)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v64 = (char *)&v58 - v27;
  sub_100014E8C((uint64_t)v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for WidgetFamily.systemSmall(_:), v17);
  v28 = sub_10006B06C(&qword_1000913C0, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v20, v17, v28);
  v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v20, v17);
  v30(v23, v17);
  if ((v29 & 1) == 0)
  {
    v35 = a1 + *(int *)(v8 + 20);
    sub_100014E8C((uint64_t)v23);
    v36 = sub_100024388(v35, (uint64_t)v23);
    v30(v23, v17);
    v37 = a1 + *(int *)(v8 + 24);
    v38 = *(unsigned __int8 *)(v37 + v10[6]);
    sub_100007AF4(v37, (uint64_t)v14, type metadata accessor for CPTimelineEntry);
    if (v38 == 1)
    {
      v39 = v14[v10[9]];
      sub_10000A7C0((uint64_t)v14, type metadata accessor for CPTimelineEntry);
      v40 = v59;
      sub_100007AF4(v37, v59, type metadata accessor for CPTimelineEntry);
      v41 = (uint64_t)v60;
      if ((v39 & 1) != 0)
      {
        v42 = *(_QWORD *)(v40 + v10[5]);
        if ((unint64_t)v42 >> 62)
        {
          if (v42 < 0)
            v57 = *(_QWORD *)(v40 + v10[5]);
          else
            v57 = v42 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)(v40 + v10[5]));
          v43 = _CocoaArrayWrapper.endIndex.getter(v57);
          swift_bridgeObjectRelease(v42);
        }
        else
        {
          v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        sub_10000A7C0(v40, type metadata accessor for CPTimelineEntry);
        sub_100007AF4(a1, v41, type metadata accessor for CPBackgroundView);
        v44 = (uint64_t)v61;
        if (v43)
        {
          sub_10000A7C0(v41, type metadata accessor for CPBackgroundView);
          v34 = (uint64_t)v64;
          goto LABEL_12;
        }
LABEL_11:
        v46 = *(unsigned __int8 *)(v41 + *(int *)(v8 + 24) + v10[8]);
        sub_10000A7C0(v41, type metadata accessor for CPBackgroundView);
        v34 = (uint64_t)v64;
        if (v46 != 1)
        {
          v49 = sub_100006454(&qword_100093588);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v44, 1, 1, v49);
          goto LABEL_14;
        }
LABEL_12:
        *(_QWORD *)v44 = static VerticalAlignment.top.getter(v45);
        *(_QWORD *)(v44 + 8) = 0;
        *(_BYTE *)(v44 + 16) = 0;
        v47 = sub_100006454(&qword_100093580);
        sub_1000694F4(a1, v44 + *(int *)(v47 + 44), v36);
        v48 = sub_100006454(&qword_100093588);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v44, 0, 1, v48);
LABEL_14:
        v33 = v62;
        v32 = v63;
        sub_100007A2C(v44, v34, &qword_100093570);
        v31 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      sub_10000A7C0((uint64_t)v14, type metadata accessor for CPTimelineEntry);
      v40 = v59;
      sub_100007AF4(v37, v59, type metadata accessor for CPTimelineEntry);
      v41 = (uint64_t)v60;
    }
    sub_10000A7C0(v40, type metadata accessor for CPTimelineEntry);
    sub_100007AF4(a1, v41, type metadata accessor for CPBackgroundView);
    v44 = (uint64_t)v61;
    goto LABEL_11;
  }
  v31 = 1;
  v33 = v62;
  v32 = v63;
  v34 = (uint64_t)v64;
LABEL_15:
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v34, v31, 1, v32);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v50);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v51 = sub_100006454(&qword_100093590);
  sub_10006AA84(&v7[*(int *)(v51 + 44)]);
  v52 = v65;
  sub_100007964(v34, v65, &qword_100093578);
  v53 = v67;
  sub_100007964((uint64_t)v7, v67, &qword_100093568);
  v54 = v66;
  sub_100007964(v52, v66, &qword_100093578);
  v55 = sub_100006454(&qword_100093598);
  sub_100007964(v53, v54 + *(int *)(v55 + 48), &qword_100093568);
  sub_100007928((uint64_t)v7, &qword_100093568);
  sub_100007928(v34, &qword_100093578);
  sub_100007928(v53, &qword_100093568);
  return sub_100007928(v52, &qword_100093578);
}

uint64_t sub_1000694F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v5 = sub_100006454(&qword_1000935E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - v9;
  v11 = sub_100006454(&qword_1000935E8);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100006454(&qword_100093488);
  __chkstk_darwin(v47);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100006454(&qword_100093490);
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v47 - v20;
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v47 - v24;
  *(_QWORD *)v13 = static VerticalAlignment.top.getter(v23);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v26 = (uint64_t)&v13[*(int *)(sub_100006454(&qword_1000935F0) + 44)];
  *(_QWORD *)v10 = static HorizontalAlignment.leading.getter(v27);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v28 = sub_100006454(&qword_1000935F8);
  sub_1000698CC(a1, &v10[*(int *)(v28 + 44)]);
  sub_100007964((uint64_t)v10, (uint64_t)v7, &qword_1000935E0);
  sub_100007964((uint64_t)v7, v26, &qword_1000935E0);
  v29 = v26 + *(int *)(sub_100006454(&qword_100093600) + 48);
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 0;
  sub_100007928((uint64_t)v10, &qword_1000935E0);
  v30 = sub_100007928((uint64_t)v7, &qword_1000935E0);
  v31 = static Edge.Set.leading.getter(v30);
  v32 = v31;
  v33 = static Edge.Set.top.getter(v31);
  v34 = v33;
  v35 = static Edge.Set.trailing.getter(v33);
  v36 = Edge.Set.init(rawValue:)(0);
  v37 = Edge.Set.init(rawValue:)(v36);
  if (Edge.Set.init(rawValue:)(v37 & v32) != v32)
    v36 = Edge.Set.init(rawValue:)(v36 | v32);
  v38 = Edge.Set.init(rawValue:)(v36);
  if (Edge.Set.init(rawValue:)(v38 & v34) != v34)
    v36 = Edge.Set.init(rawValue:)(v36 | v34);
  v39 = Edge.Set.init(rawValue:)(v36);
  if (Edge.Set.init(rawValue:)(v39 & v35) != v35)
    LOBYTE(v36) = Edge.Set.init(rawValue:)(v36 | v35);
  sub_100007964((uint64_t)v13, (uint64_t)v15, &qword_1000935E8);
  v40 = &v15[*(int *)(v47 + 36)];
  *v40 = v36;
  *(_OWORD *)(v40 + 8) = 0u;
  *(_OWORD *)(v40 + 24) = 0u;
  v40[40] = 1;
  v41 = sub_100007928((uint64_t)v13, &qword_1000935E8);
  v42 = static Alignment.center.getter(v41);
  sub_1000633EC(a3, 0, a3, 0, a3, 0, 0.0, 1, (uint64_t)v21, 0.0, 1, 0.0, 1, v42, v43);
  sub_100007928((uint64_t)v15, &qword_100093488);
  sub_100007A2C((uint64_t)v21, (uint64_t)v25, &qword_100093490);
  sub_100007964((uint64_t)v25, (uint64_t)v18, &qword_100093490);
  v44 = v48;
  sub_100007964((uint64_t)v18, v48, &qword_100093490);
  v45 = v44 + *(int *)(sub_100006454(&qword_100093608) + 48);
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 0;
  sub_100007928((uint64_t)v25, &qword_100093490);
  return sub_100007928((uint64_t)v18, &qword_100093490);
}

uint64_t sub_1000698CC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v35 = a2;
  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100006454(&qword_100093610);
  v34 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - v17;
  v33 = a1;
  sub_100014E8C((uint64_t)v6);
  v19 = sub_10006B06C(&qword_100090E50, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v20 = dispatch thunk of CustomStringConvertible.description.getter(v3, v19);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  static ActivityFeedLockupVendor.makeRemoteDashboardURL(widgetId:widgetFamily:)(0xD000000000000015, 0x80000001000737B0, v20, v22);
  swift_bridgeObjectRelease(v22);
  v23 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v9, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    __chkstk_darwin(result);
    *(&v32 - 2) = v33;
    v25 = sub_100006454(&qword_100093618);
    v26 = sub_1000078D8(&qword_100093620, &qword_100093618, (uint64_t)&protocol conformance descriptor for HStack<A>);
    Link.init(destination:label:)(v9, sub_10006B17C, &v32 - 4, v25, v26);
    v27 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v18, v15, v10);
    v28 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v28(v12, v18, v10);
    v29 = v35;
    v28(v35, v12, v10);
    v30 = &v29[*(int *)(sub_100006454(&qword_100093628) + 48)];
    *(_QWORD *)v30 = 0;
    v30[8] = 0;
    v31 = *(void (**)(char *, uint64_t))(v27 + 8);
    v31(v18, v10);
    return ((uint64_t (*)(char *, uint64_t))v31)(v12, v10);
  }
  return result;
}

uint64_t sub_100069B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a3);
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = sub_100006454(&qword_100093630);
  return sub_100069BDC(a1, a2 + *(int *)(v5 + 44));
}

uint64_t sub_100069BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t);
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  double v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  char *v135;
  void (*v136)(char *, char *, uint64_t);
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;

  v191 = a1;
  v189 = a2;
  v153 = sub_100006454(&qword_1000924A8);
  __chkstk_darwin(v153);
  v157 = (uint64_t *)((char *)&v146 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v156 = type metadata accessor for Image.Scale(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v146 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100006454(&qword_100093070);
  __chkstk_darwin(v152);
  v158 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100006454(&qword_100093078);
  __chkstk_darwin(v160);
  v159 = (uint64_t)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100006454(&qword_100093080);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v164 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100006454(&qword_100093088);
  __chkstk_darwin(v165);
  v163 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100006454(&qword_100093090);
  v186 = *(_QWORD *)(v8 - 8);
  v187 = v8;
  __chkstk_darwin(v8);
  v162 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v161 = (char *)&v146 - v11;
  v182 = type metadata accessor for GKFeatureFlags(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100006454(&qword_100093098);
  __chkstk_darwin(v13);
  v188 = (uint64_t)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v185 = (char *)&v146 - v16;
  v17 = type metadata accessor for ViewGeometryAnalyzer(0);
  v18 = __chkstk_darwin(v17);
  v179 = (char *)&v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for Font.Leading(0, v18);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for WidgetFamily(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v151 = (uint64_t)&v146 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v146 - v25;
  v176 = sub_100006454(&qword_100093638);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100006454(&qword_100093640);
  __chkstk_darwin(v172);
  v178 = (char *)&v146 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100006454(&qword_100093648);
  __chkstk_darwin(v173);
  v184 = (uint64_t)&v146 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v177 = (char *)&v146 - v31;
  __chkstk_darwin(v32);
  v183 = (uint64_t)&v146 - v33;
  v34 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x8000000100073E50);
  v35 = Text.init(_:tableName:bundle:comment:)(v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v42 = static Font.Weight.semibold.getter(v35);
  v43 = Text.fontWeight(_:)(*(_QWORD *)&v42, 0, v35, v37, v41, v39);
  v45 = v44;
  v168 = v46;
  v48 = v47;
  sub_100007918(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  sub_100014E8C((uint64_t)v26);
  v147 = v22;
  v49 = *(uint64_t (**)(char *, uint64_t))(v22 + 88);
  v190 = v21;
  v50 = v49(v26, v21);
  v150 = (uint64_t (*)(uint64_t, uint64_t))v49;
  v148 = enum case for WidgetFamily.systemMedium(_:);
  v149 = enum case for WidgetFamily.systemSmall(_:);
  if ((_DWORD)v50 == enum case for WidgetFamily.systemSmall(_:)
    || (v51 = v50, (_DWORD)v50 == enum case for WidgetFamily.systemMedium(_:)))
  {
    v54 = static Font.footnote.getter(v50);
LABEL_11:
    v53 = v54;
    goto LABEL_12;
  }
  if ((_DWORD)v50 == enum case for WidgetFamily.systemLarge(_:)
    || (_DWORD)v50 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v54 = static Font.callout.getter(v50);
    goto LABEL_11;
  }
  v52 = enum case for WidgetFamily.accessoryCircular(_:);
  v53 = static Font.footnote.getter(v50);
  if (v51 != v52
    && v51 != enum case for WidgetFamily.accessoryRectangular(_:)
    && v51 != enum case for WidgetFamily.accessoryInline(_:))
  {
    (*(void (**)(char *, uint64_t))(v147 + 8))(v26, v190);
  }
LABEL_12:
  v55 = v171;
  v56 = v170;
  v57 = v169;
  v58 = v168;
  (*(void (**)(char *, _QWORD, uint64_t))(v170 + 104))(v169, enum case for Font.Leading.tight(_:), v171);
  v59 = Font.leading(_:)(v57, v53);
  swift_release(v53);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
  v60 = v58 & 1;
  v61 = Text.font(_:)(v59, v43, v45, v58 & 1, v48);
  v63 = v62;
  LOBYTE(v56) = v64;
  v66 = v65;
  swift_release(v59);
  LOBYTE(v55) = v56 & 1;
  sub_100007918(v43, v45, v60);
  swift_bridgeObjectRelease(v48);
  v171 = v191 + *(int *)(type metadata accessor for CPBackgroundView(0) + 24);
  v67 = sub_100042FF0();
  v68 = Text.foregroundColor(_:)(v67, v61, v63, v56 & 1, v66);
  v70 = v69;
  LOBYTE(v56) = v71;
  v73 = v72;
  swift_release(v67);
  LOBYTE(v56) = v56 & 1;
  sub_100007918(v61, v63, v55);
  swift_bridgeObjectRelease(v66);
  KeyPath = swift_getKeyPath(&unk_1000733D0);
  v75 = swift_getKeyPath(&unk_100073400);
  v76 = swift_getKeyPath(&unk_100073430);
  v192 = v68;
  v193 = v70;
  v194 = v56;
  v195 = v73;
  v196 = KeyPath;
  v197 = 1;
  v198 = 0;
  v199 = v75;
  v200 = 1;
  v201 = v76;
  v202 = 0x3FE8000000000000;
  v77 = sub_100006454(&qword_100093650);
  v78 = sub_10006B19C();
  v79 = v174;
  View.unredacted()(v77, v78);
  sub_100007918(v68, v70, v56);
  swift_release(v76);
  swift_release(v75);
  swift_release(KeyPath);
  v80 = swift_bridgeObjectRelease(v73);
  v81 = static Color.black.getter(v80);
  v82 = Color.opacity(_:)(0.25);
  swift_release(v81);
  v83 = v175;
  v84 = (uint64_t)v178;
  v85 = v176;
  (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v178, v79, v176);
  v86 = v84 + *(int *)(v172 + 36);
  *(_QWORD *)v86 = v82;
  *(_OWORD *)(v86 + 8) = xmmword_1000721C0;
  *(_QWORD *)(v86 + 24) = 0x3FF0000000000000;
  (*(void (**)(char *, uint64_t))(v83 + 8))(v79, v85);
  v87 = enum case for CoordinateSpace.global(_:);
  v88 = type metadata accessor for CoordinateSpace(0);
  v89 = (uint64_t)v179;
  v90 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 104))(v179, v87, v88);
  v91 = static Alignment.center.getter(v90);
  v93 = v92;
  v94 = (uint64_t)v177;
  v95 = (uint64_t)&v177[*(int *)(v173 + 36)];
  sub_100007AF4(v89, v95, type metadata accessor for ViewGeometryAnalyzer);
  v96 = (uint64_t *)(v95 + *(int *)(sub_100006454(&qword_1000916D0) + 36));
  *v96 = v91;
  v96[1] = v93;
  sub_100007964(v84, v94, &qword_100093640);
  sub_10000A7C0(v89, type metadata accessor for ViewGeometryAnalyzer);
  sub_100007928(v84, &qword_100093640);
  v97 = v183;
  sub_100007A2C(v94, v183, &qword_100093648);
  v98 = v181;
  v99 = v180;
  v100 = v182;
  v101 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, enum case for GKFeatureFlags.GameOverlayUI(_:), v182);
  LOBYTE(v91) = GKFeatureFlags.isEnabled.getter(v101);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
  if ((v91 & 1) != 0)
  {
    v102 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v103 = objc_msgSend(v102, "userInterfaceIdiom");

    if (!v103)
    {
      v139 = 1;
      v126 = v186;
      v138 = v187;
      v122 = (uint64_t)v185;
      goto LABEL_27;
    }
  }
  v104 = Image.init(systemName:)(0x2E6E6F7276656863, 0xED00007468676972);
  v105 = v155;
  v106 = v154;
  v107 = v156;
  (*(void (**)(char *, _QWORD, uint64_t))(v155 + 104))(v154, enum case for Image.Scale.small(_:), v156);
  v108 = swift_getKeyPath(&unk_100073460);
  v109 = v157;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))((char *)v157 + *(int *)(v153 + 28), v106, v107);
  *v109 = v108;
  v110 = (uint64_t)v158;
  sub_100007964((uint64_t)v109, (uint64_t)&v158[*(int *)(v152 + 36)], &qword_1000924A8);
  *(_QWORD *)v110 = v104;
  *(_BYTE *)(v110 + 8) = 1;
  swift_retain(v104);
  sub_100007928((uint64_t)v109, &qword_1000924A8);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
  swift_release(v104);
  v111 = sub_100043168();
  v112 = swift_getKeyPath(&unk_100073490);
  v113 = v159;
  sub_100007964(v110, v159, &qword_100093070);
  v114 = v160;
  v115 = (uint64_t *)(v113 + *(int *)(v160 + 36));
  *v115 = v112;
  v115[1] = v111;
  v116 = sub_100007928(v110, &qword_100093070);
  v117 = static Font.Weight.semibold.getter(v116);
  v118 = sub_10006144C();
  v119 = v164;
  View.fontWeight(_:)(*(_QWORD *)&v117, 0, v114, v118);
  sub_100007928(v113, &qword_100093078);
  v120 = v151;
  sub_100014E8C(v151);
  v121 = v150(v120, v190);
  v122 = (uint64_t)v185;
  if ((_DWORD)v121 == v149 || (v123 = v121, (_DWORD)v121 == v148))
  {
    v127 = static Font.footnote.getter(v121);
LABEL_24:
    v125 = v127;
    goto LABEL_25;
  }
  if ((_DWORD)v121 == enum case for WidgetFamily.systemLarge(_:)
    || (_DWORD)v121 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v127 = static Font.callout.getter(v121);
    goto LABEL_24;
  }
  v124 = enum case for WidgetFamily.accessoryCircular(_:);
  v125 = static Font.footnote.getter(v121);
  if (v123 != v124)
  {
    v126 = v186;
    if (v123 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v123 != enum case for WidgetFamily.accessoryInline(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v120, v190);
    }
    goto LABEL_26;
  }
LABEL_25:
  v126 = v186;
LABEL_26:
  v128 = swift_getKeyPath(&unk_1000734C0);
  v129 = v166;
  v130 = (uint64_t)v163;
  v131 = v167;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v163, v119, v167);
  v132 = v165;
  v133 = (uint64_t *)(v130 + *(int *)(v165 + 36));
  *v133 = v128;
  v133[1] = v125;
  (*(void (**)(char *, uint64_t))(v129 + 8))(v119, v131);
  v134 = sub_1000615A4();
  v135 = v162;
  View.unredacted()(v132, v134);
  sub_100007928(v130, &qword_100093088);
  v136 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
  v137 = v161;
  v138 = v187;
  v136(v161, v135, v187);
  v136((char *)v122, v137, v138);
  v139 = 0;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56))(v122, v139, 1, v138);
  v140 = v184;
  sub_100007964(v97, v184, &qword_100093648);
  v141 = v188;
  sub_100007964(v122, v188, &qword_100093098);
  v142 = v189;
  sub_100007964(v140, v189, &qword_100093648);
  v143 = sub_100006454(&qword_100093670);
  sub_100007964(v141, v142 + *(int *)(v143 + 48), &qword_100093098);
  v144 = v142 + *(int *)(v143 + 64);
  *(_QWORD *)v144 = 0;
  *(_BYTE *)(v144 + 8) = 0;
  sub_100007928(v122, &qword_100093098);
  sub_100007928(v97, &qword_100093648);
  sub_100007928(v141, &qword_100093098);
  return sub_100007928(v140, &qword_100093648);
}

uint64_t sub_10006AA84@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;

  v29 = a1;
  v1 = type metadata accessor for WidgetFamily(0);
  v30 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_1000935A0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - v15;
  sub_100014E8C((uint64_t)v3);
  v17 = sub_10006B06C(&qword_100090E50, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v18 = dispatch thunk of CustomStringConvertible.description.getter(v1, v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v3, v1);
  static ActivityFeedLockupVendor.makeRemoteDashboardURL(widgetId:widgetFamily:)(0xD000000000000015, 0x80000001000737B0, v18, v20);
  swift_bridgeObjectRelease(v20);
  v21 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v6, 1, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v23 = sub_100006454(&qword_1000935A8);
    v24 = sub_10006B0AC();
    Link.init(destination:label:)(v6, sub_10006AD00, 0, v23, v24);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v13, v7);
    v25 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v25(v10, v16, v7);
    v26 = v29;
    v25(v29, v10, v7);
    v27 = &v26[*(int *)(sub_100006454(&qword_1000935C8) + 48)];
    *(_QWORD *)v27 = 0;
    v27[8] = 0;
    v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v16, v7);
    return ((uint64_t (*)(char *, uint64_t))v28)(v10, v7);
  }
  return result;
}

uint64_t sub_10006AD00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  uint64_t v30;

  v2 = type metadata accessor for GameCenterLogo(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - v6;
  v8 = sub_100006454(&qword_1000935C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006454(&qword_1000935A8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v15 = &v10[*(int *)(sub_100006454(&qword_1000935D0) + 44)];
  *v4 = swift_getKeyPath(&unk_1000733A0);
  v16 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v4, v16, 0);
  sub_10006B138((uint64_t)v4, (uint64_t)v7);
  sub_100007AF4((uint64_t)v7, (uint64_t)v4, type metadata accessor for GameCenterLogo);
  *(_QWORD *)v15 = 0;
  v15[8] = 0;
  v17 = sub_100006454(&qword_1000935D8);
  sub_100007AF4((uint64_t)v4, (uint64_t)&v15[*(int *)(v17 + 48)], type metadata accessor for GameCenterLogo);
  sub_10000A7C0((uint64_t)v7, type metadata accessor for GameCenterLogo);
  v18 = sub_10000A7C0((uint64_t)v4, type metadata accessor for GameCenterLogo);
  v19 = static Edge.Set.leading.getter(v18);
  v20 = v19;
  v21 = static Edge.Set.top.getter(v19);
  v22 = v21;
  v23 = static Edge.Set.trailing.getter(v21);
  v24 = Edge.Set.init(rawValue:)(0);
  v25 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v25 & v20) != v20)
    v24 = Edge.Set.init(rawValue:)(v24 | v20);
  v26 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v26 & v22) != v22)
    v24 = Edge.Set.init(rawValue:)(v24 | v22);
  v27 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v27 & v23) != v23)
    LOBYTE(v24) = Edge.Set.init(rawValue:)(v24 | v23);
  sub_100007964((uint64_t)v10, (uint64_t)v14, &qword_1000935C0);
  v28 = &v14[*(int *)(v11 + 36)];
  *v28 = v24;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  v28[40] = 1;
  sub_100007928((uint64_t)v10, &qword_1000935C0);
  return sub_100007A2C((uint64_t)v14, a1, &qword_1000935A8);
}

uint64_t sub_10006AF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = sub_100006454(&qword_100093550);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v3 = static Alignment.center.getter(v4);
  v3[1] = v5;
  v6 = sub_100006454(&qword_100093558);
  sub_100068F38(v0, (uint64_t)v3 + *(int *)(v6 + 44));
  v7 = sub_1000078D8(&qword_100093560, &qword_100093550, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.widgetAccentable(_:)(1, v1, v7);
  return sub_100007928((uint64_t)v3, &qword_100093550);
}

uint64_t sub_10006B06C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006B0AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000935B0;
  if (!qword_1000935B0)
  {
    v1 = sub_100006494(&qword_1000935A8);
    sub_1000078D8(&qword_1000935B8, &qword_1000935C0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000935B0);
  }
  return result;
}

uint64_t sub_10006B138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GameCenterLogo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B17C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_100069B90(*(_QWORD *)(v2 + 16), a1, a2);
}

unint64_t sub_10006B19C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093658;
  if (!qword_100093658)
  {
    v1 = sub_100006494(&qword_100093650);
    sub_10006B220();
    sub_1000078D8(&qword_1000923F0, &qword_1000923F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093658);
  }
  return result;
}

unint64_t sub_10006B220()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093660;
  if (!qword_100093660)
  {
    v1 = sub_100006494(&qword_100093668);
    sub_10004B934();
    sub_1000078D8(&qword_100091410, &qword_100091418, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093660);
  }
  return result;
}

uint64_t sub_10006B2BC()
{
  _QWORD v1[2];

  v1[0] = sub_100006494(&qword_100093550);
  v1[1] = sub_1000078D8(&qword_100093560, &qword_100093550, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

uint64_t sub_10006B320()
{
  void *v0;
  char v1;
  uint64_t result;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  type metadata accessor for LockdownModeManager(0);
  v0 = (void *)static LockdownModeManager.shared.getter();
  v1 = LockdownModeManager.enabled.getter();

  result = 0;
  if ((v1 & 1) == 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(GKLocalPlayer), "authenticatedLocalPlayers");
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(_QWORD *)(v4 + 16))
    {
      sub_100015CA4(v4 + 32, (uint64_t)&v7);
      swift_bridgeObjectRelease(v4);
      if (*((_QWORD *)&v8 + 1))
      {
        v5 = sub_10006B45C();
        if (swift_dynamicCast(&v6, &v7, (char *)&type metadata for Any + 8, v5, 6))
          return v6;
        else
          return 0;
      }
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
      swift_bridgeObjectRelease(v4);
    }
    sub_10006B41C((uint64_t)&v7);
    return 0;
  }
  return result;
}

uint64_t sub_10006B41C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006454(&qword_100091C70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10006B45C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093678;
  if (!qword_100093678)
  {
    v1 = objc_opt_self(GKLocalPlayer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100093678);
  }
  return result;
}

uint64_t sub_10006B498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B4A4);
}

uint64_t sub_10006B4A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;

  v6 = sub_100006454(&qword_1000907B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100006454(&qword_1000907C0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for GeometryProxy(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_9;
  }
  v15 = type metadata accessor for CPTimelineEntry(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[9] + 32);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  if (v18 < 0)
    v18 = -1;
  return (v18 + 1);
}

uint64_t sub_10006B5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B5B8);
}

uint64_t sub_10006B5B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_100006454(&qword_1000907B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_100006454(&qword_1000907C0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = type metadata accessor for GeometryProxy(0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_9;
  }
  result = type metadata accessor for CPTimelineEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[9] + 32) = a2;
  return result;
}

uint64_t type metadata accessor for CPMediumContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000936D8;
  if (!qword_1000936D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CPMediumContentView);
  return result;
}

void sub_10006B6EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  sub_10000764C(319, (unint64_t *)&qword_100090830, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000764C(319, (unint64_t *)&qword_100090838, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      v6 = type metadata accessor for GeometryProxy(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for CPTimelineEntry(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100073550;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10006B7D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100075324, 1);
}

uint64_t sub_10006B7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a2;
  v3 = sub_100006454(&qword_100093748);
  __chkstk_darwin(v3);
  v44 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v41 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - v12;
  v14 = sub_100006454(&qword_100093750);
  __chkstk_darwin(v14);
  v42 = (uint64_t)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - v17;
  __chkstk_darwin(v19);
  v21 = (char *)&v40 - v20;
  v22 = a1;
  v23 = a1 + *(int *)(type metadata accessor for CPMediumContentView(0) + 24);
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  sub_100006904(*(_QWORD *)v23, v25);
  LOBYTE(a1) = sub_100014EBC(v24, v25);
  sub_100006A4C(v24, v25);
  v26 = 0;
  if ((a1 & 1) != 0)
  {
    v27 = sub_100015074((uint64_t)v13);
    static WidgetRenderingMode.accented.getter(v27);
    v28 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
    v29 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v8, v28);
    v30 = *(void (**)(char *, uint64_t))(v41 + 8);
    v30(v10, v8);
    v30(v13, v8);
    if ((v29 & 1) != 0)
    {
      v26 = 0;
    }
    else
    {
      if (qword_1000906D8 != -1)
        swift_once(&qword_1000906D8, sub_10000AB08);
      v26 = qword_1000959B0;
      swift_retain(qword_1000959B0);
    }
  }
  v45 = v26;
  v31 = sub_100006454(&qword_100093758);
  v32 = sub_10006EEA8();
  View.accessibilityHidden(_:)(1, v31, v32);
  swift_release(v26);
  sub_100007A2C((uint64_t)v18, (uint64_t)v21, &qword_100093750);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v33);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v34 = sub_100006454(&qword_100093768);
  sub_10006BB5C(v22, (uint64_t)&v7[*(int *)(v34 + 44)]);
  v35 = v42;
  sub_100007964((uint64_t)v21, v42, &qword_100093750);
  v36 = v44;
  sub_100007964((uint64_t)v7, v44, &qword_100093748);
  v37 = v43;
  sub_100007964(v35, v43, &qword_100093750);
  v38 = sub_100006454(&qword_100093770);
  sub_100007964(v36, v37 + *(int *)(v38 + 48), &qword_100093748);
  sub_100007928((uint64_t)v7, &qword_100093748);
  sub_100007928((uint64_t)v21, &qword_100093750);
  sub_100007928(v36, &qword_100093748);
  return sub_100007928(v35, &qword_100093750);
}

uint64_t sub_10006BB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[3];

  v69 = a2;
  v3 = sub_100006454(&qword_100093778);
  __chkstk_darwin(v3);
  v67 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_1000922D8);
  __chkstk_darwin(v5);
  v65 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100006454(&qword_100093780);
  __chkstk_darwin(v66);
  v64 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v68 = (uint64_t)&v60 - v9;
  v63 = type metadata accessor for WidgetFamily(0);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100093788);
  __chkstk_darwin(v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006454(&qword_100093790);
  __chkstk_darwin(v15);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100006454(&qword_100093798);
  __chkstk_darwin(v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100006454(&qword_1000918C0);
  __chkstk_darwin(v21);
  v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100006454(&qword_1000937A0);
  __chkstk_darwin(v24);
  v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v62 = (uint64_t)&v60 - v28;
  sub_10006C0BC((uint64_t)v23);
  sub_10006D3F4(a1, (uint64_t)v14);
  v29 = *(int *)(type metadata accessor for CPMediumContentView(0) + 28);
  v60 = a1;
  v30 = a1 + v29;
  sub_100014E8C((uint64_t)v11);
  v31 = sub_100024388(v30, (uint64_t)v11);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v11, v63);
  v33 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(v70, *(_QWORD *)&v31, 0, 0, 1, v33, v34);
  sub_100007964((uint64_t)v14, (uint64_t)v17, &qword_100093788);
  v35 = &v17[*(int *)(v15 + 36)];
  v36 = v70[1];
  *(_OWORD *)v35 = v70[0];
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v70[2];
  sub_100007928((uint64_t)v14, &qword_100093788);
  v37 = sub_10006EF04();
  View.accessibilityHidden(_:)(1, v15, v37);
  v38 = sub_100007928((uint64_t)v17, &qword_100093790);
  v39 = static Alignment.center.getter(v38);
  v41 = v40;
  v42 = (uint64_t)&v26[*(int *)(v24 + 36)];
  sub_100007964((uint64_t)v20, v42, &qword_100093798);
  v43 = (uint64_t *)(v42 + *(int *)(sub_100006454(&qword_1000937E8) + 36));
  *v43 = v39;
  v43[1] = v41;
  sub_100007964((uint64_t)v23, (uint64_t)v26, &qword_1000918C0);
  sub_100007928((uint64_t)v20, &qword_100093798);
  sub_100007928((uint64_t)v23, &qword_1000918C0);
  v44 = v62;
  sub_100007A2C((uint64_t)v26, v62, &qword_1000937A0);
  v45 = v65;
  sub_10006C61C(v65);
  v46 = v67;
  v47 = sub_10006CBE4(v67);
  v48 = static Alignment.center.getter(v47);
  v50 = v49;
  v51 = (uint64_t)v64;
  v52 = (uint64_t)&v64[*(int *)(v66 + 36)];
  sub_100007964(v46, v52, &qword_100093778);
  v53 = (uint64_t *)(v52 + *(int *)(sub_100006454(&qword_1000937F0) + 36));
  *v53 = v48;
  v53[1] = v50;
  v54 = v51;
  sub_100007964(v45, v51, &qword_1000922D8);
  sub_100007928(v46, &qword_100093778);
  sub_100007928(v45, &qword_1000922D8);
  v55 = v51;
  v56 = v68;
  sub_100007A2C(v55, v68, &qword_100093780);
  sub_100007964(v44, (uint64_t)v26, &qword_1000937A0);
  sub_100007964(v56, v54, &qword_100093780);
  v57 = v69;
  sub_100007964((uint64_t)v26, v69, &qword_1000937A0);
  v58 = sub_100006454(&qword_1000937F8);
  sub_100007964(v54, v57 + *(int *)(v58 + 48), &qword_100093780);
  sub_100007928(v56, &qword_100093780);
  sub_100007928(v44, &qword_1000937A0);
  sub_100007928(v54, &qword_100093780);
  return sub_100007928((uint64_t)v26, &qword_1000937A0);
}

uint64_t sub_10006C0BC@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[3];

  v75 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v69 = *(_QWORD *)(v2 - 8);
  v70 = v2;
  __chkstk_darwin(v2);
  v68 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100006454(&qword_100091A20);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v62 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100006454(&qword_100091A28);
  __chkstk_darwin(v64);
  v67 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006454(&qword_100091A30);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  __chkstk_darwin(v6);
  v66 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100090BC8);
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v71 = *(_QWORD *)(v15 - 8);
  v72 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v61 = (char *)&v59 - v19;
  v20 = type metadata accessor for CPMediumContentView(0);
  v21 = v1;
  v22 = &v1[*(int *)(v20 + 32)];
  v23 = type metadata accessor for CPTimelineEntry(0);
  v24 = *(_QWORD *)&v22[*(int *)(v23 + 20)];
  if (!((unint64_t)v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*(_QWORD *)&v22[*(int *)(v23 + 20)]);
    if (v25)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v24);
    goto LABEL_14;
  }
  if (v24 < 0)
    v58 = *(_QWORD *)&v22[*(int *)(v23 + 20)];
  else
    v58 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)&v22[*(int *)(v23 + 20)]);
  result = _CocoaArrayWrapper.endIndex.getter(v58);
  if (!result)
    goto LABEL_13;
LABEL_3:
  if ((v24 & 0xC000000000000001) != 0)
  {
    v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v60 = *(_QWORD *)(v24 + 32);
    swift_retain(v60);
LABEL_6:
    swift_bridgeObjectRelease(v24);
    sub_100014E8C((uint64_t)v11);
    sub_1000083FC((uint64_t)v11, (uint64_t)v14);
    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v11, v8);
    v28 = v71;
    v29 = v72;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v14, 1, v72) != 1)
    {
      v30 = *(void (**)(void))(v28 + 32);
      v59 = v17;
      v31 = v61;
      v30();
      v32 = (uint64_t)&v21[*(int *)(v20 + 28)];
      v33 = v28;
      sub_100014E8C((uint64_t)v11);
      v34 = sub_100024388(v32, (uint64_t)v11);
      v27(v11, v8);
      v35 = v59;
      v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 16))(v59, v31, v29);
      __chkstk_darwin(v36);
      *(&v59 - 2) = v21;
      v37 = v60;
      *(&v59 - 1) = (char *)v60;
      v38 = sub_100006454(&qword_100091A38);
      v39 = sub_1000078D8(&qword_100091A40, &qword_100091A38, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v40 = v62;
      v41 = Link.init(destination:label:)(v35, sub_10006F1A0, &v59 - 4, v38, v39);
      v42 = static Alignment.center.getter(v41);
      _FrameLayout.init(width:height:alignment:)(v76, *(_QWORD *)&v34, 0, 0, 1, v42, v43);
      v44 = v63;
      v45 = (uint64_t)v67;
      v46 = v65;
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v67, v40, v65);
      v47 = v64;
      v48 = (_OWORD *)(v45 + *(int *)(v64 + 36));
      v49 = v76[1];
      *v48 = v76[0];
      v48[1] = v49;
      v48[2] = v76[2];
      v50 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v40, v46);
      v51 = v68;
      static AccessibilityChildBehavior.combine.getter(v50);
      v52 = sub_100029AC0();
      v53 = v66;
      View.accessibilityElement(children:)(v51, v47, v52);
      swift_release(v37);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v70);
      sub_100007928(v45, &qword_100091A28);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v29);
      v55 = v73;
      v54 = v74;
      v56 = v75;
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v75, v53, v74);
      v57 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v56, v57, 1, v54);
    }
    swift_release(v60);
    sub_100007928((uint64_t)v14, &qword_100090BC8);
LABEL_14:
    v57 = 1;
    v54 = v74;
    v56 = v75;
    v55 = v73;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v56, v57, 1, v54);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006C61C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *);
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v80 = a1;
  v2 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v2);
  v72 = (uint64_t *)((char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for GeometryProxy(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CPAppGridView(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100006454(&qword_1000922C8);
  __chkstk_darwin(v74);
  v76 = (uint64_t)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100006454(&qword_1000922D0);
  __chkstk_darwin(v75);
  v79 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100006454(&qword_1000922D8);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CPMediumContentView(0);
  sub_100007AF4(v1 + *(int *)(v20 + 32), (uint64_t)v13, type metadata accessor for CPTimelineEntry);
  v21 = *(void (**)(char *))(v8 + 16);
  v73 = v1 + *(int *)(v20 + 28);
  v21(v10);
  *v6 = swift_getKeyPath(&unk_1000735E8);
  v22 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v6, v22, 0);
  KeyPath = swift_getKeyPath(&unk_1000735B8);
  v24 = (uint64_t)v72;
  *v72 = KeyPath;
  v25 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_100007AB0((uint64_t)v13, (uint64_t)v16, type metadata accessor for CPTimelineEntry);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v16[v14[5]], v10, v7);
  *(_QWORD *)&v16[v14[6]] = 1;
  *(_QWORD *)&v16[v14[7]] = 2;
  v16[v14[8]] = 0;
  v26 = &v16[v14[9]];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_100073618);
  v27 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = &v16[v14[10]];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_100073648);
  v29 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  sub_100007A2C((uint64_t)v6, (uint64_t)&v16[v14[11]], &qword_1000907C0);
  v30 = sub_100007A2C(v24, (uint64_t)&v16[v14[12]], &qword_1000908C0);
  v31 = static Edge.Set.trailing.getter(v30);
  v32 = v31;
  v33 = static Edge.Set.bottom.getter(v31);
  v34 = Edge.Set.init(rawValue:)(0);
  v35 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v35 & v32) != v32)
    v34 = Edge.Set.init(rawValue:)(v34 | v32);
  v36 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v36 & v33) != v33)
    LOBYTE(v34) = Edge.Set.init(rawValue:)(v34 | v33);
  v37 = v76;
  sub_100007AF4((uint64_t)v16, v76, type metadata accessor for CPAppGridView);
  v38 = v37 + *(int *)(v74 + 36);
  *(_BYTE *)v38 = v34;
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_BYTE *)(v38 + 40) = 1;
  v39 = sub_10000A7C0((uint64_t)v16, type metadata accessor for CPAppGridView);
  v40 = static Edge.Set.leading.getter(v39);
  v41 = Edge.Set.init(rawValue:)(0);
  v42 = v41;
  v43 = Edge.Set.init(rawValue:)(v41);
  v44 = Edge.Set.init(rawValue:)(v43 & v40);
  if (v44 != v40)
  {
    v44 = Edge.Set.init(rawValue:)(v42 | v40);
    LOBYTE(v42) = v44;
  }
  GeometryProxy.size.getter(v44);
  v45 = 16.0;
  if (v46 < 155.0)
    v45 = 8.0;
  v47 = EdgeInsets.init(_all:)(v45);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  v54 = v79;
  sub_100007964(v37, v79, &qword_1000922C8);
  v55 = v54 + *(int *)(v75 + 36);
  *(_BYTE *)v55 = v42;
  *(double *)(v55 + 8) = v47;
  *(_QWORD *)(v55 + 16) = v49;
  *(_QWORD *)(v55 + 24) = v51;
  *(_QWORD *)(v55 + 32) = v53;
  *(_BYTE *)(v55 + 40) = 0;
  v56 = sub_100007928(v37, &qword_1000922C8);
  v57 = static Edge.Set.top.getter(v56);
  v58 = Edge.Set.init(rawValue:)(0);
  v59 = v58;
  v60 = Edge.Set.init(rawValue:)(v58);
  if (Edge.Set.init(rawValue:)(v60 & v57) != v57)
    LOBYTE(v59) = Edge.Set.init(rawValue:)(v59 | v57);
  v61 = EdgeInsets.init(_all:)(33.0);
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v68 = v78;
  sub_100007964(v54, v78, &qword_1000922D0);
  v69 = v68 + *(int *)(v77 + 36);
  *(_BYTE *)v69 = v59;
  *(double *)(v69 + 8) = v61;
  *(_QWORD *)(v69 + 16) = v63;
  *(_QWORD *)(v69 + 24) = v65;
  *(_QWORD *)(v69 + 32) = v67;
  *(_BYTE *)(v69 + 40) = 0;
  sub_100007928(v54, &qword_1000922D0);
  return sub_100007A2C(v68, v80, &qword_1000922D8);
}

uint64_t sub_10006CBE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v45 = a1;
  v42 = sub_100006454(&qword_100093800);
  __chkstk_darwin(v42);
  v4 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100006454(&qword_100093808);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v41 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CPMediumContentView(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetRenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - v15;
  v17 = sub_100015074((uint64_t)&v40 - v15);
  static WidgetRenderingMode.accented.getter(v17);
  v18 = sub_100007A70((unint64_t *)&qword_100090990, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v10, v18);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  v20(v16, v10);
  if ((v19 & 1) != 0)
    goto LABEL_17;
  v21 = v2 + *(int *)(v7 + 32);
  v22 = type metadata accessor for CPTimelineEntry(0);
  v23 = *(_BYTE *)(v21 + *(int *)(v22 + 32));
  sub_100007AF4(v2, (uint64_t)v9, type metadata accessor for CPMediumContentView);
  if ((v23 & 1) != 0)
  {
    v24 = &v9[*(int *)(v7 + 24)];
    v25 = *(_QWORD *)v24;
    v26 = v24[8];
    sub_100006904(*(_QWORD *)v24, v26);
    v27 = sub_100014EBC(v25, v26);
    sub_100006A4C(v25, v26);
    sub_10000A7C0((uint64_t)v9, type metadata accessor for CPMediumContentView);
    if ((v27 & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    sub_10000A7C0((uint64_t)v9, type metadata accessor for CPMediumContentView);
  }
  v28 = *(_QWORD *)(v21 + *(int *)(v22 + 20));
  if (!((unint64_t)v28 >> 62))
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v28);
    if (v29)
      goto LABEL_8;
LABEL_16:
    swift_bridgeObjectRelease(v28);
LABEL_17:
    v38 = 1;
    v37 = v45;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v37, v38, 1, v44);
  }
  if (v28 < 0)
    v39 = v28;
  else
    v39 = v28 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v28);
  result = _CocoaArrayWrapper.endIndex.getter(v39);
  if (!result)
    goto LABEL_16;
LABEL_8:
  if ((v28 & 0xC000000000000001) != 0)
  {
    v31 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v31 = *(_QWORD *)(v28 + 32);
    swift_retain(v31);
LABEL_11:
    v32 = swift_bridgeObjectRelease(v28);
    *v4 = static Alignment.center.getter(v32);
    v4[1] = v33;
    v34 = sub_100006454(&qword_100093810);
    sub_10006E280(v31, v2, (_QWORD *)((char *)v4 + *(int *)(v34 + 44)));
    v35 = sub_1000078D8(&qword_100093818, &qword_100093800, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v36 = (uint64_t)v41;
    View.accessibilityHidden(_:)(1, v42, v35);
    swift_release(v31);
    sub_100007928((uint64_t)v4, &qword_100093800);
    v37 = v45;
    sub_100007A2C(v36, v45, &qword_100093808);
    v38 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v37, v38, 1, v44);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006CF74()
{
  uint64_t v1;

  v1 = static Color.clear.getter();
  View.accessibilityHidden(_:)(1, &type metadata for Color, &protocol witness table for Color);
  return swift_release(v1);
}

uint64_t sub_10006CFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v6 = sub_100006454(&qword_100091A58);
  return sub_10006D030(a1, a2, (_QWORD *)(a3 + *(int *)(v6 + 44)));
}

uint64_t sub_10006D030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v47 = a3;
  v48 = a2;
  v4 = sub_100006454(&qword_1000908C0);
  __chkstk_darwin(v4);
  v46 = (uint64_t *)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100006454(&qword_1000907C0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v11;
  v12 = type metadata accessor for GeometryProxy(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for CPTitleView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v43 - v20;
  v22 = (int *)type metadata accessor for CPMediumContentView(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1 + v22[7], v12);
  sub_100007AF4(a1 + v22[8], (uint64_t)v11, type metadata accessor for CPTimelineEntry);
  v23 = (__int128 *)(a1 + v22[9]);
  v24 = *((_QWORD *)v23 + 4);
  v25 = v23[1];
  v49 = *v23;
  v50 = v25;
  v51 = v24;
  swift_retain(v48);
  v26 = sub_100006454(&qword_1000908C8);
  State.projectedValue.getter(v52, v26);
  v27 = v52[0];
  v44 = v52[1];
  v43 = v53;
  v28 = v54;
  v29 = v55;
  *v8 = swift_getKeyPath(&unk_1000735E8);
  v30 = sub_100006454(&qword_1000907B0);
  swift_storeEnumTagMultiPayload(v8, v30, 0);
  KeyPath = swift_getKeyPath(&unk_1000735B8);
  v32 = (uint64_t)v46;
  *v46 = KeyPath;
  v33 = sub_100006454(&qword_1000908D0);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  *(_QWORD *)v18 = swift_getKeyPath(&unk_100073618);
  v34 = sub_100006454(&qword_1000908D8);
  swift_storeEnumTagMultiPayload(v18, v34, 0);
  v35 = &v18[v16[5]];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_100073648);
  v36 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  sub_100007A2C((uint64_t)v8, (uint64_t)&v18[v16[6]], &qword_1000907C0);
  sub_100007A2C(v32, (uint64_t)&v18[v16[7]], &qword_1000908C0);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v16[8]], v15, v12);
  sub_100007AB0((uint64_t)v45, (uint64_t)&v18[v16[9]], type metadata accessor for CPTimelineEntry);
  *(_QWORD *)&v18[v16[10]] = v48;
  v37 = &v18[v16[11]];
  v38 = v44;
  *(_QWORD *)v37 = v27;
  *((_QWORD *)v37 + 1) = v38;
  *((_OWORD *)v37 + 1) = v43;
  *((_QWORD *)v37 + 4) = v28;
  *((_QWORD *)v37 + 5) = v29;
  sub_100007AB0((uint64_t)v18, (uint64_t)v21, type metadata accessor for CPTitleView);
  sub_100007AF4((uint64_t)v21, (uint64_t)v18, type metadata accessor for CPTitleView);
  v39 = v47;
  *v47 = 0;
  *((_BYTE *)v39 + 8) = 0;
  v40 = v39;
  v41 = sub_100006454(&qword_100091A60);
  sub_100007AF4((uint64_t)v18, (uint64_t)v40 + *(int *)(v41 + 48), type metadata accessor for CPTitleView);
  sub_10000A7C0((uint64_t)v21, type metadata accessor for CPTitleView);
  return sub_10000A7C0((uint64_t)v18, type metadata accessor for CPTitleView);
}

uint64_t sub_10006D3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = sub_100006454(&qword_1000937C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100006454(&qword_1000937E0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for WidgetFamily(0);
  v45 = *(_QWORD *)(v10 - 8);
  v46 = v10;
  __chkstk_darwin(v10);
  v44 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100006454(&qword_100093858);
  __chkstk_darwin(v47);
  v48 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CPMediumContentView(0);
  v14 = a1 + *(int *)(v13 + 32);
  v15 = type metadata accessor for CPTimelineEntry(0);
  if (*(_BYTE *)(v14 + *(int *)(v15 + 32)) == 1)
  {
    v16 = a1 + *(int *)(v13 + 24);
    v17 = *(_QWORD *)v16;
    v43 = v13;
    v18 = a1;
    v19 = v9;
    v20 = v7;
    v21 = v6;
    v22 = a2;
    v23 = *(_BYTE *)(v16 + 8);
    sub_100006904(v17, v23);
    v24 = sub_100014EBC(v17, v23);
    v25 = v23;
    a2 = v22;
    v6 = v21;
    v7 = v20;
    v9 = v19;
    a1 = v18;
    sub_100006A4C(v17, v25);
    if ((v24 & 1) == 0)
    {
      v38 = v48;
      swift_storeEnumTagMultiPayload(v48, v47, 0);
      v39 = sub_1000078D8(&qword_1000937D8, &qword_1000937E0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      _ConditionalContent<>.init(storage:)(v38, &type metadata for EmptyView, v7, &protocol witness table for EmptyView, v39);
      v40 = sub_100006454(&qword_1000937D0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a2, 0, 1, v40);
    }
  }
  v26 = *(_QWORD *)(v14 + *(int *)(v15 + 20));
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v41 = *(_QWORD *)(v14 + *(int *)(v15 + 20));
    else
      v41 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    result = _CocoaArrayWrapper.endIndex.getter(v41);
    if (result)
      goto LABEL_5;
LABEL_16:
    swift_bridgeObjectRelease(v26);
    goto LABEL_17;
  }
  v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v26);
  if (!v27)
    goto LABEL_16;
LABEL_5:
  if ((v26 & 0xC000000000000001) != 0)
  {
    v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
  }
  else
  {
    if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v29 = *(_QWORD *)(v26 + 32);
    swift_retain(v29);
  }
  swift_bridgeObjectRelease(v26);
  v30 = v44;
  sub_100014E8C(v44);
  v31 = sub_10001FC38(v30, 1);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v30, v46);
  if (v31)
  {
    *v9 = static Alignment.center.getter(v32);
    v9[1] = v33;
    v34 = sub_100006454(&qword_100093860);
    sub_10006D828(v31, a1, (uint64_t)v9 + *(int *)(v34 + 44));
    v35 = v48;
    sub_100007964((uint64_t)v9, v48, &qword_1000937E0);
    swift_storeEnumTagMultiPayload(v35, v47, 1);
    v36 = sub_1000078D8(&qword_1000937D8, &qword_1000937E0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v35, &type metadata for EmptyView, v7, &protocol witness table for EmptyView, v36);

    swift_release(v29);
    sub_100007928((uint64_t)v9, &qword_1000937E0);
    v37 = sub_100006454(&qword_1000937D0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v6, 0, 1, v37);
    return sub_100007A2C((uint64_t)v6, a2, &qword_1000937C0);
  }
  swift_release(v29);
LABEL_17:
  v42 = sub_100006454(&qword_1000937D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a2, 1, 1, v42);
}

uint64_t sub_10006D828@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v82 = a2;
  v93 = a3;
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v91 = *(_QWORD *)(v4 - 8);
  v92 = v4;
  __chkstk_darwin(v4);
  v86 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v83 = (uint64_t)&v71 - v7;
  v8 = type metadata accessor for BlendMode(0);
  v89 = *(_QWORD *)(v8 - 8);
  v90 = v8;
  __chkstk_darwin(v8);
  v88 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100006454(&qword_1000919C0);
  __chkstk_darwin(v79);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_1000919C8);
  v84 = *(_QWORD *)(v12 - 8);
  v85 = v12;
  __chkstk_darwin(v12);
  v77 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100006454(&qword_1000919D0);
  __chkstk_darwin(v80);
  v87 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v78 = (char *)&v71 - v16;
  __chkstk_darwin(v17);
  v81 = (uint64_t)&v71 - v18;
  v19 = type metadata accessor for ColorScheme(0);
  v75 = *(_QWORD *)(v19 - 8);
  v76 = v19;
  __chkstk_darwin(v19);
  v74 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Image.ResizingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100006454(&qword_1000908F8);
  __chkstk_darwin(v25);
  v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100006454(&qword_100090900);
  __chkstk_darwin(v28);
  v30 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100006454(&qword_100090908);
  __chkstk_darwin(v72);
  v32 = (char *)&v71 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v73 = (uint64_t)&v71 - v34;
  v35 = Image.init(uiImage:)(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for Image.ResizingMode.stretch(_:), v21);
  v36 = Image.resizable(capInsets:resizingMode:)(v24, v35, 0.0, 0.0, 0.0, 0.0);
  swift_release(v35);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  *(_QWORD *)v27 = static Alignment.center.getter(v37);
  *((_QWORD *)v27 + 1) = v38;
  v39 = sub_100006454(&qword_100090948);
  sub_100054948(v36, &v27[*(int *)(v39 + 44)], 0.3);
  swift_release(v36);
  sub_100007964((uint64_t)v27, (uint64_t)v30, &qword_1000908F8);
  v40 = &v30[*(int *)(v28 + 36)];
  *(_QWORD *)v40 = 0;
  *((_WORD *)v40 + 4) = 1;
  sub_100007928((uint64_t)v27, &qword_1000908F8);
  v42 = v74;
  v41 = v75;
  v43 = v76;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, enum case for ColorScheme.light(_:), v76);
  KeyPath = swift_getKeyPath(&unk_100073678);
  v45 = (uint64_t *)&v32[*(int *)(v72 + 36)];
  v46 = sub_100006454(&qword_100090950);
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))((char *)v45 + *(int *)(v46 + 28), v42, v43);
  *v45 = KeyPath;
  sub_100007964((uint64_t)v30, (uint64_t)v32, &qword_100090900);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  sub_100007928((uint64_t)v30, &qword_100090900);
  v47 = v73;
  v48 = sub_100007A2C((uint64_t)v32, v73, &qword_100090908);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v48);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v49 = sub_100006454(&qword_100091A00);
  sub_10006DED4(v82, (uint64_t)&v11[*(int *)(v49 + 44)]);
  v50 = sub_1000078D8(&qword_100091A08, &qword_1000919C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v51 = v77;
  View.widgetAccentable(_:)(1, v79, v50);
  sub_100007928((uint64_t)v11, &qword_1000919C0);
  v52 = v83;
  v53 = sub_100015074(v83);
  v54 = v86;
  static WidgetRenderingMode.accented.getter(v53);
  v55 = v54;
  LOBYTE(v54) = static WidgetRenderingMode.== infix(_:_:)(v52, v54);
  v56 = *(void (**)(char *, uint64_t))(v91 + 8);
  v57 = v55;
  v58 = v92;
  v56(v57, v92);
  v56((char *)v52, v58);
  v59 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
  v61 = v88;
  v60 = v89;
  if ((v54 & 1) == 0)
    v59 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v62 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, *v59, v90);
  v63 = (uint64_t)v78;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(&v78[*(int *)(v80 + 36)], v61, v62);
  v65 = v84;
  v64 = v85;
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 16))(v63, v51, v85);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v64);
  v66 = v81;
  sub_100007A2C(v63, v81, &qword_1000919D0);
  sub_100007964(v47, (uint64_t)v32, &qword_100090908);
  v67 = v87;
  sub_100007964(v66, v87, &qword_1000919D0);
  v68 = v93;
  sub_100007964((uint64_t)v32, v93, &qword_100090908);
  v69 = sub_100006454(&qword_100093868);
  sub_100007964(v67, v68 + *(int *)(v69 + 48), &qword_1000919D0);
  sub_100007928(v66, &qword_1000919D0);
  sub_100007928(v47, &qword_100090908);
  sub_100007928(v67, &qword_1000919D0);
  return sub_100007928((uint64_t)v32, &qword_100090908);
}

uint64_t sub_10006DED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v46 = type metadata accessor for CPTitleGradientView(0);
  __chkstk_darwin(v46);
  v4 = (uint64_t (**)(char *, uint64_t))((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v45 = (uint64_t)&v40 - v6;
  v7 = type metadata accessor for CPTimelineEntry(0);
  __chkstk_darwin(v7);
  v44 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CPHeaderGradientView(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t (**)(char *, uint64_t))((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v43 = (uint64_t)&v40 - v17;
  v18 = (int *)type metadata accessor for CPMediumContentView(0);
  v19 = a1 + v18[7];
  v42 = a1 + v18[5];
  sub_100014E8C((uint64_t)v12);
  v20 = sub_100024388(v19, (uint64_t)v12);
  v40 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v21 = v40(v12, v9);
  GeometryProxy.size.getter(v21);
  v23 = v22 * 0.2867;
  v24 = a1 + v18[8];
  v25 = v44;
  sub_100007AF4(v24, v44, type metadata accessor for CPTimelineEntry);
  *v15 = swift_getKeyPath(&unk_100073648);
  v26 = sub_100006454(&qword_1000907A8);
  swift_storeEnumTagMultiPayload(v15, v26, 0);
  v27 = (double *)((char *)v15 + *(int *)(v13 + 20));
  *v27 = v20;
  v27[1] = v23;
  sub_100007AB0(v25, (uint64_t)v15 + *(int *)(v13 + 24), type metadata accessor for CPTimelineEntry);
  v28 = v43;
  sub_100007AB0((uint64_t)v15, v43, type metadata accessor for CPHeaderGradientView);
  sub_100014E8C((uint64_t)v12);
  v29 = sub_100024388(v19, (uint64_t)v12);
  v30 = v40(v12, v41);
  GeometryProxy.size.getter(v30);
  v32 = v31 * 0.5;
  sub_100007AF4(v24, v25, type metadata accessor for CPTimelineEntry);
  *v4 = swift_getKeyPath(&unk_100073648);
  swift_storeEnumTagMultiPayload(v4, v26, 0);
  v33 = v46;
  v34 = (double *)((char *)v4 + *(int *)(v46 + 20));
  *v34 = v29;
  v34[1] = v32;
  sub_100007AB0(v25, (uint64_t)v4 + *(int *)(v33 + 24), type metadata accessor for CPTimelineEntry);
  v35 = v45;
  sub_100007AB0((uint64_t)v4, v45, type metadata accessor for CPTitleGradientView);
  sub_100007AF4(v28, (uint64_t)v15, type metadata accessor for CPHeaderGradientView);
  sub_100007AF4(v35, (uint64_t)v4, type metadata accessor for CPTitleGradientView);
  v36 = v47;
  sub_100007AF4((uint64_t)v15, v47, type metadata accessor for CPHeaderGradientView);
  v37 = sub_100006454(&qword_100091A18);
  v38 = v36 + *(int *)(v37 + 48);
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 0;
  sub_100007AF4((uint64_t)v4, v36 + *(int *)(v37 + 64), type metadata accessor for CPTitleGradientView);
  sub_10000A7C0(v35, type metadata accessor for CPTitleGradientView);
  sub_10000A7C0(v28, type metadata accessor for CPHeaderGradientView);
  sub_10000A7C0((uint64_t)v4, type metadata accessor for CPTitleGradientView);
  return sub_10000A7C0((uint64_t)v15, type metadata accessor for CPHeaderGradientView);
}

uint64_t sub_10006E280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  __n128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t KeyPath;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[24];
  __int128 v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;

  v120 = a2;
  v5 = sub_100006454(&qword_100091928);
  __chkstk_darwin(v5);
  v7 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for ColorScheme(0);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100006454(&qword_100091228);
  v9 = __chkstk_darwin(v109);
  v111 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for Material(0, v9);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v106 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100006454(&qword_100091230);
  __chkstk_darwin(v12);
  v112 = (uint64_t)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100006454(&qword_100091238);
  __chkstk_darwin(v107);
  v113 = (uint64_t)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100006454(&qword_100091930);
  __chkstk_darwin(v105);
  v115 = (uint64_t)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100006454(&qword_100091938);
  __chkstk_darwin(v124);
  v114 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v116 = (uint64_t)&v102 - v18;
  v19 = sub_100006454(&qword_100091940);
  __chkstk_darwin(v19);
  v21 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v128 = (uint64_t)&v102 - v23;
  v24 = type metadata accessor for Image.ResizingMode(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (void *)sub_10004CF70(0x6C616D726F6ELL, 0xE600000000000000);
  v126 = v5;
  v127 = v7;
  v125 = v21;
  v121 = a3;
  if (v28)
  {
    v29 = v28;
    v30 = Image.init(uiImage:)(v29);
    (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for Image.ResizingMode.stretch(_:), v24);
    v31 = Image.resizable(capInsets:resizingMode:)(v27, v30, 0.0, 0.0, 0.0, 0.0);
    swift_release(v30);
    v32 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    v33 = static UnitPoint.center.getter(v32);
    v129 = v31;
    *(_OWORD *)v130 = xmmword_100073500;
    *(_QWORD *)&v130[16] = 0x3FF0000000000000;
    *(double *)&v131 = v33;
    *((_QWORD *)&v131 + 1) = v34;
    v132 = 0;
    swift_retain(v31);
    v35 = sub_100006454(&qword_100093820);
    v36 = sub_100006454(&qword_100093828);
    v37 = sub_10006F09C();
    v38 = sub_10006F120(&qword_100093848, &qword_100093828);
    _ConditionalContent<>.init(storage:)(&v129, v35, v36, v37, v38);
    swift_release(v31);

    v39 = v133;
    v40 = v134;
    v41 = v135;
    v42 = v138;
    v122 = v137;
    v123 = v136;
    v43 = v139;
    v44 = a1;
  }
  else
  {
    v45 = *(void **)(a1 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    v44 = a1;
    if (v45)
    {
      v46 = *(id *)(a1 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    }
    else
    {
      v47 = *(void **)(a1 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v47)
        v48 = v47;
      else
        v48 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v46 = v48;
    }
    v49 = v45;
    v129 = Color.init(uiColor:)(v46);
    *(_QWORD *)v130 = 0xBFC3333333333333;
    *(_OWORD *)&v130[8] = 0u;
    v131 = 0u;
    v132 = 1;
    v50 = sub_100006454(&qword_100093820);
    v51 = sub_100006454(&qword_100093828);
    v52 = sub_10006F09C();
    v53 = sub_10006F120(&qword_100093848, &qword_100093828);
    _ConditionalContent<>.init(storage:)(&v129, v50, v51, v52, v53);
    v39 = v133;
    v40 = v134;
    v41 = v135;
    v42 = v138;
    v122 = v137;
    v123 = v136;
    v43 = v139;
  }
  type metadata accessor for CPMediumContentView(0);
  v54 = sub_1000081B4();
  v56 = v128;
  if (v54)
  {
    v103 = v41;
    v104 = v40;
    v120 = v39;
    v57 = v106;
    v58 = static Material.ultraThin.getter(v55);
    v59 = static Edge.Set.all.getter(v58);
    v60 = v108;
    v61 = (uint64_t)v111;
    v62 = v110;
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v111, v57, v110);
    *(_BYTE *)(v61 + *(int *)(v109 + 36)) = v59;
    v63 = v112;
    sub_100007964(v61, v112, &qword_100091228);
    sub_100007928(v61, &qword_100091228);
    v64 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v57, v62);
    v65 = static Color.black.getter(v64);
    v66 = Color.opacity(_:)(0.2);
    v67 = swift_release(v65);
    LOBYTE(v65) = static Edge.Set.all.getter(v67);
    v68 = v113;
    sub_100007964(v63, v113, &qword_100091230);
    v69 = v68 + *(int *)(v107 + 36);
    *(_QWORD *)v69 = v66;
    *(_BYTE *)(v69 + 8) = v65;
    sub_100007928(v63, &qword_100091230);
    v70 = *(void **)(v44 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    if (v70)
    {
      v71 = *(id *)(v44 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_editorialBackgroundColor);
    }
    else
    {
      v76 = *(void **)(v44 + OBJC_IVAR____TtC9GCWidgets14AppDisplayData_iconBackgroundColor);
      if (v76)
        v77 = v76;
      else
        v77 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.431372549, 0.62745098, 1.0);
      v71 = v77;
    }
    v78 = v105;
    v79 = v70;
    v80 = Color.init(uiColor:)(v71);
    v81 = Color.opacity(_:)(0.7);
    v82 = swift_release(v80);
    LOBYTE(v80) = static Edge.Set.all.getter(v82);
    v83 = v115;
    sub_100007964(v68, v115, &qword_100091238);
    v84 = v83 + *(int *)(v78 + 36);
    *(_QWORD *)v84 = v81;
    *(_BYTE *)(v84 + 8) = v80;
    sub_100007928(v68, &qword_100091238);
    KeyPath = swift_getKeyPath(&unk_1000735B8);
    v86 = v118;
    v87 = v117;
    v88 = v119;
    (*(void (**)(char *, _QWORD, uint64_t))(v118 + 104))(v117, enum case for ColorScheme.light(_:), v119);
    v89 = v124;
    v90 = (uint64_t)v114;
    v91 = (uint64_t *)&v114[*(int *)(v124 + 36)];
    v92 = sub_100006454(&qword_100090950);
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v91 + *(int *)(v92 + 28), v87, v88);
    *v91 = KeyPath;
    sub_100007964(v83, v90, &qword_100091930);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    sub_100007928(v83, &qword_100091930);
    v93 = v116;
    sub_100007A2C(v90, v116, &qword_100091938);
    v94 = v127;
    sub_100007964(v93, (uint64_t)v127, &qword_100091938);
    swift_storeEnumTagMultiPayload(v94, v126, 0);
    v95 = sub_100059A78();
    v56 = v128;
    _ConditionalContent<>.init(storage:)(v94, v89, &type metadata for Color, v95, &protocol witness table for Color);
    sub_100007928(v93, &qword_100091938);
    v39 = v120;
    v40 = v104;
    v41 = v103;
  }
  else
  {
    if (qword_1000906E0 != -1)
      swift_once(&qword_1000906E0, sub_10000AB40);
    v72 = qword_1000959B8;
    v73 = v126;
    v74 = v127;
    *v127 = qword_1000959B8;
    swift_storeEnumTagMultiPayload(v74, v73, 1);
    v75 = sub_100059A78();
    swift_retain(v72);
    _ConditionalContent<>.init(storage:)(v74, v124, &type metadata for Color, v75, &protocol witness table for Color);
  }
  v96 = (uint64_t)v125;
  sub_100007964(v56, (uint64_t)v125, &qword_100091940);
  v97 = v121;
  *v121 = v39;
  v97[1] = v40;
  v99 = v122;
  v98 = v123;
  v97[2] = v41;
  v97[3] = v98;
  v97[4] = v99;
  v97[5] = v42;
  *((_BYTE *)v97 + 48) = v43;
  v100 = sub_100006454(&qword_100093850);
  sub_100007964(v96, (uint64_t)v97 + *(int *)(v100 + 48), &qword_100091940);
  j__swift_retain(v39);
  sub_100007928(v128, &qword_100091940);
  sub_100007928(v96, &qword_100091940);
  return j__swift_release(v39);
}

uint64_t sub_10006ECA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for ContainerBackgroundPlacement(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006454(&qword_100093720);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = static Alignment.center.getter(v8);
  v7[1] = v9;
  v10 = sub_100006454(&qword_100093728);
  v11 = sub_10006B7E8(v0, (uint64_t)v7 + *(int *)(v10 + 44));
  v12 = static ContainerBackgroundPlacement.widget.getter(v11);
  v13 = static Alignment.center.getter(v12);
  v15 = v14;
  v16 = sub_100006454(&qword_100093730);
  v17 = sub_1000078D8(&qword_100093738, &qword_100093720, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v18 = sub_10006EE24();
  View.containerBackground<A>(for:alignment:content:)(v4, v13, v15, sub_10006CF74, 0, v5, v16, v17, v18);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_100007928((uint64_t)v7, &qword_100093720);
}

unint64_t sub_10006EE24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093740;
  if (!qword_100093740)
  {
    v1 = sub_100006494(&qword_100093730);
    sub_100007A70(&qword_100090988, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093740);
  }
  return result;
}

unint64_t sub_10006EEA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093760;
  if (!qword_100093760)
  {
    v1 = sub_100006494(&qword_100093758);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100093760);
  }
  return result;
}

unint64_t sub_10006EF04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000937A8;
  if (!qword_1000937A8)
  {
    v1 = sub_100006494(&qword_100093790);
    sub_10006EFB4(&qword_1000937B0, &qword_100093788, (void (*)(void))sub_10006EF90, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000937A8);
  }
  return result;
}

uint64_t sub_10006EF90()
{
  return sub_10006EFB4(&qword_1000937B8, &qword_1000937C0, (void (*)(void))sub_10006F018, (uint64_t)&protocol conformance descriptor for <A> A?);
}

uint64_t sub_10006EFB4(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100006494(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006F018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000937C8;
  if (!qword_1000937C8)
  {
    v1 = sub_100006494(&qword_1000937D0);
    sub_1000078D8(&qword_1000937D8, &qword_1000937E0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000937C8);
  }
  return result;
}

unint64_t sub_10006F09C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100093830;
  if (!qword_100093830)
  {
    v1 = sub_100006494(&qword_100093820);
    sub_10006F120(&qword_100093838, &qword_100093840);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100093830);
  }
  return result;
}

uint64_t sub_10006F120(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100006494(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006F1A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006CFD4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10006F1A8()
{
  _QWORD v1[4];

  v1[0] = sub_100006494(&qword_100093720);
  v1[1] = sub_100006494(&qword_100093730);
  v1[2] = sub_1000078D8(&qword_100093738, &qword_100093720, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = sub_10006EE24();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC9GCWidgetsP33_8C0DB13102F6000C07E261E9BE02485F19ResourceBundleClass);
}

BOOL sub_10006F250(int a1, int a2, int a3)
{
  BOOL v6;

  if (qword_100095988 == -1)
  {
    v6 = dword_100095978 < a1;
    if (dword_100095978 > a1)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100095988, 0, (dispatch_function_t)sub_10006F338);
    v6 = dword_100095978 < a1;
    if (dword_100095978 > a1)
      return 1;
  }
  if (v6)
    return 0;
  if (dword_10009597C > a2)
    return 1;
  return dword_10009597C >= a2 && dword_100095980 >= a3;
}

uint64_t sub_10006F338()
{
  return sub_10006F4D0(1);
}

uint64_t sub_10006F340(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100095990 == -1)
  {
    if (qword_100095998)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100095990, 0, (dispatch_function_t)sub_10006F4C8);
    if (qword_100095998)
      goto LABEL_3;
  }
  if (qword_100095988 == -1)
  {
    v9 = dword_100095978 < a2;
    if (dword_100095978 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100095988, 0, (dispatch_function_t)sub_10006F338);
    v9 = dword_100095978 < a2;
    if (dword_100095978 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_10009597C > a3)
    return 1;
  return dword_10009597C >= a3 && dword_100095980 >= a4;
}

uint64_t sub_10006F4C8()
{
  return sub_10006F4D0(0);
}

uint64_t sub_10006F4D0(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100095998;
  if (qword_100095998)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100095998 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100095978, &dword_10009597C, &dword_100095980);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
