void sub_1000881C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008F88((uint64_t *)&unk_10013CD90);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_unknownObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000884D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100008F88((uint64_t *)&unk_10013F2A0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000887E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008F88((uint64_t *)&unk_10013F170);
  v46 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v44 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v42 = v2;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  swift_retain(v11);
  v19 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v11);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v17 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v13 + 40);
    v31 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v27 * v20, v10, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v11 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  swift_release(v11);
  *v3 = v13;
}

void sub_100088B7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008F88(&qword_10013CB10);
  v46 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v44 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v42 = v2;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  swift_retain(v11);
  v19 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v11);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v17 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v28, v6);
      v29 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v28, v6);
      v29 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    v30 = *(_QWORD *)(v13 + 40);
    v31 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v27 * v20, v10, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v11 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  swift_release(v11);
  *v3 = v13;
}

void sub_100088F10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_100008F88(a3);
  v48 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v46 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v44 = v5;
  v45 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  swift_retain(v13);
  v21 = 0;
  for (i = v13; ; v13 = i)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v27 = v46[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_36:
          swift_release(v13);
          v5 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v45)
              goto LABEL_36;
            v27 = v46[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v13 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v12, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v24);
      swift_retain(v31);
    }
    v32 = *(_QWORD *)(v15 + 40);
    v33 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v35 = -1 << *(_BYTE *)(v15 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v20 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v15 + 48) + v29 * v22, v12, v8);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v5 = v44;
  v26 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v13 + 32);
  if (v42 >= 64)
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v42;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  swift_release(v13);
  *v5 = v15;
}

uint64_t sub_1000892A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10003AF58(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10003BF08();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_unknownObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_1000881C0(v15, a4 & 1);
  v21 = sub_10003AF58(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100089404(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10003AF58(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10003C0BC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000884D4(v15, a4 & 1);
  v20 = sub_10003AF58(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100089560(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_10003AEC0(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10003C6D0();
    goto LABEL_7;
  }
  sub_100088B7C(v18, a3 & 1);
  v23 = sub_10003AEC0(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  sub_100089828(v15, (uint64_t)v12, a1, v21);
}

void sub_1000896BC(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;

  v27 = a5;
  v28 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v5;
  v17 = sub_10003AEC0(a2);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v7;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7];
      swift_release(*(_QWORD *)(v24 + 8 * v17));
      *(_QWORD *)(v24 + 8 * v17) = v28;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4(v20);
    goto LABEL_7;
  }
  sub_100088F10(v20, a3 & 1, v27);
  v25 = sub_10003AEC0(a2);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v17 = v25;
  v23 = *v7;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  sub_100089828(v17, (uint64_t)v14, v28, v23);
}

uint64_t sub_100089828(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1000898C0(_BYTE *a1, char a2)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  unint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  Swift::Int v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _TtC9AirDropUI33AirDropTransferSessionsController *v26;
  char v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char isUniquelyReferenced_nonNull_native;
  char v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t result;
  SEL v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _TtC9AirDropUI33AirDropTransferSessionsController **v61;
  _QWORD v63[9];

  v4 = *v2;
  Hasher.init(_seed:)(v63, *(_QWORD *)(*v2)->transfersMonitorTask);
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000031;
  else
    v5 = 0xD000000000000021;
  if ((a2 & 1) != 0)
    v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0;
  else
    v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFC0;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v63, v5, v6);
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  v14 = Hasher._finalize()();
  v22 = -1 << v4->airDropClient[0];
  v23 = v14 & ~v22;
  if (((*(_QWORD *)&v4->nearbySharingInteractionCoordinator[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
  {
    v24 = ~v22;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)v4->interventionTasks + v23))
        v25 = 0xD000000000000031;
      else
        v25 = 0xD000000000000021;
      if (*(_BYTE *)(*(_QWORD *)v4->interventionTasks + v23))
        v26 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0;
      else
        v26 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFC0;
      if (v25 == v5 && v26 == v6)
      {
        swift_bridgeObjectRelease(v4, v15, v16, v17, v18, v19, v20, v21);
        swift_bridgeObjectRelease(v6, v54, v55, v56, v57, v58, v59, v60);
        goto LABEL_24;
      }
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v5, v6, 0);
      swift_bridgeObjectRelease(v26, v29, v30, v31, v32, v33, v34, v35);
      swift_bridgeObjectRelease(v6, v36, v37, v38, v39, v40, v41, v42);
      if ((v28 & 1) != 0)
        break;
      v23 = (v23 + 1) & v24;
      if (((*(_QWORD *)&v4->nearbySharingInteractionCoordinator[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
        goto LABEL_21;
    }
    v6 = v4;
LABEL_24:
    swift_bridgeObjectRelease(v6, v15, v16, v17, v18, v19, v20, v21);
    result = 0;
    v44 = *(_BYTE *)(*(_QWORD *)(*v61)->interventionTasks + v23);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease(v4, v15, v16, v17, v18, v19, v20, v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v61);
    v63[0] = *v61;
    *v61 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
    v44 = a2 & 1;
    sub_10008C384(a2 & 1, v23, isUniquelyReferenced_nonNull_native);
    v45 = *v61;
    *v61 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v63[0];
    swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
    result = 1;
  }
  *a1 = v44;
  return result;
}

uint64_t sub_100089AAC(uint64_t *a1, uint64_t a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  Swift::Int v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v35;
  SEL v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  _QWORD v43[9];

  v7 = *v3;
  Hasher.init(_seed:)(v43, *(_QWORD *)(*v3)->transfersMonitorTask);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v43, a2, a3);
  v8 = Hasher._finalize()();
  v16 = -1 << v7->airDropClient[0];
  v17 = v8 & ~v16;
  if (((*(_QWORD *)&v7->nearbySharingInteractionCoordinator[(v17 >> 3) & 0xFFFFFFFFFFFFF8] >> v17) & 1) != 0)
  {
    v18 = *(_QWORD *)v7->interventionTasks;
    v19 = (_QWORD *)(v18 + 16 * v17);
    v9 = (const char *)v19[1];
    v20 = *v19 == a2 && v9 == (const char *)a3;
    if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v9, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3, v9, v10, v11, v12, v13, v14, v15);
      swift_bridgeObjectRelease(v7, v21, v22, v23, v24, v25, v26, v27);
      v28 = (uint64_t *)(*(_QWORD *)(*v3)->interventionTasks + 16 * v17);
      v29 = v28[1];
      *a1 = *v28;
      a1[1] = v29;
      swift_bridgeObjectRetain(v29);
      return 0;
    }
    v31 = ~v16;
    while (1)
    {
      v17 = (v17 + 1) & v31;
      if (((*(_QWORD *)&v7->nearbySharingInteractionCoordinator[(v17 >> 3) & 0xFFFFFFFFFFFFF8] >> v17) & 1) == 0)
        break;
      v32 = (_QWORD *)(v18 + 16 * v17);
      v9 = (const char *)v32[1];
      v33 = *v32 == a2 && v9 == (const char *)a3;
      if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v32, v9, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7, v9, v10, v11, v12, v13, v14, v15);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v43[0] = *v3;
  *v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10008C574(a2, (uint64_t)a3, v17, isUniquelyReferenced_nonNull_native);
  v35 = *v3;
  *v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v43[0];
  swift_bridgeObjectRelease(v35, v36, v37, v38, v39, v40, v41, v42);
  *a1 = a2;
  a1[1] = (uint64_t)a3;
  return 1;
}

uint64_t sub_100089C58(uint64_t a1, uint64_t a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3, int a4)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v4;
  _TtC9AirDropUI33AirDropTransferSessionsController **v5;
  int v10;
  unsigned int v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  Swift::Int v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *nearbySharingInteractionCoordinator;
  uint64_t v31;
  uint64_t v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  char v44;
  int v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t result;
  unsigned int v60;
  char isUniquelyReferenced_nonNull_native;
  _TtC9AirDropUI33AirDropTransferSessionsController *v62;
  SEL v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  int v70;
  _TtC9AirDropUI33AirDropTransferSessionsController *v71;
  _TtC9AirDropUI33AirDropTransferSessionsController **v72;
  uint64_t v73;
  unsigned int v74;
  _BOOL4 v75;
  int v76;
  int v77;
  uint64_t v78;
  _TtC9AirDropUI33AirDropTransferSessionsController *v79;
  _QWORD v80[10];

  v5 = v4;
  v10 = a4 & 1;
  v11 = a4 & 0x100;
  v76 = a4 & 0x1000000;
  v77 = a4 & 0x10000;
  v12 = *v5;
  Hasher.init(_seed:)(v80, *(_QWORD *)(*v5)->transfersMonitorTask);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(a3);
  v78 = a2;
  String.hash(into:)(v80, a2, a3);
  v79 = a3;
  swift_bridgeObjectRelease(a3, v13, v14, v15, v16, v17, v18, v19);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(BYTE1(a4) & 1);
  Hasher._combine(_:)(BYTE2(a4) & 1);
  Hasher._combine(_:)(HIBYTE(a4) & 1);
  v20 = Hasher._finalize()();
  v28 = -1 << v12->airDropClient[0];
  v29 = v20 & ~v28;
  nearbySharingInteractionCoordinator = v12->nearbySharingInteractionCoordinator;
  v72 = v5;
  v73 = a1;
  v70 = a4;
  v71 = v12;
  if (((*(_QWORD *)&v12->nearbySharingInteractionCoordinator[(v29 >> 3) & 0xFFFFFFFFFFFFF8] >> v29) & 1) != 0)
  {
    v31 = ~v28;
    v32 = *(_QWORD *)v12->interventionTasks;
    v34 = v78;
    v33 = a3;
    v74 = v11;
    while (1)
    {
      v35 = 24 * v29;
      v36 = v32 + 24 * v29;
      v21 = *(const char **)(v36 + 8);
      v37 = *(unsigned __int8 *)(v36 + 16);
      v38 = *(unsigned __int8 *)(v36 + 17);
      v39 = (v77 != 0) ^ *(unsigned __int8 *)(v36 + 18);
      if (*(_QWORD *)v36 == v34 && v21 == (const char *)v33)
      {
        if ((((v10 != 0) ^ v37 | (v11 != 0) ^ v38 | v39) & 1) == 0
          && (((v76 != 0) ^ *(unsigned __int8 *)(v36 + 19)) & 1) == 0)
        {
LABEL_13:
          swift_bridgeObjectRelease(v33, v21, v22, v23, v24, v25, v26, v27);
          swift_bridgeObjectRelease(v71, v46, v47, v48, v49, v50, v51, v52);
          v53 = *(_QWORD *)(*v72)->interventionTasks + v35;
          v55 = *(_QWORD *)v53;
          v54 = *(_QWORD *)(v53 + 8);
          v56 = *(_BYTE *)(v53 + 16);
          v57 = *(_BYTE *)(v53 + 17);
          v58 = *(_BYTE *)(v53 + 18);
          LOBYTE(v53) = *(_BYTE *)(v53 + 19);
          *(_QWORD *)v73 = v55;
          *(_QWORD *)(v73 + 8) = v54;
          *(_BYTE *)(v73 + 16) = v56;
          *(_BYTE *)(v73 + 17) = v57;
          *(_BYTE *)(v73 + 18) = v58;
          *(_BYTE *)(v73 + 19) = v53;
          swift_bridgeObjectRetain(v54);
          return 0;
        }
      }
      else
      {
        v75 = v11 != 0;
        v41 = nearbySharingInteractionCoordinator;
        v42 = v31;
        v43 = *(unsigned __int8 *)(v36 + 19);
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v36, v21, v78, v79, 0);
        v45 = v43;
        v31 = v42;
        nearbySharingInteractionCoordinator = v41;
        v34 = v78;
        v33 = v79;
        v35 = 24 * v29;
        v11 = v74;
        if (!(((v10 != 0) ^ v37) & 1 | ((v44 & 1) == 0) | (v75 ^ v38 | v39) & 1)
          && (((v76 != 0) ^ v45) & 1) == 0)
        {
          goto LABEL_13;
        }
      }
      v29 = (v29 + 1) & v31;
      if (((*(_QWORD *)&nearbySharingInteractionCoordinator[(v29 >> 3) & 0xFFFFFFFFFFFFF8] >> v29) & 1) == 0)
        goto LABEL_15;
    }
  }
  v34 = a2;
  v33 = a3;
LABEL_15:
  v60 = v11 >> 8;
  swift_bridgeObjectRelease(v71, v21, v22, v23, v24, v25, v26, v27);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v72);
  v80[0] = *v72;
  *v72 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
  swift_bridgeObjectRetain(v33);
  sub_10008C70C(v34, v33, v70 & 0x1010101, v29, isUniquelyReferenced_nonNull_native);
  v62 = *v72;
  *v72 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v80[0];
  swift_bridgeObjectRelease(v62, v63, v64, v65, v66, v67, v68, v69);
  *(_QWORD *)v73 = v34;
  *(_QWORD *)(v73 + 8) = v33;
  *(_BYTE *)(v73 + 16) = v10;
  *(_BYTE *)(v73 + 17) = v60;
  *(_BYTE *)(v73 + 18) = BYTE2(v77);
  result = 1;
  *(_BYTE *)(v73 + 19) = HIBYTE(v76);
  return result;
}

uint64_t sub_100089F90(uint64_t a1, char *a2)
{
  _TtC9AirDropUI33AirDropTransferSessionsController **v2;
  _TtC9AirDropUI33AirDropTransferSessionsController **v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  unsigned __int8 *nearbySharingInteractionCoordinator;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  void (*v29)(_QWORD, _QWORD, _QWORD);
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  const char *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  char *v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  _TtC9AirDropUI33AirDropTransferSessionsController **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, &type metadata accessor for UUID);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3)->transfersMonitorTask;
  v13 = sub_100008694(&qword_10013D250, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v56 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v22 = -1 << v10->airDropClient[0];
  v23 = v14 & ~v22;
  v24 = v10;
  nearbySharingInteractionCoordinator = v10->nearbySharingInteractionCoordinator;
  if (((*(_QWORD *)&v10->nearbySharingInteractionCoordinator[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
  {
    v52 = v3;
    v53 = a1;
    v54 = ~v22;
    v55 = v7;
    v26 = *(_QWORD *)(v7 + 72);
    v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v28 = v24;
      v29 = v27;
      v27(v9, *(_QWORD *)v24->interventionTasks + v26 * v23, v6);
      v30 = sub_100008694((unint64_t *)&unk_10013CAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v56, v6, v30);
      v32 = *(void (**)(char *, uint64_t))(v55 + 8);
      v32(v9, v6);
      if ((v31 & 1) != 0)
        break;
      v23 = (v23 + 1) & v54;
      v24 = v28;
      v27 = v29;
      if (((*(_QWORD *)&nearbySharingInteractionCoordinator[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
      {
        swift_bridgeObjectRelease(v28, v33, v34, v35, v36, v37, v38, v39);
        v3 = v52;
        a1 = v53;
        v40 = v55;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v28, v33, v34, v35, v36, v37, v38, v39);
    v32(v56, v6);
    v29(v53, *(_QWORD *)(*v52)->interventionTasks + v26 * v23, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10, v15, v16, v17, v18, v19, v20, v21);
    v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v40 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v42 = v56;
    v27(v9, v56, v6);
    v57 = *v3;
    *v3 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000;
    sub_10008C9F8((uint64_t)v9, v23, isUniquelyReferenced_nonNull_native);
    v43 = *v3;
    *v3 = v57;
    swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(a1, v42, v6);
    return 1;
  }
}

void *sub_10008A1EC(_TtC9AirDropUI33AirDropTransferSessionsController *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t *v14;
  _TtC9AirDropUI33AirDropTransferSessionsController *v15;
  uint64_t v16;
  Swift::Int v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t isStackAllocationSafe;
  uint64_t v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  SEL v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  _QWORD v59[2];
  _QWORD v60[9];
  _TtC9AirDropUI33AirDropTransferSessionsController *v61;
  uint64_t v62;

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v61 = a1;
  v4 = *(_QWORD *)a1->connection;
  if (v4)
  {
    v5 = a2 + 56;
    v59[0] = a1->airDropClient;
    swift_bridgeObjectRetain(a1);
    v6 = 0;
    while (1)
    {
      v14 = (uint64_t *)(v59[0] + 16 * v6);
      v16 = *v14;
      v15 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v14[1];
      ++v6;
      Hasher.init(_seed:)(v60, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v15);
      String.hash(into:)(v60, v16, v15);
      v17 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v2 + 32);
      v26 = v17 & ~v25;
      if (((*(_QWORD *)(v5 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) != 0)
      {
        v27 = *(_QWORD *)(v2 + 48);
        v28 = (_QWORD *)(v27 + 16 * v26);
        v18 = (const char *)v28[1];
        v29 = *v28 == v16 && v18 == (const char *)v15;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v18, v16, v15, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v15, v18, v19, v20, v21, v22, v23, v24);
          v62 = v6;
LABEL_19:
          v35 = *(_BYTE *)(v2 + 32);
          v36 = v35 & 0x3F;
          v37 = (1 << v35) + 63;
          v38 = v37 >> 6;
          v39 = 8 * (v37 >> 6);
          if (v36 < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v37 >> 6), 8),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe, v34);
            memcpy((char *)v59 - ((v39 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v39);
            sub_10008B770((_QWORD *)((char *)v59 - ((v39 + 15) & 0x3FFFFFFFFFFFFFF0)), v38, v2, v26, &v61);
            v41 = v40;
            swift_release(v2);
            swift_bridgeObjectRelease(v61, v42, v43, v44, v45, v46, v47, v48);
          }
          else
          {
            v49 = (void *)swift_slowAlloc(v39, -1);
            memcpy(v49, (const void *)(v2 + 56), v39);
            sub_10008B770((unint64_t *)v49, v38, v2, v26, &v61);
            v41 = v50;
            swift_release(v2);
            swift_bridgeObjectRelease(v61, v51, v52, v53, v54, v55, v56, v57);
            swift_slowDealloc(v49, -1, -1);
          }
          return (void *)v41;
        }
        v30 = ~v25;
        while (1)
        {
          v26 = (v26 + 1) & v30;
          if (((*(_QWORD *)(v5 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
            break;
          v31 = (_QWORD *)(v27 + 16 * v26);
          v18 = (const char *)v31[1];
          v32 = *v31 == v16 && v18 == (const char *)v15;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v31, v18, v16, v15, 0) & 1) != 0)
          {
            v62 = v6;
            swift_bridgeObjectRelease(v15, v18, v19, v20, v21, v22, v23, v24);
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease(v15, v18, v19, v20, v21, v22, v23, v24);
      if (v6 == v4)
      {
        swift_bridgeObjectRelease(a1, v7, v8, v9, v10, v11, v12, v13);
        return (void *)v2;
      }
    }
  }
  return (void *)v2;
}

void *sub_10008A4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  uint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;

  v4 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v66 = (char *)&v60 - v15;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v16 = -1 << *(_BYTE *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = ~v16;
  v19 = -v16;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v67 = a1;
  v68 = a1 + 64;
  v21 = a1;
  v22 = a1 + 64;
  v23 = v20 & v17;
  v24 = v18;
  v69 = v18;
  v70 = 0;
  v71 = v20 & v17;
  v65 = (char *)(a2 + 56);
  v25 = v21;
  swift_bridgeObjectRetain(v21);
  v26 = 0;
  v61 = v7;
  v64 = a2;
  v62 = v23;
  v63 = 0;
  if (!v23)
    goto LABEL_8;
LABEL_6:
  v27 = (v23 - 1) & v23;
  v28 = __clz(__rbit64(v23)) | (v26 << 6);
  v29 = v26;
  v30 = v22;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v9 + 72) * v28, v8);
  v31 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v31, 1, v8);
    v67 = v25;
    v68 = v30;
    v69 = v24;
    v70 = v29;
    v71 = v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_100028460(v25);
      sub_10000CC5C((uint64_t)v7, (uint64_t *)&unk_1001405D0);
      return (void *)v64;
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v66, v7, v8);
    v35 = v64;
    v36 = *(_QWORD *)(v64 + 40);
    v37 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v8, v37);
    v39 = -1 << *(_BYTE *)(v35 + 32);
    v40 = v38 & ~v39;
    if (((*(_QWORD *)&v65[(v40 >> 3) & 0xFFFFFFFFFFFFF8] >> v40) & 1) != 0)
      break;
    v47 = *(void (**)(char *, uint64_t))(v9 + 8);
LABEL_34:
    v47(v66, v8);
    v26 = v70;
    v23 = v71;
    v25 = v67;
    v22 = v68;
    v24 = v69;
    v7 = v61;
    v62 = v71;
    v63 = v70;
    if (v71)
      goto LABEL_6;
LABEL_8:
    v29 = v26 + 1;
    if (__OFADD__(v26, 1))
      __break(1u);
    v30 = v22;
    v32 = (unint64_t)(v24 + 64) >> 6;
    if (v29 >= v32)
      goto LABEL_26;
    v33 = *(_QWORD *)(v22 + 8 * v29);
    if (v33)
      goto LABEL_11;
    v26 += 2;
    if (v29 + 1 >= v32)
      goto LABEL_36;
    v33 = *(_QWORD *)(v22 + 8 * v26);
    if (v33)
      goto LABEL_14;
    if (v29 + 2 >= v32)
    {
LABEL_26:
      v27 = 0;
      v31 = 1;
      v29 = v26;
    }
    else
    {
      v33 = *(_QWORD *)(v22 + 8 * (v29 + 2));
      if (v33)
      {
        v29 += 2;
        goto LABEL_11;
      }
      v26 = v29 + 3;
      if (v29 + 3 >= v32)
      {
        v27 = 0;
        v31 = 1;
        v29 += 2;
      }
      else
      {
        v33 = *(_QWORD *)(v22 + 8 * v26);
        if (v33)
        {
LABEL_14:
          v29 = v26;
LABEL_11:
          v27 = (v33 - 1) & v33;
          v28 = __clz(__rbit64(v33)) + (v29 << 6);
          goto LABEL_7;
        }
        v29 += 4;
        if (v29 >= v32)
          goto LABEL_26;
        v33 = *(_QWORD *)(v22 + 8 * v29);
        if (v33)
          goto LABEL_11;
        v29 = v32 - 1;
        v34 = v63 + 6;
        while (v32 != v34)
        {
          v33 = *(_QWORD *)(v22 + 8 * v34++);
          if (v33)
          {
            v29 = v34 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v27 = 0;
        v31 = 1;
      }
    }
  }
  v41 = v35;
  v42 = ~v39;
  v43 = *(_QWORD *)(v9 + 72);
  v44 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  while (1)
  {
    v44(v12, *(_QWORD *)(v41 + 48) + v43 * v40, v8);
    v45 = sub_100008694((unint64_t *)&unk_10013CAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v66, v8, v45);
    v47 = *(void (**)(char *, uint64_t))(v9 + 8);
    v47(v12, v8);
    if ((v46 & 1) != 0)
      break;
    v40 = (v40 + 1) & v42;
    if (((*(_QWORD *)&v65[(v40 >> 3) & 0xFFFFFFFFFFFFF8] >> v40) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v47)(v66, v8);
  v50 = *(_BYTE *)(v41 + 32);
  v51 = v50 & 0x3F;
  v52 = (1 << v50) + 63;
  v53 = v52 >> 6;
  v54 = 8 * (v52 >> 6);
  if (v51 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v52 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe, v49);
    memcpy((char *)&v60 - ((v54 + 15) & 0x3FFFFFFFFFFFFFF0), v65, v54);
    sub_10008B998((unint64_t *)((char *)&v60 - ((v54 + 15) & 0x3FFFFFFFFFFFFFF0)), v53, v41, v40, &v67);
    v56 = v55;
    swift_release(v41);
    sub_100028460(v67);
  }
  else
  {
    v58 = (void *)swift_slowAlloc(v54, -1);
    memcpy(v58, v65, v54);
    sub_10008B998((unint64_t *)v58, v53, v41, v40, &v67);
    v56 = v59;
    swift_release(v41);
    sub_100028460(v67);
    swift_slowDealloc(v58, -1, -1);
  }
  return (void *)v56;
}

void sub_10008AAB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int v18;
  unint64_t v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  _QWORD v39[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008F88(&qword_10013F338);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v38 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v37 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v15 >= v37)
          goto LABEL_42;
        v16 = v38[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v37)
            goto LABEL_42;
          v16 = v38[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v37)
              goto LABEL_42;
            v16 = v38[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v37)
              {
LABEL_42:
                swift_release(v3);
                v36 = 1 << *(_BYTE *)(v3 + 32);
                if (v36 > 63)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v38[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_48;
                  if (v11 >= v37)
                    goto LABEL_42;
                  v16 = v38[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v14);
      Hasher.init(_seed:)(v39, *(_QWORD *)(v6 + 40));
      if (v18)
        v19 = 0xD000000000000031;
      else
        v19 = 0xD000000000000021;
      if (v18)
        v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0;
      else
        v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFC0;
      String.hash(into:)(v39, v19, v20);
      swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
      v28 = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v6 + 32);
      v30 = v28 & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v10 + 8 * v31);
        }
        while (v35 == -1);
        v12 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10008ADDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008F88((uint64_t *)&unk_10013FEB0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_10008B0B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008F88(&qword_10013F298);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v6 = 1 << *(_BYTE *)(v3 + 32);
    v7 = (_QWORD *)(v3 + 56);
    v8 = -1;
    if (v6 < 64)
      v8 = ~(-1 << v6);
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v6 + 63) >> 6;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v25 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
        if (v25 >= v10)
          goto LABEL_34;
        v26 = v7[v25];
        ++v11;
        if (!v26)
        {
          v11 = v25 + 1;
          if (v25 + 1 >= v10)
            goto LABEL_34;
          v26 = v7[v11];
          if (!v26)
          {
            v11 = v25 + 2;
            if (v25 + 2 >= v10)
              goto LABEL_34;
            v26 = v7[v11];
            if (!v26)
            {
              v27 = v25 + 3;
              if (v27 >= v10)
              {
LABEL_34:
                swift_release(v3);
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v7 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v26 = v7[v27];
              if (!v26)
              {
                while (1)
                {
                  v11 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_40;
                  if (v11 >= v10)
                    goto LABEL_34;
                  v26 = v7[v11];
                  ++v27;
                  if (v26)
                    goto LABEL_33;
                }
              }
              v11 = v27;
            }
          }
        }
LABEL_33:
        v9 = (v26 - 1) & v26;
        v13 = __clz(__rbit64(v26)) + (v11 << 6);
      }
      v14 = *(_QWORD *)(v3 + 48) + 24 * v13;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(unsigned __int8 *)(v14 + 16);
      v18 = *(unsigned __int8 *)(v14 + 17);
      v19 = *(unsigned __int8 *)(v14 + 18);
      v20 = *(unsigned __int8 *)(v14 + 19);
      if (v18)
        v21 = 256;
      else
        v21 = 0;
      v22 = v21 | v17;
      if (v19)
        v23 = 0x10000;
      else
        v23 = 0;
      if (v20)
        v24 = 0x1000000;
      else
        v24 = 0;
      sub_10008B64C(v15, v16, v22 | v23 | v24, v5);
    }
  }
  swift_release(v3);
  *v2 = v5;
}

void sub_10008B2E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008F88(&qword_10013F228);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_39;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v40 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = v2;
  v39 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v20 >= v39)
      goto LABEL_35;
    v21 = v40[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_35;
      v21 = v40[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v8;
    v24 = *(_QWORD *)(v8 + 48);
    v25 = *(_QWORD *)(v41 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 32);
    v26(v7, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v10 + 40);
    v28 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v30 = -1 << *(_BYTE *)(v10 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v26((char *)(*(_QWORD *)(v10 + 48) + v17 * v25), (unint64_t)v7, v4);
    ++*(_QWORD *)(v10 + 16);
    v8 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v39)
  {
    v21 = v40[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v39)
          goto LABEL_35;
        v21 = v40[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v8);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v8 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_39:
  swift_release(v8);
  *v2 = v10;
}

unint64_t sub_10008B64C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  char v8;
  int v9;
  int v10;
  int v11;
  Swift::Int v12;
  unint64_t result;
  uint64_t v14;
  _QWORD v15[9];

  Hasher.init(_seed:)(v15, *(_QWORD *)(a4 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v15, a1, a2);
  swift_bridgeObjectRelease(a2);
  v8 = a3 & 1;
  Hasher._combine(_:)(a3 & 1);
  v9 = (a3 >> 8) & 1;
  Hasher._combine(_:)(BYTE1(a3) & 1);
  v10 = HIWORD(a3) & 1;
  Hasher._combine(_:)(BYTE2(a3) & 1);
  v11 = HIBYTE(a3) & 1;
  Hasher._combine(_:)(v11);
  v12 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v12 & ~(-1 << *(_BYTE *)(a4 + 32)), a4 + 56, ~(-1 << *(_BYTE *)(a4 + 32)));
  *(_QWORD *)(a4 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v14 = *(_QWORD *)(a4 + 48) + 24 * result;
  *(_QWORD *)v14 = a1;
  *(_QWORD *)(v14 + 8) = a2;
  *(_BYTE *)(v14 + 16) = v8;
  *(_BYTE *)(v14 + 17) = v9;
  *(_BYTE *)(v14 + 18) = v10;
  *(_BYTE *)(v14 + 19) = v11;
  ++*(_QWORD *)(a4 + 16);
  return result;
}

void sub_10008B770(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  uint64_t v13;
  Swift::Int v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t v38;
  _QWORD v39[9];
  uint64_t v40;

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v38 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain(a3);
    sub_10008BDF0(a1, a2, v38, a3);
    return;
  }
  v40 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_29;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)(v39, *(_QWORD *)(a3 + 40));
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(v39, v13, v12);
    v14 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(a3 + 32);
    v23 = v14 & ~v22;
    v24 = v23 >> 6;
    v25 = 1 << v23;
    if (((1 << v23) & *(_QWORD *)(v40 + 8 * (v23 >> 6))) == 0)
      goto LABEL_4;
    v26 = *(_QWORD *)(a3 + 48);
    v27 = (_QWORD *)(v26 + 16 * v23);
    v15 = (const char *)v27[1];
    v28 = *v27 == v13 && v15 == (const char *)v12;
    if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v15, v13, v12, 0) & 1) == 0)
    {
      v31 = ~v22;
      for (i = v23 + 1; ; i = v33 + 1)
      {
        v33 = i & v31;
        if (((*(_QWORD *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
          break;
        v34 = (_QWORD *)(v26 + 16 * v33);
        v15 = (const char *)v34[1];
        v35 = *v34 == v13 && v15 == (const char *)v12;
        if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v34, v15, v13, v12, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
          v24 = v33 >> 6;
          v25 = 1 << v33;
          goto LABEL_15;
        }
      }
LABEL_4:
      swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
      goto LABEL_5;
    }
    swift_bridgeObjectRelease(v12, v15, v16, v17, v18, v19, v20, v21);
LABEL_15:
    v29 = a1[v24];
    a1[v24] = v29 & ~v25;
    if ((v25 & v29) != 0)
    {
      v30 = v38 - 1;
      if (__OFSUB__(v38, 1))
        goto LABEL_30;
      --v38;
      if (!v30)
        return;
    }
LABEL_5:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_10008B998(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  char v45;
  int64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v55 = a2;
  v9 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18, v19);
  v63 = (char *)&v54 - v21;
  v22 = *(_QWORD *)(a3 + 16);
  v23 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v24 = *(unint64_t *)((char *)a1 + v23) & ((-1 << a4) - 1);
  v57 = a1;
  v58 = v12;
  *(unint64_t *)((char *)a1 + v23) = v24;
  v25 = v22 - 1;
  v61 = a3 + 56;
  v62 = a3;
  v59 = a5;
  while (2)
  {
    v56 = v25;
    do
    {
      while (1)
      {
        v27 = *a5;
        v28 = a5[1];
        v30 = a5[2];
        v29 = a5[3];
        v31 = a5[4];
        v60 = v30;
        if (v31)
        {
          v32 = (v31 - 1) & v31;
          v33 = __clz(__rbit64(v31)) | (v29 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16))(v12, *(_QWORD *)(v27 + 48) + *(_QWORD *)(v14 + 72) * v33, v13, v20);
          v34 = 0;
          goto LABEL_8;
        }
        v46 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        v47 = (unint64_t)(v30 + 64) >> 6;
        if (v46 >= v47)
        {
          v32 = 0;
          v34 = 1;
          goto LABEL_8;
        }
        v48 = *(_QWORD *)(v28 + 8 * v46);
        if (v48)
          goto LABEL_17;
        v51 = v29 + 2;
        if (v29 + 2 >= v47)
          goto LABEL_35;
        v48 = *(_QWORD *)(v28 + 8 * v51);
        if (v48)
          goto LABEL_23;
        if (v29 + 3 >= v47)
          goto LABEL_36;
        v48 = *(_QWORD *)(v28 + 8 * (v29 + 3));
        if (v48)
        {
          v46 = v29 + 3;
          goto LABEL_17;
        }
        v51 = v29 + 4;
        if (v29 + 4 < v47)
        {
          v48 = *(_QWORD *)(v28 + 8 * v51);
          if (v48)
          {
LABEL_23:
            v46 = v51;
LABEL_17:
            v32 = (v48 - 1) & v48;
            v33 = __clz(__rbit64(v48)) + (v46 << 6);
            v29 = v46;
            goto LABEL_7;
          }
          v46 = v29 + 5;
          if (v29 + 5 < v47)
          {
            v48 = *(_QWORD *)(v28 + 8 * v46);
            if (v48)
              goto LABEL_17;
            v46 = v47 - 1;
            v52 = v29 + 6;
            while (v47 != v52)
            {
              v48 = *(_QWORD *)(v28 + 8 * v52++);
              if (v48)
              {
                v46 = v52 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            v32 = 0;
            v34 = 1;
            v29 = v46;
            goto LABEL_8;
          }
LABEL_36:
          v32 = 0;
          v34 = 1;
          v29 = v51;
          goto LABEL_8;
        }
        v32 = 0;
        v34 = 1;
        v29 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v34, 1, v13);
        *a5 = v27;
        a5[1] = v28;
        a5[2] = v60;
        a5[3] = v29;
        a5[4] = v32;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
        {
          sub_10000CC5C((uint64_t)v12, (uint64_t *)&unk_1001405D0);
          v53 = v62;
          swift_retain(v62);
          sub_10008C084(v57, v55, v56, v53);
          return;
        }
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v63, v12, v13);
        v35 = v62;
        v36 = *(_QWORD *)(v62 + 40);
        v37 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v38 = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v13, v37);
        v39 = -1 << *(_BYTE *)(v35 + 32);
        v40 = v38 & ~v39;
        if (((*(_QWORD *)(v61 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) != 0)
          break;
        v26 = *(void (**)(char *, uint64_t))(v14 + 8);
LABEL_4:
        v26(v63, v13);
        v12 = v58;
        a5 = v59;
      }
      v41 = ~v39;
      v42 = *(_QWORD *)(v14 + 72);
      v43 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
      while (1)
      {
        v43(v17, *(_QWORD *)(v62 + 48) + v42 * v40, v13);
        v44 = sub_100008694((unint64_t *)&unk_10013CAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v45 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v63, v13, v44);
        v26 = *(void (**)(char *, uint64_t))(v14 + 8);
        v26(v17, v13);
        if ((v45 & 1) != 0)
          break;
        v40 = (v40 + 1) & v41;
        if (((*(_QWORD *)(v61 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
          goto LABEL_4;
      }
      v26(v63, v13);
      v49 = (v40 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v12 = v58;
      v50 = *(unint64_t *)((char *)v57 + v49);
      *(unint64_t *)((char *)v57 + v49) = v50 & ~(1 << v40);
      a5 = v59;
    }
    while ((v50 & (1 << v40)) == 0);
    v25 = v56 - 1;
    if (__OFSUB__(v56, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v56 != 1)
      continue;
    break;
  }
}

Swift::Int sub_10008BDF0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100008F88((uint64_t *)&unk_10013FEB0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10008C084(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v8 = type metadata accessor for UUID(0);
  __chkstk_darwin(v8, v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v41 = v10;
  sub_100008F88(&qword_10013F228);
  result = static _SetStorage.allocate(capacity:)(a3);
  v13 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 56;
  v18 = v41;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v16 << 6);
    }
    else
    {
      v21 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v21 >= v40)
      {
LABEL_37:
        swift_release(a4);
        return v13;
      }
      v22 = v39[v21];
      ++v16;
      if (!v22)
      {
        v16 = v21 + 1;
        if (v21 + 1 >= v40)
          goto LABEL_37;
        v22 = v39[v16];
        if (!v22)
        {
          v16 = v21 + 2;
          if (v21 + 2 >= v40)
            goto LABEL_37;
          v22 = v39[v16];
          if (!v22)
          {
            v23 = v21 + 3;
            if (v23 >= v40)
              goto LABEL_37;
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v40)
                  goto LABEL_37;
                v22 = v39[v16];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v16 = v23;
          }
        }
      }
LABEL_24:
      v15 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v16 << 6);
    }
    v24 = a4;
    v25 = *(_QWORD *)(a4 + 48);
    v26 = *(_QWORD *)(v18 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v12, v25 + v26 * v20, v8);
    v27 = *(_QWORD *)(v13 + 40);
    v28 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v8, v28);
    v29 = -1 << *(_BYTE *)(v13 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v18 = v41;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      v18 = v41;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v13 + 48) + v32 * v26, v12, v8);
    ++*(_QWORD *)(v13 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v24;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_10008C384(char a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  char v25;
  SEL v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  char v45;
  _QWORD v46[9];

  v6 = a1 & 1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  v45 = a1 & 1;
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_28;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10008AAB4(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_10008CBFC();
      goto LABEL_28;
    }
    sub_10008D334(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v46, *(_QWORD *)(*v3 + 40));
  if (v6)
    v11 = 0xD000000000000031;
  else
    v11 = 0xD000000000000021;
  if (v6)
    v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0;
  else
    v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFC0;
  String.hash(into:)(v46, v11, v4);
  swift_bridgeObjectRelease(v4, v12, v13, v14, v15, v16, v17, v18);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v19 & ~v20;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v21 = ~v20;
    do
    {
      v22 = *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) ? 0xD000000000000031 : 0xD000000000000021;
      v23 = (_TtC9AirDropUI33AirDropTransferSessionsController *)(*(_BYTE *)(*(_QWORD *)(v10 + 48) + a2)
                                                                ? 0x80000001000EFFF0
                                                                : 0x80000001000EFFC0);
      if (v22 == v11 && v23 == v4)
        goto LABEL_31;
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v11, v4, 0);
      swift_bridgeObjectRelease(v23, v26, v27, v28, v29, v30, v31, v32);
      swift_bridgeObjectRelease(v4, v33, v34, v35, v36, v37, v38, v39);
      if ((v25 & 1) != 0)
        goto LABEL_32;
      a2 = (a2 + 1) & v21;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  v40 = *v44;
  *(_QWORD *)(*v44 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v40 + 48) + a2) = v45;
  v41 = *(_QWORD *)(v40 + 16);
  v42 = __OFADD__(v41, 1);
  v43 = v41 + 1;
  if (!v42)
  {
    *(_QWORD *)(v40 + 16) = v43;
    return;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n(v4, 2);
LABEL_32:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SourceApplication.Capabilities);
  __break(1u);
}

void sub_10008C574(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10008ADDC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10008CD8C();
      goto LABEL_22;
    }
    sub_10008D624(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_10008C70C(uint64_t a1, _TtC9AirDropUI33AirDropTransferSessionsController *a2, int a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  _QWORD v56[9];

  v7 = a2;
  LOBYTE(v9) = a3 & 1;
  v10 = a3 & 0x100;
  v11 = a3 & 0x10000;
  v12 = a3 & 0x1000000;
  v13 = *(_QWORD *)(*v5 + 16);
  v14 = *(_QWORD *)(*v5 + 24);
  v47 = WORD1(v11);
  v48 = v10 >> 8;
  v46 = (a3 & 0x1000000u) >> 24;
  if (v14 <= v13 || (a5 & 1) == 0)
  {
    v15 = v13 + 1;
    v51 = a1;
    v50 = a3 & 1;
    if ((a5 & 1) != 0)
    {
      sub_10008B0B8(v15);
    }
    else
    {
      if (v14 > v13)
      {
        sub_10008CF3C();
LABEL_20:
        v7 = a2;
        a1 = v51;
        LOBYTE(v9) = v50;
        goto LABEL_21;
      }
      sub_10008D8D0(v15);
    }
    v16 = *v5;
    Hasher.init(_seed:)(v56, *(_QWORD *)(*v5 + 40));
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v56, v51, a2);
    swift_bridgeObjectRelease(a2, v17, v18, v19, v20, v21, v22, v23);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(BYTE1(v10));
    Hasher._combine(_:)(BYTE2(v11));
    Hasher._combine(_:)(HIBYTE(v12));
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v16 + 32);
    a4 = v24 & ~v25;
    v26 = v16 + 56;
    if (((*(_QWORD *)(v16 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
    {
      v27 = ~v25;
      v28 = *(_QWORD *)(v16 + 48);
      v7 = a2;
      a1 = v51;
      v9 = v50;
      v29 = v10;
      v30 = v12;
      while (1)
      {
        v31 = v28 + 24 * a4;
        v32 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v31 + 8);
        v33 = *(unsigned __int8 *)(v31 + 16);
        v34 = *(unsigned __int8 *)(v31 + 17);
        v35 = *(unsigned __int8 *)(v31 + 19);
        if (*(_QWORD *)v31 == a1 && v32 == v7)
        {
          v40 = v30 != 0;
          if ((((v9 != 0) ^ v33 | ((_DWORD)v29 != 0) ^ v34 | ((_DWORD)v11 != 0) ^ *(unsigned __int8 *)(v31 + 18)) & 1) == 0)
            goto LABEL_10;
        }
        else
        {
          v52 = ((_DWORD)v11 != 0) ^ *(unsigned __int8 *)(v31 + 18);
          v53 = v9 != 0;
          v54 = v29 != 0;
          v37 = v11;
          v38 = v29;
          v39 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v31, v32, a1, a2, 0);
          v29 = v38;
          v11 = v37;
          v9 = v50;
          a1 = v51;
          v7 = a2;
          if (!((v53 ^ v33) & 1 | ((v39 & 1) == 0) | (v54 ^ v34 | v52) & 1))
          {
            v40 = v30 != 0;
LABEL_10:
            if (((v40 ^ v35) & 1) == 0)
              goto LABEL_24;
          }
        }
        a4 = (a4 + 1) & v27;
        if (((*(_QWORD *)(v26 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
          goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
LABEL_21:
  v41 = *v49;
  *(_QWORD *)(*v49 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v42 = *(_QWORD *)(v41 + 48) + 24 * a4;
  *(_QWORD *)v42 = a1;
  *(_QWORD *)(v42 + 8) = v7;
  *(_BYTE *)(v42 + 16) = v9;
  *(_BYTE *)(v42 + 17) = v48;
  *(_BYTE *)(v42 + 18) = v47;
  *(_BYTE *)(v42 + 19) = v46;
  v43 = *(_QWORD *)(v41 + 16);
  v44 = __OFADD__(v43, 1);
  v45 = v43 + 1;
  if (v44)
  {
    __break(1u);
LABEL_24:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Handle);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v41 + 16) = v45;
  }
}

uint64_t sub_10008C9F8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v32 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v31 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10008B2E0(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_10008D110();
      goto LABEL_12;
    }
    sub_10008DAD0(v14);
  }
  v15 = *v3;
  v16 = *(_QWORD *)(*v3 + 40);
  v17 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v6, v17);
  v19 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v20 = ~v19;
    v21 = *(_QWORD *)(v7 + 72);
    v22 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v22(v11, *(_QWORD *)(v15 + 48) + v21 * a2, v6);
      v23 = sub_100008694((unint64_t *)&unk_10013CAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v32, v6, v23);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v24 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v20;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v25 = v32;
  v26 = *v31;
  *(_QWORD *)(*v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v26 + 48) + *(_QWORD *)(v7 + 72) * a2, v25, v6, v9);
  v28 = *(_QWORD *)(v26 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    *(_QWORD *)(v26 + 16) = v30;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_10008CBFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100008F88(&qword_10013F338);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10008CD8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100008F88((uint64_t *)&unk_10013FEB0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10008CF3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_100008F88(&qword_10013F298);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_28;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
      {
        v9 = v24 + 2;
        if (v24 + 2 >= v13)
          goto LABEL_28;
        v25 = *(_QWORD *)(v6 + 8 * v9);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = *(_BYTE *)(v17 + 17);
    v22 = *(_BYTE *)(v17 + 18);
    LOBYTE(v17) = *(_BYTE *)(v17 + 19);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = v19;
    *(_QWORD *)(v23 + 8) = v18;
    *(_BYTE *)(v23 + 16) = v20;
    *(_BYTE *)(v23 + 17) = v21;
    *(_BYTE *)(v23 + 18) = v22;
    *(_BYTE *)(v23 + 19) = v17;
    swift_bridgeObjectRetain(v18);
  }
  v26 = v24 + 3;
  if (v26 >= v13)
    goto LABEL_28;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_10008D110()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008F88(&qword_10013F228);
  v7 = *v0;
  v8 = static _SetStorage.copy(original:)(*v0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
LABEL_30:
    *v1 = v9;
    return;
  }
  v26 = v1;
  v10 = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)v10 >= v7 + 56 + 8 * v12)
    memmove(v10, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v18)
        goto LABEL_28;
      v23 = *(_QWORD *)(v11 + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v18)
          goto LABEL_28;
        v23 = *(_QWORD *)(v11 + 8 * v14);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v17 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v21, v2);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v21, v6, v2);
  }
  v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    swift_release(v7);
    v1 = v26;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v11 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

void sub_10008D334(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int v18;
  unint64_t v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD v38[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008F88(&qword_10013F338);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_44:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v36 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v37 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_27;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v15 >= v37)
      goto LABEL_42;
    v16 = *(_QWORD *)(v36 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v37)
        goto LABEL_42;
      v16 = *(_QWORD *)(v36 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v37)
          goto LABEL_42;
        v16 = *(_QWORD *)(v36 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_27:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v14);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v6 + 40));
    if (v18)
      v19 = 0xD000000000000031;
    else
      v19 = 0xD000000000000021;
    if (v18)
      v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFF0;
    else
      v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000EFFC0;
    String.hash(into:)(v38, v19, v20);
    swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v6 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v10 + 8 * v31);
      }
      while (v35 == -1);
      v12 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v12) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v37)
  {
LABEL_42:
    swift_release_n(v3, 2);
    goto LABEL_44;
  }
  v16 = *(_QWORD *)(v36 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v37)
      goto LABEL_42;
    v16 = *(_QWORD *)(v36 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_26;
  }
LABEL_46:
  __break(1u);
}

void sub_10008D624(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008F88((uint64_t *)&unk_10013FEB0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_10008D8D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008F88(&qword_10013F298);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_35:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v29 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = v3 + 56;
  v8 = -1;
  if (v6 < 64)
    v8 = ~(-1 << v6);
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_9;
    }
    v26 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v26 >= v10)
      goto LABEL_34;
    v27 = *(_QWORD *)(v7 + 8 * v26);
    ++v11;
    if (!v27)
    {
      v11 = v26 + 1;
      if (v26 + 1 >= v10)
        goto LABEL_34;
      v27 = *(_QWORD *)(v7 + 8 * v11);
      if (!v27)
      {
        v11 = v26 + 2;
        if (v26 + 2 >= v10)
          goto LABEL_34;
        v27 = *(_QWORD *)(v7 + 8 * v11);
        if (!v27)
          break;
      }
    }
LABEL_33:
    v9 = (v27 - 1) & v27;
    v13 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_9:
    v14 = *(_QWORD *)(v3 + 48) + 24 * v13;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(unsigned __int8 *)(v14 + 16);
    v18 = *(unsigned __int8 *)(v14 + 17);
    v19 = *(unsigned __int8 *)(v14 + 18);
    v20 = *(unsigned __int8 *)(v14 + 19);
    if (v18)
      v21 = 256;
    else
      v21 = 0;
    v22 = v21 | v17;
    if (v19)
      v23 = 0x10000;
    else
      v23 = 0;
    if (v20)
      v24 = 0x1000000;
    else
      v24 = 0;
    v25 = v22 | v23 | v24;
    swift_bridgeObjectRetain(v16);
    sub_10008B64C(v15, v16, v25, v5);
  }
  v28 = v26 + 3;
  if (v28 >= v10)
  {
LABEL_34:
    swift_release(v3);
    v2 = v29;
    goto LABEL_35;
  }
  v27 = *(_QWORD *)(v7 + 8 * v28);
  if (v27)
  {
    v11 = v28;
    goto LABEL_33;
  }
  while (1)
  {
    v11 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v11 >= v10)
      goto LABEL_34;
    v27 = *(_QWORD *)(v7 + 8 * v11);
    ++v28;
    if (v27)
      goto LABEL_33;
  }
LABEL_37:
  __break(1u);
}

void sub_10008DAD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100008F88(&qword_10013F228);
  v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    swift_release(v9);
LABEL_37:
    *v2 = v11;
    return;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 56);
  v36 = v2;
  v37 = v9 + 56;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 56;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_35;
      v22 = *(_QWORD *)(v37 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v38)
          goto LABEL_35;
        v22 = *(_QWORD *)(v37 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v11 + 40);
    v26 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v11 + 48) + v18 * v24, v8, v4);
    ++*(_QWORD *)(v11 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v38)
  {
LABEL_35:
    swift_release_n(v9, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v38)
      goto LABEL_35;
    v22 = *(_QWORD *)(v37 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

_QWORD *sub_10008DDF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_100008F88((uint64_t *)&unk_10013DF40);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    type metadata accessor for AirDropTransferSession(0);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_10008DF78(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  void *v8;
  SEL v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100008F88((uint64_t *)&unk_10013DF40);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10008E164((unint64_t)(v4 + 4), v2, v1);
    v1 = (uint64_t)v8;
    swift_bridgeObjectRelease(v7, v9, v8, v10, v11, v12, v13, v14);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v15 = v1;
    else
      v15 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v1, v16, v17, v18, v19, v20, v21, v22);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_TtC9AirDropUI33AirDropTransferSessionsController *sub_10008E06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _TtC9AirDropUI33AirDropTransferSessionsController *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = sub_100008F88((uint64_t *)&unk_10013F260);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_TtC9AirDropUI33AirDropTransferSessionsController *)j__malloc_size(v8);
  if (v5)
  {
    if ((_TtC9AirDropUI33AirDropTransferSessionsController *)((char *)result - v7) != (_TtC9AirDropUI33AirDropTransferSessionsController *)0x8000000000000000
      || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      sub_10008E370(&v13, (char *)v8 + v7, v1, a1);
      v12 = v11;
      sub_100028460(v13);
      if (v12 == v1)
        return (_TtC9AirDropUI33AirDropTransferSessionsController *)v8;
      __break(1u);
      return &_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10008E164(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  unint64_t i;
  void (*v20)(_QWORD *);
  _QWORD *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  SEL v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t result;
  uint64_t *v39[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v30 = a3;
    else
      v30 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a3, v31, v32, v33, v34, v35, v36, v37);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a3, v12, v13, v14, v15, v16, v17, v18);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000CB94((unint64_t *)&unk_10013F2B8, &qword_10013F2B0, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100008F88(&qword_10013F2B0);
          v20 = sub_1000D2FFC(v39, i, a3);
          v22 = *v21;
          swift_retain(*v21);
          ((void (*)(uint64_t **, _QWORD))v20)(v39, 0);
          *(_QWORD *)(a1 + 8 * i) = v22;
        }
        swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a3, v23, v24, v25, v26, v27, v28, v29);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AirDropTransferSession(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_10008E370(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v8 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v42 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a4;
  v17 = a4 + 64;
  v16 = *(_QWORD *)(a4 + 64);
  v18 = -1 << *(_BYTE *)(a4 + 32);
  v37 = a1;
  v38 = v18;
  v19 = -v18;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
LABEL_39:
    v33 = v37;
    v34 = ~v38;
    *v37 = v44;
    v33[1] = v17;
    v33[2] = v34;
    v33[3] = v22;
    v33[4] = v21;
    return;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v22 = 0;
  v23 = 0;
  v39 = a4 + 64;
  v40 = (unint64_t)(63 - v38) >> 6;
  v36 = v40 - 1;
  v41 = a3;
  v24 = v42;
  v25 = v43;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v27 = v26 | (v22 << 6);
  while (1)
  {
    v31 = *(_QWORD *)(v25 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v25 + 16))(v11, *(_QWORD *)(v44 + 48) + v31 * v27, v12, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v12) == 1)
    {
      v17 = v39;
      goto LABEL_38;
    }
    ++v23;
    v32 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v32(v24, v11, v12);
    v32(a2, v24, v12);
    if (v23 == v41)
    {
      v17 = v39;
      goto LABEL_39;
    }
    a2 += v31;
    v25 = v43;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    v17 = v39;
    if (v28 >= v40)
      goto LABEL_37;
    v29 = *(_QWORD *)(v39 + 8 * v28);
    if (!v29)
    {
      v30 = v22 + 2;
      ++v22;
      if (v28 + 1 >= v40)
        goto LABEL_37;
      v29 = *(_QWORD *)(v39 + 8 * v30);
      if (v29)
        goto LABEL_14;
      v22 = v28 + 1;
      if (v28 + 2 >= v40)
        goto LABEL_37;
      v29 = *(_QWORD *)(v39 + 8 * (v28 + 2));
      if (v29)
      {
        v28 += 2;
      }
      else
      {
        v22 = v28 + 2;
        if (v28 + 3 >= v40)
          goto LABEL_37;
        v29 = *(_QWORD *)(v39 + 8 * (v28 + 3));
        if (!v29)
        {
          v30 = v28 + 4;
          v22 = v28 + 3;
          if (v28 + 4 < v40)
          {
            v29 = *(_QWORD *)(v39 + 8 * v30);
            if (!v29)
            {
              while (1)
              {
                v28 = v30 + 1;
                if (__OFADD__(v30, 1))
                  goto LABEL_42;
                if (v28 >= v40)
                {
                  v22 = v36;
                  goto LABEL_37;
                }
                v29 = *(_QWORD *)(v39 + 8 * v28);
                ++v30;
                if (v29)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v28 = v30;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v25 + 56))(v11, 1, 1, v12, v14);
          v21 = 0;
LABEL_38:
          sub_10000CC5C((uint64_t)v11, (uint64_t *)&unk_1001405D0);
          goto LABEL_39;
        }
        v28 += 3;
      }
    }
LABEL_21:
    v21 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v22 = v28;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_10008E6C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v26 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 24 * v16;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    v24 = *(_BYTE *)(v20 + 17);
    v25 = *(_BYTE *)(v20 + 18);
    LOBYTE(v20) = *(_BYTE *)(v20 + 19);
    *(_QWORD *)v11 = v22;
    *(_QWORD *)(v11 + 8) = v21;
    *(_BYTE *)(v11 + 16) = v23;
    *(_BYTE *)(v11 + 17) = v24;
    *(_BYTE *)(v11 + 18) = v25;
    *(_BYTE *)(v11 + 19) = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 24;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v26;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10008E8E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10008E9FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100008F88(&qword_10013BCB0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10008EB04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100091D68();
  result = Set.init(minimumCapacity:)(v2, &type metadata for SourceApplication.Capabilities, v3);
  v8 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_1000898C0(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10008EB74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10008EC64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10008ED58(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, unint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  unsigned int v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v39[5];
  void *v40;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_100018D44(0, a3, a4);
    v12 = sub_1000873C0(a5, a3, a4, (uint64_t)&protocol conformance descriptor for NSObject);
    v13 = Set.Iterator.init(_cocoa:)(v39, v10, v11, v12);
    v5 = v39[0];
    v36 = v39[1];
    v14 = v39[2];
    v15 = v39[3];
    v16 = v39[4];
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v36 = a1 + 56;
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
    v13 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v15 = 0;
  }
  v32 = v14;
  v35 = (unint64_t)(v14 + 64) >> 6;
  while (1)
  {
    v25 = v15;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    v29 = __CocoaSet.Iterator.next()(v13);
    if (!v29)
      goto LABEL_34;
    v30 = v29;
    v38 = v29;
    v31 = sub_100018D44(0, a3, a4);
    swift_unknownObjectRetain(v30);
    swift_dynamicCast(&v40, &v38, (char *)&type metadata for Swift.AnyObject + 8, v31, 7);
    v22 = v40;
    swift_unknownObjectRelease(v30);
    if (!v22)
      goto LABEL_34;
LABEL_13:
    v23 = objc_msgSend(v22, "handle", v32);
    v24 = objc_msgSend(v23, "isEquivalentToHandle:", a2);

    if (v24)
      goto LABEL_34;
  }
  if (v16)
  {
    v20 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v21 = v20 | (v15 << 6);
LABEL_12:
    v22 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    if (!v22)
      goto LABEL_34;
    goto LABEL_13;
  }
  v26 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v26 >= v35)
      goto LABEL_34;
    v27 = *(_QWORD *)(v36 + 8 * v26);
    ++v15;
    if (!v27)
    {
      v15 = v25 + 2;
      if (v25 + 2 >= v35)
        goto LABEL_34;
      v27 = *(_QWORD *)(v36 + 8 * v15);
      if (!v27)
      {
        v15 = v25 + 3;
        if (v25 + 3 >= v35)
          goto LABEL_34;
        v27 = *(_QWORD *)(v36 + 8 * v15);
        if (!v27)
        {
          v15 = v25 + 4;
          if (v25 + 4 >= v35)
            goto LABEL_34;
          v27 = *(_QWORD *)(v36 + 8 * v15);
          if (!v27)
          {
            v15 = v25 + 5;
            if (v25 + 5 >= v35)
              goto LABEL_34;
            v27 = *(_QWORD *)(v36 + 8 * v15);
            if (!v27)
            {
              v28 = v25 + 6;
              while (v35 != v28)
              {
                v27 = *(_QWORD *)(v36 + 8 * v28++);
                if (v27)
                {
                  v15 = v28 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_100028460(v5);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v16 = (v27 - 1) & v27;
    v21 = __clz(__rbit64(v27)) + (v15 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_10008F06C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  uint64_t v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25[3];
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100091C78();
  result = Set.init(minimumCapacity:)(v2, &type metadata for Handle, v3);
  v26 = result;
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 51);
    do
    {
      v6 = *(_QWORD *)(v5 - 19);
      v7 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v5 - 11);
      v8 = *(v5 - 3);
      v9 = *(v5 - 2);
      v10 = *(v5 - 1);
      v12 = *v5;
      v5 += 24;
      v11 = v12;
      if (v9)
        v13 = 256;
      else
        v13 = 0;
      v14 = v13 | v8;
      if (v10)
        v15 = 0x10000;
      else
        v15 = 0;
      if (v11)
        v16 = 0x1000000;
      else
        v16 = 0;
      v17 = v14 | v15 | v16;
      swift_bridgeObjectRetain(v7);
      sub_100089C58((uint64_t)v25, v6, v7, v17);
      swift_bridgeObjectRelease(v25[1], v18, v19, v20, v21, v22, v23, v24);
      --v2;
    }
    while (v2);
    return v26;
  }
  return result;
}

uint64_t sub_10008F154(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _TtC9AirDropUI33AirDropTransferSessionsController **v4;
  uint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14[2];
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v15 = result;
  if (v2)
  {
    v4 = (_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 40);
    do
    {
      v5 = (uint64_t)*(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100089AAC(v14, v5, v6);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v14[1], v7, v8, v9, v10, v11, v12, v13);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v15;
  }
  return result;
}

uint64_t sub_10008F1E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v21 - v9;
  v11 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v22 = Set.init(minimumCapacity:)(v15, v2, v16);
  if (v15)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v21 = *(_QWORD *)(v3 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v18(v14, v17, v2);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v19(v14, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v14, v2);
      sub_100089F90((uint64_t)v10, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
      v17 += v21;
      if (!--v15)
        goto LABEL_7;
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v14, 1, 1, v2);
  }
  return v22;
}

void sub_10008F3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[5];
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;

  v1 = a1;
  v41 = &_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(a1);
    v3 = sub_100018D44(0, &qword_10013F088, TUConversation_ptr);
    v4 = sub_1000873C0((unint64_t *)&unk_10013F090, &qword_10013F088, TUConversation_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v40, v2, v3, v4);
    v1 = v40[0];
    v37 = v40[1];
    v5 = v40[2];
    v6 = v40[3];
    v7 = v40[4];
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v37 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
  }
  v36 = (unint64_t)(v5 + 64) >> 6;
  v35 = v1;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_12;
LABEL_32:
  v18 = __CocoaSet.Iterator.next()(a1);
  if (!v18)
    goto LABEL_40;
  v19 = v18;
  v38 = v18;
  v20 = sub_100018D44(0, &qword_10013F088, TUConversation_ptr);
  swift_unknownObjectRetain(v19);
  swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
  v17 = v39;
  swift_unknownObjectRelease(v19);
  v13 = v6;
  v11 = v7;
  if (!v17)
    goto LABEL_40;
  while (1)
  {
    if (objc_msgSend(v17, "state"))
    {

      v6 = v13;
      v7 = v11;
      if (v1 < 0)
        goto LABEL_32;
    }
    else
    {
      v21 = objc_msgSend(v17, "remoteMembers");
      v22 = sub_100018D44(0, &qword_10013BBE0, TUConversationMember_ptr);
      v23 = sub_1000873C0(&qword_10013BBE8, &qword_10013BBE0, TUConversationMember_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      v24 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v21, v22, v23);

      LOBYTE(v21) = sub_100085B60((uint64_t)v24, &qword_10013BBE0, TUConversationMember_ptr, &qword_10013BBE8);
      swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
      if ((v21 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
        v33 = *(_QWORD *)v41->connection;
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
        v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v17);
        a1 = specialized ContiguousArray._endMutation()(v34);
      }
      else
      {

      }
      v6 = v13;
      v7 = v11;
      v1 = v35;
      if (v35 < 0)
        goto LABEL_32;
    }
LABEL_12:
    if (!v7)
      break;
    v11 = (v7 - 1) & v7;
    v12 = __clz(__rbit64(v7)) | (v6 << 6);
    v13 = v6;
LABEL_30:
    v17 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v12);
    if (!v17)
      goto LABEL_40;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v36)
    goto LABEL_40;
  v15 = *(_QWORD *)(v37 + 8 * v14);
  v13 = v6 + 1;
  if (v15)
    goto LABEL_29;
  v13 = v6 + 2;
  if (v6 + 2 >= v36)
    goto LABEL_40;
  v15 = *(_QWORD *)(v37 + 8 * v13);
  if (v15)
    goto LABEL_29;
  v13 = v6 + 3;
  if (v6 + 3 >= v36)
    goto LABEL_40;
  v15 = *(_QWORD *)(v37 + 8 * v13);
  if (v15)
    goto LABEL_29;
  v13 = v6 + 4;
  if (v6 + 4 >= v36)
    goto LABEL_40;
  v15 = *(_QWORD *)(v37 + 8 * v13);
  if (v15)
    goto LABEL_29;
  v13 = v6 + 5;
  if (v6 + 5 >= v36)
    goto LABEL_40;
  v15 = *(_QWORD *)(v37 + 8 * v13);
  if (v15)
  {
LABEL_29:
    v11 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v13 << 6);
    goto LABEL_30;
  }
  v16 = v6 + 6;
  while (v36 != v16)
  {
    v15 = *(_QWORD *)(v37 + 8 * v16++);
    if (v15)
    {
      v13 = v16 - 1;
      goto LABEL_29;
    }
  }
LABEL_40:
  sub_100028460(v1);
}

void sub_10008F7A4(_TtC9AirDropUI33AirDropTransferSessionsController *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t, __n128);
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _TtC9AirDropUI33AirDropTransferSessionsController *v58;

  v4 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v51 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v46 - v14;
  v18 = __chkstk_darwin(v16, v17);
  v57 = (char *)&v46 - v19;
  v58 = &_swiftEmptyArrayStorage;
  v50 = *(_QWORD *)a1->connection;
  if (v50)
  {
    v20 = 0;
    v55 = a2 + 56;
    v56 = a2;
    v48 = v7;
    v49 = a1;
    while (v20 < *(_QWORD *)a1->connection)
    {
      v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v22 = *(_QWORD *)(v9 + 72);
      v23 = *(void (**)(char *, char *, uint64_t, __n128))(v9 + 16);
      v23(v7, (char *)a1 + v21 + v22 * v20, v8, v18);
      v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v47)(v7, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
        goto LABEL_19;
      v53 = v21;
      v54 = v20;
      v52 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v52(v57, v7, v8);
      v31 = v56;
      if (*(_QWORD *)(v56 + 16)
        && (v32 = *(_QWORD *)(v56 + 40),
            v33 = sub_100008694(&qword_10013D250, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33), v35 = -1 << *(_BYTE *)(v31 + 32), v36 = v34 & ~v35, ((*(_QWORD *)(v55 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0))
      {
        v37 = ~v35;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v23)(v15, *(_QWORD *)(v31 + 48) + v36 * v22, v8);
          v38 = sub_100008694((unint64_t *)&unk_10013CAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v39 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v57, v8, v38);
          v40 = *(void (**)(char *, uint64_t))(v9 + 8);
          v40(v15, v8);
          if ((v39 & 1) != 0)
            break;
          v36 = (v36 + 1) & v37;
          v31 = v56;
          if (((*(_QWORD *)(v55 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
            goto LABEL_12;
        }
        v40(v57, v8);
      }
      else
      {
LABEL_12:
        v41 = v52;
        v52(v51, v57, v8);
        v42 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
        {
          sub_100011F60(0, *(_QWORD *)v42->connection + 1, 1);
          v42 = v58;
        }
        v43 = v53;
        v45 = *(_QWORD *)v42->connection;
        v44 = *(_QWORD *)v42->airdropClient;
        if (v45 >= v44 >> 1)
        {
          sub_100011F60(v44 > 1, v45 + 1, 1);
          v42 = v58;
        }
        *(_QWORD *)v42->connection = v45 + 1;
        v41((char *)v42 + v43 + v45 * v22, v51, v8);
        v58 = v42;
      }
      v7 = v48;
      a1 = v49;
      v20 = v54 + 1;
      if (v54 + 1 == v50)
      {
        v47(v48, 1, 1, v8, v18);
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))(v7, 1, 1, v8, v18);
LABEL_19:
    swift_bridgeObjectRelease(a1, v24, v25, v26, v27, v28, v29, v30);
    sub_10000CC5C((uint64_t)v7, (uint64_t *)&unk_1001405D0);
  }
}

uint64_t sub_10008FB38(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7463617265746E69 && a2 == 0xED000044496E6F69)
  {
    v5 = 0xED000044496E6F69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7463617265746E69, 0xED000044496E6F69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x546572756C696166 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease(0xEB00000000657079);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x546572756C696166, 0xEB00000000657079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10008FC64(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _TtC9AirDropUI33AirDropTransferSessionsController *v17;
  SEL v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _TtC9AirDropUI33AirDropTransferSessionsController *v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;

  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004B10C();
  if (v6)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v7 = type metadata accessor for Logger(0);
    sub_100009558(v7, (uint64_t)qword_100148040);
    v8 = a1;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v89 = v12;
      *(_DWORD *)v11 = 136315394;
      v13 = type metadata accessor for UUID(0);
      v14 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v16;
      v88 = sub_10003A834(v15, v16, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

      swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
      *(_WORD *)(v11 + 12) = 2080;
      sub_10004B10C();
      LOBYTE(v88) = v25;
      v26 = String.init<A>(describing:)(&v88, &type metadata for NearbySharingInteractionPresentationStyle);
      v28 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v27;
      v88 = sub_10003A834(v26, v27, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

      swift_bridgeObjectRelease(v28, v29, v30, v31, v32, v33, v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Not creating remote alert for interaction with ID: %s preferred presentation style is: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100009558(v36, (uint64_t)qword_100148040);
  v38 = a1;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(12, -1);
    v87 = (uint8_t *)v37;
    v42 = (uint8_t *)v41;
    v43 = swift_slowAlloc(32, -1);
    *(_DWORD *)v42 = 136315138;
    v89 = v43;
    v44 = type metadata accessor for UUID(0);
    v45 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
    v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v47;
    v88 = sub_10003A834(v46, v47, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

    swift_bridgeObjectRelease(v48, v49, v50, v51, v52, v53, v54, v55);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Creating remote alert presentation for nearby sharing interaction with ID: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

  }
  v56 = objc_allocWithZone((Class)type metadata accessor for NearbySharingInteractionViewController(0));
  v57 = v38;
  v58 = sub_1000B3730(v57);
  type metadata accessor for AUIRemoteAlertPresentationManager(0);
  v59 = sub_100069274();
  v60 = dispatch thunk of SFRemoteAlertPresentationManager.present(_:animated:contentOverlaysStatusBar:supportedInterfaceOrientations:hideViewController:)(v58, 0, 1, 2, 0);

  if (!v60)
  {
    v63 = v57;
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      *(_DWORD *)v66 = 136315138;
      v89 = v67;
      v87 = v66 + 4;
      v68 = type metadata accessor for UUID(0);
      v69 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v68, v69);
      v72 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v71;
      v88 = sub_10003A834(v70, v71, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);

      swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Could not create remote alert for interaction with ID: %s, ending the interaction", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);

    }
    else
    {

    }
    v80 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v5, 1, 1, v80);
    type metadata accessor for MainActor(0);
    v81 = v63;
    v82 = static MainActor.shared.getter(v81);
    v83 = (_QWORD *)swift_allocObject(&unk_100127E88, 40, 7);
    v83[2] = v82;
    v83[3] = &protocol witness table for MainActor;
    v83[4] = v81;
    v84 = sub_1000CB748((uint64_t)v5, (uint64_t)&unk_10013F208, (uint64_t)v83);

    swift_release(v84);
    return 0;
  }
  v61 = swift_allocObject(&unk_100127EB0, 24, 7);
  *(_QWORD *)(v61 + 16) = v57;
  v62 = v57;
  swift_retain(v60);
  dispatch thunk of SFRemoteAlertPresentationHandle.onDismiss.setter(sub_1000919D0, v61);

  swift_release(v60);
  return v60;
}

uint64_t sub_100090318(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  _TtC9AirDropUI33AirDropTransferSessionsController *v74;
  SEL v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _TtC9AirDropUI33AirDropTransferSessionsController *v90;
  SEL v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(uint64_t, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  int v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  __n128 v129;
  uint8_t *v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  int v135;
  uint64_t (*v136)(char *, uint64_t, __n128);
  void (*v137)(char *, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150[2];

  v2 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v145 = *(_QWORD *)(v2 - 8);
  v146 = v2;
  __chkstk_darwin(v2, v3);
  v143 = (char *)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v144, v5);
  v148 = (uint64_t)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActivityPresentationOptions(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v20 = (uint8_t **)((char *)&v131 - v19);
  v21 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004B10C();
  if (v25 == 1)
  {
    v142 = v7;
    v26 = type metadata accessor for TaskPriority(0);
    v137 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v138 = v26;
    v137(v24, 1, 1);
    v139 = type metadata accessor for MainActor(0);
    v27 = static MainActor.shared.getter(v139);
    v28 = swift_allocObject(&unk_100127E10, 32, 7);
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = &protocol witness table for MainActor;
    v29 = sub_1000CB748((uint64_t)v24, (uint64_t)&unk_10013F1C0, v28);
    swift_release(v29);
    KeyPath = swift_getKeyPath(&unk_1000ED738);
    v31 = swift_getKeyPath(&unk_1000ED760);
    static Published.subscript.getter((char *)v20, a1, KeyPath, v31);
    swift_release(KeyPath);
    v32 = swift_release(v31);
    v136 = *(uint64_t (**)(char *, uint64_t, __n128))(v13 + 88);
    LODWORD(KeyPath) = v136((char *)v20, v12, v32);
    LODWORD(v31) = enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:);
    v133 = *(void (**)(char *, uint64_t))(v13 + 8);
    v133((char *)v20, v12);
    v135 = v31;
    v147 = v11;
    v140 = v24;
    v141 = v8;
    v134 = v13;
    if ((_DWORD)KeyPath == (_DWORD)v31)
    {
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v33 = type metadata accessor for Logger(0);
      sub_100009558(v33, (uint64_t)qword_100148040);
      v34 = a1;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        v132 = v38;
        *(_DWORD *)v37 = 136315138;
        v150[0] = v38;
        v131 = v37 + 4;
        v39 = type metadata accessor for UUID(0);
        v40 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
        v43 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v42;
        v149 = sub_10003A834(v41, v42, v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150);

        swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Creating failure activity for nearby sharing interaction with ID: %s", v37, 0xCu);
        v51 = v132;
        swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        v52 = v37;
        goto LABEL_15;
      }
    }
    else
    {
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v82 = type metadata accessor for Logger(0);
      sub_100009558(v82, (uint64_t)qword_100148040);
      v34 = a1;
      v35 = Logger.logObject.getter(v34);
      v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(12, -1);
        v85 = swift_slowAlloc(32, -1);
        v132 = v85;
        *(_DWORD *)v84 = 136315138;
        v150[0] = v85;
        v131 = v84 + 4;
        v86 = type metadata accessor for UUID(0);
        v87 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v88 = dispatch thunk of CustomStringConvertible.description.getter(v86, v87);
        v90 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v89;
        v149 = sub_10003A834(v88, v89, v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150);

        swift_bridgeObjectRelease(v90, v91, v92, v93, v94, v95, v96, v97);
        _os_log_impl((void *)&_mh_execute_header, v35, v83, "Creating activity for nearby sharing interaction with ID: %s", v84, 0xCu);
        v98 = v132;
        swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1, -1);
        v52 = v84;
LABEL_15:
        swift_slowDealloc(v52, -1, -1);

        if (!SBUIIsSystemApertureEnabled(v99))
        {
LABEL_16:
          v100 = sub_100008F88(&qword_10013EAB0);
          v101 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination(0);
          v102 = *(_QWORD *)(v101 - 8);
          v103 = *(unsigned __int8 *)(v102 + 80);
          v104 = (v103 + 32) & ~v103;
          v105 = swift_allocObject(v100, v104 + *(_QWORD *)(v102 + 72), v103 | 7);
          *(_OWORD *)(v105 + 16) = xmmword_1000E9370;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v102 + 104))(v105 + v104, enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:), v101);
LABEL_20:
          v107 = v146;
          v108 = v145;
          ActivityPresentationOptions.init(destinations:)(v105);
          v109 = &a1[OBJC_IVAR____TtC9AirDropUI33NearbySharingInteractionViewModel_id];
          v110 = type metadata accessor for UUID(0);
          v111 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16);
          v112 = v148;
          v146 = (uint64_t)v109;
          v111(v148, v109, v110);
          v113 = v112 + *(int *)(v144 + 20);
          v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56);
          v114(v113, 1, 1, v107);
          v115 = swift_getKeyPath(&unk_1000ED738);
          v116 = swift_getKeyPath(&unk_1000ED760);
          static Published.subscript.getter(v16, a1, v115, v116);
          swift_release(v115);
          v117 = swift_release(v116);
          v118 = v136(v16, v12, v117);
          if (v118 == v135)
          {
            (*(void (**)(char *, uint64_t))(v134 + 96))(v16, v12);
            v119 = *(void (**)(char *, char *, uint64_t))(v108 + 32);
            v120 = v143;
            v119(v143, v16, v107);
            sub_10000CC5C(v113, &qword_10013EF70);
            v119((char *)v113, v120, v107);
            v114(v113, 0, 1, v107);
          }
          else
          {
            v133(v16, v12);
          }
          sub_100008F88(&qword_10013F1D0);
          v121 = v147;
          v123 = static Activity.request(attributes:contentState:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:)(v148, v122, v147, 0xD00000000000001BLL, 0x80000001000F1FA0, 1, &_swiftEmptyArrayStorage, 1);
          v124 = (uint64_t)v140;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v137)(v140, 1, 1, v138);
          swift_retain_n(v123, 2);
          v125 = a1;
          v126 = static MainActor.shared.getter(v125);
          v127 = (_QWORD *)swift_allocObject(&unk_100127E60, 48, 7);
          v127[2] = v126;
          v127[3] = &protocol witness table for MainActor;
          v127[4] = v123;
          v127[5] = v125;
          v128 = sub_1000CB748(v124, (uint64_t)&unk_10013F1F0, (uint64_t)v127);
          swift_release(v123);
          v129 = swift_release(v128);
          (*(void (**)(char *, uint64_t, __n128))(v141 + 8))(v121, v142, v129);
          sub_10000C4C8(v148, type metadata accessor for NearbySharingInteractionAttributes);
          return v123;
        }
LABEL_19:
        v105 = static ActivityPresentationOptions.ActivityPresentationDestination.systemApertureOnly.getter();
        goto LABEL_20;
      }
    }

    if (!SBUIIsSystemApertureEnabled(v106))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v53 = type metadata accessor for Logger(0);
  sub_100009558(v53, (uint64_t)qword_100148040);
  v54 = a1;
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(64, -1);
    v150[0] = v58;
    *(_DWORD *)v57 = 136315394;
    v59 = type metadata accessor for UUID(0);
    v60 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
    v63 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v62;
    v149 = sub_10003A834(v61, v62, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150);

    swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
    *(_WORD *)(v57 + 12) = 2080;
    sub_10004B10C();
    LOBYTE(v149) = v71;
    v72 = String.init<A>(describing:)(&v149, &type metadata for NearbySharingInteractionPresentationStyle);
    v74 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v73;
    v149 = sub_10003A834(v72, v73, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150);

    swift_bridgeObjectRelease(v74, v75, v76, v77, v78, v79, v80, v81);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Not creating activity for interaction with ID: %s preferred presentation style is: %s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v57, -1, -1);

  }
  else
  {

  }
  return 0;
}

void sub_100090FA8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  _TtC9AirDropUI33AirDropTransferSessionsController *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _TtC9AirDropUI33AirDropTransferSessionsController *v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 *i;
  _TtC9AirDropUI33AirDropTransferSessionsController *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  _TtC9AirDropUI33AirDropTransferSessionsController *v44;
  char v46;
  SEL v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  _TtC9AirDropUI33AirDropTransferSessionsController *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  _TtC9AirDropUI33AirDropTransferSessionsController *v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  uint64_t v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  char *v72;
  id v73;
  NSURL *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  const char *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  _TtC9AirDropUI33AirDropTransferSessionsController *v85;
  Class isa;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  _TtC9AirDropUI33AirDropTransferSessionsController *v98;

  v3 = sub_100008F88(&qword_10013CB20);
  __chkstk_darwin(v3, v4);
  v97 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v96 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000ED6A8);
  v11 = swift_getKeyPath(&unk_1000ED6D0);
  static Published.subscript.getter(&v98, v1, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  v12 = v98;
  v13 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10007D460((uint64_t)v98);
  swift_bridgeObjectRelease(v12, v14, v15, v16, v17, v18, v19, v20);
  v21 = sub_10007CFA0((uint64_t)v13);
  swift_bridgeObjectRelease(v13, v22, v23, v24, v25, v26, v27, v28);
  v36 = *(_QWORD *)v21->connection;
  if (!v36)
  {
    swift_bridgeObjectRelease(v21, v29, v30, v31, v32, v33, v34, v35);
    return;
  }
  v94 = v7;
  v95 = v6;
  swift_bridgeObjectRetain(v21);
  for (i = v21->transfersMonitorTask; ; i += 24)
  {
    v39 = *((_QWORD *)i - 1);
    v38 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)i;
    swift_bridgeObjectRetain_n(*(_QWORD *)i, 2);
    v40 = objc_msgSend(a1, "sender");
    if (!v40)
    {
      swift_bridgeObjectRelease_n(v38, 2);
      goto LABEL_4;
    }
    v41 = v40;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    if (v39 == v42 && v38 == v44)
      break;
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v38, v42, v44, 0);
    swift_bridgeObjectRelease_n(v38, 2);
    swift_bridgeObjectRelease(v44, v47, v48, v49, v50, v51, v52, v53);
    if ((v46 & 1) != 0)
    {
      v54 = v21;
      v55 = 2;
      goto LABEL_15;
    }
LABEL_4:
    if (!--v36)
    {
      swift_bridgeObjectRelease_n(v21, 2);
      return;
    }
  }
  swift_bridgeObjectRelease_n(v21, 2);
  v54 = v38;
  v55 = 3;
LABEL_15:
  swift_bridgeObjectRelease_n(v54, v55);
  v56 = objc_msgSend(a1, "body");
  v58 = v94;
  v57 = v95;
  if (v56)
  {
    v59 = v56;
    v60 = objc_msgSend(v56, "string");

    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v63 = v62;

    v64 = (uint64_t)v97;
    URL.init(string:)(v61, v63);
    swift_bridgeObjectRelease(v63, v65, v66, v67, v68, v69, v70, v71);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v64, 1, v57) == 1)
    {
      sub_10000CC5C(v64, &qword_10013CB20);
    }
    else
    {
      v72 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v96, v64, v57);
      v73 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      URL._bridgeToObjectiveC()(v74);
      v75 = v58;
      v77 = v76;
      v85 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10007DE58(&_swiftEmptyArrayStorage, v78, v79, v80, v81, v82, v83, v84);
      type metadata accessor for OpenExternalURLOptionsKey(0);
      sub_100008694(&qword_10013B350, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000E8FF0);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v85, v87, v88, v89, v90, v91, v92, v93);
      objc_msgSend(v73, "openURL:options:completionHandler:", v77, isa, 0);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v57);
    }
  }
}

uint64_t sub_100091358(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F0D4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_10007FE8C(a1, v4, v5, v6);
}

uint64_t sub_1000913C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F0F4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_1000857AC(a1, v4, v5, v6);
}

uint64_t sub_100091434()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100091458()
{
  sub_10008547C();
}

uint64_t sub_100091478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100091488(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100091494()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000914C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F11C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000104E4;
  return sub_100085390(a1, v4, v5, v6);
}

uint64_t sub_10009152C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_100091550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000915C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction(0) - 8) + 80);
  sub_100084224(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100091604()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100091630()
{
  uint64_t v0;

  sub_1000844F8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100091638()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009165C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000916D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10013F184);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000104E4;
  return sub_100084438(a1, v5, v6, v7, v8);
}

uint64_t sub_10009176C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88((uint64_t *)&unk_10013F1A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000917BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000917E0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10013F1BC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100018F40;
  return sub_10006947C();
}

uint64_t sub_100091848(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F1DC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_100084AC4(a1, v4, v5, v6);
}

uint64_t sub_1000918B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000918E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10013F1EC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100018F40;
  return sub_100084B64(a1, v4, v5, v7, v6);
}

uint64_t sub_100091964(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F204);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_10007FE8C(a1, v4, v5, v6);
}

double sub_1000919D0()
{
  uint64_t v0;

  return sub_100084558(*(void **)(v0 + 16));
}

uint64_t sub_1000919DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F214);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_10007FE8C(a1, v4, v5, v6);
}

uint64_t sub_100091A4C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F234);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_10007FE8C(a1, v4, v5, v6);
}

uint64_t sub_100091AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100091B3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0) - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc(dword_10013F254);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100018F40;
  return sub_100081EB0(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_100091BE0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100091C0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10013F274);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_10007FE8C(a1, v4, v5, v6);
}

unint64_t sub_100091C78()
{
  unint64_t result;

  result = qword_10013F290;
  if (!qword_10013F290)
  {
    result = swift_getWitnessTable(&unk_1000EC278, &type metadata for Handle);
    atomic_store(result, (unint64_t *)&qword_10013F290);
  }
  return result;
}

uint64_t sub_100091CBC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100091CF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10013F2D4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100018F40;
  return sub_1000801F8(a1, v4, v5, v7, v6);
}

unint64_t sub_100091D68()
{
  unint64_t result;

  result = qword_10013F330;
  if (!qword_10013F330)
  {
    result = swift_getWitnessTable(&unk_1000ED218, &type metadata for SourceApplication.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10013F330);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionPresentationStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionPresentationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100091E88 + 4 * byte_1000ED495[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100091EBC + 4 * byte_1000ED490[v4]))();
}

uint64_t sub_100091EBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091EC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100091ECCLL);
  return result;
}

uint64_t sub_100091ED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100091EE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100091EE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091EEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100091EF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionPresentationStyle()
{
  return &type metadata for NearbySharingInteractionPresentationStyle;
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionAttributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100091F5C + 4 * byte_1000ED49F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100091F90 + 4 * byte_1000ED49A[v4]))();
}

uint64_t sub_100091F90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091F98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100091FA0);
  return result;
}

uint64_t sub_100091FAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100091FB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100091FB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091FC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionAttributes.CodingKeys()
{
  return &type metadata for NearbySharingInteractionAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionAttributes.ContentState.CodingKeys()
{
  return &type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionAttributes.ContentState()
{
  return &type metadata for NearbySharingInteractionAttributes.ContentState;
}

unint64_t sub_100092000()
{
  unint64_t result;

  result = qword_10013F340;
  if (!qword_10013F340)
  {
    result = swift_getWitnessTable(&unk_1000ED8F4, &type metadata for NearbySharingInteractionAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F340);
  }
  return result;
}

unint64_t sub_100092048()
{
  unint64_t result;

  result = qword_10013F348;
  if (!qword_10013F348)
  {
    result = swift_getWitnessTable(&unk_1000ED95C, &type metadata for NearbySharingInteractionPresentationStyle);
    atomic_store(result, (unint64_t *)&qword_10013F348);
  }
  return result;
}

unint64_t sub_100092090()
{
  unint64_t result;

  result = qword_10013F350;
  if (!qword_10013F350)
  {
    result = swift_getWitnessTable(&unk_1000ED864, &type metadata for NearbySharingInteractionAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F350);
  }
  return result;
}

unint64_t sub_1000920D8()
{
  unint64_t result;

  result = qword_10013F358;
  if (!qword_10013F358)
  {
    result = swift_getWitnessTable(&unk_1000ED88C, &type metadata for NearbySharingInteractionAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F358);
  }
  return result;
}

unint64_t sub_100092120()
{
  unint64_t result;

  result = qword_10013F360;
  if (!qword_10013F360)
  {
    result = swift_getWitnessTable(&unk_1000ED814, &type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F360);
  }
  return result;
}

unint64_t sub_100092168()
{
  unint64_t result;

  result = qword_10013F368;
  if (!qword_10013F368)
  {
    result = swift_getWitnessTable(&unk_1000ED83C, &type metadata for NearbySharingInteractionAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10013F368);
  }
  return result;
}

uint64_t sub_1000921BC(uint64_t a1)
{
  return sub_10009226C(a1, qword_100147FE0, 0x55706F7244726941, 0xE900000000000049);
}

uint64_t sub_1000921E0(uint64_t a1)
{
  return sub_10009226C(a1, qword_100147FF8, 0xD00000000000001BLL, 0x80000001000F2580);
}

uint64_t sub_100092204(uint64_t a1)
{
  return sub_10009226C(a1, qword_100148010, 0xD000000000000010, 0x80000001000F25A0);
}

uint64_t sub_100092228(uint64_t a1)
{
  return sub_10009226C(a1, qword_100148028, 0x55706F7244726941, 0xED00007765695649);
}

uint64_t sub_100092254(uint64_t a1)
{
  return sub_10009226C(a1, qword_100148040, 1886351170, 0xE400000000000000);
}

uint64_t sub_10009226C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_100017104(v7, a2);
  sub_100009558(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD00000000000001BLL, 0x80000001000F2560, a3, a4);
}

_QWORD *sub_1000922E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100008F88(&qword_10013BDE8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (_QWORD *)((char *)a1 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    v19 = a3[7];
    v20 = a3[8];
    v21 = *(void **)((char *)a2 + v19);
    *(_QWORD *)((char *)a1 + v19) = v21;
    *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
    swift_retain(v18);
    v22 = v21;
  }
  return a1;
}

void sub_1000923E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100008F88(&qword_10013BDE8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));

}

_QWORD *sub_100092464(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v6 = sub_100008F88(&qword_10013BDE8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v17 = a3[7];
  v18 = a3[8];
  v19 = *(void **)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  swift_retain(v16);
  v20 = v19;
  return a1;
}

_QWORD *sub_10009253C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;

  if (a1 != a2)
  {
    sub_10000CC5C((uint64_t)a1, &qword_10013BDE8);
    v6 = sub_100008F88(&qword_10013BDE8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v17 = a3[7];
  v18 = *(void **)((char *)a2 + v17);
  v19 = *(void **)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = v18;
  v20 = v18;

  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

char *sub_100092650(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100008F88(&qword_10013BDE8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  a1[v8] = a2[v8];
  v9 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v9] = a2[v9];
  return a1;
}

char *sub_100092714(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if (a1 != a2)
  {
    sub_10000CC5C((uint64_t)a1, &qword_10013BDE8);
    v6 = sub_100008F88(&qword_10013BDE8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_release(v13);
  v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v15 = *(void **)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];

  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_10009280C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100092818);
}

uint64_t sub_100092818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100008F88(&qword_10013F3A8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10009289C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000928A8);
}

uint64_t sub_1000928A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100008F88(&qword_10013F3A8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AirDropAskRequestView(uint64_t a1)
{
  uint64_t result;

  result = qword_10013F408;
  if (!qword_10013F408)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropAskRequestView);
  return result;
}

void sub_100092964(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_1000929F0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000EDA68;
    v4[2] = &unk_1000EDA80;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_1000EDA80;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_1000929F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10013F418)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10013F418);
  }
}

uint64_t sub_100092A44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114540, 1);
}

uint64_t sub_100092A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v15 - v12, a1, a2);
  swift_storeEnumTagMultiPayload(v13, v10, 0);
  return _ConditionalContent<>.init(storage:)(v13, a2, a3, a4, a5);
}

uint64_t sub_100092B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v15 - v12, a1, a3);
  swift_storeEnumTagMultiPayload(v13, v10, 1);
  return _ConditionalContent<>.init(storage:)(v13, a2, a3, a4, a5);
}

uint64_t sub_100092BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013F390);
  v1 = sub_100009558(v0, (uint64_t)qword_10013F390);
  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v2 = sub_100009558(v0, (uint64_t)qword_100148028);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100092C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = v2 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 20);
  v9 = *(_QWORD *)(v8 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDB30);
  v11 = swift_getKeyPath(&unk_1000EDB58);
  v12 = swift_retain(v9);
  static Published.subscript.getter(v7, v12, KeyPath, v11);
  swift_release(v9);
  swift_release(KeyPath);
  v13 = swift_release(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v4 + 88))(v7, v3, v13);
  if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v7, v3);
    v15 = *(_QWORD *)(v8 + 8);
    v16 = swift_getKeyPath(&unk_1000EDC08);
    v17 = swift_getKeyPath(&unk_1000EDC30);
    v18 = swift_retain(v15);
    static Published.subscript.getter(&v34, v18, v16, v17);
    swift_release(v15);
    swift_release(v16);
    swift_release(v17);
    v19 = v34;
    v20 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v7, v20);
  }
  else if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 96))(v7, v3);
    v21 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)((char *)v7 + *(int *)(v21 + 48)), v22, v23, v24, v25, v26, v27, v28);
    v29 = (char *)v7 + *(int *)(v21 + 64);
    v30 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
    v31 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v7, v31);
    return 1;
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
  return v19;
}

uint64_t sub_100092E94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t KeyPath;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  __n128 v85;
  uint64_t v86;
  void (*v87)(_QWORD *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void (*v195)(char *, uint64_t);
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  char *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;

  v249 = a1;
  v220 = sub_100008F88(&qword_10013F458);
  __chkstk_darwin(v220, v2);
  v221 = (uint64_t)&v204 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_100008F88(&qword_10013F460);
  __chkstk_darwin(v248, v4);
  v222 = (char *)&v204 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_100008F88(&qword_10013F468);
  __chkstk_darwin(v219, v6);
  v206 = (uint64_t)&v204 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88((uint64_t *)&unk_10013DCB0);
  __chkstk_darwin(v8, v9);
  v213 = (char *)&v204 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_100008F88(&qword_10013CA70);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217, v11);
  v205 = (char *)&v204 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100008F88(&qword_10013F470);
  __chkstk_darwin(v13, v14);
  v230 = (char *)&v204 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v16);
  v228 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233, v17);
  v212 = (uint64_t *)((char *)&v204 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v20);
  v227 = (uint64_t *)((char *)&v204 - v21);
  v237 = sub_100008F88(&qword_10013F478);
  __chkstk_darwin(v237, v22);
  v238 = (uint64_t)&v204 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = sub_100008F88(&qword_10013F480);
  __chkstk_darwin(v247, v24);
  v240 = (char *)&v204 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008F88(&qword_10013F488);
  __chkstk_darwin(v26, v27);
  v215 = (uint64_t *)((char *)&v204 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v239 = sub_100008F88(&qword_10013F490);
  __chkstk_darwin(v239, v29);
  v214 = (uint64_t)&v204 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v32);
  v218 = (uint64_t)&v204 - v33;
  v226 = sub_100008F88(&qword_10013F498);
  __chkstk_darwin(v226, v34);
  v204 = (uint64_t)&v204 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_100008F88(&qword_10013DD18);
  v210 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211, v36);
  v209 = (char *)&v204 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = sub_100008F88(&qword_10013F4A0);
  __chkstk_darwin(v231, v38);
  v234 = (uint64_t)&v204 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_100008F88(&qword_10013F4A8);
  __chkstk_darwin(v223, v40);
  v224 = (uint64_t)&v204 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_100008F88(&qword_10013F4B0);
  __chkstk_darwin(v232, v42);
  v225 = (char *)&v204 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = sub_100008F88(&qword_10013F4B8);
  __chkstk_darwin(v250, v44);
  v229 = (uint64_t)&v204 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100008F88((uint64_t *)&unk_10013DC90);
  v241 = *(_QWORD *)(v46 - 8);
  v242 = v46;
  __chkstk_darwin(v46, v47);
  v208 = (char *)&v204 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49, v50);
  v207 = (char *)&v204 - v51;
  v236 = sub_100008F88(&qword_10013F4C0);
  __chkstk_darwin(v236, v52);
  v235 = (char *)&v204 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v54, v55);
  v57 = (uint64_t *)((char *)&v204 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v59 = *(char **)(v58 - 8);
  __chkstk_darwin(v58, v60);
  v62 = (char *)&v204 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63, v64);
  v66 = (char *)&v204 - v65;
  v67 = sub_100008F88(&qword_10013F4C8);
  v245 = *(_QWORD *)(v67 - 8);
  v246 = v67;
  __chkstk_darwin(v67, v68);
  v244 = (char *)&v204 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = *(int *)(type metadata accessor for AirDropAskRequestView(0) + 20);
  v243 = (char *)v1;
  v71 = v1 + v70;
  v72 = *(_QWORD *)(v1 + v70 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDAE8);
  v74 = swift_getKeyPath(&unk_1000EDB10);
  v75 = swift_retain(v72);
  static Published.subscript.getter(v57, v75, KeyPath, v74);
  swift_release(v72);
  swift_release(KeyPath);
  v76 = v74;
  v77 = v59;
  v78 = v58;
  v79 = swift_release(v76);
  if ((*((unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))v77 + 6))(v57, 1, v58, v79) == 1)
  {
    sub_10000CC5C((uint64_t)v57, &qword_10013C9E0);
    v80 = *(_QWORD *)(v71 + 8);
    v81 = swift_getKeyPath(&unk_1000EDB30);
    v82 = swift_getKeyPath(&unk_1000EDB58);
    v83 = swift_retain(v80);
    v84 = v227;
    static Published.subscript.getter(v227, v83, v81, v82);
    swift_release(v80);
    swift_release(v81);
    v85 = swift_release(v82);
    v86 = (uint64_t)v230;
    SFAirDropReceive.Transfer.State.contactResponsePermissionRequest.getter(v85);
    v87 = *(void (**)(_QWORD *, uint64_t))(v228 + 8);
    v88 = v233;
    v87(v84, v233);
    v89 = v241;
    v90 = v242;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v241 + 48))(v86, 1, v242) == 1)
    {
      sub_10000CC5C(v86, &qword_10013F470);
      v91 = *(_QWORD *)(v71 + 8);
      v92 = swift_getKeyPath(&unk_1000EDB30);
      v93 = swift_getKeyPath(&unk_1000EDB58);
      v94 = swift_retain(v91);
      v95 = v212;
      static Published.subscript.getter(v212, v94, v92, v93);
      swift_release(v91);
      swift_release(v92);
      v96 = swift_release(v93);
      v97 = (uint64_t)v213;
      SFAirDropReceive.Transfer.State.permissionRequest.getter(v96);
      v87(v95, v88);
      v98 = v216;
      v99 = v217;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v97, 1, v217) == 1)
      {
        v100 = sub_10000CC5C(v97, (uint64_t *)&unk_10013DCB0);
        v101 = static VerticalAlignment.center.getter(v100);
        v102 = (uint64_t)v215;
        *v215 = v101;
        *(_QWORD *)(v102 + 8) = 0;
        *(_BYTE *)(v102 + 16) = 1;
        v103 = sub_100008F88(&qword_10013F4D0);
        v104 = sub_1000A1D1C((uint64_t)v243, v102 + *(int *)(v103 + 44));
        v105 = static Edge.Set.all.getter(v104);
        v106 = EdgeInsets.init(_all:)(10.0);
        v108 = v107;
        v110 = v109;
        v112 = v111;
        v113 = v214;
        sub_10000CC18(v102, v214, &qword_10013F488);
        v114 = v239;
        v115 = v113 + *(int *)(v239 + 36);
        *(_BYTE *)v115 = v105;
        *(double *)(v115 + 8) = v106;
        *(_QWORD *)(v115 + 16) = v108;
        *(_QWORD *)(v115 + 24) = v110;
        *(_QWORD *)(v115 + 32) = v112;
        *(_BYTE *)(v115 + 40) = 0;
        sub_10000CC5C(v102, &qword_10013F488);
        v116 = v218;
        sub_10000CBD4(v113, v218, &qword_10013F490);
        v117 = v221;
        sub_10000CC18(v116, v221, &qword_10013F490);
        swift_storeEnumTagMultiPayload(v117, v220, 1);
        v118 = sub_1000A3E94();
        v119 = sub_1000A3F60();
        v120 = (uint64_t)v222;
        _ConditionalContent<>.init(storage:)(v117, v219, v114, v118, v119);
        v121 = sub_1000A3FE4();
        v122 = sub_1000A41E8();
        v123 = (uint64_t)v244;
        sub_100092B18(v120, v247, v248, v121, v122);
        sub_10000CC5C(v120, &qword_10013F460);
        sub_10000CC5C(v116, &qword_10013F490);
      }
      else
      {
        v165 = v205;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v205, v97, v99);
        v166 = v206;
        sub_100094C98(v206);
        v167 = v221;
        sub_10000CC18(v166, v221, &qword_10013F468);
        swift_storeEnumTagMultiPayload(v167, v220, 0);
        v168 = sub_1000A3E94();
        v169 = sub_1000A3F60();
        v170 = (uint64_t)v222;
        _ConditionalContent<>.init(storage:)(v167, v219, v239, v168, v169);
        v171 = sub_1000A3FE4();
        v172 = sub_1000A41E8();
        v123 = (uint64_t)v244;
        sub_100092B18(v170, v247, v248, v171, v172);
        sub_10000CC5C(v170, &qword_10013F460);
        sub_10000CC5C(v166, &qword_10013F468);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v165, v99);
      }
    }
    else
    {
      v146 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v208, v86, v90);
      v147 = v229;
      sub_100094038(v229);
      v148 = v238;
      sub_10000CC18(v147, v238, &qword_10013F4B8);
      swift_storeEnumTagMultiPayload(v148, v237, 1);
      v149 = sub_1000A4008();
      v150 = sub_1000A4050();
      v151 = (uint64_t)v240;
      _ConditionalContent<>.init(storage:)(v148, v236, v250, v149, v150);
      v152 = sub_1000A3FE4();
      v153 = sub_1000A41E8();
      v123 = (uint64_t)v244;
      sub_100092A54(v151, v247, v248, v152, v153);
      sub_10000CC5C(v151, &qword_10013F480);
      sub_10000CC5C(v147, &qword_10013F4B8);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v146, v90);
    }
  }
  else
  {
    v124 = v241;
    v125 = v242;
    (*((void (**)(char *, _QWORD *, uint64_t))v77 + 4))(v66, v57, v78);
    (*((void (**)(char *, char *, uint64_t))v77 + 2))(v62, v66, v78);
    v126 = (*((uint64_t (**)(char *, uint64_t))v77 + 11))(v62, v78);
    v127 = v66;
    if ((_DWORD)v126 == enum case for SFAirDropSend.Transfer.State.waitingForShareContactPermissionResponse(_:))
    {
      (*((void (**)(char *, uint64_t))v77 + 12))(v62, v78);
      v128 = &v62[*(int *)(sub_100008F88(&qword_10013DD20) + 48)];
      v129 = v124;
      v130 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
      v131 = v207;
      v233 = (uint64_t)v66;
      v230 = v77;
      v132 = v125;
      v130(v207, v128, v125);
      v133 = v229;
      sub_100094038(v229);
      v243 = v62;
      v134 = v224;
      sub_10000CC18(v133, v224, &qword_10013F4B8);
      swift_storeEnumTagMultiPayload(v134, v223, 0);
      v135 = sub_1000A4050();
      v136 = sub_1000A411C();
      v137 = (uint64_t)v225;
      _ConditionalContent<>.init(storage:)(v134, v250, v226, v135, v136);
      v138 = v234;
      sub_10000CC18(v137, v234, &qword_10013F4B0);
      swift_storeEnumTagMultiPayload(v138, v231, 0);
      v139 = sub_1000A402C();
      v140 = sub_1000A3F60();
      v141 = v235;
      _ConditionalContent<>.init(storage:)(v138, v232, v239, v139, v140);
      sub_10000CC5C(v137, &qword_10013F4B0);
      sub_10000CC5C(v133, &qword_10013F4B8);
      v142 = v131;
      v143 = (uint64_t)v141;
      v144 = v132;
      v77 = v230;
      v127 = (char *)v233;
      (*(void (**)(char *, uint64_t))(v129 + 8))(v142, v144);
      v145 = type metadata accessor for SFAirDrop.ContactInfo(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v145 - 8) + 8))(v243, v145);
    }
    else
    {
      v154 = v250;
      v143 = (uint64_t)v235;
      if ((_DWORD)v126 == enum case for SFAirDropSend.Transfer.State.waitingForImportContactResponse(_:))
      {
        (*((void (**)(char *, uint64_t))v77 + 12))(v62, v78);
        v155 = sub_100008F88(&qword_10013DD10);
        (*(void (**)(char *, char *, uint64_t))(v210 + 32))(v209, &v62[*(int *)(v155 + 48)], v211);
        v156 = v204;
        sub_100094668(v204);
        v157 = v224;
        sub_10000CC18(v156, v224, &qword_10013F498);
        swift_storeEnumTagMultiPayload(v157, v223, 1);
        v158 = sub_1000A4050();
        v159 = sub_1000A411C();
        v160 = (uint64_t)v225;
        _ConditionalContent<>.init(storage:)(v157, v154, v226, v158, v159);
        v161 = v234;
        sub_10000CC18(v160, v234, &qword_10013F4B0);
        swift_storeEnumTagMultiPayload(v161, v231, 0);
        v162 = sub_1000A402C();
        v163 = sub_1000A3F60();
        _ConditionalContent<>.init(storage:)(v161, v232, v239, v162, v163);
        sub_10000CC5C(v160, &qword_10013F4B0);
        sub_10000CC5C(v156, &qword_10013F498);
        (*(void (**)(char *, uint64_t))(v210 + 8))(v209, v211);
        v164 = type metadata accessor for SFAirDrop.ContactInfo(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v164 - 8) + 8))(v62, v164);
      }
      else
      {
        v173 = static VerticalAlignment.center.getter(v126);
        v174 = (uint64_t)v215;
        *v215 = v173;
        *(_QWORD *)(v174 + 8) = 0;
        *(_BYTE *)(v174 + 16) = 1;
        v175 = sub_100008F88(&qword_10013F4D0);
        v176 = sub_1000A1D1C((uint64_t)v243, v174 + *(int *)(v175 + 44));
        v177 = v66;
        v178 = v77;
        v179 = v62;
        v180 = static Edge.Set.all.getter(v176);
        v181 = EdgeInsets.init(_all:)(10.0);
        v183 = v182;
        v185 = v184;
        v187 = v186;
        v188 = v214;
        sub_10000CC18(v174, v214, &qword_10013F488);
        v189 = v239;
        v190 = v188 + *(int *)(v239 + 36);
        *(_BYTE *)v190 = v180;
        *(double *)(v190 + 8) = v181;
        *(_QWORD *)(v190 + 16) = v183;
        *(_QWORD *)(v190 + 24) = v185;
        *(_QWORD *)(v190 + 32) = v187;
        *(_BYTE *)(v190 + 40) = 0;
        sub_10000CC5C(v174, &qword_10013F488);
        v191 = v218;
        sub_10000CBD4(v188, v218, &qword_10013F490);
        v192 = v234;
        sub_10000CC18(v191, v234, &qword_10013F490);
        swift_storeEnumTagMultiPayload(v192, v231, 1);
        v193 = sub_1000A402C();
        v194 = sub_1000A3F60();
        _ConditionalContent<>.init(storage:)(v192, v232, v189, v193, v194);
        sub_10000CC5C(v191, &qword_10013F490);
        v195 = (void (*)(char *, uint64_t))*((_QWORD *)v178 + 1);
        v196 = v179;
        v77 = v178;
        v127 = v177;
        v195(v196, v78);
      }
    }
    v197 = v238;
    sub_10000CC18(v143, v238, &qword_10013F4C0);
    swift_storeEnumTagMultiPayload(v197, v237, 0);
    v198 = sub_1000A4008();
    v199 = sub_1000A4050();
    v200 = (uint64_t)v240;
    _ConditionalContent<>.init(storage:)(v197, v236, v250, v198, v199);
    v201 = sub_1000A3FE4();
    v202 = sub_1000A41E8();
    v123 = (uint64_t)v244;
    sub_100092A54(v200, v247, v248, v201, v202);
    sub_10000CC5C(v200, &qword_10013F480);
    sub_10000CC5C(v143, &qword_10013F4C0);
    (*((void (**)(char *, uint64_t))v77 + 1))(v127, v78);
  }
  sub_10000C9D0(&qword_10013F598, &qword_10013F4C8, (void (*)(void))sub_1000A3FE4, (void (*)(void))sub_1000A41E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v245 + 16))(v249, v123, v246);
  return sub_10000CC5C(v123, &qword_10013F4C8);
}

uint64_t sub_100094038@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  uint64_t v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _TtC9AirDropUI33AirDropTransferSessionsController *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _TtC9AirDropUI33AirDropTransferSessionsController *v89;
  char *v90;
  _TtC9AirDropUI33AirDropTransferSessionsController *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = a1;
  v99 = sub_100008F88(&qword_10013F870);
  __chkstk_darwin(v99, v1);
  v97 = (uint64_t)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100008F88(&qword_10013F878);
  __chkstk_darwin(v95, v3);
  v93 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008F88(&qword_10013F540);
  __chkstk_darwin(v98, v5);
  v96 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013F558);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100008F88((uint64_t *)&unk_100140FB0);
  __chkstk_darwin(v94, v11);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v87 - v16;
  v18 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008F88(&qword_10013F880);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100008F88((uint64_t *)&unk_10013DC90);
  SFAirDrop.PermissionRequest.style.getter(v28);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v27, v23);
  if (v29 == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    v88 = v13;
    v90 = v17;
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    v30 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v27 + 1);
    v91 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v27;
    v31 = *((_QWORD *)v27 + 2);
    v32 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v27 + 3);
    v33 = *((_QWORD *)v27 + 4);
    v34 = sub_100008F88(&qword_10013F898);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, &v27[*(int *)(v34 + 80)], v18);
    *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v35);
    *((_QWORD *)v10 + 1) = 0;
    v10[16] = 0;
    v36 = (uint64_t)&v10[*(int *)(sub_100008F88(&qword_10013F8A0) + 44)];
    v37 = v91;
    v38 = v92;
    v91 = v30;
    v89 = v32;
    v39 = (uint64_t)v32;
    v40 = (uint64_t)v22;
    v41 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v33;
    sub_1000957F0(v92, (uint64_t)v37, (uint64_t)v30, v31, v39, v33, v40, v36);
    v42 = type metadata accessor for AirDropAskRequestView(0);
    v43 = *(unsigned __int8 *)(v38 + *(int *)(v42 + 24));
    v92 = v18;
    if (v43 == 1)
    {
      if (qword_10013ACA8 != -1)
        v42 = swift_once(&qword_10013ACA8, sub_10005F088);
      v44 = &qword_100147EB8;
    }
    else
    {
      if (qword_10013ACB0 != -1)
        v42 = swift_once(&qword_10013ACB0, sub_10005F09C);
      v44 = &qword_100147EC0;
    }
    v54 = (uint64_t)v90;
    v55 = *(double *)v44;
    v56 = static Alignment.center.getter(v42);
    v57 = (uint64_t)v88;
    sub_1000BF914(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v88, 0.0, 1, v55, 0, v56, v58);
    sub_10000CC5C((uint64_t)v10, &qword_10013F558);
    swift_bridgeObjectRelease(v41, v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRelease(v89, v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(v91, v73, v74, v75, v76, v77, v78, v79);
    sub_10000CBD4(v57, v54, (uint64_t *)&unk_100140FB0);
    v80 = v93;
    sub_10000CC18(v54, v93, (uint64_t *)&unk_100140FB0);
    swift_storeEnumTagMultiPayload(v80, v95, 0);
    v81 = sub_1000A4098();
    v82 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)(v80, v94, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    v83 = v97;
    sub_10000CC18(v82, v97, &qword_10013F540);
    swift_storeEnumTagMultiPayload(v83, v99, 0);
    v84 = sub_1000A4074();
    _ConditionalContent<>.init(storage:)(v83, v98, &type metadata for EmptyView, v84, &protocol witness table for EmptyView);
    sub_10000CC5C(v82, &qword_10013F540);
    sub_10000CC5C(v54, (uint64_t *)&unk_100140FB0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v40, v92);
  }
  else if (v29 == enum case for SFAirDrop.PermissionRequest.Style.intervention<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    v45 = &v27[*(int *)(sub_100008F88(&qword_10013F888) + 48)];
    v46 = v93;
    swift_storeEnumTagMultiPayload(v93, v95, 1);
    v47 = sub_1000A4098();
    v48 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)(v46, v94, &type metadata for EmptyView, v47, &protocol witness table for EmptyView);
    v49 = v97;
    sub_10000CC18(v48, v97, &qword_10013F540);
    swift_storeEnumTagMultiPayload(v49, v99, 0);
    v50 = sub_1000A4074();
    _ConditionalContent<>.init(storage:)(v49, v98, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
    sub_10000CC5C(v48, &qword_10013F540);
    v51 = sub_100008F88(&qword_10013F890);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v45, v51);
    v52 = type metadata accessor for SFInterventionWorkflow(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v27, v52);
  }
  else
  {
    v85 = v97;
    swift_storeEnumTagMultiPayload(v97, v99, 1);
    v86 = sub_1000A4074();
    _ConditionalContent<>.init(storage:)(v85, v98, &type metadata for EmptyView, v86, &protocol witness table for EmptyView);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  }
}

uint64_t sub_100094668@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  uint64_t v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _TtC9AirDropUI33AirDropTransferSessionsController *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _TtC9AirDropUI33AirDropTransferSessionsController *v89;
  char *v90;
  _TtC9AirDropUI33AirDropTransferSessionsController *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = a1;
  v99 = sub_100008F88(&qword_10013F5A0);
  __chkstk_darwin(v99, v1);
  v97 = (uint64_t)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100008F88(&qword_10013F5A8);
  __chkstk_darwin(v95, v3);
  v93 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008F88(&qword_10013F570);
  __chkstk_darwin(v98, v5);
  v96 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013F588);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100008F88((uint64_t *)&unk_100140FA0);
  __chkstk_darwin(v94, v11);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v87 - v16;
  v18 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008F88(&qword_10013F5B0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100008F88(&qword_10013DD18);
  SFAirDrop.PermissionRequest.style.getter(v28);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v27, v23);
  if (v29 == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    v88 = v13;
    v90 = v17;
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    v30 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v27 + 1);
    v91 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v27;
    v31 = *((_QWORD *)v27 + 2);
    v32 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v27 + 3);
    v33 = *((_QWORD *)v27 + 4);
    v34 = sub_100008F88(&qword_10013F5C8);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, &v27[*(int *)(v34 + 80)], v18);
    *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v35);
    *((_QWORD *)v10 + 1) = 0;
    v10[16] = 0;
    v36 = (uint64_t)&v10[*(int *)(sub_100008F88(&qword_10013F5D0) + 44)];
    v37 = v91;
    v38 = v92;
    v91 = v30;
    v89 = v32;
    v39 = (uint64_t)v32;
    v40 = (uint64_t)v22;
    v41 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v33;
    sub_10009555C(v92, (uint64_t)v37, (uint64_t)v30, v31, v39, v33, v40, v36);
    v42 = type metadata accessor for AirDropAskRequestView(0);
    v43 = *(unsigned __int8 *)(v38 + *(int *)(v42 + 24));
    v92 = v18;
    if (v43 == 1)
    {
      if (qword_10013ACA8 != -1)
        v42 = swift_once(&qword_10013ACA8, sub_10005F088);
      v44 = &qword_100147EB8;
    }
    else
    {
      if (qword_10013ACB0 != -1)
        v42 = swift_once(&qword_10013ACB0, sub_10005F09C);
      v44 = &qword_100147EC0;
    }
    v54 = (uint64_t)v90;
    v55 = *(double *)v44;
    v56 = static Alignment.center.getter(v42);
    v57 = (uint64_t)v88;
    sub_1000BF8BC(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v88, 0.0, 1, v55, 0, v56, v58);
    sub_10000CC5C((uint64_t)v10, &qword_10013F588);
    swift_bridgeObjectRelease(v41, v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRelease(v89, v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(v91, v73, v74, v75, v76, v77, v78, v79);
    sub_10000CBD4(v57, v54, (uint64_t *)&unk_100140FA0);
    v80 = v93;
    sub_10000CC18(v54, v93, (uint64_t *)&unk_100140FA0);
    swift_storeEnumTagMultiPayload(v80, v95, 0);
    v81 = sub_1000A4164();
    v82 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)(v80, v94, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    v83 = v97;
    sub_10000CC18(v82, v97, &qword_10013F570);
    swift_storeEnumTagMultiPayload(v83, v99, 0);
    v84 = sub_1000A4140();
    _ConditionalContent<>.init(storage:)(v83, v98, &type metadata for EmptyView, v84, &protocol witness table for EmptyView);
    sub_10000CC5C(v82, &qword_10013F570);
    sub_10000CC5C(v54, (uint64_t *)&unk_100140FA0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v40, v92);
  }
  else if (v29 == enum case for SFAirDrop.PermissionRequest.Style.intervention<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    v45 = &v27[*(int *)(sub_100008F88(&qword_10013F5B8) + 48)];
    v46 = v93;
    swift_storeEnumTagMultiPayload(v93, v95, 1);
    v47 = sub_1000A4164();
    v48 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)(v46, v94, &type metadata for EmptyView, v47, &protocol witness table for EmptyView);
    v49 = v97;
    sub_10000CC18(v48, v97, &qword_10013F570);
    swift_storeEnumTagMultiPayload(v49, v99, 0);
    v50 = sub_1000A4140();
    _ConditionalContent<>.init(storage:)(v49, v98, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
    sub_10000CC5C(v48, &qword_10013F570);
    v51 = sub_100008F88(&qword_10013F5C0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v45, v51);
    v52 = type metadata accessor for SFInterventionWorkflow(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v27, v52);
  }
  else
  {
    v85 = v97;
    swift_storeEnumTagMultiPayload(v97, v99, 1);
    v86 = sub_1000A4140();
    _ConditionalContent<>.init(storage:)(v85, v98, &type metadata for EmptyView, v86, &protocol witness table for EmptyView);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  }
}

uint64_t sub_100094C98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  uint64_t v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _TtC9AirDropUI33AirDropTransferSessionsController *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  SEL v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _TtC9AirDropUI33AirDropTransferSessionsController *v89;
  char *v90;
  _TtC9AirDropUI33AirDropTransferSessionsController *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = a1;
  v99 = sub_100008F88(&qword_10013F9F0);
  __chkstk_darwin(v99, v1);
  v97 = (uint64_t)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100008F88(&qword_10013F9F8);
  __chkstk_darwin(v95, v3);
  v93 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008F88(&qword_10013F4E8);
  __chkstk_darwin(v98, v5);
  v96 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013F500);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100008F88((uint64_t *)&unk_100140FC0);
  __chkstk_darwin(v94, v11);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v87 - v16;
  v18 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008F88(&qword_10013CA68);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100008F88(&qword_10013CA70);
  SFAirDrop.PermissionRequest.style.getter(v28);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v27, v23);
  if (v29 == enum case for SFAirDrop.PermissionRequest.Style.inline<A>(_:))
  {
    v88 = v13;
    v90 = v17;
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    v30 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v27 + 1);
    v91 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v27;
    v31 = *((_QWORD *)v27 + 2);
    v32 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)v27 + 3);
    v33 = *((_QWORD *)v27 + 4);
    v34 = sub_100008F88(&qword_10013CA90);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, &v27[*(int *)(v34 + 80)], v18);
    *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v35);
    *((_QWORD *)v10 + 1) = 0;
    v10[16] = 0;
    v36 = (uint64_t)&v10[*(int *)(sub_100008F88(&qword_10013FA10) + 44)];
    v37 = v91;
    v38 = v92;
    v91 = v30;
    v89 = v32;
    v39 = (uint64_t)v32;
    v40 = (uint64_t)v22;
    v41 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v33;
    sub_1000952C8(v92, (uint64_t)v37, (uint64_t)v30, v31, v39, v33, v40, v36);
    v42 = type metadata accessor for AirDropAskRequestView(0);
    v43 = *(unsigned __int8 *)(v38 + *(int *)(v42 + 24));
    v92 = v18;
    if (v43 == 1)
    {
      if (qword_10013ACA8 != -1)
        v42 = swift_once(&qword_10013ACA8, sub_10005F088);
      v44 = &qword_100147EB8;
    }
    else
    {
      if (qword_10013ACB0 != -1)
        v42 = swift_once(&qword_10013ACB0, sub_10005F09C);
      v44 = &qword_100147EC0;
    }
    v54 = (uint64_t)v90;
    v55 = *(double *)v44;
    v56 = static Alignment.center.getter(v42);
    v57 = (uint64_t)v88;
    sub_1000BF864(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v88, 0.0, 1, v55, 0, v56, v58);
    sub_10000CC5C((uint64_t)v10, &qword_10013F500);
    swift_bridgeObjectRelease(v41, v59, v60, v61, v62, v63, v64, v65);
    swift_bridgeObjectRelease(v89, v66, v67, v68, v69, v70, v71, v72);
    swift_bridgeObjectRelease(v91, v73, v74, v75, v76, v77, v78, v79);
    sub_10000CBD4(v57, v54, (uint64_t *)&unk_100140FC0);
    v80 = v93;
    sub_10000CC18(v54, v93, (uint64_t *)&unk_100140FC0);
    swift_storeEnumTagMultiPayload(v80, v95, 0);
    v81 = sub_1000A3EDC();
    v82 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)(v80, v94, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    v83 = v97;
    sub_10000CC18(v82, v97, &qword_10013F4E8);
    swift_storeEnumTagMultiPayload(v83, v99, 0);
    v84 = sub_1000A3EB8();
    _ConditionalContent<>.init(storage:)(v83, v98, &type metadata for EmptyView, v84, &protocol witness table for EmptyView);
    sub_10000CC5C(v82, &qword_10013F4E8);
    sub_10000CC5C(v54, (uint64_t *)&unk_100140FC0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v40, v92);
  }
  else if (v29 == enum case for SFAirDrop.PermissionRequest.Style.intervention<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v27, v23);
    v45 = &v27[*(int *)(sub_100008F88(&qword_10013FA00) + 48)];
    v46 = v93;
    swift_storeEnumTagMultiPayload(v93, v95, 1);
    v47 = sub_1000A3EDC();
    v48 = (uint64_t)v96;
    _ConditionalContent<>.init(storage:)(v46, v94, &type metadata for EmptyView, v47, &protocol witness table for EmptyView);
    v49 = v97;
    sub_10000CC18(v48, v97, &qword_10013F4E8);
    swift_storeEnumTagMultiPayload(v49, v99, 0);
    v50 = sub_1000A3EB8();
    _ConditionalContent<>.init(storage:)(v49, v98, &type metadata for EmptyView, v50, &protocol witness table for EmptyView);
    sub_10000CC5C(v48, &qword_10013F4E8);
    v51 = sub_100008F88(&qword_10013FA08);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v45, v51);
    v52 = type metadata accessor for SFInterventionWorkflow(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v27, v52);
  }
  else
  {
    v85 = v97;
    swift_storeEnumTagMultiPayload(v97, v99, 1);
    v86 = sub_1000A3EB8();
    _ConditionalContent<>.init(storage:)(v85, v98, &type metadata for EmptyView, v86, &protocol witness table for EmptyView);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  }
}

uint64_t sub_1000952C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a6;
  v34 = a7;
  v32 = a5;
  v35 = a8;
  v12 = sub_100008F88(&qword_10013FA18);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013FA20);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013FA28);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 24)) == 1)
  {
    sub_100095A84(a2, a3, a4, v32, v33, v34, &qword_10013FA48, &qword_10013FA28, (uint64_t)v23, 0.0, 0.0, 0.0, 0.0, &qword_10013FA58, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096650);
    sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_10013FA28);
    swift_storeEnumTagMultiPayload(v19, v16, 0);
    v24 = sub_1000A4B7C();
    v25 = sub_10000CB94(&qword_10013FA50, &qword_10013FA18, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v19, v20, v12, v24, v25);
    v26 = (uint64_t)v23;
    v27 = &qword_10013FA28;
  }
  else
  {
    *v15 = static Axis.Set.vertical.getter();
    v28 = sub_100008F88(&qword_10013FA30);
    sub_100095CFC(a2, a3, a4, v32, v33, v34, (uint64_t)&v15[*(int *)(v28 + 44)]);
    sub_10000CC18((uint64_t)v15, (uint64_t)v19, &qword_10013FA18);
    swift_storeEnumTagMultiPayload(v19, v16, 1);
    v29 = sub_1000A4B7C();
    v30 = sub_10000CB94(&qword_10013FA50, &qword_10013FA18, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v19, v20, v12, v29, v30);
    v26 = (uint64_t)v15;
    v27 = &qword_10013FA18;
  }
  return sub_10000CC5C(v26, v27);
}

uint64_t sub_10009555C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a6;
  v34 = a7;
  v32 = a5;
  v35 = a8;
  v12 = sub_100008F88(&qword_10013F5D8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013F5E0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013F5E8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 24)) == 1)
  {
    sub_100095A84(a2, a3, a4, v32, v33, v34, &qword_10013F608, &qword_10013F5E8, (uint64_t)v23, 0.0, 0.0, 0.0, 0.0, &qword_10013F618, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096EC8);
    sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_10013F5E8);
    swift_storeEnumTagMultiPayload(v19, v16, 0);
    v24 = sub_1000A420C();
    v25 = sub_10000CB94(&qword_10013F610, &qword_10013F5D8, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v19, v20, v12, v24, v25);
    v26 = (uint64_t)v23;
    v27 = &qword_10013F5E8;
  }
  else
  {
    *v15 = static Axis.Set.vertical.getter();
    v28 = sub_100008F88(&qword_10013F5F0);
    sub_100096018(a2, a3, a4, v32, v33, v34, (uint64_t)&v15[*(int *)(v28 + 44)]);
    sub_10000CC18((uint64_t)v15, (uint64_t)v19, &qword_10013F5D8);
    swift_storeEnumTagMultiPayload(v19, v16, 1);
    v29 = sub_1000A420C();
    v30 = sub_10000CB94(&qword_10013F610, &qword_10013F5D8, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v19, v20, v12, v29, v30);
    v26 = (uint64_t)v15;
    v27 = &qword_10013F5D8;
  }
  return sub_10000CC5C(v26, v27);
}

uint64_t sub_1000957F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a6;
  v34 = a7;
  v32 = a5;
  v35 = a8;
  v12 = sub_100008F88(&qword_10013F8A8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100008F88(&qword_10013F8B0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013F8B8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 24)) == 1)
  {
    sub_100095A84(a2, a3, a4, v32, v33, v34, &qword_10013F8D8, &qword_10013F8B8, (uint64_t)v23, 0.0, 0.0, 0.0, 0.0, &qword_10013F8E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100097740);
    sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_10013F8B8);
    swift_storeEnumTagMultiPayload(v19, v16, 0);
    v24 = sub_1000A4A14();
    v25 = sub_10000CB94(&qword_10013F8E0, &qword_10013F8A8, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v19, v20, v12, v24, v25);
    v26 = (uint64_t)v23;
    v27 = &qword_10013F8B8;
  }
  else
  {
    *v15 = static Axis.Set.vertical.getter();
    v28 = sub_100008F88(&qword_10013F8C0);
    sub_100096334(a2, a3, a4, v32, v33, v34, (uint64_t)&v15[*(int *)(v28 + 44)]);
    sub_10000CC18((uint64_t)v15, (uint64_t)v19, &qword_10013F8A8);
    swift_storeEnumTagMultiPayload(v19, v16, 1);
    v29 = sub_1000A4A14();
    v30 = sub_10000CB94(&qword_10013F8E0, &qword_10013F8A8, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v19, v20, v12, v29, v30);
    v26 = (uint64_t)v15;
    v27 = &qword_10013F8A8;
  }
  return sub_10000CC5C(v26, v27);
}

uint64_t sub_100095A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t *a14, uint64_t (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  double v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;

  v49 = a5;
  v50 = a6;
  v47 = a3;
  v48 = a4;
  v46 = a2;
  v51 = a9;
  v23 = sub_100008F88(a7);
  __chkstk_darwin(v23, v24);
  v26 = (double *)((char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = a8;
  v27 = sub_100008F88(a8);
  v29 = __chkstk_darwin(v27, v28);
  v31 = (char *)&v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = static HorizontalAlignment.leading.getter(v29);
  v33 = *(unsigned __int8 *)(v15 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 24));
  if (v33 == 1)
  {
    if (qword_10013ACC8 != -1)
      swift_once(&qword_10013ACC8, sub_10005F0E0);
    v34 = &qword_100147F10;
  }
  else
  {
    if (qword_10013ACD0 != -1)
      swift_once(&qword_10013ACD0, sub_10005F0F0);
    v34 = &qword_100147F18;
  }
  v35 = *(double *)v34 - a10;
  *(_QWORD *)v26 = v32;
  v26[1] = v35;
  *((_BYTE *)v26 + 16) = 0;
  sub_100008F88(a14);
  v36 = a15(v15, a1, v46, v47, v48, v49, v50);
  if (v33)
  {
    if (qword_10013ACB8 != -1)
      v36 = swift_once(&qword_10013ACB8, sub_10005F0AC);
    v37 = (double *)&xmmword_100147ED0;
  }
  else
  {
    if (qword_10013ACC0 != -1)
      v36 = swift_once(&qword_10013ACC0, sub_10005F0CC);
    v37 = (double *)&xmmword_100147EF0;
  }
  v38 = *v37 - a10;
  v39 = v37[1] - a11;
  v40 = v37[2] - a12;
  v41 = v37[3] - a13;
  v42 = static Edge.Set.all.getter(v36);
  sub_10000CC18((uint64_t)v26, (uint64_t)v31, a7);
  v43 = &v31[*(int *)(v27 + 36)];
  *v43 = v42;
  *((double *)v43 + 1) = v38;
  *((double *)v43 + 2) = v39;
  *((double *)v43 + 3) = v40;
  *((double *)v43 + 4) = v41;
  v43[40] = 0;
  sub_10000CC5C((uint64_t)v26, a7);
  return sub_10000CBD4((uint64_t)v31, v51, v52);
}

uint64_t sub_100095CFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a6;
  v56 = a7;
  v12 = sub_100008F88(&qword_10013FA28);
  __chkstk_darwin(v12, v13);
  v55 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v54 = (uint64_t)&v49 - v17;
  __chkstk_darwin(v18, v19);
  v53 = (uint64_t)&v49 - v20;
  __chkstk_darwin(v21, v22);
  v52 = (uint64_t)&v49 - v23;
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v49 - v26;
  __chkstk_darwin(v28, v29);
  v51 = (uint64_t)&v49 - v30;
  v31 = a2;
  v32 = a2;
  v33 = a3;
  v34 = a3;
  v35 = a4;
  v36 = a4;
  v37 = a5;
  v38 = a5;
  v39 = v50;
  sub_100095A84(a1, v32, v34, v36, v38, v50, &qword_10013FA48, &qword_10013FA28, (uint64_t)&v49 - v30, 0.0, 0.0, 0.0, 0.0, &qword_10013FA58, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096650);
  v40 = (uint64_t)v27;
  sub_100095A84(a1, v31, v33, v35, v37, v39, &qword_10013FA48, &qword_10013FA28, (uint64_t)v27, 5.0, 3.0, 5.0, 3.0, &qword_10013FA58, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096650);
  v41 = v52;
  sub_100095A84(a1, v31, v33, v35, v37, v39, &qword_10013FA48, &qword_10013FA28, v52, 8.0, 5.0, 8.0, 5.0, &qword_10013FA58, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096650);
  v42 = v51;
  v43 = v53;
  sub_10000CC18(v51, v53, &qword_10013FA28);
  v44 = v54;
  sub_10000CC18(v40, v54, &qword_10013FA28);
  v45 = v55;
  sub_10000CC18(v41, v55, &qword_10013FA28);
  v46 = v56;
  sub_10000CC18(v43, v56, &qword_10013FA28);
  v47 = sub_100008F88(&qword_10013FB30);
  sub_10000CC18(v44, v46 + *(int *)(v47 + 48), &qword_10013FA28);
  sub_10000CC18(v45, v46 + *(int *)(v47 + 64), &qword_10013FA28);
  sub_10000CC5C(v41, &qword_10013FA28);
  sub_10000CC5C(v40, &qword_10013FA28);
  sub_10000CC5C(v42, &qword_10013FA28);
  sub_10000CC5C(v45, &qword_10013FA28);
  sub_10000CC5C(v44, &qword_10013FA28);
  return sub_10000CC5C(v43, &qword_10013FA28);
}

uint64_t sub_100096018@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a6;
  v56 = a7;
  v12 = sub_100008F88(&qword_10013F5E8);
  __chkstk_darwin(v12, v13);
  v55 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v54 = (uint64_t)&v49 - v17;
  __chkstk_darwin(v18, v19);
  v53 = (uint64_t)&v49 - v20;
  __chkstk_darwin(v21, v22);
  v52 = (uint64_t)&v49 - v23;
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v49 - v26;
  __chkstk_darwin(v28, v29);
  v51 = (uint64_t)&v49 - v30;
  v31 = a2;
  v32 = a2;
  v33 = a3;
  v34 = a3;
  v35 = a4;
  v36 = a4;
  v37 = a5;
  v38 = a5;
  v39 = v50;
  sub_100095A84(a1, v32, v34, v36, v38, v50, &qword_10013F608, &qword_10013F5E8, (uint64_t)&v49 - v30, 0.0, 0.0, 0.0, 0.0, &qword_10013F618, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096EC8);
  v40 = (uint64_t)v27;
  sub_100095A84(a1, v31, v33, v35, v37, v39, &qword_10013F608, &qword_10013F5E8, (uint64_t)v27, 5.0, 3.0, 5.0, 3.0, &qword_10013F618, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096EC8);
  v41 = v52;
  sub_100095A84(a1, v31, v33, v35, v37, v39, &qword_10013F608, &qword_10013F5E8, v52, 8.0, 5.0, 8.0, 5.0, &qword_10013F618, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100096EC8);
  v42 = v51;
  v43 = v53;
  sub_10000CC18(v51, v53, &qword_10013F5E8);
  v44 = v54;
  sub_10000CC18(v40, v54, &qword_10013F5E8);
  v45 = v55;
  sub_10000CC18(v41, v55, &qword_10013F5E8);
  v46 = v56;
  sub_10000CC18(v43, v56, &qword_10013F5E8);
  v47 = sub_100008F88(&qword_10013F868);
  sub_10000CC18(v44, v46 + *(int *)(v47 + 48), &qword_10013F5E8);
  sub_10000CC18(v45, v46 + *(int *)(v47 + 64), &qword_10013F5E8);
  sub_10000CC5C(v41, &qword_10013F5E8);
  sub_10000CC5C(v40, &qword_10013F5E8);
  sub_10000CC5C(v42, &qword_10013F5E8);
  sub_10000CC5C(v45, &qword_10013F5E8);
  sub_10000CC5C(v44, &qword_10013F5E8);
  return sub_10000CC5C(v43, &qword_10013F5E8);
}

uint64_t sub_100096334@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a6;
  v56 = a7;
  v12 = sub_100008F88(&qword_10013F8B8);
  __chkstk_darwin(v12, v13);
  v55 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v54 = (uint64_t)&v49 - v17;
  __chkstk_darwin(v18, v19);
  v53 = (uint64_t)&v49 - v20;
  __chkstk_darwin(v21, v22);
  v52 = (uint64_t)&v49 - v23;
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v49 - v26;
  __chkstk_darwin(v28, v29);
  v51 = (uint64_t)&v49 - v30;
  v31 = a2;
  v32 = a2;
  v33 = a3;
  v34 = a3;
  v35 = a4;
  v36 = a4;
  v37 = a5;
  v38 = a5;
  v39 = v50;
  sub_100095A84(a1, v32, v34, v36, v38, v50, &qword_10013F8D8, &qword_10013F8B8, (uint64_t)&v49 - v30, 0.0, 0.0, 0.0, 0.0, &qword_10013F8E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100097740);
  v40 = (uint64_t)v27;
  sub_100095A84(a1, v31, v33, v35, v37, v39, &qword_10013F8D8, &qword_10013F8B8, (uint64_t)v27, 5.0, 3.0, 5.0, 3.0, &qword_10013F8E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100097740);
  v41 = v52;
  sub_100095A84(a1, v31, v33, v35, v37, v39, &qword_10013F8D8, &qword_10013F8B8, v52, 8.0, 5.0, 8.0, 5.0, &qword_10013F8E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100097740);
  v42 = v51;
  v43 = v53;
  sub_10000CC18(v51, v53, &qword_10013F8B8);
  v44 = v54;
  sub_10000CC18(v40, v54, &qword_10013F8B8);
  v45 = v55;
  sub_10000CC18(v41, v55, &qword_10013F8B8);
  v46 = v56;
  sub_10000CC18(v43, v56, &qword_10013F8B8);
  v47 = sub_100008F88(&qword_10013F9E8);
  sub_10000CC18(v44, v46 + *(int *)(v47 + 48), &qword_10013F8B8);
  sub_10000CC18(v45, v46 + *(int *)(v47 + 64), &qword_10013F8B8);
  sub_10000CC5C(v41, &qword_10013F8B8);
  sub_10000CC5C(v40, &qword_10013F8B8);
  sub_10000CC5C(v42, &qword_10013F8B8);
  sub_10000CC5C(v45, &qword_10013F8B8);
  sub_10000CC5C(v44, &qword_10013F8B8);
  return sub_10000CC5C(v43, &qword_10013F8B8);
}

uint64_t sub_100096650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __n128 v76;
  __n128 v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  _BYTE *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;

  v112 = a7;
  v113 = a6;
  v122 = a4;
  v123 = a5;
  v120 = a2;
  v121 = a3;
  v133 = a8;
  v114 = sub_100008F88(&qword_10013FA60);
  __chkstk_darwin(v114, v9);
  v110 = (uint64_t *)((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = sub_100008F88(&qword_10013FA68);
  __chkstk_darwin(v115, v11);
  v117 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100008F88(&qword_10013FA70);
  __chkstk_darwin(v116, v13);
  v109 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100008F88(&qword_10013FA78);
  v130 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132, v15);
  v128 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DeviceLockState(0);
  v125 = *(_QWORD *)(v17 - 8);
  v126 = v17;
  __chkstk_darwin(v17, v18);
  v124 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v134 = (uint64_t *)((char *)&v108 - v22);
  v23 = sub_100008F88(&qword_10013FA80);
  __chkstk_darwin(v23, v24);
  v131 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v129 = (char *)&v108 - v28;
  v119 = sub_100008F88(&qword_10013F648);
  __chkstk_darwin(v119, v29);
  v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100008F88(&qword_10013F650);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100008F88(&qword_10013F658);
  __chkstk_darwin(v36, v37);
  v39 = (char *)&v108 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008F88(&qword_10013F660);
  __chkstk_darwin(v118, v40);
  v42 = (char *)&v108 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v44);
  v46 = (char *)&v108 - v45;
  v47 = sub_100008F88(&qword_10013F668);
  __chkstk_darwin(v47, v48);
  v127 = (char *)&v108 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v51);
  v53 = (char *)&v108 - v52;
  v54 = type metadata accessor for AirDropAskRequestView(0);
  v55 = a1;
  v111 = *(int *)(v54 + 24);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + v111);
  v56 = static VerticalAlignment.top.getter();
  if ((_DWORD)a1 == 1)
  {
    *(_QWORD *)v39 = v56;
    *((_QWORD *)v39 + 1) = 0x4034000000000000;
    v39[16] = 0;
    v57 = sub_100008F88(&qword_10013F6C0);
    v58 = v55;
    sub_100098E08(v55, v120, v121, v122, v123, (uint64_t)&v39[*(int *)(v57 + 44)]);
    sub_10000CC18((uint64_t)v39, (uint64_t)v42, &qword_10013F658);
    sub_10000CC5C((uint64_t)v39, &qword_10013F658);
    sub_10000CBD4((uint64_t)v42, (uint64_t)v46, &qword_10013F660);
    sub_10000CC18((uint64_t)v46, (uint64_t)v35, &qword_10013F660);
    swift_storeEnumTagMultiPayload(v35, v32, 0);
    v59 = sub_1000A4290();
    v60 = sub_10000CB94(&qword_10013F690, &qword_10013F648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v35, v118, v119, v59, v60);
    v61 = (uint64_t)v46;
    v62 = &qword_10013F660;
  }
  else
  {
    *(_QWORD *)v31 = v56;
    *((_QWORD *)v31 + 1) = 0x4034000000000000;
    v31[16] = 0;
    v63 = sub_100008F88(&qword_10013F670);
    v58 = v55;
    sub_100098564(v55, v120, v121, v122, v123, (uint64_t)&v31[*(int *)(v63 + 44)]);
    sub_10000CC18((uint64_t)v31, (uint64_t)v35, &qword_10013F648);
    swift_storeEnumTagMultiPayload(v35, v32, 1);
    v64 = sub_1000A4290();
    v65 = sub_10000CB94(&qword_10013F690, &qword_10013F648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v35, v118, v119, v64, v65);
    v61 = (uint64_t)v31;
    v62 = &qword_10013F648;
  }
  sub_10000CC5C(v61, v62);
  v66 = (uint64_t)v128;
  v67 = (uint64_t)v53;
  v69 = v125;
  v68 = v126;
  v70 = v124;
  v71 = *(_QWORD *)(v58 + *(int *)(v54 + 20) + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDB78);
  v73 = swift_getKeyPath(&unk_1000EDBA0);
  v74 = swift_retain(v71);
  v75 = v134;
  static Published.subscript.getter(v134, v74, KeyPath, v73);
  swift_release(v71);
  swift_release(KeyPath);
  v76 = swift_release(v73);
  v77.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v69 + 104))(v70, enum case for DeviceLockState.unlocked(_:), v68, v76);
  LOBYTE(v71) = static DeviceLockState.== infix(_:_:)(v75, v70, v77);
  v78 = *(void (**)(char *, uint64_t))(v69 + 8);
  v78(v70, v68);
  v79 = ((uint64_t (*)(_QWORD *, uint64_t))v78)(v75, v68);
  if ((v71 & 1) != 0)
  {
    v80 = v133;
    v81 = v114;
    v82 = (uint64_t)v129;
    v83 = v113;
    v84 = v112;
    if (*(_BYTE *)(v58 + v111) == 1)
    {
      v85 = static Axis.Set.horizontal.getter(v79);
      v86 = v67;
      v87 = (uint64_t)v109;
      *v109 = v85;
      v88 = sub_100008F88(&qword_10013FAA8);
      sub_100097FB8(v58, v83, v84, v87 + *(int *)(v88 + 44));
      v100 = &qword_10013FA70;
      v89 = v117;
      sub_10000CC18(v87, v117, &qword_10013FA70);
      swift_storeEnumTagMultiPayload(v89, v115, 0);
      v90 = sub_10000CB94(&qword_10013FA98, &qword_10013FA70, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
      v91 = sub_10000CB94(&qword_10013FAA0, &qword_10013FA60, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v89, v116, v81, v90, v91);
      v104 = v87;
      v67 = v86;
    }
    else
    {
      v96 = static VerticalAlignment.center.getter(v79);
      v97 = v58;
      v98 = (uint64_t)v110;
      *v110 = v96;
      *(_QWORD *)(v98 + 8) = 0x4024000000000000;
      *(_BYTE *)(v98 + 16) = 0;
      v99 = sub_100008F88(&qword_10013FA90);
      sub_100099790(v84, v97, v83, v98 + *(int *)(v99 + 44));
      v100 = &qword_10013FA60;
      v101 = v117;
      sub_10000CC18(v98, v117, &qword_10013FA60);
      swift_storeEnumTagMultiPayload(v101, v115, 1);
      v102 = sub_10000CB94(&qword_10013FA98, &qword_10013FA70, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
      v103 = sub_10000CB94(&qword_10013FAA0, &qword_10013FA60, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v101, v116, v81, v102, v103);
      v104 = v98;
    }
    sub_10000CC5C(v104, v100);
    sub_10000CBD4(v66, v82, &qword_10013FA78);
    v92 = 0;
    v95 = (uint64_t)v131;
    v93 = v132;
    v94 = v130;
  }
  else
  {
    v92 = 1;
    v93 = v132;
    v80 = v133;
    v94 = v130;
    v95 = (uint64_t)v131;
    v82 = (uint64_t)v129;
  }
  v105 = (uint64_t)v127;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v82, v92, 1, v93);
  sub_10000CC18(v67, v105, &qword_10013F668);
  sub_10000CC18(v82, v95, &qword_10013FA80);
  sub_10000CC18(v105, v80, &qword_10013F668);
  v106 = sub_100008F88(&qword_10013FA88);
  sub_10000CC18(v95, v80 + *(int *)(v106 + 48), &qword_10013FA80);
  sub_10000CC5C(v82, &qword_10013FA80);
  sub_10000CC5C(v67, &qword_10013F668);
  sub_10000CC5C(v95, &qword_10013FA80);
  return sub_10000CC5C(v105, &qword_10013F668);
}

uint64_t sub_100096EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __n128 v76;
  __n128 v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  _BYTE *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;

  v112 = a7;
  v113 = a6;
  v122 = a4;
  v123 = a5;
  v120 = a2;
  v121 = a3;
  v133 = a8;
  v114 = sub_100008F88(&qword_10013F620);
  __chkstk_darwin(v114, v9);
  v110 = (uint64_t *)((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = sub_100008F88(&qword_10013F628);
  __chkstk_darwin(v115, v11);
  v117 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100008F88(&qword_10013F630);
  __chkstk_darwin(v116, v13);
  v109 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100008F88(&qword_10013F638);
  v130 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132, v15);
  v128 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DeviceLockState(0);
  v125 = *(_QWORD *)(v17 - 8);
  v126 = v17;
  __chkstk_darwin(v17, v18);
  v124 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v134 = (uint64_t *)((char *)&v108 - v22);
  v23 = sub_100008F88(&qword_10013F640);
  __chkstk_darwin(v23, v24);
  v131 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v129 = (char *)&v108 - v28;
  v119 = sub_100008F88(&qword_10013F648);
  __chkstk_darwin(v119, v29);
  v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100008F88(&qword_10013F650);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100008F88(&qword_10013F658);
  __chkstk_darwin(v36, v37);
  v39 = (char *)&v108 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008F88(&qword_10013F660);
  __chkstk_darwin(v118, v40);
  v42 = (char *)&v108 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v44);
  v46 = (char *)&v108 - v45;
  v47 = sub_100008F88(&qword_10013F668);
  __chkstk_darwin(v47, v48);
  v127 = (char *)&v108 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v51);
  v53 = (char *)&v108 - v52;
  v54 = type metadata accessor for AirDropAskRequestView(0);
  v55 = a1;
  v111 = *(int *)(v54 + 24);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + v111);
  v56 = static VerticalAlignment.top.getter();
  if ((_DWORD)a1 == 1)
  {
    *(_QWORD *)v39 = v56;
    *((_QWORD *)v39 + 1) = 0x4034000000000000;
    v39[16] = 0;
    v57 = sub_100008F88(&qword_10013F6C0);
    v58 = v55;
    sub_100098E08(v55, v120, v121, v122, v123, (uint64_t)&v39[*(int *)(v57 + 44)]);
    sub_10000CC18((uint64_t)v39, (uint64_t)v42, &qword_10013F658);
    sub_10000CC5C((uint64_t)v39, &qword_10013F658);
    sub_10000CBD4((uint64_t)v42, (uint64_t)v46, &qword_10013F660);
    sub_10000CC18((uint64_t)v46, (uint64_t)v35, &qword_10013F660);
    swift_storeEnumTagMultiPayload(v35, v32, 0);
    v59 = sub_1000A4290();
    v60 = sub_10000CB94(&qword_10013F690, &qword_10013F648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v35, v118, v119, v59, v60);
    v61 = (uint64_t)v46;
    v62 = &qword_10013F660;
  }
  else
  {
    *(_QWORD *)v31 = v56;
    *((_QWORD *)v31 + 1) = 0x4034000000000000;
    v31[16] = 0;
    v63 = sub_100008F88(&qword_10013F670);
    v58 = v55;
    sub_100098564(v55, v120, v121, v122, v123, (uint64_t)&v31[*(int *)(v63 + 44)]);
    sub_10000CC18((uint64_t)v31, (uint64_t)v35, &qword_10013F648);
    swift_storeEnumTagMultiPayload(v35, v32, 1);
    v64 = sub_1000A4290();
    v65 = sub_10000CB94(&qword_10013F690, &qword_10013F648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v35, v118, v119, v64, v65);
    v61 = (uint64_t)v31;
    v62 = &qword_10013F648;
  }
  sub_10000CC5C(v61, v62);
  v66 = (uint64_t)v128;
  v67 = (uint64_t)v53;
  v69 = v125;
  v68 = v126;
  v70 = v124;
  v71 = *(_QWORD *)(v58 + *(int *)(v54 + 20) + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDB78);
  v73 = swift_getKeyPath(&unk_1000EDBA0);
  v74 = swift_retain(v71);
  v75 = v134;
  static Published.subscript.getter(v134, v74, KeyPath, v73);
  swift_release(v71);
  swift_release(KeyPath);
  v76 = swift_release(v73);
  v77.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v69 + 104))(v70, enum case for DeviceLockState.unlocked(_:), v68, v76);
  LOBYTE(v71) = static DeviceLockState.== infix(_:_:)(v75, v70, v77);
  v78 = *(void (**)(char *, uint64_t))(v69 + 8);
  v78(v70, v68);
  v79 = ((uint64_t (*)(_QWORD *, uint64_t))v78)(v75, v68);
  if ((v71 & 1) != 0)
  {
    v80 = v133;
    v81 = v114;
    v82 = (uint64_t)v129;
    v83 = v113;
    v84 = v112;
    if (*(_BYTE *)(v58 + v111) == 1)
    {
      v85 = static Axis.Set.horizontal.getter(v79);
      v86 = v67;
      v87 = (uint64_t)v109;
      *v109 = v85;
      v88 = sub_100008F88(&qword_10013F6B8);
      sub_10009819C(v58, v83, v84, v87 + *(int *)(v88 + 44));
      v100 = &qword_10013F630;
      v89 = v117;
      sub_10000CC18(v87, v117, &qword_10013F630);
      swift_storeEnumTagMultiPayload(v89, v115, 0);
      v90 = sub_10000CB94(&qword_10013F6A8, &qword_10013F630, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
      v91 = sub_10000CB94(&qword_10013F6B0, &qword_10013F620, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v89, v116, v81, v90, v91);
      v104 = v87;
      v67 = v86;
    }
    else
    {
      v96 = static VerticalAlignment.center.getter(v79);
      v97 = v58;
      v98 = (uint64_t)v110;
      *v110 = v96;
      *(_QWORD *)(v98 + 8) = 0x4024000000000000;
      *(_BYTE *)(v98 + 16) = 0;
      v99 = sub_100008F88(&qword_10013F6A0);
      sub_100099E94(v84, v97, v83, v98 + *(int *)(v99 + 44));
      v100 = &qword_10013F620;
      v101 = v117;
      sub_10000CC18(v98, v117, &qword_10013F620);
      swift_storeEnumTagMultiPayload(v101, v115, 1);
      v102 = sub_10000CB94(&qword_10013F6A8, &qword_10013F630, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
      v103 = sub_10000CB94(&qword_10013F6B0, &qword_10013F620, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v101, v116, v81, v102, v103);
      v104 = v98;
    }
    sub_10000CC5C(v104, v100);
    sub_10000CBD4(v66, v82, &qword_10013F638);
    v92 = 0;
    v95 = (uint64_t)v131;
    v93 = v132;
    v94 = v130;
  }
  else
  {
    v92 = 1;
    v93 = v132;
    v80 = v133;
    v94 = v130;
    v95 = (uint64_t)v131;
    v82 = (uint64_t)v129;
  }
  v105 = (uint64_t)v127;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v82, v92, 1, v93);
  sub_10000CC18(v67, v105, &qword_10013F668);
  sub_10000CC18(v82, v95, &qword_10013F640);
  sub_10000CC18(v105, v80, &qword_10013F668);
  v106 = sub_100008F88(&qword_10013F698);
  sub_10000CC18(v95, v80 + *(int *)(v106 + 48), &qword_10013F640);
  sub_10000CC5C(v82, &qword_10013F640);
  sub_10000CC5C(v67, &qword_10013F668);
  sub_10000CC5C(v95, &qword_10013F640);
  return sub_10000CC5C(v105, &qword_10013F668);
}

uint64_t sub_100097740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __n128 v76;
  __n128 v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  _BYTE *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;

  v112 = a7;
  v113 = a6;
  v122 = a4;
  v123 = a5;
  v120 = a2;
  v121 = a3;
  v133 = a8;
  v114 = sub_100008F88(&qword_10013F8F0);
  __chkstk_darwin(v114, v9);
  v110 = (uint64_t *)((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = sub_100008F88(&qword_10013F8F8);
  __chkstk_darwin(v115, v11);
  v117 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100008F88(&qword_10013F900);
  __chkstk_darwin(v116, v13);
  v109 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100008F88(&qword_10013F908);
  v130 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132, v15);
  v128 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DeviceLockState(0);
  v125 = *(_QWORD *)(v17 - 8);
  v126 = v17;
  __chkstk_darwin(v17, v18);
  v124 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v134 = (uint64_t *)((char *)&v108 - v22);
  v23 = sub_100008F88(&qword_10013F910);
  __chkstk_darwin(v23, v24);
  v131 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v129 = (char *)&v108 - v28;
  v119 = sub_100008F88(&qword_10013F648);
  __chkstk_darwin(v119, v29);
  v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100008F88(&qword_10013F650);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100008F88(&qword_10013F658);
  __chkstk_darwin(v36, v37);
  v39 = (char *)&v108 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008F88(&qword_10013F660);
  __chkstk_darwin(v118, v40);
  v42 = (char *)&v108 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v44);
  v46 = (char *)&v108 - v45;
  v47 = sub_100008F88(&qword_10013F668);
  __chkstk_darwin(v47, v48);
  v127 = (char *)&v108 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50, v51);
  v53 = (char *)&v108 - v52;
  v54 = type metadata accessor for AirDropAskRequestView(0);
  v55 = a1;
  v111 = *(int *)(v54 + 24);
  LODWORD(a1) = *(unsigned __int8 *)(a1 + v111);
  v56 = static VerticalAlignment.top.getter();
  if ((_DWORD)a1 == 1)
  {
    *(_QWORD *)v39 = v56;
    *((_QWORD *)v39 + 1) = 0x4034000000000000;
    v39[16] = 0;
    v57 = sub_100008F88(&qword_10013F6C0);
    v58 = v55;
    sub_100098E08(v55, v120, v121, v122, v123, (uint64_t)&v39[*(int *)(v57 + 44)]);
    sub_10000CC18((uint64_t)v39, (uint64_t)v42, &qword_10013F658);
    sub_10000CC5C((uint64_t)v39, &qword_10013F658);
    sub_10000CBD4((uint64_t)v42, (uint64_t)v46, &qword_10013F660);
    sub_10000CC18((uint64_t)v46, (uint64_t)v35, &qword_10013F660);
    swift_storeEnumTagMultiPayload(v35, v32, 0);
    v59 = sub_1000A4290();
    v60 = sub_10000CB94(&qword_10013F690, &qword_10013F648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v35, v118, v119, v59, v60);
    v61 = (uint64_t)v46;
    v62 = &qword_10013F660;
  }
  else
  {
    *(_QWORD *)v31 = v56;
    *((_QWORD *)v31 + 1) = 0x4034000000000000;
    v31[16] = 0;
    v63 = sub_100008F88(&qword_10013F670);
    v58 = v55;
    sub_100098564(v55, v120, v121, v122, v123, (uint64_t)&v31[*(int *)(v63 + 44)]);
    sub_10000CC18((uint64_t)v31, (uint64_t)v35, &qword_10013F648);
    swift_storeEnumTagMultiPayload(v35, v32, 1);
    v64 = sub_1000A4290();
    v65 = sub_10000CB94(&qword_10013F690, &qword_10013F648, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v35, v118, v119, v64, v65);
    v61 = (uint64_t)v31;
    v62 = &qword_10013F648;
  }
  sub_10000CC5C(v61, v62);
  v66 = (uint64_t)v128;
  v67 = (uint64_t)v53;
  v69 = v125;
  v68 = v126;
  v70 = v124;
  v71 = *(_QWORD *)(v58 + *(int *)(v54 + 20) + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDB78);
  v73 = swift_getKeyPath(&unk_1000EDBA0);
  v74 = swift_retain(v71);
  v75 = v134;
  static Published.subscript.getter(v134, v74, KeyPath, v73);
  swift_release(v71);
  swift_release(KeyPath);
  v76 = swift_release(v73);
  v77.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v69 + 104))(v70, enum case for DeviceLockState.unlocked(_:), v68, v76);
  LOBYTE(v71) = static DeviceLockState.== infix(_:_:)(v75, v70, v77);
  v78 = *(void (**)(char *, uint64_t))(v69 + 8);
  v78(v70, v68);
  v79 = ((uint64_t (*)(_QWORD *, uint64_t))v78)(v75, v68);
  if ((v71 & 1) != 0)
  {
    v80 = v133;
    v81 = v114;
    v82 = (uint64_t)v129;
    v83 = v113;
    v84 = v112;
    if (*(_BYTE *)(v58 + v111) == 1)
    {
      v85 = static Axis.Set.horizontal.getter(v79);
      v86 = v67;
      v87 = (uint64_t)v109;
      *v109 = v85;
      v88 = sub_100008F88(&qword_10013F938);
      sub_100098380(v58, v83, v84, v87 + *(int *)(v88 + 44));
      v100 = &qword_10013F900;
      v89 = v117;
      sub_10000CC18(v87, v117, &qword_10013F900);
      swift_storeEnumTagMultiPayload(v89, v115, 0);
      v90 = sub_10000CB94(&qword_10013F928, &qword_10013F900, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
      v91 = sub_10000CB94(&qword_10013F930, &qword_10013F8F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v89, v116, v81, v90, v91);
      v104 = v87;
      v67 = v86;
    }
    else
    {
      v96 = static VerticalAlignment.center.getter(v79);
      v97 = v58;
      v98 = (uint64_t)v110;
      *v110 = v96;
      *(_QWORD *)(v98 + 8) = 0x4024000000000000;
      *(_BYTE *)(v98 + 16) = 0;
      v99 = sub_100008F88(&qword_10013F920);
      sub_10009A598(v84, v97, v83, v98 + *(int *)(v99 + 44));
      v100 = &qword_10013F8F0;
      v101 = v117;
      sub_10000CC18(v98, v117, &qword_10013F8F0);
      swift_storeEnumTagMultiPayload(v101, v115, 1);
      v102 = sub_10000CB94(&qword_10013F928, &qword_10013F900, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
      v103 = sub_10000CB94(&qword_10013F930, &qword_10013F8F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v101, v116, v81, v102, v103);
      v104 = v98;
    }
    sub_10000CC5C(v104, v100);
    sub_10000CBD4(v66, v82, &qword_10013F908);
    v92 = 0;
    v95 = (uint64_t)v131;
    v93 = v132;
    v94 = v130;
  }
  else
  {
    v92 = 1;
    v93 = v132;
    v80 = v133;
    v94 = v130;
    v95 = (uint64_t)v131;
    v82 = (uint64_t)v129;
  }
  v105 = (uint64_t)v127;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v82, v92, 1, v93);
  sub_10000CC18(v67, v105, &qword_10013F668);
  sub_10000CC18(v82, v95, &qword_10013F910);
  sub_10000CC18(v105, v80, &qword_10013F668);
  v106 = sub_100008F88(&qword_10013F918);
  sub_10000CC18(v95, v80 + *(int *)(v106 + 48), &qword_10013F910);
  sub_10000CC5C(v82, &qword_10013F910);
  sub_10000CC5C(v67, &qword_10013F668);
  sub_10000CC5C(v95, &qword_10013F910);
  return sub_10000CC5C(v105, &qword_10013F668);
}

uint64_t sub_100097FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v8 = sub_100008F88(&qword_10013FAB0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v30 - v14;
  v16 = sub_100008F88(&qword_10013FA60);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v30 - v22;
  *(_QWORD *)v23 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v23 + 1) = 0x4024000000000000;
  v23[16] = 0;
  v25 = sub_100008F88(&qword_10013FA90);
  v26 = sub_100099790(a3, a1, a2, (uint64_t)&v23[*(int *)(v25 + 44)]);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v15 + 1) = 0x4024000000000000;
  v15[16] = 0;
  v27 = sub_100008F88(&qword_10013FAB8);
  sub_10009E4BC(a3, a1, a2, (uint64_t)&v15[*(int *)(v27 + 44)]);
  sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_10013FA60);
  sub_10000CC18((uint64_t)v15, (uint64_t)v11, &qword_10013FAB0);
  sub_10000CC18((uint64_t)v19, a4, &qword_10013FA60);
  v28 = sub_100008F88(&qword_10013FAC0);
  sub_10000CC18((uint64_t)v11, a4 + *(int *)(v28 + 48), &qword_10013FAB0);
  sub_10000CC5C((uint64_t)v15, &qword_10013FAB0);
  sub_10000CC5C((uint64_t)v23, &qword_10013FA60);
  sub_10000CC5C((uint64_t)v11, &qword_10013FAB0);
  return sub_10000CC5C((uint64_t)v19, &qword_10013FA60);
}

uint64_t sub_10009819C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v8 = sub_100008F88(&qword_10013F6E8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v30 - v14;
  v16 = sub_100008F88(&qword_10013F620);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v30 - v22;
  *(_QWORD *)v23 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v23 + 1) = 0x4024000000000000;
  v23[16] = 0;
  v25 = sub_100008F88(&qword_10013F6A0);
  v26 = sub_100099E94(a3, a1, a2, (uint64_t)&v23[*(int *)(v25 + 44)]);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v15 + 1) = 0x4024000000000000;
  v15[16] = 0;
  v27 = sub_100008F88(&qword_10013F6F0);
  sub_10009E968(a3, a1, a2, (uint64_t)&v15[*(int *)(v27 + 44)]);
  sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_10013F620);
  sub_10000CC18((uint64_t)v15, (uint64_t)v11, &qword_10013F6E8);
  sub_10000CC18((uint64_t)v19, a4, &qword_10013F620);
  v28 = sub_100008F88(&qword_10013F6F8);
  sub_10000CC18((uint64_t)v11, a4 + *(int *)(v28 + 48), &qword_10013F6E8);
  sub_10000CC5C((uint64_t)v15, &qword_10013F6E8);
  sub_10000CC5C((uint64_t)v23, &qword_10013F620);
  sub_10000CC5C((uint64_t)v11, &qword_10013F6E8);
  return sub_10000CC5C((uint64_t)v19, &qword_10013F620);
}

uint64_t sub_100098380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v8 = sub_100008F88(&qword_10013F940);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v30 - v14;
  v16 = sub_100008F88(&qword_10013F8F0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v30 - v22;
  *(_QWORD *)v23 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v23 + 1) = 0x4024000000000000;
  v23[16] = 0;
  v25 = sub_100008F88(&qword_10013F920);
  v26 = sub_10009A598(a3, a1, a2, (uint64_t)&v23[*(int *)(v25 + 44)]);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v15 + 1) = 0x4024000000000000;
  v15[16] = 0;
  v27 = sub_100008F88(&qword_10013F948);
  sub_10009EE14(a3, a1, a2, (uint64_t)&v15[*(int *)(v27 + 44)]);
  sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_10013F8F0);
  sub_10000CC18((uint64_t)v15, (uint64_t)v11, &qword_10013F940);
  sub_10000CC18((uint64_t)v19, a4, &qword_10013F8F0);
  v28 = sub_100008F88(&qword_10013F950);
  sub_10000CC18((uint64_t)v11, a4 + *(int *)(v28 + 48), &qword_10013F940);
  sub_10000CC5C((uint64_t)v15, &qword_10013F940);
  sub_10000CC5C((uint64_t)v23, &qword_10013F8F0);
  sub_10000CC5C((uint64_t)v11, &qword_10013F940);
  return sub_10000CC5C((uint64_t)v19, &qword_10013F8F0);
}

uint64_t sub_100098564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  __n128 v70;
  void (*v71)(_QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  int v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char v132;
  _QWORD v133[2];
  char v134;
  _BYTE v135[7];
  id v136;
  char v137;
  _BYTE v138[7];
  uint64_t v139;
  char v140;
  _BYTE v141[7];
  uint64_t v142;
  char v143;
  _BYTE v144[7];
  uint64_t v145;
  uint64_t v146;
  char v147;
  _BYTE v148[7];
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  _BYTE v160[7];
  _BYTE v161[7];
  unsigned __int8 v162;
  _BYTE v163[7];
  unsigned __int8 v164;
  _BYTE v165[7];
  _DWORD v166[3];

  v105 = a4;
  v106 = a5;
  v103 = a2;
  v104 = a3;
  v112 = a6;
  v7 = type metadata accessor for DeviceLockState(0);
  v110 = *(_QWORD *)(v7 - 8);
  v111 = v7;
  __chkstk_darwin(v7, v8);
  v109 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  *(_QWORD *)&v108 = (char *)&v96 - v12;
  v13 = type metadata accessor for Font.TextStyle(0);
  v100 = *(_QWORD *)(v13 - 8);
  v101 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AirDropDescriptionView(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88((uint64_t *)&unk_100140F90);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100008F88(&qword_10013F858);
  __chkstk_darwin(v102, v25);
  v122 = (uint64_t)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v28);
  v123 = (uint64_t)&v96 - v29;
  v97 = type metadata accessor for AirDropAskRequestView(0);
  v30 = *(int *)(v97 + 20);
  v99 = a1;
  v107 = a1 + v30;
  v31 = *(_QWORD *)(a1 + v30 + 8);
  v32 = type metadata accessor for AirDropTransferSession(0);
  v33 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
  v34 = swift_retain(v31);
  v98 = v32;
  v96 = v33;
  v35 = ObservedObject.init(wrappedValue:)(v34, v32, v33);
  v120 = v36;
  v121 = v35;
  v119 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.043, 0.608, 1.0, 1.0);
  if (qword_10013ABE0 != -1)
    swift_once(&qword_10013ABE0, sub_100023E74);
  v37 = qword_100147D90;
  KeyPath = swift_getKeyPath(&unk_1000EDBC0);
  v39 = swift_getKeyPath(&unk_1000EDBE8);
  static Published.subscript.getter(v133, v37, KeyPath, v39);
  swift_release(KeyPath);
  swift_release(v39);
  v118 = LOBYTE(v133[0]);
  if (qword_10013ACE0 != -1)
    v40 = swift_once(&qword_10013ACE0, sub_10005F110);
  v41 = qword_100147F28;
  v42 = v106;
  if (qword_10013ACF0 != -1)
    v40 = swift_once(&qword_10013ACF0, sub_10005F134);
  v43 = qword_100147F38;
  v44 = static Alignment.center.getter(v40);
  v46 = _FrameLayout.init(width:height:alignment:)(&v153, v41, 0, v43, 0, v44, v45);
  v47 = v154;
  v114 = v153;
  v115 = v155;
  LOBYTE(v43) = v156;
  v113 = v157;
  v117 = v158;
  v116 = static Edge.Set.all.getter(v46);
  v164 = v47;
  v162 = v43;
  v159 = 0;
  v48 = qword_10013AD08;
  swift_bridgeObjectRetain(v42);
  if (v48 != -1)
    swift_once(&qword_10013AD08, sub_10005F168);
  v49 = qword_100147F50;
  v133[0] = 0x402C000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v16, enum case for Font.TextStyle.subheadline(_:), v101);
  v50 = sub_100043B68();
  swift_retain(v49);
  v51 = v104;
  swift_bridgeObjectRetain(v104);
  v52 = ScaledMetric.init(wrappedValue:relativeTo:)(v133, v16, &type metadata for CGFloat, v50);
  v53 = &v20[*(int *)(v17 + 20)];
  *(_QWORD *)v53 = v103;
  *((_QWORD *)v53 + 1) = v51;
  v54 = &v20[*(int *)(v17 + 24)];
  *(_QWORD *)v54 = v105;
  *((_QWORD *)v54 + 1) = v42;
  *((_QWORD *)v54 + 2) = v49;
  *((_QWORD *)v54 + 3) = 2;
  v54[32] = 0;
  v55 = static Alignment.leading.getter(v52);
  sub_1000BFDC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v24, 0.0, 1, 0.0, 1, v55, v56);
  v57 = sub_10000C4C8((uint64_t)v20, type metadata accessor for AirDropDescriptionView);
  v58 = static Edge.Set.all.getter(v57);
  v59 = v122;
  sub_10000CC18((uint64_t)v24, v122, (uint64_t *)&unk_100140F90);
  v60 = v59 + *(int *)(v102 + 36);
  *(_BYTE *)v60 = v58;
  *(_QWORD *)(v60 + 8) = 0x4010000000000000;
  *(_QWORD *)(v60 + 16) = 0;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)(v60 + 32) = 0;
  *(_BYTE *)(v60 + 40) = 0;
  sub_10000CC5C((uint64_t)v24, (uint64_t *)&unk_100140F90);
  sub_10000CBD4(v59, v123, &qword_10013F858);
  v61 = v107;
  v62 = *(_QWORD *)(v107 + 8);
  v63 = swift_getKeyPath(&unk_1000EDB78);
  v64 = swift_getKeyPath(&unk_1000EDBA0);
  swift_retain(v62);
  v65 = v108;
  static Published.subscript.getter((_QWORD *)v108, v62, v63, v64);
  swift_release(v62);
  swift_release(v63);
  v66 = swift_release(v64);
  v68 = v109;
  v67 = v110;
  v69 = v111;
  v70.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v110 + 104))(v109, enum case for DeviceLockState.unlocked(_:), v111, v66);
  LOBYTE(v62) = static DeviceLockState.== infix(_:_:)(v65, v68, v70);
  v71 = *(void (**)(_QWORD, _QWORD))(v67 + 8);
  v71(v68, v69);
  v71(v65, v69);
  if ((v62 & 1) != 0)
  {
    v72 = *(_QWORD *)(v61 + 8);
    v111 = *(unsigned __int8 *)(v99 + *(int *)(v97 + 24));
    v73 = swift_retain(v72);
    v74 = ObservedObject.init(wrappedValue:)(v73, v98, v96);
    v76 = v75;
    v77 = 1;
    v78 = 1;
  }
  else
  {
    v74 = 0;
    v76 = 0;
    v111 = 0;
    v77 = 0;
    v78 = 0;
  }
  v79 = v164;
  LODWORD(v109) = v164;
  v80 = v162;
  LODWORD(v110) = v162;
  v81 = v159;
  v82 = v122;
  sub_10000CC18(v123, v122, &qword_10013F858);
  *(_QWORD *)&v124 = v121;
  *((_QWORD *)&v124 + 1) = v120;
  LOBYTE(v125) = 1;
  *(_DWORD *)((char *)&v125 + 1) = v166[0];
  DWORD1(v125) = *(_DWORD *)((char *)v166 + 3);
  *((_QWORD *)&v125 + 1) = v119;
  LOBYTE(v126) = v118;
  *(_DWORD *)((char *)&v126 + 1) = *(_DWORD *)v165;
  DWORD1(v126) = *(_DWORD *)&v165[3];
  *((_QWORD *)&v126 + 1) = v114;
  LOBYTE(v127) = v79;
  *(_DWORD *)((char *)&v127 + 1) = *(_DWORD *)v163;
  DWORD1(v127) = *(_DWORD *)&v163[3];
  *((_QWORD *)&v127 + 1) = v115;
  LOBYTE(v128) = v80;
  *(_DWORD *)((char *)&v128 + 1) = *(_DWORD *)v161;
  DWORD1(v128) = *(_DWORD *)&v161[3];
  *((_QWORD *)&v128 + 1) = v113;
  *(_QWORD *)&v129 = v117;
  BYTE8(v129) = v116;
  *(_DWORD *)((char *)&v129 + 9) = *(_DWORD *)v160;
  HIDWORD(v129) = *(_DWORD *)&v160[3];
  v108 = xmmword_1000EDA30;
  v130 = xmmword_1000EDA30;
  v131 = 0uLL;
  v83 = v81;
  LODWORD(v107) = v81;
  v132 = v81;
  v84 = v124;
  v85 = v125;
  v86 = v127;
  v87 = v112;
  *(_OWORD *)(v112 + 32) = v126;
  *(_OWORD *)(v87 + 48) = v86;
  *(_OWORD *)v87 = v84;
  *(_OWORD *)(v87 + 16) = v85;
  v88 = v128;
  v89 = v129;
  v90 = v130;
  v91 = v131;
  *(_BYTE *)(v87 + 128) = v83;
  *(_OWORD *)(v87 + 96) = v90;
  *(_OWORD *)(v87 + 112) = v91;
  *(_OWORD *)(v87 + 64) = v88;
  *(_OWORD *)(v87 + 80) = v89;
  v92 = sub_100008F88(&qword_10013F860);
  sub_10000CC18(v82, v87 + *(int *)(v92 + 48), &qword_10013F858);
  v93 = v87 + *(int *)(v92 + 64);
  *(_QWORD *)v93 = v74;
  *(_QWORD *)(v93 + 8) = v76;
  v94 = v111;
  *(_QWORD *)(v93 + 16) = v111;
  *(_QWORD *)(v93 + 24) = 0;
  *(_QWORD *)(v93 + 32) = v77;
  *(_BYTE *)(v93 + 40) = v78;
  sub_1000A49B0((uint64_t)&v124);
  sub_1000468E0(v74, v76, v94, 0, v77);
  sub_10000CC5C(v123, &qword_10013F858);
  sub_100046990(v74, v76, v94, 0, v77);
  sub_10000CC5C(v82, &qword_10013F858);
  v133[0] = v121;
  v133[1] = v120;
  v134 = 1;
  *(_DWORD *)v135 = v166[0];
  *(_DWORD *)&v135[3] = *(_DWORD *)((char *)v166 + 3);
  v136 = v119;
  v137 = v118;
  *(_DWORD *)v138 = *(_DWORD *)v165;
  *(_DWORD *)&v138[3] = *(_DWORD *)&v165[3];
  v139 = v114;
  v140 = (char)v109;
  *(_DWORD *)v141 = *(_DWORD *)v163;
  *(_DWORD *)&v141[3] = *(_DWORD *)&v163[3];
  v142 = v115;
  v143 = v110;
  *(_DWORD *)v144 = *(_DWORD *)v161;
  *(_DWORD *)&v144[3] = *(_DWORD *)&v161[3];
  v145 = v113;
  v146 = v117;
  v147 = v116;
  *(_DWORD *)v148 = *(_DWORD *)v160;
  *(_DWORD *)&v148[3] = *(_DWORD *)&v160[3];
  v149 = v108;
  v150 = 0;
  v151 = 0;
  v152 = v107;
  return sub_1000A49E0((uint64_t)v133);
}

uint64_t sub_100098E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v67 = a6;
  v68 = (char *)a5;
  v10 = type metadata accessor for DeviceLockState(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v64 - v17;
  v19 = sub_100008F88(&qword_10013F6C8);
  __chkstk_darwin(v19, v20);
  v69 = (uint64_t)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v64 - v24;
  v28 = __chkstk_darwin(v26, v27);
  v30 = (char *)&v64 - v29;
  *(_QWORD *)v25 = static HorizontalAlignment.leading.getter(v28);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 0;
  v31 = sub_100008F88(&qword_10013F6D0);
  sub_1000991D0(a1, a2, a3, a4, (uint64_t)v68, (uint64_t)&v25[*(int *)(v31 + 44)]);
  v68 = v30;
  sub_10000CBD4((uint64_t)v25, (uint64_t)v30, &qword_10013F6C8);
  v65 = type metadata accessor for AirDropAskRequestView(0);
  v66 = *(double *)&a1;
  v64 = a1 + *(int *)(v65 + 20);
  v32 = *(_QWORD *)(v64 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDB78);
  v34 = swift_getKeyPath(&unk_1000EDBA0);
  v35 = swift_retain(v32);
  static Published.subscript.getter(v18, v35, KeyPath, v34);
  swift_release(v32);
  swift_release(KeyPath);
  v36 = swift_release(v34);
  v37.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v11 + 104))(v14, enum case for DeviceLockState.unlocked(_:), v10, v36);
  LOBYTE(v32) = static DeviceLockState.== infix(_:_:)(v18, v14, v37);
  v38 = *(void (**)(char *, uint64_t))(v11 + 8);
  v38(v14, v10);
  v38(v18, v10);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0.0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if ((v32 & 1) != 0)
  {
    v48 = *(_QWORD *)(v64 + 8);
    v41 = *(unsigned __int8 *)(*(_QWORD *)&v66 + *(int *)(v65 + 24));
    v49 = type metadata accessor for AirDropTransferSession(0);
    v50 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
    v51 = swift_retain(v48);
    v39 = ObservedObject.init(wrappedValue:)(v51, v49, v50);
    v40 = v52;
    LOBYTE(v48) = static Edge.Set.all.getter(v39);
    v44 = EdgeInsets.init(_all:)(1.0);
    v45 = v53;
    v46 = v54;
    v47 = v55;
    v43 = v48;
    v42 = 1;
  }
  v66 = v44;
  v56 = v69;
  v57 = v47;
  sub_10000CC18((uint64_t)v68, v69, &qword_10013F6C8);
  v58 = v56;
  v59 = v39;
  v60 = v67;
  sub_10000CC18(v58, v67, &qword_10013F6C8);
  v61 = v60 + *(int *)(sub_100008F88(&qword_10013F6D8) + 48);
  *(_QWORD *)v61 = v59;
  *(_QWORD *)(v61 + 8) = v40;
  *(_QWORD *)(v61 + 16) = v41;
  *(_QWORD *)(v61 + 24) = 0;
  *(_QWORD *)(v61 + 32) = v42;
  *(_QWORD *)(v61 + 40) = v42;
  v62 = v66;
  *(_QWORD *)(v61 + 48) = v43;
  *(double *)(v61 + 56) = v62;
  *(_QWORD *)(v61 + 64) = v45;
  *(_QWORD *)(v61 + 72) = v46;
  *(_QWORD *)(v61 + 80) = v57;
  *(_BYTE *)(v61 + 88) = 0;
  sub_1000468E0(v59, v40, v41, 0, v42);
  sub_10000CC5C((uint64_t)v68, &qword_10013F6C8);
  sub_100046990(v59, v40, v41, 0, v42);
  return sub_10000CC5C(v69, &qword_10013F6C8);
}

double sub_1000991D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  double result;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;

  v76 = a3;
  v77 = a4;
  v75 = a2;
  v72 = type metadata accessor for Font.TextStyle(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72, v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for AirDropDescriptionView(0);
  __chkstk_darwin(v74, v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88((uint64_t *)&unk_100140F90);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v57 - v21;
  v23 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 20) + 8);
  v24 = type metadata accessor for AirDropTransferSession(0);
  v25 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
  v26 = swift_retain(v23);
  v71 = ObservedObject.init(wrappedValue:)(v26, v24, v25);
  v78 = v27;
  v73 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.043, 0.608, 1.0, 1.0);
  if (qword_10013ABE0 != -1)
    swift_once(&qword_10013ABE0, sub_100023E74);
  v28 = qword_100147D90;
  KeyPath = swift_getKeyPath(&unk_1000EDBC0);
  v30 = swift_getKeyPath(&unk_1000EDBE8);
  static Published.subscript.getter(&v86, v28, KeyPath, v30);
  swift_release(KeyPath);
  swift_release(v30);
  v69 = v86;
  if (qword_10013ACD8 != -1)
    v31 = swift_once(&qword_10013ACD8, sub_10005F100);
  v32 = qword_100147F20;
  if (qword_10013ACE8 != -1)
    v31 = swift_once(&qword_10013ACE8, sub_10005F120);
  v33 = qword_100147F30;
  v34 = static Alignment.center.getter(v31);
  v36 = _FrameLayout.init(width:height:alignment:)(&v80, v32, 0, v33, 0, v34, v35);
  v68 = v80;
  v67 = v81;
  v66 = v82;
  v65 = v83;
  v64 = v84;
  v63 = v85;
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(&v86, 0, 1, 0x401C000000000000, 0, v37, v38);
  v62 = v86;
  v61 = v87;
  v60 = v88;
  v59 = v89;
  v58 = v90;
  v57 = v91;
  v39 = qword_10013AD08;
  swift_bridgeObjectRetain(a5);
  v40 = a5;
  if (v39 != -1)
    swift_once(&qword_10013AD08, sub_10005F168);
  v41 = qword_100147F50;
  v79 = 0x402C000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v11, enum case for Font.TextStyle.subheadline(_:), v72);
  v42 = sub_100043B68();
  swift_retain(v41);
  v43 = v76;
  swift_bridgeObjectRetain(v76);
  v44 = ScaledMetric.init(wrappedValue:relativeTo:)(&v79, v11, &type metadata for CGFloat, v42);
  v45 = v74;
  v46 = &v14[*(int *)(v74 + 20)];
  *(_QWORD *)v46 = v75;
  *((_QWORD *)v46 + 1) = v43;
  v47 = &v14[*(int *)(v45 + 24)];
  *(_QWORD *)v47 = v77;
  *((_QWORD *)v47 + 1) = v40;
  *((_QWORD *)v47 + 2) = v41;
  *((_QWORD *)v47 + 3) = 0;
  v47[32] = 1;
  v48 = static Alignment.leading.getter(v44);
  sub_1000BFDC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, 0.0, 1, v48, v49);
  sub_10000C4C8((uint64_t)v14, type metadata accessor for AirDropDescriptionView);
  sub_10000CBD4((uint64_t)v18, (uint64_t)v22, (uint64_t *)&unk_100140F90);
  sub_10000CC18((uint64_t)v22, (uint64_t)v18, (uint64_t *)&unk_100140F90);
  v50 = v78;
  *(_QWORD *)a6 = v71;
  *(_QWORD *)(a6 + 8) = v50;
  *(_BYTE *)(a6 + 16) = 1;
  v51 = v73;
  *(_QWORD *)(a6 + 24) = v73;
  *(_BYTE *)(a6 + 32) = v69;
  *(_QWORD *)(a6 + 40) = v68;
  *(_BYTE *)(a6 + 48) = v67;
  *(_QWORD *)(a6 + 56) = v66;
  *(_BYTE *)(a6 + 64) = v65;
  v52 = v63;
  *(_QWORD *)(a6 + 72) = v64;
  *(_QWORD *)(a6 + 80) = v52;
  *(_QWORD *)(a6 + 88) = 0;
  *(_BYTE *)(a6 + 96) = 1;
  *(_QWORD *)(a6 + 104) = v62;
  *(_BYTE *)(a6 + 112) = v61;
  *(_QWORD *)(a6 + 120) = v60;
  *(_BYTE *)(a6 + 128) = v59;
  v53 = v57;
  *(_QWORD *)(a6 + 136) = v58;
  *(_QWORD *)(a6 + 144) = v53;
  v54 = sub_100008F88(&qword_10013F6E0);
  sub_10000CC18((uint64_t)v18, a6 + *(int *)(v54 + 64), (uint64_t *)&unk_100140F90);
  swift_retain(v50);
  v55 = v51;
  sub_10000CC5C((uint64_t)v22, (uint64_t *)&unk_100140F90);
  sub_10000CC5C((uint64_t)v18, (uint64_t *)&unk_100140F90);

  *(_QWORD *)&result = swift_release(v50).n128_u64[0];
  return result;
}

uint64_t sub_100099790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char v120;

  v105 = a3;
  v117 = a2;
  v113 = a4;
  v5 = sub_100008F88(&qword_10013F728);
  __chkstk_darwin(v5, v6);
  v109 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v111 = (uint64_t)&v98 - v10;
  v114 = sub_100008F88(&qword_10013FAE0);
  v110 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114, v11);
  v112 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v118 = (char *)&v98 - v15;
  v16 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  v20 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for AirDropAskRequestView(0);
  v116 = *(_QWORD *)(v101 - 8);
  v21 = *(_QWORD *)(v116 + 64);
  __chkstk_darwin(v101, v22);
  v23 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v98 - v26;
  v28 = sub_100008F88(&qword_100140040);
  v103 = *(_QWORD *)(v28 - 8);
  v104 = v28;
  __chkstk_darwin(v28, v29);
  v102 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008F88(&qword_10013F708);
  v106 = *(_QWORD *)(v31 - 8);
  v107 = v31;
  __chkstk_darwin(v31, v32);
  v100 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v35);
  v99 = (char *)&v98 - v36;
  v37 = sub_100008F88(&qword_10013F710);
  __chkstk_darwin(v37, v38);
  v108 = (uint64_t)&v98 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40, v41);
  v44 = (char *)&v98 - v43;
  v45 = SFAirDrop.DeclineAction.hidden.getter(v42);
  v115 = v44;
  if ((v45 & 1) != 0)
  {
    v46 = 1;
    v48 = v106;
    v47 = v107;
  }
  else
  {
    v49 = v21;
    v50 = v17;
    v51 = v117;
    sub_10001B390(v117, (uint64_t)v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))((char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
    v52 = *(unsigned __int8 *)(v116 + 80);
    v53 = (v52 + 16) & ~v52;
    v54 = *(unsigned __int8 *)(v50 + 80);
    v98 = v16;
    v55 = (v49 + v54 + v53) & ~v54;
    v56 = swift_allocObject(&unk_100128680, v55 + v18, v52 | v54 | 7);
    sub_1000A436C((uint64_t)v27, v56 + v53);
    v57 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 32);
    v21 = v49;
    v58 = v57(v56 + v55, v20, v98);
    __chkstk_darwin(v58, v59);
    v97 = a1;
    v60 = v102;
    Button.init(action:label:)(sub_1000A43B0, v56, sub_1000A52F0, &v98 - 4, &type metadata for Text, &protocol witness table for Text);
    v61 = 3;
    if (*(_BYTE *)(v51 + *(int *)(v101 + 24)))
      v61 = 1;
    v119 = v61;
    v120 = 2;
    v62 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v63 = sub_100068AB4();
    v64 = v100;
    v65 = v104;
    View.buttonStyle<A>(_:)(&v119, v104, &type metadata for AirDropUIButtonStyle, v62, v63);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v65);
    v67 = v106;
    v66 = v107;
    v68 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
    v69 = v99;
    v68(v99, v64, v107);
    v44 = v115;
    v68(v115, v69, v66);
    v46 = 0;
    v47 = v66;
    v48 = v67;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v44, v46, 1, v47);
  v70 = v105;
  v119 = v105;
  sub_10001B390(v117, (uint64_t)v23);
  v71 = *(unsigned __int8 *)(v116 + 80);
  v72 = (v71 + 16) & ~v71;
  v73 = swift_allocObject(&unk_1001286A8, v72 + v21, v71 | 7);
  sub_1000A436C((uint64_t)v23, v73 + v72);
  swift_bridgeObjectRetain(v70);
  v74 = sub_100008F88(&qword_10013FAE8);
  v75 = type metadata accessor for UUID(0);
  v76 = sub_100008F88(&qword_10013F740);
  v77 = sub_10000CB94(&qword_10013FAF0, &qword_10013FAE8, (uint64_t)&protocol conformance descriptor for [A]);
  v78 = sub_1000A43DC(&qword_10013F750, &qword_10013F740, (void (*)(void))sub_1000A4444);
  v79 = sub_10000CB94(&qword_10013FAF8, (uint64_t *)&unk_10013BD10, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>);
  v80 = ForEach<>.init(_:content:)(&v119, sub_1000A4E64, v73, v74, v75, v76, v77, v78, v79);
  v82 = sub_100092C6C(v80, v81);
  v83 = v111;
  if ((v82 & 1) != 0)
  {
    sub_10009E2C8(v111);
    v84 = sub_100008F88(&qword_10013F788);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
  }
  else
  {
    v85 = sub_100008F88(&qword_10013F788);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v83, 1, 1, v85);
  }
  v86 = v108;
  sub_10000CC18((uint64_t)v44, v108, &qword_10013F710);
  v87 = v110;
  v88 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v89 = v112;
  v90 = v118;
  v91 = v114;
  v88(v112, v118, v114);
  v92 = v109;
  sub_10000CC18(v83, v109, &qword_10013F728);
  v93 = v113;
  sub_10000CC18(v86, v113, &qword_10013F710);
  v94 = sub_100008F88(&qword_10013FB28);
  v88((char *)(v93 + *(int *)(v94 + 48)), v89, v91);
  sub_10000CC18(v92, v93 + *(int *)(v94 + 64), &qword_10013F728);
  sub_10000CC5C(v83, &qword_10013F728);
  v95 = *(void (**)(char *, uint64_t))(v87 + 8);
  v95(v90, v91);
  sub_10000CC5C((uint64_t)v115, &qword_10013F710);
  sub_10000CC5C(v92, &qword_10013F728);
  v95(v89, v91);
  return sub_10000CC5C(v86, &qword_10013F710);
}

uint64_t sub_100099E94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char v120;

  v105 = a3;
  v117 = a2;
  v113 = a4;
  v5 = sub_100008F88(&qword_10013F728);
  __chkstk_darwin(v5, v6);
  v109 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v111 = (uint64_t)&v98 - v10;
  v114 = sub_100008F88(&qword_10013F730);
  v110 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114, v11);
  v112 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v118 = (char *)&v98 - v15;
  v16 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  v20 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for AirDropAskRequestView(0);
  v116 = *(_QWORD *)(v101 - 8);
  v21 = *(_QWORD *)(v116 + 64);
  __chkstk_darwin(v101, v22);
  v23 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v98 - v26;
  v28 = sub_100008F88(&qword_100140040);
  v103 = *(_QWORD *)(v28 - 8);
  v104 = v28;
  __chkstk_darwin(v28, v29);
  v102 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008F88(&qword_10013F708);
  v106 = *(_QWORD *)(v31 - 8);
  v107 = v31;
  __chkstk_darwin(v31, v32);
  v100 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v35);
  v99 = (char *)&v98 - v36;
  v37 = sub_100008F88(&qword_10013F710);
  __chkstk_darwin(v37, v38);
  v108 = (uint64_t)&v98 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40, v41);
  v44 = (char *)&v98 - v43;
  v45 = SFAirDrop.DeclineAction.hidden.getter(v42);
  v115 = v44;
  if ((v45 & 1) != 0)
  {
    v46 = 1;
    v48 = v106;
    v47 = v107;
  }
  else
  {
    v49 = v21;
    v50 = v17;
    v51 = v117;
    sub_10001B390(v117, (uint64_t)v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))((char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
    v52 = *(unsigned __int8 *)(v116 + 80);
    v53 = (v52 + 16) & ~v52;
    v54 = *(unsigned __int8 *)(v50 + 80);
    v98 = v16;
    v55 = (v49 + v54 + v53) & ~v54;
    v56 = swift_allocObject(&unk_1001283B0, v55 + v18, v52 | v54 | 7);
    sub_1000A436C((uint64_t)v27, v56 + v53);
    v57 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 32);
    v21 = v49;
    v58 = v57(v56 + v55, v20, v98);
    __chkstk_darwin(v58, v59);
    v97 = a1;
    v60 = v102;
    Button.init(action:label:)(sub_1000A43B0, v56, sub_1000A52F0, &v98 - 4, &type metadata for Text, &protocol witness table for Text);
    v61 = 3;
    if (*(_BYTE *)(v51 + *(int *)(v101 + 24)))
      v61 = 1;
    v119 = v61;
    v120 = 2;
    v62 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v63 = sub_100068AB4();
    v64 = v100;
    v65 = v104;
    View.buttonStyle<A>(_:)(&v119, v104, &type metadata for AirDropUIButtonStyle, v62, v63);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v65);
    v67 = v106;
    v66 = v107;
    v68 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
    v69 = v99;
    v68(v99, v64, v107);
    v44 = v115;
    v68(v115, v69, v66);
    v46 = 0;
    v47 = v66;
    v48 = v67;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v44, v46, 1, v47);
  v70 = v105;
  v119 = v105;
  sub_10001B390(v117, (uint64_t)v23);
  v71 = *(unsigned __int8 *)(v116 + 80);
  v72 = (v71 + 16) & ~v71;
  v73 = swift_allocObject(&unk_1001283D8, v72 + v21, v71 | 7);
  sub_1000A436C((uint64_t)v23, v73 + v72);
  swift_bridgeObjectRetain(v70);
  v74 = sub_100008F88(&qword_10013F738);
  v75 = type metadata accessor for UUID(0);
  v76 = sub_100008F88(&qword_10013F740);
  v77 = sub_10000CB94(&qword_10013F748, &qword_10013F738, (uint64_t)&protocol conformance descriptor for [A]);
  v78 = sub_1000A43DC(&qword_10013F750, &qword_10013F740, (void (*)(void))sub_1000A4444);
  v79 = sub_10000CB94(&qword_10013F778, &qword_10013F780, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>);
  v80 = ForEach<>.init(_:content:)(&v119, sub_1000A4920, v73, v74, v75, v76, v77, v78, v79);
  v82 = sub_100092C6C(v80, v81);
  v83 = v111;
  if ((v82 & 1) != 0)
  {
    sub_10009E2C8(v111);
    v84 = sub_100008F88(&qword_10013F788);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
  }
  else
  {
    v85 = sub_100008F88(&qword_10013F788);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v83, 1, 1, v85);
  }
  v86 = v108;
  sub_10000CC18((uint64_t)v44, v108, &qword_10013F710);
  v87 = v110;
  v88 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v89 = v112;
  v90 = v118;
  v91 = v114;
  v88(v112, v118, v114);
  v92 = v109;
  sub_10000CC18(v83, v109, &qword_10013F728);
  v93 = v113;
  sub_10000CC18(v86, v113, &qword_10013F710);
  v94 = sub_100008F88(&qword_10013F850);
  v88((char *)(v93 + *(int *)(v94 + 48)), v89, v91);
  sub_10000CC18(v92, v93 + *(int *)(v94 + 64), &qword_10013F728);
  sub_10000CC5C(v83, &qword_10013F728);
  v95 = *(void (**)(char *, uint64_t))(v87 + 8);
  v95(v90, v91);
  sub_10000CC5C((uint64_t)v115, &qword_10013F710);
  sub_10000CC5C(v92, &qword_10013F728);
  v95(v89, v91);
  return sub_10000CC5C(v86, &qword_10013F710);
}

uint64_t sub_10009A598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char v121;

  v106 = a3;
  v118 = a2;
  v114 = a4;
  v5 = sub_100008F88(&qword_10013F728);
  __chkstk_darwin(v5, v6);
  v110 = (uint64_t)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v112 = (uint64_t)&v99 - v10;
  v115 = sub_100008F88(&qword_10013F970);
  v111 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115, v11);
  v113 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v119 = (char *)&v99 - v15;
  v16 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  v20 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for AirDropAskRequestView(0);
  v117 = *(_QWORD *)(v102 - 8);
  v21 = *(_QWORD *)(v117 + 64);
  __chkstk_darwin(v102, v22);
  v23 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v99 - v26;
  v28 = sub_100008F88(&qword_100140040);
  v104 = *(_QWORD *)(v28 - 8);
  v105 = v28;
  __chkstk_darwin(v28, v29);
  v103 = (char *)&v99 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008F88(&qword_10013F708);
  v107 = *(_QWORD *)(v31 - 8);
  v108 = v31;
  __chkstk_darwin(v31, v32);
  v101 = (char *)&v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v35);
  v100 = (char *)&v99 - v36;
  v37 = sub_100008F88(&qword_10013F710);
  __chkstk_darwin(v37, v38);
  v109 = (uint64_t)&v99 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40, v41);
  v44 = (char *)&v99 - v43;
  v45 = SFAirDrop.DeclineAction.hidden.getter(v42);
  v116 = v44;
  if ((v45 & 1) != 0)
  {
    v46 = 1;
    v48 = v107;
    v47 = v108;
  }
  else
  {
    v49 = v21;
    v50 = v17;
    v51 = v118;
    sub_10001B390(v118, (uint64_t)v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))((char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16);
    v52 = *(unsigned __int8 *)(v117 + 80);
    v53 = (v52 + 16) & ~v52;
    v54 = *(unsigned __int8 *)(v50 + 80);
    v99 = v16;
    v55 = (v49 + v54 + v53) & ~v54;
    v56 = swift_allocObject(&unk_100128518, v55 + v18, v52 | v54 | 7);
    sub_1000A436C((uint64_t)v27, v56 + v53);
    v57 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 32);
    v21 = v49;
    v58 = v57(v56 + v55, v20, v99);
    __chkstk_darwin(v58, v59);
    v97 = a1;
    v60 = v103;
    Button.init(action:label:)(sub_1000A43B0, v56, sub_1000A52F0, &v99 - 4, &type metadata for Text, &protocol witness table for Text);
    v61 = 3;
    if (*(_BYTE *)(v51 + *(int *)(v102 + 24)))
      v61 = 1;
    v120 = v61;
    v121 = 2;
    v62 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v63 = sub_100068AB4();
    v64 = v101;
    v65 = v105;
    View.buttonStyle<A>(_:)(&v120, v105, &type metadata for AirDropUIButtonStyle, v62, v63);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v60, v65);
    v67 = v107;
    v66 = v108;
    v68 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
    v69 = v100;
    v68(v100, v64, v108);
    v44 = v116;
    v68(v116, v69, v66);
    v46 = 0;
    v47 = v66;
    v48 = v67;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v44, v46, 1, v47);
  v70 = v106;
  v120 = v106;
  sub_10001B390(v118, (uint64_t)v23);
  v71 = *(unsigned __int8 *)(v117 + 80);
  v72 = (v71 + 16) & ~v71;
  v73 = swift_allocObject(&unk_100128540, v72 + v21, v71 | 7);
  sub_1000A436C((uint64_t)v23, v73 + v72);
  swift_bridgeObjectRetain(v70);
  v74 = sub_100008F88(&qword_10013F978);
  v75 = type metadata accessor for UUID(0);
  v76 = sub_100008F88(&qword_10013F740);
  v77 = sub_10000CB94(&qword_10013F980, &qword_10013F978, (uint64_t)&protocol conformance descriptor for [A]);
  v78 = sub_1000A43DC(&qword_10013F750, &qword_10013F740, (void (*)(void))sub_1000A4444);
  v79 = sub_10000CB94(&qword_10013F988, &qword_10013F990, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>);
  v80 = ForEach<>.init(_:content:)(&v120, sub_1000A4B64, v73, v74, v75, v76, v77, v78, v79, v98);
  v82 = sub_100092C6C(v80, v81);
  v83 = v112;
  if ((v82 & 1) != 0)
  {
    sub_10009E2C8(v112);
    v84 = sub_100008F88(&qword_10013F788);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
  }
  else
  {
    v85 = sub_100008F88(&qword_10013F788);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v83, 1, 1, v85);
  }
  v86 = v109;
  sub_10000CC18((uint64_t)v44, v109, &qword_10013F710);
  v87 = v111;
  v88 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v89 = v113;
  v90 = v119;
  v91 = v115;
  v88(v113, v119, v115);
  v92 = v110;
  sub_10000CC18(v83, v110, &qword_10013F728);
  v93 = v114;
  sub_10000CC18(v86, v114, &qword_10013F710);
  v94 = sub_100008F88(&qword_10013F9E0);
  v88((char *)(v93 + *(int *)(v94 + 48)), v89, v91);
  sub_10000CC18(v92, v93 + *(int *)(v94 + 64), &qword_10013F728);
  sub_10000CC5C(v83, &qword_10013F728);
  v95 = *(void (**)(char *, uint64_t))(v87 + 8);
  v95(v90, v91);
  sub_10000CC5C((uint64_t)v116, &qword_10013F710);
  sub_10000CC5C(v92, &qword_10013F728);
  v95(v89, v91);
  return sub_10000CC5C(v86, &qword_10013F710);
}

uint64_t sub_10009AC9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  v6 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100009558(v10, (uint64_t)qword_10013F390);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "User declined AirDrop", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v16 = *(unsigned __int8 *)(v3 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_100128388, v17 + v4, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v18 + v17, (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  v19 = static Task<>.noThrow(priority:operation:)(v9, &unk_10013F848, v18, (char *)&type metadata for () + 8);
  swift_release(v19);
  swift_release(v18);
  return sub_10000CC5C((uint64_t)v9, &qword_10013BCC0);
}

uint64_t sub_10009AEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  char v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  unint64_t v156;

  v147 = a1;
  v148 = (char *)a2;
  v152 = a3;
  v150 = sub_100008F88(&qword_10013F7A8);
  __chkstk_darwin(v150, v3);
  v151 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100008F88(&qword_10013F7B0);
  __chkstk_darwin(v143, v5);
  v145 = (uint64_t *)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = sub_100008F88(&qword_10013F760);
  __chkstk_darwin(v149, v7);
  v146 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for AirDropAskRequestView(0);
  v9 = *(_QWORD *)(v137 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v137, v11);
  v135 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008F88(&qword_10013F768);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v12);
  v136 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100008F88(&qword_10013F7B8);
  v141 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v14);
  v138 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v140 = (char *)&v132 - v18;
  v19 = sub_100008F88(&qword_10013CA50);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v132 - v26;
  v28 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v33, v147, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v33, v28);
  if (v34 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v27, v33, v19);
    v36 = v135;
    sub_10001B390((uint64_t)v148, v135);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v27, v19);
    v37 = *(unsigned __int8 *)(v9 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = *(unsigned __int8 *)(v20 + 80);
    v40 = (v10 + v39 + v38) & ~v39;
    v41 = swift_allocObject(&unk_1001286D0, v40 + v21, v37 | v39 | 7);
    sub_1000A436C(v36, v41 + v38);
    v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v41 + v40, v23, v19);
    __chkstk_darwin(v42, v43);
    v44 = (uint64_t)v148;
    v130 = (uint64_t)v148;
    v131 = v27;
    v45 = sub_100008F88(&qword_10013F7D8);
    v46 = sub_1000A45E4();
    v47 = v136;
    Button.init(action:label:)(sub_1000A4C20, v41, sub_1000A4C34, &v132 - 4, v45, v46);
    v48 = *(_BYTE *)(v44 + *(int *)(v137 + 24));
    v49 = v47;
    v134 = v20;
    v133 = v19;
    if ((v48 & 1) != 0)
      v50 = (SFAirDrop.AcceptAction.Single.prominent.getter(v19) & 1) == 0;
    else
      v50 = 3;
    v92 = v27;
    v148 = &v33[*(int *)(sub_100008F88(&qword_10013CA98) + 48)];
    v153 = v50;
    LOBYTE(v154) = 2;
    v93 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v94 = sub_100068AB4();
    v95 = v138;
    v96 = v142;
    View.buttonStyle<A>(_:)(&v153, v142, &type metadata for AirDropUIButtonStyle, v93, v94);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v96);
    v98 = v140;
    v97 = v141;
    v99 = v144;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v95, v144);
    v100 = v145;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v145, v98, v99);
    swift_storeEnumTagMultiPayload(v100, v143, 0);
    v153 = v96;
    v154 = &type metadata for AirDropUIButtonStyle;
    v155 = v93;
    v156 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v102 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v100, v99, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    v103 = v151;
    sub_10000CC18(v102, (uint64_t)v151, &qword_10013F760);
    swift_storeEnumTagMultiPayload(v103, v150, 0);
    v104 = sub_1000A4444();
    _ConditionalContent<>.init(storage:)(v103, v149, &type metadata for Text, v104, &protocol witness table for Text);
    sub_10000CC5C(v102, &qword_10013F760);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v133);
    v105 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v148, v105);
  }
  else
  {
    v51 = v33;
    if (v34 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
      v148 = &v33[*(int *)(sub_100008F88(&qword_10013E0A0) + 48)];
      v52 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000F2600);
      LOWORD(v131) = 256;
      v130 = 0;
      v53 = Text.init(_:tableName:bundle:comment:)(v52);
      v55 = v54;
      v57 = v56;
      v59 = v58 & 1;
      v60 = static Color.red.getter();
      v153 = v60;
      v61 = Text.foregroundStyle<A>(_:)(&v153, v53, v55, v59, v57, &type metadata for Color, &protocol witness table for Color);
      v63 = v62;
      v65 = v64;
      v67 = v66 & 1;
      sub_100044F90(v53, v55, v59);
      swift_release(v60);
      swift_bridgeObjectRelease(v57, v68, v69, v70, v71, v72, v73, v74);
      v75 = v145;
      *v145 = v61;
      v75[1] = v63;
      *((_BYTE *)v75 + 16) = v67;
      v75[3] = (uint64_t)v65;
      swift_storeEnumTagMultiPayload(v75, v143, 1);
      sub_1000452A8(v61, v63, v67);
      v76 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_100068AB4();
      swift_bridgeObjectRetain(v65);
      v153 = v142;
      v154 = &type metadata for AirDropUIButtonStyle;
      v155 = v76;
      v156 = v77;
      v78 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v79 = (uint64_t)v146;
      _ConditionalContent<>.init(storage:)(v75, v144, &type metadata for Text, v78, &protocol witness table for Text);
      v80 = v151;
      sub_10000CC18(v79, (uint64_t)v151, &qword_10013F760);
      swift_storeEnumTagMultiPayload(v80, v150, 0);
      v81 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v80, v149, &type metadata for Text, v81, &protocol witness table for Text);
      sub_10000CC5C(v79, &qword_10013F760);
      sub_100044F90(v61, v63, v67);
      swift_bridgeObjectRelease(v65, v82, v83, v84, v85, v86, v87, v88);
      v89 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v148, v89);
      v90 = sub_100008F88(&qword_10013E008);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v51, v90);
    }
    else
    {
      v106 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000F25E0);
      LOWORD(v131) = 256;
      v130 = 0;
      v107 = Text.init(_:tableName:bundle:comment:)(v106);
      v109 = v108;
      v111 = v110;
      v113 = v112 & 1;
      v114 = static Color.red.getter();
      v153 = v114;
      v147 = Text.foregroundStyle<A>(_:)(&v153, v107, v109, v113, v111, &type metadata for Color, &protocol witness table for Color);
      v148 = (char *)v115;
      v117 = v116;
      v119 = v118;
      sub_100044F90(v107, v109, v113);
      swift_release(v114);
      swift_bridgeObjectRelease(v111, v120, v121, v122, v123, v124, v125, v126);
      v127 = v150;
      v128 = v151;
      *v151 = v147;
      v128[1] = v117;
      *((_BYTE *)v128 + 16) = v119 & 1;
      v128[3] = (uint64_t)v148;
      swift_storeEnumTagMultiPayload(v128, v127, 1);
      v129 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v128, v149, &type metadata for Text, v129, &protocol witness table for Text);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v51, v28);
    }
  }
}

uint64_t sub_10009B7FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  char v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  unint64_t v156;

  v147 = a1;
  v148 = (char *)a2;
  v152 = a3;
  v150 = sub_100008F88(&qword_10013F7A8);
  __chkstk_darwin(v150, v3);
  v151 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100008F88(&qword_10013F7B0);
  __chkstk_darwin(v143, v5);
  v145 = (uint64_t *)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = sub_100008F88(&qword_10013F760);
  __chkstk_darwin(v149, v7);
  v146 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for AirDropAskRequestView(0);
  v9 = *(_QWORD *)(v137 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v137, v11);
  v135 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008F88(&qword_10013F768);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v12);
  v136 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100008F88(&qword_10013F7B8);
  v141 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v14);
  v138 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v140 = (char *)&v132 - v18;
  v19 = sub_100008F88(&qword_10013F7C0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v132 - v26;
  v28 = sub_100008F88(&qword_10013F780);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v33, v147, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v33, v28);
  if (v34 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v27, v33, v19);
    v36 = v135;
    sub_10001B390((uint64_t)v148, v135);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v27, v19);
    v37 = *(unsigned __int8 *)(v9 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = *(unsigned __int8 *)(v20 + 80);
    v40 = (v10 + v39 + v38) & ~v39;
    v41 = swift_allocObject(&unk_100128400, v40 + v21, v37 | v39 | 7);
    sub_1000A436C(v36, v41 + v38);
    v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v41 + v40, v23, v19);
    __chkstk_darwin(v42, v43);
    v44 = (uint64_t)v148;
    v130 = (uint64_t)v148;
    v131 = v27;
    v45 = sub_100008F88(&qword_10013F7D8);
    v46 = sub_1000A45E4();
    v47 = v136;
    Button.init(action:label:)(sub_1000A45C4, v41, sub_1000A45D8, &v132 - 4, v45, v46);
    v48 = *(_BYTE *)(v44 + *(int *)(v137 + 24));
    v49 = v47;
    v134 = v20;
    v133 = v19;
    if ((v48 & 1) != 0)
      v50 = (SFAirDrop.AcceptAction.Single.prominent.getter(v19) & 1) == 0;
    else
      v50 = 3;
    v92 = v27;
    v148 = &v33[*(int *)(sub_100008F88(&qword_10013F818) + 48)];
    v153 = v50;
    LOBYTE(v154) = 2;
    v93 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v94 = sub_100068AB4();
    v95 = v138;
    v96 = v142;
    View.buttonStyle<A>(_:)(&v153, v142, &type metadata for AirDropUIButtonStyle, v93, v94);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v96);
    v98 = v140;
    v97 = v141;
    v99 = v144;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v95, v144);
    v100 = v145;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v145, v98, v99);
    swift_storeEnumTagMultiPayload(v100, v143, 0);
    v153 = v96;
    v154 = &type metadata for AirDropUIButtonStyle;
    v155 = v93;
    v156 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v102 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v100, v99, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    v103 = v151;
    sub_10000CC18(v102, (uint64_t)v151, &qword_10013F760);
    swift_storeEnumTagMultiPayload(v103, v150, 0);
    v104 = sub_1000A4444();
    _ConditionalContent<>.init(storage:)(v103, v149, &type metadata for Text, v104, &protocol witness table for Text);
    sub_10000CC5C(v102, &qword_10013F760);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v133);
    v105 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v148, v105);
  }
  else
  {
    v51 = v33;
    if (v34 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
      v148 = &v33[*(int *)(sub_100008F88(&qword_10013F7C8) + 48)];
      v52 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000F2600);
      LOWORD(v131) = 256;
      v130 = 0;
      v53 = Text.init(_:tableName:bundle:comment:)(v52);
      v55 = v54;
      v57 = v56;
      v59 = v58 & 1;
      v60 = static Color.red.getter();
      v153 = v60;
      v61 = Text.foregroundStyle<A>(_:)(&v153, v53, v55, v59, v57, &type metadata for Color, &protocol witness table for Color);
      v63 = v62;
      v65 = v64;
      v67 = v66 & 1;
      sub_100044F90(v53, v55, v59);
      swift_release(v60);
      swift_bridgeObjectRelease(v57, v68, v69, v70, v71, v72, v73, v74);
      v75 = v145;
      *v145 = v61;
      v75[1] = v63;
      *((_BYTE *)v75 + 16) = v67;
      v75[3] = (uint64_t)v65;
      swift_storeEnumTagMultiPayload(v75, v143, 1);
      sub_1000452A8(v61, v63, v67);
      v76 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_100068AB4();
      swift_bridgeObjectRetain(v65);
      v153 = v142;
      v154 = &type metadata for AirDropUIButtonStyle;
      v155 = v76;
      v156 = v77;
      v78 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v79 = (uint64_t)v146;
      _ConditionalContent<>.init(storage:)(v75, v144, &type metadata for Text, v78, &protocol witness table for Text);
      v80 = v151;
      sub_10000CC18(v79, (uint64_t)v151, &qword_10013F760);
      swift_storeEnumTagMultiPayload(v80, v150, 0);
      v81 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v80, v149, &type metadata for Text, v81, &protocol witness table for Text);
      sub_10000CC5C(v79, &qword_10013F760);
      sub_100044F90(v61, v63, v67);
      swift_bridgeObjectRelease(v65, v82, v83, v84, v85, v86, v87, v88);
      v89 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v148, v89);
      v90 = sub_100008F88(&qword_10013F7D0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v51, v90);
    }
    else
    {
      v106 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000F25E0);
      LOWORD(v131) = 256;
      v130 = 0;
      v107 = Text.init(_:tableName:bundle:comment:)(v106);
      v109 = v108;
      v111 = v110;
      v113 = v112 & 1;
      v114 = static Color.red.getter();
      v153 = v114;
      v147 = Text.foregroundStyle<A>(_:)(&v153, v107, v109, v113, v111, &type metadata for Color, &protocol witness table for Color);
      v148 = (char *)v115;
      v117 = v116;
      v119 = v118;
      sub_100044F90(v107, v109, v113);
      swift_release(v114);
      swift_bridgeObjectRelease(v111, v120, v121, v122, v123, v124, v125, v126);
      v127 = v150;
      v128 = v151;
      *v151 = v147;
      v128[1] = v117;
      *((_BYTE *)v128 + 16) = v119 & 1;
      v128[3] = (uint64_t)v148;
      swift_storeEnumTagMultiPayload(v128, v127, 1);
      v129 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v128, v149, &type metadata for Text, v129, &protocol witness table for Text);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v51, v28);
    }
  }
}

uint64_t sub_10009C154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  char v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  unint64_t v156;

  v147 = a1;
  v148 = (char *)a2;
  v152 = a3;
  v150 = sub_100008F88(&qword_10013F7A8);
  __chkstk_darwin(v150, v3);
  v151 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100008F88(&qword_10013F7B0);
  __chkstk_darwin(v143, v5);
  v145 = (uint64_t *)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = sub_100008F88(&qword_10013F760);
  __chkstk_darwin(v149, v7);
  v146 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for AirDropAskRequestView(0);
  v9 = *(_QWORD *)(v137 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v137, v11);
  v135 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008F88(&qword_10013F768);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v12);
  v136 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100008F88(&qword_10013F7B8);
  v141 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v14);
  v138 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v140 = (char *)&v132 - v18;
  v19 = sub_100008F88(&qword_10013F9A0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v132 - v26;
  v28 = sub_100008F88(&qword_10013F990);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v33, v147, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v33, v28);
  if (v34 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v27, v33, v19);
    v36 = v135;
    sub_10001B390((uint64_t)v148, v135);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v27, v19);
    v37 = *(unsigned __int8 *)(v9 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = *(unsigned __int8 *)(v20 + 80);
    v40 = (v10 + v39 + v38) & ~v39;
    v41 = swift_allocObject(&unk_100128568, v40 + v21, v37 | v39 | 7);
    sub_1000A436C(v36, v41 + v38);
    v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v41 + v40, v23, v19);
    __chkstk_darwin(v42, v43);
    v44 = (uint64_t)v148;
    v130 = (uint64_t)v148;
    v131 = v27;
    v45 = sub_100008F88(&qword_10013F7D8);
    v46 = sub_1000A45E4();
    v47 = v136;
    Button.init(action:label:)(sub_1000A4AB8, v41, sub_1000A4ACC, &v132 - 4, v45, v46);
    v48 = *(_BYTE *)(v44 + *(int *)(v137 + 24));
    v49 = v47;
    v134 = v20;
    v133 = v19;
    if ((v48 & 1) != 0)
      v50 = (SFAirDrop.AcceptAction.Single.prominent.getter(v19) & 1) == 0;
    else
      v50 = 3;
    v92 = v27;
    v148 = &v33[*(int *)(sub_100008F88(&qword_10013F9B8) + 48)];
    v153 = v50;
    LOBYTE(v154) = 2;
    v93 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v94 = sub_100068AB4();
    v95 = v138;
    v96 = v142;
    View.buttonStyle<A>(_:)(&v153, v142, &type metadata for AirDropUIButtonStyle, v93, v94);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v96);
    v98 = v140;
    v97 = v141;
    v99 = v144;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v95, v144);
    v100 = v145;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v145, v98, v99);
    swift_storeEnumTagMultiPayload(v100, v143, 0);
    v153 = v96;
    v154 = &type metadata for AirDropUIButtonStyle;
    v155 = v93;
    v156 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v102 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v100, v99, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    v103 = v151;
    sub_10000CC18(v102, (uint64_t)v151, &qword_10013F760);
    swift_storeEnumTagMultiPayload(v103, v150, 0);
    v104 = sub_1000A4444();
    _ConditionalContent<>.init(storage:)(v103, v149, &type metadata for Text, v104, &protocol witness table for Text);
    sub_10000CC5C(v102, &qword_10013F760);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v133);
    v105 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v148, v105);
  }
  else
  {
    v51 = v33;
    if (v34 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
      v148 = &v33[*(int *)(sub_100008F88(&qword_10013F9A8) + 48)];
      v52 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000F2600);
      LOWORD(v131) = 256;
      v130 = 0;
      v53 = Text.init(_:tableName:bundle:comment:)(v52);
      v55 = v54;
      v57 = v56;
      v59 = v58 & 1;
      v60 = static Color.red.getter();
      v153 = v60;
      v61 = Text.foregroundStyle<A>(_:)(&v153, v53, v55, v59, v57, &type metadata for Color, &protocol witness table for Color);
      v63 = v62;
      v65 = v64;
      v67 = v66 & 1;
      sub_100044F90(v53, v55, v59);
      swift_release(v60);
      swift_bridgeObjectRelease(v57, v68, v69, v70, v71, v72, v73, v74);
      v75 = v145;
      *v145 = v61;
      v75[1] = v63;
      *((_BYTE *)v75 + 16) = v67;
      v75[3] = (uint64_t)v65;
      swift_storeEnumTagMultiPayload(v75, v143, 1);
      sub_1000452A8(v61, v63, v67);
      v76 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_100068AB4();
      swift_bridgeObjectRetain(v65);
      v153 = v142;
      v154 = &type metadata for AirDropUIButtonStyle;
      v155 = v76;
      v156 = v77;
      v78 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v79 = (uint64_t)v146;
      _ConditionalContent<>.init(storage:)(v75, v144, &type metadata for Text, v78, &protocol witness table for Text);
      v80 = v151;
      sub_10000CC18(v79, (uint64_t)v151, &qword_10013F760);
      swift_storeEnumTagMultiPayload(v80, v150, 0);
      v81 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v80, v149, &type metadata for Text, v81, &protocol witness table for Text);
      sub_10000CC5C(v79, &qword_10013F760);
      sub_100044F90(v61, v63, v67);
      swift_bridgeObjectRelease(v65, v82, v83, v84, v85, v86, v87, v88);
      v89 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v148, v89);
      v90 = sub_100008F88(&qword_10013F9B0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v51, v90);
    }
    else
    {
      v106 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000F25E0);
      LOWORD(v131) = 256;
      v130 = 0;
      v107 = Text.init(_:tableName:bundle:comment:)(v106);
      v109 = v108;
      v111 = v110;
      v113 = v112 & 1;
      v114 = static Color.red.getter();
      v153 = v114;
      v147 = Text.foregroundStyle<A>(_:)(&v153, v107, v109, v113, v111, &type metadata for Color, &protocol witness table for Color);
      v148 = (char *)v115;
      v117 = v116;
      v119 = v118;
      sub_100044F90(v107, v109, v113);
      swift_release(v114);
      swift_bridgeObjectRelease(v111, v120, v121, v122, v123, v124, v125, v126);
      v127 = v150;
      v128 = v151;
      *v151 = v147;
      v128[1] = v117;
      *((_BYTE *)v128 + 16) = v119 & 1;
      v128[3] = (uint64_t)v148;
      swift_storeEnumTagMultiPayload(v128, v127, 1);
      v129 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v128, v149, &type metadata for Text, v129, &protocol witness table for Text);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v51, v28);
    }
  }
}

uint64_t sub_10009CAAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _TtC9AirDropUI33AirDropTransferSessionsController *v27;
  char v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v2 = v1;
  v69 = sub_100008F88(&qword_10013CA50);
  v4 = *(_QWORD *)(v69 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v69, v6);
  v68 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AirDropAskRequestView(0);
  v66 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v11, v13);
  v14 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - v17;
  v67 = a1;
  v19 = sub_1000A1940(a1, &qword_10013CA50);
  v27 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v20;
  if (v19 == 0xD000000000000010 && v20 == (const char *)0x80000001000F2620)
  {
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2620, v20, v21, v22, v23, v24, v25, v26);
    sub_10001B390(v2, (uint64_t)v18);
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0xD000000000000010, 0x80000001000F2620, 0);
    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
    sub_10001B390(v2, (uint64_t)v18);
    if ((v28 & 1) == 0)
    {
      sub_10000C4C8((uint64_t)v18, type metadata accessor for AirDropAskRequestView);
      goto LABEL_12;
    }
  }
  v36 = *(_QWORD *)&v18[*(int *)(v11 + 20) + 8];
  KeyPath = swift_getKeyPath(&unk_1000EDC50);
  v38 = swift_getKeyPath(&unk_1000EDC78);
  v39 = swift_retain(v36);
  static Published.subscript.getter(&v70, v39, KeyPath, v38);
  swift_release(v36);
  swift_release(KeyPath);
  swift_release(v38);
  LOBYTE(v36) = v70;
  sub_10000C4C8((uint64_t)v18, type metadata accessor for AirDropAskRequestView);
  if ((v36 & 1) == 0)
  {
    v40 = (uint64_t)v10;
    if (qword_10013AD68 != -1)
      swift_once(&qword_10013AD68, sub_100092BDC);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100009558(v41, (uint64_t)qword_10013F390);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "User chose to show sensitive content", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v40, 1, 1, v46);
    sub_10001B390(v2, (uint64_t)v14);
    v47 = *(unsigned __int8 *)(v66 + 80);
    v48 = (v47 + 16) & ~v47;
    v49 = swift_allocObject(&unk_100128630, v48 + v12, v47 | 7);
    sub_1000A436C((uint64_t)v14, v49 + v48);
    v50 = swift_allocObject(&unk_100128658, 32, 7);
    *(_QWORD *)(v50 + 16) = &unk_10013FB18;
    *(_QWORD *)(v50 + 24) = v49;
    v51 = (char *)&type metadata for () + 8;
    v52 = &unk_10013FB20;
    goto LABEL_17;
  }
LABEL_12:
  v40 = (uint64_t)v10;
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v53 = type metadata accessor for Logger(0);
  v54 = sub_100009558(v53, (uint64_t)qword_10013F390);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "User accepted AirDrop", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  v58 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v10, 1, 1, v58);
  v59 = v68;
  v60 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v68, v67, v69);
  v61 = *(unsigned __int8 *)(v4 + 80);
  v62 = (v61 + 16) & ~v61;
  v50 = swift_allocObject(&unk_100128608, v62 + v5, v61 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v50 + v62, v59, v60);
  v51 = (char *)&type metadata for () + 8;
  v52 = &unk_10013FB10;
LABEL_17:
  v63 = static Task<>.noThrow(priority:operation:)(v40, v52, v50, v51);
  swift_release(v63);
  swift_release(v50);
  return sub_10000CC5C(v40, &qword_10013BCC0);
}

uint64_t sub_10009CF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _TtC9AirDropUI33AirDropTransferSessionsController *v27;
  char v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v2 = v1;
  v69 = sub_100008F88(&qword_10013F7C0);
  v4 = *(_QWORD *)(v69 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v69, v6);
  v68 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AirDropAskRequestView(0);
  v66 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v11, v13);
  v14 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - v17;
  v67 = a1;
  v19 = sub_1000A1940(a1, &qword_10013F7C0);
  v27 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v20;
  if (v19 == 0xD000000000000010 && v20 == (const char *)0x80000001000F2620)
  {
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2620, v20, v21, v22, v23, v24, v25, v26);
    sub_10001B390(v2, (uint64_t)v18);
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0xD000000000000010, 0x80000001000F2620, 0);
    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
    sub_10001B390(v2, (uint64_t)v18);
    if ((v28 & 1) == 0)
    {
      sub_10000C4C8((uint64_t)v18, type metadata accessor for AirDropAskRequestView);
      goto LABEL_12;
    }
  }
  v36 = *(_QWORD *)&v18[*(int *)(v11 + 20) + 8];
  KeyPath = swift_getKeyPath(&unk_1000EDC50);
  v38 = swift_getKeyPath(&unk_1000EDC78);
  v39 = swift_retain(v36);
  static Published.subscript.getter(&v70, v39, KeyPath, v38);
  swift_release(v36);
  swift_release(KeyPath);
  swift_release(v38);
  LOBYTE(v36) = v70;
  sub_10000C4C8((uint64_t)v18, type metadata accessor for AirDropAskRequestView);
  if ((v36 & 1) == 0)
  {
    v40 = (uint64_t)v10;
    if (qword_10013AD68 != -1)
      swift_once(&qword_10013AD68, sub_100092BDC);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100009558(v41, (uint64_t)qword_10013F390);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "User chose to show sensitive content", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v40, 1, 1, v46);
    sub_10001B390(v2, (uint64_t)v14);
    v47 = *(unsigned __int8 *)(v66 + 80);
    v48 = (v47 + 16) & ~v47;
    v49 = swift_allocObject(&unk_100128338, v48 + v12, v47 | 7);
    sub_1000A436C((uint64_t)v14, v49 + v48);
    v50 = swift_allocObject(&unk_100128360, 32, 7);
    *(_QWORD *)(v50 + 16) = &unk_10013F838;
    *(_QWORD *)(v50 + 24) = v49;
    v51 = (char *)&type metadata for () + 8;
    v52 = &unk_10013FD00;
    goto LABEL_17;
  }
LABEL_12:
  v40 = (uint64_t)v10;
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v53 = type metadata accessor for Logger(0);
  v54 = sub_100009558(v53, (uint64_t)qword_10013F390);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "User accepted AirDrop", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  v58 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v10, 1, 1, v58);
  v59 = v68;
  v60 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v68, v67, v69);
  v61 = *(unsigned __int8 *)(v4 + 80);
  v62 = (v61 + 16) & ~v61;
  v50 = swift_allocObject(&unk_100128310, v62 + v5, v61 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v50 + v62, v59, v60);
  v51 = (char *)&type metadata for () + 8;
  v52 = &unk_10013F828;
LABEL_17:
  v63 = static Task<>.noThrow(priority:operation:)(v40, v52, v50, v51);
  swift_release(v63);
  swift_release(v50);
  return sub_10000CC5C(v40, &qword_10013BCC0);
}

uint64_t sub_10009D474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _TtC9AirDropUI33AirDropTransferSessionsController *v27;
  char v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v2 = v1;
  v69 = sub_100008F88(&qword_10013F9A0);
  v4 = *(_QWORD *)(v69 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v69, v6);
  v68 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AirDropAskRequestView(0);
  v66 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v11, v13);
  v14 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - v17;
  v67 = a1;
  v19 = sub_1000A1940(a1, &qword_10013F9A0);
  v27 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v20;
  if (v19 == 0xD000000000000010 && v20 == (const char *)0x80000001000F2620)
  {
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2620, v20, v21, v22, v23, v24, v25, v26);
    sub_10001B390(v2, (uint64_t)v18);
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0xD000000000000010, 0x80000001000F2620, 0);
    swift_bridgeObjectRelease(v27, v29, v30, v31, v32, v33, v34, v35);
    sub_10001B390(v2, (uint64_t)v18);
    if ((v28 & 1) == 0)
    {
      sub_10000C4C8((uint64_t)v18, type metadata accessor for AirDropAskRequestView);
      goto LABEL_12;
    }
  }
  v36 = *(_QWORD *)&v18[*(int *)(v11 + 20) + 8];
  KeyPath = swift_getKeyPath(&unk_1000EDC50);
  v38 = swift_getKeyPath(&unk_1000EDC78);
  v39 = swift_retain(v36);
  static Published.subscript.getter(&v70, v39, KeyPath, v38);
  swift_release(v36);
  swift_release(KeyPath);
  swift_release(v38);
  LOBYTE(v36) = v70;
  sub_10000C4C8((uint64_t)v18, type metadata accessor for AirDropAskRequestView);
  if ((v36 & 1) == 0)
  {
    v40 = (uint64_t)v10;
    if (qword_10013AD68 != -1)
      swift_once(&qword_10013AD68, sub_100092BDC);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100009558(v41, (uint64_t)qword_10013F390);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "User chose to show sensitive content", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v40, 1, 1, v46);
    sub_10001B390(v2, (uint64_t)v14);
    v47 = *(unsigned __int8 *)(v66 + 80);
    v48 = (v47 + 16) & ~v47;
    v49 = swift_allocObject(&unk_1001284C8, v48 + v12, v47 | 7);
    sub_1000A436C((uint64_t)v14, v49 + v48);
    v50 = swift_allocObject(&unk_1001284F0, 32, 7);
    *(_QWORD *)(v50 + 16) = &unk_10013F9D0;
    *(_QWORD *)(v50 + 24) = v49;
    v51 = (char *)&type metadata for () + 8;
    v52 = &unk_10013F9D8;
    goto LABEL_17;
  }
LABEL_12:
  v40 = (uint64_t)v10;
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v53 = type metadata accessor for Logger(0);
  v54 = sub_100009558(v53, (uint64_t)qword_10013F390);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "User accepted AirDrop", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  v58 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v10, 1, 1, v58);
  v59 = v68;
  v60 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v68, v67, v69);
  v61 = *(unsigned __int8 *)(v4 + 80);
  v62 = (v61 + 16) & ~v61;
  v50 = swift_allocObject(&unk_1001284A0, v62 + v5, v61 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v50 + v62, v59, v60);
  v51 = (char *)&type metadata for () + 8;
  v52 = &unk_10013F9C8;
LABEL_17:
  v63 = static Task<>.noThrow(priority:operation:)(v40, v52, v50, v51);
  swift_release(v63);
  swift_release(v50);
  return sub_10000CC5C(v40, &qword_10013BCC0);
}

uint64_t sub_10009D958@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_10009D970(a1, &qword_10013CA50, a2, a3);
}

uint64_t sub_10009D964@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_10009D970(a1, &qword_10013F7C0, a2, a3);
}

uint64_t sub_10009D970@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  char v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int16 v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _TtC9AirDropUI33AirDropTransferSessionsController *v67;
  _TtC9AirDropUI33AirDropTransferSessionsController *v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _TtC9AirDropUI33AirDropTransferSessionsController *v82;
  _TtC9AirDropUI33AirDropTransferSessionsController *v83;
  uint64_t v84;
  uint64_t v85;
  SEL v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  SEL v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  _OWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _TtC9AirDropUI33AirDropTransferSessionsController *v129;
  _TtC9AirDropUI33AirDropTransferSessionsController *v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  SEL v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  _BYTE v153[48];
  _OWORD v154[2];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int16 v159;
  char v160;

  v152 = a3;
  v150 = type metadata accessor for SFAirDrop.ButtonConfiguration(0, a4);
  v151 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150, v7);
  v9 = (uint64_t *)((char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Locale(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AirDropAskRequestView(0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000A1940(a1, a2);
  v30 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v23;
  if (v22 == 0xD000000000000010 && v23 == (const char *)0x80000001000F2620)
  {
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2620, v23, v24, v25, v26, v27, v28, v29);
    sub_10001B390(v4, (uint64_t)v21);
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD000000000000010, 0x80000001000F2620, 0);
    swift_bridgeObjectRelease(v30, v32, v33, v34, v35, v36, v37, v38);
    sub_10001B390(v4, (uint64_t)v21);
    if ((v31 & 1) == 0)
    {
      sub_10000C4C8((uint64_t)v21, type metadata accessor for AirDropAskRequestView);
      goto LABEL_8;
    }
  }
  v39 = *(_QWORD *)&v21[*(int *)(v18 + 20) + 8];
  KeyPath = swift_getKeyPath(&unk_1000EDC50);
  v41 = swift_getKeyPath(&unk_1000EDC78);
  v42 = swift_retain(v39);
  static Published.subscript.getter(&v155, v42, KeyPath, v41);
  swift_release(v39);
  swift_release(KeyPath);
  swift_release(v41);
  LOBYTE(v39) = v155;
  sub_10000C4C8((uint64_t)v21, type metadata accessor for AirDropAskRequestView);
  if ((v39 & 1) != 0)
  {
    v43 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000F2640);
    static Locale.current.getter(v43);
    *(_QWORD *)&v155 = String.init(localized:table:bundle:locale:comment:)(v17, 0xD000000000000011, 0x80000001000F10B0, 0, v13, 0, 0, 256);
    *((_QWORD *)&v155 + 1) = v44;
    v45 = sub_100044F4C();
    *(_QWORD *)v153 = Text.init<A>(_:)(&v155, &type metadata for String, v45);
    *(_QWORD *)&v153[8] = v47;
    *(_QWORD *)&v153[16] = v46 & 1;
    *(_QWORD *)&v153[24] = v48;
    *(_OWORD *)&v153[32] = 0u;
    memset(v154, 0, 19);
    v49 = sub_100008F88(&qword_10013F7F0);
    v50 = sub_10000C9D0(&qword_10013F7E8, &qword_10013F7F0, (void (*)(void))sub_1000A4670, (void (*)(void))sub_1000A46D4);
    result = _ConditionalContent<>.init(storage:)(v153, &type metadata for Text, v49, &protocol witness table for Text, v50);
    v52 = v155;
    v53 = v156;
    v54 = v157;
    v55 = v158;
    v56 = v159;
    goto LABEL_20;
  }
LABEL_8:
  v57 = sub_100008F88(a2);
  SFAirDrop.AcceptAction.Single.buttonConfiguration.getter(v57, v58);
  v59 = v151;
  v60 = v150;
  v61 = (*(uint64_t (**)(uint64_t *, uint64_t))(v151 + 88))(v9, v150);
  if (v61 == enum case for SFAirDrop.ButtonConfiguration.text(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v59 + 96))(v9, v60);
    v62 = v9[1];
    *(_QWORD *)&v155 = *v9;
    *((_QWORD *)&v155 + 1) = v62;
    v63 = sub_100044F4C();
    v64 = Text.init<A>(_:)(&v155, &type metadata for String, v63);
    v66 = v65;
    v68 = v67;
    *(_QWORD *)v153 = v64;
    *(_QWORD *)&v153[8] = v65;
    v70 = v69 & 1;
    *(_QWORD *)&v153[16] = v69 & 1;
    *(_QWORD *)&v153[24] = v67;
    v153[32] = 0;
    sub_1000452A8(v64, v65, v69 & 1);
    swift_bridgeObjectRetain(v68);
    _ConditionalContent<>.init(storage:)(v153, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
    *(_OWORD *)v153 = v155;
    *(_OWORD *)&v153[16] = v156;
    *(_OWORD *)&v153[32] = v157;
    memset(v154, 0, 18);
    v71 = sub_100008F88(&qword_10013F800);
    v72 = sub_100008F88(&qword_10013F810);
    v73 = sub_1000A4670();
    v74 = sub_1000A46D4();
    _ConditionalContent<>.init(storage:)(v153, v71, v72, v73, v74);
LABEL_14:
    sub_100044F90(v64, v66, v70);
    swift_bridgeObjectRelease(v68, v107, v108, v109, v110, v111, v112, v113);
    goto LABEL_15;
  }
  if (v61 != enum case for SFAirDrop.ButtonConfiguration.symbol(_:))
  {
    if (v61 != enum case for SFAirDrop.ButtonConfiguration.symbolText(_:))
    {
      v125 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
      v126 = Text.init(_:tableName:bundle:comment:)(v125);
      v128 = v127;
      v130 = v129;
      v132 = v131 & 1;
      *(_QWORD *)v153 = v126;
      *(_QWORD *)&v153[8] = v127;
      *(_QWORD *)&v153[16] = v131 & 1;
      *(_QWORD *)&v153[24] = v129;
      *(_OWORD *)&v153[32] = 0u;
      v154[0] = 0u;
      LOBYTE(v154[1]) = 1;
      sub_1000452A8(v126, v127, v131 & 1);
      swift_bridgeObjectRetain(v130);
      v133 = sub_100008F88(&qword_10013E108);
      v134 = sub_10000CB94(&qword_10013E110, &qword_10013E108, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v153, v133, &type metadata for Text, v134, &protocol witness table for Text);
      *(_OWORD *)v153 = v155;
      *(_OWORD *)&v153[16] = v156;
      *(_OWORD *)&v153[32] = v157;
      v154[0] = v158;
      LOBYTE(v154[1]) = v159;
      BYTE1(v154[1]) = 1;
      v135 = sub_100008F88(&qword_10013F800);
      v136 = sub_100008F88(&qword_10013F810);
      v137 = sub_1000A4670();
      v138 = sub_1000A46D4();
      _ConditionalContent<>.init(storage:)(v153, v135, v136, v137, v138);
      sub_100044F90(v126, v128, v132);
      swift_bridgeObjectRelease(v130, v139, v140, v141, v142, v143, v144, v145);
      v149 = v155;
      v148 = v156;
      v147 = v157;
      v146 = v158;
      v118 = v159;
      v119 = HIBYTE(v159);
      (*(void (**)(uint64_t *, uint64_t))(v151 + 8))(v9, v60);
      v117 = v146;
      v116 = v147;
      v115 = v148;
      v114 = v149;
      goto LABEL_16;
    }
    v80 = (*(uint64_t (**)(uint64_t *, uint64_t))(v59 + 96))(v9, v60);
    v81 = *v9;
    v82 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v9[1];
    v84 = v9[2];
    v83 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v9[3];
    v85 = static VerticalAlignment.center.getter(v80);
    sub_100067E18(v81, (uint64_t)v82, v84, (uint64_t)v83, (uint64_t)&v155);
    swift_bridgeObjectRelease(v83, v86, v87, v88, v89, v90, v91, v92);
    swift_bridgeObjectRelease(v82, v93, v94, v95, v96, v97, v98, v99);
    v64 = *((_QWORD *)&v155 + 1);
    v100 = v155;
    v66 = v156;
    v70 = BYTE8(v156);
    v68 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v157;
    *(_QWORD *)v153 = v85;
    *(_OWORD *)&v153[8] = xmmword_1000E87C0;
    *(_OWORD *)&v153[24] = v155;
    *(_QWORD *)&v153[40] = v156;
    *(_QWORD *)&v154[0] = BYTE8(v156);
    *((_QWORD *)&v154[0] + 1) = v157;
    LOBYTE(v154[1]) = 0;
    swift_retain(v155);
    sub_1000452A8(v64, v66, v70);
    swift_bridgeObjectRetain(v68);
    v101 = sub_100008F88(&qword_10013E108);
    v102 = sub_10000CB94(&qword_10013E110, &qword_10013E108, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v153, v101, &type metadata for Text, v102, &protocol witness table for Text);
    *(_OWORD *)v153 = v155;
    *(_OWORD *)&v153[16] = v156;
    *(_OWORD *)&v153[32] = v157;
    v154[0] = v158;
    LOBYTE(v154[1]) = v159;
    BYTE1(v154[1]) = 1;
    v103 = sub_100008F88(&qword_10013F800);
    v104 = sub_100008F88(&qword_10013F810);
    v105 = sub_1000A4670();
    v106 = sub_1000A46D4();
    _ConditionalContent<>.init(storage:)(v153, v103, v104, v105, v106);
    swift_release(v100);
    goto LABEL_14;
  }
  (*(void (**)(uint64_t *, uint64_t))(v59 + 96))(v9, v60);
  v75 = Image.init(systemName:)(*v9, v9[1]);
  *(_OWORD *)v153 = (unint64_t)v75;
  *(_OWORD *)&v153[16] = 0uLL;
  v153[32] = 1;
  swift_retain(v75);
  _ConditionalContent<>.init(storage:)(v153, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  *(_OWORD *)v153 = v155;
  *(_OWORD *)&v153[16] = v156;
  *(_OWORD *)&v153[32] = v157;
  memset(v154, 0, 18);
  v76 = sub_100008F88(&qword_10013F800);
  v77 = sub_100008F88(&qword_10013F810);
  v78 = sub_1000A4670();
  v79 = sub_1000A46D4();
  _ConditionalContent<>.init(storage:)(v153, v76, v77, v78, v79);
  swift_release(v75);
LABEL_15:
  v114 = v155;
  v115 = v156;
  v116 = v157;
  v117 = v158;
  v118 = v159;
  v119 = HIBYTE(v159);
LABEL_16:
  if (v119)
    v120 = 256;
  else
    v120 = 0;
  *(_OWORD *)v153 = v114;
  *(_OWORD *)&v153[16] = v115;
  *(_OWORD *)&v153[32] = v116;
  v154[0] = v117;
  LOWORD(v154[1]) = v120 | v118;
  BYTE2(v154[1]) = 1;
  v121 = sub_100008F88(&qword_10013F7F0);
  v122 = sub_10000C9D0(&qword_10013F7E8, &qword_10013F7F0, (void (*)(void))sub_1000A4670, (void (*)(void))sub_1000A46D4);
  result = _ConditionalContent<>.init(storage:)(v153, &type metadata for Text, v121, &protocol witness table for Text, v122);
  v52 = v155;
  v53 = v156;
  v54 = v157;
  v55 = v158;
  v56 = v159;
LABEL_20:
  v123 = v160;
  v124 = v152;
  *v152 = v52;
  v124[1] = v53;
  v124[2] = v54;
  v124[3] = v55;
  *((_WORD *)v124 + 32) = v56;
  *((_BYTE *)v124 + 66) = v123;
  return result;
}

uint64_t sub_10009E2BC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_10009D970(a1, &qword_10013F9A0, a2, a3);
}

uint64_t sub_10009E2C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = v1;
  v25 = a1;
  v3 = type metadata accessor for AirDropAskRequestView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  v7 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88(&qword_10013E0D0);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_10013F788);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B390(v2, (uint64_t)v7);
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_100128298, v18 + v5, v17 | 7);
  sub_1000A436C((uint64_t)v7, v19 + v18);
  Button.init(action:label:)(sub_1000A4510, v19, sub_1000A1CE0, 0, &type metadata for Image, &protocol witness table for Image);
  v20 = 4;
  if (*(_BYTE *)(v2 + *(int *)(v3 + 24)))
    v20 = 2;
  v26 = v20;
  v27 = 2;
  v21 = sub_10000CB94(&qword_10013E0C8, &qword_10013E0D0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v22 = sub_100068AB4();
  View.buttonStyle<A>(_:)(&v26, v8, &type metadata for AirDropUIButtonStyle, v21, v22);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25, v16, v12);
}

uint64_t sub_10009E4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v79 = a3;
  v80 = a4;
  v82 = a2;
  v5 = sub_100008F88(&qword_10013FAC8);
  __chkstk_darwin(v5, v6);
  v81 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v67 - v10;
  v69 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v12 = *(_QWORD *)(v69 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v69, v14);
  v72 = type metadata accessor for AirDropAskRequestView(0);
  v15 = *(_QWORD *)(v72 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v72, v17);
  v18 = sub_100008F88(&qword_100140040);
  v74 = *(_QWORD *)(v18 - 8);
  v75 = v18;
  __chkstk_darwin(v18, v19);
  v73 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88(&qword_10013F708);
  v77 = *(_QWORD *)(v21 - 8);
  v78 = v21;
  __chkstk_darwin(v21, v22);
  v71 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v70 = (char *)&v67 - v26;
  v27 = sub_100008F88(&qword_10013F710);
  __chkstk_darwin(v27, v28);
  v76 = (uint64_t)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30, v31);
  v34 = (char *)&v67 - v33;
  v35 = a1;
  if ((SFAirDrop.DeclineAction.hidden.getter(v32) & 1) != 0)
  {
    v36 = 1;
    v37 = v82;
    v39 = v77;
    v38 = v78;
  }
  else
  {
    sub_10001B390(v82, (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v68 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v41 = v69;
    v40((char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v69);
    v42 = *(unsigned __int8 *)(v15 + 80);
    v43 = (v42 + 16) & ~v42;
    v44 = *(unsigned __int8 *)(v12 + 80);
    v45 = (v16 + v44 + v43) & ~v44;
    v46 = swift_allocObject(&unk_100128590, v45 + v13, v42 | v44 | 7);
    sub_1000A436C(v68, v46 + v43);
    v47 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v46 + v45, (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v41);
    __chkstk_darwin(v47, v48);
    *(&v67 - 2) = v35;
    v49 = v73;
    Button.init(action:label:)(sub_1000A43B0, v46, sub_1000A52F0, &v67 - 4, &type metadata for Text, &protocol witness table for Text);
    v50 = v82;
    v51 = 3;
    if (*(_BYTE *)(v82 + *(int *)(v72 + 24)))
      v51 = 1;
    v83 = v51;
    v84 = 2;
    v52 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v53 = sub_100068AB4();
    v54 = v71;
    v55 = v75;
    View.buttonStyle<A>(_:)(&v83, v75, &type metadata for AirDropUIButtonStyle, v52, v53);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v55);
    v57 = v77;
    v56 = v78;
    v58 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v59 = v70;
    v58(v70, v54, v78);
    v58(v34, v59, v56);
    v36 = 0;
    v37 = v50;
    v38 = v56;
    v39 = v57;
  }
  v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v34, v36, 1, v38);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v60);
  *((_QWORD *)v11 + 1) = 0x4024000000000000;
  v11[16] = 0;
  v61 = sub_100008F88(&qword_10013FAD0);
  sub_10009F384(v79, v37, &v11[*(int *)(v61 + 44)]);
  v62 = v76;
  sub_10000CC18((uint64_t)v34, v76, &qword_10013F710);
  v63 = v81;
  sub_10000CC18((uint64_t)v11, v81, &qword_10013FAC8);
  v64 = v80;
  sub_10000CC18(v62, v80, &qword_10013F710);
  v65 = sub_100008F88(&qword_10013FAD8);
  sub_10000CC18(v63, v64 + *(int *)(v65 + 48), &qword_10013FAC8);
  sub_10000CC5C((uint64_t)v11, &qword_10013FAC8);
  sub_10000CC5C((uint64_t)v34, &qword_10013F710);
  sub_10000CC5C(v63, &qword_10013FAC8);
  return sub_10000CC5C(v62, &qword_10013F710);
}

uint64_t sub_10009E968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v79 = a3;
  v80 = a4;
  v82 = a2;
  v5 = sub_100008F88(&qword_10013F700);
  __chkstk_darwin(v5, v6);
  v81 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v67 - v10;
  v69 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v12 = *(_QWORD *)(v69 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v69, v14);
  v72 = type metadata accessor for AirDropAskRequestView(0);
  v15 = *(_QWORD *)(v72 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v72, v17);
  v18 = sub_100008F88(&qword_100140040);
  v74 = *(_QWORD *)(v18 - 8);
  v75 = v18;
  __chkstk_darwin(v18, v19);
  v73 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88(&qword_10013F708);
  v77 = *(_QWORD *)(v21 - 8);
  v78 = v21;
  __chkstk_darwin(v21, v22);
  v71 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v70 = (char *)&v67 - v26;
  v27 = sub_100008F88(&qword_10013F710);
  __chkstk_darwin(v27, v28);
  v76 = (uint64_t)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30, v31);
  v34 = (char *)&v67 - v33;
  v35 = a1;
  if ((SFAirDrop.DeclineAction.hidden.getter(v32) & 1) != 0)
  {
    v36 = 1;
    v37 = v82;
    v39 = v77;
    v38 = v78;
  }
  else
  {
    sub_10001B390(v82, (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v68 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v41 = v69;
    v40((char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v69);
    v42 = *(unsigned __int8 *)(v15 + 80);
    v43 = (v42 + 16) & ~v42;
    v44 = *(unsigned __int8 *)(v12 + 80);
    v45 = (v16 + v44 + v43) & ~v44;
    v46 = swift_allocObject(&unk_100128248, v45 + v13, v42 | v44 | 7);
    sub_1000A436C(v68, v46 + v43);
    v47 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v46 + v45, (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v41);
    __chkstk_darwin(v47, v48);
    *(&v67 - 2) = v35;
    v49 = v73;
    Button.init(action:label:)(sub_1000A43B0, v46, sub_1000A43B4, &v67 - 4, &type metadata for Text, &protocol witness table for Text);
    v50 = v82;
    v51 = 3;
    if (*(_BYTE *)(v82 + *(int *)(v72 + 24)))
      v51 = 1;
    v83 = v51;
    v84 = 2;
    v52 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v53 = sub_100068AB4();
    v54 = v71;
    v55 = v75;
    View.buttonStyle<A>(_:)(&v83, v75, &type metadata for AirDropUIButtonStyle, v52, v53);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v55);
    v57 = v77;
    v56 = v78;
    v58 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v59 = v70;
    v58(v70, v54, v78);
    v58(v34, v59, v56);
    v36 = 0;
    v37 = v50;
    v38 = v56;
    v39 = v57;
  }
  v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v34, v36, 1, v38);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v60);
  *((_QWORD *)v11 + 1) = 0x4024000000000000;
  v11[16] = 0;
  v61 = sub_100008F88(&qword_10013F718);
  sub_10009F6C0(v79, v37, &v11[*(int *)(v61 + 44)]);
  v62 = v76;
  sub_10000CC18((uint64_t)v34, v76, &qword_10013F710);
  v63 = v81;
  sub_10000CC18((uint64_t)v11, v81, &qword_10013F700);
  v64 = v80;
  sub_10000CC18(v62, v80, &qword_10013F710);
  v65 = sub_100008F88(&qword_10013F720);
  sub_10000CC18(v63, v64 + *(int *)(v65 + 48), &qword_10013F700);
  sub_10000CC5C((uint64_t)v11, &qword_10013F700);
  sub_10000CC5C((uint64_t)v34, &qword_10013F710);
  sub_10000CC5C(v63, &qword_10013F700);
  return sub_10000CC5C(v62, &qword_10013F710);
}

uint64_t sub_10009EE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v79 = a3;
  v80 = a4;
  v82 = a2;
  v5 = sub_100008F88(&qword_10013F958);
  __chkstk_darwin(v5, v6);
  v81 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v67 - v10;
  v69 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v12 = *(_QWORD *)(v69 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v69, v14);
  v72 = type metadata accessor for AirDropAskRequestView(0);
  v15 = *(_QWORD *)(v72 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v72, v17);
  v18 = sub_100008F88(&qword_100140040);
  v74 = *(_QWORD *)(v18 - 8);
  v75 = v18;
  __chkstk_darwin(v18, v19);
  v73 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88(&qword_10013F708);
  v77 = *(_QWORD *)(v21 - 8);
  v78 = v21;
  __chkstk_darwin(v21, v22);
  v71 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v70 = (char *)&v67 - v26;
  v27 = sub_100008F88(&qword_10013F710);
  __chkstk_darwin(v27, v28);
  v76 = (uint64_t)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30, v31);
  v34 = (char *)&v67 - v33;
  v35 = a1;
  if ((SFAirDrop.DeclineAction.hidden.getter(v32) & 1) != 0)
  {
    v36 = 1;
    v37 = v82;
    v39 = v77;
    v38 = v78;
  }
  else
  {
    sub_10001B390(v82, (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v68 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v41 = v69;
    v40((char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v69);
    v42 = *(unsigned __int8 *)(v15 + 80);
    v43 = (v42 + 16) & ~v42;
    v44 = *(unsigned __int8 *)(v12 + 80);
    v45 = (v16 + v44 + v43) & ~v44;
    v46 = swift_allocObject(&unk_100128428, v45 + v13, v42 | v44 | 7);
    sub_1000A436C(v68, v46 + v43);
    v47 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v46 + v45, (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v41);
    __chkstk_darwin(v47, v48);
    *(&v67 - 2) = v35;
    v49 = v73;
    Button.init(action:label:)(sub_1000A43B0, v46, sub_1000A52F0, &v67 - 4, &type metadata for Text, &protocol witness table for Text);
    v50 = v82;
    v51 = 3;
    if (*(_BYTE *)(v82 + *(int *)(v72 + 24)))
      v51 = 1;
    v83 = v51;
    v84 = 2;
    v52 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v53 = sub_100068AB4();
    v54 = v71;
    v55 = v75;
    View.buttonStyle<A>(_:)(&v83, v75, &type metadata for AirDropUIButtonStyle, v52, v53);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v55);
    v57 = v77;
    v56 = v78;
    v58 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v59 = v70;
    v58(v70, v54, v78);
    v58(v34, v59, v56);
    v36 = 0;
    v37 = v50;
    v38 = v56;
    v39 = v57;
  }
  v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v34, v36, 1, v38);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v60);
  *((_QWORD *)v11 + 1) = 0x4024000000000000;
  v11[16] = 0;
  v61 = sub_100008F88(&qword_10013F960);
  sub_10009F9FC(v79, v37, &v11[*(int *)(v61 + 44)]);
  v62 = v76;
  sub_10000CC18((uint64_t)v34, v76, &qword_10013F710);
  v63 = v81;
  sub_10000CC18((uint64_t)v11, v81, &qword_10013F958);
  v64 = v80;
  sub_10000CC18(v62, v80, &qword_10013F710);
  v65 = sub_100008F88(&qword_10013F968);
  sub_10000CC18(v63, v64 + *(int *)(v65 + 48), &qword_10013F958);
  sub_10000CC5C((uint64_t)v11, &qword_10013F958);
  sub_10000CC5C((uint64_t)v34, &qword_10013F710);
  sub_10000CC5C(v63, &qword_10013F958);
  return sub_10000CC5C(v62, &qword_10013F710);
}

uint64_t sub_10009F2C0@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v3 = type metadata accessor for SFAirDrop.ButtonConfiguration(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = SFAirDrop.DeclineAction.buttonConfiguration.getter(v6);
  v10 = SFAirDrop.ButtonConfiguration.localizedTitle.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  v18[0] = v10;
  v18[1] = v12;
  v13 = sub_100044F4C();
  result = Text.init<A>(_:)(v18, &type metadata for String, v13);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v16 & 1;
  *(_QWORD *)(a1 + 24) = v17;
  return result;
}

uint64_t sub_10009F384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a3;
  v5 = sub_100008F88(&qword_10013F728);
  __chkstk_darwin(v5, v6);
  v49 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v45 - v10;
  v12 = type metadata accessor for AirDropAskRequestView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v16 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013FAE0);
  v46 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v45 - v22;
  v50 = a1;
  sub_10001B390(a2, (uint64_t)v16);
  v24 = *(unsigned __int8 *)(v13 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = swift_allocObject(&unk_1001285B8, v25 + v14, v24 | 7);
  sub_1000A436C((uint64_t)v16, v26 + v25);
  swift_bridgeObjectRetain(a1);
  v27 = sub_100008F88(&qword_10013FAE8);
  v28 = type metadata accessor for UUID(0);
  v29 = sub_100008F88(&qword_10013F740);
  v30 = sub_10000CB94(&qword_10013FAF0, &qword_10013FAE8, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = sub_1000A43DC(&qword_10013F750, &qword_10013F740, (void (*)(void))sub_1000A4444);
  v32 = sub_10000CB94(&qword_10013FAF8, (uint64_t *)&unk_10013BD10, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>);
  v33 = ForEach<>.init(_:content:)(&v50, sub_1000A4C08, v26, v27, v28, v29, v30, v31, v32);
  if ((sub_100092C6C(v33, v34) & 1) != 0)
  {
    sub_10009E2C8((uint64_t)v11);
    v35 = sub_100008F88(&qword_10013F788);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v11, 0, 1, v35);
  }
  else
  {
    v36 = sub_100008F88(&qword_10013F788);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v11, 1, 1, v36);
  }
  v38 = v46;
  v37 = v47;
  v39 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v39(v47, v23, v17);
  v40 = v49;
  sub_10000CC18((uint64_t)v11, v49, &qword_10013F728);
  v41 = v48;
  v39(v48, v37, v17);
  v42 = sub_100008F88(&qword_10013FB00);
  sub_10000CC18(v40, (uint64_t)&v41[*(int *)(v42 + 48)], &qword_10013F728);
  sub_10000CC5C((uint64_t)v11, &qword_10013F728);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v23, v17);
  sub_10000CC5C(v40, &qword_10013F728);
  return ((uint64_t (*)(char *, uint64_t))v43)(v37, v17);
}

uint64_t sub_10009F6C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a3;
  v5 = sub_100008F88(&qword_10013F728);
  __chkstk_darwin(v5, v6);
  v49 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v45 - v10;
  v12 = type metadata accessor for AirDropAskRequestView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v16 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013F730);
  v46 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v45 - v22;
  v50 = a1;
  sub_10001B390(a2, (uint64_t)v16);
  v24 = *(unsigned __int8 *)(v13 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = swift_allocObject(&unk_100128270, v25 + v14, v24 | 7);
  sub_1000A436C((uint64_t)v16, v26 + v25);
  swift_bridgeObjectRetain(a1);
  v27 = sub_100008F88(&qword_10013F738);
  v28 = type metadata accessor for UUID(0);
  v29 = sub_100008F88(&qword_10013F740);
  v30 = sub_10000CB94(&qword_10013F748, &qword_10013F738, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = sub_1000A43DC(&qword_10013F750, &qword_10013F740, (void (*)(void))sub_1000A4444);
  v32 = sub_10000CB94(&qword_10013F778, &qword_10013F780, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>);
  v33 = ForEach<>.init(_:content:)(&v50, sub_1000A43D0, v26, v27, v28, v29, v30, v31, v32);
  if ((sub_100092C6C(v33, v34) & 1) != 0)
  {
    sub_10009E2C8((uint64_t)v11);
    v35 = sub_100008F88(&qword_10013F788);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v11, 0, 1, v35);
  }
  else
  {
    v36 = sub_100008F88(&qword_10013F788);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v11, 1, 1, v36);
  }
  v38 = v46;
  v37 = v47;
  v39 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v39(v47, v23, v17);
  v40 = v49;
  sub_10000CC18((uint64_t)v11, v49, &qword_10013F728);
  v41 = v48;
  v39(v48, v37, v17);
  v42 = sub_100008F88(&qword_10013F790);
  sub_10000CC18(v40, (uint64_t)&v41[*(int *)(v42 + 48)], &qword_10013F728);
  sub_10000CC5C((uint64_t)v11, &qword_10013F728);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v23, v17);
  sub_10000CC5C(v40, &qword_10013F728);
  return ((uint64_t (*)(char *, uint64_t))v43)(v37, v17);
}

uint64_t sub_10009F9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a3;
  v5 = sub_100008F88(&qword_10013F728);
  __chkstk_darwin(v5, v6);
  v49 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v45 - v10;
  v12 = type metadata accessor for AirDropAskRequestView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v16 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_10013F970);
  v46 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v45 - v22;
  v50 = a1;
  sub_10001B390(a2, (uint64_t)v16);
  v24 = *(unsigned __int8 *)(v13 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = swift_allocObject(&unk_100128450, v25 + v14, v24 | 7);
  sub_1000A436C((uint64_t)v16, v26 + v25);
  swift_bridgeObjectRetain(a1);
  v27 = sub_100008F88(&qword_10013F978);
  v28 = type metadata accessor for UUID(0);
  v29 = sub_100008F88(&qword_10013F740);
  v30 = sub_10000CB94(&qword_10013F980, &qword_10013F978, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = sub_1000A43DC(&qword_10013F750, &qword_10013F740, (void (*)(void))sub_1000A4444);
  v32 = sub_10000CB94(&qword_10013F988, &qword_10013F990, (uint64_t)&protocol conformance descriptor for SFAirDrop.AcceptAction<A>);
  v33 = ForEach<>.init(_:content:)(&v50, sub_1000A4AA0, v26, v27, v28, v29, v30, v31, v32);
  if ((sub_100092C6C(v33, v34) & 1) != 0)
  {
    sub_10009E2C8((uint64_t)v11);
    v35 = sub_100008F88(&qword_10013F788);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v11, 0, 1, v35);
  }
  else
  {
    v36 = sub_100008F88(&qword_10013F788);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v11, 1, 1, v36);
  }
  v38 = v46;
  v37 = v47;
  v39 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v39(v47, v23, v17);
  v40 = v49;
  sub_10000CC18((uint64_t)v11, v49, &qword_10013F728);
  v41 = v48;
  v39(v48, v37, v17);
  v42 = sub_100008F88(&qword_10013F998);
  sub_10000CC18(v40, (uint64_t)&v41[*(int *)(v42 + 48)], &qword_10013F728);
  sub_10000CC5C((uint64_t)v11, &qword_10013F728);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v23, v17);
  sub_10000CC5C(v40, &qword_10013F728);
  return ((uint64_t (*)(char *, uint64_t))v43)(v37, v17);
}

uint64_t sub_10009FD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  char v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  unint64_t v156;

  v147 = a1;
  v148 = (char *)a2;
  v152 = a3;
  v150 = sub_100008F88(&qword_10013F7A8);
  __chkstk_darwin(v150, v3);
  v151 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100008F88(&qword_10013F7B0);
  __chkstk_darwin(v143, v5);
  v145 = (uint64_t *)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = sub_100008F88(&qword_10013F760);
  __chkstk_darwin(v149, v7);
  v146 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for AirDropAskRequestView(0);
  v9 = *(_QWORD *)(v137 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v137, v11);
  v135 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008F88(&qword_10013F768);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v12);
  v136 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100008F88(&qword_10013F7B8);
  v141 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v14);
  v138 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v140 = (char *)&v132 - v18;
  v19 = sub_100008F88(&qword_10013CA50);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v132 - v26;
  v28 = sub_100008F88((uint64_t *)&unk_10013BD10);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v33, v147, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v33, v28);
  if (v34 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v27, v33, v19);
    v36 = v135;
    sub_10001B390((uint64_t)v148, v135);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v27, v19);
    v37 = *(unsigned __int8 *)(v9 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = *(unsigned __int8 *)(v20 + 80);
    v40 = (v10 + v39 + v38) & ~v39;
    v41 = swift_allocObject(&unk_1001285E0, v40 + v21, v37 | v39 | 7);
    sub_1000A436C(v36, v41 + v38);
    v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v41 + v40, v23, v19);
    __chkstk_darwin(v42, v43);
    v44 = (uint64_t)v148;
    v130 = (uint64_t)v148;
    v131 = v27;
    v45 = sub_100008F88(&qword_10013F7D8);
    v46 = sub_1000A45E4();
    v47 = v136;
    Button.init(action:label:)(sub_1000A4C20, v41, sub_1000A4C34, &v132 - 4, v45, v46);
    v48 = *(_BYTE *)(v44 + *(int *)(v137 + 24));
    v49 = v47;
    v134 = v20;
    v133 = v19;
    if ((v48 & 1) != 0)
      v50 = (SFAirDrop.AcceptAction.Single.prominent.getter(v19) & 1) == 0;
    else
      v50 = 3;
    v92 = v27;
    v148 = &v33[*(int *)(sub_100008F88(&qword_10013CA98) + 48)];
    v153 = v50;
    LOBYTE(v154) = 2;
    v93 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v94 = sub_100068AB4();
    v95 = v138;
    v96 = v142;
    View.buttonStyle<A>(_:)(&v153, v142, &type metadata for AirDropUIButtonStyle, v93, v94);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v96);
    v98 = v140;
    v97 = v141;
    v99 = v144;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v95, v144);
    v100 = v145;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v145, v98, v99);
    swift_storeEnumTagMultiPayload(v100, v143, 0);
    v153 = v96;
    v154 = &type metadata for AirDropUIButtonStyle;
    v155 = v93;
    v156 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v102 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v100, v99, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    v103 = v151;
    sub_10000CC18(v102, (uint64_t)v151, &qword_10013F760);
    swift_storeEnumTagMultiPayload(v103, v150, 0);
    v104 = sub_1000A4444();
    _ConditionalContent<>.init(storage:)(v103, v149, &type metadata for Text, v104, &protocol witness table for Text);
    sub_10000CC5C(v102, &qword_10013F760);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v133);
    v105 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v148, v105);
  }
  else
  {
    v51 = v33;
    if (v34 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
      v148 = &v33[*(int *)(sub_100008F88(&qword_10013E0A0) + 48)];
      v52 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000F2600);
      LOWORD(v131) = 256;
      v130 = 0;
      v53 = Text.init(_:tableName:bundle:comment:)(v52);
      v55 = v54;
      v57 = v56;
      v59 = v58 & 1;
      v60 = static Color.red.getter();
      v153 = v60;
      v61 = Text.foregroundStyle<A>(_:)(&v153, v53, v55, v59, v57, &type metadata for Color, &protocol witness table for Color);
      v63 = v62;
      v65 = v64;
      v67 = v66 & 1;
      sub_100044F90(v53, v55, v59);
      swift_release(v60);
      swift_bridgeObjectRelease(v57, v68, v69, v70, v71, v72, v73, v74);
      v75 = v145;
      *v145 = v61;
      v75[1] = v63;
      *((_BYTE *)v75 + 16) = v67;
      v75[3] = (uint64_t)v65;
      swift_storeEnumTagMultiPayload(v75, v143, 1);
      sub_1000452A8(v61, v63, v67);
      v76 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_100068AB4();
      swift_bridgeObjectRetain(v65);
      v153 = v142;
      v154 = &type metadata for AirDropUIButtonStyle;
      v155 = v76;
      v156 = v77;
      v78 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v79 = (uint64_t)v146;
      _ConditionalContent<>.init(storage:)(v75, v144, &type metadata for Text, v78, &protocol witness table for Text);
      v80 = v151;
      sub_10000CC18(v79, (uint64_t)v151, &qword_10013F760);
      swift_storeEnumTagMultiPayload(v80, v150, 0);
      v81 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v80, v149, &type metadata for Text, v81, &protocol witness table for Text);
      sub_10000CC5C(v79, &qword_10013F760);
      sub_100044F90(v61, v63, v67);
      swift_bridgeObjectRelease(v65, v82, v83, v84, v85, v86, v87, v88);
      v89 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v148, v89);
      v90 = sub_100008F88(&qword_10013E008);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v51, v90);
    }
    else
    {
      v106 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000F25E0);
      LOWORD(v131) = 256;
      v130 = 0;
      v107 = Text.init(_:tableName:bundle:comment:)(v106);
      v109 = v108;
      v111 = v110;
      v113 = v112 & 1;
      v114 = static Color.red.getter();
      v153 = v114;
      v147 = Text.foregroundStyle<A>(_:)(&v153, v107, v109, v113, v111, &type metadata for Color, &protocol witness table for Color);
      v148 = (char *)v115;
      v117 = v116;
      v119 = v118;
      sub_100044F90(v107, v109, v113);
      swift_release(v114);
      swift_bridgeObjectRelease(v111, v120, v121, v122, v123, v124, v125, v126);
      v127 = v150;
      v128 = v151;
      *v151 = v147;
      v128[1] = v117;
      *((_BYTE *)v128 + 16) = v119 & 1;
      v128[3] = (uint64_t)v148;
      swift_storeEnumTagMultiPayload(v128, v127, 1);
      v129 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v128, v149, &type metadata for Text, v129, &protocol witness table for Text);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v51, v28);
    }
  }
}

uint64_t sub_1000A0690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  char v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  unint64_t v156;

  v147 = a1;
  v148 = (char *)a2;
  v152 = a3;
  v150 = sub_100008F88(&qword_10013F7A8);
  __chkstk_darwin(v150, v3);
  v151 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100008F88(&qword_10013F7B0);
  __chkstk_darwin(v143, v5);
  v145 = (uint64_t *)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = sub_100008F88(&qword_10013F760);
  __chkstk_darwin(v149, v7);
  v146 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for AirDropAskRequestView(0);
  v9 = *(_QWORD *)(v137 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v137, v11);
  v135 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008F88(&qword_10013F768);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v12);
  v136 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100008F88(&qword_10013F7B8);
  v141 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v14);
  v138 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v140 = (char *)&v132 - v18;
  v19 = sub_100008F88(&qword_10013F7C0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v132 - v26;
  v28 = sub_100008F88(&qword_10013F780);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v33, v147, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v33, v28);
  if (v34 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v27, v33, v19);
    v36 = v135;
    sub_10001B390((uint64_t)v148, v135);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v27, v19);
    v37 = *(unsigned __int8 *)(v9 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = *(unsigned __int8 *)(v20 + 80);
    v40 = (v10 + v39 + v38) & ~v39;
    v41 = swift_allocObject(&unk_1001282E8, v40 + v21, v37 | v39 | 7);
    sub_1000A436C(v36, v41 + v38);
    v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v41 + v40, v23, v19);
    __chkstk_darwin(v42, v43);
    v44 = (uint64_t)v148;
    v130 = (uint64_t)v148;
    v131 = v27;
    v45 = sub_100008F88(&qword_10013F7D8);
    v46 = sub_1000A45E4();
    v47 = v136;
    Button.init(action:label:)(sub_1000A45C4, v41, sub_1000A45D8, &v132 - 4, v45, v46);
    v48 = *(_BYTE *)(v44 + *(int *)(v137 + 24));
    v49 = v47;
    v134 = v20;
    v133 = v19;
    if ((v48 & 1) != 0)
      v50 = (SFAirDrop.AcceptAction.Single.prominent.getter(v19) & 1) == 0;
    else
      v50 = 3;
    v92 = v27;
    v148 = &v33[*(int *)(sub_100008F88(&qword_10013F818) + 48)];
    v153 = v50;
    LOBYTE(v154) = 2;
    v93 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v94 = sub_100068AB4();
    v95 = v138;
    v96 = v142;
    View.buttonStyle<A>(_:)(&v153, v142, &type metadata for AirDropUIButtonStyle, v93, v94);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v96);
    v98 = v140;
    v97 = v141;
    v99 = v144;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v95, v144);
    v100 = v145;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v145, v98, v99);
    swift_storeEnumTagMultiPayload(v100, v143, 0);
    v153 = v96;
    v154 = &type metadata for AirDropUIButtonStyle;
    v155 = v93;
    v156 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v102 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v100, v99, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    v103 = v151;
    sub_10000CC18(v102, (uint64_t)v151, &qword_10013F760);
    swift_storeEnumTagMultiPayload(v103, v150, 0);
    v104 = sub_1000A4444();
    _ConditionalContent<>.init(storage:)(v103, v149, &type metadata for Text, v104, &protocol witness table for Text);
    sub_10000CC5C(v102, &qword_10013F760);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v133);
    v105 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v148, v105);
  }
  else
  {
    v51 = v33;
    if (v34 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
      v148 = &v33[*(int *)(sub_100008F88(&qword_10013F7C8) + 48)];
      v52 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000F2600);
      LOWORD(v131) = 256;
      v130 = 0;
      v53 = Text.init(_:tableName:bundle:comment:)(v52);
      v55 = v54;
      v57 = v56;
      v59 = v58 & 1;
      v60 = static Color.red.getter();
      v153 = v60;
      v61 = Text.foregroundStyle<A>(_:)(&v153, v53, v55, v59, v57, &type metadata for Color, &protocol witness table for Color);
      v63 = v62;
      v65 = v64;
      v67 = v66 & 1;
      sub_100044F90(v53, v55, v59);
      swift_release(v60);
      swift_bridgeObjectRelease(v57, v68, v69, v70, v71, v72, v73, v74);
      v75 = v145;
      *v145 = v61;
      v75[1] = v63;
      *((_BYTE *)v75 + 16) = v67;
      v75[3] = (uint64_t)v65;
      swift_storeEnumTagMultiPayload(v75, v143, 1);
      sub_1000452A8(v61, v63, v67);
      v76 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_100068AB4();
      swift_bridgeObjectRetain(v65);
      v153 = v142;
      v154 = &type metadata for AirDropUIButtonStyle;
      v155 = v76;
      v156 = v77;
      v78 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v79 = (uint64_t)v146;
      _ConditionalContent<>.init(storage:)(v75, v144, &type metadata for Text, v78, &protocol witness table for Text);
      v80 = v151;
      sub_10000CC18(v79, (uint64_t)v151, &qword_10013F760);
      swift_storeEnumTagMultiPayload(v80, v150, 0);
      v81 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v80, v149, &type metadata for Text, v81, &protocol witness table for Text);
      sub_10000CC5C(v79, &qword_10013F760);
      sub_100044F90(v61, v63, v67);
      swift_bridgeObjectRelease(v65, v82, v83, v84, v85, v86, v87, v88);
      v89 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v148, v89);
      v90 = sub_100008F88(&qword_10013F7D0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v51, v90);
    }
    else
    {
      v106 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000F25E0);
      LOWORD(v131) = 256;
      v130 = 0;
      v107 = Text.init(_:tableName:bundle:comment:)(v106);
      v109 = v108;
      v111 = v110;
      v113 = v112 & 1;
      v114 = static Color.red.getter();
      v153 = v114;
      v147 = Text.foregroundStyle<A>(_:)(&v153, v107, v109, v113, v111, &type metadata for Color, &protocol witness table for Color);
      v148 = (char *)v115;
      v117 = v116;
      v119 = v118;
      sub_100044F90(v107, v109, v113);
      swift_release(v114);
      swift_bridgeObjectRelease(v111, v120, v121, v122, v123, v124, v125, v126);
      v127 = v150;
      v128 = v151;
      *v151 = v147;
      v128[1] = v117;
      *((_BYTE *)v128 + 16) = v119 & 1;
      v128[3] = (uint64_t)v148;
      swift_storeEnumTagMultiPayload(v128, v127, 1);
      v129 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v128, v149, &type metadata for Text, v129, &protocol witness table for Text);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v51, v28);
    }
  }
}

uint64_t sub_1000A0FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _TtC9AirDropUI33AirDropTransferSessionsController *v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _TtC9AirDropUI33AirDropTransferSessionsController *v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  char v66;
  char v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  SEL v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t OpaqueTypeConformance2;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _TtC9AirDropUI33AirDropTransferSessionsController *v110;
  _TtC9AirDropUI33AirDropTransferSessionsController *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  ValueMetadata *v154;
  uint64_t v155;
  unint64_t v156;

  v147 = a1;
  v148 = (char *)a2;
  v152 = a3;
  v150 = sub_100008F88(&qword_10013F7A8);
  __chkstk_darwin(v150, v3);
  v151 = (uint64_t *)((char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v143 = sub_100008F88(&qword_10013F7B0);
  __chkstk_darwin(v143, v5);
  v145 = (uint64_t *)((char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = sub_100008F88(&qword_10013F760);
  __chkstk_darwin(v149, v7);
  v146 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for AirDropAskRequestView(0);
  v9 = *(_QWORD *)(v137 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v137, v11);
  v135 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100008F88(&qword_10013F768);
  v139 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v12);
  v136 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100008F88(&qword_10013F7B8);
  v141 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v14);
  v138 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v140 = (char *)&v132 - v18;
  v19 = sub_100008F88(&qword_10013F9A0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v132 - v26;
  v28 = sub_100008F88(&qword_10013F990);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v33, v147, v28, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v33, v28);
  if (v34 == enum case for SFAirDrop.AcceptAction.single<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
    v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v27, v33, v19);
    v36 = v135;
    sub_10001B390((uint64_t)v148, v135);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v27, v19);
    v37 = *(unsigned __int8 *)(v9 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = *(unsigned __int8 *)(v20 + 80);
    v40 = (v10 + v39 + v38) & ~v39;
    v41 = swift_allocObject(&unk_100128478, v40 + v21, v37 | v39 | 7);
    sub_1000A436C(v36, v41 + v38);
    v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v41 + v40, v23, v19);
    __chkstk_darwin(v42, v43);
    v44 = (uint64_t)v148;
    v130 = (uint64_t)v148;
    v131 = v27;
    v45 = sub_100008F88(&qword_10013F7D8);
    v46 = sub_1000A45E4();
    v47 = v136;
    Button.init(action:label:)(sub_1000A4AB8, v41, sub_1000A4ACC, &v132 - 4, v45, v46);
    v48 = *(_BYTE *)(v44 + *(int *)(v137 + 24));
    v49 = v47;
    v134 = v20;
    v133 = v19;
    if ((v48 & 1) != 0)
      v50 = (SFAirDrop.AcceptAction.Single.prominent.getter(v19) & 1) == 0;
    else
      v50 = 3;
    v92 = v27;
    v148 = &v33[*(int *)(sub_100008F88(&qword_10013F9B8) + 48)];
    v153 = v50;
    LOBYTE(v154) = 2;
    v93 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v94 = sub_100068AB4();
    v95 = v138;
    v96 = v142;
    View.buttonStyle<A>(_:)(&v153, v142, &type metadata for AirDropUIButtonStyle, v93, v94);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v96);
    v98 = v140;
    v97 = v141;
    v99 = v144;
    (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v140, v95, v144);
    v100 = v145;
    (*(void (**)(uint64_t *, char *, uint64_t))(v97 + 16))(v145, v98, v99);
    swift_storeEnumTagMultiPayload(v100, v143, 0);
    v153 = v96;
    v154 = &type metadata for AirDropUIButtonStyle;
    v155 = v93;
    v156 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v102 = (uint64_t)v146;
    _ConditionalContent<>.init(storage:)(v100, v99, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
    v103 = v151;
    sub_10000CC18(v102, (uint64_t)v151, &qword_10013F760);
    swift_storeEnumTagMultiPayload(v103, v150, 0);
    v104 = sub_1000A4444();
    _ConditionalContent<>.init(storage:)(v103, v149, &type metadata for Text, v104, &protocol witness table for Text);
    sub_10000CC5C(v102, &qword_10013F760);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v133);
    v105 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v105 - 8) + 8))(v148, v105);
  }
  else
  {
    v51 = v33;
    if (v34 == enum case for SFAirDrop.AcceptAction.composite<A>(_:))
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))(v33, v28);
      v148 = &v33[*(int *)(sub_100008F88(&qword_10013F9A8) + 48)];
      v52 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000F2600);
      LOWORD(v131) = 256;
      v130 = 0;
      v53 = Text.init(_:tableName:bundle:comment:)(v52);
      v55 = v54;
      v57 = v56;
      v59 = v58 & 1;
      v60 = static Color.red.getter();
      v153 = v60;
      v61 = Text.foregroundStyle<A>(_:)(&v153, v53, v55, v59, v57, &type metadata for Color, &protocol witness table for Color);
      v63 = v62;
      v65 = v64;
      v67 = v66 & 1;
      sub_100044F90(v53, v55, v59);
      swift_release(v60);
      swift_bridgeObjectRelease(v57, v68, v69, v70, v71, v72, v73, v74);
      v75 = v145;
      *v145 = v61;
      v75[1] = v63;
      *((_BYTE *)v75 + 16) = v67;
      v75[3] = (uint64_t)v65;
      swift_storeEnumTagMultiPayload(v75, v143, 1);
      sub_1000452A8(v61, v63, v67);
      v76 = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
      v77 = sub_100068AB4();
      swift_bridgeObjectRetain(v65);
      v153 = v142;
      v154 = &type metadata for AirDropUIButtonStyle;
      v155 = v76;
      v156 = v77;
      v78 = swift_getOpaqueTypeConformance2(&v153, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v79 = (uint64_t)v146;
      _ConditionalContent<>.init(storage:)(v75, v144, &type metadata for Text, v78, &protocol witness table for Text);
      v80 = v151;
      sub_10000CC18(v79, (uint64_t)v151, &qword_10013F760);
      swift_storeEnumTagMultiPayload(v80, v150, 0);
      v81 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v80, v149, &type metadata for Text, v81, &protocol witness table for Text);
      sub_10000CC5C(v79, &qword_10013F760);
      sub_100044F90(v61, v63, v67);
      swift_bridgeObjectRelease(v65, v82, v83, v84, v85, v86, v87, v88);
      v89 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 8))(v148, v89);
      v90 = sub_100008F88(&qword_10013F9B0);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v90 - 8) + 8))(v51, v90);
    }
    else
    {
      v106 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001000F25E0);
      LOWORD(v131) = 256;
      v130 = 0;
      v107 = Text.init(_:tableName:bundle:comment:)(v106);
      v109 = v108;
      v111 = v110;
      v113 = v112 & 1;
      v114 = static Color.red.getter();
      v153 = v114;
      v147 = Text.foregroundStyle<A>(_:)(&v153, v107, v109, v113, v111, &type metadata for Color, &protocol witness table for Color);
      v148 = (char *)v115;
      v117 = v116;
      v119 = v118;
      sub_100044F90(v107, v109, v113);
      swift_release(v114);
      swift_bridgeObjectRelease(v111, v120, v121, v122, v123, v124, v125, v126);
      v127 = v150;
      v128 = v151;
      *v151 = v147;
      v128[1] = v117;
      *((_BYTE *)v128 + 16) = v119 & 1;
      v128[3] = (uint64_t)v148;
      swift_storeEnumTagMultiPayload(v128, v127, 1);
      v129 = sub_1000A4444();
      _ConditionalContent<>.init(storage:)(v128, v149, &type metadata for Text, v129, &protocol witness table for Text);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v51, v28);
    }
  }
}

uint64_t sub_1000A1940(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _TtC9AirDropUI33AirDropTransferSessionsController *v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  unint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  const char *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  Class *v22;
  Class v23;
  Class v24;
  Class v25;
  _TtC9AirDropUI33AirDropTransferSessionsController *v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;

  v2 = sub_100008F88(a2);
  SFAirDrop.AcceptAction.Single.id.getter(v2);
  v4 = v3;
  v5 = sub_100044F4C();
  v6 = (_TtC9AirDropUI33AirDropTransferSessionsController *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(45, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v5);
  swift_bridgeObjectRelease(v4, v7, v8, v9, v10, v11, v12, v13);
  v21 = *(_QWORD *)v6->connection;
  if (v21)
  {
    v22 = &v6->super.isa + 4 * v21;
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    v26 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v22[3];
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease(v6, v27, v28, v29, v30, v31, v32, v33);
    v34 = static String._fromSubstring(_:)(v23, v24, v25, v26);
    swift_bridgeObjectRelease(v26, v35, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    swift_bridgeObjectRelease(v6, v14, v15, v16, v17, v18, v19, v20);
    return 0x72616C75676552;
  }
  return v34;
}

uint64_t sub_1000A1A2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for AirDropAskRequestView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  v6 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_10001B390(a1, (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1001282C0, v12 + v4, v11 | 7);
  sub_1000A436C((uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  v14 = static Task<>.noThrow(priority:operation:)(v9, &unk_10013F7A0, v13, (char *)&type metadata for () + 8);
  swift_release(v14);
  swift_release(v13);
  return sub_10000CC5C((uint64_t)v9, &qword_10013BCC0);
}

uint64_t sub_1000A1B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = a2;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 24) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000A1BD0, v4, v5);
}

uint64_t sub_1000A1BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  swift_release(*(_QWORD *)(v0 + 24));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100009558(v1, (uint64_t)qword_10013F390);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Launching 'Ways to Get Help' URL", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(_QWORD *)(v6 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 20) + 8);
  swift_retain(v7);
  sub_100070188();
  v8 = swift_release(v7);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v8);
}

uint64_t sub_1000A1CE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD00000000000001DLL, 0x80000001000F25C0);
  *a1 = result;
  return result;
}

uint64_t sub_1000A1D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[3];

  v4 = sub_100008F88(&qword_10013FB38);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100008F88(&qword_10013FB40);
  __chkstk_darwin(v49, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v43 - v13;
  v15 = type metadata accessor for AirDropAskRequestView(0);
  v16 = v15;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = *(unsigned __int8 *)(a1 + *(int *)(v15 + 24));
  if (v24 == 1)
  {
    v25 = static Alignment.leading.getter(v15);
    v17 = 1;
    _FrameLayout.init(width:height:alignment:)(&v50, 0x4034000000000000, 0, 0, 1, v25, v26);
    v18 = v50;
    v19 = v51;
    v20 = v52;
    v21 = v53;
    v22 = v54;
    v23 = v55;
  }
  v43 = v18;
  v44 = v19;
  v45 = v20;
  v46 = v21;
  v47 = v22;
  v48 = v23;
  v27 = *(_QWORD *)(a1 + *(int *)(v16 + 20) + 8);
  v28 = type metadata accessor for AirDropTransferSession(0);
  v29 = sub_100008694((unint64_t *)&qword_10013C210, type metadata accessor for AirDropTransferSession, (uint64_t)&unk_1000EC8E4);
  v30 = swift_retain(v27);
  v31 = ObservedObject.init(wrappedValue:)(v30, v28, v29);
  v33 = v32;
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v34);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v35 = sub_100008F88(&qword_10013FB48);
  v36 = sub_1000A2038(a1, (uint64_t)&v7[*(int *)(v35 + 44)]);
  v37 = static Alignment.trailing.getter(v36);
  _FrameLayout.init(width:height:alignment:)(v56, 0, 1, 0, 1, v37, v38);
  sub_10000CC18((uint64_t)v7, (uint64_t)v10, &qword_10013FB38);
  v39 = &v10[*(int *)(v49 + 36)];
  v40 = v56[1];
  *(_OWORD *)v39 = v56[0];
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v56[2];
  sub_10000CC5C((uint64_t)v7, &qword_10013FB38);
  sub_10000CBD4((uint64_t)v10, (uint64_t)v14, &qword_10013FB40);
  sub_10000CC18((uint64_t)v14, (uint64_t)v10, &qword_10013FB40);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v43;
  *(_QWORD *)(a2 + 24) = v44;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v46;
  *(_QWORD *)(a2 + 48) = v47;
  *(_QWORD *)(a2 + 56) = v48;
  *(_BYTE *)(a2 + 64) = v24 ^ 1;
  *(_QWORD *)(a2 + 72) = v31;
  *(_QWORD *)(a2 + 80) = v33;
  *(_BYTE *)(a2 + 88) = v24;
  *(_OWORD *)(a2 + 96) = xmmword_1000E87C0;
  *(_BYTE *)(a2 + 112) = 1;
  v41 = sub_100008F88(&qword_10013FB50);
  sub_10000CC18((uint64_t)v10, a2 + *(int *)(v41 + 64), &qword_10013FB40);
  swift_retain(v33);
  sub_100046918(0, 1);
  sub_10000CC5C((uint64_t)v14, &qword_10013FB40);
  sub_10000CC5C((uint64_t)v10, &qword_10013FB40);
  swift_release(v33);
  return sub_1000469C8(0, 1);
}

uint64_t sub_1000A2038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;

  v4 = sub_100008F88(&qword_10013FB58);
  __chkstk_darwin(v4, v5);
  v77 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v63 - v9;
  v11 = type metadata accessor for Font.TextStyle(0);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for AirDropDescriptionView(0);
  __chkstk_darwin(v74, v15);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008F88((uint64_t *)&unk_100140F90);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v76 = (uint64_t)&v63 - v24;
  v25 = type metadata accessor for AirDropAskRequestView(0);
  v26 = v25;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v75 = *(unsigned __int8 *)(a1 + *(int *)(v25 + 24));
  if (v75 == 1)
  {
    v34 = static Alignment.leading.getter(v25);
    v27 = 1;
    _FrameLayout.init(width:height:alignment:)(&v79, 0, 1, 0x4039000000000000, 0, v34, v35);
    v28 = v79;
    v29 = v80;
    v30 = v81;
    v31 = v82;
    v32 = v83;
    v33 = v84;
  }
  v64 = v27;
  v66 = v28;
  v67 = v29;
  v68 = v30;
  v69 = v31;
  v70 = v32;
  v71 = v33;
  v36 = *(_QWORD *)(a1 + *(int *)(v26 + 20) + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDC98);
  v65 = a1;
  v38 = KeyPath;
  v39 = swift_getKeyPath(&unk_1000EDCC0);
  v40 = swift_retain(v36);
  static Published.subscript.getter(v78, v40, v38, v39);
  swift_release(v36);
  swift_release(v38);
  v41 = swift_release(v39);
  v43 = v78[0];
  v42 = v78[1];
  v45 = *(_QWORD *)(v36 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName);
  v44 = *(_QWORD *)(v36 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_senderName + 8);
  v78[0] = 0x402C000000000000;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v72 + 104))(v14, enum case for Font.TextStyle.subheadline(_:), v73, v41);
  v46 = sub_100043B68();
  swift_bridgeObjectRetain(v44);
  v47 = ScaledMetric.init(wrappedValue:relativeTo:)(v78, v14, &type metadata for CGFloat, v46);
  v48 = v74;
  v49 = &v17[*(int *)(v74 + 20)];
  *(_QWORD *)v49 = v43;
  *((_QWORD *)v49 + 1) = v42;
  v50 = &v17[*(int *)(v48 + 24)];
  *(_QWORD *)v50 = v45;
  *((_QWORD *)v50 + 1) = v44;
  *((_QWORD *)v50 + 2) = 0;
  *((_QWORD *)v50 + 3) = 0;
  v50[32] = 64;
  v51 = static Alignment.leading.getter(v47);
  sub_1000BFDC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v21, 0.0, 1, 0.0, 1, v51, v52);
  sub_10000C4C8((uint64_t)v17, type metadata accessor for AirDropDescriptionView);
  v53 = v76;
  v54 = sub_10000CBD4((uint64_t)v21, v76, (uint64_t *)&unk_100140F90);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v54);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v55 = sub_100008F88(&qword_10013FB60);
  sub_1000A248C(v65, (uint64_t)&v10[*(int *)(v55 + 44)]);
  sub_10000CC18(v53, (uint64_t)v21, (uint64_t *)&unk_100140F90);
  v56 = v77;
  sub_10000CC18((uint64_t)v10, v77, &qword_10013FB58);
  v57 = v64;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v57;
  v58 = v67;
  *(_QWORD *)(a2 + 16) = v66;
  *(_QWORD *)(a2 + 24) = v58;
  v59 = v69;
  *(_QWORD *)(a2 + 32) = v68;
  *(_QWORD *)(a2 + 40) = v59;
  v60 = v71;
  *(_QWORD *)(a2 + 48) = v70;
  *(_QWORD *)(a2 + 56) = v60;
  *(_BYTE *)(a2 + 64) = v75 ^ 1;
  v61 = sub_100008F88(&qword_10013FB68);
  sub_10000CC18((uint64_t)v21, a2 + *(int *)(v61 + 48), (uint64_t *)&unk_100140F90);
  sub_10000CC18(v56, a2 + *(int *)(v61 + 64), &qword_10013FB58);
  sub_10000CC5C((uint64_t)v10, &qword_10013FB58);
  sub_10000CC5C(v53, (uint64_t *)&unk_100140F90);
  sub_10000CC5C(v56, &qword_10013FB58);
  return sub_10000CC5C((uint64_t)v21, (uint64_t *)&unk_100140F90);
}

uint64_t sub_1000A248C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v100 = a1;
  v95 = a2;
  v98 = type metadata accessor for BorderedProminentButtonStyle(0);
  v92 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98, v2);
  v97 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AirDropAskRequestView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100008F88(&qword_100140040);
  v90 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103, v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100008F88(&qword_100140FD0);
  __chkstk_darwin(v102, v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100008F88(&qword_10013FB70);
  v91 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96, v15);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100008F88(&qword_10013FB78);
  __chkstk_darwin(v101, v18);
  v94 = (uint64_t)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v93 = (char *)&v81 - v22;
  __chkstk_darwin(v23, v24);
  v86 = (char *)&v81 - v25;
  __chkstk_darwin(v26, v27);
  v99 = (uint64_t)&v81 - v28;
  v29 = LocalizedStringKey.init(stringLiteral:)(0x656E696C636544, 0xE700000000000000);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v85 = v8;
  sub_10001B390(v100, (uint64_t)v8);
  v36 = *(unsigned __int8 *)(v5 + 80);
  v37 = (v36 + 16) & ~v36;
  v88 = v37 + v6;
  v89 = v37;
  v87 = v36 | 7;
  v38 = swift_allocObject(&unk_1001286F8, v37 + v6, v36 | 7);
  sub_1000A436C((uint64_t)v8, v38 + v37);
  v39 = Button<>.init(_:action:)(v29, v31, v33 & 1, v35, sub_1000A504C, v38);
  v40 = static Alignment.center.getter(v39);
  v42 = sub_1000BFF80(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v40, v41);
  v90 = *(_QWORD *)(v90 + 8);
  v43 = ((uint64_t (*)(char *, uint64_t, __n128))v90)(v11, v103, v42);
  v44 = v97;
  BorderedProminentButtonStyle.init()(v43);
  v45 = sub_1000A50C0();
  v84 = v45;
  v83 = sub_100008694(&qword_10013FB88, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v46 = v17;
  v47 = v98;
  View.buttonStyle<A>(_:)(v44, v102, v98, v45, v83);
  v92 = *(_QWORD *)(v92 + 8);
  ((void (*)(char *, uint64_t))v92)(v44, v47);
  v48 = sub_10000CC5C((uint64_t)v14, &qword_100140FD0);
  v49 = static Color.red.getter(v48);
  KeyPath = swift_getKeyPath(&unk_1000EDCE0);
  v51 = v91;
  v82 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v52 = (uint64_t)v86;
  v53 = v96;
  v82(v86, v17, v96);
  v54 = (uint64_t *)(v52 + *(int *)(v101 + 36));
  *v54 = KeyPath;
  v54[1] = v49;
  v91 = *(_QWORD *)(v51 + 8);
  ((void (*)(char *, uint64_t))v91)(v17, v53);
  sub_10000CBD4(v52, v99, &qword_10013FB78);
  v55 = LocalizedStringKey.init(stringLiteral:)(0x747065636341, 0xE600000000000000);
  v57 = v56;
  LOBYTE(v51) = v58;
  v60 = v59;
  v61 = (uint64_t)v85;
  sub_10001B390(v100, (uint64_t)v85);
  v62 = swift_allocObject(&unk_100128720, v88, v87);
  sub_1000A436C(v61, v62 + v89);
  v63 = Button<>.init(_:action:)(v55, v57, v51 & 1, v60, sub_1000A5214, v62);
  v64 = static Alignment.center.getter(v63);
  v66 = sub_1000BFF80(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v64, v65);
  v67 = ((uint64_t (*)(char *, uint64_t, __n128))v90)(v11, v103, v66);
  v68 = v97;
  BorderedProminentButtonStyle.init()(v67);
  v69 = v98;
  View.buttonStyle<A>(_:)(v68, v102, v98, v84, v83);
  ((void (*)(char *, uint64_t))v92)(v68, v69);
  v70 = sub_10000CC5C((uint64_t)v14, &qword_100140FD0);
  v71 = static Color.blue.getter(v70);
  v72 = swift_getKeyPath(&unk_1000EDCE0);
  v73 = (uint64_t)v93;
  v74 = v96;
  v82(v93, v46, v96);
  v75 = (uint64_t *)(v73 + *(int *)(v101 + 36));
  *v75 = v72;
  v75[1] = v71;
  ((void (*)(char *, uint64_t))v91)(v46, v74);
  sub_10000CBD4(v73, v52, &qword_10013FB78);
  v76 = v99;
  sub_10000CC18(v99, v73, &qword_10013FB78);
  v77 = v94;
  sub_10000CC18(v52, v94, &qword_10013FB78);
  v78 = v95;
  sub_10000CC18(v73, v95, &qword_10013FB78);
  v79 = sub_100008F88(&qword_10013FB90);
  sub_10000CC18(v77, v78 + *(int *)(v79 + 48), &qword_10013FB78);
  sub_10000CC5C(v52, &qword_10013FB78);
  sub_10000CC5C(v76, &qword_10013FB78);
  sub_10000CC5C(v77, &qword_10013FB78);
  return sub_10000CC5C(v73, &qword_10013FB78);
}

double sub_1000A2AC8(uint64_t a1, const char *a2, const char *a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t Strong;
  double result;
  id v21;

  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100009558(v8, (uint64_t)qword_10013F390);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a2, v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 20) + 8);
  v14 = qword_10013AD30;
  swift_retain(v13);
  if (v14 != -1)
    swift_once(&qword_10013AD30, sub_100069558);
  v15 = sub_100009558(v8, (uint64_t)qword_10013E210);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, a3, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  Strong = swift_unknownObjectWeakLoadStrong(v13 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_delegate);
  if (Strong)
  {
    v21 = (id)Strong;
    a4(v13);
    swift_release(v13);

  }
  else
  {
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000A2CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000A2D40, v3, v4);
}

uint64_t sub_1000A2D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AirDropAskRequestView(0) + 20) + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDC50);
  v4 = swift_getKeyPath(&unk_1000EDC78);
  *(_BYTE *)(v0 + 32) = 1;
  swift_retain(v2);
  static Published.subscript.setter(v0 + 32, v2, KeyPath, v4);
  swift_retain(v2);
  v5 = sub_100069F38();
  v6 = swift_release(v2);
  if (v5)
  {
    v7 = swift_getKeyPath(&unk_1000EDC50);
    v8 = swift_getKeyPath(&unk_1000EDC78);
    *(_BYTE *)(v0 + 32) = 1;
    static Published.subscript.setter(v0 + 32, v5, v7, v8);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v6);
}

uint64_t sub_1000A2E30(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[7] = a2;
  v3 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[12] = v6;
  v2[13] = v7;
  return swift_task_switch(sub_1000A2EC4, v6, v7);
}

uint64_t sub_1000A2EC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100008F88(&qword_10013CA50);
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.AcceptAction.Single.accept(with:)[1]);
  *(_QWORD *)(v0 + 112) = v2;
  *v2 = v0;
  v2[1] = sub_1000A2F44;
  return SFAirDrop.AcceptAction.Single.accept(with:)(*(_QWORD *)(v0 + 80), v1);
}

uint64_t sub_1000A2F44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1000A30B8;
  else
    v7 = sub_1000A2FCC;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000A2FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  swift_release(*(_QWORD *)(v0 + 88));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100009558(v1, (uint64_t)qword_10013F390);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "permissionRequest accepted", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A30B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;

  swift_release(*(_QWORD *)(v0 + 88));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013F390);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v11;
    *(_QWORD *)(v0 + 48) = sub_10003A834(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "permissionRequest accept failed {error: %s}", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A32B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[7] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[8] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[9] = v4;
  v2[10] = v5;
  return swift_task_switch(sub_1000A3324, v4, v5);
}

uint64_t sub_1000A3324()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100008F88(&qword_10013F7C0);
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.AcceptAction.Single.accept(with:)[1]);
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_1000A33A0;
  return SFAirDrop.AcceptAction.Single.accept(with:)(v0 + 104, v1);
}

uint64_t sub_1000A33A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000A34E8;
  else
    v4 = sub_1000A3404;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_1000A3404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100009558(v1, (uint64_t)qword_10013F390);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "permissionRequest accepted", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A34E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013F390);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v11;
    *(_QWORD *)(v0 + 48) = sub_10003A834(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "permissionRequest accept failed {error: %s}", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A36E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[7] = a2;
  v3 = type metadata accessor for SFAirDrop.ContactRequest(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[12] = v6;
  v2[13] = v7;
  return swift_task_switch(sub_1000A3774, v6, v7);
}

uint64_t sub_1000A3774()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100008F88(&qword_10013F9A0);
  SFAirDrop.AcceptAction.Single.defaultAnswer.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.AcceptAction.Single.accept(with:)[1]);
  *(_QWORD *)(v0 + 112) = v2;
  *v2 = v0;
  v2[1] = sub_1000A37F4;
  return SFAirDrop.AcceptAction.Single.accept(with:)(*(_QWORD *)(v0 + 80), v1);
}

uint64_t sub_1000A37F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 72);
  v4 = *(_QWORD *)(*v1 + 80);
  v6 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1000A5300;
  else
    v7 = sub_1000A52F4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
}

uint64_t sub_1000A387C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[7] = v1;
  v0[8] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
  v0[9] = v2;
  *v2 = v0;
  v2[1] = sub_1000A38E4;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_1000A38E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000A3A50;
  else
    v6 = sub_1000A396C;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000A396C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100009558(v1, (uint64_t)qword_10013F390);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "permissionRequest declined", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A3A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v21;

  swift_release(*(_QWORD *)(v0 + 64));
  if (qword_10013AD68 != -1)
    swift_once(&qword_10013AD68, sub_100092BDC);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_100009558(v2, (uint64_t)qword_10013F390);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v11;
    *(_QWORD *)(v0 + 48) = sub_10003A834(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v12, v13, v14, v15, v16, v17, v18, v19);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "permissionRequest decline failed {error: %s}", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A3C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;

  v33 = a2;
  v3 = sub_100008F88(&qword_10013FBA0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v32 - v10;
  v12 = sub_100008F88(&qword_10013FBA8);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v32 - v19;
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  v23 = v22((char *)&v32 - v19, a1, v12, v18);
  v24 = static Axis.Set.vertical.getter(v23);
  v35 = a1;
  v25 = sub_10000CB94(&qword_10013FBB0, &qword_10013FBA8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  ScrollView.init(_:showsIndicators:content:)(v24, 1, sub_1000A5284, v34, v12, v25);
  ((void (*)(char *, char *, uint64_t))v22)(v15, v20, v12);
  v26 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v26(v7, v11, v3);
  v27 = v33;
  ((void (*)(uint64_t, char *, uint64_t))v22)(v33, v15, v12);
  v28 = sub_100008F88(&qword_10013FBB8);
  v26((char *)(v27 + *(int *)(v28 + 48)), v7, v3);
  v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v11, v3);
  v30 = *(void (**)(char *, uint64_t))(v32 + 8);
  v30(v20, v12);
  v29(v7, v3);
  return ((uint64_t (*)(char *, uint64_t))v30)(v15, v12);
}

uint64_t sub_1000A3E40@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;

  *a2 = static Axis.Set.vertical.getter(a1);
  v4 = sub_100008F88(&qword_10013FB98);
  return sub_1000A3C4C(a1, (uint64_t)&a2[*(int *)(v4 + 44)]);
}

uint64_t sub_1000A3E94()
{
  return sub_1000A43DC(&qword_10013F4D8, &qword_10013F468, (void (*)(void))sub_1000A3EB8);
}

uint64_t sub_1000A3EB8()
{
  return sub_1000A43DC(&qword_10013F4E0, &qword_10013F4E8, (void (*)(void))sub_1000A3EDC);
}

unint64_t sub_1000A3EDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F4F0;
  if (!qword_10013F4F0)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100140FC0);
    sub_10000CB94(&qword_10013F4F8, &qword_10013F500, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F4F0);
  }
  return result;
}

unint64_t sub_1000A3F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F508;
  if (!qword_10013F508)
  {
    v1 = sub_10000950C(&qword_10013F490);
    sub_10000CB94(&qword_10013F510, &qword_10013F488, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F508);
  }
  return result;
}

uint64_t sub_1000A3FE4()
{
  return sub_10000C9D0(&qword_10013F518, &qword_10013F480, (void (*)(void))sub_1000A4008, (void (*)(void))sub_1000A4050);
}

uint64_t sub_1000A4008()
{
  return sub_10000C9D0(&qword_10013F520, &qword_10013F4C0, (void (*)(void))sub_1000A402C, (void (*)(void))sub_1000A3F60);
}

uint64_t sub_1000A402C()
{
  return sub_10000C9D0(&qword_10013F528, &qword_10013F4B0, (void (*)(void))sub_1000A4050, (void (*)(void))sub_1000A411C);
}

uint64_t sub_1000A4050()
{
  return sub_1000A43DC(&qword_10013F530, &qword_10013F4B8, (void (*)(void))sub_1000A4074);
}

uint64_t sub_1000A4074()
{
  return sub_1000A43DC(&qword_10013F538, &qword_10013F540, (void (*)(void))sub_1000A4098);
}

unint64_t sub_1000A4098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F548;
  if (!qword_10013F548)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100140FB0);
    sub_10000CB94(&qword_10013F550, &qword_10013F558, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F548);
  }
  return result;
}

uint64_t sub_1000A411C()
{
  return sub_1000A43DC(&qword_10013F560, &qword_10013F498, (void (*)(void))sub_1000A4140);
}

uint64_t sub_1000A4140()
{
  return sub_1000A43DC(&qword_10013F568, &qword_10013F570, (void (*)(void))sub_1000A4164);
}

unint64_t sub_1000A4164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F578;
  if (!qword_10013F578)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100140FA0);
    sub_10000CB94(&qword_10013F580, &qword_10013F588, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F578);
  }
  return result;
}

uint64_t sub_1000A41E8()
{
  return sub_10000C9D0(&qword_10013F590, &qword_10013F460, (void (*)(void))sub_1000A3E94, (void (*)(void))sub_1000A3F60);
}

unint64_t sub_1000A420C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F5F8;
  if (!qword_10013F5F8)
  {
    v1 = sub_10000950C(&qword_10013F5E8);
    sub_10000CB94(&qword_10013F600, &qword_10013F608, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F5F8);
  }
  return result;
}

unint64_t sub_1000A4290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F678;
  if (!qword_10013F678)
  {
    v1 = sub_10000950C(&qword_10013F660);
    sub_10000CB94(&qword_10013F680, &qword_10013F658, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_1000A4314();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F678);
  }
  return result;
}

unint64_t sub_1000A4314()
{
  unint64_t result;

  result = qword_10013F688;
  if (!qword_10013F688)
  {
    result = swift_getWitnessTable(&unk_1000EDD2C, &type metadata for ScrollIfRequiredModifier);
    atomic_store(result, (unint64_t *)&qword_10013F688);
  }
  return result;
}

uint64_t sub_1000A436C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirDropAskRequestView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A43B4@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  return sub_10009F2C0(a1, a2);
}

uint64_t sub_1000A43D0(uint64_t a1)
{
  return sub_1000A4E70(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000A0690);
}

uint64_t sub_1000A43DC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000950C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A4444()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10013F758;
  if (!qword_10013F758)
  {
    v1 = sub_10000950C(&qword_10013F760);
    v2[0] = sub_10000950C(&qword_10013F768);
    v2[1] = &type metadata for AirDropUIButtonStyle;
    v2[2] = sub_10000CB94(&qword_10013F770, &qword_10013F768, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100068AB4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F758);
  }
  return result;
}

uint64_t sub_1000A4510()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8) + 80);
  return sub_1000A1A2C(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000A4540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10013F79C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000104E4;
  return sub_1000A1B64(a1, v5);
}

uint64_t sub_1000A45B8()
{
  return sub_1000A4ED8(&qword_10013F7C0);
}

uint64_t sub_1000A45C4()
{
  return sub_1000A4938(&qword_10013F7C0, (uint64_t (*)(unint64_t))sub_10009CF90);
}

double sub_1000A45D8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1000A4FE8((void (*)(_OWORD *__return_ptr, _QWORD))sub_10009D964, a1).n128_u64[0];
  return result;
}

unint64_t sub_1000A45E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F7E0;
  if (!qword_10013F7E0)
  {
    v1 = sub_10000950C(&qword_10013F7D8);
    sub_10000C9D0(&qword_10013F7E8, &qword_10013F7F0, (void (*)(void))sub_1000A4670, (void (*)(void))sub_1000A46D4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F7E0);
  }
  return result;
}

unint64_t sub_1000A4670()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F7F8;
  if (!qword_10013F7F8)
  {
    v1 = sub_10000950C(&qword_10013F800);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F7F8);
  }
  return result;
}

unint64_t sub_1000A46D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F808;
  if (!qword_10013F808)
  {
    v1 = sub_10000950C(&qword_10013F810);
    sub_10000CB94(&qword_10013E110, &qword_10013E108, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F808);
  }
  return result;
}

uint64_t sub_1000A4760()
{
  return sub_100079928(&qword_10013F7C0);
}

uint64_t sub_1000A476C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013F7C0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10013F824);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100018F40;
  return sub_1000A32B8(a1, v5);
}

uint64_t sub_1000A47E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10013F834);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100018F40;
  return sub_1000A2CD4(v3);
}

uint64_t sub_1000A4848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000A48A8()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for SFAirDrop.DeclineAction(0);
  v1 = (_QWORD *)swift_task_alloc(dword_10013F844);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100018F40;
  return sub_1000A387C();
}

uint64_t sub_1000A4920(uint64_t a1)
{
  return sub_1000A4E70(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10009B7FC);
}

uint64_t sub_1000A492C()
{
  return sub_1000A4ED8(&qword_10013F7C0);
}

uint64_t sub_1000A4938(uint64_t *a1, uint64_t (*a2)(unint64_t))
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(a1) - 8) + 80);
  return a2(v2 + ((v6 + v7 + v8) & ~v8));
}

uint64_t sub_1000A49B0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 24);
  swift_retain(*(_QWORD *)(a1 + 8));
  v3 = v2;
  return a1;
}

uint64_t sub_1000A49E0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);

  swift_release(v2);
  return a1;
}

unint64_t sub_1000A4A14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F8C8;
  if (!qword_10013F8C8)
  {
    v1 = sub_10000950C(&qword_10013F8B8);
    sub_10000CB94(&qword_10013F8D0, &qword_10013F8D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013F8C8);
  }
  return result;
}

uint64_t sub_1000A4AA0(uint64_t a1)
{
  return sub_1000A4E70(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000A0FE8);
}

uint64_t sub_1000A4AAC()
{
  return sub_1000A4ED8(&qword_10013F9A0);
}

uint64_t sub_1000A4AB8()
{
  return sub_1000A4938(&qword_10013F9A0, (uint64_t (*)(unint64_t))sub_10009D474);
}

double sub_1000A4ACC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1000A4FE8((void (*)(_OWORD *__return_ptr, _QWORD))sub_10009E2BC, a1).n128_u64[0];
  return result;
}

uint64_t sub_1000A4AD8()
{
  return sub_100079928(&qword_10013F9A0);
}

uint64_t sub_1000A4AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013F9A0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10013F9C4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100018F40;
  return sub_1000A36E0(a1, v5);
}

uint64_t sub_1000A4B64(uint64_t a1)
{
  return sub_1000A4E70(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10009C154);
}

uint64_t sub_1000A4B70()
{
  return sub_1000A4ED8(&qword_10013F9A0);
}

unint64_t sub_1000A4B7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FA38;
  if (!qword_10013FA38)
  {
    v1 = sub_10000950C(&qword_10013FA28);
    sub_10000CB94(&qword_10013FA40, &qword_10013FA48, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FA38);
  }
  return result;
}

uint64_t sub_1000A4C08(uint64_t a1)
{
  return sub_1000A4E70(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10009FD38);
}

uint64_t sub_1000A4C14()
{
  return sub_1000A4ED8(&qword_10013CA50);
}

uint64_t sub_1000A4C20()
{
  return sub_1000A4938(&qword_10013CA50, (uint64_t (*)(unint64_t))sub_10009CAAC);
}

double sub_1000A4C34@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1000A4FE8((void (*)(_OWORD *__return_ptr, _QWORD))sub_10009D958, a1).n128_u64[0];
  return result;
}

uint64_t sub_1000A4C40()
{
  return sub_100079928(&qword_10013CA50);
}

uint64_t sub_1000A4C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100008F88(&qword_10013CA50) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10013FB0C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100018F40;
  return sub_1000A2E30(a1, v5);
}

uint64_t sub_1000A4CC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for AirDropAskRequestView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + v4);
  v11 = sub_100008F88(&qword_10013BDE8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v11) == 1)
  {
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v0 + v4, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (v4 + v5 + v8) & ~v8;
  swift_release(*(_QWORD *)((char *)v10 + *(int *)(v1 + 20) + 8));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v13, v6);
  return swift_deallocObject(v0, v13 + v9, v3 | v8 | 7);
}

uint64_t sub_1000A4DF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.DeclineAction(0) - 8) + 80);
  return sub_10009AC9C(v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1000A4E64(uint64_t a1)
{
  return sub_1000A4E70(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10009AEA4);
}

uint64_t sub_1000A4E70(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_1000A4ECC()
{
  return sub_1000A4ED8(&qword_10013CA50);
}

uint64_t sub_1000A4ED8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for AirDropAskRequestView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = sub_100008F88(a1);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = (_QWORD *)(v1 + v6);
  v13 = sub_100008F88(&qword_10013BDE8);
  if (swift_getEnumCaseMultiPayload(v1 + v6, v13) == 1)
  {
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v1 + v6, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (v6 + v7 + v10) & ~v10;
  swift_release(*(_QWORD *)((char *)v12 + *(int *)(v3 + 20) + 8));

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v15, v8);
  return swift_deallocObject(v1, v15 + v11, v5 | v10 | 7);
}

__n128 sub_1000A4FE8@<Q0>(void (*a1)(_OWORD *__return_ptr, _QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __n128 result;
  _OWORD v6[3];
  _BYTE v7[19];

  a1(v6, *(_QWORD *)(v2 + 24));
  v4 = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 32) = v6[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_DWORD *)(a2 + 63) = *(_DWORD *)&v7[15];
  result = (__n128)v6[1];
  *(_OWORD *)a2 = v6[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

double sub_1000A504C()
{
  return sub_1000A5068("User declined AirDrop", "Requested 'Cancel' on AirDropTransferSession", sub_100037BBC);
}

double sub_1000A5068(const char *a1, const char *a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AirDropAskRequestView(0) - 8) + 80);
  return sub_1000A2AC8(v3 + ((v7 + 16) & ~v7), a1, a2, a3);
}

unint64_t sub_1000A50C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FB80;
  if (!qword_10013FB80)
  {
    v1 = sub_10000950C(&qword_100140FD0);
    sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FB80);
  }
  return result;
}

uint64_t sub_1000A5150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AirDropAskRequestView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100008F88(&qword_10013BDE8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20) + 8));

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1000A5214()
{
  return sub_1000A5068("User accepted AirDrop", "Requested 'Accepted' on AirDropTransferSession", sub_100037E24);
}

ValueMetadata *type metadata accessor for ScrollIfRequiredModifier()
{
  return &type metadata for ScrollIfRequiredModifier;
}

uint64_t sub_1000A5240()
{
  return sub_10000C9D0(&qword_10013F598, &qword_10013F4C8, (void (*)(void))sub_1000A3FE4, (void (*)(void))sub_1000A41E8);
}

uint64_t sub_1000A5274(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114568, 1);
}

uint64_t sub_1000A5284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_100008F88(&qword_10013FBA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000A52C4()
{
  return sub_10000CB94(&qword_10013FBC0, &qword_10013FBC8, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
}

uint64_t sub_1000A5304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013FBD0);
  v1 = sub_100009558(v0, (uint64_t)qword_10013FBD0);
  if (qword_10013AD40 != -1)
    swift_once(&qword_10013AD40, sub_1000921BC);
  v2 = sub_100009558(v0, (uint64_t)qword_100147FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000A5394(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;

  v2 = v1;
  if (qword_10013AD70 != -1)
    swift_once(&qword_10013AD70, sub_1000A5304);
  v4 = type metadata accessor for Logger(0);
  sub_100009558(v4, (uint64_t)qword_10013FBD0);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v13 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "App delegate did finish launching: %@", v8, 0xCu);
    v11 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  NameDropIdentity.shared.unsafeMutableAddressor();
  v12 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v12, "addObserver:selector:name:object:", v2, "willEnterForeground", UIApplicationWillEnterForegroundNotification, 0);

}

id sub_1000A5720()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  NSString *v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v3 = type metadata accessor for AppDelegate();
  v4 = static CommandLine.unsafeArgv.getter();
  v5 = ((uint64_t (*)(void))static CommandLine.argc.getter)();
  v6 = static CommandLine.argc.getter(v5);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v8 = NSStringFromClass(ObjCClassFromMetadata);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  LODWORD(v8) = UIApplicationMain(_:_:_:_:)(v6, v4, 0, 0, v9, v11);
  swift_bridgeObjectRelease(v11, v12, v13, v14, v15, v16, v17, v18);
  exit((int)v8);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC9AirDropUI11AppDelegate);
}

unint64_t sub_1000A5808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FC80;
  if (!qword_10013FC80)
  {
    v1 = objc_opt_self(UISceneSession);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013FC80);
  }
  return result;
}

unint64_t sub_1000A5844()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10013FC88;
  if (!qword_10013FC88)
  {
    v1 = sub_1000A5808();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10013FC88);
  }
  return result;
}

void sub_1000A588C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  _TtC9AirDropUI33AirDropTransferSessionsController *v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  uint64_t v30;
  _TtC9AirDropUI33AirDropTransferSessionsController *v31;
  char v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  SEL v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  _TtC9AirDropUI33AirDropTransferSessionsController *v49;
  _TtC9AirDropUI33AirDropTransferSessionsController *v50;
  unint64_t v51;
  _TtC9AirDropUI33AirDropTransferSessionsController *v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  const char *v72;
  _TtC9AirDropUI33AirDropTransferSessionsController *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD v99[2];
  _QWORD v100[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000A5808();
    v5 = sub_1000A5844();
    v6 = Set.Iterator.init(_cocoa:)(v100, v3, v4, v5);
    v1 = v100[0];
    v96 = v100[1];
    v7 = v100[2];
    v8 = v100[3];
    v9 = v100[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v96 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v95 = (unint64_t)(v7 + 64) >> 6;
  v94 = (char *)&type metadata for Swift.AnyObject + 8;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v13 = (v9 - 1) & v9;
    v14 = __clz(__rbit64(v9)) | (v8 << 6);
    v15 = v8;
    goto LABEL_30;
  }
  v20 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v20 < v95)
    {
      v21 = *(_QWORD *)(v96 + 8 * v20);
      v15 = v8 + 1;
      if (v21)
        goto LABEL_29;
      v15 = v8 + 2;
      if (v8 + 2 >= v95)
        goto LABEL_43;
      v21 = *(_QWORD *)(v96 + 8 * v15);
      if (v21)
        goto LABEL_29;
      v15 = v8 + 3;
      if (v8 + 3 >= v95)
        goto LABEL_43;
      v21 = *(_QWORD *)(v96 + 8 * v15);
      if (v21)
      {
LABEL_29:
        v13 = (v21 - 1) & v21;
        v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_30:
        v19 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v14);
        if (v19)
        {
          while (1)
          {
            v97 = v13;
            v23 = v1;
            v24 = objc_msgSend(v19, "role", v94);
            v25 = (void *)static UISceneSessionRole.activityListItem.getter();
            v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v28 = v27;
            v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            v31 = v29;
            if (v26 == v30 && v28 == v29)
            {

              swift_bridgeObjectRelease_n(v28, 2);
            }
            else
            {
              v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);

              swift_bridgeObjectRelease(v28, v33, v34, v35, v36, v37, v38, v39);
              swift_bridgeObjectRelease(v31, v40, v41, v42, v43, v44, v45, v46);
              if ((v32 & 1) == 0)
              {
                sub_100028460(v23);

                return;
              }
            }
            v47 = objc_msgSend(v19, "persistentIdentifier");
            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
            v50 = v49;

            v99[0] = v48;
            v99[1] = v50;
            v51 = sub_100044F4C();
            v52 = (_TtC9AirDropUI33AirDropTransferSessionsController *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(58, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v51);
            swift_bridgeObjectRelease(v50, v53, v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)v52->connection < 2uLL)
            {
              sub_100028460(v23);

              swift_bridgeObjectRelease(v52, v87, v88, v89, v90, v91, v92, v93);
              return;
            }
            v60 = *(_QWORD *)v52->userNotificationsCenter;
            v61 = *(_QWORD *)v52->lockStateMonitor;
            v62 = *(_QWORD *)v52->contactIconProvider;
            v63 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)v52->appCornerIconProvider;
            swift_bridgeObjectRetain(v63);
            swift_bridgeObjectRelease(v52, v64, v65, v66, v67, v68, v69, v70);
            v71 = static String._fromSubstring(_:)(v60, v61, v62, v63);
            v73 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v72;
            swift_bridgeObjectRelease(v63, v72, v74, v75, v76, v77, v78, v79);
            if (qword_10013ABF0 != -1)
              swift_once(&qword_10013ABF0, sub_100028C8C);
            sub_100034960(v71, (unint64_t)v73);

            swift_bridgeObjectRelease(v73, v80, v81, v82, v83, v84, v85, v86);
            v8 = v15;
            v1 = v23;
            v9 = v97;
            if ((v23 & 0x8000000000000000) == 0)
              goto LABEL_11;
LABEL_13:
            v16 = __CocoaSet.Iterator.next()(v6);
            if (v16)
            {
              v17 = v16;
              v98 = v16;
              v18 = sub_1000A5808();
              swift_unknownObjectRetain(v17);
              swift_dynamicCast(v99, &v98, v94, v18, 7);
              v19 = (id)v99[0];
              swift_unknownObjectRelease(v17);
              v15 = v8;
              v13 = v9;
              if (v19)
                continue;
            }
            goto LABEL_43;
          }
        }
        goto LABEL_43;
      }
      v15 = v8 + 4;
      if (v8 + 4 < v95)
      {
        v21 = *(_QWORD *)(v96 + 8 * v15);
        if (!v21)
        {
          v22 = v8 + 5;
          while (v95 != v22)
          {
            v21 = *(_QWORD *)(v96 + 8 * v22++);
            if (v21)
            {
              v15 = v22 - 1;
              goto LABEL_29;
            }
          }
          goto LABEL_43;
        }
        goto LABEL_29;
      }
    }
LABEL_43:
    sub_100028460(v1);
    return;
  }
  __break(1u);
}

uint64_t sub_1000A5CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_10013FCA0);
  v1 = sub_100009558(v0, (uint64_t)qword_10013FCA0);
  if (qword_10013AD40 != -1)
    swift_once(&qword_10013AD40, sub_1000921BC);
  v2 = sub_100009558(v0, (uint64_t)qword_100147FE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_1000A5E78(void *a1, uint64_t a2, void *a3, const char *a4)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;

  v6 = qword_10013AD78;
  v13 = a3;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_10013AD78, sub_1000A5CEC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100009558(v8, (uint64_t)qword_10013FCA0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

}

id sub_1000A5FB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DefaultSceneDelegate()
{
  return objc_opt_self(_TtC9AirDropUI20DefaultSceneDelegate);
}

void sub_1000A6018(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  __n128 v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t KeyPath;
  uint64_t v40;
  void (*v41)(uint64_t *, _QWORD);
  _TtC9AirDropUI33AirDropTransferSessionsController **v42;
  _TtC9AirDropUI33AirDropTransferSessionsController **v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59[4];

  v2 = v1;
  v4 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_opt_self(UIWindowScene);
  v9 = swift_dynamicCastObjCClass(a1, v8);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = qword_10013AD78;
    v12 = a1;
    if (v11 != -1)
      swift_once(&qword_10013AD78, sub_1000A5CEC);
    v13 = type metadata accessor for Logger(0);
    sub_100009558(v13, (uint64_t)qword_10013FCA0);
    v14 = v12;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v57 = v7;
      v19 = v18;
      v59[0] = v18;
      v56 = v14;
      *(_DWORD *)v17 = 136315138;
      v20 = objc_msgSend(v10, "description", v17 + 4);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v58 = sub_10003A834(v21, (unint64_t)v23, v59);
      v14 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);

      swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "DefaultSceneDelegate: Received windowScene: %s. Hosting debugging UI for AirDropUI Launch Angel.", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      v31 = v19;
      v7 = v57;
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
    v33 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SFSecureWindow(0, v32)), "initWithWindowScene:", v10);
    v34 = objc_allocWithZone((Class)sub_100008F88(&qword_10013FCF0));
    v35 = (void *)UIHostingController.init(rootView:)(v34);
    objc_msgSend(v33, "setRootViewController:", v35);
    objc_msgSend(v33, "makeKeyAndVisible");
    v36 = *(void **)(v2 + OBJC_IVAR____TtC9AirDropUI20DefaultSceneDelegate_window);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC9AirDropUI20DefaultSceneDelegate_window) = v33;
    v37 = v33;

    if (qword_10013ABF0 != -1)
      swift_once(&qword_10013ABF0, sub_100028C8C);
    v38 = (void *)qword_100147DA0;
    sub_100072E4C();
    KeyPath = swift_getKeyPath(&unk_1000EDDC8);
    v40 = swift_getKeyPath(&unk_1000EDDF0);
    v41 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify(v59, v38, KeyPath, v40);
    v43 = v42;
    swift_bridgeObjectRelease(*v42, (SEL)v42, v44, v45, v46, v47, v48, v49);
    *v43 = (_TtC9AirDropUI33AirDropTransferSessionsController *)&_swiftEmptyDictionarySingleton;
    v41(v59, 0);
    swift_release(KeyPath);
    swift_release(v40);
    v50 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v7, 1, 1, v50);
    v51 = swift_allocObject(&unk_100128818, 24, 7);
    *(_QWORD *)(v51 + 16) = v38;
    v52 = swift_allocObject(&unk_100128840, 32, 7);
    *(_QWORD *)(v52 + 16) = &unk_10013FCF8;
    *(_QWORD *)(v52 + 24) = v51;
    v53 = v38;
    v54 = static Task<>.noThrow(priority:operation:)(v7, &unk_10013FD00, v52, (char *)&type metadata for () + 8);
    swift_release(v54);
    swift_release(v52);
    sub_1000A64B4((uint64_t)v7);

  }
}

uint64_t sub_1000A6420()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A6444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10013C9CC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000104E4;
  return sub_100029948(v2);
}

uint64_t sub_1000A6490()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A64B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008F88(&qword_10013BCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for NearbySharingInteractionViewController(uint64_t a1)
{
  return sub_1000138D0(a1, (uint64_t *)&unk_10013FD28, (uint64_t)&nominal type descriptor for NearbySharingInteractionViewController);
}

uint64_t sub_1000A6508(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = &unk_1000EDF28;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + qword_100148058);
}

uint64_t sub_1000A656C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_1000A65A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000CC5C(a1, &qword_10013BCC0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_100008F88(&qword_10013CBA0);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_1000A66DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_10000CC5C(a1, &qword_10013BCC0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1000A6810(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1000A6818()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000A6838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B58B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000A684C@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _QWORD v47[3];
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  __int128 v62;
  __int128 v63[6];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v39 = a2;
  v3 = sub_100008F88(&qword_1001406F8);
  __chkstk_darwin(v3, v4);
  v40 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v34 - v8;
  v10 = a1;
  sub_100057150(a1, (uint64_t)v63);
  sub_100057150(v63, (uint64_t)&v64);
  if (v68 < 0)
  {
    v68 &= ~0x8000000000000000;
    v43 = v66;
    v44 = v67;
    v45 = 0x4051000000000000;
    v46 = 0u;
    memset(v47, 0, sizeof(v47));
    v48 = 1;
    swift_bridgeObjectRetain(v67);
  }
  else
  {
    v12 = v64;
    v11 = v65;
    v13 = swift_bridgeObjectRetain(v65);
    v14 = static Alignment.center.getter(v13);
    _FrameLayout.init(width:height:alignment:)(&v58, 0x4051000000000000, 0, 0x4051000000000000, 0, v14, v15);
    v43 = v12;
    v44 = v11;
    v45 = v58;
    *(_QWORD *)&v46 = v59;
    *((_QWORD *)&v46 + 1) = v60;
    v47[0] = v61;
    *(_OWORD *)&v47[1] = v62;
    v48 = 0;
  }
  v16 = sub_100008F88((uint64_t *)&unk_100140700);
  v17 = sub_1000B9AE0();
  v18 = sub_10005718C();
  _ConditionalContent<>.init(storage:)(&v43, v16, &type metadata for DeviceAvatarView, v17, v18);
  v20 = v49;
  v19 = v50;
  v21 = v51;
  v22 = v52;
  v23 = v53;
  v24 = v54;
  v41 = v55;
  v42 = v56;
  v38 = v57;
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v25);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v26 = sub_100008F88(&qword_100140720);
  sub_1000A6B1C(v10, (uint64_t)&v9[*(int *)(v26 + 44)]);
  v27 = v40;
  sub_10000CC18((uint64_t)v9, v40, &qword_1001406F8);
  v28 = v20;
  v36 = v21;
  v37 = v20;
  v29 = v39;
  *v39 = v28;
  v29[1] = v19;
  v35 = v19;
  v29[2] = v21;
  v29[3] = v22;
  v29[4] = v23;
  v29[5] = v24;
  v30 = v42;
  v29[6] = v41;
  v29[7] = v30;
  *((_BYTE *)v29 + 64) = v38;
  v31 = sub_100008F88(&qword_100140728);
  sub_10000CC18(v27, (uint64_t)v29 + *(int *)(v31 + 48), &qword_1001406F8);
  v32 = v37;
  sub_1000571D0(v37, v19);
  sub_10000CC5C((uint64_t)v9, &qword_1001406F8);
  sub_10000CC5C(v27, &qword_1001406F8);
  return sub_1000571D8(v32, v35);
}

uint64_t sub_1000A6B1C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  _TtC9AirDropUI33AirDropTransferSessionsController *v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  SEL v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  SEL v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v79 = a2;
  v3 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v3, v4);
  v75 = (uint64_t *)((char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6, v7);
  v77 = (uint64_t)&v73 - v8;
  v76 = sub_100008F88(&qword_100140730);
  __chkstk_darwin(v76, v9);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v78 = (uint64_t)&v73 - v14;
  v15 = sub_100008F88(&qword_100140738);
  __chkstk_darwin(v15, v16);
  v74 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v73 - v20;
  *(_QWORD *)v21 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v21 + 1) = 0;
  v21[16] = 1;
  v73 = v21;
  v23 = sub_100008F88(&qword_100140740);
  sub_1000A6EF8(a1, (uint64_t)&v21[*(int *)(v23 + 44)]);
  v24 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001000F2840);
  v25 = Text.init(_:tableName:bundle:comment:)(v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = static Font.headline.getter();
  static Font.Weight.regular.getter();
  v33 = Font.weight(_:)(v32);
  swift_release(v32);
  v34 = Text.font(_:)(v33, v25, v27, v31, v29);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  swift_release(v33);
  LOBYTE(v33) = v38 & 1;
  sub_100044F90(v25, v27, v31);
  swift_bridgeObjectRelease(v29, v41, v42, v43, v44, v45, v46, v47);
  v49 = static Color.white.getter(v48);
  v80 = v49;
  v50 = Text.foregroundStyle<A>(_:)(&v80, v34, v36, v38 & 1, v40, &type metadata for Color, &protocol witness table for Color);
  v52 = v51;
  LOBYTE(v31) = v53;
  v55 = v54;
  sub_100044F90(v34, v36, v33);
  swift_release(v49);
  swift_bridgeObjectRelease(v40, v56, v57, v58, v59, v60, v61, v62);
  KeyPath = swift_getKeyPath(&unk_1000EE1B0);
  v64 = (uint64_t)v75;
  *v75 = KeyPath;
  v65 = sub_100008F88(&qword_1001403B0);
  swift_storeEnumTagMultiPayload(v64, v65, 0);
  v66 = v77;
  sub_1000B6B18(v64, v77, type metadata accessor for VibrancyEffectModifier);
  sub_10000C484(v66, (uint64_t)&v11[*(int *)(v76 + 36)], type metadata accessor for VibrancyEffectModifier);
  *(_QWORD *)v11 = v50;
  *((_QWORD *)v11 + 1) = v52;
  v11[16] = v31 & 1;
  *((_QWORD *)v11 + 3) = v55;
  sub_10000C4C8(v66, type metadata accessor for VibrancyEffectModifier);
  v67 = v78;
  sub_10000CBD4((uint64_t)v11, v78, &qword_100140730);
  v69 = (uint64_t)v73;
  v68 = v74;
  sub_10000CC18((uint64_t)v73, v74, &qword_100140738);
  sub_10000CC18(v67, (uint64_t)v11, &qword_100140730);
  v70 = v79;
  sub_10000CC18(v68, v79, &qword_100140738);
  v71 = sub_100008F88(&qword_100140748);
  sub_10000CC18((uint64_t)v11, v70 + *(int *)(v71 + 48), &qword_100140730);
  sub_10000CC5C(v67, &qword_100140730);
  sub_10000CC5C(v69, &qword_100140738);
  sub_10000CC5C((uint64_t)v11, &qword_100140730);
  return sub_10000CC5C(v68, &qword_100140738);
}

void sub_1000A6EF8(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  _TtC9AirDropUI33AirDropTransferSessionsController *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _TtC9AirDropUI33AirDropTransferSessionsController *v51;
  _TtC9AirDropUI33AirDropTransferSessionsController *v52;
  char v53;
  uint64_t v54;
  SEL v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _TtC9AirDropUI33AirDropTransferSessionsController *v67;
  char v68;
  SEL v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t KeyPath;
  uint64_t *v81;
  uint64_t *v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _TtC9AirDropUI33AirDropTransferSessionsController *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _TtC9AirDropUI33AirDropTransferSessionsController *v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _TtC9AirDropUI33AirDropTransferSessionsController *v125;
  _TtC9AirDropUI33AirDropTransferSessionsController *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _TtC9AirDropUI33AirDropTransferSessionsController *v132;
  _TtC9AirDropUI33AirDropTransferSessionsController *v133;
  char v134;
  uint64_t v135;
  SEL v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _TtC9AirDropUI33AirDropTransferSessionsController *v150;
  SEL v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  SEL v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  SEL v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  uint64_t *v176;
  char *v177;
  char *v178;
  _TtC9AirDropUI33AirDropTransferSessionsController *v179;
  uint64_t v180;
  uint64_t *v181;
  char *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201[6];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v198 = a2;
  v195 = sub_100008F88(&qword_100140750);
  __chkstk_darwin(v195, v3);
  v197 = (uint64_t *)((char *)&v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v196 = sub_100008F88(&qword_100140758);
  __chkstk_darwin(v196, v5);
  v7 = (uint64_t *)((char *)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v8, v9);
  v11 = (uint64_t *)((char *)&v176 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100008F88((uint64_t *)&unk_100140760);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v176 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100008F88((uint64_t *)&unk_100140C80);
  v17 = __chkstk_darwin(v185, v16);
  v190 = (uint64_t *)((char *)&v176 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v189 = type metadata accessor for Image.Scale(0, v17);
  v187 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189, v19);
  v186 = (char *)&v176 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100008F88(&qword_1001405A0);
  __chkstk_darwin(v184, v21);
  v23 = (char *)&v176 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100008F88(&qword_100140C90);
  __chkstk_darwin(v188, v24);
  v26 = (char *)&v176 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100008F88(&qword_100140770);
  __chkstk_darwin(v191, v27);
  v29 = (char *)&v176 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100008F88(&qword_100140778);
  __chkstk_darwin(v192, v30);
  v32 = (char *)&v176 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v176 - v35;
  sub_100057150(a1, (uint64_t)v201);
  sub_100057150(v201, (uint64_t)&v202);
  if (v206 < 0)
  {
    v206 &= ~0x8000000000000000;
    v120 = v203;
    v199 = v202;
    v200 = v203;
    v121 = sub_100044F4C();
    swift_bridgeObjectRetain(v120);
    v122 = Text.init<A>(_:)(&v199, &type metadata for String, v121);
    v124 = v123;
    v126 = v125;
    v128 = v127 & 1;
    LODWORD(v199) = static HierarchicalShapeStyle.primary.getter();
    v129 = Text.foregroundStyle<A>(_:)(&v199, v122, v124, v128, v126, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v131 = v130;
    v133 = v132;
    v135 = v134 & 1;
    sub_100044F90(v122, v124, v128);
    swift_bridgeObjectRelease(v126, v136, v137, v138, v139, v140, v141, v142);
    v144 = static Font.title2.getter(v143);
    static Font.Weight.semibold.getter();
    v145 = Font.weight(_:)(v144);
    swift_release(v144);
    v146 = Text.font(_:)(v145, v129, v131, v135, v133);
    v148 = v147;
    LOBYTE(v128) = v149;
    v105 = v150;
    swift_release(v145);
    sub_100044F90(v129, v131, v135);
    swift_bridgeObjectRelease(v133, v151, v152, v153, v154, v155, v156, v157);
    sub_1000452A8(v146, v148, v128 & 1);
    swift_bridgeObjectRetain(v105);
    sub_1000452A8(v146, v148, v128 & 1);
    swift_bridgeObjectRetain(v105);
    sub_100044F90(v146, v148, v128 & 1);
    swift_bridgeObjectRelease(v105, v158, v159, v160, v161, v162, v163, v164);
    v165 = v197;
    *v197 = v146;
    v165[1] = v148;
    *((_BYTE *)v165 + 16) = v128 & 1;
    v165[3] = (uint64_t)v105;
    v165[4] = 0;
    *((_BYTE *)v165 + 40) = 1;
    swift_storeEnumTagMultiPayload(v165, v195, 1);
    v166 = sub_100008F88(&qword_100140780);
    v167 = sub_10000CB94(&qword_100140788, &qword_100140758, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v168 = sub_10000CB94((unint64_t *)&unk_100140790, &qword_100140780, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v165, v196, v166, v167, v168);
    v117 = v146;
    v118 = v148;
    v119 = v128 & 1;
  }
  else
  {
    v37 = v205;
    v199 = v204;
    v200 = v205;
    v38 = sub_100044F4C();
    v177 = v26;
    v39 = v38;
    swift_bridgeObjectRetain(v37);
    v40 = Text.init<A>(_:)(&v199, &type metadata for String, v39);
    v42 = v41;
    v183 = v7;
    v44 = v43;
    v181 = v11;
    v46 = v45 & 1;
    LODWORD(v199) = static HierarchicalShapeStyle.primary.getter();
    v47 = Text.foregroundStyle<A>(_:)(&v199, v40, v42, v46, v44, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v182 = v32;
    v48 = v47;
    v194 = v36;
    v50 = v49;
    v178 = v29;
    v52 = v51;
    v176 = (uint64_t *)v23;
    v54 = v53 & 1;
    sub_100044F90(v40, v42, v46);
    swift_bridgeObjectRelease(v44, v55, v56, v57, v58, v59, v60, v61);
    v63 = static Font.title2.getter(v62);
    static Font.Weight.semibold.getter();
    v64 = Font.weight(_:)(v63);
    swift_release(v63);
    v65 = Text.font(_:)(v64, v48, v50, v54, v52);
    v179 = v67;
    v180 = v66;
    LOBYTE(v63) = v68;
    swift_release(v64);
    v193 = v63 & 1;
    sub_100044F90(v48, v50, v54);
    swift_bridgeObjectRelease(v52, v69, v70, v71, v72, v73, v74, v75);
    v76 = Image.init(systemName:)(0x7269632E6F666E69, 0xEB00000000656C63);
    v78 = v186;
    v77 = v187;
    v79 = v189;
    (*(void (**)(char *, _QWORD, uint64_t))(v187 + 104))(v186, enum case for Image.Scale.large(_:), v189);
    KeyPath = swift_getKeyPath(&unk_1000EE3A8);
    v81 = v190;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))((char *)v190 + *(int *)(v185 + 28), v78, v79);
    *v81 = KeyPath;
    v82 = v176;
    sub_10000CC18((uint64_t)v81, (uint64_t)v176 + *(int *)(v184 + 36), (uint64_t *)&unk_100140C80);
    *v82 = v76;
    swift_retain(v76);
    sub_10000CC5C((uint64_t)v81, (uint64_t *)&unk_100140C80);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    v83 = swift_release(v76);
    static SymbolRenderingMode.monochrome.getter(v83);
    v84 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v15, 0, 1, v84);
    v85 = swift_getKeyPath(&unk_1000EE680);
    v86 = (uint64_t)v177;
    v87 = (uint64_t *)&v177[*(int *)(v188 + 36)];
    v88 = sub_100008F88(&qword_100140CB0);
    sub_10000CC18((uint64_t)v15, (uint64_t)v87 + *(int *)(v88 + 28), (uint64_t *)&unk_100140760);
    *v87 = v85;
    sub_10000CC18((uint64_t)v82, v86, &qword_1001405A0);
    sub_10000CC5C((uint64_t)v15, (uint64_t *)&unk_100140760);
    sub_10000CC5C((uint64_t)v82, &qword_1001405A0);
    v90 = static Color.white.getter(v89);
    v91 = (uint64_t)v178;
    sub_10000CC18(v86, (uint64_t)v178, &qword_100140C90);
    *(_QWORD *)(v91 + *(int *)(v191 + 36)) = v90;
    sub_10000CC5C(v86, &qword_100140C90);
    v92 = swift_getKeyPath(&unk_1000EE1B0);
    v93 = (uint64_t)v181;
    *v181 = v92;
    v94 = sub_100008F88(&qword_1001403B0);
    swift_storeEnumTagMultiPayload(v93, v94, 0);
    v95 = (uint64_t)v194;
    sub_1000B6B18(v93, (uint64_t)&v194[*(int *)(v192 + 36)], type metadata accessor for VibrancyEffectModifier);
    sub_10000CBD4(v91, v95, &qword_100140770);
    v96 = v95;
    v97 = (uint64_t)v182;
    sub_10000CC18(v96, (uint64_t)v182, &qword_100140778);
    v98 = (uint64_t)v183;
    v99 = v65;
    *v183 = v65;
    v100 = v179;
    v101 = v180;
    *(_QWORD *)(v98 + 8) = v180;
    LOBYTE(v87) = v193;
    *(_BYTE *)(v98 + 16) = v193;
    *(_QWORD *)(v98 + 24) = v100;
    *(_QWORD *)(v98 + 32) = 0;
    *(_BYTE *)(v98 + 40) = 1;
    v102 = sub_100008F88(&qword_1001407A0);
    v103 = v97;
    sub_10000CC18(v97, v98 + *(int *)(v102 + 64), &qword_100140778);
    sub_1000452A8(v99, v101, (char)v87);
    swift_bridgeObjectRetain(v100);
    v104 = v101;
    sub_1000452A8(v99, v101, (char)v87);
    v105 = v100;
    swift_bridgeObjectRetain(v100);
    sub_10000CC5C(v103, &qword_100140778);
    sub_100044F90(v99, v104, (char)v87);
    swift_bridgeObjectRelease(v100, v106, v107, v108, v109, v110, v111, v112);
    v113 = v197;
    sub_10000CC18(v98, (uint64_t)v197, &qword_100140758);
    swift_storeEnumTagMultiPayload(v113, v195, 0);
    v114 = sub_100008F88(&qword_100140780);
    v115 = sub_10000CB94(&qword_100140788, &qword_100140758, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v116 = sub_10000CB94((unint64_t *)&unk_100140790, &qword_100140780, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v113, v196, v114, v115, v116);
    sub_10000CC5C(v98, &qword_100140758);
    sub_10000CC5C((uint64_t)v194, &qword_100140778);
    v117 = v99;
    v118 = v104;
    v119 = v193;
  }
  sub_100044F90(v117, v118, v119);
  swift_bridgeObjectRelease(v105, v169, v170, v171, v172, v173, v174, v175);
}

uint64_t sub_1000A7888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13[6];
  int v14;

  v3 = sub_100008F88(&qword_1001406E0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_OWORD *)(v1 + 80);
  v13[4] = *(_OWORD *)(v1 + 64);
  v13[5] = v7;
  v14 = *(_DWORD *)(v1 + 96);
  v8 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v8;
  v9 = *(_OWORD *)(v1 + 48);
  v13[2] = *(_OWORD *)(v1 + 32);
  v13[3] = v9;
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v10);
  *((_QWORD *)v6 + 1) = 0x402E000000000000;
  v6[16] = 0;
  v11 = sub_100008F88(&qword_1001406E8);
  sub_1000A684C(v13, (uint64_t *)&v6[*(int *)(v11 + 44)]);
  sub_10000CC18((uint64_t)v6, a1, &qword_1001406E0);
  *(_BYTE *)(a1 + *(int *)(sub_100008F88(&qword_1001406F0) + 36)) = 0;
  return sub_10000CC5C((uint64_t)v6, &qword_1001406E0);
}

uint64_t sub_1000A796C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  double v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  __n128 *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t KeyPath;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v97;
  uint64_t v98;
  _TtC9AirDropUI33AirDropTransferSessionsController *v99;
  __n128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD v110[12];
  uint64_t v111;
  uint64_t v112;
  char v113;
  _TtC9AirDropUI33AirDropTransferSessionsController *v114;
  char v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;

  v109 = a2;
  v108 = sub_100008F88(&qword_100140800);
  __chkstk_darwin(v108, v3);
  v106 = (uint64_t)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v102, v5);
  v100 = (__n128 *)((char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = sub_100008F88(&qword_100140808);
  __chkstk_darwin(v104, v7);
  v101 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100008F88((uint64_t *)&unk_1001407D0);
  __chkstk_darwin(v103, v14);
  v16 = (_OWORD *)((char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = sub_100008F88(&qword_1001407C0);
  v18 = __chkstk_darwin(v107, v17);
  v105 = (uint64_t)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v18);
  v20 = Text.init(_:)(v13);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Font.headline.getter();
  static Font.Weight.semibold.getter();
  v28 = Font.weight(_:)(v27);
  swift_release(v27);
  v98 = Text.font(_:)(v28, v20, v22, v26, v24);
  v99 = v29;
  v31 = v30;
  LOBYTE(v13) = v32;
  swift_release(v28);
  LOBYTE(v28) = v13 & 1;
  sub_100044F90(v20, v22, v26);
  swift_bridgeObjectRelease(v24, v33, v34, v35, v36, v37, v38, v39);
  LOBYTE(v20) = static Edge.Set.vertical.getter();
  v40 = EdgeInsets.init(_all:)(14.0);
  v42 = v98;
  v41 = v99;
  v111 = v98;
  v112 = v31;
  v113 = v28;
  v114 = v99;
  v115 = v20;
  v116 = v40;
  v117 = v43;
  v118 = v44;
  v119 = v45;
  v120 = 0;
  v47 = static Alignment.center.getter(v46);
  sub_1000C014C(0.0, 1, 0.0, 1, 230.0, 0, 0.0, 1, v110, 0.0, 1, 0.0, 1, v47, v48);
  sub_100044F90(v42, v31, v28);
  swift_bridgeObjectRelease(v41, v49, v50, v51, v52, v53, v54, v55);
  v129 = v110[8];
  v130 = v110[9];
  v131 = v110[10];
  v132 = v110[11];
  v125 = v110[4];
  v126 = v110[5];
  v127 = v110[6];
  v128 = v110[7];
  v123 = v110[2];
  v124 = v110[3];
  v121 = v110[0];
  v122 = v110[1];
  v56 = v100;
  v57 = (char *)v100 + *(int *)(v102 + 20);
  v58 = enum case for RoundedCornerStyle.continuous(_:);
  v59 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v57, v58, v59);
  __asm { FMOV            V0.2D, #30.0 }
  *v56 = _Q0;
  v65 = static Color.white.getter(_Q0);
  v66 = v101;
  sub_10000C484((uint64_t)v56, v101, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v67 = v104;
  *(_QWORD *)(v66 + *(int *)(v104 + 52)) = v65;
  *(_WORD *)(v66 + *(int *)(v67 + 56)) = 256;
  v68 = sub_10000C4C8((uint64_t)v56, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v69 = static Alignment.center.getter(v68);
  v71 = v70;
  v72 = v106;
  sub_10000CC18(v66, v106, &qword_100140808);
  v73 = (uint64_t *)(v72 + *(int *)(v108 + 36));
  *v73 = v69;
  v73[1] = v71;
  sub_10000CC18(v72, (uint64_t)v16 + *(int *)(v103 + 36), &qword_100140800);
  v74 = v130;
  v16[8] = v129;
  v16[9] = v74;
  v75 = v132;
  v16[10] = v131;
  v16[11] = v75;
  v76 = v126;
  v16[4] = v125;
  v16[5] = v76;
  v77 = v128;
  v16[6] = v127;
  v16[7] = v77;
  v78 = v122;
  *v16 = v121;
  v16[1] = v78;
  v79 = v124;
  v16[2] = v123;
  v16[3] = v79;
  sub_1000B9E2C((uint64_t)&v121);
  sub_10000CC5C(v72, &qword_100140800);
  sub_10000CC5C(v66, &qword_100140808);
  v80 = sub_1000B9E68((uint64_t)&v121);
  LOBYTE(v69) = static Edge.Set.bottom.getter(v80);
  v81 = EdgeInsets.init(_all:)(2.0);
  v83 = v82;
  v85 = v84;
  v87 = v86;
  v88 = v105;
  sub_10000CC18((uint64_t)v16, v105, (uint64_t *)&unk_1001407D0);
  v89 = v88 + *(int *)(v107 + 36);
  *(_BYTE *)v89 = v69;
  *(double *)(v89 + 8) = v81;
  *(_QWORD *)(v89 + 16) = v83;
  *(_QWORD *)(v89 + 24) = v85;
  *(_QWORD *)(v89 + 32) = v87;
  *(_BYTE *)(v89 + 40) = 0;
  v90 = sub_10000CC5C((uint64_t)v16, (uint64_t *)&unk_1001407D0);
  v91 = static Color.black.getter(v90);
  v92 = Color.opacity(_:)(0.85);
  swift_release(v91);
  KeyPath = swift_getKeyPath(&unk_1000EE3D8);
  v94 = v109;
  sub_10000CC18(v88, v109, &qword_1001407C0);
  v95 = (uint64_t *)(v94 + *(int *)(sub_100008F88(&qword_1001407A8) + 36));
  *v95 = KeyPath;
  v95[1] = v92;
  return sub_10000CC5C(v88, &qword_1001407C0);
}

uint64_t sub_1000A7EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(a1, a2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C484(v2, (uint64_t)v5, type metadata accessor for ShareableContentActionButton);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_100129000, v7 + v4, v6 | 7);
  sub_1000B6B18((uint64_t)v5, v8 + v7, type metadata accessor for ShareableContentActionButton);
  v13 = v2;
  v9 = sub_100008F88(&qword_1001407A8);
  v10 = sub_1000B9C2C();
  return Button.init(action:label:)(sub_1000B9BE0, v8, sub_1000B9C24, v12, v9, v10);
}

uint64_t sub_1000A7F9C@<X0>(void *a1@<X8>)
{
  return sub_1000A8450((_QWORD *(*)(_OWORD *__return_ptr))sub_1000A7FA8, a1);
}

void sub_1000A7FA8(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t (*v18)(char *, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  _BYTE v77[7];
  char v78;
  _BYTE v79[7];
  char v80;
  int v81;
  __int16 v82;
  char v83;
  _BYTE v84[7];
  char v85;
  _BYTE v86[7];
  char v87;
  _BYTE v88[7];
  char v89;
  _BYTE v90[7];
  char v91;
  int v92;
  __int16 v93;
  char v94;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Image.ResizingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Image.init(systemName:)(0x322E6E6F73726570, 0xED00006C6C69662ELL);
  v16 = enum case for Image.ResizingMode.stretch(_:);
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v58(v14, enum case for Image.ResizingMode.stretch(_:), v10);
  v65 = Image.resizable(capInsets:resizingMode:)(v14, v15, 0.0, 0.0, 0.0, 0.0);
  v17 = swift_release(v15);
  v18 = *(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8);
  v19 = v18(v14, v10, v17);
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v66, 0x4034000000000000, 0, 0x4034000000000000, 0, v20, v21);
  v64 = v66;
  v60 = v67;
  v63 = v68;
  v59 = v69;
  v62 = v70;
  v61 = v71;
  v22 = String.LocalizationValue.init(stringLiteral:)(0x524F42414C4C4F43, 0xEB00000000455441);
  static Locale.current.getter(v22);
  v72 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v5, 0, 0, 256);
  v73 = v23;
  v24 = sub_100044F4C();
  v25 = Text.init<A>(_:)(&v72, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = Image.init(systemName:)(0xD000000000000017, 0x80000001000F2860);
  v58(v14, v16, v10);
  v33 = Image.resizable(capInsets:resizingMode:)(v14, v32, 0.0, 0.0, 0.0, 0.0);
  v34 = swift_release(v32);
  v35 = v18(v14, v10, v34);
  v36 = static Alignment.center.getter(v35);
  _FrameLayout.init(width:height:alignment:)(&v72, 0x402E000000000000, 0, 0x402E000000000000, 0, v36, v37);
  v38 = v72;
  v39 = v74;
  v94 = 1;
  v40 = v60;
  v91 = v60;
  v41 = v59;
  v89 = v59;
  v87 = v31;
  v85 = 1;
  v83 = 1;
  v80 = v73;
  v78 = v75;
  *(_DWORD *)(a1 + 18) = v92;
  *(_WORD *)(a1 + 22) = v93;
  v42 = *(_DWORD *)v90;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v90[3];
  *(_DWORD *)(a1 + 33) = v42;
  v43 = *(_DWORD *)v88;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v88[3];
  *(_DWORD *)(a1 + 49) = v43;
  v44 = *(_DWORD *)v86;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a1 + 89) = v44;
  LOBYTE(v44) = v85;
  v45 = *(_DWORD *)v84;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a1 + 113) = v45;
  LOBYTE(v45) = v83;
  v46 = v81;
  *(_WORD *)(a1 + 142) = v82;
  *(_DWORD *)(a1 + 138) = v46;
  LOBYTE(v46) = v80;
  v47 = *(_DWORD *)v79;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v79[3];
  *(_DWORD *)(a1 + 153) = v47;
  LOBYTE(v47) = v78;
  v48 = *(_DWORD *)v77;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v77[3];
  *(_DWORD *)(a1 + 169) = v48;
  v49 = v65;
  *(_QWORD *)a1 = v65;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v64;
  *(_BYTE *)(a1 + 32) = v40;
  *(_QWORD *)(a1 + 40) = v63;
  *(_BYTE *)(a1 + 48) = v41;
  *(_QWORD *)(a1 + 56) = v62;
  *(_QWORD *)(a1 + 64) = v61;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v27;
  *(_BYTE *)(a1 + 88) = v31;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = v44;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = v45;
  *(_QWORD *)(a1 + 144) = v38;
  *(_BYTE *)(a1 + 152) = v46;
  *(_QWORD *)(a1 + 160) = v39;
  *(_BYTE *)(a1 + 168) = v47;
  *(_OWORD *)(a1 + 176) = v76;
  v50 = v49;
  swift_retain(v49);
  sub_1000452A8(v25, v27, v31);
  swift_bridgeObjectRetain(v29);
  sub_100044F90(v25, v27, v31);
  swift_release(v50);
  swift_bridgeObjectRelease(v29, v51, v52, v53, v54, v55, v56, v57);
}

uint64_t sub_1000A8428@<X0>(void *a1@<X8>)
{
  return sub_1000A8450((_QWORD *(*)(_OWORD *__return_ptr))sub_1000A7FA8, a1);
}

uint64_t sub_1000A8444@<X0>(void *a1@<X8>)
{
  return sub_1000A8450((_QWORD *(*)(_OWORD *__return_ptr))sub_1000A8758, a1);
}

uint64_t sub_1000A8450@<X0>(_QWORD *(*a1)(_OWORD *__return_ptr)@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[23];
  _OWORD v52[11];
  __int128 v53;
  _BYTE v54[199];
  char v55;
  _BYTE v56[328];
  _QWORD v57[48];

  v36 = a2;
  v3 = sub_100008F88(&qword_100140810);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7, v8);
  v10 = (_OWORD *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = static VerticalAlignment.center.getter(v11);
  v13 = a1(v52);
  *(_OWORD *)&v54[135] = v52[8];
  *(_OWORD *)&v54[151] = v52[9];
  *(_OWORD *)&v54[167] = v52[10];
  *(_OWORD *)&v54[183] = v53;
  *(_OWORD *)&v54[71] = v52[4];
  *(_OWORD *)&v54[87] = v52[5];
  *(_OWORD *)&v54[103] = v52[6];
  *(_OWORD *)&v54[119] = v52[7];
  *(_OWORD *)&v54[7] = v52[0];
  *(_OWORD *)&v54[23] = v52[1];
  *(_OWORD *)&v54[39] = v52[2];
  *(_OWORD *)&v54[55] = v52[3];
  v49 = *(_OWORD *)&v54[144];
  v50 = *(_OWORD *)&v54[160];
  *(_OWORD *)v51 = *(_OWORD *)&v54[176];
  v45 = *(_OWORD *)&v54[80];
  v46 = *(_OWORD *)&v54[96];
  v47 = *(_OWORD *)&v54[112];
  v48 = *(_OWORD *)&v54[128];
  v41 = *(_OWORD *)&v54[16];
  v42 = *(_OWORD *)&v54[32];
  v43 = *(_OWORD *)&v54[48];
  v44 = *(_OWORD *)&v54[64];
  v55 = 1;
  v37 = v12;
  v38 = 0;
  v39 = 1;
  *(_QWORD *)&v51[15] = *((_QWORD *)&v53 + 1);
  v40 = *(_OWORD *)v54;
  v14 = static Alignment.center.getter(v13);
  sub_1000BF96C(0.0, 1, 0.0, 1, 203.0, 0, 0.0, 1, (uint64_t)v57, 0.0, 1, 0.0, 1, v14, v15);
  sub_1000B9EA4((uint64_t)v52);
  v16 = memcpy(v56, v57, sizeof(v56));
  LOBYTE(v12) = static Edge.Set.all.getter(v16);
  v17 = EdgeInsets.init(_all:)(10.0);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  memcpy(v57, v56, 0x148uLL);
  LOBYTE(v57[41]) = v12;
  *(double *)&v57[42] = v17;
  v57[43] = v19;
  v57[44] = v21;
  v57[45] = v23;
  LOBYTE(v57[46]) = 0;
  v24 = (char *)v10 + *(int *)(v7 + 20);
  v25 = enum case for RoundedCornerStyle.continuous(_:);
  v26 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  __asm { FMOV            V0.2D, #30.0 }
  *v10 = _Q0;
  sub_10000C484((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v6[*(int *)(v3 + 36)] = 0;
  v32 = sub_100008F88(&qword_100140818);
  v33 = v36;
  sub_10000CC18((uint64_t)v6, (uint64_t)v36 + *(int *)(v32 + 36), &qword_100140810);
  memcpy(v33, v57, 0x171uLL);
  sub_1000B9F0C((uint64_t)v57);
  sub_10000CC5C((uint64_t)v6, &qword_100140810);
  sub_10000C4C8((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_1000B9F74((uint64_t)v56);
}

void sub_1000A8758(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t (*v18)(char *, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  _TtC9AirDropUI33AirDropTransferSessionsController *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  SEL v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  _BYTE v77[7];
  char v78;
  _BYTE v79[7];
  char v80;
  int v81;
  __int16 v82;
  char v83;
  _BYTE v84[7];
  char v85;
  _BYTE v86[7];
  char v87;
  _BYTE v88[7];
  char v89;
  _BYTE v90[7];
  char v91;
  int v92;
  __int16 v93;
  char v94;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Image.ResizingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Image.init(systemName:)(0x6C6C69662E636F64, 0xE800000000000000);
  v16 = enum case for Image.ResizingMode.stretch(_:);
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v58(v14, enum case for Image.ResizingMode.stretch(_:), v10);
  v65 = Image.resizable(capInsets:resizingMode:)(v14, v15, 0.0, 0.0, 0.0, 0.0);
  v17 = swift_release(v15);
  v18 = *(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8);
  v19 = v18(v14, v10, v17);
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(&v66, 0x402E000000000000, 0, 0x402E000000000000, 0, v20, v21);
  v64 = v66;
  v60 = v67;
  v63 = v68;
  v59 = v69;
  v62 = v70;
  v61 = v71;
  v22 = String.LocalizationValue.init(stringLiteral:)(0x504F435F444E4553, 0xE900000000000059);
  static Locale.current.getter(v22);
  v72 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v5, 0, 0, 256);
  v73 = v23;
  v24 = sub_100044F4C();
  v25 = Text.init<A>(_:)(&v72, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = Image.init(systemName:)(0xD000000000000017, 0x80000001000F2860);
  v58(v14, v16, v10);
  v33 = Image.resizable(capInsets:resizingMode:)(v14, v32, 0.0, 0.0, 0.0, 0.0);
  v34 = swift_release(v32);
  v35 = v18(v14, v10, v34);
  v36 = static Alignment.center.getter(v35);
  _FrameLayout.init(width:height:alignment:)(&v72, 0x402E000000000000, 0, 0x402E000000000000, 0, v36, v37);
  v38 = v72;
  v39 = v74;
  v94 = 1;
  v40 = v60;
  v91 = v60;
  v41 = v59;
  v89 = v59;
  v87 = v31;
  v85 = 1;
  v83 = 1;
  v80 = v73;
  v78 = v75;
  *(_DWORD *)(a1 + 18) = v92;
  *(_WORD *)(a1 + 22) = v93;
  v42 = *(_DWORD *)v90;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v90[3];
  *(_DWORD *)(a1 + 33) = v42;
  v43 = *(_DWORD *)v88;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v88[3];
  *(_DWORD *)(a1 + 49) = v43;
  v44 = *(_DWORD *)v86;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v86[3];
  *(_DWORD *)(a1 + 89) = v44;
  LOBYTE(v44) = v85;
  v45 = *(_DWORD *)v84;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a1 + 113) = v45;
  LOBYTE(v45) = v83;
  v46 = v81;
  *(_WORD *)(a1 + 142) = v82;
  *(_DWORD *)(a1 + 138) = v46;
  LOBYTE(v46) = v80;
  v47 = *(_DWORD *)v79;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v79[3];
  *(_DWORD *)(a1 + 153) = v47;
  LOBYTE(v47) = v78;
  v48 = *(_DWORD *)v77;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v77[3];
  *(_DWORD *)(a1 + 169) = v48;
  v49 = v65;
  *(_QWORD *)a1 = v65;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v64;
  *(_BYTE *)(a1 + 32) = v40;
  *(_QWORD *)(a1 + 40) = v63;
  *(_BYTE *)(a1 + 48) = v41;
  *(_QWORD *)(a1 + 56) = v62;
  *(_QWORD *)(a1 + 64) = v61;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v27;
  *(_BYTE *)(a1 + 88) = v31;
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = v44;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = v45;
  *(_QWORD *)(a1 + 144) = v38;
  *(_BYTE *)(a1 + 152) = v46;
  *(_QWORD *)(a1 + 160) = v39;
  *(_BYTE *)(a1 + 168) = v47;
  *(_OWORD *)(a1 + 176) = v76;
  v50 = v49;
  swift_retain(v49);
  sub_1000452A8(v25, v27, v31);
  swift_bridgeObjectRetain(v29);
  sub_100044F90(v25, v27, v31);
  swift_release(v50);
  swift_bridgeObjectRelease(v29, v51, v52, v53, v54, v55, v56, v57);
}

uint64_t sub_1000A8BC8@<X0>(void *a1@<X8>)
{
  return sub_1000A8450((_QWORD *(*)(_OWORD *__return_ptr))sub_1000A8758, a1);
}

uint64_t sub_1000A8BE4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v2 = v1;
  v81 = a1;
  v82 = sub_100008F88(&qword_100140820);
  __chkstk_darwin(v82, v3);
  v5 = (uint64_t *)((char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_100008F88(&qword_100140828);
  __chkstk_darwin(v79, v6);
  v80 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100008F88(&qword_10013B5E8);
  __chkstk_darwin(v76, v8);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v75, v11);
  v13 = (_OWORD *)((char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Image.ResizingMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100008F88(&qword_100140830);
  __chkstk_darwin(v74, v19);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100008F88(&qword_100140838);
  __chkstk_darwin(v77, v22);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100008F88(&qword_100140840);
  __chkstk_darwin(v78, v25);
  __chkstk_darwin(v26, v27);
  v31 = (void *)v2[6];
  if (v31)
  {
    v72 = (uint64_t)&v71 - v29;
    v32 = v30;
    v73 = v31;
    v34 = Image.init(uiImage:)(v33);
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v14);
    v35 = Image.resizable(capInsets:resizingMode:)(v18, v34, 0.0, 0.0, 0.0, 0.0);
    v36 = swift_release(v34);
    (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v18, v14, v36);
    v37 = (char *)v13 + *(int *)(v75 + 20);
    v38 = enum case for RoundedCornerStyle.continuous(_:);
    v39 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v37, v38, v39);
    __asm { FMOV            V0.2D, #15.0 }
    *v13 = _Q0;
    sub_10000C484((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v10[*(int *)(v76 + 36)] = 256;
    sub_10000CC18((uint64_t)v10, (uint64_t)&v21[*(int *)(v74 + 36)], &qword_10013B5E8);
    *(_QWORD *)v21 = v35;
    *((_QWORD *)v21 + 1) = 0;
    *((_WORD *)v21 + 8) = 1;
    swift_retain(v35);
    sub_10000CC5C((uint64_t)v10, &qword_10013B5E8);
    sub_10000C4C8((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release(v35);
    LOBYTE(v37) = static Edge.Set.all.getter(v45);
    v46 = EdgeInsets.init(_all:)(1.0);
    v48 = v47;
    v50 = v49;
    v52 = v51;
    sub_10000CC18((uint64_t)v21, (uint64_t)v24, &qword_100140830);
    v53 = &v24[*(int *)(v77 + 36)];
    *v53 = (char)v37;
    *((double *)v53 + 1) = v46;
    *((_QWORD *)v53 + 2) = v48;
    *((_QWORD *)v53 + 3) = v50;
    *((_QWORD *)v53 + 4) = v52;
    v53[40] = 0;
    v54 = sub_10000CC5C((uint64_t)v21, &qword_100140830);
    v55 = static Color.black.getter(v54);
    v56 = Color.opacity(_:)(0.2);
    swift_release(v55);
    sub_10000CC18((uint64_t)v24, v32, &qword_100140838);
    v57 = v78;
    v58 = v32 + *(int *)(v78 + 36);
    *(_QWORD *)v58 = v56;
    *(_OWORD *)(v58 + 8) = xmmword_1000EDE30;
    *(_QWORD *)(v58 + 24) = 0x4010000000000000;
    sub_10000CC5C((uint64_t)v24, &qword_100140838);
    v59 = &qword_100140840;
    v60 = v72;
    sub_10000CBD4(v32, v72, &qword_100140840);
    v61 = v80;
    sub_10000CC18(v60, v80, &qword_100140840);
    swift_storeEnumTagMultiPayload(v61, v79, 0);
    v62 = sub_1000B9FDC();
    v63 = sub_10000CB94(&qword_100140878, &qword_100140820, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v61, v57, v82, v62, v63);

    v64 = v60;
  }
  else
  {
    *v5 = static Alignment.center.getter(v28);
    v5[1] = v65;
    v66 = sub_100008F88(&qword_100140848);
    sub_1000A9154(v2, (uint64_t)v5 + *(int *)(v66 + 44));
    v59 = &qword_100140820;
    v67 = v80;
    sub_10000CC18((uint64_t)v5, v80, &qword_100140820);
    swift_storeEnumTagMultiPayload(v67, v79, 1);
    v68 = sub_1000B9FDC();
    v69 = sub_10000CB94(&qword_100140878, &qword_100140820, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v67, v78, v82, v68, v69);
    v64 = (uint64_t)v5;
  }
  return sub_10000CC5C(v64, v59);
}

uint64_t sub_1000A9154@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t KeyPath;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _TtC9AirDropUI33AirDropTransferSessionsController *v197;
  _TtC9AirDropUI33AirDropTransferSessionsController *v198;
  char v199;
  uint64_t v200;
  double v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  _TtC9AirDropUI33AirDropTransferSessionsController *v211;
  _TtC9AirDropUI33AirDropTransferSessionsController *v212;
  SEL v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  SEL v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  id v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  __int128 v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  _OWORD v285[2];
  uint64_t v286;
  _OWORD v287[3];
  _OWORD v288[5];
  _OWORD v289[6];

  v282 = a1;
  v269 = a2;
  v2 = sub_100008F88((uint64_t *)&unk_100140760);
  __chkstk_darwin(v2, v3);
  v239 = (char *)&v238 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = sub_100008F88((uint64_t *)&unk_100140C80);
  v6 = __chkstk_darwin(v257, v5);
  v256 = (uint64_t *)((char *)&v238 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Image.Scale(0, v6);
  v254 = *(_QWORD *)(v8 - 8);
  v255 = v8;
  __chkstk_darwin(v8, v9);
  v253 = (char *)&v238 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = sub_100008F88(&qword_1001405A0);
  __chkstk_darwin(v252, v11);
  v238 = (uint64_t *)((char *)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v240 = sub_100008F88(&qword_100140C90);
  __chkstk_darwin(v240, v13);
  v241 = (char *)&v238 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = sub_100008F88((uint64_t *)&unk_100140880);
  __chkstk_darwin(v243, v15);
  v242 = (uint64_t)&v238 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_100008F88(&qword_100140F70);
  __chkstk_darwin(v258, v17);
  v244 = (uint64_t)&v238 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v245 = (uint64_t)&v238 - v21;
  v264 = sub_100008F88(&qword_100140890);
  __chkstk_darwin(v264, v22);
  v266 = (uint64_t *)((char *)&v238 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v260 = sub_100008F88(&qword_100140898);
  __chkstk_darwin(v260, v24);
  v259 = (uint64_t)&v238 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = sub_100008F88((uint64_t *)&unk_1001408A0);
  __chkstk_darwin(v265, v26);
  v262 = (char *)&v238 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100008F88((uint64_t *)&unk_100140CC0);
  __chkstk_darwin(v28, v29);
  v263 = (char *)&v238 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100008F88(&qword_1001408B0);
  __chkstk_darwin(v31, v32);
  v248 = (char *)&v238 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = sub_100008F88(&qword_1001408B8);
  __chkstk_darwin(v247, v34);
  v250 = (uint64_t *)((char *)&v238 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v261 = sub_100008F88(&qword_1001408C0);
  __chkstk_darwin(v261, v36);
  v249 = (uint64_t)&v238 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v39);
  v251 = (uint64_t)&v238 - v40;
  v41 = sub_100008F88(&qword_1001408C8);
  __chkstk_darwin(v41, v42);
  v268 = (char *)&v238 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v45);
  v267 = (uint64_t)&v238 - v46;
  v280 = sub_100008F88(&qword_1001401A8);
  v278 = *(_QWORD *)(v280 - 8);
  __chkstk_darwin(v280, v47);
  v276 = (char *)&v238 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v274 = sub_100008F88(&qword_1001401B0);
  __chkstk_darwin(v274, v49);
  v51 = (char *)&v238 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for RoundedRectangle(0);
  v271 = v52;
  __chkstk_darwin(v52, v53);
  v55 = (_OWORD *)((char *)&v238 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  v272 = sub_100008F88(&qword_1001408D0);
  __chkstk_darwin(v272, v56);
  v58 = (char *)&v238 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = sub_100008F88(&qword_1001408D8);
  __chkstk_darwin(v275, v59);
  v273 = (char *)&v238 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = sub_100008F88(&qword_1001408E0);
  __chkstk_darwin(v279, v61);
  v277 = (uint64_t)&v238 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v281 = sub_100008F88(&qword_1001408E8);
  __chkstk_darwin(v281, v63);
  v284 = (uint64_t)&v238 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65, v66);
  v283 = (uint64_t)&v238 - v67;
  v68 = (char *)v55 + *(int *)(v52 + 20);
  v69 = enum case for RoundedCornerStyle.continuous(_:);
  v70 = type metadata accessor for RoundedCornerStyle(0);
  v71 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 104);
  v71(v68, v69, v70);
  __asm { FMOV            V0.2D, #15.0 }
  v270 = _Q0;
  *v55 = _Q0;
  v246 = (id)objc_opt_self(UIColor);
  v77 = Color.init(_:)(objc_msgSend(v246, "tertiaryLabelColor"));
  v78 = Color.opacity(_:)(0.5);
  swift_release(v77);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v285, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  sub_10000C484((uint64_t)v55, (uint64_t)v58, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v79 = *(double *)v285 * 0.5;
  v80 = (uint64_t)&v58[*(int *)(v272 + 68)];
  sub_10000C484((uint64_t)v55, v80, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(double *)(v80 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v79;
  v81 = v80 + *(int *)(sub_100008F88(&qword_1001408F0) + 36);
  v82 = v285[1];
  *(_OWORD *)v81 = v285[0];
  *(_OWORD *)(v81 + 16) = v82;
  *(_QWORD *)(v81 + 32) = v286;
  v83 = sub_100008F88(&qword_1001408F8);
  *(_QWORD *)(v80 + *(int *)(v83 + 52)) = v78;
  *(_WORD *)(v80 + *(int *)(v83 + 56)) = 256;
  v84 = static Alignment.center.getter(v83);
  v86 = v85;
  v87 = (uint64_t *)(v80 + *(int *)(sub_100008F88(&qword_100140900) + 36));
  *v87 = v84;
  v87[1] = v86;
  sub_10000C4C8((uint64_t)v55, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v88 = v70;
  v89 = v284;
  v71(&v51[*(int *)(v271 + 20)], v69, v88);
  *(_OWORD *)v51 = v270;
  v90 = &v51[*(int *)(v274 + 36)];
  v289[0] = xmmword_1000EDE40;
  v289[1] = xmmword_1000EDE50;
  v289[2] = xmmword_1000EDE60;
  v289[3] = xmmword_1000EDE70;
  v274 = xmmword_1000EDE80;
  v289[4] = xmmword_1000EDE80;
  v91 = v276;
  View._colorMatrix(_:)(v289, &type metadata for _BackdropEffectPlaceholder, &protocol witness table for _BackdropEffectPlaceholder);
  v92 = v278;
  v93 = v280;
  (*(void (**)(char *, char *, uint64_t))(v278 + 16))(v90, v91, v280);
  v94 = &v90[*(int *)(sub_100008F88(&qword_100140570) + 36)];
  *(_QWORD *)v94 = 0x4069000000000000;
  v94[8] = 0;
  v95 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v91, v93);
  v96 = static Alignment.center.getter(v95);
  v98 = v97;
  v99 = (uint64_t)v273;
  v100 = (uint64_t)&v273[*(int *)(v275 + 36)];
  sub_10000CC18((uint64_t)v51, v100, &qword_1001401B0);
  v101 = (uint64_t *)(v100 + *(int *)(sub_100008F88(&qword_100140438) + 36));
  *v101 = v96;
  v101[1] = v98;
  sub_10000CC18((uint64_t)v58, v99, &qword_1001408D0);
  sub_10000CC5C((uint64_t)v51, &qword_1001401B0);
  v102 = sub_10000CC5C((uint64_t)v58, &qword_1001408D0);
  v103 = static Alignment.center.getter(v102);
  _FrameLayout.init(width:height:alignment:)(v287, 0x4072700000000000, 0, 0x4078400000000000, 0, v103, v104);
  v105 = v277;
  sub_10000CC18(v99, v277, &qword_1001408D8);
  v106 = (_OWORD *)(v105 + *(int *)(v279 + 36));
  v107 = v287[1];
  *v106 = v287[0];
  v106[1] = v107;
  v106[2] = v287[2];
  v108 = sub_10000CC5C(v99, &qword_1001408D8);
  v109 = static Color.black.getter(v108);
  v110 = Color.opacity(_:)(0.15);
  swift_release(v109);
  sub_10000CC18(v105, v89, &qword_1001408E0);
  v111 = v89 + *(int *)(v281 + 36);
  *(_QWORD *)v111 = v110;
  *(_OWORD *)(v111 + 8) = xmmword_1000EDE30;
  *(_QWORD *)(v111 + 24) = 0x4010000000000000;
  sub_10000CC5C(v105, &qword_1001408E0);
  sub_10000CBD4(v89, v283, &qword_1001408E8);
  v112 = v282[3];
  v113 = v282[4];
  v114 = v282;
  sub_10000904C(v282, v112);
  if (sub_1000790FC(v112, v113))
  {
    v115 = Image.init(systemName:)(6516580, 0xE300000000000000);
    v288[0] = xmmword_1000EDE90;
    v288[1] = xmmword_1000EDEA0;
    v288[2] = xmmword_1000EDEB0;
    v288[3] = xmmword_1000EDEC0;
    v288[4] = v274;
    v116 = (uint64_t)v248;
    View._colorMatrix(_:)(v288, &type metadata for _BackdropEffectPlaceholder, &protocol witness table for _BackdropEffectPlaceholder);
    v117 = v250;
    sub_10000CC18(v116, (uint64_t)v250 + *(int *)(v247 + 36), &qword_1001408B0);
    *v117 = v115;
    v118 = sub_10000CC5C(v116, &qword_1001408B0);
    v119 = static Font.Weight.medium.getter(v118);
    v120 = enum case for Font.Design.default(_:);
    v121 = type metadata accessor for Font.Design(0);
    v122 = *(_QWORD *)(v121 - 8);
    v123 = (uint64_t)v263;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 104))(v263, v120, v121);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v122 + 56))(v123, 0, 1, v121);
    v124 = static Font.system(size:weight:design:)(*(_QWORD *)&v119, 0, v123, 60.0);
    sub_10000CC5C(v123, (uint64_t *)&unk_100140CC0);
    KeyPath = swift_getKeyPath(&unk_1000EE298);
    v126 = v249;
    sub_10000CC18((uint64_t)v117, v249, &qword_1001408B8);
    v127 = v261;
    v128 = (uint64_t *)(v126 + *(int *)(v261 + 36));
    *v128 = KeyPath;
    v128[1] = v124;
    sub_10000CC5C((uint64_t)v117, &qword_1001408B8);
    v129 = &qword_1001408C0;
    v130 = v251;
    sub_10000CBD4(v126, v251, &qword_1001408C0);
    v131 = v259;
    sub_10000CC18(v130, v259, &qword_1001408C0);
    swift_storeEnumTagMultiPayload(v131, v260, 0);
    v132 = sub_1000BA1B8();
    v133 = sub_1000BA2C0();
    v134 = (uint64_t)v262;
    _ConditionalContent<>.init(storage:)(v131, v127, v258, v132, v133);
    v135 = v266;
    sub_10000CC18(v134, (uint64_t)v266, (uint64_t *)&unk_1001408A0);
    swift_storeEnumTagMultiPayload(v135, v264, 0);
    v136 = sub_10000C9D0(&qword_100140918, (uint64_t *)&unk_1001408A0, (void (*)(void))sub_1000BA1B8, (void (*)(void))sub_1000BA2C0);
    v137 = (uint64_t)v268;
    _ConditionalContent<>.init(storage:)(v135, v265, &type metadata for Text, v136, &protocol witness table for Text);
    v138 = v134;
LABEL_5:
    sub_10000CC5C(v138, (uint64_t *)&unk_1001408A0);
    sub_10000CC5C(v130, v129);
    v182 = sub_100008F88(&qword_100140908);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v182 - 8) + 56))(v137, 0, 1, v182);
    v183 = v267;
    sub_10000CBD4(v137, v267, &qword_1001408C8);
    v184 = v269;
    goto LABEL_6;
  }
  v139 = v252;
  v140 = v253;
  v141 = v256;
  v142 = v257;
  v143 = v254;
  v144 = v255;
  v145 = v114[3];
  v146 = v114[4];
  sub_10000904C(v114, v145);
  v147 = sub_100077FFC(v145, v146);
  if (v148)
  {
    v149 = Image.init(systemName:)(v147, v148);
    (*(void (**)(char *, _QWORD, uint64_t))(v143 + 104))(v140, enum case for Image.Scale.large(_:), v144);
    v150 = swift_getKeyPath(&unk_1000EE3A8);
    (*(void (**)(char *, char *, uint64_t))(v143 + 16))((char *)v141 + *(int *)(v142 + 28), v140, v144);
    *v141 = v150;
    v151 = *(int *)(v139 + 36);
    v152 = v238;
    sub_10000CC18((uint64_t)v141, (uint64_t)v238 + v151, (uint64_t *)&unk_100140C80);
    *v152 = v149;
    swift_retain(v149);
    sub_10000CC5C((uint64_t)v141, (uint64_t *)&unk_100140C80);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v140, v144);
    v153 = swift_release(v149);
    v154 = (uint64_t)v239;
    static SymbolRenderingMode.monochrome.getter(v153);
    v155 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v155 - 8) + 56))(v154, 0, 1, v155);
    v156 = swift_getKeyPath(&unk_1000EE680);
    v157 = (uint64_t)v241;
    v158 = (uint64_t *)&v241[*(int *)(v240 + 36)];
    v159 = sub_100008F88(&qword_100140CB0);
    sub_10000CC18(v154, (uint64_t)v158 + *(int *)(v159 + 28), (uint64_t *)&unk_100140760);
    *v158 = v156;
    sub_10000CC18((uint64_t)v152, v157, &qword_1001405A0);
    sub_10000CC5C(v154, (uint64_t *)&unk_100140760);
    v160 = sub_10000CC5C((uint64_t)v152, &qword_1001405A0);
    v161 = static Font.Weight.medium.getter(v160);
    v162 = enum case for Font.Design.default(_:);
    v163 = type metadata accessor for Font.Design(0);
    v164 = *(_QWORD *)(v163 - 8);
    v165 = (uint64_t)v263;
    (*(void (**)(char *, uint64_t, uint64_t))(v164 + 104))(v263, v162, v163);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v164 + 56))(v165, 0, 1, v163);
    v166 = static Font.system(size:weight:design:)(*(_QWORD *)&v161, 0, v165, 60.0);
    sub_10000CC5C(v165, (uint64_t *)&unk_100140CC0);
    v167 = swift_getKeyPath(&unk_1000EE298);
    v168 = v242;
    sub_10000CC18(v157, v242, &qword_100140C90);
    v169 = (uint64_t *)(v168 + *(int *)(v243 + 36));
    *v169 = v167;
    v169[1] = v166;
    sub_10000CC5C(v157, &qword_100140C90);
    v170 = Color.init(_:)(objc_msgSend(v246, "quaternaryLabelColor"));
    v171 = swift_getKeyPath(&unk_1000EE3D8);
    v172 = v244;
    sub_10000CC18(v168, v244, (uint64_t *)&unk_100140880);
    v173 = v258;
    v174 = (uint64_t *)(v172 + *(int *)(v258 + 36));
    *v174 = v171;
    v174[1] = v170;
    sub_10000CC5C(v168, (uint64_t *)&unk_100140880);
    v129 = &qword_100140F70;
    v175 = v172;
    v130 = v245;
    sub_10000CBD4(v175, v245, &qword_100140F70);
    v176 = v259;
    sub_10000CC18(v130, v259, &qword_100140F70);
    swift_storeEnumTagMultiPayload(v176, v260, 1);
    v177 = sub_1000BA1B8();
    v178 = sub_1000BA2C0();
    v179 = (uint64_t)v262;
    _ConditionalContent<>.init(storage:)(v176, v261, v173, v177, v178);
    v180 = v266;
    sub_10000CC18(v179, (uint64_t)v266, (uint64_t *)&unk_1001408A0);
    swift_storeEnumTagMultiPayload(v180, v264, 0);
    v181 = sub_10000C9D0(&qword_100140918, (uint64_t *)&unk_1001408A0, (void (*)(void))sub_1000BA1B8, (void (*)(void))sub_1000BA2C0);
    v137 = (uint64_t)v268;
    _ConditionalContent<>.init(storage:)(v180, v265, &type metadata for Text, v181, &protocol witness table for Text);
    v138 = v179;
    goto LABEL_5;
  }
  v189 = v114[3];
  v190 = v114[4];
  sub_10000904C(v114, v189);
  v191 = sub_1000784B0(v189, v190);
  if (v192)
  {
    *(_QWORD *)&v288[0] = v191;
    *((_QWORD *)&v288[0] + 1) = v192;
    v193 = sub_100044F4C();
    v194 = Text.init<A>(_:)(v288, &type metadata for String, v193);
    v196 = v195;
    v198 = v197;
    v200 = v199 & 1;
    v201 = ((double (*)(void))static Font.Weight.medium.getter)();
    v202 = enum case for Font.Design.default(_:);
    v203 = type metadata accessor for Font.Design(0);
    v204 = *(_QWORD *)(v203 - 8);
    v205 = (uint64_t)v263;
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 104))(v263, v202, v203);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v204 + 56))(v205, 0, 1, v203);
    v206 = static Font.system(size:weight:design:)(*(_QWORD *)&v201, 0, v205, 55.0);
    sub_10000CC5C(v205, (uint64_t *)&unk_100140CC0);
    v207 = Text.font(_:)(v206, v194, v196, v200, v198);
    v209 = v208;
    LOBYTE(v205) = v210;
    v212 = v211;
    swift_release(v206);
    LOBYTE(v206) = v205 & 1;
    sub_100044F90(v194, v196, v200);
    swift_bridgeObjectRelease(v198, v213, v214, v215, v216, v217, v218, v219);
    v220 = Color.init(_:)(objc_msgSend(v246, "quaternaryLabelColor"));
    v221 = Text.foregroundColor(_:)(v220, v207, v209, v205 & 1, v212);
    v223 = v222;
    LOBYTE(v200) = v224;
    v226 = v225;
    swift_release(v220);
    sub_100044F90(v207, v209, v206);
    swift_bridgeObjectRelease(v212, v227, v228, v229, v230, v231, v232, v233);
    v234 = v266;
    *v266 = v221;
    v234[1] = v223;
    *((_BYTE *)v234 + 16) = v200 & 1;
    v234[3] = v226;
    swift_storeEnumTagMultiPayload(v234, v264, 1);
    v235 = sub_10000C9D0(&qword_100140918, (uint64_t *)&unk_1001408A0, (void (*)(void))sub_1000BA1B8, (void (*)(void))sub_1000BA2C0);
    v183 = v267;
    _ConditionalContent<>.init(storage:)(v234, v265, &type metadata for Text, v235, &protocol witness table for Text);
    v236 = sub_100008F88(&qword_100140908);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v236 - 8) + 56))(v183, 0, 1, v236);
  }
  else
  {
    v237 = sub_100008F88(&qword_100140908);
    v183 = v267;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v237 - 8) + 56))(v267, 1, 1, v237);
  }
  v137 = (uint64_t)v268;
  v184 = v269;
LABEL_6:
  v186 = v283;
  v185 = v284;
  sub_10000CC18(v283, v284, &qword_1001408E8);
  sub_10000CC18(v183, v137, &qword_1001408C8);
  sub_10000CC18(v185, v184, &qword_1001408E8);
  v187 = sub_100008F88(&qword_100140910);
  sub_10000CC18(v137, v184 + *(int *)(v187 + 48), &qword_1001408C8);
  sub_10000CC5C(v183, &qword_1001408C8);
  sub_10000CC5C(v186, &qword_1001408E8);
  sub_10000CC5C(v137, &qword_1001408C8);
  return sub_10000CC5C(v185, &qword_1001408E8);
}

Swift::Int sub_1000AA4A4@<X0>(Swift::Int *a1@<X8>)
{
  unsigned __int8 *v1;
  Swift::UInt v3;
  Swift::Int result;
  _QWORD v5[9];

  v3 = *v1;
  Hasher.init(_seed:)(v5, 0);
  Hasher._combine(_:)(v3);
  result = Hasher._finalize()();
  *a1 = result;
  return result;
}

BOOL sub_1000AA4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _BOOL8 v14;
  _BYTE v16[8];
  void *v17;
  uint64_t v18;

  v1 = v0;
  v2 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v2, v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(void **)(v0 + 176);
  v16[0] = *(_BYTE *)(v0 + 168);
  v17 = v6;
  v7 = sub_100008F88(&qword_100140128);
  State.wrappedValue.getter(&v18, v7);
  v8 = v18;
  sub_1000B5544(v1, (uint64_t)v16);
  if (v8 == 1)
  {
    v9 = v17;
    KeyPath = swift_getKeyPath(&unk_1000EDFD0);
    v11 = swift_getKeyPath(&unk_1000EDFF8);
    v12 = v9;
    static Published.subscript.getter(v5, v12, KeyPath, v11);
    swift_release(KeyPath);
    swift_release(v11);
    v13 = type metadata accessor for ContinuousClock.Instant(0);
    v14 = (*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13) == 1;
    sub_10000CC5C((uint64_t)v5, &qword_10013FE60);

  }
  else
  {
    v14 = 0;
  }
  sub_1000B5578((uint64_t)v16);
  return v14;
}

uint64_t sub_1000AA64C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  id v20;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v0 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EE330);
  v11 = swift_getKeyPath(&unk_1000EE358);
  v12 = v9;
  static Published.subscript.getter(&v20, v12, KeyPath, v11);

  swift_release(KeyPath);
  swift_release(v11);
  v13 = v20;
  if (v20
    && (v14 = objc_msgSend(v20, "createCollaborationFooterViewModel"),
        swift_unknownObjectRelease(v13),
        v14)
    && (v15 = objc_msgSend(v14, "optionsSummary"), v14, v15))
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

  }
  else
  {
    v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000001000F2820);
    static Locale.current.getter(v17);
    return String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v4, 0, 0, 256);
  }
  return v16;
}

uint64_t sub_1000AA7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  char v37;

  v1 = sub_100008F88(&qword_10013FFC8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static Alignment.center.getter(v5);
  *((_QWORD *)v4 + 1) = v6;
  v7 = sub_100008F88(&qword_10013FFD0);
  sub_1000AAA0C(v0, &v4[*(int *)(v7 + 44)]);
  v8 = *(_QWORD *)(v0 + 208);
  LOBYTE(v36) = *(_BYTE *)(v0 + 200);
  *((_QWORD *)&v36 + 1) = v8;
  v9 = sub_100008F88(&qword_10013FFD8);
  State.projectedValue.getter(v9);
  v36 = v22;
  v37 = v23;
  sub_1000B5544(v0, (uint64_t)&v22);
  v10 = swift_allocObject(&unk_100128BC8, 232, 7);
  v11 = v33;
  *(_OWORD *)(v10 + 176) = v32;
  *(_OWORD *)(v10 + 192) = v11;
  *(_OWORD *)(v10 + 208) = v34;
  *(_QWORD *)(v10 + 224) = v35;
  v12 = v29;
  *(_OWORD *)(v10 + 112) = v28;
  *(_OWORD *)(v10 + 128) = v12;
  v13 = v31;
  *(_OWORD *)(v10 + 144) = v30;
  *(_OWORD *)(v10 + 160) = v13;
  v14 = v25;
  *(_OWORD *)(v10 + 48) = v24;
  *(_OWORD *)(v10 + 64) = v14;
  v15 = v27;
  *(_OWORD *)(v10 + 80) = v26;
  *(_OWORD *)(v10 + 96) = v15;
  v16 = v23;
  *(_OWORD *)(v10 + 16) = v22;
  *(_OWORD *)(v10 + 32) = v16;
  v17 = sub_100008F88(&qword_10013FFE0);
  v18 = sub_10000CB94(&qword_10013FFE8, &qword_10013FFC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v19 = sub_1000B7898();
  v20 = sub_1000B78DC();
  View.sheet<A, B>(item:onDismiss:content:)(&v36, 0, 0, sub_1000B7890, v10, v1, &type metadata for PresentingSheetSelection, v17, v18, v19, v20);
  swift_release(v10);
  swift_release(v36);
  swift_release(*((_QWORD *)&v36 + 1));
  return sub_10000CC5C((uint64_t)v4, &qword_10013FFC8);
}

uint64_t sub_1000AAA0C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  void (*v93)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[3];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  BOOL v124;

  v106 = a2;
  v3 = sub_100008F88(&qword_100140070);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100008F88(&qword_100140078);
  __chkstk_darwin(v95, v7);
  v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100008F88(&qword_100140080);
  __chkstk_darwin(v96, v10);
  v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008F88(&qword_100140088);
  __chkstk_darwin(v98, v13);
  v15 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100008F88(&qword_100140090);
  __chkstk_darwin(v99, v16);
  v97 = (uint64_t)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100008F88(&qword_100140098);
  v108 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105, v18);
  v100 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v103 = (char *)&v95 - v22;
  v104 = sub_100008F88(&qword_1001400A0);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104, v23);
  v101 = (char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v107 = (char *)&v95 - v27;
  v124 = sub_1000AA4F8();
  v28 = a1;
  sub_1000B5544(a1, (uint64_t)&v110);
  v29 = swift_allocObject(&unk_100128C18, 232, 7);
  v30 = v121;
  *(_OWORD *)(v29 + 176) = v120;
  *(_OWORD *)(v29 + 192) = v30;
  *(_OWORD *)(v29 + 208) = v122;
  *(_QWORD *)(v29 + 224) = v123;
  v31 = v117;
  *(_OWORD *)(v29 + 112) = v116;
  *(_OWORD *)(v29 + 128) = v31;
  v32 = v119;
  *(_OWORD *)(v29 + 144) = v118;
  *(_OWORD *)(v29 + 160) = v32;
  v33 = v113;
  *(_OWORD *)(v29 + 48) = v112;
  *(_OWORD *)(v29 + 64) = v33;
  v34 = v115;
  *(_OWORD *)(v29 + 80) = v114;
  *(_OWORD *)(v29 + 96) = v34;
  v35 = v111;
  *(_OWORD *)(v29 + 16) = v110;
  *(_OWORD *)(v29 + 32) = v35;
  v36 = sub_1000B7A0C();
  View.onTapGesture(count:perform:)(1, sub_1000B7A04, v29, &type metadata for BackgroundMaterialView, v36);
  swift_release(v29);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v37);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v38 = sub_100008F88(&qword_1001400B0);
  v39 = sub_1000AB3F8(a1, (uint64_t)&v6[*(int *)(v38 + 44)]);
  LOBYTE(a1) = static Edge.Set.top.getter(v39);
  v40 = EdgeInsets.init(_all:)(90.0);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  sub_10000CC18((uint64_t)v6, (uint64_t)v9, &qword_100140070);
  v47 = &v9[*(int *)(v95 + 36)];
  *v47 = a1;
  *((double *)v47 + 1) = v40;
  *((_QWORD *)v47 + 2) = v42;
  *((_QWORD *)v47 + 3) = v44;
  *((_QWORD *)v47 + 4) = v46;
  v47[40] = 0;
  v48 = sub_10000CC5C((uint64_t)v6, &qword_100140070);
  LOBYTE(a1) = static Edge.Set.bottom.getter(v48);
  v49 = EdgeInsets.init(_all:)(65.0);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  sub_10000CC18((uint64_t)v9, (uint64_t)v12, &qword_100140078);
  v56 = &v12[*(int *)(v96 + 36)];
  *v56 = a1;
  *((double *)v56 + 1) = v49;
  *((_QWORD *)v56 + 2) = v51;
  *((_QWORD *)v56 + 3) = v53;
  *((_QWORD *)v56 + 4) = v55;
  v56[40] = 0;
  v57 = sub_10000CC5C((uint64_t)v9, &qword_100140078);
  LOBYTE(a1) = static Edge.Set.horizontal.getter(v57);
  v58 = EdgeInsets.init(_all:)(30.0);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  sub_10000CC18((uint64_t)v12, (uint64_t)v15, &qword_100140080);
  v65 = &v15[*(int *)(v98 + 36)];
  *v65 = a1;
  *((double *)v65 + 1) = v58;
  *((_QWORD *)v65 + 2) = v60;
  *((_QWORD *)v65 + 3) = v62;
  *((_QWORD *)v65 + 4) = v64;
  v65[40] = 0;
  sub_10000CC5C((uint64_t)v12, &qword_100140080);
  sub_1000B5544(v28, (uint64_t)&v110);
  v66 = swift_allocObject(&unk_100128C40, 232, 7);
  v67 = v121;
  *(_OWORD *)(v66 + 176) = v120;
  *(_OWORD *)(v66 + 192) = v67;
  *(_OWORD *)(v66 + 208) = v122;
  *(_QWORD *)(v66 + 224) = v123;
  v68 = v117;
  *(_OWORD *)(v66 + 112) = v116;
  *(_OWORD *)(v66 + 128) = v68;
  v69 = v119;
  *(_OWORD *)(v66 + 144) = v118;
  *(_OWORD *)(v66 + 160) = v69;
  v70 = v113;
  *(_OWORD *)(v66 + 48) = v112;
  *(_OWORD *)(v66 + 64) = v70;
  v71 = v115;
  *(_OWORD *)(v66 + 80) = v114;
  *(_OWORD *)(v66 + 96) = v71;
  v72 = v111;
  *(_OWORD *)(v66 + 16) = v110;
  *(_OWORD *)(v66 + 32) = v72;
  v73 = v97;
  sub_10000CC18((uint64_t)v15, v97, &qword_100140088);
  v74 = v99;
  v75 = (uint64_t (**)())(v73 + *(int *)(v99 + 36));
  *v75 = sub_1000B7A54;
  v75[1] = (uint64_t (*)())v66;
  v75[2] = 0;
  v75[3] = 0;
  v76 = sub_10000CC5C((uint64_t)v15, &qword_100140088);
  v77 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(v76, 1.0, 250.0, 19.0, 0.0);
  v109[2] = v28;
  v78 = sub_100008F88(&qword_1001400B8);
  v79 = sub_1000B7A64();
  v80 = sub_1000B7C2C();
  v81 = v100;
  View.animation<A>(_:body:)(v77, sub_1000B7A5C, v109, v74, v78, v79, v80);
  swift_release(v77);
  sub_10000CC5C(v73, &qword_100140090);
  v82 = v108;
  v83 = v103;
  v84 = v105;
  (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v103, v81, v105);
  v86 = v101;
  v85 = v102;
  v87 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v88 = v104;
  v87(v101, v107, v104);
  v89 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v89(v81, v83, v84);
  v90 = v106;
  v87(v106, v86, v88);
  v91 = sub_100008F88(&qword_100140120);
  v89(&v90[*(int *)(v91 + 48)], v81, v84);
  v92 = *(void (**)(char *, uint64_t))(v108 + 8);
  v92(v83, v84);
  v93 = *(void (**)(char *, uint64_t))(v85 + 8);
  v93(v107, v88);
  v92(v81, v84);
  return ((uint64_t (*)(char *, uint64_t))v93)(v86, v88);
}

uint64_t sub_1000AB0A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  uint64_t v44;
  _OWORD v45[13];
  uint64_t v46;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v37 - v17;
  v19 = *(_QWORD *)(a1 + 176);
  LOBYTE(v45[0]) = *(_BYTE *)(a1 + 168);
  *((_QWORD *)&v45[0] + 1) = v19;
  LOBYTE(v43[0]) = 0;
  v20 = sub_100008F88(&qword_100140128);
  State.wrappedValue.setter(v43, v20);
  sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
  v38 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v14, 0.52);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, v10);
  v22 = (uint64_t (*)(char *, uint64_t))v21;
  sub_1000B5544(a1, (uint64_t)v45);
  v23 = swift_allocObject(&unk_100128E70, 232, 7);
  v24 = v45[11];
  *(_OWORD *)(v23 + 176) = v45[10];
  *(_OWORD *)(v23 + 192) = v24;
  *(_OWORD *)(v23 + 208) = v45[12];
  *(_QWORD *)(v23 + 224) = v46;
  v25 = v45[7];
  *(_OWORD *)(v23 + 112) = v45[6];
  *(_OWORD *)(v23 + 128) = v25;
  v26 = v45[9];
  *(_OWORD *)(v23 + 144) = v45[8];
  *(_OWORD *)(v23 + 160) = v26;
  v27 = v45[3];
  *(_OWORD *)(v23 + 48) = v45[2];
  *(_OWORD *)(v23 + 64) = v27;
  v28 = v45[5];
  *(_OWORD *)(v23 + 80) = v45[4];
  *(_OWORD *)(v23 + 96) = v28;
  v29 = v45[1];
  *(_OWORD *)(v23 + 16) = v45[0];
  *(_OWORD *)(v23 + 32) = v29;
  v43[4] = sub_1000B9344;
  v44 = v23;
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 1107296256;
  v43[2] = sub_1000DA060;
  v43[3] = &unk_100128E88;
  v30 = _Block_copy(v43);
  v31 = swift_release(v44);
  static DispatchQoS.unspecified.getter(v31);
  *(_QWORD *)&v45[0] = &_swiftEmptyArrayStorage;
  v32 = sub_100008694(&qword_10013EAA0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_100008F88(&qword_10013F110);
  v34 = sub_10000CB94(&qword_10013EAA8, &qword_10013F110, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v45, v33, v34, v2, v32);
  v35 = (void *)v38;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v9, v5, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
  return v22(v18, v39);
}

void sub_1000AB3C0(uint64_t a1)
{
  id v1;

  v1 = *(id *)(a1 + 8);
  sub_100047B3C();

}

uint64_t sub_1000AB3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  char *v223;
  void *v224;
  uint64_t KeyPath;
  uint64_t v226;
  id v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t (*v230)(_QWORD *, uint64_t, uint64_t);
  double v231;
  double v232;
  double v233;
  uint64_t v234;
  char *v235;
  uint64_t (*v236)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  id v242;
  _QWORD *v243;
  __n128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  _QWORD *v254;
  __n128 v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  BOOL v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _TtC9AirDropUI33AirDropTransferSessionsController *v288;
  _TtC9AirDropUI33AirDropTransferSessionsController *v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  SEL v296;
  id v297;
  id v298;
  id v299;
  id v300;
  id v301;
  id v302;
  uint64_t v303;
  double v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  id v314;
  _QWORD *v315;
  __n128 v316;
  uint64_t (*v317)(_QWORD *, uint64_t, uint64_t, __n128);
  double v318;
  double v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  id v323;
  _QWORD *v324;
  __n128 v325;
  uint64_t v326;
  uint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  id v331;
  _QWORD *v332;
  __n128 v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  id v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  double v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  __int128 v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  id v378;
  _QWORD *v379;
  __n128 v380;
  uint64_t v381;
  uint64_t v382;
  __n128 v383;
  double v384;
  double v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  uint64_t v395;
  uint64_t v396;
  id v397;
  _QWORD *v398;
  __n128 v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  char *v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  _TtC9AirDropUI33AirDropTransferSessionsController *v426;
  _TtC9AirDropUI33AirDropTransferSessionsController *v427;
  char v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char v435;
  char v436;
  _TtC9AirDropUI33AirDropTransferSessionsController *v437;
  _TtC9AirDropUI33AirDropTransferSessionsController *v438;
  SEL v439;
  id v440;
  id v441;
  id v442;
  id v443;
  id v444;
  id v445;
  uint64_t v446;
  uint64_t v447;
  char v448;
  SEL v449;
  id v450;
  id v451;
  id v452;
  id v453;
  id v454;
  id v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  id v459;
  _QWORD *v460;
  __n128 v461;
  uint64_t v462;
  uint64_t (*v463)(_QWORD *, uint64_t, uint64_t, __n128);
  void *v464;
  uint64_t v465;
  uint64_t v466;
  id v467;
  _QWORD *v468;
  __n128 v469;
  int v470;
  uint64_t v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  id v475;
  _QWORD *v476;
  __n128 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t v500;
  _OWORD *v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  void (*v505)(char *, uint64_t, uint64_t);
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _OWORD *v514;
  char *v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  double v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  uint64_t v539;
  uint64_t v540;
  id v541;
  _QWORD *v542;
  __n128 v543;
  uint64_t v544;
  uint64_t (*v545)(_QWORD *, uint64_t, uint64_t, __n128);
  double v546;
  double v547;
  uint64_t v548;
  uint64_t v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  id v553;
  _QWORD *v554;
  __n128 v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  void *v559;
  uint64_t v560;
  uint64_t v561;
  id v562;
  _QWORD *v563;
  __n128 v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  _QWORD *v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  char v581;
  uint64_t v582;
  char v583;
  uint64_t v584;
  _QWORD *v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  void *v593;
  uint64_t v594;
  uint64_t v595;
  id v596;
  __n128 v597;
  uint64_t v598;
  void *v599;
  unsigned __int8 v600;
  uint64_t v601;
  uint64_t v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  _BOOL8 v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  char *v635;
  Swift::String v636;
  char *v637;
  uint64_t v638;
  char *v639;
  Swift::String v640;
  _TtC9AirDropUI33AirDropTransferSessionsController *object;
  SEL v642;
  id v643;
  id v644;
  id v645;
  id v646;
  id v647;
  id v648;
  Swift::String v649;
  uint64_t v650;
  uint64_t v651;
  void *v652;
  id v653;
  id v654;
  char *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t (*v671)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v672;
  uint64_t v673;
  void *v674;
  uint64_t v675;
  uint64_t v676;
  id v677;
  _QWORD *v678;
  __n128 v679;
  uint64_t v680;
  double v681;
  double v682;
  uint64_t v683;
  uint64_t v684;
  void *v685;
  uint64_t v686;
  uint64_t v687;
  id v688;
  _QWORD *v689;
  __n128 v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  void *v694;
  uint64_t v695;
  uint64_t v696;
  id v697;
  _QWORD *v698;
  __n128 v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  char *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  _TtC9AirDropUI33AirDropTransferSessionsController *v731;
  char *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  _TtC9AirDropUI33AirDropTransferSessionsController *v737;
  _TtC9AirDropUI33AirDropTransferSessionsController *v738;
  _TtC9AirDropUI33AirDropTransferSessionsController *v739;
  SEL v740;
  id v741;
  id v742;
  id v743;
  id v744;
  id v745;
  id v746;
  Swift::String v747;
  void *v748;
  id v749;
  id v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  _TtC9AirDropUI33AirDropTransferSessionsController *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  _TtC9AirDropUI33AirDropTransferSessionsController *v759;
  _TtC9AirDropUI33AirDropTransferSessionsController *v760;
  _TtC9AirDropUI33AirDropTransferSessionsController *v761;
  SEL v762;
  id v763;
  id v764;
  id v765;
  id v766;
  id v767;
  id v768;
  Swift::String v769;
  void *v770;
  id v771;
  id v772;
  uint64_t v773;
  _TtC9AirDropUI33AirDropTransferSessionsController *v774;
  _TtC9AirDropUI33AirDropTransferSessionsController *v775;
  Swift::String v776;
  SEL v777;
  id v778;
  id v779;
  id v780;
  id v781;
  id v782;
  id v783;
  Swift::String v784;
  uint64_t v785;
  _QWORD *v786;
  char v787;
  char v788;
  _QWORD *v789;
  double v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  void *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  id v807;
  _QWORD *v808;
  __n128 v809;
  uint64_t v810;
  uint64_t (*v811)(_QWORD *, uint64_t, uint64_t, __n128);
  double v812;
  double v813;
  void *v814;
  uint64_t v815;
  uint64_t v816;
  id v817;
  _QWORD *v818;
  __n128 v819;
  uint64_t v820;
  char v821;
  uint64_t v822;
  void *v823;
  uint64_t v824;
  uint64_t v825;
  id v826;
  _QWORD *v827;
  __n128 v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t *v832;
  uint64_t v833;
  _QWORD *v834;
  uint64_t v835;
  char *v836;
  uint64_t v837;
  uint64_t v838;
  char *v839;
  void (*v840)(char *, char *, uint64_t);
  char *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  void (*v846)(char *, uint64_t);
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int *v859;
  uint64_t v860;
  uint64_t v861;
  _QWORD *v862;
  uint64_t v863;
  char v864;
  _TtC9AirDropUI33AirDropTransferSessionsController *v865;
  uint64_t v866;
  uint64_t v867;
  _QWORD *v868;
  char v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  _QWORD *v874;
  uint64_t v876;
  uint64_t v877;
  __int16 v878;
  uint64_t v879;
  char *v880;
  uint64_t v881;
  char *v882;
  uint64_t v883;
  _QWORD *v884;
  _QWORD *v885;
  uint64_t v886;
  uint64_t v887;
  char *v888;
  uint64_t v889;
  uint64_t v890;
  _QWORD *v891;
  char *v892;
  char *v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  char *v898;
  char *v899;
  char *v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  char *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  char *v910;
  uint64_t v911;
  uint64_t v912;
  char *v913;
  uint64_t v914;
  _QWORD *v915;
  _QWORD *v916;
  _QWORD *v917;
  uint64_t v918;
  char *v919;
  char *v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  char *v925;
  char *v926;
  uint64_t v927;
  uint64_t v928;
  _QWORD *v929;
  char *v930;
  char *v931;
  char *v932;
  char *v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  _QWORD *v938;
  _QWORD *v939;
  _QWORD *v940;
  uint64_t v941;
  char *v942;
  _QWORD *v943;
  _QWORD *v944;
  _QWORD *v945;
  uint64_t v946;
  _QWORD *v947;
  _QWORD *v948;
  _QWORD *v949;
  uint64_t v950;
  uint64_t *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  char *v957;
  char *v958;
  uint64_t *v959;
  uint64_t v960;
  uint64_t *v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  char *v970;
  _QWORD *v971;
  char *v972;
  uint64_t v973;
  double v974;
  __int128 v975;
  uint64_t v976;
  uint64_t v977;
  _QWORD *v978;
  __int128 v979;
  uint64_t v980;
  _QWORD *v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  _QWORD *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  _QWORD *v990;
  __int128 v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t (*v996)(_QWORD *, uint64_t, uint64_t, __n128);
  __objc2_prot *v997;
  _OWORD v998[7];
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  uint64_t v1005;
  char v1006;
  unsigned __int8 v1007;
  _BYTE v1008[7];
  _BYTE v1009[7];
  unsigned __int8 v1010;
  _BYTE v1011[7];
  unsigned __int8 v1012;
  _OWORD v1013[21];
  _OWORD v1014[21];
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  __int128 v1025;
  __int128 v1026;
  unint64_t v1027;
  uint64_t v1028;
  _QWORD *v1029;
  int v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  __int128 v1036;
  __int128 v1037;
  unint64_t v1038;
  uint64_t v1039;
  _QWORD *v1040;
  int v1041;

  v982 = a2;
  v3 = sub_100008F88(&qword_100140130);
  __chkstk_darwin(v3, v4);
  v951 = (uint64_t *)((char *)&v879 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v950 = sub_100008F88(&qword_100140138);
  __chkstk_darwin(v950, v6);
  v953 = (uint64_t)&v879 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v952 = sub_100008F88(&qword_100140140);
  __chkstk_darwin(v952, v8);
  v955 = (uint64_t)&v879 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v965 = sub_100008F88(&qword_100140148);
  __chkstk_darwin(v965, v10);
  v954 = (uint64_t)&v879 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v956 = (uint64_t)&v879 - v14;
  v963 = sub_100008F88(&qword_100140150);
  __chkstk_darwin(v963, v15);
  v964 = (uint64_t)&v879 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v937 = sub_100008F88(&qword_100140158);
  v914 = *(_QWORD *)(v937 - 8);
  __chkstk_darwin(v937, v17);
  v913 = (char *)&v879 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v934 = sub_100008F88(&qword_100140160);
  __chkstk_darwin(v934, v19);
  v936 = (uint64_t)&v879 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v935 = sub_100008F88(&qword_100140168);
  __chkstk_darwin(v935, v21);
  v925 = (char *)&v879 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100008F88(&qword_100140170);
  __chkstk_darwin(v23, v24);
  v882 = (char *)&v879 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v883 = (uint64_t)&v879 - v28;
  __chkstk_darwin(v29, v30);
  v880 = (char *)&v879 - v31;
  v34 = __chkstk_darwin(v32, v33);
  v881 = (uint64_t)&v879 - v35;
  v36 = type metadata accessor for LocalizedStringKey.StringInterpolation(0, v34);
  __chkstk_darwin(v36, v37);
  v926 = (char *)&v879 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v918 = sub_100008F88(&qword_100140178);
  __chkstk_darwin(v918, v39);
  v922 = (uint64_t)&v879 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41, v42);
  v919 = (char *)&v879 - v43;
  __chkstk_darwin(v44, v45);
  v924 = (uint64_t)&v879 - v46;
  v923 = sub_100008F88(&qword_100140180);
  v921 = *(_QWORD *)(v923 - 8);
  __chkstk_darwin(v923, v47);
  v920 = (char *)&v879 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49, v50);
  v932 = (char *)&v879 - v51;
  v962 = sub_100008F88(&qword_100140188);
  __chkstk_darwin(v962, v52);
  v933 = (char *)&v879 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100008F88(&qword_100140190);
  __chkstk_darwin(v54, v55);
  v988 = (uint64_t)&v879 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57, v58);
  v984 = (uint64_t)&v879 - v59;
  v60 = sub_100008F88(&qword_100140198);
  __chkstk_darwin(v60, v61);
  v931 = (char *)&v879 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63, v64);
  v930 = (char *)&v879 - v65;
  v928 = sub_100008F88(&qword_1001401A0);
  __chkstk_darwin(v928, v66);
  v929 = (uint64_t *)((char *)&v879 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = sub_100008F88(&qword_1001401A8);
  v901 = *(_QWORD *)(v68 - 8);
  v902 = v68;
  __chkstk_darwin(v68, v69);
  v900 = (char *)&v879 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v896 = sub_100008F88(&qword_1001401B0);
  __chkstk_darwin(v896, v71);
  v904 = (char *)&v879 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v895 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v895, v73);
  v893 = (char *)&v879 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100008F88(&qword_1001401B8);
  v889 = *(_QWORD *)(v75 - 8);
  v890 = v75;
  __chkstk_darwin(v75, v76);
  v888 = (char *)&v879 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v886 = sub_100008F88(&qword_1001401C0);
  __chkstk_darwin(v886, v78);
  v892 = (char *)&v879 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v887 = sub_100008F88(&qword_1001401C8);
  __chkstk_darwin(v887, v80);
  v898 = (char *)&v879 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v894 = sub_100008F88(&qword_1001401D0);
  __chkstk_darwin(v894, v82);
  v899 = (char *)&v879 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v897 = sub_100008F88(&qword_1001401D8);
  __chkstk_darwin(v897, v84);
  v905 = (uint64_t)&v879 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  v903 = sub_100008F88(&qword_1001401E0);
  __chkstk_darwin(v903, v86);
  v907 = (uint64_t)&v879 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  v906 = sub_100008F88(&qword_1001401E8);
  __chkstk_darwin(v906, v88);
  v909 = (uint64_t)&v879 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v908 = sub_100008F88(&qword_1001401F0);
  __chkstk_darwin(v908, v90);
  v911 = (uint64_t)&v879 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  v927 = sub_100008F88(&qword_1001401F8);
  __chkstk_darwin(v927, v92);
  v910 = (char *)&v879 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v94, v95);
  v912 = (uint64_t)&v879 - v96;
  v97 = sub_100008F88(&qword_100140200);
  __chkstk_darwin(v97, v98);
  v946 = (uint64_t)&v879 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v100, v101);
  v960 = (uint64_t)&v879 - v102;
  v103 = sub_100008F88(&qword_100140208);
  __chkstk_darwin(v103, v104);
  v995 = (uint64_t)&v879 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v106, v107);
  v993 = (uint64_t)&v879 - v108;
  v109 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v109, v110);
  v959 = (uint64_t *)((char *)&v879 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v112, v113);
  v961 = (uint64_t *)((char *)&v879 - v114);
  v115 = type metadata accessor for Locale(0);
  __chkstk_darwin(v115, v116);
  v958 = (char *)&v879 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v118, v119);
  v957 = (char *)&v879 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v991 = sub_100008F88(&qword_100140210);
  v980 = *(_QWORD *)(v991 - 8);
  __chkstk_darwin(v991, v121);
  v942 = (char *)&v879 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v123, v124);
  v941 = (uint64_t)&v879 - v125;
  v126 = sub_100008F88(&qword_100140218);
  __chkstk_darwin(v126, v127);
  v987 = (uint64_t)&v879 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v129, v130);
  v994 = (uint64_t)&v879 - v131;
  v132 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v132, v133);
  v949 = (uint64_t *)((char *)&v879 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v135, v136);
  v948 = (uint64_t *)((char *)&v879 - v137);
  __chkstk_darwin(v138, v139);
  v947 = (uint64_t *)((char *)&v879 - v140);
  __chkstk_darwin(v141, v142);
  v917 = (uint64_t *)((char *)&v879 - v143);
  __chkstk_darwin(v144, v145);
  v916 = (uint64_t *)((char *)&v879 - v146);
  __chkstk_darwin(v147, v148);
  v915 = (uint64_t *)((char *)&v879 - v149);
  __chkstk_darwin(v150, v151);
  v891 = (uint64_t *)((char *)&v879 - v152);
  __chkstk_darwin(v153, v154);
  v885 = (uint64_t *)((char *)&v879 - v155);
  __chkstk_darwin(v156, v157);
  v884 = (uint64_t *)((char *)&v879 - v158);
  __chkstk_darwin(v159, v160);
  v945 = (uint64_t *)((char *)&v879 - v161);
  __chkstk_darwin(v162, v163);
  v944 = (uint64_t *)((char *)&v879 - v164);
  __chkstk_darwin(v165, v166);
  v943 = (uint64_t *)((char *)&v879 - v167);
  __chkstk_darwin(v168, v169);
  v985 = (uint64_t *)((char *)&v879 - v170);
  __chkstk_darwin(v171, v172);
  v981 = (uint64_t *)((char *)&v879 - v173);
  __chkstk_darwin(v174, v175);
  v940 = (uint64_t *)((char *)&v879 - v176);
  __chkstk_darwin(v177, v178);
  v939 = (uint64_t *)((char *)&v879 - v179);
  __chkstk_darwin(v180, v181);
  v938 = (uint64_t *)((char *)&v879 - v182);
  __chkstk_darwin(v183, v184);
  v990 = (uint64_t *)((char *)&v879 - v185);
  __chkstk_darwin(v186, v187);
  v978 = (uint64_t *)((char *)&v879 - v188);
  __chkstk_darwin(v189, v190);
  v971 = (uint64_t *)((char *)&v879 - v191);
  *(_QWORD *)&v975 = sub_100008F88(&qword_100140220);
  v974 = *(double *)(v975 - 8);
  __chkstk_darwin(v975, v192);
  v970 = (char *)&v879 - ((v193 + 15) & 0xFFFFFFFFFFFFFFF0);
  v973 = sub_100008F88(&qword_100140228);
  __chkstk_darwin(v973, v194);
  v972 = (char *)&v879 - ((v195 + 15) & 0xFFFFFFFFFFFFFFF0);
  v977 = sub_100008F88(&qword_100140230);
  __chkstk_darwin(v977, v196);
  v976 = (uint64_t)&v879 - ((v197 + 15) & 0xFFFFFFFFFFFFFFF0);
  v989 = sub_100008F88(&qword_100140238);
  __chkstk_darwin(v989, v198);
  v986 = (uint64_t)&v879 - ((v199 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v200, v201);
  *(_QWORD *)&v979 = (char *)&v879 - v202;
  __chkstk_darwin(v203, v204);
  v992 = (uint64_t)&v879 - v205;
  v206 = *(_QWORD *)(a1 + 24);
  v996 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(a1 + 16);
  v983 = v206;
  v207 = *(_QWORD *)(a1 + 32);
  v969 = *(_QWORD *)(a1 + 40);
  v208 = *(_QWORD *)(a1 + 56);
  v968 = *(_QWORD *)(a1 + 48);
  v967 = v208;
  v209 = *(_QWORD *)(a1 + 72);
  v966 = *(_QWORD *)(a1 + 64);
  v210 = *(_QWORD *)(a1 + 80);
  v211 = *(_QWORD *)(a1 + 88);
  v212 = *(_QWORD *)(a1 + 96);
  v213 = *(_QWORD *)(a1 + 104);
  v214 = *(_DWORD *)(a1 + 112);
  *(_QWORD *)&v1013[0] = v996;
  *((_QWORD *)&v1013[0] + 1) = v206;
  *(_QWORD *)&v1013[1] = v207;
  *((_QWORD *)&v1013[1] + 1) = v969;
  *(_QWORD *)&v1013[2] = v968;
  *((_QWORD *)&v1013[2] + 1) = v208;
  *(_QWORD *)&v1013[3] = v966;
  *((_QWORD *)&v1013[3] + 1) = v209;
  *(_QWORD *)&v1013[4] = v210;
  *((_QWORD *)&v1013[4] + 1) = v211;
  *(_QWORD *)&v1013[5] = v212;
  *((_QWORD *)&v1013[5] + 1) = v213;
  LODWORD(v1013[6]) = v214;
  sub_1000B5544(a1, (uint64_t)v1014);
  v215 = swift_allocObject(&unk_100128C68, 232, 7);
  v216 = v1014[11];
  *(_OWORD *)(v215 + 176) = v1014[10];
  *(_OWORD *)(v215 + 192) = v216;
  *(_OWORD *)(v215 + 208) = v1014[12];
  *(_QWORD *)(v215 + 224) = *(_QWORD *)&v1014[13];
  v217 = v1014[7];
  *(_OWORD *)(v215 + 112) = v1014[6];
  *(_OWORD *)(v215 + 128) = v217;
  v218 = v1014[9];
  *(_OWORD *)(v215 + 144) = v1014[8];
  *(_OWORD *)(v215 + 160) = v218;
  v219 = v1014[3];
  *(_OWORD *)(v215 + 48) = v1014[2];
  *(_OWORD *)(v215 + 64) = v219;
  v220 = v1014[5];
  *(_OWORD *)(v215 + 80) = v1014[4];
  *(_OWORD *)(v215 + 96) = v220;
  v221 = v1014[1];
  *(_OWORD *)(v215 + 16) = v1014[0];
  *(_OWORD *)(v215 + 32) = v221;
  sub_10004BD1C((uint64_t)v996, v983, v207, v969, v968, v967, v966, v209, v210, v211, v212, v213);
  v222 = sub_1000B7D94();
  v223 = v970;
  View.onTapGesture(count:perform:)(1, sub_1000B7D8C, v215, &type metadata for ContactDetailsHeaderView, v222);
  swift_release(v215);
  LODWORD(v877) = v1013[6];
  sub_10004BC68(*(uint64_t *)&v1013[0], *((uint64_t *)&v1013[0] + 1), *(uint64_t *)&v1013[1], *((uint64_t *)&v1013[1] + 1), *(uint64_t *)&v1013[2], *((uint64_t *)&v1013[2] + 1), *(uint64_t *)&v1013[3], *((uint64_t *)&v1013[3] + 1), *(uint64_t *)&v1013[4], *((uint64_t *)&v1013[4] + 1), *(uint64_t *)&v1013[5], *((uint64_t *)&v1013[5] + 1));
  v224 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDFD0);
  v226 = swift_getKeyPath(&unk_1000EDFF8);
  v227 = v224;
  v228 = v971;
  static Published.subscript.getter(v971, v227, KeyPath, v226);
  swift_release(KeyPath);
  swift_release(v226);
  v229 = type metadata accessor for ContinuousClock.Instant(0);
  v230 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 48);
  LODWORD(KeyPath) = v230(v228, 1, v229);
  sub_10000CC5C((uint64_t)v228, &qword_10013FE60);

  v231 = 0.0;
  if ((_DWORD)KeyPath == 1)
    v232 = 0.0;
  else
    v232 = 10.0;
  v233 = v974;
  v234 = (uint64_t)v972;
  v235 = v223;
  v236 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v230;
  v237 = v975;
  (*(void (**)(char *, char *, _QWORD))(*(_QWORD *)&v974 + 16))(v972, v235, v975);
  v238 = v234 + *(int *)(v973 + 36);
  *(double *)v238 = v232;
  *(_BYTE *)(v238 + 8) = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v233 + 8))(v235, v237);
  v239 = *(void **)(a1 + 8);
  v240 = swift_getKeyPath(&unk_1000EDFD0);
  v241 = swift_getKeyPath(&unk_1000EDFF8);
  v242 = v239;
  v243 = v978;
  static Published.subscript.getter(v978, v242, v240, v241);
  swift_release(v240);
  v244 = swift_release(v241);
  LODWORD(v240) = v236(v243, 1, v229, v244);
  sub_10000CC5C((uint64_t)v243, &qword_10013FE60);

  if ((_DWORD)v240 == 1)
    v231 = 1.0;
  v245 = v976;
  sub_10000CC18(v234, v976, &qword_100140228);
  *(double *)(v245 + *(int *)(v977 + 36)) = v231;
  v246 = v234;
  v247 = v229;
  v248 = sub_10000CC5C(v246, &qword_100140228);
  v249 = static Animation.spring(response:dampingFraction:blendDuration:)(v248, 0.5, 1.0, 0.0);
  v250 = *(void **)(a1 + 8);
  v251 = swift_getKeyPath(&unk_1000EDFD0);
  v252 = swift_getKeyPath(&unk_1000EDFF8);
  v253 = v250;
  v254 = v990;
  static Published.subscript.getter(v990, v253, v251, v252);
  swift_release(v251);
  v255 = swift_release(v252);
  LOBYTE(v252) = v236(v254, 1, v247, v255) != 1;
  sub_10000CC5C((uint64_t)v254, &qword_10013FE60);

  v256 = v979;
  sub_10000CC18(v245, v979, &qword_100140230);
  v257 = v256 + *(int *)(v989 + 36);
  *(_QWORD *)v257 = v249;
  *(_BYTE *)(v257 + 8) = v252;
  sub_10000CC5C(v245, &qword_100140230);
  sub_10000CBD4(v256, v992, &qword_100140238);
  v258 = (_QWORD *)(a1 + 120);
  v259 = *(_QWORD *)(a1 + 144);
  v260 = *(_QWORD *)(a1 + 152);
  sub_10000904C((_QWORD *)(a1 + 120), v259);
  v261 = sub_1000790FC(v259, v260);
  v262 = 1;
  v989 = a1;
  v996 = v236;
  v990 = (_QWORD *)(a1 + 120);
  v983 = v247;
  if (v261)
  {
    v264 = *(_QWORD *)(a1 + 16);
    v263 = *(_QWORD *)(a1 + 24);
    v266 = *(_QWORD *)(a1 + 32);
    v265 = *(_QWORD *)(a1 + 40);
    v267 = *(_QWORD *)(a1 + 48);
    v268 = *(_QWORD *)(a1 + 88);
    if (v268 < 0)
    {
      v276 = *(_QWORD *)(a1 + 144);
      v277 = *(_QWORD *)(a1 + 152);
      sub_10000904C(v990, v276);
      v1031 = v264;
      v1032 = v263;
      v1033 = v266;
      v1034 = v265;
      v1036 = 0u;
      v1037 = 0u;
      v1035 = v267;
      v1038 = 0x8000000000000000;
      v1040 = 0;
      v1039 = 0;
      v1041 = 0;
      v274 = v276;
      v275 = v277;
    }
    else
    {
      LODWORD(v979) = *(_DWORD *)(a1 + 112);
      v978 = *(_QWORD **)(a1 + 104);
      v976 = *(_QWORD *)(a1 + 96);
      v269 = a1;
      v272 = a1 + 72;
      v271 = *(_QWORD *)(a1 + 72);
      v270 = *(_QWORD *)(v272 + 8);
      v975 = *(_OWORD *)(v269 + 56);
      v273 = *(_QWORD *)(v269 + 144);
      v977 = *(_QWORD *)(v269 + 152);
      sub_10000904C(v990, v273);
      v1031 = v264;
      v1032 = v263;
      v1033 = v266;
      v1034 = v265;
      v1036 = v975;
      v1035 = v267;
      *(_QWORD *)&v1037 = v271;
      *((_QWORD *)&v1037 + 1) = v270;
      v1038 = v268;
      v1039 = v976;
      v1040 = v978;
      v1041 = v979;
      v274 = v273;
      v275 = v977;
    }
    v279 = sub_100077814((uint64_t)&v1031, v274, v275);
    if (!v278)
    {
      v280 = v957;
      v281 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001000F2800);
      v282 = v958;
      static Locale.current.getter(v281);
      v279 = String.init(localized:table:bundle:locale:comment:)(v280, v279, 0, 0, v282, 0, 0, 256);
    }
    v283 = v989;
    *(_QWORD *)&v1014[0] = v279;
    *((_QWORD *)&v1014[0] + 1) = v278;
    v284 = sub_100044F4C();
    v285 = Text.init<A>(_:)(v1014, &type metadata for String, v284);
    v287 = v286;
    v289 = v288;
    v291 = v290 & 1;
    v292 = static Font.subheadline.getter();
    v978 = (_QWORD *)Text.font(_:)(v292, v285, v287, v291, v289);
    v977 = v293;
    LODWORD(v976) = v294;
    *(_QWORD *)&v979 = v295;
    swift_release(v292);
    sub_100044F90(v285, v287, v291);
    swift_bridgeObjectRelease(v289, v296, v297, v298, v299, v300, v301, v302);
    LODWORD(v975) = static Edge.Set.bottom.getter(v303);
    v304 = EdgeInsets.init(_all:)(2.0);
    v306 = v305;
    v308 = v307;
    v310 = v309;
    LODWORD(v974) = static HierarchicalShapeStyle.primary.getter();
    v311 = *(void **)(v283 + 8);
    v312 = swift_getKeyPath(&unk_1000EDFD0);
    v313 = swift_getKeyPath(&unk_1000EDFF8);
    v314 = v311;
    v315 = v938;
    static Published.subscript.getter(v938, v314, v312, v313);
    swift_release(v312);
    v316 = swift_release(v313);
    v247 = v983;
    v317 = v996;
    LODWORD(v312) = v996(v315, 1, v983, v316);
    sub_10000CC5C((uint64_t)v315, &qword_10013FE60);

    v318 = 0.0;
    if ((_DWORD)v312 == 1)
      v319 = 0.0;
    else
      v319 = 10.0;
    v320 = *(void **)(v989 + 8);
    v321 = swift_getKeyPath(&unk_1000EDFD0);
    v322 = swift_getKeyPath(&unk_1000EDFF8);
    v323 = v320;
    v324 = v939;
    static Published.subscript.getter(v939, v323, v321, v322);
    swift_release(v321);
    v325 = swift_release(v322);
    LODWORD(v321) = v317(v324, 1, v247, v325);
    sub_10000CC5C((uint64_t)v324, &qword_10013FE60);

    if ((_DWORD)v321 == 1)
      v318 = 1.0;
    v327 = static Animation.spring(response:dampingFraction:blendDuration:)(v326, 0.5, 1.0, 0.0);
    v328 = *(void **)(v989 + 8);
    v329 = swift_getKeyPath(&unk_1000EDFD0);
    v330 = swift_getKeyPath(&unk_1000EDFF8);
    v331 = v328;
    v332 = v940;
    static Published.subscript.getter(v940, v331, v329, v330);
    swift_release(v329);
    v333 = swift_release(v330);
    LOBYTE(v329) = v317(v332, 1, v247, v333) != 1;
    a1 = v989;
    sub_10000CC5C((uint64_t)v332, &qword_10013FE60);

    v334 = swift_getKeyPath(&unk_1000EE1B0);
    v335 = v959;
    *v959 = v334;
    v336 = sub_100008F88(&qword_1001403B0);
    swift_storeEnumTagMultiPayload(v335, v336, 0);
    v337 = (uint64_t)v335;
    v338 = v961;
    sub_1000B6B18(v337, (uint64_t)v961, type metadata accessor for VibrancyEffectModifier);
    v339 = (uint64_t)v942;
    sub_10000C484((uint64_t)v338, (uint64_t)&v942[*(int *)(v991 + 36)], type metadata accessor for VibrancyEffectModifier);
    v340 = v977;
    *(_QWORD *)v339 = v978;
    *(_QWORD *)(v339 + 8) = v340;
    *(_BYTE *)(v339 + 16) = v976 & 1;
    *(_QWORD *)(v339 + 24) = v979;
    *(_BYTE *)(v339 + 32) = v975;
    *(double *)(v339 + 40) = v304;
    *(_QWORD *)(v339 + 48) = v306;
    *(_QWORD *)(v339 + 56) = v308;
    *(_QWORD *)(v339 + 64) = v310;
    *(_BYTE *)(v339 + 72) = 0;
    *(_DWORD *)(v339 + 76) = LODWORD(v974);
    *(double *)(v339 + 80) = v319;
    *(_BYTE *)(v339 + 88) = 0;
    *(double *)(v339 + 96) = v318;
    *(_QWORD *)(v339 + 104) = v327;
    *(_BYTE *)(v339 + 112) = v329;
    sub_10000C4C8((uint64_t)v338, type metadata accessor for VibrancyEffectModifier);
    v341 = v941;
    sub_10000CBD4(v339, v941, &qword_100140210);
    sub_10000CBD4(v341, v994, &qword_100140210);
    v262 = 0;
    v258 = v990;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v980 + 56))(v994, v262, 1, v991);
  sub_1000B5508((uint64_t)v258, (uint64_t)v1013);
  v342 = *(void **)(a1 + 8);
  v343 = swift_getKeyPath(&unk_1000EE228);
  v344 = swift_getKeyPath(&unk_1000EE250);
  v345 = v342;
  static Published.subscript.getter(v1014, v345, v343, v344);

  swift_release(v343);
  swift_release(v344);
  v346 = *(_QWORD *)&v1014[0];
  v1014[0] = v1013[0];
  v1014[1] = v1013[1];
  v1014[2] = v1013[2];
  *(_QWORD *)&v1014[3] = v346;
  sub_1000B7DE0((uint64_t)v1014, (uint64_t)v1013);
  *((_QWORD *)&v1013[3] + 1) = 0x3FF0000000000000;
  v347 = sub_1000B7E14((uint64_t)v1014);
  LOBYTE(v343) = static Edge.Set.leading.getter(v347);
  v348 = EdgeInsets.init(_all:)(6.0);
  v350 = v349;
  v352 = v351;
  v354 = v353;
  sub_10000CC18((uint64_t)v1013, (uint64_t)v1014, &qword_100140248);
  LOBYTE(v1014[4]) = v343;
  *((double *)&v1014[4] + 1) = v348;
  *(_QWORD *)&v1014[5] = v350;
  *((_QWORD *)&v1014[5] + 1) = v352;
  *(_QWORD *)&v1014[6] = v354;
  BYTE8(v1014[6]) = 0;
  v355 = sub_10000CC5C((uint64_t)v1013, &qword_100140248);
  LOBYTE(v343) = static Edge.Set.trailing.getter(v355);
  v356 = EdgeInsets.init(_all:)(6.0);
  v358 = v357;
  v360 = v359;
  v362 = v361;
  sub_10000CC18((uint64_t)v1014, (uint64_t)v998, &qword_100140250);
  LOBYTE(v999) = v343;
  *((double *)&v999 + 1) = v356;
  *(_QWORD *)&v1000 = v358;
  *((_QWORD *)&v1000 + 1) = v360;
  *(_QWORD *)&v1001 = v362;
  BYTE8(v1001) = 0;
  sub_10000CC5C((uint64_t)v1014, &qword_100140250);
  sub_1000B5544(a1, (uint64_t)v1014);
  v363 = swift_allocObject(&unk_100128C90, 232, 7);
  v364 = v1014[11];
  *(_OWORD *)(v363 + 176) = v1014[10];
  *(_OWORD *)(v363 + 192) = v364;
  *(_OWORD *)(v363 + 208) = v1014[12];
  *(_QWORD *)(v363 + 224) = *(_QWORD *)&v1014[13];
  v365 = v1014[7];
  *(_OWORD *)(v363 + 112) = v1014[6];
  *(_OWORD *)(v363 + 128) = v365;
  v366 = v1014[9];
  *(_OWORD *)(v363 + 144) = v1014[8];
  *(_OWORD *)(v363 + 160) = v366;
  v367 = v1014[3];
  *(_OWORD *)(v363 + 48) = v1014[2];
  *(_OWORD *)(v363 + 64) = v367;
  v368 = v1014[5];
  *(_OWORD *)(v363 + 80) = v1014[4];
  *(_OWORD *)(v363 + 96) = v368;
  v369 = v1014[1];
  *(_OWORD *)(v363 + 16) = v1014[0];
  *(_OWORD *)(v363 + 32) = v369;
  LOBYTE(v1020) = 0;
  v1022 = 0;
  v1021 = 0;
  swift_retain(v363);
  v371 = static Animation.spring(response:dampingFraction:blendDuration:)(v370, 0.5, 1.0, 0.0);
  v372 = Transaction.init(animation:)(v371);
  GestureState.init(wrappedValue:resetTransaction:)(v1013, &v1020, v372, &type metadata for InteractiveSwipeModifier.DragState);
  LOBYTE(v345) = v1013[0];
  v373 = *((_QWORD *)&v1013[0] + 1);
  v374 = v1013[1];
  v991 = v1013[2];
  sub_10000CC18((uint64_t)v998, (uint64_t)v1013, &qword_100140258);
  swift_release(v363);
  v1013[10] = xmmword_1000EDED0;
  *(_QWORD *)&v1013[11] = 0x3FD51EB851EB851FLL;
  BYTE8(v1013[11]) = 0;
  *(_QWORD *)&v1013[12] = sub_1000B7E44;
  *((_QWORD *)&v1013[12] + 1) = v363;
  LOBYTE(v1013[13]) = (_BYTE)v345;
  *((_QWORD *)&v1013[13] + 1) = v373;
  v1013[14] = v374;
  v1013[15] = v991;
  sub_10000CC5C((uint64_t)v998, &qword_100140258);
  v375 = *(void **)(a1 + 8);
  v376 = swift_getKeyPath(&unk_1000EDFD0);
  v377 = swift_getKeyPath(&unk_1000EDFF8);
  v378 = v375;
  v379 = v981;
  static Published.subscript.getter(v981, v378, v376, v377);
  swift_release(v376);
  v380 = swift_release(v377);
  LOBYTE(v377) = v996(v379, 1, v247, v380) != 1;
  sub_10000CC5C((uint64_t)v379, &qword_10013FE60);

  sub_10000CC18((uint64_t)v1013, (uint64_t)v1014, &qword_100140260);
  LOBYTE(v1014[16]) = v377;
  *((_QWORD *)&v1014[16] + 1) = 0x4059000000000000;
  sub_10000CC5C((uint64_t)v1013, &qword_100140260);
  v381 = *(_QWORD *)(a1 + 176);
  LOBYTE(v1013[0]) = *(_BYTE *)(a1 + 168);
  *((_QWORD *)&v1013[0] + 1) = v381;
  v382 = sub_100008F88(&qword_100140128);
  State.wrappedValue.getter(v998, v382);
  v383.n128_u64[0] = 0.25;
  if (LOBYTE(v998[0]))
    v384 = 1.0;
  else
    v384 = 0.25;
  v385 = static UnitPoint.center.getter(v383);
  v387 = v386;
  sub_10000CC18((uint64_t)v1014, (uint64_t)v1013, &qword_100140268);
  *(double *)&v1013[17] = v384;
  *((double *)&v1013[17] + 1) = v384;
  *(double *)&v1013[18] = v385;
  *((_QWORD *)&v1013[18] + 1) = v387;
  v388 = sub_10000CC5C((uint64_t)v1014, &qword_100140268);
  v389 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(v388, 1.0, 250.0, 19.0, 0.0);
  v390 = *(_QWORD *)(a1 + 176);
  LOBYTE(v1014[0]) = *(_BYTE *)(a1 + 168);
  *((_QWORD *)&v1014[0] + 1) = v390;
  *(_QWORD *)&v975 = v382;
  State.wrappedValue.getter(v998, v382);
  v391 = v998[0];
  sub_10000CC18((uint64_t)v1013, (uint64_t)v1014, &qword_100140270);
  *(_QWORD *)&v1014[19] = v389;
  BYTE8(v1014[19]) = v391;
  v392 = sub_10000CC5C((uint64_t)v1013, &qword_100140270);
  v393 = static Animation.spring(response:dampingFraction:blendDuration:)(v392, 0.5, 1.0, 0.0);
  v394 = *(void **)(a1 + 8);
  v395 = swift_getKeyPath(&unk_1000EDFD0);
  v396 = swift_getKeyPath(&unk_1000EDFF8);
  v397 = v394;
  v398 = v985;
  static Published.subscript.getter(v985, v397, v395, v396);
  swift_release(v395);
  v399 = swift_release(v396);
  LOBYTE(v396) = v996(v398, 1, v247, v399) != 1;
  sub_10000CC5C((uint64_t)v398, &qword_10013FE60);

  sub_10000CC18((uint64_t)v1014, (uint64_t)v1013, &qword_100140278);
  *(_QWORD *)&v1013[20] = v393;
  BYTE8(v1013[20]) = v396;
  sub_10000CC5C((uint64_t)v1014, &qword_100140278);
  memcpy(v1014, v1013, 0x149uLL);
  v400 = *(_QWORD *)(a1 + 144);
  v401 = *(_QWORD *)(a1 + 152);
  sub_10000904C(v258, v400);
  if (sub_1000790FC(v400, v401))
  {
    v981 = 0;
    v980 = 0;
    v978 = 0;
    *(_QWORD *)&v979 = 0;
    *(_QWORD *)&v991 = 0;
    v976 = 0;
    v985 = 0;
    LODWORD(v977) = 0;
  }
  else
  {
    v403 = *(_QWORD *)(a1 + 16);
    v402 = *(_QWORD *)(a1 + 24);
    v405 = *(_QWORD *)(a1 + 32);
    v404 = *(_QWORD *)(a1 + 40);
    v406 = *(_QWORD *)(a1 + 48);
    v407 = *(_QWORD *)(a1 + 88);
    if (v407 < 0)
    {
      v415 = *(_QWORD *)(a1 + 144);
      v416 = *(_QWORD **)(a1 + 152);
      sub_10000904C(v990, v415);
      v1020 = v403;
      v1021 = v402;
      v1022 = v405;
      v1023 = v404;
      v1025 = 0u;
      v1026 = 0u;
      v1024 = v406;
      v1027 = 0x8000000000000000;
      v1029 = 0;
      v1028 = 0;
      v1030 = 0;
      v413 = v415;
      v414 = v416;
    }
    else
    {
      LODWORD(v991) = *(_DWORD *)(a1 + 112);
      v985 = *(_QWORD **)(a1 + 104);
      v980 = *(_QWORD *)(a1 + 96);
      v408 = a1;
      v411 = a1 + 72;
      v410 = *(_QWORD *)(a1 + 72);
      v409 = *(_QWORD *)(v411 + 8);
      v979 = *(_OWORD *)(v408 + 56);
      v412 = *(_QWORD *)(v408 + 144);
      v981 = *(_QWORD **)(v408 + 152);
      sub_10000904C(v990, v412);
      v1020 = v403;
      v1021 = v402;
      v1022 = v405;
      v1023 = v404;
      v1025 = v979;
      v1024 = v406;
      *(_QWORD *)&v1026 = v410;
      *((_QWORD *)&v1026 + 1) = v409;
      v1027 = v407;
      v1028 = v980;
      v1029 = v985;
      v1030 = v991;
      v413 = v412;
      v414 = v981;
    }
    v418 = sub_100077814((uint64_t)&v1020, v413, (uint64_t)v414);
    if (!v417)
    {
      v419 = v957;
      v420 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001000F2800);
      v421 = v958;
      static Locale.current.getter(v420);
      v418 = String.init(localized:table:bundle:locale:comment:)(v419, v418, 0, 0, v421, 0, 0, 256);
    }
    *(_QWORD *)&v1013[0] = v418;
    *((_QWORD *)&v1013[0] + 1) = v417;
    v422 = sub_100044F4C();
    v423 = Text.init<A>(_:)(v1013, &type metadata for String, v422);
    v425 = v424;
    v427 = v426;
    v429 = v428 & 1;
    v430 = static Font.headline.getter();
    static Font.Weight.regular.getter();
    v431 = Font.weight(_:)(v430);
    swift_release(v430);
    v432 = Text.font(_:)(v431, v423, v425, v429, v427);
    v434 = v433;
    v436 = v435;
    v438 = v437;
    swift_release(v431);
    sub_100044F90(v423, v425, v429);
    swift_bridgeObjectRelease(v427, v439, v440, v441, v442, v443, v444, v445);
    LODWORD(v1013[0]) = static HierarchicalShapeStyle.primary.getter();
    v981 = (_QWORD *)Text.foregroundStyle<A>(_:)(v1013, v432, v434, v436 & 1, v438, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v980 = v446;
    *(_QWORD *)&v979 = v447;
    v978 = (_QWORD *)(v448 & 1);
    sub_100044F90(v432, v434, v436 & 1);
    swift_bridgeObjectRelease(v438, v449, v450, v451, v452, v453, v454, v455);
    a1 = v989;
    v456 = *(void **)(v989 + 8);
    v457 = swift_getKeyPath(&unk_1000EDFD0);
    v458 = swift_getKeyPath(&unk_1000EDFF8);
    v459 = v456;
    v460 = v943;
    static Published.subscript.getter(v943, v459, v457, v458);
    swift_release(v457);
    v461 = swift_release(v458);
    v462 = v983;
    v463 = v996;
    LODWORD(v991) = v996(v460, 1, v983, v461);
    sub_10000CC5C((uint64_t)v460, &qword_10013FE60);

    v464 = *(void **)(a1 + 8);
    v465 = swift_getKeyPath(&unk_1000EDFD0);
    v466 = swift_getKeyPath(&unk_1000EDFF8);
    v467 = v464;
    v468 = v944;
    static Published.subscript.getter(v944, v467, v465, v466);
    swift_release(v465);
    v469 = swift_release(v466);
    v470 = v463(v468, 1, v462, v469);
    sub_10000CC5C((uint64_t)v468, &qword_10013FE60);

    v985 = (_QWORD *)static Animation.spring(response:dampingFraction:blendDuration:)(v471, 0.5, 1.0, 0.0);
    v472 = *(void **)(a1 + 8);
    v473 = swift_getKeyPath(&unk_1000EDFD0);
    v474 = swift_getKeyPath(&unk_1000EDFF8);
    v475 = v472;
    v476 = v945;
    static Published.subscript.getter(v945, v475, v473, v474);
    swift_release(v473);
    v477 = swift_release(v474);
    LODWORD(v977) = v463(v476, 1, v462, v477) != 1;
    sub_10000CC5C((uint64_t)v476, &qword_10013FE60);

    v478 = 0x4024000000000000;
    if ((_DWORD)v991 == 1)
      v478 = 0;
    *(_QWORD *)&v991 = v478;
    v479 = 0x3FF0000000000000;
    if (v470 != 1)
      v479 = 0;
    v976 = v479;
    v258 = v990;
  }
  v480 = *(_QWORD *)(a1 + 144);
  v481 = *(_QWORD *)(a1 + 152);
  sub_10000904C(v258, v480);
  if (!sub_1000790FC(v480, v481))
  {
    v577 = sub_100008F88(&qword_100140280);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v577 - 8) + 56))(v993, 1, 1, v577);
    goto LABEL_54;
  }
  v482 = *(_QWORD *)(a1 + 144);
  v483 = *(_QWORD *)(a1 + 152);
  sub_10000904C(v258, v482);
  sub_100079224(v482, v483);
  if ((v484 & 1) != 0)
  {
    __chkstk_darwin(v484, v485);
    __chkstk_darwin(v486, v487);
    v877 = a1;
    v488 = sub_100008F88(&qword_100140540);
    v489 = sub_100008F88(&qword_100140548);
    v490 = sub_10000C9D0(&qword_100140550, &qword_100140540, (void (*)(void))sub_1000B8CDC, (void (*)(void))sub_1000B8D20);
    v491 = sub_10000CB94(&qword_100140568, &qword_100140548, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v492 = v888;
    v493 = Menu.init(content:label:)(sub_1000B8CCC, &v876, sub_1000B8CD4, &v876, v488, v489, v490, v491);
    v494 = static Color.primary.getter(v493);
    v495 = swift_getKeyPath(&unk_1000EE378);
    v497 = v889;
    v496 = v890;
    v498 = (uint64_t)v892;
    (*(void (**)(char *, char *, uint64_t))(v889 + 16))(v892, v492, v890);
    v499 = (uint64_t *)(v498 + *(int *)(v886 + 36));
    *v499 = v495;
    v499[1] = v494;
    (*(void (**)(char *, uint64_t))(v497 + 8))(v492, v496);
    v500 = v895;
    v501 = v893;
    v502 = &v893[*(int *)(v895 + 20)];
    v503 = enum case for RoundedCornerStyle.continuous(_:);
    v504 = type metadata accessor for RoundedCornerStyle(0);
    v505 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v504 - 8) + 104);
    v505(v502, v503, v504);
    __asm { FMOV            V0.2D, #15.0 }
    *v501 = _Q0;
    v511 = (uint64_t)v898;
    v512 = (uint64_t)&v898[*(int *)(v887 + 36)];
    sub_10000C484((uint64_t)v501, v512, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v512 + *(int *)(sub_100008F88(&qword_10013B5E8) + 36)) = 256;
    sub_10000CC18(v498, v511, &qword_1001401C0);
    sub_10000C4C8((uint64_t)v501, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    sub_10000CC5C(v498, &qword_1001401C0);
    v513 = *(int *)(v500 + 20);
    v514 = v904;
    v505(&v904[v513], v503, v504);
    __asm { FMOV            V0.2D, #30.0 }
    *v514 = _Q0;
    v516 = (char *)v514 + *(int *)(v896 + 36);
    v1015 = xmmword_1000EDE40;
    v1016 = xmmword_1000EDE50;
    v1017 = xmmword_1000EDE60;
    v1018 = xmmword_1000EDE70;
    v1019 = xmmword_1000EDE80;
    v517 = v900;
    View._colorMatrix(_:)(&v1015, &type metadata for _BackdropEffectPlaceholder, &protocol witness table for _BackdropEffectPlaceholder);
    v519 = v901;
    v518 = v902;
    (*(void (**)(char *, char *, uint64_t))(v901 + 16))(v516, v517, v902);
    v520 = &v516[*(int *)(sub_100008F88(&qword_100140570) + 36)];
    *(_QWORD *)v520 = 0x4069000000000000;
    v520[8] = 0;
    v521 = (*(uint64_t (**)(char *, uint64_t))(v519 + 8))(v517, v518);
    v522 = static Alignment.center.getter(v521);
    v524 = v523;
    v525 = (uint64_t)v899;
    v526 = (uint64_t)&v899[*(int *)(v894 + 36)];
    sub_10000CC18((uint64_t)v514, v526, &qword_1001401B0);
    v527 = (uint64_t *)(v526 + *(int *)(sub_100008F88(&qword_100140438) + 36));
    *v527 = v522;
    v527[1] = v524;
    sub_10000CC18(v511, v525, &qword_1001401C8);
    sub_10000CC5C((uint64_t)v514, &qword_1001401B0);
    v528 = sub_10000CC5C(v511, &qword_1001401C8);
    LOBYTE(v522) = static Edge.Set.top.getter(v528);
    v529 = EdgeInsets.init(_all:)(9.0);
    v531 = v530;
    v533 = v532;
    v535 = v534;
    v536 = v905;
    sub_10000CC18(v525, v905, &qword_1001401D0);
    v537 = v536 + *(int *)(v897 + 36);
    *(_BYTE *)v537 = v522;
    *(double *)(v537 + 8) = v529;
    *(_QWORD *)(v537 + 16) = v531;
    *(_QWORD *)(v537 + 24) = v533;
    *(_QWORD *)(v537 + 32) = v535;
    *(_BYTE *)(v537 + 40) = 0;
    sub_10000CC5C(v525, &qword_1001401D0);
    v538 = *(void **)(a1 + 8);
    v539 = swift_getKeyPath(&unk_1000EDFD0);
    v540 = swift_getKeyPath(&unk_1000EDFF8);
    v541 = v538;
    v542 = v884;
    static Published.subscript.getter(v884, v541, v539, v540);
    swift_release(v539);
    v543 = swift_release(v540);
    v544 = v983;
    v545 = v996;
    LODWORD(v540) = v996(v542, 1, v983, v543);
    sub_10000CC5C((uint64_t)v542, &qword_10013FE60);

    v546 = 0.0;
    if ((_DWORD)v540 == 1)
      v547 = 0.0;
    else
      v547 = 10.0;
    v548 = v907;
    sub_10000CC18(v536, v907, &qword_1001401D8);
    v549 = v548 + *(int *)(v903 + 36);
    *(double *)v549 = v547;
    *(_BYTE *)(v549 + 8) = 0;
    sub_10000CC5C(v536, &qword_1001401D8);
    v550 = *(void **)(a1 + 8);
    v551 = swift_getKeyPath(&unk_1000EDFD0);
    v552 = swift_getKeyPath(&unk_1000EDFF8);
    v553 = v550;
    v554 = v885;
    static Published.subscript.getter(v885, v553, v551, v552);
    swift_release(v551);
    v555 = swift_release(v552);
    LODWORD(v551) = v545(v554, 1, v544, v555);
    sub_10000CC5C((uint64_t)v554, &qword_10013FE60);

    if ((_DWORD)v551 == 1)
      v546 = 1.0;
    v556 = v909;
    sub_10000CC18(v548, v909, &qword_1001401E0);
    *(double *)(v556 + *(int *)(v906 + 36)) = v546;
    v557 = sub_10000CC5C(v548, &qword_1001401E0);
    v558 = static Animation.spring(response:dampingFraction:blendDuration:)(v557, 0.5, 1.0, 0.0);
    v559 = *(void **)(a1 + 8);
    v560 = swift_getKeyPath(&unk_1000EDFD0);
    v561 = swift_getKeyPath(&unk_1000EDFF8);
    v562 = v559;
    v563 = v891;
    static Published.subscript.getter(v891, v562, v560, v561);
    swift_release(v560);
    v564 = swift_release(v561);
    LOBYTE(v561) = v545(v563, 1, v544, v564) != 1;
    sub_10000CC5C((uint64_t)v563, &qword_10013FE60);

    v565 = v911;
    sub_10000CC18(v556, v911, &qword_1001401E8);
    v566 = v565 + *(int *)(v908 + 36);
    *(_QWORD *)v566 = v558;
    *(_BYTE *)(v566 + 8) = v561;
    sub_10000CC5C(v556, &qword_1001401E8);
    v567 = swift_getKeyPath(&unk_1000EE1B0);
    v568 = v961;
    *v961 = v567;
    v569 = sub_100008F88(&qword_1001403B0);
    swift_storeEnumTagMultiPayload(v568, v569, 0);
    v570 = v927;
    v571 = (uint64_t)v910;
    sub_1000B6B18((uint64_t)v568, (uint64_t)&v910[*(int *)(v927 + 36)], type metadata accessor for VibrancyEffectModifier);
    sub_10000CBD4(v565, v571, &qword_1001401F0);
    v572 = v912;
    sub_10000CBD4(v571, v912, &qword_1001401F8);
    v573 = v929;
    sub_10000CC18(v572, (uint64_t)v929, &qword_1001401F8);
    swift_storeEnumTagMultiPayload(v573, v928, 0);
    v574 = sub_100008F88(&qword_1001403C0);
    v575 = sub_1000B85D8();
    v576 = sub_1000BA158(&qword_100140448, &qword_1001403C0);
    _ConditionalContent<>.init(storage:)(v573, v570, v574, v575, v576);
    sub_10000CC5C(v572, &qword_1001401F8);
  }
  else
  {
    v578 = static Alignment.center.getter(v484);
    _FrameLayout.init(width:height:alignment:)(&v1015, 0, 1, 0x4034000000000000, 0, v578, v579);
    v580 = v1015;
    v581 = BYTE8(v1015);
    v582 = v1016;
    v583 = BYTE8(v1016);
    v584 = v928;
    v585 = v929;
    *v929 = 0;
    *((_BYTE *)v585 + 8) = 1;
    v585[2] = v580;
    *((_BYTE *)v585 + 24) = v581;
    v585[4] = v582;
    *((_BYTE *)v585 + 40) = v583;
    *((_OWORD *)v585 + 3) = v1017;
    swift_storeEnumTagMultiPayload(v585, v584, 1);
    v586 = sub_100008F88(&qword_1001403C0);
    v587 = sub_1000B85D8();
    v588 = sub_1000BA158(&qword_100140448, &qword_1001403C0);
    _ConditionalContent<>.init(storage:)(v585, v927, v586, v587, v588);
  }
  v590 = (uint64_t)v930;
  v589 = (uint64_t)v931;
  v591 = *(_QWORD *)(a1 + 192);
  LOBYTE(v1013[0]) = *(_BYTE *)(a1 + 184);
  *((_QWORD *)&v1013[0] + 1) = v591;
  State.wrappedValue.getter(v998, v975);
  v592 = LOBYTE(v998[0]);
  sub_1000B5544(a1, (uint64_t)v1013);
  if (v592 != 1)
  {
    sub_1000B5578((uint64_t)v1013);
    goto LABEL_49;
  }
  v593 = (void *)*((_QWORD *)&v1013[0] + 1);
  v594 = swift_getKeyPath(&unk_1000EE330);
  v595 = swift_getKeyPath(&unk_1000EE358);
  v596 = v593;
  static Published.subscript.getter(v998, v596, v594, v595);

  swift_release(v594);
  v597 = swift_release(v595);
  v598 = *(_QWORD *)&v998[0];
  if (!*(_QWORD *)&v998[0])
  {
LABEL_51:
    sub_1000B5578((uint64_t)v1013);
LABEL_52:
    sub_1000B5544(a1, (uint64_t)v998);
    v602 = swift_allocObject(&unk_100128D30, 232, 7);
    *(_QWORD *)(v602 + 224) = v1005;
    v603 = v1003;
    *(_OWORD *)(v602 + 176) = v1002;
    *(_OWORD *)(v602 + 192) = v603;
    *(_OWORD *)(v602 + 208) = v1004;
    v604 = v999;
    *(_OWORD *)(v602 + 112) = v998[6];
    *(_OWORD *)(v602 + 128) = v604;
    v605 = v1001;
    *(_OWORD *)(v602 + 144) = v1000;
    *(_OWORD *)(v602 + 160) = v605;
    v606 = v998[3];
    *(_OWORD *)(v602 + 48) = v998[2];
    *(_OWORD *)(v602 + 64) = v606;
    v607 = v998[5];
    *(_OWORD *)(v602 + 80) = v998[4];
    *(_OWORD *)(v602 + 96) = v607;
    v608 = v998[1];
    *(_OWORD *)(v602 + 16) = v998[0];
    *(_OWORD *)(v602 + 32) = v608;
    __chkstk_darwin(v602, v609);
    v877 = a1;
    v610 = sub_100008F88(&qword_100140460);
    v611 = sub_1000B89E4();
    Button.init(action:label:)(sub_1000B89D4, v602, sub_1000B89DC, &v876, v610, v611);
    v612 = sub_100008F88(&qword_100140450);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v612 - 8) + 56))(v590, 0, 1, v612);
    goto LABEL_53;
  }
  v997 = &OBJC_PROTOCOL___SFCollaborationCKShareItem;
  v599 = (void *)swift_dynamicCastObjCProtocolConditional(*(_QWORD *)&v998[0], 1, &v997, v597);
  if (!v599)
  {
    swift_unknownObjectRelease(v598);
    goto LABEL_51;
  }
  v600 = objc_msgSend(v599, "isServiceManatee");
  swift_unknownObjectRelease(v598);
  sub_1000B5578((uint64_t)v1013);
  if ((v600 & 1) == 0)
    goto LABEL_52;
LABEL_49:
  v601 = sub_100008F88(&qword_100140450);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v601 - 8) + 56))(v590, 1, 1, v601);
LABEL_53:
  v613 = v960;
  v614 = v946;
  sub_10000CC18(v960, v946, &qword_100140200);
  sub_10000CC18(v590, v589, &qword_100140198);
  v615 = v995;
  sub_10000CC18(v614, v995, &qword_100140200);
  v616 = sub_100008F88(&qword_100140458);
  sub_10000CC18(v589, v615 + *(int *)(v616 + 48), &qword_100140198);
  sub_10000CC5C(v590, &qword_100140198);
  sub_10000CC5C(v613, &qword_100140200);
  sub_10000CC5C(v589, &qword_100140198);
  sub_10000CC5C(v614, &qword_100140200);
  v617 = sub_100008F88(&qword_100140280);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v617 - 8) + 56))(v615, 0, 1, v617);
  sub_10000CBD4(v615, v993, &qword_100140208);
  v258 = v990;
LABEL_54:
  v618 = *(_QWORD *)(a1 + 144);
  v619 = *(_QWORD *)(a1 + 152);
  sub_10000904C(v258, v618);
  v620 = sub_1000790FC(v618, v619);
  if (v620)
  {
    v621 = *(_QWORD *)(a1 + 192);
    LOBYTE(v1013[0]) = *(_BYTE *)(a1 + 184);
    *((_QWORD *)&v1013[0] + 1) = v621;
    State.wrappedValue.getter(v998, v975);
    v622 = *(_QWORD *)(a1 + 160);
    if (LOBYTE(v998[0]) == 1)
    {
      *(_QWORD *)&v998[0] = *(_QWORD *)(a1 + 160);
      v623 = swift_getKeyPath(&unk_1000EE270);
      sub_1000B5544(a1, (uint64_t)v1013);
      v624 = swift_allocObject(&unk_100128D08, 232, 7);
      v625 = v1013[11];
      *(_OWORD *)(v624 + 176) = v1013[10];
      *(_OWORD *)(v624 + 192) = v625;
      *(_OWORD *)(v624 + 208) = v1013[12];
      *(_QWORD *)(v624 + 224) = *(_QWORD *)&v1013[13];
      v626 = v1013[7];
      *(_OWORD *)(v624 + 112) = v1013[6];
      *(_OWORD *)(v624 + 128) = v626;
      v627 = v1013[9];
      *(_OWORD *)(v624 + 144) = v1013[8];
      *(_OWORD *)(v624 + 160) = v627;
      v628 = v1013[3];
      *(_OWORD *)(v624 + 48) = v1013[2];
      *(_OWORD *)(v624 + 64) = v628;
      v629 = v1013[5];
      *(_OWORD *)(v624 + 80) = v1013[4];
      *(_OWORD *)(v624 + 96) = v629;
      v630 = v1013[1];
      *(_OWORD *)(v624 + 16) = v1013[0];
      *(_OWORD *)(v624 + 32) = v630;
      swift_bridgeObjectRetain(v622);
      v631 = sub_100008F88(&qword_100140290);
      v632 = sub_100008F88(&qword_100140340);
      v633 = sub_10000CB94(&qword_100140298, &qword_100140290, (uint64_t)&protocol conformance descriptor for [A]);
      v634 = sub_1000B7980(&qword_100140348, &qword_100140340, (void (*)(void))sub_1000B8288, (uint64_t)&protocol conformance descriptor for <A> A?);
      ForEach<>.init(_:id:content:)(v998, v623, sub_1000B8280, v624, v631, v632, v633, &protocol witness table for ObjectIdentifier, v634);
      v635 = v926;
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 4);
      v636._countAndFlagsBits = 0;
      v636._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v636);
      v637 = v957;
      v638 = String.LocalizationValue.init(stringLiteral:)(0x53415F4552414853, 0xE800000000000000);
      v639 = v958;
      static Locale.current.getter(v638);
      v640._countAndFlagsBits = String.init(localized:table:bundle:locale:comment:)(v637, 0, 0, 0, v639, 0, 0, 256);
      object = (_TtC9AirDropUI33AirDropTransferSessionsController *)v640._object;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v640);
      swift_bridgeObjectRelease(object, v642, v643, v644, v645, v646, v647, v648);
      v649._countAndFlagsBits = 32;
      v649._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v649);
      sub_100009008((uint64_t)v258, (uint64_t)v1013);
      v650 = sub_100008F88((uint64_t *)&unk_1001403A0);
      v651 = sub_100018D44(0, (unint64_t *)&unk_10013EBF0, &off_100122DA0);
      if ((swift_dynamicCast(v998, v1013, v650, v651, 6) & 1) != 0)
      {
        v652 = *(void **)&v998[0];
        v653 = objc_msgSend(*(id *)&v998[0], "content");

        v654 = objc_msgSend(v653, "initiatorNameComponents");
        if (v654)
        {
          v655 = v880;
          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v654);

          v656 = type metadata accessor for PersonNameComponents(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v656 - 8) + 56))(v655, 0, 1, v656);
          v657 = (uint64_t)v655;
        }
        else
        {
          v656 = type metadata accessor for PersonNameComponents(0);
          v732 = v880;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v656 - 8) + 56))(v880, 1, 1, v656);
          v657 = (uint64_t)v732;
        }
        v733 = v881;
        sub_10000CBD4(v657, v881, &qword_100140170);
        type metadata accessor for PersonNameComponents(0);
        v734 = *(_QWORD *)(v656 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v734 + 48))(v733, 1, v656) == 1)
        {
          sub_10000CC5C(v733, &qword_100140170);
          v730 = 0;
          v731 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        }
        else
        {
          v735 = PersonNameComponents.givenName.getter();
          v736 = v733;
          v738 = v737;
          (*(void (**)(uint64_t, uint64_t))(v734 + 8))(v736, v656);
          if (v738)
            v730 = v735;
          else
            v730 = 0;
          if (v738)
            v731 = v738;
          else
            v731 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
          v635 = v926;
        }
        v258 = v990;
      }
      else
      {
        v730 = 0;
        v731 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
      }
      v739 = v731;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v730);
      swift_bridgeObjectRelease(v731, v740, v741, v742, v743, v744, v745, v746);
      v747._countAndFlagsBits = 32;
      v747._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v747);
      sub_100009008((uint64_t)v258, (uint64_t)v1013);
      if ((swift_dynamicCast(v998, v1013, v650, v651, 6) & 1) != 0)
      {
        v748 = *(void **)&v998[0];
        v749 = objc_msgSend(*(id *)&v998[0], "content");

        v750 = objc_msgSend(v749, "initiatorNameComponents");
        if (v750)
        {
          v751 = (uint64_t)v882;
          static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)(v750);

          v752 = type metadata accessor for PersonNameComponents(0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v752 - 8) + 56))(v751, 0, 1, v752);
        }
        else
        {
          v752 = type metadata accessor for PersonNameComponents(0);
          v751 = (uint64_t)v882;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v752 - 8) + 56))(v882, 1, 1, v752);
        }
        v755 = v883;
        sub_10000CBD4(v751, v883, &qword_100140170);
        type metadata accessor for PersonNameComponents(0);
        v756 = *(_QWORD *)(v752 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v756 + 48))(v755, 1, v752) == 1)
        {
          sub_10000CC5C(v755, &qword_100140170);
          v753 = 0;
          v754 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        }
        else
        {
          v757 = PersonNameComponents.familyName.getter();
          v758 = v755;
          v760 = v759;
          (*(void (**)(uint64_t, uint64_t))(v756 + 8))(v758, v752);
          if (v760)
            v753 = v757;
          else
            v753 = 0;
          if (v760)
            v754 = v760;
          else
            v754 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
          v635 = v926;
        }
      }
      else
      {
        v753 = 0;
        v754 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
      }
      v761 = v754;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v753);
      swift_bridgeObjectRelease(v754, v762, v763, v764, v765, v766, v767, v768);
      v769._countAndFlagsBits = 10272;
      v769._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v769);
      sub_100009008((uint64_t)v258, (uint64_t)v1013);
      if ((swift_dynamicCast(v998, v1013, v650, v651, 6) & 1) != 0
        && (v770 = *(void **)&v998[0],
            v771 = objc_msgSend(*(id *)&v998[0], "content"),
            v770,
            v772 = objc_msgSend(v771, "initiatorHandle"),
            v771,
            v772))
      {
        v773 = static String._unconditionallyBridgeFromObjectiveC(_:)(v772);
        v775 = v774;

      }
      else
      {
        v773 = 0;
        v775 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
      }
      v776._countAndFlagsBits = v773;
      v776._object = v775;
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v776);
      swift_bridgeObjectRelease(v775, v777, v778, v779, v780, v781, v782, v783);
      v784._countAndFlagsBits = 41;
      v784._object = (void *)0xE100000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v784);
      v785 = LocalizedStringKey.init(stringInterpolation:)(v635);
      v878 = 256;
      v877 = 0;
      v972 = (char *)Text.init(_:tableName:bundle:comment:)(v785);
      v971 = v786;
      v788 = v787;
      v990 = v789;
      LODWORD(v975) = static Edge.Set.top.getter(v972);
      v790 = EdgeInsets.init(_all:)(9.0);
      v792 = v791;
      v794 = v793;
      v796 = v795;
      LODWORD(v989) = static Edge.Set.bottom.getter(v797);
      v974 = EdgeInsets.init(_all:)(16.0);
      v973 = v798;
      v800 = v799;
      v802 = v801;
      v1012 = v788 & 1;
      v1010 = 0;
      v1007 = 0;
      v970 = (char *)static Font.caption.getter();
      v969 = swift_getKeyPath(&unk_1000EE298);
      LODWORD(v957) = v1012;
      LODWORD(v958) = v1010;
      LODWORD(v967) = v1007;
      LODWORD(v968) = static HierarchicalShapeStyle.primary.getter();
      v966 = swift_getKeyPath(&unk_1000EE2C8);
      v960 = swift_getKeyPath(&unk_1000EE2F8);
      v803 = *(void **)(a1 + 8);
      v804 = swift_getKeyPath(&unk_1000EDFD0);
      v805 = swift_getKeyPath(&unk_1000EDFF8);
      v806 = a1;
      v807 = v803;
      v808 = v915;
      static Published.subscript.getter(v915, v807, v804, v805);
      swift_release(v804);
      v809 = swift_release(v805);
      v810 = v983;
      v811 = v996;
      LODWORD(v804) = v996(v808, 1, v983, v809);
      sub_10000CC5C((uint64_t)v808, &qword_10013FE60);

      v812 = 0.0;
      if ((_DWORD)v804 == 1)
        v813 = 0.0;
      else
        v813 = 10.0;
      v1006 = 0;
      v814 = *(void **)(v806 + 8);
      v815 = swift_getKeyPath(&unk_1000EDFD0);
      v816 = swift_getKeyPath(&unk_1000EDFF8);
      v817 = v814;
      v818 = v916;
      static Published.subscript.getter(v916, v817, v815, v816);
      swift_release(v815);
      v819 = swift_release(v816);
      LODWORD(v815) = v811(v818, 1, v810, v819);
      sub_10000CC5C((uint64_t)v818, &qword_10013FE60);

      if ((_DWORD)v815 == 1)
        v812 = 1.0;
      v821 = v1006;
      v822 = static Animation.spring(response:dampingFraction:blendDuration:)(v820, 0.5, 1.0, 0.0);
      v823 = *(void **)(v806 + 8);
      v824 = swift_getKeyPath(&unk_1000EDFD0);
      v825 = swift_getKeyPath(&unk_1000EDFF8);
      v826 = v823;
      v827 = v917;
      static Published.subscript.getter(v917, v826, v824, v825);
      swift_release(v824);
      v828 = swift_release(v825);
      LOBYTE(v825) = v811(v827, 1, v810, v828) != 1;
      sub_10000CC5C((uint64_t)v827, &qword_10013FE60);

      v829 = swift_getKeyPath(&unk_1000EE1B0);
      v830 = (uint64_t)v959;
      *v959 = v829;
      v831 = sub_100008F88(&qword_1001403B0);
      swift_storeEnumTagMultiPayload(v830, v831, 0);
      v832 = v961;
      sub_1000B6B18(v830, (uint64_t)v961, type metadata accessor for VibrancyEffectModifier);
      v833 = (uint64_t)v919;
      sub_10000C484((uint64_t)v832, (uint64_t)&v919[*(int *)(v918 + 36)], type metadata accessor for VibrancyEffectModifier);
      v834 = v971;
      *(_QWORD *)v833 = v972;
      *(_QWORD *)(v833 + 8) = v834;
      *(_BYTE *)(v833 + 16) = (_BYTE)v957;
      *(_DWORD *)(v833 + 17) = v998[0];
      *(_DWORD *)(v833 + 20) = *(_DWORD *)((char *)v998 + 3);
      *(_QWORD *)(v833 + 24) = v990;
      *(_BYTE *)(v833 + 32) = v975;
      *(_DWORD *)(v833 + 33) = *(_DWORD *)v1011;
      *(_DWORD *)(v833 + 36) = *(_DWORD *)&v1011[3];
      *(double *)(v833 + 40) = v790;
      *(_QWORD *)(v833 + 48) = v792;
      *(_QWORD *)(v833 + 56) = v794;
      *(_QWORD *)(v833 + 64) = v796;
      *(_BYTE *)(v833 + 72) = (_BYTE)v958;
      *(_DWORD *)(v833 + 76) = *(_DWORD *)&v1009[3];
      *(_DWORD *)(v833 + 73) = *(_DWORD *)v1009;
      *(_BYTE *)(v833 + 80) = v989;
      *(_DWORD *)(v833 + 84) = *(_DWORD *)&v1008[3];
      *(_DWORD *)(v833 + 81) = *(_DWORD *)v1008;
      v835 = v973;
      *(double *)(v833 + 88) = v974;
      *(_QWORD *)(v833 + 96) = v835;
      *(_QWORD *)(v833 + 104) = v800;
      *(_QWORD *)(v833 + 112) = v802;
      *(_BYTE *)(v833 + 120) = v967;
      *(_DWORD *)(v833 + 121) = v1013[0];
      *(_DWORD *)(v833 + 124) = *(_DWORD *)((char *)v1013 + 3);
      v836 = v970;
      *(_QWORD *)(v833 + 128) = v969;
      *(_QWORD *)(v833 + 136) = v836;
      *(_DWORD *)(v833 + 144) = v968;
      *(_QWORD *)(v833 + 152) = v966;
      *(_BYTE *)(v833 + 160) = 1;
      *(_QWORD *)(v833 + 168) = v960;
      *(_QWORD *)(v833 + 176) = 2;
      *(_BYTE *)(v833 + 184) = v821;
      *(double *)(v833 + 192) = v813;
      *(_BYTE *)(v833 + 200) = 0;
      *(double *)(v833 + 208) = v812;
      *(_QWORD *)(v833 + 216) = v822;
      *(_BYTE *)(v833 + 224) = v825;
      sub_10000C4C8((uint64_t)v832, type metadata accessor for VibrancyEffectModifier);
      v837 = v924;
      sub_10000CBD4(v833, v924, &qword_100140178);
      v839 = v920;
      v838 = v921;
      v840 = *(void (**)(char *, char *, uint64_t))(v921 + 16);
      v841 = v932;
      v842 = v923;
      v840(v920, v932, v923);
      v843 = v922;
      sub_10000CC18(v837, v922, &qword_100140178);
      v844 = (uint64_t)v925;
      v840(v925, v839, v842);
      v845 = sub_100008F88(&qword_1001403B8);
      sub_10000CC18(v843, v844 + *(int *)(v845 + 48), &qword_100140178);
      sub_10000CC5C(v843, &qword_100140178);
      v846 = *(void (**)(char *, uint64_t))(v838 + 8);
      v846(v839, v842);
      v847 = v936;
      sub_10000CC18(v844, v936, &qword_100140168);
      swift_storeEnumTagMultiPayload(v847, v934, 0);
      v848 = sub_10000CB94(&qword_1001402B0, &qword_100140168, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v849 = sub_1000B7980(&qword_1001402B8, &qword_100140158, (void (*)(void))sub_1000B7F58, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
      v729 = (uint64_t)v933;
      _ConditionalContent<>.init(storage:)(v847, v935, v937, v848, v849);
      sub_10000CC5C(v844, &qword_100140168);
      sub_10000CC5C(v837, &qword_100140178);
      v846(v841, v842);
    }
    else
    {
      *(_QWORD *)&v998[0] = *(_QWORD *)(a1 + 160);
      v711 = swift_getKeyPath(&unk_1000EE270);
      sub_1000B5544(a1, (uint64_t)v1013);
      v712 = swift_allocObject(&unk_100128CE0, 232, 7);
      v713 = v1013[11];
      *(_OWORD *)(v712 + 176) = v1013[10];
      *(_OWORD *)(v712 + 192) = v713;
      *(_OWORD *)(v712 + 208) = v1013[12];
      *(_QWORD *)(v712 + 224) = *(_QWORD *)&v1013[13];
      v714 = v1013[7];
      *(_OWORD *)(v712 + 112) = v1013[6];
      *(_OWORD *)(v712 + 128) = v714;
      v715 = v1013[9];
      *(_OWORD *)(v712 + 144) = v1013[8];
      *(_OWORD *)(v712 + 160) = v715;
      v716 = v1013[3];
      *(_OWORD *)(v712 + 48) = v1013[2];
      *(_OWORD *)(v712 + 64) = v716;
      v717 = v1013[5];
      *(_OWORD *)(v712 + 80) = v1013[4];
      *(_OWORD *)(v712 + 96) = v717;
      v718 = v1013[1];
      *(_OWORD *)(v712 + 16) = v1013[0];
      *(_OWORD *)(v712 + 32) = v718;
      swift_bridgeObjectRetain(v622);
      v719 = sub_100008F88(&qword_100140290);
      v720 = sub_100008F88(&qword_1001402C8);
      v721 = sub_10000CB94(&qword_100140298, &qword_100140290, (uint64_t)&protocol conformance descriptor for [A]);
      v722 = sub_1000B7F58();
      v723 = v913;
      ForEach<>.init(_:id:content:)(v998, v711, sub_1000B8274, v712, v719, v720, v721, &protocol witness table for ObjectIdentifier, v722);
      v724 = v914;
      v726 = v936;
      v725 = v937;
      (*(void (**)(uint64_t, char *, uint64_t))(v914 + 16))(v936, v723, v937);
      swift_storeEnumTagMultiPayload(v726, v934, 1);
      v727 = sub_10000CB94(&qword_1001402B0, &qword_100140168, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v728 = sub_1000B7980(&qword_1001402B8, &qword_100140158, (void (*)(void))sub_1000B7F58, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
      v729 = (uint64_t)v933;
      _ConditionalContent<>.init(storage:)(v726, v935, v725, v727, v728);
      (*(void (**)(char *, uint64_t))(v724 + 8))(v723, v725);
    }
    v850 = v965;
    v851 = v964;
    v852 = v963;
    v709 = v984;
    v853 = v962;
    v703 = &qword_100140188;
    sub_10000CC18(v729, v964, &qword_100140188);
    swift_storeEnumTagMultiPayload(v851, v852, 0);
    v854 = sub_1000B7EB4();
    v855 = sub_1000B8084();
    _ConditionalContent<>.init(storage:)(v851, v853, v850, v854, v855);
    v710 = v729;
  }
  else
  {
    v658 = static VerticalAlignment.center.getter(v620);
    v659 = (uint64_t)v951;
    *v951 = v658;
    *(_QWORD *)(v659 + 8) = 0;
    *(_BYTE *)(v659 + 16) = 1;
    v990 = (_QWORD *)(v659 + *(int *)(sub_100008F88(&qword_100140288) + 44));
    *(_QWORD *)&v998[0] = *(_QWORD *)(a1 + 160);
    v660 = *(_QWORD *)&v998[0];
    v661 = swift_getKeyPath(&unk_1000EE270);
    sub_1000B5544(a1, (uint64_t)v1013);
    v662 = swift_allocObject(&unk_100128CB8, 232, 7);
    v663 = v1013[11];
    *(_OWORD *)(v662 + 176) = v1013[10];
    *(_OWORD *)(v662 + 192) = v663;
    *(_OWORD *)(v662 + 208) = v1013[12];
    *(_QWORD *)(v662 + 224) = *(_QWORD *)&v1013[13];
    v664 = v1013[7];
    *(_OWORD *)(v662 + 112) = v1013[6];
    *(_OWORD *)(v662 + 128) = v664;
    v665 = v1013[9];
    *(_OWORD *)(v662 + 144) = v1013[8];
    *(_OWORD *)(v662 + 160) = v665;
    v666 = v1013[3];
    *(_OWORD *)(v662 + 48) = v1013[2];
    *(_OWORD *)(v662 + 64) = v666;
    v667 = v1013[5];
    *(_OWORD *)(v662 + 80) = v1013[4];
    *(_OWORD *)(v662 + 96) = v667;
    v668 = v1013[1];
    *(_OWORD *)(v662 + 16) = v1013[0];
    *(_OWORD *)(v662 + 32) = v668;
    swift_bridgeObjectRetain(v660);
    v669 = sub_100008F88(&qword_100140290);
    v670 = type metadata accessor for ShareableContentActionButton(0);
    v671 = v996;
    v672 = sub_10000CB94(&qword_100140298, &qword_100140290, (uint64_t)&protocol conformance descriptor for [A]);
    v673 = sub_100008694(&qword_1001402A0, type metadata accessor for ShareableContentActionButton, (uint64_t)&unk_1000EE5DC);
    ForEach<>.init(_:id:content:)(v998, v661, sub_1000B7E98, v662, v669, v670, v672, &protocol witness table for ObjectIdentifier, v673);
    v674 = *(void **)(a1 + 8);
    v675 = swift_getKeyPath(&unk_1000EDFD0);
    v676 = swift_getKeyPath(&unk_1000EDFF8);
    v677 = v674;
    v678 = v947;
    static Published.subscript.getter(v947, v677, v675, v676);
    swift_release(v675);
    v679 = swift_release(v676);
    v680 = v983;
    LODWORD(v676) = v671(v678, 1, v983, v679);
    sub_10000CC5C((uint64_t)v678, &qword_10013FE60);

    v681 = 0.0;
    if ((_DWORD)v676 == 1)
      v682 = 0.0;
    else
      v682 = 10.0;
    v683 = v953;
    sub_10000CC18(v659, v953, &qword_100140130);
    v684 = v683 + *(int *)(v950 + 36);
    *(double *)v684 = v682;
    *(_BYTE *)(v684 + 8) = 0;
    sub_10000CC5C(v659, &qword_100140130);
    v685 = *(void **)(a1 + 8);
    v686 = swift_getKeyPath(&unk_1000EDFD0);
    v687 = swift_getKeyPath(&unk_1000EDFF8);
    v688 = v685;
    v689 = v948;
    static Published.subscript.getter(v948, v688, v686, v687);
    swift_release(v686);
    v690 = swift_release(v687);
    LODWORD(v686) = v671(v689, 1, v680, v690);
    sub_10000CC5C((uint64_t)v689, &qword_10013FE60);

    if ((_DWORD)v686 == 1)
      v681 = 1.0;
    v691 = v955;
    sub_10000CC18(v683, v955, &qword_100140138);
    *(double *)(v691 + *(int *)(v952 + 36)) = v681;
    v692 = sub_10000CC5C(v683, &qword_100140138);
    v693 = static Animation.spring(response:dampingFraction:blendDuration:)(v692, 0.5, 1.0, 0.0);
    v694 = *(void **)(a1 + 8);
    v695 = swift_getKeyPath(&unk_1000EDFD0);
    v696 = swift_getKeyPath(&unk_1000EDFF8);
    v697 = v694;
    v698 = v949;
    static Published.subscript.getter(v949, v697, v695, v696);
    swift_release(v695);
    v699 = swift_release(v696);
    LOBYTE(v695) = v996(v698, 1, v680, v699) != 1;
    sub_10000CC5C((uint64_t)v698, &qword_10013FE60);

    v700 = v954;
    sub_10000CC18(v691, v954, &qword_100140140);
    v701 = v965;
    v702 = v700 + *(int *)(v965 + 36);
    *(_QWORD *)v702 = v693;
    *(_BYTE *)(v702 + 8) = v695;
    sub_10000CC5C(v691, &qword_100140140);
    v703 = &qword_100140148;
    v704 = v700;
    v705 = v956;
    sub_10000CBD4(v704, v956, &qword_100140148);
    v706 = v964;
    sub_10000CC18(v705, v964, &qword_100140148);
    swift_storeEnumTagMultiPayload(v706, v963, 1);
    v707 = sub_1000B7EB4();
    v708 = sub_1000B8084();
    v709 = v984;
    _ConditionalContent<>.init(storage:)(v706, v962, v701, v707, v708);
    v710 = v705;
  }
  sub_10000CC5C(v710, v703);
  v856 = v986;
  sub_10000CC18(v992, v986, &qword_100140238);
  v857 = v987;
  sub_10000CC18(v994, v987, &qword_100140218);
  sub_10000CC18((uint64_t)v1014, (uint64_t)v1013, &qword_100140330);
  sub_10000CC18(v993, v995, &qword_100140208);
  sub_10000CC18(v709, v988, &qword_100140190);
  v858 = v982;
  sub_10000CC18(v856, v982, &qword_100140238);
  v859 = (int *)sub_100008F88(&qword_100140338);
  v860 = v858 + v859[12];
  *(_QWORD *)v860 = 0x4040000000000000;
  *(_BYTE *)(v860 + 8) = 0;
  sub_10000CC18(v857, v858 + v859[16], &qword_100140218);
  sub_10000CC18((uint64_t)v1013, v858 + v859[20], &qword_100140330);
  v861 = v858 + v859[24];
  v862 = v981;
  v863 = v980;
  *(_QWORD *)v861 = v981;
  *(_QWORD *)(v861 + 8) = v863;
  v864 = (char)v978;
  v865 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v979;
  *(_QWORD *)(v861 + 16) = v978;
  *(_QWORD *)(v861 + 24) = v865;
  v866 = v991;
  *(_QWORD *)(v861 + 32) = v991;
  *(_QWORD *)(v861 + 40) = 0;
  *(_QWORD *)&v991 = v866;
  v867 = v976;
  v868 = v985;
  *(_QWORD *)(v861 + 48) = v976;
  *(_QWORD *)(v861 + 56) = v868;
  v869 = v977;
  *(_BYTE *)(v861 + 64) = v977;
  sub_10000CC18(v995, v858 + v859[28], &qword_100140208);
  v870 = v858 + v859[32];
  *(_QWORD *)v870 = 0x4040000000000000;
  *(_BYTE *)(v870 + 8) = 0;
  v871 = v858 + v859[36];
  v872 = v988;
  sub_10000CC18(v988, v871, &qword_100140190);
  LOBYTE(v877) = v869;
  v873 = v866;
  v874 = v985;
  sub_1000B81F8((uint64_t)v862, v863, v864, (uint64_t)v865, v873, 0, v867, (uint64_t)v985);
  sub_10000CC5C(v984, &qword_100140190);
  sub_10000CC5C(v993, &qword_100140208);
  sub_10000CC5C((uint64_t)v1014, &qword_100140330);
  sub_10000CC5C(v994, &qword_100140218);
  sub_10000CC5C(v992, &qword_100140238);
  sub_10000CC5C(v872, &qword_100140190);
  sub_10000CC5C(v995, &qword_100140208);
  LOBYTE(v877) = v869;
  sub_1000B8234((uint64_t)v862, v863, v864, v865, v991, 0, v867, (uint64_t)v874);
  sub_10000CC5C((uint64_t)v1013, &qword_100140330);
  sub_10000CC5C(v987, &qword_100140218);
  return sub_10000CC5C(v986, &qword_100140238);
}

uint64_t sub_1000AF478(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[9];
  uint64_t v4;

  if ((*(_QWORD *)(result + 88) & 0x8000000000000000) == 0)
  {
    v1 = *(_QWORD *)(result + 208);
    v3[1] = *(_BYTE *)(result + 200);
    v4 = v1;
    v3[0] = 0;
    v2 = sub_100008F88(&qword_10013FFD8);
    return State.wrappedValue.setter(v3, v2);
  }
  return result;
}

uint64_t sub_1000AF4D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(result + 160);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = result;
    v4 = result + 120;
    sub_100009008(v1 + 40 * v2 - 8, (uint64_t)v10);
    v5 = *(void **)(v3 + 8);
    v6 = v11;
    v7 = v12;
    v8 = (char *)sub_10000904C(v10, v11);
    v9 = v5;
    sub_10004BD9C(v8, v4, 0, v9, v6, v7);

    return sub_100009070(v10);
  }
  return result;
}

uint64_t sub_1000AF570@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v50 = a2;
  v49 = sub_100008F88(&qword_100140578);
  v3 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49, v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v47 - v9;
  v11 = sub_100008F88(&qword_100140580);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v47 - v18;
  sub_1000B5544(a1, (uint64_t)&v51);
  v20 = swift_allocObject(&unk_100128D58, 232, 7);
  v21 = v62;
  *(_OWORD *)(v20 + 176) = v61;
  *(_OWORD *)(v20 + 192) = v21;
  *(_OWORD *)(v20 + 208) = v63;
  *(_QWORD *)(v20 + 224) = v64;
  v22 = v58;
  *(_OWORD *)(v20 + 112) = v57;
  *(_OWORD *)(v20 + 128) = v22;
  v23 = v60;
  *(_OWORD *)(v20 + 144) = v59;
  *(_OWORD *)(v20 + 160) = v23;
  v24 = v54;
  *(_OWORD *)(v20 + 48) = v53;
  *(_OWORD *)(v20 + 64) = v24;
  v25 = v56;
  *(_OWORD *)(v20 + 80) = v55;
  *(_OWORD *)(v20 + 96) = v25;
  v26 = v52;
  *(_OWORD *)(v20 + 16) = v51;
  *(_OWORD *)(v20 + 32) = v26;
  v27 = sub_1000B8CDC();
  v48 = v19;
  Button.init(action:label:)(sub_1000B8DB8, v20, nullsub_1, 0, &type metadata for CollaborateButtonView, v27);
  sub_1000B5544(a1, (uint64_t)&v51);
  v28 = swift_allocObject(&unk_100128D80, 232, 7);
  v29 = v62;
  *(_OWORD *)(v28 + 176) = v61;
  *(_OWORD *)(v28 + 192) = v29;
  *(_OWORD *)(v28 + 208) = v63;
  *(_QWORD *)(v28 + 224) = v64;
  v30 = v58;
  *(_OWORD *)(v28 + 112) = v57;
  *(_OWORD *)(v28 + 128) = v30;
  v31 = v60;
  *(_OWORD *)(v28 + 144) = v59;
  *(_OWORD *)(v28 + 160) = v31;
  v32 = v54;
  *(_OWORD *)(v28 + 48) = v53;
  *(_OWORD *)(v28 + 64) = v32;
  v33 = v56;
  *(_OWORD *)(v28 + 80) = v55;
  *(_OWORD *)(v28 + 96) = v33;
  v34 = v52;
  *(_OWORD *)(v28 + 16) = v51;
  *(_OWORD *)(v28 + 32) = v34;
  v35 = sub_1000B8D20();
  Button.init(action:label:)(sub_1000B8DC4, v28, nullsub_1, 0, &type metadata for SendCopyButtonView, v35);
  v36 = v12;
  v37 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v37(v15, v19, v11);
  v38 = v3;
  v39 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v40 = v6;
  v41 = v49;
  v39(v6, v10, v49);
  v42 = v50;
  v37(v50, v15, v11);
  v43 = sub_100008F88(&qword_100140588);
  v39(&v42[*(int *)(v43 + 48)], v40, v41);
  v44 = *(void (**)(char *, uint64_t))(v38 + 8);
  v44(v10, v41);
  v45 = *(void (**)(char *, uint64_t))(v36 + 8);
  v45(v48, v11);
  v44(v40, v41);
  return ((uint64_t (*)(char *, uint64_t))v45)(v15, v11);
}

uint64_t sub_1000AF880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 192);
  v4[1] = *(_BYTE *)(a1 + 184);
  v5 = v1;
  v4[0] = 1;
  v2 = sub_100008F88(&qword_100140128);
  return State.wrappedValue.setter(v4, v2);
}

uint64_t sub_1000AF8D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 192);
  v4[1] = *(_BYTE *)(a1 + 184);
  v5 = v1;
  v4[0] = 0;
  v2 = sub_100008F88(&qword_100140128);
  return State.wrappedValue.setter(v4, v2);
}

uint64_t sub_1000AF924@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;

  v7 = *(_BYTE *)(a1 + 184);
  v3 = sub_100008F88(&qword_100140128);
  State.wrappedValue.getter(&v8, v3);
  LOBYTE(v8) = v8 != 1;
  v4 = sub_1000B8CDC();
  v5 = sub_1000B8D20();
  result = _ConditionalContent<>.init(storage:)(&v8, &type metadata for CollaborateButtonView, &type metadata for SendCopyButtonView, v4, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1000AF9C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 208);
  v4[1] = *(_BYTE *)(a1 + 200);
  v5 = v1;
  v4[0] = 1;
  v2 = sub_100008F88(&qword_10013FFD8);
  return State.wrappedValue.setter(v4, v2);
}

uint64_t sub_1000AFA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  void *v44;
  uint64_t KeyPath;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD *, uint64_t, uint64_t);
  double v50;
  double v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  _QWORD *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  _OWORD v82[3];

  v81 = a2;
  v3 = type metadata accessor for VibrancyEffectModifier(0);
  __chkstk_darwin(v3, v4);
  v80 = (uint64_t *)((char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v6, v7);
  v79 = (_QWORD **)((char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9, v10);
  v72 = (_QWORD **)((char *)&v72 - v11);
  __chkstk_darwin(v12, v13);
  v15 = (_QWORD **)((char *)&v72 - v14);
  v16 = sub_100008F88(&qword_1001404C8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_1001404B8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100008F88(&qword_1001404A8);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100008F88(&qword_100140498);
  __chkstk_darwin(v73, v28);
  v30 = (char *)&v72 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100008F88(&qword_100140488);
  __chkstk_darwin(v74, v31);
  v33 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100008F88(&qword_100140478);
  __chkstk_darwin(v76, v34);
  v75 = (uint64_t)&v72 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100008F88(&qword_100140460);
  __chkstk_darwin(v78, v36);
  v77 = (char *)&v72 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v19 = static VerticalAlignment.center.getter(v38);
  *((_QWORD *)v19 + 1) = 0x4008000000000000;
  v19[16] = 0;
  v39 = sub_100008F88((uint64_t *)&unk_100140590);
  sub_1000B0030((uint64_t *)&v19[*(int *)(v39 + 44)]);
  v40 = static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)(v82, 0x406CC00000000000, 0, 0x404E000000000000, 0, v40, v41);
  sub_10000CC18((uint64_t)v19, (uint64_t)v23, &qword_1001404C8);
  v42 = &v23[*(int *)(v20 + 36)];
  v43 = v82[1];
  *(_OWORD *)v42 = v82[0];
  *((_OWORD *)v42 + 1) = v43;
  *((_OWORD *)v42 + 2) = v82[2];
  sub_10000CC5C((uint64_t)v19, &qword_1001404C8);
  sub_10000CC18((uint64_t)v23, (uint64_t)v27, &qword_1001404B8);
  v27[*(int *)(v24 + 36)] = 0;
  sub_10000CC5C((uint64_t)v23, &qword_1001404B8);
  v44 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EDFD0);
  v46 = swift_getKeyPath(&unk_1000EDFF8);
  v47 = v44;
  static Published.subscript.getter(v15, v47, KeyPath, v46);
  swift_release(KeyPath);
  swift_release(v46);
  v48 = type metadata accessor for ContinuousClock.Instant(0);
  v49 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48);
  LODWORD(v46) = v49(v15, 1, v48);
  sub_10000CC5C((uint64_t)v15, &qword_10013FE60);

  v50 = 0.0;
  if ((_DWORD)v46 == 1)
    v51 = 0.0;
  else
    v51 = 10.0;
  sub_10000CC18((uint64_t)v27, (uint64_t)v30, &qword_1001404A8);
  v52 = &v30[*(int *)(v73 + 36)];
  *(double *)v52 = v51;
  v52[8] = 0;
  sub_10000CC5C((uint64_t)v27, &qword_1001404A8);
  v53 = swift_getKeyPath(&unk_1000EDFD0);
  v54 = swift_getKeyPath(&unk_1000EDFF8);
  v55 = v47;
  v56 = v72;
  static Published.subscript.getter(v72, v55, v53, v54);
  swift_release(v53);
  v57 = swift_release(v54);
  LODWORD(v53) = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v49)(v56, 1, v48, v57);
  sub_10000CC5C((uint64_t)v56, &qword_10013FE60);

  if ((_DWORD)v53 == 1)
    v50 = 1.0;
  sub_10000CC18((uint64_t)v30, (uint64_t)v33, &qword_100140498);
  *(double *)&v33[*(int *)(v74 + 36)] = v50;
  v58 = sub_10000CC5C((uint64_t)v30, &qword_100140498);
  v59 = static Animation.spring(response:dampingFraction:blendDuration:)(v58, 0.5, 1.0, 0.0);
  v60 = swift_getKeyPath(&unk_1000EDFD0);
  v61 = swift_getKeyPath(&unk_1000EDFF8);
  v62 = v55;
  v63 = v79;
  static Published.subscript.getter(v79, v62, v60, v61);
  swift_release(v60);
  v64 = swift_release(v61);
  LOBYTE(v60) = ((unsigned int (*)(_QWORD *, uint64_t, uint64_t, __n128))v49)(v63, 1, v48, v64) != 1;
  sub_10000CC5C((uint64_t)v63, &qword_10013FE60);

  v65 = v75;
  sub_10000CC18((uint64_t)v33, v75, &qword_100140488);
  v66 = v65 + *(int *)(v76 + 36);
  *(_QWORD *)v66 = v59;
  *(_BYTE *)(v66 + 8) = v60;
  sub_10000CC5C((uint64_t)v33, &qword_100140488);
  v67 = swift_getKeyPath(&unk_1000EE1B0);
  v68 = (uint64_t)v80;
  *v80 = v67;
  v69 = sub_100008F88(&qword_1001403B0);
  swift_storeEnumTagMultiPayload(v68, v69, 0);
  v70 = (uint64_t)v77;
  sub_1000B6B18(v68, (uint64_t)&v77[*(int *)(v78 + 36)], type metadata accessor for VibrancyEffectModifier);
  sub_10000CBD4(v65, v70, &qword_100140478);
  return sub_10000CBD4(v70, v81, &qword_100140460);
}

void sub_1000B0030(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _TtC9AirDropUI33AirDropTransferSessionsController *v42;
  uint64_t v43;
  char v44;
  SEL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t KeyPath;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _TtC9AirDropUI33AirDropTransferSessionsController *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD v99[3];

  v98 = a1;
  v93 = sub_100008F88((uint64_t *)&unk_100140C80);
  v2 = __chkstk_darwin(v93, v1);
  v92 = (uint64_t *)((char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for Image.Scale(0, v2);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  __chkstk_darwin(v4, v5);
  v84 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100008F88(&qword_1001405A0);
  __chkstk_darwin(v88, v7);
  v85 = (uint64_t *)((char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v95 = sub_100008F88(&qword_1001405A8);
  __chkstk_darwin(v95, v9);
  v94 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100008F88(&qword_1001405B0);
  __chkstk_darwin(v97, v11);
  v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v96 = (uint64_t)&v84 - v16;
  v99[0] = sub_1000AA64C();
  v99[1] = v17;
  v18 = sub_100044F4C();
  v19 = Text.init<A>(_:)(v99, &type metadata for String, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = static Font.subheadline.getter();
  v27 = Text.font(_:)(v26, v19, v21, v25, v23);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_release(v26);
  sub_100044F90(v19, v21, v25);
  swift_bridgeObjectRelease(v23, v34, v35, v36, v37, v38, v39, v40);
  LODWORD(v99[0]) = static HierarchicalShapeStyle.primary.getter();
  v41 = Text.foregroundStyle<A>(_:)(v99, v27, v29, v31 & 1, v33, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v90 = v42;
  v91 = v41;
  v89 = v43;
  LOBYTE(v19) = v44 & 1;
  sub_100044F90(v27, v29, v31 & 1);
  swift_bridgeObjectRelease(v33, v45, v46, v47, v48, v49, v50, v51);
  v52 = Image.init(systemName:)(0x2E6E6F7276656863, 0xED00007468676972);
  v54 = v86;
  v53 = v87;
  v55 = v84;
  (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v84, enum case for Image.Scale.small(_:), v87);
  KeyPath = swift_getKeyPath(&unk_1000EE3A8);
  v57 = v92;
  v58 = v53;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))((char *)v92 + *(int *)(v93 + 28), v55, v53);
  *v57 = KeyPath;
  v59 = v85;
  sub_10000CC18((uint64_t)v57, (uint64_t)v85 + *(int *)(v88 + 36), (uint64_t *)&unk_100140C80);
  *v59 = v52;
  swift_retain(v52);
  sub_10000CC5C((uint64_t)v57, (uint64_t *)&unk_100140C80);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v58);
  v60 = swift_release(v52);
  v61 = static Font.footnote.getter(v60);
  static Font.Weight.semibold.getter();
  v62 = Font.weight(_:)(v61);
  swift_release(v61);
  v63 = swift_getKeyPath(&unk_1000EE298);
  v64 = v94;
  sub_10000CC18((uint64_t)v59, v94, &qword_1001405A0);
  v65 = (uint64_t *)(v64 + *(int *)(v95 + 36));
  *v65 = v63;
  v65[1] = v62;
  sub_10000CC5C((uint64_t)v59, &qword_1001405A0);
  v66 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v67 = Color.init(_:)(v66);
  v68 = swift_getKeyPath(&unk_1000EE3D8);
  sub_10000CC18(v64, (uint64_t)v13, &qword_1001405A8);
  v69 = (uint64_t *)&v13[*(int *)(v97 + 36)];
  *v69 = v68;
  v69[1] = v67;
  sub_10000CC5C(v64, &qword_1001405A8);
  v70 = v96;
  sub_10000CBD4((uint64_t)v13, v96, &qword_1001405B0);
  sub_10000CC18(v70, (uint64_t)v13, &qword_1001405B0);
  v71 = v98;
  v72 = v90;
  v73 = v91;
  v74 = v89;
  *v98 = v91;
  v71[1] = v74;
  *((_BYTE *)v71 + 16) = v19;
  v71[3] = (uint64_t)v72;
  v75 = v71;
  v76 = sub_100008F88(&qword_1001405B8);
  sub_10000CC18((uint64_t)v13, (uint64_t)v75 + *(int *)(v76 + 48), &qword_1001405B0);
  sub_1000452A8(v73, v74, v19);
  swift_bridgeObjectRetain(v72);
  sub_10000CC5C(v70, &qword_1001405B0);
  sub_10000CC5C((uint64_t)v13, &qword_1001405B0);
  sub_100044F90(v73, v74, v19);
  swift_bridgeObjectRelease(v72, v77, v78, v79, v80, v81, v82, v83);
}

uint64_t sub_1000B0500@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1[3];
  sub_10000904C(a1, v3);
  result = sub_10000D1B4(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000B0548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t started;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t (**v60)();
  char v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void *v80;
  uint64_t KeyPath;
  uint64_t v82;
  id v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t (*v86)(_QWORD *, uint64_t, uint64_t);
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  _QWORD *v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  _QWORD *v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD v136[13];
  uint64_t v137;

  v130 = a2;
  v132 = a1;
  v135 = a3;
  v3 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v3, v4);
  v131 = (char **)((char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6, v7);
  v129 = (char **)((char *)&v116 - v8);
  __chkstk_darwin(v9, v10);
  v125 = (char **)((char *)&v116 - v11);
  v120 = type metadata accessor for LocalizedStringResource(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120, v12);
  v14 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for ShareableContentActionButton(0);
  __chkstk_darwin(v117, v15);
  v17 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100008F88(&qword_100140398);
  __chkstk_darwin(v118, v18);
  v20 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100008F88(&qword_100140388);
  __chkstk_darwin(v121, v21);
  v23 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100008F88(&qword_100140378);
  __chkstk_darwin(v122, v24);
  v124 = (uint64_t)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100008F88(&qword_100140368);
  __chkstk_darwin(v123, v26);
  v128 = (uint64_t)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100008F88(&qword_100140358);
  v134 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133, v28);
  v127 = (uint64_t)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v31);
  v126 = (uint64_t)&v116 - v32;
  v33 = sub_100008F88((uint64_t *)&unk_1001405C0);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v116 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for StartCollaborationAction(0);
  v38 = *(_QWORD *)(started - 8);
  v39 = *(_QWORD *)(v38 + 64);
  __chkstk_darwin(started, v40);
  v41 = (char *)&v116 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v45 = (char *)&v116 - v44;
  sub_100009008(v132, (uint64_t)v136);
  v46 = sub_100008F88(&qword_10013B848);
  v47 = swift_dynamicCast(v36, v136, v46, started, 6);
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  if ((v47 & 1) != 0)
  {
    v48(v36, 0, 1, started);
    v116 = v45;
    sub_1000B6B18((uint64_t)v36, (uint64_t)v45, type metadata accessor for StartCollaborationAction);
    LocalizedStringResource.init(stringLiteral:)(0x524F42414C4C4F43, 0xEB00000000455441);
    v49 = v130;
    sub_1000B5544(v130, (uint64_t)v136);
    sub_10000C484((uint64_t)v45, (uint64_t)v41, type metadata accessor for StartCollaborationAction);
    v50 = *(unsigned __int8 *)(v38 + 80);
    v51 = (v50 + 232) & ~v50;
    v52 = swift_allocObject(&unk_100128DA8, v51 + v39, v50 | 7);
    v53 = v136[11];
    *(_OWORD *)(v52 + 176) = v136[10];
    *(_OWORD *)(v52 + 192) = v53;
    *(_OWORD *)(v52 + 208) = v136[12];
    *(_QWORD *)(v52 + 224) = v137;
    v54 = v136[7];
    *(_OWORD *)(v52 + 112) = v136[6];
    *(_OWORD *)(v52 + 128) = v54;
    v55 = v136[9];
    *(_OWORD *)(v52 + 144) = v136[8];
    *(_OWORD *)(v52 + 160) = v55;
    v56 = v136[3];
    *(_OWORD *)(v52 + 48) = v136[2];
    *(_OWORD *)(v52 + 64) = v56;
    v57 = v136[5];
    *(_OWORD *)(v52 + 80) = v136[4];
    *(_OWORD *)(v52 + 96) = v57;
    v58 = v136[1];
    *(_OWORD *)(v52 + 16) = v136[0];
    *(_OWORD *)(v52 + 32) = v58;
    sub_1000B6B18((uint64_t)v41, v52 + v51, type metadata accessor for StartCollaborationAction);
    v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v119 + 32))(v17, v14, v120);
    v60 = (uint64_t (**)())&v17[*(int *)(v117 + 20)];
    *v60 = sub_1000B8F58;
    v60[1] = (uint64_t (*)())v52;
    v61 = static Edge.Set.leading.getter(v59);
    v62 = EdgeInsets.init(_all:)(22.0);
    v64 = v63;
    v66 = v65;
    v68 = v67;
    sub_10000C484((uint64_t)v17, (uint64_t)v20, type metadata accessor for ShareableContentActionButton);
    v69 = &v20[*(int *)(v118 + 36)];
    *v69 = v61;
    *((double *)v69 + 1) = v62;
    *((_QWORD *)v69 + 2) = v64;
    *((_QWORD *)v69 + 3) = v66;
    *((_QWORD *)v69 + 4) = v68;
    v69[40] = 0;
    v70 = sub_10000C4C8((uint64_t)v17, type metadata accessor for ShareableContentActionButton);
    v71 = static Edge.Set.trailing.getter(v70);
    v72 = EdgeInsets.init(_all:)(22.0);
    v74 = v73;
    v76 = v75;
    v78 = v77;
    sub_10000CC18((uint64_t)v20, (uint64_t)v23, &qword_100140398);
    v79 = &v23[*(int *)(v121 + 36)];
    *v79 = v71;
    *((double *)v79 + 1) = v72;
    *((_QWORD *)v79 + 2) = v74;
    *((_QWORD *)v79 + 3) = v76;
    *((_QWORD *)v79 + 4) = v78;
    v79[40] = 0;
    sub_10000CC5C((uint64_t)v20, &qword_100140398);
    v80 = *(void **)(v49 + 8);
    KeyPath = swift_getKeyPath(&unk_1000EDFD0);
    v82 = swift_getKeyPath(&unk_1000EDFF8);
    v83 = v80;
    v84 = v125;
    static Published.subscript.getter(v125, v83, KeyPath, v82);
    swift_release(KeyPath);
    swift_release(v82);
    v85 = type metadata accessor for ContinuousClock.Instant(0);
    v86 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48);
    LODWORD(KeyPath) = v86(v84, 1, v85);
    sub_10000CC5C((uint64_t)v84, &qword_10013FE60);

    v87 = 0.0;
    if ((_DWORD)KeyPath == 1)
      v88 = 0.0;
    else
      v88 = 10.0;
    v89 = v124;
    sub_10000CC18((uint64_t)v23, v124, &qword_100140388);
    v90 = v89 + *(int *)(v122 + 36);
    *(double *)v90 = v88;
    *(_BYTE *)(v90 + 8) = 0;
    sub_10000CC5C((uint64_t)v23, &qword_100140388);
    v91 = *(void **)(v49 + 8);
    v92 = swift_getKeyPath(&unk_1000EDFD0);
    v93 = swift_getKeyPath(&unk_1000EDFF8);
    v94 = v91;
    v95 = v129;
    static Published.subscript.getter(v129, v94, v92, v93);
    swift_release(v92);
    v96 = swift_release(v93);
    LODWORD(v92) = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v86)(v95, 1, v85, v96);
    sub_10000CC5C((uint64_t)v95, &qword_10013FE60);

    if ((_DWORD)v92 == 1)
      v87 = 1.0;
    v97 = v128;
    sub_10000CC18(v89, v128, &qword_100140378);
    *(double *)(v97 + *(int *)(v123 + 36)) = v87;
    v98 = sub_10000CC5C(v89, &qword_100140378);
    v99 = static Animation.spring(response:dampingFraction:blendDuration:)(v98, 0.5, 1.0, 0.0);
    v100 = *(void **)(v49 + 8);
    v101 = swift_getKeyPath(&unk_1000EDFD0);
    v102 = swift_getKeyPath(&unk_1000EDFF8);
    v103 = v100;
    v104 = v131;
    static Published.subscript.getter(v131, v103, v101, v102);
    swift_release(v101);
    v105 = swift_release(v102);
    LOBYTE(v102) = ((unsigned int (*)(_QWORD *, uint64_t, uint64_t, __n128))v86)(v104, 1, v85, v105) != 1;
    sub_10000CC5C((uint64_t)v104, &qword_10013FE60);

    v106 = v127;
    sub_10000CC18(v97, v127, &qword_100140368);
    v107 = v133;
    v108 = v106 + *(int *)(v133 + 36);
    *(_QWORD *)v108 = v99;
    *(_BYTE *)(v108 + 8) = v102;
    sub_10000CC5C(v97, &qword_100140368);
    sub_10000C4C8((uint64_t)v116, type metadata accessor for StartCollaborationAction);
    v109 = v126;
    sub_10000CBD4(v106, v126, &qword_100140358);
    v110 = v109;
    v111 = v135;
    sub_10000CBD4(v110, v135, &qword_100140358);
    v112 = 0;
    v113 = v111;
    v114 = v107;
  }
  else
  {
    v112 = 1;
    v48(v36, 1, 1, started);
    sub_10000CC5C((uint64_t)v36, (uint64_t *)&unk_1001405C0);
    v113 = v135;
    v114 = v133;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56))(v113, v112, 1, v114);
}

uint64_t sub_1000B0E4C(uint64_t a1, uint64_t a2)
{
  uint64_t started;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  void *v12;
  void *v14;
  _QWORD v15[5];

  started = type metadata accessor for StartCollaborationAction(0);
  __chkstk_darwin(started, v5);
  v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(a1 + 8);
  sub_10000C484(a2, (uint64_t)v7, type metadata accessor for StartCollaborationAction);
  sub_100009008(a1 + 120, (uint64_t)v15);
  KeyPath = swift_getKeyPath(&unk_1000EE1E0);
  v10 = swift_getKeyPath(&unk_1000EE208);
  v11 = v8;
  static Published.subscript.getter(&v14, v11, KeyPath, v10);

  swift_release(KeyPath);
  swift_release(v10);
  v12 = v14;
  sub_1000B592C((uint64_t)v7, (uint64_t)v15, v14, v11, type metadata accessor for StartCollaborationAction, &qword_10013ED28, (uint64_t)&unk_1000E95E0, (uint64_t)&unk_100128DD0, (uint64_t)&unk_10013D408);

  sub_100009070(v15);
  return sub_10000C4C8((uint64_t)v7, type metadata accessor for StartCollaborationAction);
}

uint64_t sub_1000B0F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t (**v55)();
  void *v56;
  uint64_t KeyPath;
  uint64_t v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD *, uint64_t, uint64_t);
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  _QWORD *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  _QWORD *v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD v110[13];
  uint64_t v111;

  v106 = a2;
  v109 = a3;
  v4 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v4, v5);
  v107 = (uint64_t *)((char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7, v8);
  v102 = (uint64_t *)((char *)&v92 - v9);
  __chkstk_darwin(v10, v11);
  v99 = (uint64_t *)((char *)&v92 - v12);
  v97 = type metadata accessor for LocalizedStringResource(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97, v13);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for ShareableContentActionButton(0);
  __chkstk_darwin(v95, v16);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008F88(&qword_1001402F8);
  __chkstk_darwin(v98, v19);
  v101 = (uint64_t)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100008F88(&qword_1001402E8);
  __chkstk_darwin(v100, v21);
  v105 = (uint64_t)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100008F88(&qword_1001402D8);
  v23 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108, v24);
  v104 = (uint64_t)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v103 = (uint64_t)&v92 - v28;
  v29 = sub_100008F88((uint64_t *)&unk_1001405F0);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for SendOverAirDropAction(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 64);
  __chkstk_darwin(v33, v36);
  v37 = (char *)&v92 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v39);
  v41 = (char *)&v92 - v40;
  sub_100009008(a1, (uint64_t)v110);
  v42 = sub_100008F88(&qword_10013B848);
  v43 = swift_dynamicCast(v32, v110, v42, v33, 6);
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  if ((v43 & 1) != 0)
  {
    v44(v32, 0, 1, v33);
    v93 = v41;
    sub_1000B6B18((uint64_t)v32, (uint64_t)v41, type metadata accessor for SendOverAirDropAction);
    LocalizedStringResource.init(stringLiteral:)(0x4552414853, 0xE500000000000000);
    v94 = v23;
    v45 = v106;
    sub_1000B5544(v106, (uint64_t)v110);
    sub_10000C484((uint64_t)v41, (uint64_t)v37, type metadata accessor for SendOverAirDropAction);
    v46 = *(unsigned __int8 *)(v34 + 80);
    v47 = (v46 + 232) & ~v46;
    v48 = swift_allocObject(&unk_100128DF8, v47 + v35, v46 | 7);
    v49 = v110[11];
    *(_OWORD *)(v48 + 176) = v110[10];
    *(_OWORD *)(v48 + 192) = v49;
    *(_OWORD *)(v48 + 208) = v110[12];
    *(_QWORD *)(v48 + 224) = v111;
    v50 = v110[7];
    *(_OWORD *)(v48 + 112) = v110[6];
    *(_OWORD *)(v48 + 128) = v50;
    v51 = v110[9];
    *(_OWORD *)(v48 + 144) = v110[8];
    *(_OWORD *)(v48 + 160) = v51;
    v52 = v110[3];
    *(_OWORD *)(v48 + 48) = v110[2];
    *(_OWORD *)(v48 + 64) = v52;
    v53 = v110[5];
    *(_OWORD *)(v48 + 80) = v110[4];
    *(_OWORD *)(v48 + 96) = v53;
    v54 = v110[1];
    *(_OWORD *)(v48 + 16) = v110[0];
    *(_OWORD *)(v48 + 32) = v54;
    sub_1000B6B18((uint64_t)v37, v48 + v47, type metadata accessor for SendOverAirDropAction);
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v18, v15, v97);
    v55 = (uint64_t (**)())&v18[*(int *)(v95 + 20)];
    *v55 = sub_1000B9064;
    v55[1] = (uint64_t (*)())v48;
    v56 = *(void **)(v45 + 8);
    KeyPath = swift_getKeyPath(&unk_1000EDFD0);
    v58 = swift_getKeyPath(&unk_1000EDFF8);
    v59 = v56;
    v60 = v99;
    static Published.subscript.getter(v99, v59, KeyPath, v58);
    swift_release(KeyPath);
    swift_release(v58);
    v61 = type metadata accessor for ContinuousClock.Instant(0);
    v62 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48);
    LODWORD(KeyPath) = v62(v60, 1, v61);
    sub_10000CC5C((uint64_t)v60, &qword_10013FE60);

    v63 = 0.0;
    if ((_DWORD)KeyPath == 1)
      v64 = 0.0;
    else
      v64 = 10.0;
    v65 = v101;
    sub_10000C484((uint64_t)v18, v101, type metadata accessor for ShareableContentActionButton);
    v66 = v65 + *(int *)(v98 + 36);
    *(double *)v66 = v64;
    *(_BYTE *)(v66 + 8) = 0;
    sub_10000C4C8((uint64_t)v18, type metadata accessor for ShareableContentActionButton);
    v67 = *(void **)(v45 + 8);
    v68 = swift_getKeyPath(&unk_1000EDFD0);
    v69 = swift_getKeyPath(&unk_1000EDFF8);
    v70 = v67;
    v71 = v102;
    static Published.subscript.getter(v102, v70, v68, v69);
    swift_release(v68);
    v72 = swift_release(v69);
    LODWORD(v68) = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, __n128))v62)(v71, 1, v61, v72);
    sub_10000CC5C((uint64_t)v71, &qword_10013FE60);

    if ((_DWORD)v68 == 1)
      v63 = 1.0;
    v73 = v105;
    sub_10000CC18(v65, v105, &qword_1001402F8);
    *(double *)(v73 + *(int *)(v100 + 36)) = v63;
    v74 = sub_10000CC5C(v65, &qword_1001402F8);
    v75 = static Animation.spring(response:dampingFraction:blendDuration:)(v74, 0.5, 1.0, 0.0);
    v76 = *(void **)(v45 + 8);
    v23 = v94;
    v77 = swift_getKeyPath(&unk_1000EDFD0);
    v78 = swift_getKeyPath(&unk_1000EDFF8);
    v79 = v76;
    v80 = v107;
    static Published.subscript.getter(v107, v79, v77, v78);
    swift_release(v77);
    v81 = swift_release(v78);
    LOBYTE(v78) = ((unsigned int (*)(_QWORD *, uint64_t, uint64_t, __n128))v62)(v80, 1, v61, v81) != 1;
    sub_10000CC5C((uint64_t)v80, &qword_10013FE60);

    v82 = v104;
    sub_10000CC18(v73, v104, &qword_1001402E8);
    v83 = v108;
    v84 = v82 + *(int *)(v108 + 36);
    *(_QWORD *)v84 = v75;
    *(_BYTE *)(v84 + 8) = v78;
    sub_10000CC5C(v73, &qword_1001402E8);
    sub_10000C4C8((uint64_t)v93, type metadata accessor for SendOverAirDropAction);
    v85 = v103;
    sub_10000CBD4(v82, v103, &qword_1001402D8);
    v86 = v85;
    v87 = v109;
    sub_10000CBD4(v86, v109, &qword_1001402D8);
    v88 = 0;
    v89 = v87;
    v90 = v83;
  }
  else
  {
    v88 = 1;
    v44(v32, 1, 1, v33);
    sub_10000CC5C((uint64_t)v32, (uint64_t *)&unk_1001405F0);
    v89 = v109;
    v90 = v108;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v89, v88, 1, v90);
}

void sub_1000B1728(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  v3 = a1 + 120;
  v4 = *(id *)(a1 + 8);
  sub_1000B592C(a2, v3, 0, v4, type metadata accessor for SendOverAirDropAction, &qword_10013ED20, (uint64_t)&unk_1000E95FC, (uint64_t)&unk_100128E20, (uint64_t)&unk_100140600);

}

uint64_t sub_1000B179C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  void (**v21)();
  uint64_t v22;
  __int128 v23[2];
  _OWORD v24[13];
  uint64_t v25;

  v22 = a3;
  v5 = type metadata accessor for LocalizedStringResource(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000904C(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  sub_1000B5544(a2, (uint64_t)v24);
  sub_100009008((uint64_t)a1, (uint64_t)v23);
  v12 = swift_allocObject(&unk_100128E48, 272, 7);
  v13 = v24[11];
  *(_OWORD *)(v12 + 176) = v24[10];
  *(_OWORD *)(v12 + 192) = v13;
  *(_OWORD *)(v12 + 208) = v24[12];
  *(_QWORD *)(v12 + 224) = v25;
  v14 = v24[7];
  *(_OWORD *)(v12 + 112) = v24[6];
  *(_OWORD *)(v12 + 128) = v14;
  v15 = v24[9];
  *(_OWORD *)(v12 + 144) = v24[8];
  *(_OWORD *)(v12 + 160) = v15;
  v16 = v24[3];
  *(_OWORD *)(v12 + 48) = v24[2];
  *(_OWORD *)(v12 + 64) = v16;
  v17 = v24[5];
  *(_OWORD *)(v12 + 80) = v24[4];
  *(_OWORD *)(v12 + 96) = v17;
  v18 = v24[1];
  *(_OWORD *)(v12 + 16) = v24[0];
  *(_OWORD *)(v12 + 32) = v18;
  sub_10004EFB0(v23, v12 + 232);
  v19 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v22, v9, v5);
  result = type metadata accessor for ShareableContentActionButton(0);
  v21 = (void (**)())(v19 + *(int *)(result + 20));
  *v21 = sub_1000B92B4;
  v21[1] = (void (*)())v12;
  return result;
}

void sub_1000B1900(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = *(void **)(a1 + 8);
  v3 = a1 + 120;
  v4 = a2[3];
  v5 = a2[4];
  v6 = (char *)sub_10000904C(a2, v4);
  v7 = v2;
  sub_10004BD9C(v6, v3, 0, v7, v4, v5);

}

uint64_t sub_1000B1974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 176);
  v4[1] = *(_BYTE *)(a1 + 168);
  v5 = v1;
  v4[0] = 1;
  v2 = sub_100008F88(&qword_100140128);
  return State.wrappedValue.setter(v4, v2);
}

uint64_t sub_1000B19C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a1;
  v32 = a3;
  v4 = sub_100008F88(&qword_100140108);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88(&qword_1001400F8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_1001400B8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_BYTE *)(a2 + 168);
  v17 = *(_QWORD *)(a2 + 176);
  v33 = v16;
  v34 = v17;
  v18 = sub_100008F88(&qword_100140128);
  State.wrappedValue.getter(&v35, v18);
  v19 = 0.0;
  if ((_BYTE)v35)
    v20 = 1.0;
  else
    v20 = 0.0;
  v21 = sub_100008F88(&qword_100140118);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v7, v31, v21);
  *(double *)&v7[*(int *)(v4 + 36)] = v20;
  v33 = v16;
  v34 = v17;
  State.wrappedValue.getter(&v35, v18);
  if (!(_BYTE)v35)
    v19 = 10.0;
  sub_10000CC18((uint64_t)v7, (uint64_t)v11, &qword_100140108);
  v22 = &v11[*(int *)(v8 + 36)];
  *(double *)v22 = v19;
  v22[8] = 0;
  sub_10000CC5C((uint64_t)v7, &qword_100140108);
  v33 = v16;
  v34 = v17;
  State.wrappedValue.getter(&v35, v18);
  v23.n128_u64[0] = 0x3FE51EB851EB851FLL;
  if ((_BYTE)v35)
    v24 = 1.0;
  else
    v24 = 0.66;
  v25 = static UnitPoint.center.getter(v23);
  v27 = v26;
  sub_10000CC18((uint64_t)v11, (uint64_t)v15, &qword_1001400F8);
  v28 = &v15[*(int *)(v12 + 36)];
  *(double *)v28 = v24;
  *((double *)v28 + 1) = v24;
  *((double *)v28 + 2) = v25;
  *((_QWORD *)v28 + 3) = v27;
  sub_10000CC5C((uint64_t)v11, &qword_1001400F8);
  return sub_10000CBD4((uint64_t)v15, v32, &qword_1001400B8);
}

uint64_t sub_1000B1C14@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id (*v47)(void *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;

  v6 = sub_100008F88(&qword_100140020);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_100140028);
  __chkstk_darwin(v11, v12);
  v16 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  LOBYTE(v15) = *a1;
  v58 = a3;
  if ((v15 & 1) != 0)
  {
    v57 = &v51;
    __chkstk_darwin(v13, v14);
    *(&v51 - 2) = a2;
    v56 = sub_100008F88(&qword_100140030);
    v17 = sub_10000950C(&qword_100140038);
    v18 = sub_10000950C(&qword_100140040);
    v19 = sub_10000950C(&qword_100140048);
    v20 = sub_10000CB94((unint64_t *)&unk_100140050, &qword_100140048, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v21 = sub_100044F4C();
    v59 = v19;
    v60 = &type metadata for String;
    v61 = v20;
    v62 = v21;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
    v23 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
    v59 = v17;
    v60 = (void *)v18;
    v61 = OpaqueTypeConformance2;
    v62 = v23;
    v24 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.navigationBarItems<A>(trailing:)>>, 1);
    NavigationView.init(content:)(sub_1000B79E4, &v51 - 4, v56, v24);
    (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 16))(v16, v10, v6);
    swift_storeEnumTagMultiPayload(v16, v11, 1);
    v25 = sub_100008F88((uint64_t *)&unk_100140008);
    v26 = sub_1000B7980(&qword_100140000, (uint64_t *)&unk_100140008, (void (*)(void))sub_10007CC64, (uint64_t)&protocol conformance descriptor for <A> A?);
    v27 = sub_10000CB94(&qword_100140018, &qword_100140020, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    _ConditionalContent<>.init(storage:)(v16, v25, v6, v26, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    v57 = (uint64_t *)v6;
    v29 = *(_QWORD *)(a2 + 88);
    if (v29 < 0)
    {
      v40 = 0;
      v37 = 0;
      v43 = 0;
      v36 = 0;
      v42 = 0;
      v34 = 0;
      v33 = 0;
      v45 = 0;
      v32 = 0;
      v41 = 0;
      v44 = 0;
      v31 = 0;
      v46 = 0;
      v47 = 0;
    }
    else
    {
      v56 = *(unsigned int *)(a2 + 112);
      v30 = *(_QWORD *)(a2 + 96);
      v31 = *(_QWORD *)(a2 + 104);
      v32 = *(_QWORD *)(a2 + 80);
      v54 = *(_QWORD *)(a2 + 72);
      v55 = v30;
      v34 = *(_QWORD *)(a2 + 56);
      v33 = *(_QWORD *)(a2 + 64);
      v36 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 48);
      v37 = *(_QWORD *)(a2 + 24);
      v52 = *(_QWORD *)(a2 + 32);
      v53 = v35;
      v38 = v11;
      v39 = v29;
      v40 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v32);
      v41 = v39;
      v11 = v38;
      v43 = v52;
      v42 = v53;
      v45 = v54;
      v44 = v55;
      v46 = v56;
      v47 = sub_1000B1FFC;
    }
    *v16 = v40;
    v16[1] = v37;
    v16[2] = v43;
    v16[3] = v36;
    v16[4] = v42;
    v16[5] = v34;
    v16[6] = v33;
    v16[7] = v45;
    v16[8] = v32;
    v16[9] = v41;
    v16[10] = v44;
    v16[11] = v31;
    v16[12] = v46;
    v16[13] = v47;
    v16[14] = 0;
    swift_storeEnumTagMultiPayload(v16, v11, 0);
    v48 = sub_100008F88((uint64_t *)&unk_100140008);
    v49 = sub_1000B7980(&qword_100140000, (uint64_t *)&unk_100140008, (void (*)(void))sub_10007CC64, (uint64_t)&protocol conformance descriptor for <A> A?);
    v50 = sub_10000CB94(&qword_100140018, &qword_100140020, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    return _ConditionalContent<>.init(storage:)(v16, v48, v57, v49, v50);
  }
}

id sub_1000B1FFC(void *a1)
{
  return objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
}

uint64_t sub_1000B2010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25;
  uint64_t v26;
  unint64_t v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD v70[2];

  v50 = a1;
  v54 = a2;
  v53 = sub_100008F88(&qword_100140040);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53, v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008F88(&qword_100140048);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100008F88(&qword_100140038);
  v52 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51, v18);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v17 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  sub_100008F88(&qword_100140068);
  sub_1000B243C(a1);
  v22 = String.LocalizationValue.init(stringLiteral:)(0x504F5F4552414853, 0xED0000534E4F4954);
  static Locale.current.getter(v22);
  v23 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, 0, v9, 0, 0, 256);
  v25 = v24;
  *(_QWORD *)&v56 = v23;
  *((_QWORD *)&v56 + 1) = v24;
  v26 = sub_10000CB94((unint64_t *)&unk_100140050, &qword_100140048, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v27 = sub_100044F4C();
  View.navigationTitle<A>(_:)(&v56, v14, &type metadata for String, v26, v27);
  swift_bridgeObjectRelease(v25, v28, v29, v30, v31, v32, v33, v34);
  sub_10000CC5C((uint64_t)v17, &qword_100140048);
  v35 = String.LocalizationValue.init(stringLiteral:)(1162760004, 0xE400000000000000);
  static Locale.current.getter(v35);
  v70[0] = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, 0, v9, 0, 0, 256);
  v70[1] = v36;
  sub_1000B5544(v50, (uint64_t)&v56);
  v37 = swift_allocObject(&unk_100128BF0, 232, 7);
  v38 = v67;
  *(_OWORD *)(v37 + 176) = v66;
  *(_OWORD *)(v37 + 192) = v38;
  *(_OWORD *)(v37 + 208) = v68;
  *(_QWORD *)(v37 + 224) = v69;
  v39 = v63;
  *(_OWORD *)(v37 + 112) = v62;
  *(_OWORD *)(v37 + 128) = v39;
  v40 = v65;
  *(_OWORD *)(v37 + 144) = v64;
  *(_OWORD *)(v37 + 160) = v40;
  v41 = v59;
  *(_OWORD *)(v37 + 48) = v58;
  *(_OWORD *)(v37 + 64) = v41;
  v42 = v61;
  *(_OWORD *)(v37 + 80) = v60;
  *(_OWORD *)(v37 + 96) = v42;
  v43 = v57;
  *(_OWORD *)(v37 + 16) = v56;
  *(_OWORD *)(v37 + 32) = v43;
  Button<>.init<A>(_:action:)(v70, sub_1000B79F0, v37, &type metadata for String, v27);
  *(_QWORD *)&v56 = v14;
  *((_QWORD *)&v56 + 1) = &type metadata for String;
  *(_QWORD *)&v57 = v26;
  *((_QWORD *)&v57 + 1) = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v56, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
  v45 = sub_10000CB94(&qword_100140060, &qword_100140040, (uint64_t)&protocol conformance descriptor for Button<A>);
  v46 = v51;
  v47 = v53;
  View.navigationBarItems<A>(trailing:)(v5, v51, v53, OpaqueTypeConformance2, v45);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v5, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v20, v46);
}

uint64_t sub_1000B243C(uint64_t a1)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for SharingOptionsViewModel(0);
  v2 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1000EE1E0);
  v4 = swift_getKeyPath(&unk_1000EE208);
  v5 = v2;
  static Published.subscript.getter(&v13, v5, KeyPath, v4);

  swift_release(KeyPath);
  swift_release(v4);
  v6 = v13;
  v7 = v5;
  v8 = sub_100046DEC();
  v10 = v9;

  v11 = SharingOptionsViewModel.__allocating_init(collaborationShareOptions:layoutMargins:userDidChangeOption:contentSizeDidChange:)(v6, v8, v10, 0, 0, 12.0, 12.0, 12.0, 12.0);
  return SharingOptionsView.init(viewModel:)(v11);
}

uint64_t sub_1000B2520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 208);
  v4[1] = *(_BYTE *)(a1 + 200);
  v5 = v1;
  v4[0] = 2;
  v2 = sub_100008F88(&qword_10013FFD8);
  return State.wrappedValue.setter(v4, v2);
}

uint64_t sub_1000B2578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  __chkstk_darwin(v1, v2);
  v54 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NameDrop(0);
  v51 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v51 + 64);
  __chkstk_darwin(v4, v6);
  v7 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for NameDropView(0, v11);
  v14 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52, v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100008F88(&qword_10013FF98);
  __chkstk_darwin(v50, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100008F88(&qword_10013FFA0);
  __chkstk_darwin(v21, v22);
  v24 = (uint64_t *)((char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_100008F88(&qword_10013FFA8);
  __chkstk_darwin(v49, v25);
  v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v24 = static Alignment.center.getter(v28);
  v24[1] = v29;
  v48 = (uint64_t)v24 + *(int *)(sub_100008F88((uint64_t *)&unk_10013FFB0) + 44);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v31 = v53;
  v30(v13, v53, v8);
  sub_10000C484(v31, (uint64_t)v7, type metadata accessor for NameDrop);
  v32 = *(unsigned __int8 *)(v51 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject(&unk_100128BA0, v33 + v5, v32 | 7);
  sub_1000B6B18((uint64_t)v7, v34 + v33, type metadata accessor for NameDrop);
  NameDropView.init(transactionIdentifier:dismissViewAction:)(v13, sub_1000B7808, v34);
  v35 = sub_100053E5C();
  v36 = v52;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v17, v52);
  *(_QWORD *)&v20[*(int *)(v50 + 36)] = v35;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v36);
  sub_10000CBD4((uint64_t)v20, v48, &qword_10013FF98);
  KeyPath = swift_getKeyPath(&unk_1000EE1B0);
  v39 = v54;
  v38 = v55;
  v40 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v54, enum case for ColorScheme.light(_:), v56);
  v41 = (uint64_t *)&v27[*(int *)(v49 + 36)];
  v42 = sub_100008F88(&qword_10013D6E0);
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))((char *)v41 + *(int *)(v42 + 28), v39, v40);
  *v41 = KeyPath;
  sub_10000CC18((uint64_t)v24, (uint64_t)v27, &qword_10013FFA0);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  v43 = sub_10000CC5C((uint64_t)v24, &qword_10013FFA0);
  v44 = static Color.black.getter(v43);
  LOBYTE(v41) = static Edge.Set.all.getter(v44);
  v45 = v57;
  sub_10000CC18((uint64_t)v27, v57, &qword_10013FFA8);
  v46 = v45 + *(int *)(sub_100008F88(&qword_10013FFC0) + 36);
  *(_QWORD *)v46 = v44;
  *(_BYTE *)(v46 + 8) = (_BYTE)v41;
  return sub_10000CC5C((uint64_t)v27, &qword_10013FFA8);
}

void sub_1000B2938(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  id v30;
  char *v31;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v41 = sub_100008F88(&qword_10013FDA0);
  __chkstk_darwin(v41, v3);
  v42 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100008F88(&qword_10013FDA8);
  __chkstk_darwin(v46, v5);
  v43 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for NameDrop(0);
  __chkstk_darwin(v33, v7);
  v35 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100008F88(&qword_10013FDB0);
  __chkstk_darwin(v40, v9);
  v34 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v38 = (char *)v32 - v13;
  v14 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  __chkstk_darwin(v14, v15);
  v39 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100008F88(&qword_10013FDB8);
  v18 = __chkstk_darwin(v44, v17);
  v45 = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OpacityTransition(0, v18);
  v32[1] = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  v22 = sub_100008F88(&qword_10013FDC0);
  __chkstk_darwin(v22, v23);
  __chkstk_darwin(v24, v25);
  v26 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v26, v27);
  v29 = (char *)v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  sub_100049C50(v29);

  v31 = (char *)&loc_1000B2BF8 + *((int *)qword_1000B33D8 + swift_getEnumCaseMultiPayload(v29, v26));
  __asm { BR              X10 }
}

void sub_1000B2C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v8 = *v6;
  *(_QWORD *)(v0 + 128) = v8;
  v9 = type metadata accessor for ShockwaveAnimationCoordinator(0);
  v10 = sub_100008694(&qword_10013D2B8, (uint64_t (*)(uint64_t))&type metadata accessor for ShockwaveAnimationCoordinator, (uint64_t)&protocol conformance descriptor for ShockwaveAnimationCoordinator);
  swift_retain(v8);
  *(_QWORD *)(v0 + 112) = ObservedObject.init(wrappedValue:)(v11, v9, v10);
  *(_QWORD *)(v0 + 96) = v12;
  v13 = ((uint64_t (*)(void))OpacityTransition.init())();
  v14 = ((uint64_t (*)(uint64_t))static Animation.default.getter)(v13);
  v15 = ((uint64_t (*)(double))Animation.delay(_:))(3.5);
  swift_release(v14);
  v16 = sub_100008694((unint64_t *)&unk_10013FE50, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  ((void (*)(uint64_t, uint64_t, uint64_t))Transition.animation(_:))(v15, v3, v16);
  v17 = swift_release(v15);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v0 + 8) + 8))(v5, v3, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v7, v4, v2);
  *(_QWORD *)(v0 + 408) = v3;
  *(_QWORD *)(v0 + 416) = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v0 + 408, &opaque type descriptor for <<opaque return type of Transition.animation(_:)>>, 1);
  v19 = AnyTransition.init<A>(_:)(v7, v2, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
  v20 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 184) = v20;
  *(_QWORD *)(v0 + 192) = v19;
  *(_BYTE *)(v0 + 400) = 0;
  swift_retain(v20);
  swift_retain(v19);
  v21 = sub_100008F88((uint64_t *)&unk_10013FE00);
  v22 = sub_100008F88(&qword_10013FE18);
  v23 = sub_1000B530C();
  v24 = sub_1000B5390();
  _ConditionalContent<>.init(storage:)(v0 + 176, v21, v22, v23, v24);
  v25 = *(_QWORD *)(v0 + 152);
  sub_10000CC18(v0 + 408, v25, &qword_10013FDE8);
  swift_storeEnumTagMultiPayload(v25, *(_QWORD *)(v0 + 144), 0);
  v26 = sub_100008F88(&qword_10013FDE8);
  v27 = sub_1000B52E8();
  v28 = sub_1000B5458();
  _ConditionalContent<>.init(storage:)(v25, v26, *(_QWORD *)(v0 + 160), v27, v28);
  swift_release(*(_QWORD *)(v0 + 128));
  sub_10000CC5C(v0 + 408, &qword_10013FDE8);
  swift_release(v19);
  swift_release(v20);
}

uint64_t sub_1000B33F0@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;

  v44 = a2;
  v45 = a1;
  v2 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v2, v3);
  v43 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v42 - v12;
  v14 = type metadata accessor for LumaTrackingViewModifier(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100008F88(&qword_10013FD78);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008F88(&qword_10013FD80);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100008F88(&qword_10013FD88);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2938(v45, (uint64_t)v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v13, enum case for ColorScheme.light(_:), v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v13, v5);
  State.init(wrappedValue:)(v9, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  sub_10000CC18((uint64_t)v21, (uint64_t)v25, &qword_10013FD78);
  sub_1000B6B18((uint64_t)v17, (uint64_t)&v25[*(int *)(v22 + 36)], type metadata accessor for LumaTrackingViewModifier);
  v30 = sub_10000CC5C((uint64_t)v21, &qword_10013FD78);
  LOBYTE(v21) = static Edge.Set.all.getter(v30);
  v31 = static SafeAreaRegions.all.getter();
  sub_10000CC18((uint64_t)v25, (uint64_t)v29, &qword_10013FD80);
  v32 = &v29[*(int *)(v26 + 36)];
  *(_QWORD *)v32 = v31;
  v32[8] = (char)v21;
  v33 = sub_10000CC5C((uint64_t)v25, &qword_10013FD80);
  v34 = static Animation.default.getter(v33);
  v35 = v45;
  v36 = v43;
  sub_100049C50(v43);

  v37 = sub_100008F88(&qword_10013FD90);
  v38 = v44;
  v39 = (uint64_t *)(v44 + *(int *)(v37 + 36));
  v40 = sub_100008F88(&qword_10013FD98);
  sub_10000C484((uint64_t)v36, (uint64_t)v39 + *(int *)(v40 + 36), type metadata accessor for NearbySharingInteractionViewState);
  *v39 = v34;
  sub_10000CC18((uint64_t)v29, v38, &qword_10013FD88);
  sub_10000C4C8((uint64_t)v36, type metadata accessor for NearbySharingInteractionViewState);
  return sub_10000CC5C((uint64_t)v29, &qword_10013FD88);
}

uint64_t sub_1000B3718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B33F0(*(void **)(v1 + 8), a1);
}

uint64_t sub_1000B3720()
{
  return 2;
}

uint64_t sub_1000B3728()
{
  return 1;
}

char *sub_1000B3730(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *result;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  char *v32;
  __n128 v33;
  _QWORD v34[3];
  id v35;

  v3 = sub_100008F88((uint64_t *)&unk_10013F130);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88((uint64_t *)&unk_10013FEA0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_1000B6884((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v13 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v12[qword_10013FD18] = v13;
  v12[qword_10013FD20] = 0;
  *(_QWORD *)&v12[qword_10013FD10] = a1;
  v14 = a1;

  v15 = type metadata accessor for NearbySharingInteractionViewModel(0);
  v16 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
  v17 = v14;
  v34[0] = ObservedObject.init(wrappedValue:)(v17, v15, v16);
  v34[1] = v18;
  v19 = (char *)(id)UIHostingController.init(rootView:)(v34);
  result = (char *)objc_msgSend(v19, "view");
  if (result)
  {
    v21 = result;
    v22 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v21, "setBackgroundColor:", v22);

    objc_msgSend(v19, "setModalPresentationStyle:", 5);
    v34[0] = ObservableObject<>.objectWillChange.getter(v15);
    v23 = sub_100018D44(0, &qword_10013CC10, OS_dispatch_queue_ptr);
    v35 = (id)static OS_dispatch_queue.main.getter();
    v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
    v25 = type metadata accessor for ObservableObjectPublisher(0);
    v26 = sub_1000B6B5C();
    Publisher.receive<A>(on:options:)(&v35, v6, v25, v23, &protocol witness table for ObservableObjectPublisher, v26);
    sub_10000CC5C((uint64_t)v6, (uint64_t *)&unk_10013F130);

    swift_release(v34[0]);
    v27 = swift_allocObject(&unk_100128A30, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v19);
    v28 = swift_allocObject(&unk_100128A58, 32, 7);
    *(_QWORD *)(v28 + 16) = sub_1000B6BD8;
    *(_QWORD *)(v28 + 24) = v27;
    v29 = sub_10000CB94(&qword_10013F168, (uint64_t *)&unk_10013FEA0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v30 = Publisher<>.sink(receiveValue:)(sub_10004DFF8, v28, v7, v29);
    v31 = swift_release(v28);
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v11, v7, v31);
    v32 = &v19[qword_10013FD18];
    v33 = swift_beginAccess(&v19[qword_10013FD18], v34, 33, 0);
    AnyCancellable.store(in:)(v32, v33);
    swift_endAccess(v34);
    swift_release(v30);
    sub_1000B4BD4();

    return v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000B3AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1000B4BD4();

  }
}

void sub_1000B3B10(_BYTE *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_1000B6884((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v5 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&a1[qword_10013FD18] = v5;
  a1[qword_10013FD20] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000F05A0, "AirDropUI/NearbySharingInteractionView.swift", 44, 2, 524, 0);
  __break(1u);
}

void sub_1000B3BC8(int a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  objc_class *v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  _QWORD *v65;
  __n128 v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  id v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD aBlock[5];
  uint64_t v95;
  objc_super v96;

  v91 = a3;
  v92 = a2;
  v93 = a1;
  v4 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v4, v5);
  v87 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  __chkstk_darwin(v7, v8);
  v85 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v79 - v12;
  v90 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v90, v14);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v79 - v19;
  v21 = sub_100008F88(&qword_10013FE60);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  __chkstk_darwin(v21, v24);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v79 - v27;
  *(_QWORD *)&v31 = __chkstk_darwin(v29, v30).n128_u64[0];
  v33 = (char *)&v79 - v32;
  v34 = objc_msgSend(v3, "presentedViewController", v31);
  if (!v34)
  {
    v81 = v13;
    v80 = (uint64_t *)((char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    v40 = v89;
    v82 = v22;
    v83 = v28;
    v86 = v33;
    v84 = v3;
    v41 = *(_QWORD *)&v3[qword_10013FD10];
    sub_100049C50(v20);
    v42 = v90;
    swift_storeEnumTagMultiPayload(v16, v90, 5);
    sub_10004C5A4((uint64_t)v20, (uint64_t)v16);
    v44 = v43;
    sub_10000C4C8((uint64_t)v16, type metadata accessor for NearbySharingInteractionViewState);
    v45 = v93;
    v46 = sub_10000C4C8((uint64_t)v20, type metadata accessor for NearbySharingInteractionViewState);
    if ((v44 & 1) == 0 && (v45 & 1) == 0)
    {
      v47 = v81;
      v48 = static ContinuousClock.Instant.now.getter(v46);
      v49 = static Duration.seconds(_:)(v48, 3.5);
      v50 = (uint64_t)v83;
      ContinuousClock.Instant.advanced(by:)(v49, v51);
      v52 = v88;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v47, v40);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v50, 0, 1, v40);
      v53 = (uint64_t)v86;
      sub_10000CBD4(v50, (uint64_t)v86, &qword_10013FE60);
      v54 = v91;
      v55 = (uint64_t)v87;
      v56 = v82;
      v57 = v23;
LABEL_16:
      v68 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v55, 1, 1, v68);
      sub_10000CC18(v53, v50, &qword_10013FE60);
      type metadata accessor for MainActor(0);
      v69 = v92;
      sub_100027028(v92, v54);
      v70 = v84;
      v71 = static MainActor.shared.getter(v70);
      v72 = *(unsigned __int8 *)(v56 + 80);
      v73 = (v72 + 32) & ~v72;
      v74 = (v73 + v57 + 23) & 0xFFFFFFFFFFFFFFF8;
      v75 = swift_allocObject(&unk_100128918, v74 + 16, v72 | 7);
      *(_QWORD *)(v75 + 16) = v71;
      *(_QWORD *)(v75 + 24) = &protocol witness table for MainActor;
      sub_10000CBD4(v50, v75 + v73, &qword_10013FE60);
      v76 = v75 + ((v73 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)v76 = v70;
      *(_BYTE *)(v76 + 8) = v93 & 1;
      v77 = (uint64_t *)(v75 + v74);
      *v77 = v69;
      v77[1] = v54;
      v78 = sub_1000A66DC(v55, (uint64_t)&unk_10013FE70, v75);
      swift_release(v78);
      sub_10000CC5C((uint64_t)v86, &qword_10013FE60);
      return;
    }
    sub_100049C50(v20);
    swift_storeEnumTagMultiPayload(v16, v42, 5);
    sub_10004C5A4((uint64_t)v20, (uint64_t)v16);
    v60 = v59;
    sub_10000C4C8((uint64_t)v16, type metadata accessor for NearbySharingInteractionViewState);
    sub_10000C4C8((uint64_t)v20, type metadata accessor for NearbySharingInteractionViewState);
    v50 = (uint64_t)v83;
    v61 = v40;
    v54 = v91;
    v57 = v23;
    v62 = v88;
    if ((v60 & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_1000EDFD0);
      v64 = swift_getKeyPath(&unk_1000EDFF8);
      v65 = v80;
      static Published.subscript.getter(v80, v41, KeyPath, v64);
      swift_release(v64);
      v66 = swift_release(KeyPath);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v62 + 48))(v65, 1, v61, v66) == 1)
      {
        sub_10000CC5C((uint64_t)v65, &qword_10013FE60);
      }
      else
      {
        v67 = v85;
        (*(void (**)(char *, _QWORD *, uint64_t))(v62 + 32))(v85, v65, v61);
        if ((v45 & 1) == 0)
        {
          ContinuousClock.Instant.advanced(by:)(520000000000000000, 0);
          (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v61);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v50, 0, 1, v61);
          v53 = (uint64_t)v86;
          sub_10000CBD4(v50, (uint64_t)v86, &qword_10013FE60);
          goto LABEL_15;
        }
        (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v61);
      }
    }
    v53 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v86, 1, 1, v61);
LABEL_15:
    v55 = (uint64_t)v87;
    v56 = v82;
    goto LABEL_16;
  }
  v35 = v34;
  v36 = v91;
  v37 = v93;
  if (v92)
  {
    aBlock[4] = v92;
    v95 = v91;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000DA060;
    aBlock[3] = &unk_100128930;
    v38 = _Block_copy(aBlock);
    v39 = v95;
    swift_retain(v36);
    swift_release(v39);
  }
  else
  {
    v38 = 0;
  }
  v58 = (objc_class *)type metadata accessor for NearbySharingInteractionViewController(0);
  v96.receiver = v3;
  v96.super_class = v58;
  objc_msgSendSuper2(&v96, "dismissViewControllerAnimated:completion:", v37 & 1, v38);
  _Block_release(v38);

}

uint64_t sub_1000B41B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 160) = a7;
  *(_QWORD *)(v8 + 168) = a8;
  *(_BYTE *)(v8 + 129) = a6;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 152) = a5;
  v9 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v8 + 176) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 184) = v10;
  *(_QWORD *)(v8 + 192) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013FE60);
  *(_QWORD *)(v8 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v8 + 208) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 216) = v13;
  *(_QWORD *)(v8 + 224) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 232) = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  *(_QWORD *)(v8 + 240) = v15;
  *(_QWORD *)(v8 + 248) = v16;
  return swift_task_switch(sub_1000B429C, v15, v16);
}

uint64_t sub_1000B429C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  void *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  SEL v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  sub_10000CC18(*(_QWORD *)(v0 + 144), v3, &qword_10013FE60);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(_QWORD *)(v0 + 200);
  if (v4 == 1)
  {
    swift_release(*(_QWORD *)(v0 + 232));
    sub_10000CC5C(v5, &qword_10013FE60);
    v6 = *(_QWORD *)(v0 + 224);
    v43 = *(_QWORD *)(v0 + 200);
    v44 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v9 = *(void **)(v0 + 152);
    if (*(_BYTE *)(v0 + 129))
      v10 = 0.33;
    else
      v10 = 0.0;
    v11 = (void *)objc_opt_self(UIView);
    v12 = swift_allocObject(&unk_100128968, 24, 7);
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v0 + 48) = sub_1000B6340;
    *(_QWORD *)(v0 + 56) = v12;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_1000DA060;
    *(_QWORD *)(v0 + 40) = &unk_100128980;
    v13 = _Block_copy((const void *)(v0 + 16));
    v14 = *(_QWORD *)(v0 + 56);
    v15 = v9;
    swift_release(v14);
    v16 = (_QWORD *)swift_allocObject(&unk_1001289B8, 40, 7);
    v16[2] = v15;
    v16[3] = v8;
    v16[4] = v7;
    *(_QWORD *)(v0 + 96) = sub_1000B637C;
    *(_QWORD *)(v0 + 104) = v16;
    *(_QWORD *)(v0 + 64) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 72) = 1107296256;
    *(_QWORD *)(v0 + 80) = sub_1000A656C;
    *(_QWORD *)(v0 + 88) = &unk_1001289D0;
    v17 = _Block_copy((const void *)(v0 + 64));
    v18 = *(_QWORD *)(v0 + 104);
    v19 = v15;
    sub_100027028(v8, v7);
    swift_release(v18);
    objc_msgSend(v11, "animateWithDuration:animations:completion:", v13, v17, v10);
    _Block_release(v17);
    _Block_release(v13);
    swift_task_dealloc(v6);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 32))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v21 = *(void **)(v0 + 152);
    v22 = type metadata accessor for Logger(0);
    sub_100009558(v22, (uint64_t)qword_100148040);
    v23 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.default.getter();
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(void **)(v0 + 152);
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v45 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = type metadata accessor for UUID(0);
      v30 = sub_100008694((unint64_t *)&qword_10013BBD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
      v33 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v32;
      *(_QWORD *)(v0 + 136) = sub_10003A834(v31, v32, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);

      swift_bridgeObjectRelease(v33, v34, v35, v36, v37, v38, v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Deferring dismissal to allow for animations to complete on interaction ID: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)(v0 + 120) = 0;
    *(_QWORD *)(v0 + 112) = 0;
    *(_BYTE *)(v0 + 128) = 1;
    ContinuousClock.init()();
    v41 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
    *(_QWORD *)(v0 + 256) = v41;
    v42 = sub_100008694(&qword_100141480, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
    *v41 = v0;
    v41[1] = sub_1000B4700;
    return static Task<>.sleep<A>(until:tolerance:clock:)(*(_QWORD *)(v0 + 224), v0 + 112, *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176), v42);
  }
}

uint64_t sub_1000B4700()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  v5 = *(_QWORD *)(*v1 + 184);
  v4 = *(_QWORD *)(*v1 + 192);
  v6 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1000B495C;
  else
    v7 = sub_1000B478C;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 248));
}

uint64_t sub_1000B478C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = swift_release(*(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v1, v2, v4);
  v5 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v8 = *(void **)(v0 + 152);
  if (*(_BYTE *)(v0 + 129))
    v9 = 0.33;
  else
    v9 = 0.0;
  v10 = (void *)objc_opt_self(UIView);
  v11 = swift_allocObject(&unk_100128968, 24, 7);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v0 + 48) = sub_1000B6340;
  *(_QWORD *)(v0 + 56) = v11;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1000DA060;
  *(_QWORD *)(v0 + 40) = &unk_100128980;
  v12 = _Block_copy((const void *)(v0 + 16));
  v13 = *(_QWORD *)(v0 + 56);
  v14 = v8;
  swift_release(v13);
  v15 = (_QWORD *)swift_allocObject(&unk_1001289B8, 40, 7);
  v15[2] = v14;
  v15[3] = v7;
  v15[4] = v6;
  *(_QWORD *)(v0 + 96) = sub_1000B637C;
  *(_QWORD *)(v0 + 104) = v15;
  *(_QWORD *)(v0 + 64) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 72) = 1107296256;
  *(_QWORD *)(v0 + 80) = sub_1000A656C;
  *(_QWORD *)(v0 + 88) = &unk_1001289D0;
  v16 = _Block_copy((const void *)(v0 + 64));
  v17 = *(_QWORD *)(v0 + 104);
  v18 = v14;
  sub_100027028(v7, v6);
  swift_release(v17);
  objc_msgSend(v10, "animateWithDuration:animations:completion:", v12, v16, v9);
  _Block_release(v16);
  _Block_release(v12);
  swift_task_dealloc(v5);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B495C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B49D0(void *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(a1, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "setAlpha:", 0.0);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000B4A1C(int a1, id a2, void *a3, uint64_t a4)
{
  id v6;
  double v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v6 = objc_msgSend(a2, "presentingViewController");
  if (v6)
  {
    v8 = v6;
    if (a3)
    {
      v10[4] = a3;
      v11 = a4;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1107296256;
      v10[2] = sub_1000DA060;
      v10[3] = &unk_1001289F8;
      a3 = _Block_copy(v10);
      v9 = v11;
      swift_retain(a4);
      *(_QWORD *)&v7 = swift_release(v9).n128_u64[0];
    }
    objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 0, a3, v7);
    _Block_release(a3);

  }
}

void sub_1000B4AE4(void *a1, int a2, int a3, void *aBlock)
{
  void *v6;
  uint64_t v7;
  id v8;

  v6 = _Block_copy(aBlock);
  if (v6)
  {
    v7 = swift_allocObject(&unk_1001288F0, 24, 7);
    *(_QWORD *)(v7 + 16) = v6;
    v6 = sub_1000B55C8;
  }
  else
  {
    v7 = 0;
  }
  v8 = a1;
  sub_1000B3BC8(a3, (uint64_t)v6, v7);
  sub_100026F80((uint64_t)v6, v7);

}

void sub_1000B4B80(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  objc_super v5;

  v4 = a1;
  sub_1000B4E64();
  v5.receiver = v4;
  v5.super_class = (Class)type metadata accessor for NearbySharingInteractionViewController(0);
  objc_msgSendSuper2(&v5, "viewDidAppear:", a3);

}

void sub_1000B4BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  int v25;
  char v26;
  uint64_t v27;

  v1 = v0;
  v2 = sub_100008F88((uint64_t *)&unk_10013FE90);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v6, v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v10, v11);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v27 - v16;
  v18 = *(_QWORD *)(v0 + qword_10013FD10);
  sub_100049C50((char *)&v27 - v16);
  KeyPath = swift_getKeyPath(&unk_1000EDFD0);
  v20 = swift_getKeyPath(&unk_1000EDFF8);
  static Published.subscript.getter(v9, v18, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  v21 = type metadata accessor for ContinuousClock.Instant(0);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v9, 1, v21);
  sub_10000CC5C((uint64_t)v9, &qword_10013FE60);
  v23 = *(int *)(v2 + 48);
  sub_1000B6B18((uint64_t)v17, (uint64_t)v5, type metadata accessor for NearbySharingInteractionViewState);
  v5[v23] = v22 != 1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v10);
  if (EnumCaseMultiPayload == 2
    || EnumCaseMultiPayload == 4
    && (sub_10000C484((uint64_t)v5, (uint64_t)v13, type metadata accessor for NearbySharingInteractionViewState),
        sub_10004BC68(*v13, v13[1], v13[2], v13[3], v13[4], v13[5], v13[6], v13[7], v13[8], v13[9], v13[10], v13[11]),
        sub_10004D4EC((uint64_t)(v13 + 13)),
        v22 == 1))
  {
    sub_10000C4C8((uint64_t)v5, type metadata accessor for NearbySharingInteractionViewState);
    v26 = *(_BYTE *)(v1 + qword_10013FD20);
    *(_BYTE *)(v1 + qword_10013FD20) = 1;
    if ((v26 & 1) == 0)
      sub_1000B4E64();
  }
  else
  {
    v25 = *(unsigned __int8 *)(v1 + qword_10013FD20);
    *(_BYTE *)(v1 + qword_10013FD20) = 0;
    if (v25 == 1)
      sub_1000B4E64();
    sub_10000CC5C((uint64_t)v5, (uint64_t *)&unk_10013FE90);
  }
}

void sub_1000B4E64()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  os_log_t oslog;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "window");

    if (v3)
    {
      v4 = objc_msgSend(v3, "windowScene");

      if (v4)
      {
        v5 = objc_opt_self(SBSUIRemoteAlertScene);
        v6 = (void *)swift_dynamicCastObjCClass(v4, v5);
        if (v6)
        {
          v7 = v6;
          v8 = (unsigned __int8 *)&v0[qword_10013FD20];
          if (*v8)
            v9 = 16;
          else
            v9 = 0;
          objc_msgSend(v6, "setDesiredHardwareButtonEvents:", v9);
          if (*v8)
            v10 = 2;
          else
            v10 = 0;
          objc_msgSend(v7, "setDismissalAnimationStyle:", v10);
          objc_msgSend(v7, "setAllowsMenuButtonDismissal:", *v8);
          v11 = *v8;
          oslog = (os_log_t)objc_msgSend((id)objc_opt_self(BSAnimationSettings), "settingsWithDuration:delay:", 0.3, 0.1);
          objc_msgSend(v7, "setContentOverlaysStatusBar:animationSettings:", (v11 & 1) == 0);

LABEL_17:
          return;
        }

      }
    }
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100009558(v12, (uint64_t)qword_100148040);
    oslog = (os_log_t)Logger.logObject.getter(v13);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Cannot update SystemAffordances for namedrop: remoteAlertScene has not been created", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_1000B5080()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10013FD18));
}

id sub_1000B50AC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySharingInteractionViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000B50E0(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10013FD18));
}

void sub_1000B5118()
{
  _swift_stdlib_reportUnimplementedInitializer("AirDropUI.NearbySharingInteractionViewController", 48, "init(rootView:)", 15, 0);
  __break(1u);
}

void sub_1000B5144()
{
  _swift_stdlib_reportUnimplementedInitializer("AirDropUI.NearbySharingInteractionViewController", 48, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_1000B5170()
{
  return type metadata accessor for NearbySharingInteractionViewController(0);
}

_QWORD *initializeBufferWithCopyOfBuffer for NearbySharingInteractionView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

void destroy for NearbySharingInteractionView(uint64_t a1)
{

}

_QWORD *assignWithCopy for NearbySharingInteractionView(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = (void *)a1[1];
  a1[1] = v3;
  v5 = v3;

  return a1;
}

_QWORD *assignWithTake for NearbySharingInteractionView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  v3 = a2[1];
  v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionView()
{
  return &type metadata for NearbySharingInteractionView;
}

uint64_t sub_1000B5228(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114780, 1);
}

uint64_t type metadata accessor for NameDrop(uint64_t a1)
{
  return sub_1000138D0(a1, qword_10013FF18, (uint64_t)&nominal type descriptor for NameDrop);
}

unint64_t sub_1000B524C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FDC8;
  if (!qword_10013FDC8)
  {
    v1 = sub_10000950C(&qword_10013FDB0);
    sub_100008694((unint64_t *)&unk_10013FDD0, type metadata accessor for NameDrop, (uint64_t)&unk_1000EE15C);
    sub_10000CB94((unint64_t *)&unk_100140D90, &qword_10013FDE0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FDC8);
  }
  return result;
}

uint64_t sub_1000B52E8()
{
  return sub_10000C9D0(&qword_10013FDF0, &qword_10013FDE8, (void (*)(void))sub_1000B530C, (void (*)(void))sub_1000B5390);
}

unint64_t sub_1000B530C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FDF8;
  if (!qword_10013FDF8)
  {
    v1 = sub_10000950C((uint64_t *)&unk_10013FE00);
    sub_10004318C();
    sub_10000CB94((unint64_t *)&unk_100140D90, &qword_10013FDE0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FDF8);
  }
  return result;
}

unint64_t sub_1000B5390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FE10;
  if (!qword_10013FE10)
  {
    v1 = sub_10000950C(&qword_10013FE18);
    sub_1000B5414();
    sub_10000CB94((unint64_t *)&unk_100140D90, &qword_10013FDE0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FE10);
  }
  return result;
}

unint64_t sub_1000B5414()
{
  unint64_t result;

  result = qword_10013FE20;
  if (!qword_10013FE20)
  {
    result = swift_getWitnessTable(&unk_1000EE10C, &type metadata for ShareableContentSuggestion);
    atomic_store(result, (unint64_t *)&qword_10013FE20);
  }
  return result;
}

unint64_t sub_1000B5458()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FE28;
  if (!qword_10013FE28)
  {
    v1 = sub_10000950C(&qword_10013FDA8);
    sub_1000B524C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FE28);
  }
  return result;
}

unint64_t sub_1000B54C4()
{
  unint64_t result;

  result = qword_10013FE30;
  if (!qword_10013FE30)
  {
    result = swift_getWitnessTable(&unk_1000EB48C, &type metadata for SwoopTransition);
    atomic_store(result, (unint64_t *)&qword_10013FE30);
  }
  return result;
}

uint64_t sub_1000B5508(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ActionableShareableContent(a2, a1);
  return a2;
}

uint64_t sub_1000B5544(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ShareableContentSuggestion(a2, a1);
  return a2;
}

uint64_t sub_1000B5578(uint64_t a1)
{
  destroy for ShareableContentSuggestion(a1);
  return a1;
}

uint64_t sub_1000B55A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B55C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000B55D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EDFD0);
  v5 = swift_getKeyPath(&unk_1000EDFF8);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_1000B563C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v16 - v10;
  sub_10000CC18(a1, (uint64_t)&v16 - v10, &qword_10013FE60);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EDFD0);
  v14 = swift_getKeyPath(&unk_1000EDFF8);
  sub_10000CC18((uint64_t)v11, (uint64_t)v7, &qword_10013FE60);
  static Published.subscript.setter(v7, v12, KeyPath, v14);
  return sub_10000CC5C((uint64_t)v11, &qword_10013FE60);
}

uint64_t sub_1000B5730@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B5758(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000B5780@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B57A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000B57D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000B5800(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000B582C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B5854(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000B587C()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000B589C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B58B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_1000B58B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = a5(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v14 - v10, a1);
  return a6(v11);
}

uint64_t sub_1000B592C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t KeyPath;
  uint64_t v47;
  __n128 v48;
  uint64_t (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  __n128 v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _TtC9AirDropUI33AirDropTransferSessionsController *v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  SEL v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  __n128 v105;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  uint8_t *v117;
  uint64_t v118;
  __int128 v119[2];
  __int128 v120[2];
  _QWORD v121[6];

  v112 = a8;
  v117 = (uint8_t *)a7;
  v113 = a3;
  v111 = a2;
  v118 = a1;
  v12 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v12, v13);
  v116 = (uint64_t)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88(&qword_10013FE60);
  __chkstk_darwin(v15, v16);
  v108 = (uint64_t)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v107 = (char *)&v107 - v20;
  __chkstk_darwin(v21, v22);
  v114 = (char **)((char *)&v107 - v23);
  v24 = sub_100008F88((uint64_t *)&unk_1001405D0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  v115 = (char *)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v107 - v34;
  v36 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v37 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36, v38);
  v110 = (char *)&v107 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = v39;
  v42 = __chkstk_darwin(v40, v41);
  v44 = (char *)&v107 - v43;
  v121[3] = ((uint64_t (*)(_QWORD, __n128))a5)(0, v42);
  v121[4] = sub_100008694(a6, a5, (uint64_t)v117);
  v45 = sub_10004EECC(v121);
  sub_10000C484(v118, (uint64_t)v45, a5);
  KeyPath = swift_getKeyPath(&unk_1000EE408);
  v47 = swift_getKeyPath(&unk_1000EE430);
  static Published.subscript.getter(v35, a4, KeyPath, v47);
  swift_release(KeyPath);
  v48 = swift_release(v47);
  if ((*(unsigned int (**)(char *, uint64_t, __n128))(v29 + 88))(v35, v28, v48) == enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
  {
    (*(void (**)(char *, uint64_t))(v29 + 96))(v35, v28);
    v49 = *(uint64_t (**)(char *, char *, uint64_t))(v37 + 32);
    v50 = v49(v44, v35, v36);
    SFAirDrop.NearbySharingInteraction.ConnectionContext.endpointIdentifier.getter(v50);
    v51 = type metadata accessor for UUID(0);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v27, 1, v51);
    sub_10000CC5C((uint64_t)v27, (uint64_t *)&unk_1001405D0);
    v53 = v44;
    if (v52 == 1)
    {
      if (qword_10013AD60 != -1)
        swift_once(&qword_10013AD60, sub_100092254);
      v54 = type metadata accessor for Logger(0);
      v55 = sub_100009558(v54, (uint64_t)qword_100148040);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Can not share content: we don't have a resolved endpoint.", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }

      goto LABEL_14;
    }
    v81 = swift_getKeyPath(&unk_1000EDFD0);
    v82 = swift_getKeyPath(&unk_1000EDFF8);
    v83 = v114;
    static Published.subscript.getter(v114, a4, v81, v82);
    swift_release(v81);
    swift_release(v82);
    v84 = type metadata accessor for ContinuousClock.Instant(0);
    v85 = a4;
    v86 = *(_QWORD *)(v84 - 8);
    LODWORD(v82) = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v86 + 48))(v83, 1, v84);
    v87 = sub_10000CC5C((uint64_t)v83, &qword_10013FE60);
    if ((_DWORD)v82 != 1)
    {
LABEL_14:
      (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v44, v36, v59);
      return sub_100009070(v121);
    }
    v117 = (uint8_t *)v36;
    v118 = a9;
    v88 = (uint64_t)v107;
    static ContinuousClock.Instant.now.getter(v87);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56))(v88, 0, 1, v84);
    v89 = swift_getKeyPath(&unk_1000EDFD0);
    v90 = swift_getKeyPath(&unk_1000EDFF8);
    v91 = v108;
    sub_10000CC18(v88, v108, &qword_10013FE60);
    v92 = v85;
    static Published.subscript.setter(v91, v92, v89, v90);
    sub_10000CC5C(v88, &qword_10013FE60);
    v93 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v116, 1, 1, v93);
    sub_100009008((uint64_t)v121, (uint64_t)v120);
    sub_100009008(v111, (uint64_t)v119);
    v94 = v110;
    v95 = (uint64_t)v117;
    (*(void (**)(char *, char *, uint8_t *))(v37 + 16))(v110, v53, v117);
    type metadata accessor for MainActor(0);
    v115 = v53;
    v96 = v113;
    v97 = v113;
    v98 = v92;
    v99 = static MainActor.shared.getter(v98);
    v100 = *(unsigned __int8 *)(v37 + 80);
    v101 = (v100 + 120) & ~v100;
    v102 = (v109 + v101 + 7) & 0xFFFFFFFFFFFFFFF8;
    v103 = (char *)swift_allocObject(v112, v102 + 8, v100 | 7);
    *((_QWORD *)v103 + 2) = v99;
    *((_QWORD *)v103 + 3) = &protocol witness table for MainActor;
    sub_10004EFB0(v120, (uint64_t)(v103 + 32));
    sub_10004EFB0(v119, (uint64_t)(v103 + 72));
    *((_QWORD *)v103 + 14) = v96;
    v49(&v103[v101], v94, v95);
    *(_QWORD *)&v103[v102] = v98;
    v104 = sub_1000CB748(v116, v118, (uint64_t)v103);
    v105 = swift_release(v104);
    (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v115, v95, v105);
  }
  else
  {
    v60 = *(void (**)(char *, uint64_t))(v29 + 8);
    v60(v35, v28);
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v61 = type metadata accessor for Logger(0);
    sub_100009558(v61, (uint64_t)qword_100148040);
    v62 = a4;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v118 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v120[0] = v118;
      *(_DWORD *)v65 = 136315138;
      v117 = v65 + 4;
      v66 = swift_getKeyPath(&unk_1000EE408);
      v67 = swift_getKeyPath(&unk_1000EE430);
      v68 = v115;
      static Published.subscript.getter(v115, v62, v66, v67);
      swift_release(v66);
      swift_release(v67);
      v69 = sub_100008694((unint64_t *)&unk_1001405E0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.State, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.State);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v28, v69);
      v72 = v71;
      v60(v68, v28);
      *(_QWORD *)&v119[0] = sub_10003A834(v70, (unint64_t)v72, (uint64_t *)v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, (char *)v119 + 8);

      swift_bridgeObjectRelease(v72, v73, v74, v75, v76, v77, v78, v79);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Can not share content as the state of the interaction is not connected: %s", v65, 0xCu);
      v80 = v118;
      swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

    }
  }
  return sub_100009070(v121);
}

uint64_t sub_1000B6158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(sub_100008F88(&qword_10013FE60) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = v0 + v3;
  v8 = type metadata accessor for ContinuousClock.Instant(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);

  if (*(_QWORD *)(v0 + v6))
    swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v2 | 7);
}

uint64_t sub_1000B6228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(sub_100008F88(&qword_10013FE60) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v1 + v7);
  v12 = *(_BYTE *)(v1 + v7 + 8);
  v13 = (uint64_t *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  v14 = *v13;
  v15 = v13[1];
  v16 = (_QWORD *)swift_task_alloc(dword_10013FE6C);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_1000104E4;
  return sub_1000B41B4(a1, v8, v9, v10, v11, v12, v14, v15);
}

uint64_t sub_1000B6304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B6314(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B631C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B6340()
{
  uint64_t v0;

  sub_1000B49D0(*(void **)(v0 + 16));
}

uint64_t sub_1000B6348()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000B637C(int a1)
{
  uint64_t v1;

  sub_1000B4A1C(a1, *(id *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1000B6388(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100008F88((uint64_t *)&unk_100140610);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v45 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v43 = v1;
    while (1)
    {
      while (1)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
        v11 = __OFADD__(v9++, 1);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }
        v12 = v10;
        v13 = NSObject._rawHashValue(seed:)(v4[5]);
        v14 = -1 << *((_BYTE *)v4 + 32);
        v15 = v13 & ~v14;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
        v18 = 1 << v15;
        if (((1 << v15) & v17) != 0)
          break;
LABEL_26:
        *(_QWORD *)&v8[8 * v16] = v18 | v17;
        *(_QWORD *)(v4[6] + 8 * v15) = v12;
        v24 = v4[2];
        v11 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v11)
          goto LABEL_43;
        v4[2] = v25;
        if (v9 == v5)
          return;
      }
      sub_100018D44(0, &qword_10013BBE0, TUConversationMember_ptr);
      v19 = *(id *)(v4[6] + 8 * v15);
      v20 = static NSObject.== infix(_:_:)();

      if ((v20 & 1) == 0)
      {
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)();

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v43;
        v5 = v45;
        goto LABEL_26;
      }
LABEL_17:
      swift_unknownObjectRelease(v12);
      v1 = v43;
      v5 = v45;
      if (v9 == v45)
        return;
    }
  }
  v26 = 0;
  v42 = v1 + 32;
  v44 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v44)
  {
    v27 = v4[5];
    v28 = *(id *)(v42 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      sub_100018D44(0, &qword_10013BBE0, TUConversationMember_ptr);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)();

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }
      v37 = ~v30;
      while (1)
      {
        v31 = (v31 + 1) & v37;
        v32 = v31 >> 6;
        v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
        v34 = 1 << v31;
        if ((v33 & (1 << v31)) == 0)
          break;
        v38 = *(id *)(v4[6] + 8 * v31);
        v39 = static NSObject.== infix(_:_:)();

        if ((v39 & 1) != 0)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_44;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45)
      return;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

Swift::Int sub_1000B66E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  uint64_t v8;
  Swift::Int result;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100008F88((uint64_t *)&unk_10013FEB0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v32 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v32 + 16 * v4);
      v8 = *v6;
      v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v6[1];
      Hasher.init(_seed:)(v33, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v33, v8, v7);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v3 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      v19 = *(_QWORD *)(v5 + 8 * (v17 >> 6));
      v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        v21 = *(_QWORD *)(v3 + 48);
        v22 = (_QWORD *)(v21 + 16 * v17);
        v23 = (const char *)v22[1];
        v24 = *v22 == v8 && v23 == (const char *)v7;
        if (v24 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7, v23, v10, v11, v12, v13, v14, v15);
          goto LABEL_4;
        }
        v25 = ~v16;
        while (1)
        {
          v17 = (v17 + 1) & v25;
          v18 = v17 >> 6;
          v19 = *(_QWORD *)(v5 + 8 * (v17 >> 6));
          v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0)
            break;
          v26 = (_QWORD *)(v21 + 16 * v17);
          v23 = (const char *)v26[1];
          if (*v26 != v8 || v23 != (const char *)v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v26, v23, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v18) = v20 | v19;
      v28 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      *v28 = v8;
      v28[1] = v7;
      v29 = *(_QWORD *)(v3 + 16);
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v31;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1000B6884(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  SEL v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1, v7, v8, v9, v10, v11, v12, v13);
    if (v3)
    {
LABEL_3:
      sub_100008F88(&qword_10013FE78);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v40 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v14 = a1;
      else
        v14 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)a1, v15, v16, v17, v18, v19, v20, v21);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v40 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v22 = 0;
  v23 = (char *)(v4 + 7);
  v39 = v5;
  while ((v40 & 0xC000000000000001) != 0)
  {
    v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v40);
    v25 = __OFADD__(v22++, 1);
    if (v25)
      goto LABEL_32;
LABEL_24:
    v41 = v24;
    v43 = v24;
    v26 = v4[5];
    v27 = type metadata accessor for AnyCancellable(0);
    v28 = sub_100008694(&qword_10013FE80, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v27, v28);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v23[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      v35 = ~v30;
      v36 = sub_100008694(&qword_10013FE88, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v42 = *(_QWORD *)(v4[6] + 8 * v31);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v42, &v43, v27, v36) & 1) != 0)
        {
          swift_release(v41);
          v5 = v39;
          goto LABEL_17;
        }
        v31 = (v31 + 1) & v35;
        v32 = v31 >> 6;
        v33 = *(_QWORD *)&v23[8 * (v31 >> 6)];
        v34 = 1 << v31;
      }
      while ((v33 & (1 << v31)) != 0);
      v5 = v39;
    }
    *(_QWORD *)&v23[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v41;
    v37 = v4[2];
    v25 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v25)
      goto LABEL_33;
    v4[2] = v38;
LABEL_17:
    if (v22 == v5)
      return;
  }
  if (v22 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  v24 = swift_retain(*(_QWORD *)(v40 + 32 + 8 * v22));
  v25 = __OFADD__(v22++, 1);
  if (!v25)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_1000B6B18(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000B6B5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013F160;
  if (!qword_10013F160)
  {
    v1 = sub_100018D44(255, &qword_10013CC10, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_10013F160);
  }
  return result;
}

uint64_t sub_1000B6BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000B6BD8()
{
  uint64_t v0;

  sub_1000B3AC0(v0);
}

uint64_t sub_1000B6BE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t storeEnumTagSinglePayload for PresentingSheetSelection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000B6C50 + 4 * byte_1000EDEE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B6C84 + 4 * byte_1000EDEE0[v4]))();
}

uint64_t sub_1000B6C84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6C8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B6C94);
  return result;
}

uint64_t sub_1000B6CA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6CA8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000B6CAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6CB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentingSheetSelection()
{
  return &type metadata for PresentingSheetSelection;
}

uint64_t *sub_1000B6CD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_1000B6D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_1000B6DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_1000B6E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_1000B6E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000B6EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_1000B6F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6F34);
}

uint64_t sub_1000B6F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B95DC(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_1000B6F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6F4C);
}

uint64_t sub_1000B6F4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000B9670(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_1000B6F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B9700(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&value witness table for Builtin.UnknownObject + 64);
}

double destroy for ShareableContentSuggestion(uint64_t a1)
{
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  double result;

  sub_10004BC68(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_100009070((_QWORD *)(a1 + 120));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 160), v2, v3, v4, v5, v6, v7, v8);
  swift_release(*(_QWORD *)(a1 + 176));
  swift_release(*(_QWORD *)(a1 + 192));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 208)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v22 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 104);
  v24 = *(_DWORD *)(a2 + 112);
  v12 = v4;
  sub_10004BD1C(v23, v22, v21, v20, v5, v6, v7, v19, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = v24;
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 144) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 120, a2 + 120);
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v14;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v15;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v16;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v17;
  swift_bridgeObjectRetain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  return a1;
}

uint64_t assignWithCopy for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _TtC9AirDropUI33AirDropTransferSessionsController *v27;
  SEL v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v42 = *(_QWORD *)(a2 + 80);
  v43 = *(_QWORD *)(a2 + 88);
  v44 = *(_QWORD *)(a2 + 96);
  v45 = *(_QWORD *)(a2 + 104);
  v46 = *(_DWORD *)(a2 + 112);
  sub_10004BD1C(v7, v8, v9, v10, v11, v12, v13, v14, v42, v43, v44, v45);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(_OWORD *)(a1 + 80);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v42;
  *(_QWORD *)(a1 + 88) = v43;
  *(_QWORD *)(a1 + 96) = v44;
  *(_QWORD *)(a1 + 104) = v45;
  *(_DWORD *)(a1 + 112) = v46;
  sub_10004BC68(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, v25);
  sub_10000CEC4((_QWORD *)(a1 + 120), (_QWORD *)(a2 + 120));
  v26 = *(_QWORD *)(a2 + 160);
  v27 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27, v28, v29, v30, v31, v32, v33, v34);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v35 = *(_QWORD *)(a1 + 176);
  v36 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v36;
  swift_retain(v36);
  swift_release(v35);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v37 = *(_QWORD *)(a1 + 192);
  v38 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v38;
  swift_retain(v38);
  swift_release(v37);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v39 = *(_QWORD *)(a1 + 208);
  v40 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v40;
  swift_retain(v40);
  swift_release(v39);
  return a1;
}

__n128 initializeWithTake for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for ShareableContentSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  SEL v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;

  v6 = *(_DWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v18;
  v19 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v19;
  v20 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v20;
  *(_DWORD *)(a1 + 112) = v6;
  sub_10004BC68(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, v17);
  sub_100009070((_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a2 + 160);
  v22 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v21;
  swift_bridgeObjectRelease(v22, v23, v24, v25, v26, v27, v28, v29);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v30 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release(v30);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v31 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release(v31);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v32 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release(v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareableContentSuggestion(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareableContentSuggestion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareableContentSuggestion()
{
  return &type metadata for ShareableContentSuggestion;
}

unint64_t sub_1000B7514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FF50;
  if (!qword_10013FF50)
  {
    v1 = sub_10000950C(&qword_10013FD90);
    sub_1000B7598();
    sub_10000CB94(&qword_100140DA0, &qword_10013FD98, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FF50);
  }
  return result;
}

unint64_t sub_1000B7598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FF58;
  if (!qword_10013FF58)
  {
    v1 = sub_10000950C(&qword_10013FD88);
    sub_1000B7604();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FF58);
  }
  return result;
}

unint64_t sub_1000B7604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FF60;
  if (!qword_10013FF60)
  {
    v1 = sub_10000950C(&qword_10013FD80);
    sub_1000B7688();
    sub_100008694((unint64_t *)&unk_10013FF80, type metadata accessor for LumaTrackingViewModifier, (uint64_t)&unk_1000EB43C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FF60);
  }
  return result;
}

unint64_t sub_1000B7688()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FF68;
  if (!qword_10013FF68)
  {
    v1 = sub_10000950C(&qword_10013FD78);
    sub_10000C9D0(&qword_10013FF70, &qword_10013FF78, (void (*)(void))sub_1000B52E8, (void (*)(void))sub_1000B5458);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FF68);
  }
  return result;
}

void *sub_1000B770C()
{
  return &protocol witness table for Int;
}

unint64_t sub_1000B771C()
{
  unint64_t result;

  result = qword_10013FF90;
  if (!qword_10013FF90)
  {
    result = swift_getWitnessTable(&unk_1000EE0E4, &type metadata for PresentingSheetSelection);
    atomic_store(result, (unint64_t *)&qword_10013FF90);
  }
  return result;
}

uint64_t sub_1000B7760(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114868, 1);
}

uint64_t sub_1000B7770(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114840, 1);
}

uint64_t sub_1000B7780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for NameDrop(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B7808()
{
  type metadata accessor for NameDrop(0);
  return sub_100047B3C();
}

uint64_t sub_1000B7848()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000B7868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B58B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000B7890@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B1C14(a1, v2 + 16, a2);
}

unint64_t sub_1000B7898()
{
  unint64_t result;

  result = qword_10013FFF0;
  if (!qword_10013FFF0)
  {
    result = swift_getWitnessTable(&unk_1000EE06C, &type metadata for PresentingSheetSelection);
    atomic_store(result, (unint64_t *)&qword_10013FFF0);
  }
  return result;
}

unint64_t sub_1000B78DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013FFF8;
  if (!qword_10013FFF8)
  {
    v1 = sub_10000950C(&qword_10013FFE0);
    sub_1000B7980(&qword_100140000, (uint64_t *)&unk_100140008, (void (*)(void))sub_10007CC64, (uint64_t)&protocol conformance descriptor for <A> A?);
    sub_10000CB94(&qword_100140018, &qword_100140020, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10013FFF8);
  }
  return result;
}

uint64_t sub_1000B7980(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B79E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000B2010(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000B79F0()
{
  uint64_t v0;

  return sub_1000B2520(v0 + 16);
}

uint64_t sub_1000B7A04()
{
  uint64_t v0;

  return sub_1000AB0A8(v0 + 16);
}

unint64_t sub_1000B7A0C()
{
  unint64_t result;

  result = qword_1001400A8;
  if (!qword_1001400A8)
  {
    result = swift_getWitnessTable(&unk_1000EB8BC, &type metadata for BackgroundMaterialView);
    atomic_store(result, (unint64_t *)&qword_1001400A8);
  }
  return result;
}

uint64_t sub_1000B7A54()
{
  uint64_t v0;

  return sub_1000B1974(v0 + 16);
}

uint64_t sub_1000B7A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B19C8(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_1000B7A64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001400C0;
  if (!qword_1001400C0)
  {
    v1 = sub_10000950C(&qword_100140090);
    sub_1000B7AD0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001400C0);
  }
  return result;
}

unint64_t sub_1000B7AD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001400C8;
  if (!qword_1001400C8)
  {
    v1 = sub_10000950C(&qword_100140088);
    sub_1000B7B3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001400C8);
  }
  return result;
}

unint64_t sub_1000B7B3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001400D0;
  if (!qword_1001400D0)
  {
    v1 = sub_10000950C(&qword_100140080);
    sub_1000B7BA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001400D0);
  }
  return result;
}

unint64_t sub_1000B7BA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001400D8;
  if (!qword_1001400D8)
  {
    v1 = sub_10000950C(&qword_100140078);
    sub_10000CB94(&qword_1001400E0, &qword_100140070, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001400D8);
  }
  return result;
}

unint64_t sub_1000B7C2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001400E8;
  if (!qword_1001400E8)
  {
    v1 = sub_10000950C(&qword_1001400B8);
    sub_1000B7C98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001400E8);
  }
  return result;
}

unint64_t sub_1000B7C98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001400F0;
  if (!qword_1001400F0)
  {
    v1 = sub_10000950C(&qword_1001400F8);
    sub_1000B7D04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001400F0);
  }
  return result;
}

unint64_t sub_1000B7D04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140100;
  if (!qword_100140100)
  {
    v1 = sub_10000950C(&qword_100140108);
    sub_10000CB94(&qword_100140110, &qword_100140118, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140100);
  }
  return result;
}

uint64_t sub_1000B7D8C()
{
  uint64_t v0;

  return sub_1000AF478(v0 + 16);
}

unint64_t sub_1000B7D94()
{
  unint64_t result;

  result = qword_100140240;
  if (!qword_100140240)
  {
    result = swift_getWitnessTable(&unk_1000EE62C, &type metadata for ContactDetailsHeaderView);
    atomic_store(result, (unint64_t *)&qword_100140240);
  }
  return result;
}

uint64_t sub_1000B7DE0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ShareableContentPreview(a2, a1);
  return a2;
}

uint64_t sub_1000B7E14(uint64_t a1)
{
  destroy for ShareableContentPreview(a1);
  return a1;
}

uint64_t sub_1000B7E44()
{
  uint64_t v0;

  return sub_1000AF4D0(v0 + 16);
}

uint64_t sub_1000B7E4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1[3];
  sub_10000904C(a1, v3);
  result = sub_10000D1B4(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1000B7E98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B179C(a1, v2 + 16, a2);
}

uint64_t type metadata accessor for ShareableContentActionButton(uint64_t a1)
{
  return sub_1000138D0(a1, qword_100140678, (uint64_t)&nominal type descriptor for ShareableContentActionButton);
}

unint64_t sub_1000B7EB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001402A8;
  if (!qword_1001402A8)
  {
    v1 = sub_10000950C(&qword_100140188);
    sub_10000CB94(&qword_1001402B0, &qword_100140168, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_1000B7980(&qword_1001402B8, &qword_100140158, (void (*)(void))sub_1000B7F58, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001402A8);
  }
  return result;
}

uint64_t sub_1000B7F58()
{
  return sub_1000B7980(&qword_1001402C0, &qword_1001402C8, (void (*)(void))sub_1000B7F7C, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_1000B7F7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001402D0;
  if (!qword_1001402D0)
  {
    v1 = sub_10000950C(&qword_1001402D8);
    sub_1000B8000();
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001402D0);
  }
  return result;
}

unint64_t sub_1000B8000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001402E0;
  if (!qword_1001402E0)
  {
    v1 = sub_10000950C(&qword_1001402E8);
    sub_1000B8464(&qword_1001402F0, &qword_1001402F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001402E0);
  }
  return result;
}

unint64_t sub_1000B8084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140310;
  if (!qword_100140310)
  {
    v1 = sub_10000950C(&qword_100140148);
    sub_1000B8108();
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140310);
  }
  return result;
}

unint64_t sub_1000B8108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140318;
  if (!qword_100140318)
  {
    v1 = sub_10000950C(&qword_100140140);
    sub_1000B8174();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140318);
  }
  return result;
}

unint64_t sub_1000B8174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140320;
  if (!qword_100140320)
  {
    v1 = sub_10000950C(&qword_100140138);
    sub_10000CB94(&qword_100140328, &qword_100140130, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140320);
  }
  return result;
}

uint64_t sub_1000B81F8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    sub_1000452A8(result, a2, a3 & 1);
    swift_retain(a8);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

double sub_1000B8234(uint64_t a1, uint64_t a2, char a3, _TtC9AirDropUI33AirDropTransferSessionsController *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  double result;

  if (a4)
  {
    sub_100044F90(a1, a2, a3 & 1);
    swift_bridgeObjectRelease(a4, v10, v11, v12, v13, v14, v15, v16);
    *(_QWORD *)&result = swift_release(a8).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000B8274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B0F90(a1, v2 + 16, a2);
}

uint64_t sub_1000B8280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000B0548(a1, v2 + 16, a2);
}

unint64_t sub_1000B8288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140350;
  if (!qword_100140350)
  {
    v1 = sub_10000950C(&qword_100140358);
    sub_1000B830C();
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140350);
  }
  return result;
}

unint64_t sub_1000B830C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140360;
  if (!qword_100140360)
  {
    v1 = sub_10000950C(&qword_100140368);
    sub_1000B8378();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140360);
  }
  return result;
}

unint64_t sub_1000B8378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140370;
  if (!qword_100140370)
  {
    v1 = sub_10000950C(&qword_100140378);
    sub_1000B83E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140370);
  }
  return result;
}

unint64_t sub_1000B83E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140380;
  if (!qword_100140380)
  {
    v1 = sub_10000950C(&qword_100140388);
    sub_1000B8464(&qword_100140390, &qword_100140398);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140380);
  }
  return result;
}

uint64_t sub_1000B8464(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000950C(a2);
    sub_100008694(&qword_1001402A0, type metadata accessor for ShareableContentActionButton, (uint64_t)&unk_1000EE5DC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B84E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8508(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000B8530@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8558(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000B857C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000B85AC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_1000B85D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403C8;
  if (!qword_1001403C8)
  {
    v1 = sub_10000950C(&qword_1001401F8);
    sub_1000B865C();
    sub_100008694(&qword_100140440, type metadata accessor for VibrancyEffectModifier, (uint64_t)&unk_1000EB86C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403C8);
  }
  return result;
}

unint64_t sub_1000B865C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403D0;
  if (!qword_1001403D0)
  {
    v1 = sub_10000950C(&qword_1001401F0);
    sub_1000B86E0();
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403D0);
  }
  return result;
}

unint64_t sub_1000B86E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403D8;
  if (!qword_1001403D8)
  {
    v1 = sub_10000950C(&qword_1001401E8);
    sub_1000B874C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403D8);
  }
  return result;
}

unint64_t sub_1000B874C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403E0;
  if (!qword_1001403E0)
  {
    v1 = sub_10000950C(&qword_1001401E0);
    sub_1000B87B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403E0);
  }
  return result;
}

unint64_t sub_1000B87B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403E8;
  if (!qword_1001403E8)
  {
    v1 = sub_10000950C(&qword_1001401D8);
    sub_1000B8824();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403E8);
  }
  return result;
}

unint64_t sub_1000B8824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403F0;
  if (!qword_1001403F0)
  {
    v1 = sub_10000950C(&qword_1001401D0);
    sub_1000B88A8();
    sub_10000CB94(&qword_100140430, &qword_100140438, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403F0);
  }
  return result;
}

unint64_t sub_1000B88A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001403F8;
  if (!qword_1001403F8)
  {
    v1 = sub_10000950C(&qword_1001401C8);
    sub_1000B892C();
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001403F8);
  }
  return result;
}

unint64_t sub_1000B892C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140400;
  if (!qword_100140400)
  {
    v1 = sub_10000950C(&qword_1001401C0);
    sub_10000CB94(&qword_100140408, &qword_1001401B8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140400);
  }
  return result;
}

uint64_t sub_1000B89D4()
{
  uint64_t v0;

  return sub_1000AF9C4(v0 + 16);
}

uint64_t sub_1000B89DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000AFA18(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000B89E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140468;
  if (!qword_100140468)
  {
    v1 = sub_10000950C(&qword_100140460);
    sub_1000B8A68();
    sub_100008694(&qword_100140440, type metadata accessor for VibrancyEffectModifier, (uint64_t)&unk_1000EB86C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140468);
  }
  return result;
}

unint64_t sub_1000B8A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140470;
  if (!qword_100140470)
  {
    v1 = sub_10000950C(&qword_100140478);
    sub_1000B8AEC();
    sub_10000CB94((unint64_t *)&unk_100140300, &qword_10013D9E0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140470);
  }
  return result;
}

unint64_t sub_1000B8AEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140480;
  if (!qword_100140480)
  {
    v1 = sub_10000950C(&qword_100140488);
    sub_1000B8B58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140480);
  }
  return result;
}

unint64_t sub_1000B8B58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140490;
  if (!qword_100140490)
  {
    v1 = sub_10000950C(&qword_100140498);
    sub_1000B8BC4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140490);
  }
  return result;
}

unint64_t sub_1000B8BC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001404A0;
  if (!qword_1001404A0)
  {
    v1 = sub_10000950C(&qword_1001404A8);
    sub_1000B8C48();
    sub_10000CB94(&qword_1001404D0, &qword_1001404D8, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001404A0);
  }
  return result;
}

unint64_t sub_1000B8C48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001404B0;
  if (!qword_1001404B0)
  {
    v1 = sub_10000950C(&qword_1001404B8);
    sub_10000CB94(&qword_1001404C0, &qword_1001404C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001404B0);
  }
  return result;
}

uint64_t sub_1000B8CCC@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000AF570(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000B8CD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000AF924(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000B8CDC()
{
  unint64_t result;

  result = qword_100140558;
  if (!qword_100140558)
  {
    result = swift_getWitnessTable(&unk_1000EE58C, &type metadata for CollaborateButtonView);
    atomic_store(result, (unint64_t *)&qword_100140558);
  }
  return result;
}

unint64_t sub_1000B8D20()
{
  unint64_t result;

  result = qword_100140560;
  if (!qword_100140560)
  {
    result = swift_getWitnessTable(&unk_1000EE53C, &type metadata for SendCopyButtonView);
    atomic_store(result, (unint64_t *)&qword_100140560);
  }
  return result;
}

uint64_t sub_1000B8D64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8D8C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000B8DB8()
{
  uint64_t v0;

  return sub_1000AF880(v0 + 16);
}

uint64_t sub_1000B8DC4()
{
  uint64_t v0;

  return sub_1000AF8D4(v0 + 16);
}

uint64_t sub_1000B8DCC()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000B8DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B58B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_1000B8E10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8E38(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000B8E60()
{
  uint64_t v0;
  uint64_t started;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  started = type metadata accessor for StartCollaborationAction(0);
  v2 = *(_QWORD *)(started - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 232) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  sub_10004BC68(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_100009070((_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 176), v7, v8, v9, v10, v11, v12, v13);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 224));
  v14 = v0 + v4;
  v15 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release(*(_QWORD *)(v14 + *(int *)(started + 20)));

  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B8F58()
{
  return sub_1000B9078(type metadata accessor for StartCollaborationAction, sub_1000B0E4C);
}

uint64_t sub_1000B8F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for SendOverAirDropAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 232) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  sub_10004BC68(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_100009070((_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 176), v7, v8, v9, v10, v11, v12, v13);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 224));
  v14 = v0 + v4;
  v15 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release(*(_QWORD *)(v14 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B9064()
{
  return sub_1000B9078(type metadata accessor for SendOverAirDropAction, (uint64_t (*)(uint64_t, uint64_t))sub_1000B1728);
}

uint64_t sub_1000B9078(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + 16, v2 + ((v3 + 232) & ~v3));
}

uint64_t sub_1000B90C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 120) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100009070((_QWORD *)(v0 + 32));
  sub_100009070((_QWORD *)(v0 + 72));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000B9168(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)(v1 + 4);
  v9 = (uint64_t)(v1 + 9);
  v10 = v1[14];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_10013D3FC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000104E4;
  return sub_10004B2F4(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000B922C()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_10004BC68(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_100009070((_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 176), v1, v2, v3, v4, v5, v6, v7);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 224));
  sub_100009070((_QWORD *)(v0 + 232));
  return swift_deallocObject(v0, 272, 7);
}

void sub_1000B92B4()
{
  uint64_t v0;

  sub_1000B1900(v0 + 16, (_QWORD *)(v0 + 232));
}

uint64_t sub_1000B92C4()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_10004BC68(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_100009070((_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 176), v1, v2, v3, v4, v5, v6, v7);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 224));
  return swift_deallocObject(v0, 232, 7);
}

void sub_1000B9344()
{
  uint64_t v0;

  sub_1000AB3C0(v0 + 16);
}

uint64_t *sub_1000B934C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_1000B93DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000B9424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_1000B948C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  v11 = v8[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_1000B9500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000B955C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1000B95C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B95D0);
}

uint64_t sub_1000B95D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B95DC(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource);
}

uint64_t sub_1000B95DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000B9658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B9664);
}

uint64_t sub_1000B9664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000B9670(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource);
}

uint64_t sub_1000B9670(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000B96E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B9700(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t)&value witness table for () + 64);
}

uint64_t sub_1000B9700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  _QWORD v9[2];

  result = a4(319);
  if (v8 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    v9[1] = a5;
    swift_initStructMetadata(a1, 256, 2, v9, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SendCopyButtonView()
{
  return &type metadata for SendCopyButtonView;
}

ValueMetadata *type metadata accessor for CollaborateButtonView()
{
  return &type metadata for CollaborateButtonView;
}

void destroy for ShareableContentPreview(uint64_t a1)
{
  SEL v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  sub_100009070((_QWORD *)a1);
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 40), v2, v3, v4, v5, v6, v7, v8);

}

uint64_t initializeWithCopy for ShareableContentPreview(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v5);
  v7 = v6;
  return a1;
}

_QWORD *assignWithCopy for ShareableContentPreview(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  SEL v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  sub_10000CEC4(a1, a2);
  v4 = a2[5];
  v5 = (_TtC9AirDropUI33AirDropTransferSessionsController *)a1[5];
  a1[5] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5, v6, v7, v8, v9, v10, v11, v12);
  v13 = (void *)a1[6];
  v14 = (void *)a2[6];
  a1[6] = v14;
  v15 = v14;

  return a1;
}

uint64_t assignWithTake for ShareableContentPreview(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;

  sub_100009070((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease(v6, v7, v8, v9, v10, v11, v12, v13);
  v14 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  return a1;
}

ValueMetadata *type metadata accessor for ShareableContentPreview()
{
  return &type metadata for ShareableContentPreview;
}

ValueMetadata *type metadata accessor for ContactDetailsHeaderView()
{
  return &type metadata for ContactDetailsHeaderView;
}

unint64_t sub_1000B98D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001406B0;
  if (!qword_1001406B0)
  {
    v1 = sub_10000950C(&qword_10013FFC0);
    sub_1000B9958();
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001406B0);
  }
  return result;
}

unint64_t sub_1000B9958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001406B8;
  if (!qword_1001406B8)
  {
    v1 = sub_10000950C(&qword_10013FFA8);
    sub_10000CB94((unint64_t *)&unk_1001406C0, &qword_10013FFA0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000CB94(&qword_10013D868, &qword_10013D6E0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001406B8);
  }
  return result;
}

uint64_t sub_1000B99F4()
{
  _QWORD v1[6];

  v1[0] = sub_10000950C(&qword_10013FFC8);
  v1[1] = &type metadata for PresentingSheetSelection;
  v1[2] = sub_10000950C(&qword_10013FFE0);
  v1[3] = sub_10000CB94(&qword_10013FFE8, &qword_10013FFC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[4] = sub_1000B7898();
  v1[5] = sub_1000B78DC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.sheet<A, B>(item:onDismiss:content:)>>, 1);
}

uint64_t sub_1000B9A90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114930, 1);
}

uint64_t sub_1000B9AA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114908, 1);
}

uint64_t sub_1000B9AB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001148E0, 1);
}

uint64_t sub_1000B9AC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001148B8, 1);
}

uint64_t sub_1000B9AD0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114890, 1);
}

unint64_t sub_1000B9AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140CE0;
  if (!qword_100140CE0)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100140700);
    sub_100056190();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140CE0);
  }
  return result;
}

uint64_t sub_1000B9B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ShareableContentActionButton(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B9BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for ShareableContentActionButton(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(void))(v0 + *(int *)(v1 + 20) + ((v2 + 16) & ~v2)))();
}

uint64_t sub_1000B9C24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A796C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000B9C2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001407B0;
  if (!qword_1001407B0)
  {
    v1 = sub_10000950C(&qword_1001407A8);
    sub_1000B9CB0();
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001407B0);
  }
  return result;
}

unint64_t sub_1000B9CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001407B8;
  if (!qword_1001407B8)
  {
    v1 = sub_10000950C(&qword_1001407C0);
    sub_1000B9D1C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001407B8);
  }
  return result;
}

unint64_t sub_1000B9D1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001407C8;
  if (!qword_1001407C8)
  {
    v1 = sub_10000950C((uint64_t *)&unk_1001407D0);
    sub_1000B9DA0();
    sub_10000CB94(&qword_1001407F8, &qword_100140800, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001407C8);
  }
  return result;
}

unint64_t sub_1000B9DA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141110;
  if (!qword_100141110)
  {
    v1 = sub_10000950C((uint64_t *)&unk_1001407E0);
    sub_1000BA158((unint64_t *)&qword_100141120, &qword_1001407F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141110);
  }
  return result;
}

uint64_t sub_1000B9E2C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_1000452A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000B9E68(uint64_t a1)
{
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v2 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 24);
  sub_100044F90(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t sub_1000B9EA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  v5 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 120);
  swift_release(*(_QWORD *)a1);
  sub_100044F90(v2, v3, v4);
  swift_release(v6);
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t sub_1000B9F0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_BYTE *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 144);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_1000452A8(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_1000B9F74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  _TtC9AirDropUI33AirDropTransferSessionsController *v5;
  uint64_t v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_BYTE *)(a1 + 112);
  v5 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 144);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_100044F90(v2, v3, v4);
  swift_release(v6);
  swift_bridgeObjectRelease(v5, v7, v8, v9, v10, v11, v12, v13);
  return a1;
}

unint64_t sub_1000B9FDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140850;
  if (!qword_100140850)
  {
    v1 = sub_10000950C(&qword_100140840);
    sub_1000BA048();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140850);
  }
  return result;
}

unint64_t sub_1000BA048()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140858;
  if (!qword_100140858)
  {
    v1 = sub_10000950C(&qword_100140838);
    sub_1000BA0B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140858);
  }
  return result;
}

unint64_t sub_1000BA0B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140860;
  if (!qword_100140860)
  {
    v1 = sub_10000950C(&qword_100140830);
    sub_1000BA158((unint64_t *)&qword_10013C350, &qword_100140870);
    sub_10000CB94((unint64_t *)&unk_100140420, &qword_10013B5E8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140860);
  }
  return result;
}

uint64_t sub_1000BA158(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000950C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000BA1B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140920;
  if (!qword_100140920)
  {
    v1 = sub_10000950C(&qword_1001408C0);
    sub_1000BA23C();
    sub_10000CB94(&qword_10013B670, &qword_100140940, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140920);
  }
  return result;
}

unint64_t sub_1000BA23C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140928;
  if (!qword_100140928)
  {
    v1 = sub_10000950C(&qword_1001408B8);
    sub_10000CB94((unint64_t *)&unk_100140930, &qword_1001408B0, (uint64_t)&protocol conformance descriptor for _BackdropEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140928);
  }
  return result;
}

unint64_t sub_1000BA2C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140948;
  if (!qword_100140948)
  {
    v1 = sub_10000950C(&qword_100140F70);
    sub_1000BA344();
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140948);
  }
  return result;
}

unint64_t sub_1000BA344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140950;
  if (!qword_100140950)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100140880);
    sub_1000BA3C8();
    sub_10000CB94(&qword_10013B670, &qword_100140940, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140950);
  }
  return result;
}

unint64_t sub_1000BA3C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140958;
  if (!qword_100140958)
  {
    v1 = sub_10000950C(&qword_100140C90);
    sub_1000BA44C();
    sub_10000CB94(&qword_100140970, &qword_100140CB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140958);
  }
  return result;
}

unint64_t sub_1000BA44C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140960;
  if (!qword_100140960)
  {
    v1 = sub_10000950C(&qword_1001405A0);
    sub_10000CB94(&qword_100140968, (uint64_t *)&unk_100140C80, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140960);
  }
  return result;
}

unint64_t sub_1000BA4D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140978;
  if (!qword_100140978)
  {
    v1 = sub_10000950C(&qword_1001406F0);
    sub_10000CB94(&qword_100140980, &qword_1001406E0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000CB94(&qword_1001404D0, &qword_1001404D8, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140978);
  }
  return result;
}

uint64_t sub_1000BA570()
{
  return sub_10000CB94(&qword_100140988, &qword_100140990, (uint64_t)&protocol conformance descriptor for Button<A>);
}

unint64_t sub_1000BA5A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140998;
  if (!qword_100140998)
  {
    v1 = sub_10000950C(&qword_100140818);
    sub_1000BA624();
    sub_10000CB94(&qword_1001409D0, &qword_100140810, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140998);
  }
  return result;
}

unint64_t sub_1000BA624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001409A0;
  if (!qword_1001409A0)
  {
    v1 = sub_10000950C(&qword_1001409A8);
    sub_1000BA690();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001409A0);
  }
  return result;
}

unint64_t sub_1000BA690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001409B0;
  if (!qword_1001409B0)
  {
    v1 = sub_10000950C(&qword_1001409B8);
    sub_10000CB94(&qword_1001409C0, &qword_1001409C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001409B0);
  }
  return result;
}

unint64_t sub_1000BA718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001409D8;
  if (!qword_1001409D8)
  {
    v1 = sub_10000950C((uint64_t *)&unk_1001409E0);
    sub_1000B9FDC();
    sub_10000CB94(&qword_100140878, &qword_100140820, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001409D8);
  }
  return result;
}

void sub_1000BA7C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id i;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100018D44(0, &qword_10013F088, TUConversation_ptr);
    v5 = sub_100016EF4((unint64_t *)&unk_10013F090, &qword_10013F088, TUConversation_ptr);
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v13)
    {
      v22 = *(_QWORD *)(v25 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
      {
LABEL_31:
        v14 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        for (i = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15); i; v14 = v9)
        {
          if (objc_msgSend(i, "state", v24) == (id)3)
            break;

          v8 = v16;
          v9 = v14;
          if ((v1 & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v17 = __CocoaSet.Iterator.next()(v6);
          if (!v17)
            break;
          v18 = v17;
          v26 = v17;
          v19 = sub_100018D44(0, &qword_10013F088, TUConversation_ptr);
          swift_unknownObjectRetain(v18);
          swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
          i = v28;
          swift_unknownObjectRelease(v18);
          v16 = v8;
        }
        goto LABEL_36;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
        {
          v23 = v8 + 6;
          while (v13 != v23)
          {
            v22 = *(_QWORD *)(v25 + 8 * v23++);
            if (v22)
            {
              v16 = v23 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_31;
      }
    }
LABEL_36:
    sub_100028460(v1);
    return;
  }
  __break(1u);
}

double sub_1000BAA98(uint64_t a1, void *aBlock, uint64_t ObjCClassMetadata, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(void *, uint64_t, uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  double result;

  v7 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  if (v8)
  {
    v9 = swift_allocObject(&unk_1001293C0, 24, 7);
    *(_QWORD *)(v9 + 16) = v8;
    v8 = sub_1000BEDA8;
    if (!ObjCClassMetadata)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = 0;
  if (ObjCClassMetadata)
LABEL_3:
    ObjCClassMetadata = swift_getObjCClassMetadata(ObjCClassMetadata);
LABEL_4:
  if (a4)
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  swift_retain(v6);
  v7(v8, v9, ObjCClassMetadata, a4);
  swift_bridgeObjectRelease(a4);
  sub_100026F80((uint64_t)v8, v9);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

void sub_1000BAB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t sub_1000BABD4()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;

  v1 = objc_msgSend(*v0, "content");
  v2 = objc_msgSend(v1, "metadata");

  v3 = objc_msgSend(v2, "title");
  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

double sub_1000BAC78@<D0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  double result;
  _OWORD v10[2];
  __int128 v11;
  char v12;

  v3 = objc_msgSend(*v1, "content");
  v4 = objc_msgSend(v3, "sourceBundleIdentifier");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  sub_100079DA4(v5, v7, (uint64_t)v10);
  v8 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v8;
  result = *(double *)&v11;
  *(_OWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  return result;
}

uint64_t sub_1000BAD1C()
{
  id *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "itemProviders");
  v2 = sub_100018D44(0, (unint64_t *)&unk_10013D2F0, NSItemProvider_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  return v3;
}

id sub_1000BAD80()
{
  id *v0;

  return objc_msgSend(*v0, "metadata");
}

id sub_1000BADA4()
{
  id *v0;

  return objc_msgSend(*v0, "previewImage");
}

void sub_1000BADC8(void *a1)
{
  id *v1;

  objc_msgSend(*v1, "setPreviewImage:", a1);

}

_UNKNOWN **sub_1000BADFC()
{
  return &off_100129128;
}

uint64_t sub_1000BAE08()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1000BAE20, 0, 0);
}

uint64_t sub_1000BAE20()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000BAEB4;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1000BB034;
  v4[3] = &unk_100129190;
  v4[4] = v3;
  objc_msgSend(v2, "retrieveShareableContentWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000BAEB4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_1000BAFF8;
  else
    v2 = sub_1000BAF14;
  return swift_task_switch(v2, 0, 0);
}

void sub_1000BAF14()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v1);
    v4 = 0;
    goto LABEL_12;
  }
  if (v1 < 0)
    v5 = *(_QWORD *)(v0 + 120);
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (!v6)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(id *)(v1 + 32);
LABEL_6:
    v3 = v2;
    swift_bridgeObjectRelease(v1);
    v4 = objc_msgSend(objc_allocWithZone((Class)AUISWShareableContent), "initWithContent:", v3);

LABEL_12:
    (*(void (**)(id))(v0 + 8))(v4);
    return;
  }
  __break(1u);
}

uint64_t sub_1000BAFF8()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB034(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = sub_100018D44(0, &qword_100140A20, SWShareableContent_ptr);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000BB0DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = (_QWORD *)swift_task_alloc(dword_100140A1C);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1000BB140;
  v4[16] = v3;
  return swift_task_switch(sub_1000BAE20, 0, 0);
}

uint64_t sub_1000BB140(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000BB19C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t sub_1000BB1C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BC300(v1, a1);
}

uint64_t sub_1000BB1D4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

void *sub_1000BB1DC()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 88);
  v2 = v1;
  return v1;
}

void sub_1000BB200(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
}

void sub_1000BB228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _TtC9AirDropUI33AirDropTransferSessionsController *v14;
  Class isa;
  SEL v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v2 = sub_100008F88(&qword_100140AF0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  v6 = (void *)objc_opt_self(UAUserActivity);
  v14 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_10007DF84(&_swiftEmptyArrayStorage, v7, v8, v9, v10, v11, v12, v13);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14, v16, v17, v18, v19, v20, v21, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v23 = *(unsigned __int8 *)(v3 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1001293E8, v24 + v4, v23 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v25 + v24, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1000BEE14;
  v28 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BB488;
  aBlock[3] = &unk_100129400;
  v26 = _Block_copy(aBlock);
  objc_msgSend(v6, "currentUserActivityUUIDWithOptions:completionHandler:", isa, v26, swift_release(v28).n128_f64[0]);
  _Block_release(v26);

}

uint64_t sub_1000BB3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_100008F88((uint64_t *)&unk_100140AC8);
  __chkstk_darwin(v8, v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v18 = a4;
    swift_errorRetain(a4);
    v13 = sub_100008F88(&qword_100140AF0);
    return CheckedContinuation.resume(throwing:)(&v18, v13);
  }
  else
  {
    v15 = &v12[*(int *)(v10 + 48)];
    sub_1000BEC2C(a1, (uint64_t)v12);
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    swift_bridgeObjectRetain(a3);
    v16 = sub_100008F88(&qword_100140AF0);
    return CheckedContinuation.resume(returning:)(v12, v16);
  }
}

uint64_t sub_1000BB488(uint64_t a1, uint64_t a2, _TtC9AirDropUI33AirDropTransferSessionsController *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, _TtC9AirDropUI33AirDropTransferSessionsController *, void *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  id v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v28;

  v8 = sub_100008F88((uint64_t *)&unk_1001405D0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(char *, uint64_t, _TtC9AirDropUI33AirDropTransferSessionsController *, void *))(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(a2, v10);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 0, 1, v15);
  }
  else
  {
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  }
  if (a3)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    a3 = v18;
  }
  else
  {
    v17 = 0;
  }
  swift_retain(v13);
  v19 = a4;
  v14(v12, v17, a3, a4);
  swift_release(v13);

  swift_bridgeObjectRelease(a3, v20, v21, v22, v23, v24, v25, v26);
  return sub_10000CC5C((uint64_t)v12, (uint64_t *)&unk_1001405D0);
}

uint64_t sub_1000BB5C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_10000CBD4((uint64_t)&v12, v10, &qword_100140AE8);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000BB66C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  *(_QWORD *)(v1 + 112) = a1;
  v4 = (uint64_t (*)(uint64_t))((char *)&dword_100140AB8 + dword_100140AB8);
  v2 = (_QWORD *)swift_task_alloc(unk_100140ABC);
  *(_QWORD *)(v1 + 120) = v2;
  *v2 = v1;
  v2[1] = sub_1000BB6D4;
  return v4(v1 + 16);
}

uint64_t sub_1000BB6D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    sub_10000CBD4(v2 + 16, *(_QWORD *)(v2 + 112), &qword_100140AC0);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000BB730()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void *sub_1000BB75C()
{
  return &_swiftEmptyArrayStorage;
}

void *sub_1000BB768()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void sub_1000BB78C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

uint64_t sub_1000BB7B4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = a1;
  return swift_task_switch(sub_1000BB7CC, 0, 0);
}

uint64_t sub_1000BB7CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;

  v1 = v0 + 2;
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_1000BB904;
  v2 = swift_continuation_init(v0 + 2, 0);
  v3 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitorConfiguration), "configurationForDefaultMainDisplayMonitor");
  objc_msgSend(v3, "setNeedsUserInteractivePriority:", 1);
  v4 = swift_allocObject(&unk_100129438, 24, 7);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  *(_QWORD *)(v4 + 16) = v2;
  v5[4] = sub_1000BEE8C;
  v5[5] = v4;
  v5[1] = 1107296256;
  v5[2] = sub_1000BB9A0;
  v5[3] = &unk_100129450;
  v6 = _Block_copy(v5);
  objc_msgSend(v3, "setTransitionHandler:", v6, swift_release(v5[5]).n128_f64[0]);
  _Block_release(v6);
  v5[8] = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor), "monitorWithConfiguration:", v3);

  return swift_continuation_await(v1);
}

uint64_t sub_1000BB904()
{
  uint64_t v0;

  **(_QWORD **)(*(_QWORD *)v0 + 136) = *(_QWORD *)(*(_QWORD *)v0 + 128);
  return swift_task_switch(sub_1000BB95C, 0, 0);
}

uint64_t sub_1000BB95C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  objc_msgSend(v1, "invalidate");

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BB9A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, a3, a4);
  swift_release(v7);

}

uint64_t sub_1000BBA28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  *(_QWORD *)(v1 + 80) = a1;
  v4 = (uint64_t (*)(uint64_t))((char *)&dword_100140AF8 + dword_100140AF8);
  v2 = (_QWORD *)swift_task_alloc(unk_100140AFC);
  *(_QWORD *)(v1 + 88) = v2;
  *v2 = v1;
  v2[1] = sub_1000BBA90;
  return v4(v1 + 16);
}

uint64_t sub_1000BBA90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    sub_10000CBD4(v2 + 16, *(_QWORD *)(v2 + 80), &qword_100140B00);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000BBAEC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  _QWORD v17[9];
  uint64_t v18;

  v4 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BC2C4(a1, (uint64_t)v17);
  if (v18 < 0)
  {
    v18 &= ~0x8000000000000000;
    v8 = v17[0];
    v9 = 1;
  }
  else
  {
    v8 = v17[4];
    v9 = 5;
  }
  v10 = (void *)v17[v9];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 1);
  v11._countAndFlagsBits = 1598309441;
  v11._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v12);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  LocalizedStringResource.init(stringInterpolation:)(v7);
  v14 = type metadata accessor for LocalizedStringResource(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 0, 1, v14);
}

uint64_t sub_1000BBBF0@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  Swift::String v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  _BYTE v29[16];

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4, v5);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8, v9);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v12, v13);
  v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(3, 1);
  v16._countAndFlagsBits = 6246228;
  v16._object = (void *)0xE300000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  v17 = objc_msgSend(a1, "metadata");
  if (v17 && (v18 = v17, v19 = objc_msgSend(v17, "title"), v18, v19))
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

  }
  else
  {
    v23 = String.LocalizationValue.init(stringLiteral:)(0x414C504552414853, 0xE900000000000059);
    static Locale.current.getter(v23);
    v20 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, 0, v7, 0, 0, 256);
    v22 = v24;
  }
  v25._countAndFlagsBits = v20;
  v25._object = v22;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v25);
  swift_bridgeObjectRelease(v22);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  LocalizedStringResource.init(stringInterpolation:)(v15);
  v27 = type metadata accessor for LocalizedStringResource(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 0, 1, v27);
}

uint64_t sub_1000BBDE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BBBF0(*(void **)(v1 + 8), a1);
}

uint64_t sub_1000BBDEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  id v14;
  uint64_t result;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = objc_msgSend(*(id *)(v1 + 8), "bundleIdentifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xE000000000000000;
  }
  sub_100079DA4(v5, v7, (uint64_t)v16);
  v9 = v16[0];
  v8 = v16[1];
  v11 = v16[2];
  v10 = v16[3];
  v12 = v19;
  v13 = v17;
  v20 = v18;
  v14 = v17;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  sub_1000170DC(&v20);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);

  swift_bridgeObjectRelease_n(v8, 2);
  result = swift_bridgeObjectRelease_n(v10, 2);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a1 + 48) = v12;
  return result;
}

void *sub_1000BBEEC()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void sub_1000BBF10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t sub_1000BBF38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000BBF50, 0, 0);
}

uint64_t sub_1000BBF50()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _TtC9AirDropUI33AirDropTransferSessionsController *v4;
  void *v5;
  void *v6;
  SEL v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _TtC9AirDropUI33AirDropTransferSessionsController *v17;
  void *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;

  v1 = objc_msgSend(*(id *)(v0 + 16), "activeConversations");
  v2 = sub_100018D44(0, &qword_10013F088, TUConversation_ptr);
  v3 = sub_100016EF4((unint64_t *)&unk_10013F090, &qword_10013F088, TUConversation_ptr);
  v4 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  sub_1000BA7C0((uint64_t)v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4, v7, v8, v9, v10, v11, v12, v13);
  if (!v6)
  {
LABEL_11:
    v26 = 0;
    return (*(uint64_t (**)(void *, id, _QWORD))(v0 + 8))(v6, v26, 0);
  }
  v14 = objc_msgSend(v6, "activitySessions");
  v15 = sub_100018D44(0, &qword_100140AA8, TUConversationActivitySession_ptr);
  v16 = sub_100016EF4(&qword_100140AB0, &qword_100140AA8, TUConversationActivitySession_ptr);
  v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v14, v15, v16);

  v18 = (void *)sub_1000CEFE4((uint64_t)v17);
  swift_bridgeObjectRelease(v17, v19, v20, v21, v22, v23, v24, v25);
  if (!v18)
  {
LABEL_6:
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100009558(v27, (uint64_t)qword_100148040);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Active conversation does not have any joined SharePlay sessions, returning nil from ActiveSharePlaySessionProvider", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v6 = 0;
    goto LABEL_11;
  }
  if (objc_msgSend(v18, "state") != (id)1)
  {

    goto LABEL_6;
  }
  v26 = objc_msgSend(v18, "activity");

  return (*(uint64_t (**)(void *, id, _QWORD))(v0 + 8))(v6, v26, 0);
}

uint64_t sub_1000BC19C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = (_QWORD *)swift_task_alloc(dword_100140AA4);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1000BC200;
  v4[2] = v3;
  return swift_task_switch(sub_1000BBF50, 0, 0);
}

uint64_t sub_1000BC200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 24);
  v10 = *v4;
  swift_task_dealloc(v9);
  if (!v3)
  {
    v11 = *(_QWORD **)(v8 + 16);
    *v11 = a1;
    v11[1] = a2;
    v11[2] = a3;
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

ValueMetadata *type metadata accessor for FrontmostAppShareableContentProvider()
{
  return &type metadata for FrontmostAppShareableContentProvider;
}

ValueMetadata *type metadata accessor for UserActivityShareableContentProvider()
{
  return &type metadata for UserActivityShareableContentProvider;
}

ValueMetadata *type metadata accessor for ActiveSharePlaySessionProvider()
{
  return &type metadata for ActiveSharePlaySessionProvider;
}

_UNKNOWN **sub_1000BC2A0()
{
  return &off_100129210;
}

_UNKNOWN **sub_1000BC2AC()
{
  return &off_100129278;
}

_UNKNOWN **sub_1000BC2B8()
{
  return &off_1001292E0;
}

uint64_t sub_1000BC2C4(__int128 *a1, uint64_t a2)
{
  initializeWithTake for ContactDetails(a2, a1);
  return a2;
}

uint64_t sub_1000BC300(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SourceApplication(a2, a1);
  return a2;
}

uint64_t sub_1000BC33C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = sub_100008F88(&qword_10013BCC0);
  v0[2] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100008F88(&qword_100140B18);
  v0[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v0[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[5] = swift_task_alloc(v4);
  v0[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000BC3D0, 0, 0);
}

uint64_t sub_1000BC3D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[2];
  v2 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withOperationTimeout<A>(_:priority:operation:)[1]);
  v0[7] = v3;
  v4 = sub_100018D44(0, &qword_100140B28, FBSDisplayLayout_ptr);
  *v3 = v0;
  v3[1] = sub_1000BC484;
  return withOperationTimeout<A>(_:priority:operation:)(v0[6], 2000000000000000000, 0, v0[2], &unk_100140B20, 0, v4);
}

uint64_t sub_1000BC484()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  sub_10000CC5C(v1, &qword_10013BCC0);
  return swift_task_switch(sub_1000BC4EC, 0, 0);
}

void sub_1000BC4EC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  SEL v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  char **v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;
  _TtC9AirDropUI33AirDropTransferSessionsController *v61;
  id v62;
  char **v63;
  id v64;
  const char *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _TtC9AirDropUI33AirDropTransferSessionsController *v73;
  _TtC9AirDropUI33AirDropTransferSessionsController *v74;
  char v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  SEL v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  id v99;
  uint64_t v100;

  v1 = *((_QWORD *)v0 + 5);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_QWORD *)v0 + 4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, *((_QWORD *)v0 + 6), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  v5 = *((_QWORD *)v0 + 4);
  v6 = (id *)*((_QWORD *)v0 + 5);
  v7 = *((_QWORD *)v0 + 3);
  if (v4 != enum case for OperationTimeoutResult.success<A>(_:))
  {
    v32 = *(_QWORD *)(v5 + 8);
    ((void (*)(_QWORD, uint64_t))v32)(*((_QWORD *)v0 + 5), v7);
    if (qword_10013AD60 != -1)
      goto LABEL_53;
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, uint64_t))(v5 + 96))(*((_QWORD *)v0 + 5), v7);
  v99 = *v6;
  v8 = objc_msgSend(*v6, "elements");
  v9 = sub_100018D44(0, (unint64_t *)&unk_100140B30, FBSDisplayLayoutElement_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v38 = v10;
    else
      v38 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v18 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v10, v39, v40, v41, v42, v43, v44, v45);
    if (v18)
    {
LABEL_4:
      if (v18 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v18; ++i)
      {
        if ((v10 & 0xC000000000000001) != 0)
          v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
        else
          v29 = *(id *)(v10 + 8 * i + 32);
        v30 = v29;
        v31 = objc_msgSend(v29, "isUIApplicationElement");
        if ((_DWORD)v31)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v31);
          v20 = *(_QWORD *)_swiftEmptyArrayStorage.connection;
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
          v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v30);
          specialized ContiguousArray._endMutation()(v21);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v10, v22, v23, v24, v25, v26, v27, v28);
      if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        goto LABEL_54;
      goto LABEL_24;
    }
  }
  else
  {
    v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v10, v11, v12, v13, v14, v15, v16, v17);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_54;
LABEL_24:
  if (((unint64_t)&_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v46 = *(_QWORD *)_swiftEmptyArrayStorage.connection;
    if (!v46)
    {
LABEL_55:
      v94 = *((_QWORD *)v0 + 4);
      swift_release(&_swiftEmptyArrayStorage);

      v32 = *(_QWORD *)(v94 + 8);
      goto LABEL_56;
    }
    goto LABEL_26;
  }
LABEL_54:
  v93 = swift_bridgeObjectRetain(&_swiftEmptyArrayStorage);
  v46 = _CocoaArrayWrapper.endIndex.getter(v93);
  swift_release(&_swiftEmptyArrayStorage);
  if (!v46)
    goto LABEL_55;
LABEL_26:
  v98 = v0;
  v32 = 0;
  v100 = v46;
  v47 = &selRef_preferredInterfaceOrientationForPresentation;
  while (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, &_swiftEmptyArrayStorage);
LABEL_33:
    v56 = v55;
    v0 = (char *)(v32 + 1);
    if (__OFADD__(v32, 1))
      goto LABEL_52;
    v57 = objc_msgSend(v55, v47[278]);
    if (v57)
    {
      v58 = v57;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v61 = v60;

    }
    else
    {
      v59 = 0;
      v61 = 0;
    }
    v62 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v63 = v47;
    v64 = objc_msgSend(v62, v47[278]);

    if (v64)
    {
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      v74 = v73;

      if (v61)
      {
        if (!v74)
          goto LABEL_45;
        if (v59 == v72 && v61 == v74)
        {
          swift_bridgeObjectRelease(v74, v65, v66, v67, v68, v69, v70, v71);
          swift_bridgeObjectRelease(v61, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v61, v72, v74, 0);
          swift_bridgeObjectRelease(v74, v76, v77, v78, v79, v80, v81, v82);
          swift_bridgeObjectRelease(v61, v83, v84, v85, v86, v87, v88, v89);
          if ((v75 & 1) == 0)
            goto LABEL_48;
        }
      }
      else if (v74)
      {
        goto LABEL_47;
      }
    }
    else if (v61)
    {
LABEL_45:
      v74 = v61;
LABEL_47:
      swift_bridgeObjectRelease(v74, v65, v66, v67, v68, v69, v70, v71);
LABEL_48:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v90);
      v91 = *(_QWORD *)_swiftEmptyArrayStorage.connection;
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v91);
      v92 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v91, v56);
      specialized ContiguousArray._endMutation()(v92);
      goto LABEL_29;
    }

LABEL_29:
    v47 = v63;
    ++v32;
    if (v0 == (char *)v100)
    {
      v0 = v98;
      goto LABEL_55;
    }
  }
  if (v32 < *(_QWORD *)_swiftEmptyArrayStorage.connection)
  {
    v55 = *(id *)&_swiftEmptyArrayStorage.airDropClient[8 * v32];
    goto LABEL_33;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  swift_once(&qword_10013AD60, sub_100092254);
LABEL_14:
  v33 = type metadata accessor for Logger(0);
  v34 = sub_100009558(v33, (uint64_t)qword_100148040);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Timed out retrieving the current display layout, returning nil from FrontmostAppShareableContentProvider", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

LABEL_56:
  v96 = *((_QWORD *)v0 + 5);
  v95 = *((_QWORD *)v0 + 6);
  v97 = *((_QWORD *)v0 + 2);
  ((void (*)(uint64_t, _QWORD))v32)(v95, *((_QWORD *)v0 + 3));
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  (*((void (**)(_TtC9AirDropUI33AirDropTransferSessionsController *))v0 + 1))(&_swiftEmptyArrayStorage);
}

uint64_t sub_1000BC9D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 80) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_100140B0C);
  *(_QWORD *)(v1 + 88) = v2;
  *v2 = v1;
  v2[1] = sub_1000BCA1C;
  return sub_1000BC33C();
}

uint64_t sub_1000BCA1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000BCA78, 0, 0);
}

uint64_t sub_1000BCA78(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  const char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  uint64_t v62;
  os_log_type_t type;
  uint64_t v64;
  NSObject *log;
  uint64_t v66;
  uint64_t v67;

  v9 = *(_QWORD *)(v8 + 96);
  if (!((unint64_t)v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v8 + 96), a2, a3, a4, a5, a6, a7, a8);
LABEL_25:
    if (qword_10013AD60 == -1)
      goto LABEL_26;
    goto LABEL_33;
  }
  if (v9 < 0)
    v47 = *(_QWORD *)(v8 + 96);
  else
    v47 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v8 + 96));
  v48 = _CocoaArrayWrapper.endIndex.getter(v47);
  swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)v9, v49, v50, v51, v52, v53, v54, v55);
  if (!v48)
    goto LABEL_24;
LABEL_3:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v8 + 96));
    v10 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v8 + 96);
  }
  else
  {
    if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_33:
      swift_once(&qword_10013AD60, sub_100092254);
LABEL_26:
      v56 = type metadata accessor for Logger(0);
      v57 = sub_100009558(v56, (uint64_t)qword_100148040);
      v44 = Logger.logObject.getter(v57);
      v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v58, "Could not retrieve a frontmost application from the current display layout, returning nil from FrontmostAppShareableContentProvider", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }
      goto LABEL_28;
    }
    v10 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(v8 + 96);
    v18 = *(id *)v10->airDropClient;
  }
  swift_bridgeObjectRelease(v10, v11, v12, v13, v14, v15, v16, v17);
  v19 = objc_msgSend(v18, "bundleIdentifier");
  if (!v19)
  {

    goto LABEL_25;
  }
  v20 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v23 = v22;

  swift_bridgeObjectRetain(v23);
  sub_100079DA4(v21, (unint64_t)v23, v8 + 16);
  v31 = *(unsigned __int8 *)(v8 + 64);
  if ((v31 & 1) != 0)
  {
    swift_bridgeObjectRelease(v23, v24, v25, v26, v27, v28, v29, v30);
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100009558(v42, (uint64_t)qword_100148040);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Frontmost application is a hidden system app, returning nil from FrontmostAppShareableContentProvider", v46, 2u);
      swift_slowDealloc(v46, -1, -1);

      sub_100016F3C((_QWORD *)(v8 + 16));
LABEL_29:
      v41 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v31 = 0;
      goto LABEL_30;
    }

    sub_100016F3C((_QWORD *)(v8 + 16));
LABEL_28:

    goto LABEL_29;
  }
  v64 = v21;
  v32 = *(_QWORD *)(v8 + 24);
  v66 = *(_QWORD *)(v8 + 16);
  v33 = *(_QWORD *)(v8 + 32);
  v34 = *(_QWORD *)(v8 + 40);
  v35 = *(_QWORD *)(v8 + 48);
  v36 = *(_QWORD *)(v8 + 56);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v37 = type metadata accessor for Logger(0);
  sub_100009558(v37, (uint64_t)qword_100148040);
  v38 = swift_bridgeObjectRetain(v23);
  v39 = Logger.logObject.getter(v38);
  log = v39;
  type = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, type))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v62 = swift_slowAlloc(32, -1);
    v67 = v62;
    *(_DWORD *)v40 = 136315138;
    swift_bridgeObjectRetain(v23);
    *(_QWORD *)(v8 + 72) = sub_10003A834(v64, (unint64_t)v23, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 + 72, v8 + 80);
    swift_bridgeObjectRelease_n(v23, 3);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Suggesting fallback shareable content with the frontmost app: %s", v40, 0xCu);
    swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v23, 2);
  }
  v41 = v66;
LABEL_30:
  v60 = *(_QWORD **)(v8 + 80);
  *v60 = v41;
  v60[1] = v32;
  v60[2] = v33;
  v60[3] = v34;
  v60[4] = v35;
  v60[5] = v36;
  v60[6] = v31;
  v60[7] = 0;
  return (*(uint64_t (**)(void))(v8 + 8))();
}

unint64_t sub_1000BCF08(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100123BA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void sub_1000BCF50(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char *v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;

  v40 = a3;
  v33 = a2;
  v39 = a4;
  v32 = type metadata accessor for UTType(0);
  v31[1] = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32, v5);
  v31[0] = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013CB20);
  __chkstk_darwin(v7, v8);
  v9 = type metadata accessor for URL(0);
  __chkstk_darwin(v9, v10);
  __chkstk_darwin(v11, v12);
  v35 = (char *)v31 - v13;
  __chkstk_darwin(v14, v15);
  __chkstk_darwin(v16, v17);
  v34 = (char *)v31 - v18;
  v19 = type metadata accessor for Logger(0);
  v37 = *(_QWORD *)(v19 - 8);
  v38 = v19;
  __chkstk_darwin(v19, v20);
  v36 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v24 = __chkstk_darwin(v22, v23).n128_u64[0];
  v41 = a1;
  v25 = objc_msgSend(a1, "typeIdentifier", v24);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v42._countAndFlagsBits = v27;
    v42._object = v29;
    v30 = (char *)&loc_1000BD148 + *((int *)qword_1000BE080 + sub_1000BCF08(v42));
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1000BE064);
}

uint64_t sub_1000BE094(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1[32] = a1;
  v2 = type metadata accessor for UUID(0);
  v1[33] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[34] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v4);
  v1[36] = swift_task_alloc(v4);
  v1[37] = swift_task_alloc(v4);
  v5 = sub_100008F88((uint64_t *)&unk_100140AC8);
  v1[38] = v5;
  v6 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[39] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100008F88((uint64_t *)&unk_1001405D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[40] = swift_task_alloc(v7);
  v1[41] = swift_task_alloc(v7);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v1[42] = v8;
  *v8 = v1;
  v8[1] = sub_1000BE1C8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001000F28A0, sub_1000BB228, 0, v5);
}

uint64_t sub_1000BE1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BEAFC;
  else
    v3 = sub_1000BE22C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BE22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  int v8;
  const char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Class isa;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;

  v2 = *(_QWORD *)(v0 + 320);
  v1 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = (_QWORD *)(v3 + *(int *)(*(_QWORD *)(v0 + 304) + 48));
  *(_QWORD *)(v0 + 352) = *v6;
  v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v6[1];
  *(_QWORD *)(v0 + 360) = v7;
  sub_10000CBD4(v3, v1, (uint64_t *)&unk_1001405D0);
  sub_1000BEC2C(v1, v2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4);
  v16 = *(_QWORD *)(v0 + 320);
  if (v8 == 1)
  {
    swift_bridgeObjectRelease(v7, v9, v10, v11, v12, v13, v14, v15);
    sub_10000CC5C(v16, (uint64_t *)&unk_1001405D0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 264));
    if (v7)
    {
      v17 = v0 + 16;
      v18 = (void *)objc_opt_self(UAUserActivity);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v0 + 368) = isa;
      *(_QWORD *)(v0 + 56) = v0 + 216;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1000BE4C4;
      v20 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 176) = _NSConcreteStackBlock;
      v21 = (_QWORD *)(v0 + 176);
      v21[1] = 0x40000000;
      v21[2] = sub_1000BB5C4;
      v21[3] = &unk_100129348;
      v21[4] = v20;
      objc_msgSend(v18, "fetchUserActivityWithUUID:completionHandler:", isa, v21);
      return swift_continuation_await(v17);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 264));
  }
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100009558(v23, (uint64_t)qword_100148040);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Could not find a current user activity on the system, returning nil from user activity provider", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }
  v28 = *(_QWORD *)(v0 + 328);

  sub_10000CC5C(v28, (uint64_t *)&unk_1001405D0);
  v29 = *(_QWORD *)(v0 + 320);
  v30 = *(_QWORD *)(v0 + 312);
  v32 = *(_QWORD *)(v0 + 288);
  v31 = *(_QWORD *)(v0 + 296);
  v33 = *(_QWORD *)(v0 + 280);
  v34 = *(_OWORD **)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  v34[4] = 0u;
  v34[5] = 0u;
  v34[2] = 0u;
  v34[3] = 0u;
  *v34 = 0u;
  v34[1] = 0u;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BE4C4(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 48);
  *(_QWORD *)(*v8 + 376) = v10;
  if (v10)
  {
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v9 + 360), a2, a3, a4, a5, a6, a7, a8);
    v11 = sub_1000BEB74;
  }
  else
  {
    v11 = sub_1000BE52C;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_1000BE52C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _TtC9AirDropUI33AirDropTransferSessionsController *v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v1 = *(void **)(v0 + 216);

  if (v1)
  {
    v89 = v1;
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v2 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 288);
    v3 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 272);
    v7 = type metadata accessor for Logger(0);
    sub_100009558(v7, (uint64_t)qword_100148040);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
    v8 = swift_bridgeObjectRetain_n(v2, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 360);
    if (v11)
    {
      v13 = *(_QWORD *)(v0 + 288);
      v14 = *(_QWORD *)(v0 + 264);
      v77 = *(_QWORD *)(v0 + 272);
      v80 = *(_QWORD *)(v0 + 352);
      v15 = swift_slowAlloc(22, -1);
      v83 = swift_slowAlloc(64, -1);
      v92 = v83;
      *(_DWORD *)v15 = 136315394;
      v16 = sub_1000BEC74();
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
      v19 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v18;
      *(_QWORD *)(v0 + 240) = sub_10003A834(v17, v18, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248);
      swift_bridgeObjectRelease(v19, v20, v21, v22, v23, v24, v25, v26);
      v27 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
      v27(v13, v14);
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain(v12);
      *(_QWORD *)(v0 + 248) = sub_10003A834(v80, v12, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256);
      swift_bridgeObjectRelease_n(v12, 3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Found a current user activity on the system with UUID: %s from application with identifier: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 8);
      v27(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264));
      swift_bridgeObjectRelease_n(v12, 2);
    }

    v55 = *(_QWORD *)(v0 + 328);
    v56 = *(_QWORD *)(v0 + 296);
    v57 = *(_QWORD *)(v0 + 264);
    sub_1000BCF50(v89, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), v0 + 80);
    v88 = *(_QWORD *)(v0 + 88);
    v91 = *(_QWORD *)(v0 + 80);
    v85 = *(_QWORD *)(v0 + 104);
    v86 = *(_QWORD *)(v0 + 96);
    v79 = *(_QWORD *)(v0 + 120);
    v82 = *(_QWORD *)(v0 + 112);
    v75 = *(_QWORD *)(v0 + 136);
    v76 = *(_QWORD *)(v0 + 128);
    v58 = *(_QWORD *)(v0 + 152);
    v74 = *(_QWORD *)(v0 + 144);
    v59 = *(_QWORD *)(v0 + 160);
    v60 = *(_QWORD *)(v0 + 168);
    v27(v56, v57);
    sub_10000CC5C(v55, (uint64_t *)&unk_1001405D0);
  }
  else
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v28 = *(_QWORD *)(v0 + 360);
    v29 = *(_QWORD *)(v0 + 296);
    v31 = *(_QWORD *)(v0 + 272);
    v30 = *(_QWORD *)(v0 + 280);
    v32 = *(_QWORD *)(v0 + 264);
    v33 = type metadata accessor for Logger(0);
    sub_100009558(v33, (uint64_t)qword_100148040);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v29, v32);
    v34 = swift_bridgeObjectRetain(v28);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    v37 = os_log_type_enabled(v35, v36);
    v38 = *(_QWORD *)(v0 + 360);
    if (v37)
    {
      v81 = *(_QWORD *)(v0 + 352);
      v87 = *(_QWORD *)(v0 + 296);
      v90 = *(_QWORD *)(v0 + 328);
      v39 = *(_QWORD *)(v0 + 280);
      v78 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 264);
      v41 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(64, -1);
      v92 = v84;
      *(_DWORD *)v41 = 136315394;
      v42 = sub_1000BEC74();
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v40, v42);
      v45 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v44;
      *(_QWORD *)(v0 + 224) = sub_10003A834(v43, v44, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232);
      swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
      v53 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v53(v39, v40);
      *(_WORD *)(v41 + 12) = 2080;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)(v0 + 232) = sub_10003A834(v81, v38, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240);
      swift_bridgeObjectRelease_n(v38, 3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to fetch user activity from current user activity UUID: %s bundleIdentifier: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      v53(v87, v40);
      v54 = v90;
    }
    else
    {
      v61 = *(_QWORD *)(v0 + 328);
      v62 = *(_QWORD *)(v0 + 296);
      v64 = *(_QWORD *)(v0 + 272);
      v63 = *(_QWORD *)(v0 + 280);
      v65 = *(_QWORD *)(v0 + 264);

      swift_bridgeObjectRelease_n(v38, 2);
      v66 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v66(v63, v65);
      v66(v62, v65);
      v54 = v61;
    }
    sub_10000CC5C(v54, (uint64_t *)&unk_1001405D0);
    v88 = 0;
    v91 = 0;
    v85 = 0;
    v86 = 0;
    v79 = 0;
    v82 = 0;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
  }
  v67 = *(_QWORD *)(v0 + 320);
  v68 = *(_QWORD *)(v0 + 312);
  v70 = *(_QWORD *)(v0 + 288);
  v69 = *(_QWORD *)(v0 + 296);
  v71 = *(_QWORD *)(v0 + 280);
  v72 = *(_QWORD **)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  *v72 = v91;
  v72[1] = v88;
  v72[2] = v86;
  v72[3] = v85;
  v72[4] = v82;
  v72[5] = v79;
  v72[6] = v76;
  v72[7] = v75;
  v72[8] = v74;
  v72[9] = v58;
  v72[10] = v59;
  v72[11] = v60;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BEAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BEB74()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_10000CC5C(v2, (uint64_t *)&unk_1001405D0);

  v6 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BEC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008F88((uint64_t *)&unk_1001405D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000BEC74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013BBD0;
  if (!qword_10013BBD0)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10013BBD0);
  }
  return result;
}

uint64_t sub_1000BECBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(id *)(a1 + 32);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1000BED0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BED6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BED7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000BED84()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000BEDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000BAB7C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000BEDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100008F88(&qword_100140AF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BEE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100008F88(&qword_100140AF0);
  return sub_1000BB3A8(a1, a2, a3, a4);
}

uint64_t sub_1000BEE7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BEE8C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t result;

  if (a2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v4 = a2;
    return swift_continuation_resume(v3);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ActiveSharePlaySessionInvite(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

void destroy for ActiveSharePlaySessionInvite(id *a1)
{

}

uint64_t assignWithCopy for ActiveSharePlaySessionInvite(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  return a1;
}

uint64_t assignWithTake for ActiveSharePlaySessionInvite(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for ActiveSharePlaySessionInvite()
{
  return &type metadata for ActiveSharePlaySessionInvite;
}

void destroy for UserActivity(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));

}

uint64_t initializeWithCopy for UserActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(void **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(void **)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v11 = v6;
  swift_bridgeObjectRetain(v5);
  v12 = v8;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v13 = v10;
  return a1;
}

uint64_t assignWithCopy for UserActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 32);
  v9 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  v10 = v9;

  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v13 = *(void **)(a2 + 56);
  v14 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  v15 = v13;

  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(void **)(a1 + 88);
  v21 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v21;
  v22 = v21;

  return a1;
}

uint64_t assignWithTake for UserActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);

  v8 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v9 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  return a1;
}

uint64_t getEnumTagSinglePayload for UserActivity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserActivity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserActivity()
{
  return &type metadata for UserActivity;
}

void destroy for FrontmostApp(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for FrontmostApp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(void **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v8 = v6;
  swift_bridgeObjectRetain(v5);
  v9 = v7;
  return a1;
}

uint64_t assignWithCopy for FrontmostApp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a1 + 32);
  v9 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  v10 = v9;

  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v13 = *(void **)(a1 + 56);
  v14 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  v15 = v14;

  return a1;
}

uint64_t assignWithTake for FrontmostApp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for FrontmostApp(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FrontmostApp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FrontmostApp()
{
  return &type metadata for FrontmostApp;
}

double sub_1000BF5E8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100141140, &qword_10013B5C8).n128_u64[0];
  return result;
}

double sub_1000BF640@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100141150, &qword_10013B578).n128_u64[0];
  return result;
}

__n128 sub_1000BF698@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000CC18(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100008F88(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

double sub_1000BF864@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10013F500, (uint64_t *)&unk_100140FC0).n128_u64[0];
  return result;
}

double sub_1000BF8BC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10013F588, (uint64_t *)&unk_100140FA0).n128_u64[0];
  return result;
}

double sub_1000BF914@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10013F558, (uint64_t *)&unk_100140FB0).n128_u64[0];
  return result;
}

uint64_t sub_1000BF96C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v50 = a7;
    v48 = a1;
    v49 = a5;
    v47 = a3;
    v46 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v46;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    v18 = a12;
    a7 = v50;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 176);
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v15 + 160);
  *(_OWORD *)(a9 + 176) = v34;
  *(_OWORD *)(a9 + 192) = *(_OWORD *)(v15 + 192);
  v35 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(a9 + 112) = v35;
  v36 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(a9 + 144) = v36;
  v37 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v37;
  v38 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v38;
  v39 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v39;
  v40 = v51[4];
  v41 = v51[5];
  v42 = v51[2];
  *(_OWORD *)(a9 + 264) = v51[3];
  *(_OWORD *)(a9 + 280) = v40;
  v43 = v51[6];
  *(_OWORD *)(a9 + 296) = v41;
  *(_OWORD *)(a9 + 312) = v43;
  v44 = v51[1];
  *(_OWORD *)(a9 + 216) = v51[0];
  *(_OWORD *)(a9 + 232) = v44;
  *(_QWORD *)(a9 + 208) = *(_QWORD *)(v15 + 208);
  *(_OWORD *)(a9 + 248) = v42;
  return sub_1000B9F0C(v15);
}

double sub_1000BFB48@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100141170, &qword_10013CEC8).n128_u64[0];
  return result;
}

double sub_1000BFBA0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000BF698(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t *)&unk_100141160, &qword_10013CEE8).n128_u64[0];
  return result;
}

_QWORD *sub_1000BFBF8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[32];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[1];
  v46 = *v15;
  v47 = v34;
  sub_1000C924C((uint64_t)&v46, (uint64_t)v49);
  v35 = v15[1];
  *(_OWORD *)a9 = *v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 88) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 104) = v45[4];
  *(_OWORD *)(a9 + 120) = v37;
  *(_OWORD *)(a9 + 136) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 40) = v45[0];
  *(_OWORD *)(a9 + 56) = v38;
  v48 = *((_QWORD *)&v47 + 1);
  *(_QWORD *)(a9 + 32) = *((_QWORD *)v15 + 4);
  *(_OWORD *)(a9 + 72) = v36;
  sub_1000C9288((uint64_t)v49);
  return sub_1000C92B8(&v48);
}

__n128 sub_1000BFDC4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v39;
    a1 = v40;
    v20 = a10;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  sub_10000C484(v16, a9, type metadata accessor for AirDropDescriptionView);
  v35 = a9 + *(int *)(sub_100008F88((uint64_t *)&unk_100140F90) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

__n128 sub_1000BFF80@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_100008F88(&qword_100140040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100008F88(&qword_100140FD0) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

uint64_t sub_1000C014C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)v15 + 57);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v45[5];
  a9[9] = v45[4];
  a9[10] = v36;
  a9[11] = v45[6];
  v37 = v45[1];
  a9[5] = v45[0];
  a9[6] = v37;
  v38 = v45[3];
  a9[7] = v45[2];
  a9[8] = v38;
  return sub_1000B9E2C((uint64_t)v15);
}

uint64_t sub_1000C02FC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_1000452A8(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

uint64_t sub_1000C04DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t *v27;
  _OWORD v29[3];

  v2 = sub_100008F88(&qword_100140DF0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100008F88(&qword_100140DF8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_100140E00);
  __chkstk_darwin(v10, v11);
  v13 = (_QWORD *)((char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v13 = static Alignment.center.getter(v14);
  v13[1] = v15;
  v16 = sub_100008F88(&qword_100140E08);
  v17 = (uint64_t)v13 + *(int *)(v16 + 44);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v5 + 1) = 0x4028000000000000;
  v5[16] = 0;
  v18 = sub_100008F88(&qword_100140E10);
  v19 = sub_1000C06D8((uint64_t)&v5[*(int *)(v18 + 44)]);
  v20 = static Alignment.center.getter(v19);
  _FrameLayout.init(width:height:alignment:)(v29, 0x4062C00000000000, 0, 0x4062C00000000000, 0, v20, v21);
  sub_10000CC18((uint64_t)v5, (uint64_t)v9, &qword_100140DF0);
  v22 = &v9[*(int *)(v6 + 36)];
  v23 = v29[1];
  *(_OWORD *)v22 = v29[0];
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v29[2];
  sub_10000CC5C((uint64_t)v5, &qword_100140DF0);
  sub_10000CBD4((uint64_t)v9, v17, &qword_100140DF8);
  v25 = static Color.white.getter(v24);
  KeyPath = swift_getKeyPath(&unk_1000EEB90);
  sub_10000CC18((uint64_t)v13, a1, &qword_100140E00);
  v27 = (uint64_t *)(a1 + *(int *)(sub_100008F88(&qword_100140E18) + 36));
  *v27 = KeyPath;
  v27[1] = v25;
  return sub_10000CC5C((uint64_t)v13, &qword_100140E00);
}

uint64_t sub_1000C06D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _TtC9AirDropUI33AirDropTransferSessionsController *v57;
  _TtC9AirDropUI33AirDropTransferSessionsController *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _TtC9AirDropUI33AirDropTransferSessionsController *v66;
  _TtC9AirDropUI33AirDropTransferSessionsController *v67;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  SEL v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96;
  _OWORD v97[3];

  v94 = a1;
  v90 = sub_100008F88(&qword_100140E20);
  __chkstk_darwin(v90, v1);
  v3 = (uint64_t *)((char *)&v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for Color.RGBColorSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100008F88(&qword_100140E28);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100008F88(&qword_100140E30);
  __chkstk_darwin(v92, v13);
  v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100008F88(&qword_100140E38);
  __chkstk_darwin(v93, v16);
  v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v91 = (uint64_t)&v88 - v21;
  v22 = sub_100008F88(&qword_100140E40);
  v23 = swift_allocObject(v22, 56, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1000EB2B0;
  v24 = enum case for Color.RGBColorSpace.sRGB(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v25(v8, enum case for Color.RGBColorSpace.sRGB(_:), v4);
  *(_QWORD *)(v23 + 32) = Color.init(_:red:green:blue:opacity:)(v8, 0.325490196, 0.88627451, 0.8, 1.0);
  v25(v8, v24, v4);
  *(_QWORD *)(v23 + 40) = Color.init(_:red:green:blue:opacity:)(v8, 0.996078431, 0.674509804, 0.0352941176, 1.0);
  v25(v8, v24, v4);
  v26 = Color.init(_:red:green:blue:opacity:)(v8, 0.996078431, 0.0156862745, 0.529411765, 1.0);
  *(_QWORD *)(v23 + 48) = v26;
  *(_QWORD *)&v97[0] = v23;
  specialized Array._endMutation()(v26);
  v27 = Gradient.init(colors:)(*(_QWORD *)&v97[0]);
  v28 = static UnitPoint.top.getter();
  v30 = v29;
  v31 = static UnitPoint.bottom.getter();
  v33 = LinearGradient.init(gradient:startPoint:endPoint:)(v95, v27, v28, v30, v31, v32);
  v34 = static Alignment.center.getter(v33);
  v36 = v35;
  v37 = (uint64_t *)((char *)v3 + *(int *)(v90 + 36));
  *v37 = static Alignment.center.getter(v34);
  v37[1] = v38;
  v39 = sub_100008F88(&qword_100140E48);
  __asm { FMOV            V0.2D, #10.0 }
  sub_1000C5C5C((uint64_t)v37 + *(int *)(v39 + 44), _Q0, 42.0);
  *v3 = v34;
  v3[1] = v36;
  sub_10000CC18((uint64_t)v3, (uint64_t)&v12[*(int *)(v9 + 36)], &qword_100140E20);
  v45 = v95[1];
  *(_OWORD *)v12 = v95[0];
  *((_OWORD *)v12 + 1) = v45;
  *((_QWORD *)v12 + 4) = v96;
  v46 = sub_10000CC5C((uint64_t)v3, &qword_100140E20);
  v47 = static Alignment.center.getter(v46);
  _FrameLayout.init(width:height:alignment:)(v97, 0x404E000000000000, 0, 0x4054000000000000, 0, v47, v48);
  sub_10000CC18((uint64_t)v12, (uint64_t)v15, &qword_100140E28);
  v49 = &v15[*(int *)(v92 + 36)];
  v50 = v97[1];
  *(_OWORD *)v49 = v97[0];
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v97[2];
  sub_10000CC5C((uint64_t)v12, &qword_100140E28);
  v89 = v18;
  sub_10000CC18((uint64_t)v15, (uint64_t)v18, &qword_100140E30);
  *(_WORD *)&v18[*(int *)(v93 + 36)] = 0;
  sub_10000CC5C((uint64_t)v15, &qword_100140E30);
  v51 = (uint64_t)v18;
  v52 = v91;
  sub_10000CBD4(v51, v91, &qword_100140E38);
  v53 = LocalizedStringKey.init(stringLiteral:)(0x504F5244524941, 0xE700000000000000);
  v54 = Text.init(_:tableName:bundle:comment:)(v53);
  v56 = v55;
  v58 = v57;
  v60 = v59 & 1;
  v61 = static Font.subheadline.getter();
  v62 = Text.font(_:)(v61, v54, v56, v60, v58);
  v64 = v63;
  LOBYTE(v37) = v65;
  v67 = v66;
  swift_release(v61);
  LOBYTE(v37) = v37 & 1;
  sub_100044F90(v54, v56, v60);
  swift_bridgeObjectRelease(v58, v68, v69, v70, v71, v72, v73, v74);
  v75 = v52;
  v76 = v52;
  v77 = (uint64_t)v89;
  sub_10000CC18(v76, (uint64_t)v89, &qword_100140E38);
  v78 = v94;
  sub_10000CC18(v77, v94, &qword_100140E38);
  v79 = v78 + *(int *)(sub_100008F88((uint64_t *)&unk_100140E50) + 48);
  *(_QWORD *)v79 = v62;
  *(_QWORD *)(v79 + 8) = v64;
  *(_BYTE *)(v79 + 16) = (_BYTE)v37;
  *(_QWORD *)(v79 + 24) = v67;
  sub_1000452A8(v62, v64, (char)v37);
  swift_bridgeObjectRetain(v67);
  sub_10000CC5C(v75, &qword_100140E38);
  sub_100044F90(v62, v64, (char)v37);
  swift_bridgeObjectRelease(v67, v80, v81, v82, v83, v84, v85, v86);
  return sub_10000CC5C(v77, &qword_100140E38);
}

uint64_t sub_1000C0C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _TtC9AirDropUI33AirDropTransferSessionsController *v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _TtC9AirDropUI33AirDropTransferSessionsController *v31;
  _TtC9AirDropUI33AirDropTransferSessionsController *v32;
  SEL v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  SEL v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t KeyPath;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  _TtC9AirDropUI33AirDropTransferSessionsController *v107;
  char v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  int v126;
  __int16 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

  v103 = a2;
  v100 = sub_100008F88(&qword_100141138);
  __chkstk_darwin(v100, v3);
  v99 = (uint64_t *)((char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Color.RGBColorSpace(0);
  v96 = *(_QWORD *)(v5 - 8);
  v97 = v5;
  __chkstk_darwin(v5, v6);
  v95 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100008F88(&qword_1001410E8);
  __chkstk_darwin(v98, v13);
  v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100008F88(&qword_1001410D8);
  v17 = __chkstk_darwin(v102, v16);
  v101 = (uint64_t)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1, v8, v17);
  v19 = Text.init(_:)(v12);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  v27 = Font.weight(_:)(v26);
  swift_release(v26);
  v28 = Text.font(_:)(v27, v19, v21, v25, v23);
  v93 = v29;
  v94 = v28;
  LOBYTE(v26) = v30;
  v32 = v31;
  swift_release(v27);
  LOBYTE(v26) = v26 & 1;
  sub_100044F90(v19, v21, v25);
  swift_bridgeObjectRelease(v23, v33, v34, v35, v36, v37, v38, v39);
  LOBYTE(v19) = static Edge.Set.vertical.getter();
  v40 = EdgeInsets.init(_all:)(14.0);
  v42 = v93;
  v41 = v94;
  v104 = v94;
  v105 = v93;
  v106 = v26;
  v107 = v32;
  v108 = v19;
  v109 = v40;
  v110 = v43;
  v111 = v44;
  v112 = v45;
  v113 = 0;
  v47 = static Alignment.center.getter(v46);
  sub_1000C014C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v128, 0.0, 1, 0.0, 1, v47, v48);
  sub_100044F90(v41, v42, v26);
  swift_bridgeObjectRelease(v32, v49, v50, v51, v52, v53, v54, v55);
  v123 = v137;
  v124 = v138;
  v125 = v139;
  v119 = v133;
  v120 = v134;
  v121 = v135;
  v122 = v136;
  v114 = v128;
  v115 = v129;
  v116 = v130;
  v117 = v131;
  v118 = v132;
  v56 = v95;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for Color.RGBColorSpace.sRGB(_:), v97);
  v97 = Color.init(_:red:green:blue:opacity:)(v56, 0.173, 0.173, 0.18, 1.0);
  v57 = static Edge.Set.all.getter(v97);
  LOBYTE(v26) = v57;
  v136 = v122;
  v137 = v123;
  v138 = v124;
  v139 = v125;
  v132 = v118;
  v133 = v119;
  v134 = v120;
  v135 = v121;
  v128 = v114;
  v129 = v115;
  v130 = v116;
  v131 = v117;
  v58 = static Alignment.center.getter(v57);
  v60 = v59;
  v61 = v99;
  v62 = (char *)v99 + *(int *)(v100 + 36);
  v63 = &v62[*(int *)(type metadata accessor for RoundedRectangle(0) + 20)];
  v64 = enum case for RoundedCornerStyle.continuous(_:);
  v65 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v63, v64, v65);
  __asm { FMOV            V0.2D, #30.0 }
  *(_OWORD *)v62 = _Q0;
  *v61 = v58;
  v61[1] = v60;
  sub_10000CC18((uint64_t)v61, (uint64_t)&v15[*(int *)(v98 + 36)], &qword_100141138);
  v71 = v137;
  *((_OWORD *)v15 + 8) = v136;
  *((_OWORD *)v15 + 9) = v71;
  v72 = v139;
  *((_OWORD *)v15 + 10) = v138;
  *((_OWORD *)v15 + 11) = v72;
  v73 = v133;
  *((_OWORD *)v15 + 4) = v132;
  *((_OWORD *)v15 + 5) = v73;
  v74 = v135;
  *((_OWORD *)v15 + 6) = v134;
  *((_OWORD *)v15 + 7) = v74;
  v75 = v129;
  *(_OWORD *)v15 = v128;
  *((_OWORD *)v15 + 1) = v75;
  v76 = v131;
  *((_OWORD *)v15 + 2) = v130;
  *((_OWORD *)v15 + 3) = v76;
  *((_WORD *)v15 + 96) = 0;
  *(_DWORD *)(v15 + 194) = v126;
  *((_WORD *)v15 + 99) = v127;
  *((_QWORD *)v15 + 25) = v97;
  v15[208] = v26;
  v77 = sub_10000CC5C((uint64_t)v61, &qword_100141138);
  LOBYTE(v61) = static Edge.Set.bottom.getter(v77);
  v78 = EdgeInsets.init(_all:)(2.0);
  v80 = v79;
  v82 = v81;
  v84 = v83;
  v85 = v101;
  sub_10000CC18((uint64_t)v15, v101, &qword_1001410E8);
  v86 = v85 + *(int *)(v102 + 36);
  *(_BYTE *)v86 = (_BYTE)v61;
  *(double *)(v86 + 8) = v78;
  *(_QWORD *)(v86 + 16) = v80;
  *(_QWORD *)(v86 + 24) = v82;
  *(_QWORD *)(v86 + 32) = v84;
  *(_BYTE *)(v86 + 40) = 0;
  sub_10000CC5C((uint64_t)v15, &qword_1001410E8);
  v88 = static Color.white.getter(v87);
  KeyPath = swift_getKeyPath(&unk_1000EEB90);
  v90 = v103;
  sub_10000CC18(v85, v103, &qword_1001410D8);
  v91 = (uint64_t *)(v90 + *(int *)(sub_100008F88(&qword_1001410C0) + 36));
  *v91 = KeyPath;
  v91[1] = v88;
  return sub_10000CC5C(v85, &qword_1001410D8);
}

uint64_t sub_1000C1114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(a1, a2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000C484(v2, (uint64_t)v5, type metadata accessor for BannerShareableContentActionButton);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1001299C8, v7 + v4, v6 | 7);
  sub_1000C8F08((uint64_t)v5, v8 + v7);
  v13 = v2;
  v9 = sub_100008F88(&qword_1001410C0);
  v10 = sub_1000C8F98();
  return Button.init(action:label:)(sub_1000C8F4C, v8, sub_1000C8F90, v12, v9, v10);
}

uint64_t sub_1000C11F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49[6];
  __int128 v50;
  _BYTE v51[40];
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100057150((__int128 *)(v0 + 48), (uint64_t)v49);
  sub_100057150(v49, (uint64_t)&v57);
  v9 = v64;
  if ((v64 & 0x8000000000000000) == 0)
  {
    v36 = v8;
    v37 = v4;
    v10 = v57;
    v11 = v59;
    v12 = *((_QWORD *)&v60 + 1);
    v13 = v60;
    v44 = v61;
    v39 = v62;
    v40 = v58;
    v38 = v63;
    v42 = v66;
    v43 = v65;
    v41 = v67;
    v48 = *(_OWORD *)(v0 + 16);
    v14 = (void *)*((_QWORD *)&v48 + 1);
    KeyPath = swift_getKeyPath(&unk_1000EEE20);
    v16 = swift_getKeyPath(&unk_1000EEE48);
    static Published.subscript.getter(&v50, v14, KeyPath, v16);
    swift_release(KeyPath);
    swift_release(v16);
    sub_1000C8830((uint64_t)&v48);
    if (*(_QWORD *)&v51[8])
    {
      v46 = *(_OWORD *)v51;
      v47 = *(_OWORD *)&v51[16];
      v45 = v50;
      v17 = *(_QWORD *)&v51[8];
      v18 = *(_QWORD *)&v51[16];
      sub_10000904C(&v45, *(uint64_t *)&v51[8]);
      *(_QWORD *)&v50 = v10;
      *((_QWORD *)&v50 + 1) = v40;
      *(_QWORD *)v51 = v11;
      *(_QWORD *)&v51[8] = v13;
      *(_QWORD *)&v51[16] = v12;
      *(_OWORD *)&v51[24] = v44;
      *(_QWORD *)&v52 = v39;
      *((_QWORD *)&v52 + 1) = v38;
      v53 = v9;
      v54 = v43;
      v55 = v42;
      v56 = v41;
      v12 = sub_100077814((uint64_t)&v50, v17, v18);
      if (!v19)
      {
        v20 = v36;
        v21 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001000F2800);
        v22 = v37;
        static Locale.current.getter(v21);
        v23 = v20;
        v24 = v12;
        v25 = v22;
LABEL_8:
        v12 = String.init(localized:table:bundle:locale:comment:)(v23, v24, 0, 0, v25, 0, 0, 256);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    sub_10000CC5C((uint64_t)&v50, &qword_10013D168);
    v26 = v44;
LABEL_12:
    swift_bridgeObjectRetain(v26);
    return v12;
  }
  v64 &= ~0x8000000000000000;
  v12 = v57;
  v26 = v58;
  v27 = v59;
  v44 = v60;
  v48 = *(_OWORD *)(v0 + 16);
  v28 = (void *)*((_QWORD *)&v48 + 1);
  v29 = swift_getKeyPath(&unk_1000EEE20);
  v30 = swift_getKeyPath(&unk_1000EEE48);
  static Published.subscript.getter(&v50, v28, v29, v30);
  swift_release(v29);
  swift_release(v30);
  sub_1000C8830((uint64_t)&v48);
  if (!*(_QWORD *)&v51[8])
  {
    sub_10000CC5C((uint64_t)&v50, &qword_10013D168);
    goto LABEL_12;
  }
  v46 = *(_OWORD *)v51;
  v47 = *(_OWORD *)&v51[16];
  v45 = v50;
  v31 = *(_QWORD *)&v51[8];
  v32 = *(_QWORD *)&v51[16];
  sub_10000904C(&v45, *(uint64_t *)&v51[8]);
  *(_QWORD *)&v50 = v12;
  *((_QWORD *)&v50 + 1) = v26;
  *(_QWORD *)v51 = v27;
  *(_OWORD *)&v51[8] = v44;
  *(_OWORD *)&v51[24] = 0u;
  v52 = 0u;
  v54 = 0;
  v55 = 0;
  v53 = 0x8000000000000000;
  v56 = 0;
  v12 = sub_100077814((uint64_t)&v50, v31, v32);
  if (!v33)
  {
    v34 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000001000F2800);
    static Locale.current.getter(v34);
    v23 = v8;
    v24 = v12;
    v25 = v4;
    goto LABEL_8;
  }
LABEL_9:
  sub_10004D4EC((uint64_t)&v45);
  return v12;
}

uint64_t sub_1000C15AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59[6];
  __int128 v60;
  _BYTE v61[40];
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100057150((__int128 *)(v0 + 48), (uint64_t)v59);
  sub_100057150(v59, (uint64_t)&v67);
  v13 = v74;
  v53 = v8;
  v54 = v4;
  if ((v74 & 0x8000000000000000) == 0)
  {
    v14 = v69;
    v47 = v68;
    v48 = v67;
    v15 = v70;
    v49 = v71;
    v16 = v72;
    v45 = v73;
    v46 = *((_QWORD *)&v70 + 1);
    v51 = v76;
    *(_QWORD *)&v52 = v75;
    v50 = v77;
    v58 = *(_OWORD *)(v0 + 16);
    v17 = (void *)*((_QWORD *)&v58 + 1);
    KeyPath = swift_getKeyPath(&unk_1000EEE20);
    v19 = swift_getKeyPath(&unk_1000EEE48);
    static Published.subscript.getter(&v60, v17, KeyPath, v19);
    swift_release(KeyPath);
    swift_release(v19);
    sub_1000C8830((uint64_t)&v58);
    if (*(_QWORD *)&v61[8])
    {
      v56 = *(_OWORD *)v61;
      v57 = *(_OWORD *)&v61[16];
      v55 = v60;
      v20 = *(_QWORD *)&v61[8];
      v21 = *(_QWORD *)&v61[16];
      sub_10000904C(&v55, *(uint64_t *)&v61[8]);
      *(_QWORD *)&v60 = v48;
      *((_QWORD *)&v60 + 1) = v47;
      *(_QWORD *)v61 = v14;
      *(_QWORD *)&v61[8] = v15;
      *(_QWORD *)&v61[16] = v46;
      *(_OWORD *)&v61[24] = v49;
      *(_QWORD *)&v62 = v16;
      *((_QWORD *)&v62 + 1) = v45;
      v63 = v13;
      v64 = v52;
      v65 = v51;
      v66 = v50;
      v22 = sub_100077C38((uint64_t)&v60, v20, v21);
      if (!v23)
      {
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1);
        v24._countAndFlagsBits = 0x49575F4552414853;
        v24._object = (void *)0xEB000000005F4854;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
        v25 = v14;
        v26 = v15;
LABEL_8:
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v25);
        v37._countAndFlagsBits = 0;
        v37._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v37);
        v38 = v53;
        v39 = String.LocalizationValue.init(stringInterpolation:)(v12);
        v40 = v54;
        static Locale.current.getter(v39);
        v22 = String.init(localized:table:bundle:locale:comment:)(v38, v22, 0, 0, v40, 0, 0, 256);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
LABEL_10:
    sub_10000CC5C((uint64_t)&v60, &qword_10013D168);
    v41 = v53;
    v42 = String.LocalizationValue.init(stringLiteral:)(0x455443454E4E4F43, 0xE900000000000044);
    v43 = v54;
    static Locale.current.getter(v42);
    return String.init(localized:table:bundle:locale:comment:)(v41, 0, 0, 0, v43, 0, 0, 256);
  }
  v74 &= ~0x8000000000000000;
  v27 = v67;
  v28 = v68;
  v29 = v69;
  v52 = v70;
  v58 = *(_OWORD *)(v0 + 16);
  v30 = (void *)*((_QWORD *)&v58 + 1);
  v31 = swift_getKeyPath(&unk_1000EEE20);
  v32 = swift_getKeyPath(&unk_1000EEE48);
  static Published.subscript.getter(&v60, v30, v31, v32);
  swift_release(v31);
  swift_release(v32);
  sub_1000C8830((uint64_t)&v58);
  if (!*(_QWORD *)&v61[8])
    goto LABEL_10;
  v56 = *(_OWORD *)v61;
  v57 = *(_OWORD *)&v61[16];
  v55 = v60;
  v33 = *(_QWORD *)&v61[8];
  v34 = *(_QWORD *)&v61[16];
  sub_10000904C(&v55, *(uint64_t *)&v61[8]);
  *(_QWORD *)&v60 = v27;
  *((_QWORD *)&v60 + 1) = v28;
  *(_QWORD *)v61 = v29;
  *(_OWORD *)&v61[8] = v52;
  *(_OWORD *)&v61[24] = 0u;
  v62 = 0u;
  v64 = 0;
  v65 = 0;
  v63 = 0x8000000000000000;
  v66 = 0;
  v22 = sub_100077C38((uint64_t)&v60, v33, v34);
  if (!v35)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1);
    v36._countAndFlagsBits = 0x49575F4552414853;
    v36._object = (void *)0xEB000000005F4854;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v36);
    v25 = v27;
    v26 = v28;
    goto LABEL_8;
  }
LABEL_9:
  sub_10004D4EC((uint64_t)&v55);
  return v22;
}

uint64_t sub_1000C1A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v2 = v1;
  v58 = a1;
  v3 = sub_100008F88(&qword_100140E68);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_100140E70);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_100140E78);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88(&qword_100140E80);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008F88(&qword_100140E88);
  v56 = *(_QWORD *)(v19 - 8);
  v57 = v19;
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v6 + 1) = 0x4033000000000000;
  v6[16] = 0;
  v24 = sub_100008F88(&qword_100140E90);
  v25 = sub_1000C1E04(v2, (uint64_t)&v6[*(int *)(v24 + 44)]);
  v26 = static Alignment.center.getter(v25);
  sub_1000BF698(0.0, 1, 1.79769313e308, 0, 0.0, 1, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v26, v27, &qword_100140E68, &qword_100140E70);
  sub_10000CC5C((uint64_t)v6, &qword_100140E68);
  v29 = static Color.white.getter(v28);
  KeyPath = swift_getKeyPath(&unk_1000EEB90);
  sub_10000CC18((uint64_t)v10, (uint64_t)v14, &qword_100140E70);
  v31 = (uint64_t *)&v14[*(int *)(v11 + 36)];
  *v31 = KeyPath;
  v31[1] = v29;
  v32 = sub_10000CC5C((uint64_t)v10, &qword_100140E70);
  v33 = static Color.black.getter(v32);
  LOBYTE(KeyPath) = static Edge.Set.all.getter(v33);
  sub_10000CC18((uint64_t)v14, (uint64_t)v18, &qword_100140E78);
  v34 = &v18[*(int *)(v15 + 36)];
  *(_QWORD *)v34 = v33;
  v34[8] = KeyPath;
  sub_10000CC5C((uint64_t)v14, &qword_100140E78);
  v35 = swift_allocObject(&unk_100129928, 164, 7);
  v36 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v35 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v35 + 128) = v36;
  *(_OWORD *)(v35 + 144) = *(_OWORD *)(v2 + 128);
  *(_DWORD *)(v35 + 160) = *(_DWORD *)(v2 + 144);
  v37 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v35 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v35 + 64) = v37;
  v38 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v35 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v35 + 96) = v38;
  v39 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v35 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v35 + 32) = v39;
  sub_1000C766C(v2);
  v40 = sub_1000C8680();
  View.onTapGesture(count:perform:)(1, sub_1000C8678, v35, v15, v40);
  swift_release(v35);
  sub_10000CC5C((uint64_t)v18, &qword_100140E80);
  v59 = *(_OWORD *)(v2 + 32);
  v41 = sub_100008F88(&qword_100140128);
  State.projectedValue.getter(v41);
  v42 = v60;
  v43 = v61;
  LOBYTE(v18) = v62;
  v44 = swift_allocObject(&unk_100129950, 164, 7);
  v45 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v44 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v44 + 128) = v45;
  *(_OWORD *)(v44 + 144) = *(_OWORD *)(v2 + 128);
  *(_DWORD *)(v44 + 160) = *(_DWORD *)(v2 + 144);
  v46 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v44 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v44 + 64) = v46;
  v47 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v44 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v44 + 96) = v47;
  v48 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v44 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v44 + 32) = v48;
  v49 = swift_getKeyPath(&unk_1000EEDF8);
  v51 = v56;
  v50 = v57;
  v52 = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v58, v22, v57);
  v53 = v52 + *(int *)(sub_100008F88(&qword_100140F20) + 36);
  *(_QWORD *)v53 = v49;
  *(_BYTE *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = v42;
  *(_QWORD *)(v53 + 24) = v43;
  *(_BYTE *)(v53 + 32) = (_BYTE)v18;
  *(_BYTE *)(v53 + 33) = 1;
  *(_QWORD *)(v53 + 40) = sub_1000C8818;
  *(_QWORD *)(v53 + 48) = v44;
  sub_1000C766C(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v22, v50);
}

uint64_t sub_1000C1E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;

  v4 = sub_100008F88(&qword_100140F28);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88(&qword_100140F30);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v43 - v14;
  v16 = sub_100008F88(&qword_100140F38);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v43 - v22;
  *(_QWORD *)v23 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v23 + 1) = 0x402C000000000000;
  v23[16] = 0;
  v25 = sub_100008F88((uint64_t *)&unk_100140F40);
  sub_1000C2200(a1, (uint64_t)&v23[*(int *)(v25 + 44)]);
  v54 = *(_OWORD *)(a1 + 16);
  v26 = (void *)*((_QWORD *)&v54 + 1);
  KeyPath = swift_getKeyPath(&unk_1000EEE20);
  v28 = swift_getKeyPath(&unk_1000EEE48);
  static Published.subscript.getter(&v49, v26, KeyPath, v28);
  swift_release(KeyPath);
  swift_release(v28);
  v29 = sub_1000C8830((uint64_t)&v54);
  if (*((_QWORD *)&v50 + 1))
  {
    v52[0] = v49;
    v52[1] = v50;
    v53 = v51;
    *(_QWORD *)v7 = static VerticalAlignment.center.getter(v29);
    *((_QWORD *)v7 + 1) = 0;
    v7[16] = 1;
    v45 = &v7[*(int *)(sub_100008F88(&qword_100140F58) + 44)];
    v30 = *((_QWORD *)&v53 + 1);
    v48 = *((_QWORD *)&v53 + 1);
    v44 = swift_getKeyPath(&unk_1000EEE68);
    sub_1000B5508((uint64_t)v52, (uint64_t)&v49);
    v31 = swift_allocObject(&unk_100129978, 216, 7);
    v32 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v31 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v31 + 128) = v32;
    *(_OWORD *)(v31 + 144) = *(_OWORD *)(a1 + 128);
    v33 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v31 + 64) = v33;
    v34 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v31 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v31 + 96) = v34;
    v35 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v31 + 32) = v35;
    v36 = v50;
    *(_OWORD *)(v31 + 168) = v49;
    *(_DWORD *)(v31 + 160) = *(_DWORD *)(a1 + 144);
    *(_OWORD *)(v31 + 184) = v36;
    *(_OWORD *)(v31 + 200) = v51;
    swift_bridgeObjectRetain(v30);
    sub_1000C766C(a1);
    v37 = sub_100008F88(&qword_100140290);
    v38 = type metadata accessor for BannerShareableContentActionButton(0);
    v39 = sub_10000CB94(&qword_100140298, &qword_100140290, (uint64_t)&protocol conformance descriptor for [A]);
    v40 = sub_100008694((unint64_t *)&unk_100140F60, type metadata accessor for BannerShareableContentActionButton, (uint64_t)&unk_1000EEEB4);
    ForEach<>.init(_:id:content:)(&v48, v44, sub_1000C88D8, v31, v37, v38, v39, &protocol witness table for ObjectIdentifier, v40);
    sub_10000CBD4((uint64_t)v7, (uint64_t)v15, &qword_100140F28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v15, 0, 1, v47);
    sub_10004D4EC((uint64_t)v52);
  }
  else
  {
    sub_10000CC5C((uint64_t)&v49, &qword_10013D168);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v15, 1, 1, v47);
  }
  sub_10000CC18((uint64_t)v23, (uint64_t)v19, &qword_100140F38);
  sub_10000CC18((uint64_t)v15, (uint64_t)v11, &qword_100140F30);
  sub_10000CC18((uint64_t)v19, a2, &qword_100140F38);
  v41 = sub_100008F88(&qword_100140F50);
  sub_10000CC18((uint64_t)v11, a2 + *(int *)(v41 + 48), &qword_100140F30);
  sub_10000CC5C((uint64_t)v15, &qword_100140F30);
  sub_10000CC5C((uint64_t)v23, &qword_100140F38);
  sub_10000CC5C((uint64_t)v11, &qword_100140F30);
  return sub_10000CC5C((uint64_t)v19, &qword_100140F38);
}

uint64_t *sub_1000C2200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  char *v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  _BYTE *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _TtC9AirDropUI33AirDropTransferSessionsController *v106;
  uint64_t v107;
  uint64_t v108;
  _TtC9AirDropUI33AirDropTransferSessionsController *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  SEL v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _BYTE *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  _TtC9AirDropUI33AirDropTransferSessionsController *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t KeyPath;
  id v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _TtC9AirDropUI33AirDropTransferSessionsController *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  id v203;
  uint64_t v204;
  char v205;
  _BYTE v206[7];
  uint64_t v207;
  char v208;
  _BYTE v209[7];
  uint64_t v210;
  uint64_t v211;
  _BYTE v212[7];
  unsigned __int8 v213;
  _BYTE v214[7];
  unsigned __int8 v215;
  _QWORD v216[6];
  _QWORD v217[4];
  id v218;
  uint64_t v219;
  unsigned __int8 v220;
  uint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  uint64_t v224;
  _OWORD v225[2];

  v169 = a2;
  v3 = sub_100008F88((uint64_t *)&unk_100140760);
  __chkstk_darwin(v3, v4);
  v145 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100008F88((uint64_t *)&unk_100140C80);
  v7 = __chkstk_darwin(v132, v6);
  v137 = (uint64_t *)((char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = type metadata accessor for Image.Scale(0, v7);
  v134 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136, v9);
  v133 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100008F88(&qword_1001405A0);
  __chkstk_darwin(v131, v11);
  v139 = (uint64_t *)((char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = sub_100008F88(&qword_100140C90);
  __chkstk_darwin(v135, v13);
  v140 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100008F88((uint64_t *)&unk_100140880);
  __chkstk_darwin(v138, v15);
  v142 = (uint64_t)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100008F88(&qword_100140F70);
  __chkstk_darwin(v141, v17);
  v144 = (uint64_t)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100008F88(&qword_100140F78);
  v154 = *(_QWORD *)(v19 - 8);
  v155 = v19;
  __chkstk_darwin(v19, v20);
  v143 = (uint64_t)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100008F88(&qword_100140F80);
  __chkstk_darwin(v22, v23);
  v163 = (uint64_t)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v172 = (uint64_t)&v130 - v27;
  v173 = a1;
  v29 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(a1 + 64);
  v178 = *(_QWORD *)(a1 + 72);
  v179 = v28;
  v31 = *(_QWORD *)(a1 + 80);
  v176 = *(_QWORD *)(a1 + 88);
  v177 = v31;
  v32 = *(_QWORD *)(a1 + 104);
  v175 = *(_QWORD *)(a1 + 96);
  v33 = *(_QWORD *)(a1 + 112);
  v34 = *(_QWORD *)(a1 + 120);
  v35 = *(_QWORD *)(a1 + 128);
  v36 = *(_QWORD *)(a1 + 136);
  v37 = *(_DWORD *)(a1 + 144);
  v225[0] = *(_OWORD *)(a1 + 16);
  v162 = (id)*((_QWORD *)&v225[0] + 1);
  KeyPath = swift_getKeyPath(&unk_1000EEE20);
  v38 = swift_getKeyPath(&unk_1000EEE48);
  v164 = v37;
  v165 = v36;
  v166 = v35;
  v174 = v34;
  v167 = v33;
  v170 = v30;
  v171 = v29;
  v168 = v32;
  sub_10004BD1C(v29, v179, v30, v178, v177, v176, v175, v32, v33, v34, v35, v36);
  sub_1000C898C((uint64_t)v225);
  v39 = KeyPath;
  static Published.subscript.getter(v216, v162, KeyPath, v38);
  swift_release(v39);
  swift_release(v38);
  sub_1000C8830((uint64_t)v225);
  if (v216[3])
  {
    sub_100009008((uint64_t)v216, (uint64_t)&v190);
    sub_10004D4EC((uint64_t)v216);
    v40 = v193;
    v41 = v194;
    sub_10000904C(&v190, v193);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v41 + 56))(v217, v40, v41);
    v162 = v218;
    v42 = v218;
    sub_100016F3C(v217);
    v43 = sub_100009070(&v190);
  }
  else
  {
    v43 = sub_10000CC5C((uint64_t)v216, &qword_10013D168);
    v162 = 0;
  }
  v146 = (_BYTE *)(v169 + 256);
  v44 = static Alignment.center.getter(v43);
  _FrameLayout.init(width:height:alignment:)(&v219, 0x4049000000000000, 0, 0x4049000000000000, 0, v44, v45);
  v158 = v219;
  v159 = v221;
  v160 = v224;
  KeyPath = v223;
  v215 = v220;
  v213 = v222;
  v47 = static HorizontalAlignment.leading.getter(v46);
  sub_1000C2CFC((uint64_t)&v190);
  v148 = v191;
  v149 = v190;
  v147 = v192;
  v150 = v193;
  v173 = v194;
  v151 = v196;
  v152 = v195;
  v153 = v197;
  v157 = swift_getKeyPath(&unk_1000EE8B0);
  v48 = type metadata accessor for SystemApertureLayoutState(0);
  v49 = sub_100008694((unint64_t *)&qword_10013C120, type metadata accessor for SystemApertureLayoutState, (uint64_t)&unk_1000EA18C);
  v156 = EnvironmentObject.init()(v48, v49);
  v51 = v50;
  v52 = v172;
  if (v174 < 0)
  {
    v92 = 1;
    v90 = v155;
  }
  else
  {
    v53 = Image.init(systemName:)(0x7269632E6F666E69, 0xEB00000000656C63);
    v54 = v134;
    v55 = v51;
    v56 = v47;
    v57 = v133;
    v58 = v136;
    (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v133, enum case for Image.Scale.medium(_:), v136);
    v59 = swift_getKeyPath(&unk_1000EEBC0);
    v60 = v137;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))((char *)v137 + *(int *)(v132 + 28), v57, v58);
    *v60 = v59;
    v61 = v139;
    sub_10000CC18((uint64_t)v60, (uint64_t)v139 + *(int *)(v131 + 36), (uint64_t *)&unk_100140C80);
    *v61 = v53;
    swift_retain(v53);
    sub_10000CC5C((uint64_t)v60, (uint64_t *)&unk_100140C80);
    v62 = v57;
    v47 = v56;
    v51 = v55;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v62, v58);
    v63 = swift_release(v53);
    v64 = (uint64_t)v145;
    static SymbolRenderingMode.monochrome.getter(v63);
    v65 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 0, 1, v65);
    v66 = swift_getKeyPath(&unk_1000EEBF0);
    v67 = (uint64_t)v140;
    v68 = (uint64_t *)&v140[*(int *)(v135 + 36)];
    v69 = sub_100008F88(&qword_100140CB0);
    sub_10000CC18(v64, (uint64_t)v68 + *(int *)(v69 + 28), (uint64_t *)&unk_100140760);
    *v68 = v66;
    sub_10000CC18((uint64_t)v61, v67, &qword_1001405A0);
    sub_10000CC5C(v64, (uint64_t *)&unk_100140760);
    v70 = sub_10000CC5C((uint64_t)v61, &qword_1001405A0);
    v71 = static Font.title2.getter(v70);
    v72 = swift_getKeyPath(&unk_1000EEDC0);
    v73 = v142;
    sub_10000CC18(v67, v142, &qword_100140C90);
    v74 = (uint64_t *)(v73 + *(int *)(v138 + 36));
    *v74 = v72;
    v74[1] = v71;
    sub_10000CC5C(v67, &qword_100140C90);
    v76 = static Color.white.getter(v75);
    v77 = Color.opacity(_:)(0.4);
    swift_release(v76);
    v78 = swift_getKeyPath(&unk_1000EEB90);
    v79 = v144;
    sub_10000CC18(v73, v144, (uint64_t *)&unk_100140880);
    v80 = (uint64_t *)(v79 + *(int *)(v141 + 36));
    *v80 = v78;
    v80[1] = v77;
    v81 = sub_10000CC5C(v73, (uint64_t *)&unk_100140880);
    LOBYTE(v78) = static Edge.Set.trailing.getter(v81);
    v82 = EdgeInsets.init(_all:)(18.0);
    v84 = v83;
    v86 = v85;
    v88 = v87;
    v89 = v143;
    sub_10000CC18(v79, v143, &qword_100140F70);
    v90 = v155;
    v91 = v89 + *(int *)(v155 + 36);
    *(_BYTE *)v91 = v78;
    *(double *)(v91 + 8) = v82;
    *(_QWORD *)(v91 + 16) = v84;
    *(_QWORD *)(v91 + 24) = v86;
    *(_QWORD *)(v91 + 32) = v88;
    *(_BYTE *)(v91 + 40) = 0;
    v52 = v172;
    sub_10000CC5C(v79, &qword_100140F70);
    sub_10000CBD4(v89, v52, &qword_100140F78);
    v92 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56))(v52, v92, 1, v90);
  v93 = v215;
  LODWORD(v154) = v215;
  v94 = v213;
  LODWORD(v155) = v213;
  sub_10000CC18(v52, v163, &qword_100140F80);
  HIDWORD(v187) = *(_DWORD *)&v214[3];
  *(_DWORD *)((char *)&v187 + 9) = *(_DWORD *)v214;
  *(_DWORD *)((char *)&v188 + 9) = *(_DWORD *)v212;
  HIDWORD(v188) = *(_DWORD *)&v212[3];
  v95 = v169;
  *(_QWORD *)(v169 + 160) = v47;
  *(_BYTE *)(v95 + 176) = 1;
  v96 = v146;
  v146[32] = 1;
  *v96 = 0;
  *(_QWORD *)(v95 + 264) = v156;
  *(_QWORD *)(v95 + 272) = v51;
  *(_QWORD *)&v180 = v171;
  *((_QWORD *)&v180 + 1) = v179;
  *(_QWORD *)&v181 = v170;
  *((_QWORD *)&v181 + 1) = v178;
  *(_QWORD *)&v182 = v177;
  *((_QWORD *)&v182 + 1) = v176;
  *(_QWORD *)&v183 = v175;
  *((_QWORD *)&v183 + 1) = v168;
  *(_QWORD *)&v184 = v167;
  *((_QWORD *)&v184 + 1) = v174;
  *(_QWORD *)&v185 = v166;
  *((_QWORD *)&v185 + 1) = v165;
  LODWORD(v186) = v164;
  *((_QWORD *)&v186 + 1) = v162;
  *(_QWORD *)&v187 = v158;
  BYTE8(v187) = v93;
  *(_QWORD *)&v188 = v159;
  BYTE8(v188) = v94;
  *(_QWORD *)&v189 = KeyPath;
  *((_QWORD *)&v189 + 1) = v160;
  v97 = v183;
  *(_OWORD *)(v95 + 32) = v182;
  *(_OWORD *)(v95 + 48) = v97;
  v98 = v185;
  *(_OWORD *)(v95 + 64) = v184;
  *(_OWORD *)(v95 + 80) = v98;
  v99 = v181;
  *(_OWORD *)v95 = v180;
  *(_OWORD *)(v95 + 16) = v99;
  v100 = v186;
  v101 = v187;
  v102 = v189;
  *(_OWORD *)(v95 + 128) = v188;
  *(_OWORD *)(v95 + 144) = v102;
  *(_OWORD *)(v95 + 96) = v100;
  *(_OWORD *)(v95 + 112) = v101;
  *(_QWORD *)(v95 + 168) = 0;
  v103 = v148;
  v104 = v149;
  *(_QWORD *)(v95 + 184) = v149;
  *(_QWORD *)(v95 + 192) = v103;
  v105 = v147;
  *(_BYTE *)(v95 + 200) = v147;
  v106 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v150;
  v107 = v173;
  *(_QWORD *)(v95 + 208) = v150;
  *(_QWORD *)(v95 + 216) = v107;
  v108 = v152;
  v109 = v153;
  *(_QWORD *)(v95 + 224) = v152;
  v110 = v151;
  *(_BYTE *)(v95 + 232) = v151;
  v111 = v157;
  *(_QWORD *)(v95 + 240) = v109;
  *(_QWORD *)(v95 + 248) = v111;
  *(_QWORD *)(v95 + 280) = 0;
  v112 = v95 + *(int *)(sub_100008F88(&qword_100140F88) + 80);
  v113 = v163;
  sub_10000CC18(v163, v112, &qword_100140F80);
  sub_1000C89B4((uint64_t *)&v180);
  sub_1000452A8(v104, v103, v105);
  swift_bridgeObjectRetain(v106);
  sub_1000452A8(v173, v108, v110);
  swift_bridgeObjectRetain(v109);
  sub_1000254D0(v111, 0);
  v114 = v156;
  swift_retain(v156);
  sub_10000CC5C(v172, &qword_100140F80);
  sub_10000CC5C(v113, &qword_100140F80);
  sub_100044F90(v104, v103, v105);
  swift_bridgeObjectRelease(v106, v115, v116, v117, v118, v119, v120, v121);
  sub_100044F90(v173, v108, v110);
  swift_bridgeObjectRelease(v109, v122, v123, v124, v125, v126, v127, v128);
  sub_10002551C(v157, 0);
  swift_release(v114);
  v190 = v171;
  v191 = v179;
  v192 = v170;
  v193 = v178;
  v194 = v177;
  v195 = v176;
  v196 = v175;
  v197 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v168;
  v198 = v167;
  v199 = v174;
  v200 = v166;
  v201 = v165;
  v202 = v164;
  v203 = v162;
  v204 = v158;
  v205 = v154;
  *(_DWORD *)v206 = *(_DWORD *)v214;
  *(_DWORD *)&v206[3] = *(_DWORD *)&v214[3];
  v207 = v159;
  v208 = v155;
  *(_DWORD *)v209 = *(_DWORD *)v212;
  *(_DWORD *)&v209[3] = *(_DWORD *)&v212[3];
  v210 = KeyPath;
  v211 = v160;
  return sub_1000C8A14(&v190);
}

void sub_1000C2CFC(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _TtC9AirDropUI33AirDropTransferSessionsController *v21;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _TtC9AirDropUI33AirDropTransferSessionsController *v33;
  _TtC9AirDropUI33AirDropTransferSessionsController *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _TtC9AirDropUI33AirDropTransferSessionsController *v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;
  _TtC9AirDropUI33AirDropTransferSessionsController *v61;
  SEL v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _TtC9AirDropUI33AirDropTransferSessionsController *v72;
  uint64_t v73;
  SEL v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  SEL v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _TtC9AirDropUI33AirDropTransferSessionsController *v94;
  uint64_t v95;
  uint64_t v96;

  v2 = sub_100008F88((uint64_t *)&unk_100140CC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_1000C11F8();
  v96 = v6;
  v90 = sub_100044F4C();
  v7 = Text.init<A>(_:)(&v95, &type metadata for String, v90);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = type metadata accessor for Font.Design(0);
  v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v89(v5, 1, 1, v14);
  v15 = static Font.system(size:weight:design:)(0, 1, v5, 15.0);
  v16 = sub_10000CC5C((uint64_t)v5, (uint64_t *)&unk_100140CC0);
  static Font.Weight.medium.getter(v16);
  v17 = Font.weight(_:)(v15);
  swift_release(v15);
  v18 = Text.font(_:)(v17, v7, v9, v13, v11);
  v92 = v19;
  v93 = v18;
  LOBYTE(v15) = v20;
  v94 = v21;
  swift_release(v17);
  v91 = v15 & 1;
  sub_100044F90(v7, v9, v13);
  swift_bridgeObjectRelease(v11, v22, v23, v24, v25, v26, v27, v28);
  v95 = sub_1000C15AC();
  v96 = v29;
  v30 = Text.init<A>(_:)(&v95, &type metadata for String, v90);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v89(v5, 1, 1, v14);
  v37 = static Font.system(size:weight:design:)(0, 1, v5, 15.0);
  v38 = sub_10000CC5C((uint64_t)v5, (uint64_t *)&unk_100140CC0);
  static Font.Weight.regular.getter(v38);
  v39 = Font.weight(_:)(v37);
  swift_release(v37);
  v40 = Text.font(_:)(v39, v30, v32, v36, v34);
  v42 = v41;
  LOBYTE(v11) = v43;
  v45 = v44;
  swift_release(v39);
  LOBYTE(v39) = v11 & 1;
  sub_100044F90(v30, v32, v36);
  swift_bridgeObjectRelease(v34, v46, v47, v48, v49, v50, v51, v52);
  v54 = static Color.white.getter(v53);
  v55 = Color.opacity(_:)(0.4);
  swift_release(v54);
  v56 = Text.foregroundColor(_:)(v55, v40, v42, v11 & 1, v45);
  v58 = v57;
  LOBYTE(v36) = v59;
  v61 = v60;
  swift_release(v55);
  LOBYTE(v55) = v36 & 1;
  sub_100044F90(v40, v42, v39);
  swift_bridgeObjectRelease(v45, v62, v63, v64, v65, v66, v67, v68);
  v69 = v91;
  LOBYTE(v95) = v91;
  v71 = v92;
  v70 = v93;
  *(_QWORD *)a1 = v93;
  *(_QWORD *)(a1 + 8) = v71;
  *(_BYTE *)(a1 + 16) = v69;
  v72 = v94;
  *(_QWORD *)(a1 + 24) = v94;
  *(_QWORD *)(a1 + 32) = v56;
  *(_QWORD *)(a1 + 40) = v58;
  *(_BYTE *)(a1 + 48) = v55;
  *(_QWORD *)(a1 + 56) = v61;
  v73 = v70;
  sub_1000452A8(v70, v71, v69);
  swift_bridgeObjectRetain(v72);
  sub_1000452A8(v56, v58, v55);
  swift_bridgeObjectRetain(v61);
  sub_100044F90(v56, v58, v55);
  swift_bridgeObjectRelease(v61, v74, v75, v76, v77, v78, v79, v80);
  sub_100044F90(v73, v71, v95);
  swift_bridgeObjectRelease(v72, v81, v82, v83, v84, v85, v86, v87);
}

uint64_t sub_1000C3028@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t (**v21)();
  uint64_t v23;
  _OWORD v24[3];
  __int128 v25[2];

  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000904C(a1, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  sub_100009008((uint64_t)a1, (uint64_t)v25);
  sub_1000B5508(a3, (uint64_t)v24);
  v15 = swift_allocObject(&unk_1001299A0, 256, 7);
  v16 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v15 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v15 + 128) = v16;
  *(_OWORD *)(v15 + 144) = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(v15 + 160) = *(_DWORD *)(a2 + 144);
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v15 + 64) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v15 + 96) = v18;
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 32) = v19;
  sub_10004EFB0(v25, v15 + 168);
  v20 = v24[1];
  *(_OWORD *)(v15 + 208) = v24[0];
  *(_OWORD *)(v15 + 224) = v20;
  *(_OWORD *)(v15 + 240) = v24[2];
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
  v21 = (uint64_t (**)())(a4 + *(int *)(type metadata accessor for BannerShareableContentActionButton(0) + 20));
  *v21 = sub_1000C897C;
  v21[1] = (uint64_t (*)())v15;
  return sub_1000C766C(a2);
}

uint64_t sub_1000C3190(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v8;

  v8 = *(_OWORD *)(a1 + 16);
  v4 = a2[3];
  v5 = a2[4];
  v6 = (char *)sub_10000904C(a2, v4);
  sub_10004BD9C(v6, a3, 0, (char *)*((id *)&v8 + 1), v4, v5);
  return sub_1000C8830((uint64_t)&v8);
}

uint64_t sub_1000C320C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v6[6];
  _BYTE v7[72];
  uint64_t v8;

  sub_100057150((__int128 *)(a1 + 48), (uint64_t)v6);
  result = sub_100057150(v6, (uint64_t)v7);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v5 = *(_OWORD *)(a1 + 32);
    v4 = 1;
    v3 = sub_100008F88(&qword_100140128);
    return State.wrappedValue.setter(&v4, v3);
  }
  return result;
}

void sub_1000C3284(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[9];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1 < 0)
  {
    objc_msgSend(objc_allocWithZone((Class)UIViewController), "init");
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_QWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(_QWORD *)(a1 + 104);
    v6 = *(_QWORD *)(a1 + 112);
    v8 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    v13[0] = *(_QWORD *)(a1 + 48);
    v13[1] = v12;
    v13[2] = v11;
    v13[3] = v10;
    v13[4] = v9;
    v13[5] = v8;
    v13[6] = v7;
    v13[7] = v5;
    v13[8] = v6;
    v14 = v1;
    v15 = v3;
    v16 = v4;
    v17 = v2;
    objc_allocWithZone((Class)type metadata accessor for ContactDetailsViewController());
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    sub_10007C270((uint64_t)v13, (uint64_t)sub_1000C3388, 0);
  }
}

void sub_1000C3388(void *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(a1, "presentingViewController");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

uint64_t sub_1000C33E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C1A08(a1);
}

uint64_t sub_1000C3438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  Swift::String v25;
  _BYTE v26[16];
  uint64_t v27;
  unint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v2, v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6, v7);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10, v11);
  v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = &v26[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v15 + 16))(v19, v1, v14, v17);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 88))(v19, v14);
  if (v20 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v19, v14);
    if (*v19 == 1)
    {
      v21 = 0xD00000000000001BLL;
      v22 = 0x80000001000F2AD0;
    }
    else
    {
      v22 = 0x80000001000F2AB0;
      v21 = 0xD000000000000019;
    }
    goto LABEL_7;
  }
  if (v20 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:))
  {
    v21 = 0x504F5244524941;
    v22 = 0xE700000000000000;
LABEL_7:
    v23 = String.LocalizationValue.init(stringLiteral:)(v21, v22);
    static Locale.current.getter(v23);
    return String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, 0, v9, 0, 0, 256);
  }
  sub_10000C484(v1, (uint64_t)v5, type metadata accessor for NearbySharingInteractionFailureView);
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v25._countAndFlagsBits = 0xD000000000000040;
  v25._object = (void *)0x80000001000F29E0;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)(v5, &v27, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, "AirDropUI/NearbySharingInteractionBannerView.swift", 50, 2, 198, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C36F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  Swift::String v26;
  _BYTE v27[16];
  uint64_t v28;
  unint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v2, v3);
  v5 = &v27[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6, v7);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10, v11);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = &v27[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v15 + 16))(v19, v1, v14, v17);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 88))(v19, v14);
  if (v20 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v19, v14);
    if (*v19 == 1)
    {
      v21 = 0xD000000000000022;
      v22 = "BOOP_NOT_SUPPORTED_RECEIVER_UPDATE";
    }
    else
    {
      v21 = 0xD000000000000020;
      v22 = "BOOP_NOT_SUPPORTED_SENDER_UPDATE";
    }
    v23 = (unint64_t)(v22 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  if (v20 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:))
  {
    v23 = 0x80000001000F2A90;
    v21 = 0xD000000000000013;
LABEL_8:
    v24 = String.LocalizationValue.init(stringLiteral:)(v21, v23);
    static Locale.current.getter(v24);
    return String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, 0, v9, 0, 0, 256);
  }
  sub_10000C484(v1, (uint64_t)v5, type metadata accessor for NearbySharingInteractionFailureView);
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v26._countAndFlagsBits = 0xD000000000000040;
  v26._object = (void *)0x80000001000F29E0;
  String.append(_:)(v26);
  _print_unlocked<A, B>(_:_:)(v5, &v28, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v28, v29, "AirDropUI/NearbySharingInteractionBannerView.swift", 50, 2, 213, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C3994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v38;

  v2 = v1;
  v4 = sub_100008F88(&qword_100140C48);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100008F88(&qword_100140C50);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_100140C58);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Color.RGBColorSpace(0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, __n128))(v21 + 104))(v20, enum case for Color.RGBColorSpace.sRGB(_:), v18);
  v22 = Color.init(_:red:green:blue:opacity:)(v20, 0.043, 0.608, 1.0, 1.0);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v7 + 1) = 0x4033000000000000;
  v7[16] = 0;
  v23 = sub_100008F88(&qword_100140C60);
  v24 = &v7[*(int *)(v23 + 44)];
  *(_QWORD *)v24 = static VerticalAlignment.center.getter(v23);
  *((_QWORD *)v24 + 1) = 0x402C000000000000;
  v24[16] = 0;
  v25 = sub_100008F88(&qword_100140C68);
  v26 = sub_1000C3C48(v22, v2, (uint64_t)&v24[*(int *)(v25 + 44)]);
  v27 = static Alignment.center.getter(v26);
  sub_1000BF698(0.0, 1, 1.79769313e308, 0, 0.0, 1, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v27, v28, &qword_100140C48, &qword_100140C50);
  sub_10000CC5C((uint64_t)v7, &qword_100140C48);
  v30 = static Color.white.getter(v29);
  KeyPath = swift_getKeyPath(&unk_1000EEB90);
  sub_10000CC18((uint64_t)v11, (uint64_t)v15, &qword_100140C50);
  v32 = (uint64_t *)&v15[*(int *)(v12 + 36)];
  *v32 = KeyPath;
  v32[1] = v30;
  v33 = sub_10000CC5C((uint64_t)v11, &qword_100140C50);
  v34 = static Color.black.getter(v33);
  v35 = static Edge.Set.all.getter(v34);
  swift_release(v22);
  sub_10000CC18((uint64_t)v15, a1, &qword_100140C58);
  v36 = a1 + *(int *)(sub_100008F88((uint64_t *)&unk_100140C70) + 36);
  *(_QWORD *)v36 = v34;
  *(_BYTE *)(v36 + 8) = v35;
  return sub_10000CC5C((uint64_t)v15, &qword_100140C58);
}

uint64_t sub_1000C3C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t KeyPath;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[3];
  _BYTE v88[296];
  _BYTE v89[312];
  _BYTE v90[297];
  _BYTE v91[7];
  char v92;
  int v93;
  __int16 v94;
  _QWORD v95[44];
  _QWORD v96[2];
  char v97;
  _BYTE v98[297];
  int v99;
  __int16 v100;
  uint64_t v101;
  char v102;
  _BYTE v103[7];
  uint64_t v104;
  uint64_t v105;

  v83 = a1;
  v84 = a2;
  v85 = a3;
  v3 = sub_100008F88((uint64_t *)&unk_100140760);
  __chkstk_darwin(v3, v4);
  v82 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100008F88((uint64_t *)&unk_100140C80);
  v7 = __chkstk_darwin(v76, v6);
  v9 = (uint64_t *)((char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Image.Scale(0, v7);
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  __chkstk_darwin(v10, v11);
  v72 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Image.ResizingMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100008F88(&qword_1001405A0);
  __chkstk_darwin(v71, v18);
  v20 = (uint64_t *)((char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = sub_100008F88(&qword_100140C90);
  __chkstk_darwin(v75, v21);
  v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100008F88(&qword_100140C98);
  __chkstk_darwin(v78, v24);
  v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100008F88(&qword_100140CA0);
  __chkstk_darwin(v79, v27);
  v77 = (uint64_t)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100008F88(&qword_100140CA8);
  __chkstk_darwin(v81, v29);
  v86 = (uint64_t)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31, v32);
  v80 = (uint64_t)&v71 - v34;
  v35 = Image.init(_internalSystemName:)(0x706F7264726961, 0xE700000000000000, v33);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for Image.ResizingMode.stretch(_:), v13);
  v36 = Image.resizable(capInsets:resizingMode:)(v17, v35, 0.0, 0.0, 0.0, 0.0);
  v37 = swift_release(v35);
  (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v17, v13, v37);
  v39 = v72;
  v38 = v73;
  v40 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for Image.Scale.large(_:), v74);
  KeyPath = swift_getKeyPath(&unk_1000EEBC0);
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))((char *)v9 + *(int *)(v76 + 28), v39, v40);
  *v9 = KeyPath;
  sub_10000CC18((uint64_t)v9, (uint64_t)v20 + *(int *)(v71 + 36), (uint64_t *)&unk_100140C80);
  *v20 = v36;
  swift_retain(v36);
  sub_10000CC5C((uint64_t)v9, (uint64_t *)&unk_100140C80);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  v42 = swift_release(v36);
  v43 = (uint64_t)v82;
  static SymbolRenderingMode.monochrome.getter(v42);
  v44 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
  v45 = swift_getKeyPath(&unk_1000EEBF0);
  v46 = (uint64_t *)&v23[*(int *)(v75 + 36)];
  v47 = sub_100008F88(&qword_100140CB0);
  sub_10000CC18(v43, (uint64_t)v46 + *(int *)(v47 + 28), (uint64_t *)&unk_100140760);
  *v46 = v45;
  sub_10000CC18((uint64_t)v20, (uint64_t)v23, &qword_1001405A0);
  sub_10000CC5C(v43, (uint64_t *)&unk_100140760);
  sub_10000CC5C((uint64_t)v20, &qword_1001405A0);
  v48 = swift_getKeyPath(&unk_1000EEB90);
  sub_10000CC18((uint64_t)v23, (uint64_t)v26, &qword_100140C90);
  v49 = (uint64_t *)&v26[*(int *)(v78 + 36)];
  v50 = v83;
  *v49 = v48;
  v49[1] = v50;
  swift_retain(v50);
  sub_10000CC5C((uint64_t)v23, &qword_100140C90);
  v51 = v77;
  sub_10000CC18((uint64_t)v26, v77, &qword_100140C98);
  v52 = v51 + *(int *)(v79 + 36);
  *(_QWORD *)v52 = 0;
  *(_WORD *)(v52 + 8) = 1;
  v53 = sub_10000CC5C((uint64_t)v26, &qword_100140C98);
  v54 = static Alignment.center.getter(v53);
  _FrameLayout.init(width:height:alignment:)(v87, 0x4049000000000000, 0, 0x4049000000000000, 0, v54, v55);
  v56 = v86;
  sub_10000CC18(v51, v86, &qword_100140CA0);
  v57 = (_OWORD *)(v56 + *(int *)(v81 + 36));
  v58 = v87[1];
  *v57 = v87[0];
  v57[1] = v58;
  v57[2] = v87[2];
  sub_10000CC5C(v51, &qword_100140CA0);
  v59 = v80;
  sub_10000CBD4(v56, v80, &qword_100140CA8);
  v61 = static HorizontalAlignment.leading.getter(v60);
  sub_1000C4370(v84, v88);
  v89[304] = 1;
  memcpy(&v89[7], v88, 0x122uLL);
  memcpy(v90, v89, sizeof(v90));
  v84 = swift_getKeyPath(&unk_1000EE8B0);
  v62 = type metadata accessor for SystemApertureLayoutState(0);
  v63 = sub_100008694((unint64_t *)&qword_10013C120, type metadata accessor for SystemApertureLayoutState, (uint64_t)&unk_1000EA18C);
  v64 = EnvironmentObject.init()(v62, v63);
  v66 = v65;
  v92 = 0;
  sub_10000CC18(v59, v56, &qword_100140CA8);
  LOBYTE(v43) = v92;
  v67 = v85;
  sub_10000CC18(v56, v85, &qword_100140CA8);
  v68 = (void *)(v67 + *(int *)(sub_100008F88(&qword_100140CB8) + 48));
  v95[0] = v61;
  v95[1] = 0;
  LOBYTE(v95[2]) = 1;
  memcpy((char *)&v95[2] + 1, v90, 0x129uLL);
  *(_DWORD *)((char *)&v95[39] + 2) = v93;
  HIWORD(v95[39]) = v94;
  v69 = v84;
  v95[40] = v84;
  LOBYTE(v95[41]) = v43;
  *(_DWORD *)((char *)&v95[41] + 1) = *(_DWORD *)v91;
  HIDWORD(v95[41]) = *(_DWORD *)&v91[3];
  v95[42] = v64;
  v95[43] = v66;
  memcpy(v68, v95, 0x160uLL);
  sub_1000C78D0((uint64_t)v95);
  sub_10000CC5C(v59, &qword_100140CA8);
  v96[0] = v61;
  v96[1] = 0;
  v97 = 1;
  memcpy(v98, v90, sizeof(v98));
  v99 = v93;
  v100 = v94;
  v101 = v69;
  v102 = v43;
  *(_DWORD *)v103 = *(_DWORD *)v91;
  *(_DWORD *)&v103[3] = *(_DWORD *)&v91[3];
  v104 = v64;
  v105 = v66;
  sub_1000C7974((uint64_t)v96);
  return sub_10000CC5C(v86, &qword_100140CA8);
}

uint64_t sub_1000C4370@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _TtC9AirDropUI33AirDropTransferSessionsController *v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  SEL v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _TtC9AirDropUI33AirDropTransferSessionsController *v46;
  _TtC9AirDropUI33AirDropTransferSessionsController *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  _TtC9AirDropUI33AirDropTransferSessionsController *v59;
  _TtC9AirDropUI33AirDropTransferSessionsController *v60;
  SEL v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  _TtC9AirDropUI33AirDropTransferSessionsController *v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[9];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int16 v129;
  _OWORD v130[19];
  _OWORD v131[9];
  __int16 v132;
  _OWORD v133[10];

  v99 = a1;
  v100 = a2;
  v2 = sub_100008F88((uint64_t *)&unk_100140CC0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v130[0] = sub_1000C3438();
  *((_QWORD *)&v130[0] + 1) = v6;
  v98 = sub_100044F4C();
  v7 = Text.init<A>(_:)(v130, &type metadata for String, v98);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = type metadata accessor for Font.Design(0);
  v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v97 = v14;
  v95 = v5;
  v96(v5, 1, 1, v14);
  v15 = static Font.system(size:weight:design:)(0, 1, v5, 15.0);
  v16 = sub_10000CC5C((uint64_t)v5, (uint64_t *)&unk_100140CC0);
  static Font.Weight.medium.getter(v16);
  v17 = Font.weight(_:)(v15);
  swift_release(v15);
  v18 = Text.font(_:)(v17, v7, v9, v13, v11);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_release(v17);
  sub_100044F90(v7, v9, v13);
  swift_bridgeObjectRelease(v11, v25, v26, v27, v28, v29, v30, v31);
  v33 = static Alignment.leading.getter(v32);
  sub_1000C02FC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v130, 0.0, 1, 0.0, 1, v33, v34, v18, v20, v22 & 1, (uint64_t)v24);
  sub_100044F90(v18, v20, v22 & 1);
  swift_bridgeObjectRelease(v24, v35, v36, v37, v38, v39, v40, v41);
  v116 = v130[6];
  v117 = v130[7];
  v118 = v130[8];
  v112 = v130[2];
  v113 = v130[3];
  v114 = v130[4];
  v115 = v130[5];
  v110 = v130[0];
  v111 = v130[1];
  *(_QWORD *)&v130[0] = sub_1000C36F0();
  *((_QWORD *)&v130[0] + 1) = v42;
  v43 = Text.init<A>(_:)(v130, &type metadata for String, v98);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  v50 = (uint64_t)v95;
  v96(v95, 1, 1, v97);
  v51 = static Font.system(size:weight:design:)(0, 1, v50, 15.0);
  v52 = sub_10000CC5C(v50, (uint64_t *)&unk_100140CC0);
  static Font.Weight.regular.getter(v52);
  v53 = Font.weight(_:)(v51);
  swift_release(v51);
  v54 = Text.font(_:)(v53, v43, v45, v49, v47);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  swift_release(v53);
  LOBYTE(v53) = v58 & 1;
  sub_100044F90(v43, v45, v49);
  swift_bridgeObjectRelease(v47, v61, v62, v63, v64, v65, v66, v67);
  v69 = static Color.white.getter(v68);
  v70 = Color.opacity(_:)(0.4);
  swift_release(v69);
  v71 = Text.foregroundColor(_:)(v70, v54, v56, v58 & 1, v60);
  v73 = v72;
  LOBYTE(v45) = v74;
  v76 = v75;
  swift_release(v70);
  sub_100044F90(v54, v56, v53);
  swift_bridgeObjectRelease(v60, v77, v78, v79, v80, v81, v82, v83);
  v85 = static Alignment.leading.getter(v84);
  sub_1000C02FC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v130, 0.0, 1, 0.0, 1, v85, v86, v71, v73, v45 & 1, (uint64_t)v76);
  sub_100044F90(v71, v73, v45 & 1);
  swift_bridgeObjectRelease(v76, v87, v88, v89, v90, v91, v92, v93);
  v107 = v130[6];
  v108 = v130[7];
  v109 = v130[8];
  v103 = v130[2];
  v104 = v130[3];
  v105 = v130[4];
  v106 = v130[5];
  v101 = v130[0];
  v102 = v130[1];
  v119[6] = v116;
  v119[7] = v117;
  v119[8] = v118;
  v119[2] = v112;
  v119[3] = v113;
  v119[4] = v114;
  v119[5] = v115;
  v119[0] = v110;
  v119[1] = v111;
  v126 = v130[6];
  v127 = v130[7];
  v128 = v130[8];
  v122 = v130[2];
  v123 = v130[3];
  v124 = v130[4];
  v125 = v130[5];
  v120 = v130[0];
  v121 = v130[1];
  v130[6] = v116;
  v130[7] = v117;
  v130[2] = v112;
  v130[3] = v113;
  v130[4] = v114;
  v130[5] = v115;
  v130[0] = v110;
  v130[1] = v111;
  v130[16] = v127;
  v130[17] = v130[8];
  v130[12] = v123;
  v130[13] = v124;
  v130[14] = v125;
  v130[15] = v126;
  v130[8] = v118;
  v130[9] = v120;
  v129 = 256;
  LOWORD(v130[18]) = 256;
  v130[10] = v121;
  v130[11] = v122;
  memcpy(v100, v130, 0x122uLL);
  v131[6] = v107;
  v131[7] = v108;
  v131[8] = v109;
  v131[2] = v103;
  v131[3] = v104;
  v131[5] = v106;
  v131[4] = v105;
  v131[0] = v101;
  v131[1] = v102;
  v132 = 256;
  sub_1000B9E2C((uint64_t)v119);
  sub_1000B9E2C((uint64_t)&v120);
  sub_1000B9E68((uint64_t)v131);
  v133[6] = v116;
  v133[7] = v117;
  v133[8] = v118;
  v133[2] = v112;
  v133[3] = v113;
  v133[4] = v114;
  v133[5] = v115;
  v133[0] = v110;
  v133[1] = v111;
  return sub_1000B9E68((uint64_t)v133);
}

double sub_1000C4898@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  int EnumCaseMultiPayload;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double result;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[21];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  _OWORD v76[9];
  int v77;
  _OWORD v78[8];
  _BYTE v79[22];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[3];

  v4 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1;
  sub_100049C50(v7);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v4);
  if (EnumCaseMultiPayload == 4)
  {
    v14 = *(_QWORD *)v7;
    v55 = *((_QWORD *)v7 + 1);
    v56 = v14;
    v15 = *((_QWORD *)v7 + 2);
    v53 = *((_QWORD *)v7 + 3);
    v54 = v15;
    v16 = *((_QWORD *)v7 + 4);
    v51 = *((_QWORD *)v7 + 5);
    v52 = v16;
    v17 = *((_QWORD *)v7 + 6);
    v49 = *((_QWORD *)v7 + 7);
    v50 = v17;
    v18 = *((_QWORD *)v7 + 8);
    v47 = *((_QWORD *)v7 + 9);
    v48 = v18;
    v19 = *((_QWORD *)v7 + 11);
    v46 = *((_QWORD *)v7 + 10);
    v20 = *((_DWORD *)v7 + 24);
    sub_10004D4EC((uint64_t)(v7 + 104));
LABEL_7:
    KeyPath = swift_getKeyPath(&unk_1000EE8B0);
    v27 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v28 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v29 = ObservedObject.init(wrappedValue:)(v8, v27, v28);
    v31 = v30;
    LOBYTE(v80) = 0;
    State.init(wrappedValue:)(&v80, &type metadata for Bool);
    *(_QWORD *)&v66 = KeyPath;
    BYTE8(v66) = 0;
    *(_QWORD *)&v67 = v29;
    *((_QWORD *)&v67 + 1) = v31;
    LOBYTE(v68) = v89;
    *((_QWORD *)&v68 + 1) = *((_QWORD *)&v89 + 1);
    *(_QWORD *)&v69 = v56;
    *((_QWORD *)&v69 + 1) = v55;
    *(_QWORD *)&v70 = v54;
    *((_QWORD *)&v70 + 1) = v53;
    *(_QWORD *)&v71 = v52;
    *((_QWORD *)&v71 + 1) = v51;
    *(_QWORD *)&v72 = v50;
    *((_QWORD *)&v72 + 1) = v49;
    *(_QWORD *)&v73 = v48;
    *((_QWORD *)&v73 + 1) = v47;
    *(_QWORD *)&v74 = v46;
    *((_QWORD *)&v74 + 1) = v19;
    v75 = v20;
    v76[4] = v70;
    v76[5] = v71;
    v76[2] = v68;
    v76[3] = v69;
    v77 = v20;
    v76[7] = v73;
    v76[8] = v74;
    v76[6] = v72;
    v76[0] = v66;
    v76[1] = v67;
    sub_1000C7660((uint64_t)v76);
    sub_10000CBD4((uint64_t)v76, (uint64_t)&v89, &qword_100140C40);
    sub_1000C766C((uint64_t)&v66);
    v32 = sub_1000C75D8();
    v33 = sub_1000C761C();
    _ConditionalContent<>.init(storage:)(&v89, &type metadata for NearbyInteractionConnectionView, &type metadata for NearbySharingInteractionContactView, v32, v33);
    v86 = v63;
    v87 = v64;
    v88[0] = *(_OWORD *)v65;
    *(_QWORD *)((char *)v88 + 13) = *(_QWORD *)&v65[13];
    v82 = v59;
    v83 = v60;
    v84 = v61;
    v85 = v62;
    v80 = v57;
    v81 = v58;
    sub_1000C772C((uint64_t)&v80);
    sub_10000CBD4((uint64_t)&v80, (uint64_t)&v89, &qword_100140C18);
    v34 = sub_100008F88(&qword_100140C20);
    v35 = sub_10000C9D0(&qword_100140C28, &qword_100140C20, (void (*)(void))sub_1000C75D8, (void (*)(void))sub_1000C761C);
    _ConditionalContent<>.init(storage:)(&v89, v34, &type metadata for EmptyView, v35, &protocol witness table for EmptyView);
    sub_1000C7734((uint64_t)&v66);
    v95 = v78[6];
    v96 = v78[7];
    v97[0] = *(_OWORD *)v79;
    *(_QWORD *)((char *)v97 + 14) = *(_QWORD *)&v79[14];
    v91 = v78[2];
    v92 = v78[3];
    v93 = v78[4];
    v94 = v78[5];
    v36 = v78[0];
    v37 = v78[1];
LABEL_9:
    v89 = v36;
    v90 = v37;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 3)
  {
    v21 = *(_QWORD *)v7;
    v55 = *((_QWORD *)v7 + 1);
    v56 = v21;
    v22 = *((_QWORD *)v7 + 2);
    v53 = *((_QWORD *)v7 + 3);
    v54 = v22;
    v23 = *((_QWORD *)v7 + 4);
    v51 = *((_QWORD *)v7 + 5);
    v52 = v23;
    v24 = *((_QWORD *)v7 + 6);
    v49 = *((_QWORD *)v7 + 7);
    v50 = v24;
    v25 = *((_QWORD *)v7 + 8);
    v47 = *((_QWORD *)v7 + 9);
    v48 = v25;
    v19 = *((_QWORD *)v7 + 11);
    v46 = *((_QWORD *)v7 + 10);
    v20 = *((_DWORD *)v7 + 24);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload)
  {
    sub_1000C75CC((uint64_t)v78);
    sub_10000CBD4((uint64_t)v78, (uint64_t)&v89, &qword_100140C18);
    v38 = sub_100008F88(&qword_100140C20);
    v39 = sub_10000C9D0(&qword_100140C28, &qword_100140C20, (void (*)(void))sub_1000C75D8, (void (*)(void))sub_1000C761C);
    _ConditionalContent<>.init(storage:)(&v89, v38, &type metadata for EmptyView, v39, &protocol witness table for EmptyView);
    sub_10000C4C8((uint64_t)v7, type metadata accessor for NearbySharingInteractionViewState);
    v95 = v86;
    v96 = v87;
    v97[0] = v88[0];
    *(_QWORD *)((char *)v97 + 14) = *(_QWORD *)((char *)v88 + 14);
    v91 = v82;
    v92 = v83;
    v93 = v84;
    v94 = v85;
    v36 = v80;
    v37 = v81;
    goto LABEL_9;
  }
  swift_release(*(_QWORD *)v7);
  sub_1000C77F4((uint64_t)v76);
  sub_10000CBD4((uint64_t)v76, (uint64_t)&v89, &qword_100140C40);
  v10 = sub_1000C75D8();
  v11 = sub_1000C761C();
  _ConditionalContent<>.init(storage:)(&v89, &type metadata for NearbyInteractionConnectionView, &type metadata for NearbySharingInteractionContactView, v10, v11);
  v86 = v63;
  v87 = v64;
  v88[0] = *(_OWORD *)v65;
  *(_QWORD *)((char *)v88 + 13) = *(_QWORD *)&v65[13];
  v82 = v59;
  v83 = v60;
  v84 = v61;
  v85 = v62;
  v80 = v57;
  v81 = v58;
  sub_1000C772C((uint64_t)&v80);
  sub_10000CBD4((uint64_t)&v80, (uint64_t)v78, &qword_100140C18);
  v12 = sub_100008F88(&qword_100140C20);
  v13 = sub_10000C9D0(&qword_100140C28, &qword_100140C20, (void (*)(void))sub_1000C75D8, (void (*)(void))sub_1000C761C);
  _ConditionalContent<>.init(storage:)(v78, v12, &type metadata for EmptyView, v13, &protocol witness table for EmptyView);
LABEL_10:
  v40 = v96;
  *(_OWORD *)(a2 + 96) = v95;
  *(_OWORD *)(a2 + 112) = v40;
  *(_OWORD *)(a2 + 128) = v97[0];
  *(_QWORD *)(a2 + 142) = *(_QWORD *)((char *)v97 + 14);
  v41 = v92;
  *(_OWORD *)(a2 + 32) = v91;
  *(_OWORD *)(a2 + 48) = v41;
  v42 = v94;
  *(_OWORD *)(a2 + 64) = v93;
  *(_OWORD *)(a2 + 80) = v42;
  result = *(double *)&v89;
  v44 = v90;
  *(_OWORD *)a2 = v89;
  *(_OWORD *)(a2 + 16) = v44;
  return result;
}

uint64_t sub_1000C4E30@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[22];
  _OWORD v49[8];
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v38 = a3;
  v39 = a1;
  v4 = sub_100008F88(&qword_10013FD98);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for NearbySharingInteractionViewState(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_100140C00);
  __chkstk_darwin(v12, v13);
  v15 = (_OWORD *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000C4898(a2, (uint64_t)&v40);
  LOBYTE(v51) = 1;
  LOBYTE(v49[0]) = 0;
  v16 = sub_1000C71D0();
  v17 = static AnyTransition.modifier<A>(active:identity:)(&v51, v49, &type metadata for JindoBlurEffectModifier, v16);
  v49[6] = v46;
  v49[7] = v47;
  v50[0] = *(_OWORD *)v48;
  *(_QWORD *)((char *)v50 + 14) = *(_QWORD *)&v48[14];
  v49[2] = v42;
  v49[3] = v43;
  v49[4] = v44;
  v49[5] = v45;
  v49[0] = v40;
  v49[1] = v41;
  *((_QWORD *)&v50[1] + 1) = v17;
  v57 = v46;
  v58 = v47;
  v53 = v42;
  v54 = v43;
  v55 = v44;
  v56 = v45;
  v51 = v40;
  v52 = v41;
  v59 = v50[0];
  v60 = v50[1];
  v18 = static Animation.default.getter(v17);
  v19 = a2;
  sub_100049C50(v11);

  sub_10000C484((uint64_t)v11, (uint64_t)v7 + *(int *)(v4 + 36), type metadata accessor for NearbySharingInteractionViewState);
  *v7 = v18;
  sub_10000CC18((uint64_t)v7, (uint64_t)v15 + *(int *)(v12 + 36), &qword_10013FD98);
  v20 = v58;
  v15[6] = v57;
  v15[7] = v20;
  v21 = v60;
  v15[8] = v59;
  v15[9] = v21;
  v22 = v54;
  v15[2] = v53;
  v15[3] = v22;
  v23 = v56;
  v15[4] = v55;
  v15[5] = v23;
  v24 = v52;
  *v15 = v51;
  v15[1] = v24;
  sub_1000C7214((uint64_t)&v51);
  sub_10000CC5C((uint64_t)v7, &qword_10013FD98);
  sub_10000C4C8((uint64_t)v11, type metadata accessor for NearbySharingInteractionViewState);
  sub_1000C73D8((uint64_t)v49);
  v25 = swift_allocObject(&unk_100129838, 32, 7);
  *(_QWORD *)(v25 + 16) = v39;
  *(_QWORD *)(v25 + 24) = v19;
  KeyPath = swift_getKeyPath(&unk_1000EE8B0);
  v27 = swift_getKeyPath(&unk_1000EE8B0);
  v28 = type metadata accessor for SystemApertureLayoutState(0);
  v29 = sub_100008694((unint64_t *)&qword_10013C120, type metadata accessor for SystemApertureLayoutState, (uint64_t)&unk_1000EA18C);
  v30 = v19;
  swift_retain(v25);
  v31 = EnvironmentObject.init()(v28, v29);
  v33 = v32;
  v34 = v38;
  sub_10000CC18((uint64_t)v15, v38, &qword_100140C00);
  swift_release(v25);
  v35 = v34 + *(int *)(sub_100008F88(&qword_100140C10) + 36);
  *(_QWORD *)v35 = KeyPath;
  *(_BYTE *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = v27;
  *(_BYTE *)(v35 + 24) = 0;
  *(_QWORD *)(v35 + 32) = v31;
  *(_QWORD *)(v35 + 40) = v33;
  *(_QWORD *)(v35 + 48) = sub_1000C75C4;
  *(_QWORD *)(v35 + 56) = v25;
  return sub_10000CC5C((uint64_t)v15, &qword_100140C00);
}

void sub_1000C5168(uint64_t a1, void *a2)
{
  id v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;

  v2 = a2;
  sub_10004B10C();
  v4 = v3;

  if (v4 == 1)
  {
    if (qword_10013AD60 != -1)
      swift_once(&qword_10013AD60, sub_100092254);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100009558(v5, (uint64_t)qword_100148040);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ending nearby interaction because banner view was dismissed", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = v2;
    sub_100047B3C();

  }
}

uint64_t sub_1000C5284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C4E30(*(_QWORD *)v1, *(void **)(v1 + 8), a1);
}

uint64_t sub_1000C528C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v91 = a2;
  v3 = sub_100008F88(&qword_100140CF8);
  __chkstk_darwin(v3, v4);
  v89 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v85, v6);
  v87 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100008F88(&qword_100140D00);
  __chkstk_darwin(v84, v8);
  v88 = (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100008F88(&qword_100140D08);
  __chkstk_darwin(v90, v10);
  v86 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v80 - v14;
  v16 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008F88(&qword_10013EF70);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  v28 = (char *)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v80 - v31;
  v33 = sub_100008F88(&qword_100140D10);
  __chkstk_darwin(v33, v34);
  v37 = (char *)&v80 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v38 = v35;
    v39 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v40 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v41 = ObservedObject.init(wrappedValue:)(a1, v39, v40);
    v43 = v42;
    v44 = static Edge.Set.all.getter(v41);
    LOBYTE(v40) = v44;
    v45 = static Color.black.getter(v44);
    v46 = static Edge.Set.all.getter(v45);
    *(_QWORD *)v37 = v41;
    *((_QWORD *)v37 + 1) = v43;
    v37[16] = v40;
    *(_OWORD *)(v37 + 24) = 0u;
    *(_OWORD *)(v37 + 40) = 0u;
    v37[56] = 1;
    *((_QWORD *)v37 + 8) = v45;
    v37[72] = v46;
    swift_storeEnumTagMultiPayload(v37, v38, 0);
    v47 = sub_100008F88(&qword_100140D20);
    v48 = sub_1000C7AF0();
    v49 = sub_1000C7B94();
    v50 = v91;
    _ConditionalContent<>.init(storage:)(v37, v47, v90, v48, v49);
    v51 = sub_100008F88(&qword_100140D18);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 0, 1, v51);
  }
  v82 = v32;
  v83 = v25;
  v53 = v24;
  if (qword_10013ABF0 != -1)
  {
    v79 = v35;
    swift_once(&qword_10013ABF0, sub_100028C8C);
    v35 = v79;
  }
  v54 = *(_QWORD *)(*(_QWORD *)(qword_100147DA0
                              + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity);
  if (v54)
  {
    v81 = v35;
    swift_retain(v54);
    Activity.attributes.getter(v55);
    swift_release(v54);
    v56 = (uint64_t)v23;
    sub_10000CC18((uint64_t)&v19[*(int *)(v16 + 20)], (uint64_t)v23, &qword_10013EF70);
    sub_10000C4C8((uint64_t)v19, type metadata accessor for NearbySharingInteractionAttributes);
    v57 = v83;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v23, 1, v53) != 1)
    {
      v58 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v59 = v82;
      v58(v82, v23, v53);
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v28, v59, v53);
      KeyPath = swift_getKeyPath(&unk_1000EE8B0);
      v61 = (uint64_t)v87;
      v62 = ((uint64_t (*)(char *, char *, uint64_t))v58)(v87, v28, v53);
      v63 = v61 + *(int *)(v85 + 20);
      *(_QWORD *)v63 = KeyPath;
      *(_BYTE *)(v63 + 8) = 0;
      LOBYTE(KeyPath) = static Edge.Set.all.getter(v62);
      v64 = (uint64_t)v15;
      v65 = v88;
      sub_10000C484(v61, v88, type metadata accessor for NearbySharingInteractionFailureView);
      v66 = v65 + *(int *)(v84 + 36);
      *(_BYTE *)v66 = KeyPath;
      *(_OWORD *)(v66 + 8) = 0u;
      *(_OWORD *)(v66 + 24) = 0u;
      *(_BYTE *)(v66 + 40) = 1;
      v67 = sub_10000C4C8(v61, type metadata accessor for NearbySharingInteractionFailureView);
      v68 = static Color.black.getter(v67);
      v69 = static Edge.Set.all.getter(v68);
      v70 = v86;
      sub_10000CC18(v65, v86, &qword_100140D00);
      v71 = v90;
      v72 = v70 + *(int *)(v90 + 36);
      *(_QWORD *)v72 = v68;
      *(_BYTE *)(v72 + 8) = v69;
      sub_10000CC5C(v65, &qword_100140D00);
      sub_10000CBD4(v70, v64, &qword_100140D08);
      sub_10000CC18(v64, (uint64_t)v37, &qword_100140D08);
      swift_storeEnumTagMultiPayload(v37, v81, 1);
      v73 = sub_100008F88(&qword_100140D20);
      v74 = sub_1000C7AF0();
      v75 = sub_1000C7B94();
      v76 = (uint64_t)v89;
      _ConditionalContent<>.init(storage:)(v37, v73, v71, v74, v75);
      sub_10000CC5C(v64, &qword_100140D08);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v53);
      v77 = sub_100008F88(&qword_100140D18);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v76, 0, 1, v77);
      return sub_10000CBD4(v76, v91, &qword_100140CF8);
    }
  }
  else
  {
    v56 = (uint64_t)v23;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v23, 1, 1, v53);
  }
  sub_10000CC5C(v56, &qword_10013EF70);
  v78 = sub_100008F88(&qword_100140D18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v91, 1, 1, v78);
}

uint64_t sub_1000C58D8@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_1000C528C(*v1, a1);
}

uint64_t sub_1000C58E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[3];

  v50 = a1;
  v1 = sub_100008F88(&qword_100140E20);
  __chkstk_darwin(v1, v2);
  v4 = (uint64_t *)((char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Color.RGBColorSpace(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008F88(&qword_100140E28);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100008F88(&qword_100140E30);
  __chkstk_darwin(v49, v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100008F88(&qword_100140E40);
  v18 = swift_allocObject(v17, 56, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000EB2B0;
  v19 = enum case for Color.RGBColorSpace.sRGB(_:);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v20(v9, enum case for Color.RGBColorSpace.sRGB(_:), v5);
  *(_QWORD *)(v18 + 32) = Color.init(_:red:green:blue:opacity:)(v9, 0.325490196, 0.88627451, 0.8, 1.0);
  v20(v9, v19, v5);
  *(_QWORD *)(v18 + 40) = Color.init(_:red:green:blue:opacity:)(v9, 0.996078431, 0.674509804, 0.0352941176, 1.0);
  v20(v9, v19, v5);
  v21 = Color.init(_:red:green:blue:opacity:)(v9, 0.996078431, 0.0156862745, 0.529411765, 1.0);
  *(_QWORD *)(v18 + 48) = v21;
  *(_QWORD *)&v53[0] = v18;
  specialized Array._endMutation()(v21);
  v22 = Gradient.init(colors:)(*(_QWORD *)&v53[0]);
  v23 = static UnitPoint.top.getter();
  v25 = v24;
  v26 = static UnitPoint.bottom.getter();
  v28 = LinearGradient.init(gradient:startPoint:endPoint:)(v51, v22, v23, v25, v26, v27);
  v29 = static Alignment.center.getter(v28);
  v31 = v30;
  v32 = (uint64_t *)((char *)v4 + *(int *)(v1 + 36));
  *v32 = static Alignment.center.getter(v29);
  v32[1] = v33;
  v34 = sub_100008F88(&qword_100140E48);
  __asm { FMOV            V0.2D, #6.0 }
  sub_1000C5C5C((uint64_t)v32 + *(int *)(v34 + 44), _Q0, 13.0);
  *v4 = v29;
  v4[1] = v31;
  sub_10000CC18((uint64_t)v4, (uint64_t)&v13[*(int *)(v10 + 36)], &qword_100140E20);
  v40 = v51[1];
  *(_OWORD *)v13 = v51[0];
  *((_OWORD *)v13 + 1) = v40;
  *((_QWORD *)v13 + 4) = v52;
  v41 = sub_10000CC5C((uint64_t)v4, &qword_100140E20);
  v42 = static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(v53, 0x4034000000000000, 0, 0x403B000000000000, 0, v42, v43);
  sub_10000CC18((uint64_t)v13, (uint64_t)v16, &qword_100140E28);
  v44 = &v16[*(int *)(v49 + 36)];
  v45 = v53[1];
  *(_OWORD *)v44 = v53[0];
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v53[2];
  sub_10000CC5C((uint64_t)v13, &qword_100140E28);
  v46 = v50;
  sub_10000CC18((uint64_t)v16, v50, &qword_100140E30);
  *(_WORD *)(v46 + *(int *)(sub_100008F88(&qword_100140E38) + 36)) = 0;
  return sub_10000CC5C((uint64_t)v16, &qword_100140E30);
}

uint64_t sub_1000C5C5C@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, double a3@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t);
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;

  v63 = a2;
  v70 = a1;
  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4, v5);
  v69 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67, v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88((uint64_t *)&unk_100140CC0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88((uint64_t *)&unk_100140760);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100008F88(&qword_10013C3D0);
  __chkstk_darwin(v64, v19);
  v21 = (uint64_t *)((char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22, v23);
  v68 = (uint64_t)&v63 - v24;
  v25 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v25, v26);
  v66 = (uint64_t)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v32 = (char *)&v63 + *(int *)(v31 + 20) - v30;
  v33 = (__n128 *)((char *)&v63 - v30);
  v65 = (uint64_t)&v63 - v30;
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v32, v34, v35);
  *v33 = v63;
  v36 = Image.init(systemName:)(0x662E6E6F73726570, 0xEB000000006C6C69);
  static SymbolRenderingMode.monochrome.getter(v37);
  v38 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v18, 0, 1, v38);
  v39 = Image.symbolRenderingMode(_:)(v18, v36);
  swift_release(v36);
  v40 = sub_10000CC5C((uint64_t)v18, (uint64_t *)&unk_100140760);
  v41 = static Font.Weight.regular.getter(v40);
  v42 = enum case for Font.Design.default(_:);
  v43 = type metadata accessor for Font.Design(0);
  v44 = *(_QWORD *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 104))(v14, v42, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v14, 0, 1, v43);
  v45 = static Font.system(size:weight:design:)(*(_QWORD *)&v41, 0, v14, a3);
  sub_10000CC5C((uint64_t)v14, (uint64_t *)&unk_100140CC0);
  KeyPath = swift_getKeyPath(&unk_1000EEDC0);
  v48 = static Color.white.getter(v47);
  v49 = swift_getKeyPath(&unk_1000EEB90);
  v50 = v7;
  v51 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v52 = v10;
  v53 = v67;
  v51(v10, enum case for BlendMode.destinationOut(_:), v67);
  v54 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v55 = v50;
  v56 = (uint64_t)v69;
  v54(v69, v52, v53);
  sub_10000C484(v56, (uint64_t)v21 + *(int *)(v64 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v21 = v39;
  v21[1] = KeyPath;
  v21[2] = v45;
  v21[3] = v49;
  v21[4] = v48;
  swift_retain(v39);
  swift_retain(KeyPath);
  swift_retain(v45);
  swift_retain(v49);
  swift_retain(v48);
  sub_10000C4C8(v56, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v53);
  swift_release(v48);
  swift_release(v49);
  swift_release(v45);
  swift_release(KeyPath);
  swift_release(v39);
  v57 = v68;
  sub_10000CBD4((uint64_t)v21, v68, &qword_10013C3D0);
  v59 = v65;
  v58 = v66;
  sub_10000C484(v65, v66, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10000CC18(v57, (uint64_t)v21, &qword_10013C3D0);
  v60 = v70;
  sub_10000C484(v58, v70, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v61 = sub_100008F88(&qword_100140E60);
  sub_10000CC18((uint64_t)v21, v60 + *(int *)(v61 + 48), &qword_10013C3D0);
  sub_10000CC5C(v57, &qword_10013C3D0);
  sub_10000C4C8(v59, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10000CC5C((uint64_t)v21, &qword_10013C3D0);
  return sub_10000C4C8(v58, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
}

double sub_1000C6130@<D0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[4];
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned __int8 v56;
  __int128 v57;

  KeyPath = swift_getKeyPath(&unk_1000EEC20);
  v5 = swift_getKeyPath(&unk_1000EEC48);
  v6 = a1;
  static Published.subscript.getter(&v45, v6, KeyPath, v5);

  swift_release(KeyPath);
  swift_release(v5);
  v7 = v50;
  if (v50 <= 0xFFFFFFFEFFFFFFFFLL)
  {
    v8 = v45;
    v9 = v46;
    v41 = *((_QWORD *)&v47 + 1);
    v42 = v47;
    v39 = *((_QWORD *)&v48 + 1);
    v40 = v48;
    v10 = v52;
    v37 = v51;
    v38 = v49;
    if ((v50 & 0x8000000000000000) != 0)
    {
      v43[0] = v46;
      *(_QWORD *)&v43[1] = 0x4038000000000000;
      memset((char *)&v43[1] + 8, 0, 40);
      LOBYTE(v44) = 1;
      swift_bridgeObjectRetain_n(*((_QWORD *)&v46 + 1), 2);
      v25 = sub_100008F88((uint64_t *)&unk_100140700);
      v26 = sub_10000C20C((unint64_t *)&qword_100140CE0, (uint64_t *)&unk_100140700, (void (*)(void))sub_100056190);
      v27 = sub_10005718C();
      _ConditionalContent<>.init(storage:)(v43, v25, &type metadata for DeviceAvatarView, v26, v27);
      sub_10004BC38(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v42, v41, v40, v39, v38, v7, v37, v10);
      v24 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)&v9 + 1);
    }
    else
    {
      v11 = swift_bridgeObjectRetain(*((_QWORD *)&v45 + 1));
      v12 = static Alignment.center.getter(v11);
      _FrameLayout.init(width:height:alignment:)(&v53, 0x4038000000000000, 0, 0x4038000000000000, 0, v12, v13);
      v43[0] = v8;
      *(_QWORD *)&v43[1] = v53;
      *((_QWORD *)&v43[1] + 1) = v54;
      *(_QWORD *)&v43[2] = v55;
      *((_QWORD *)&v43[2] + 1) = v56;
      v43[3] = v57;
      LOBYTE(v44) = 0;
      swift_bridgeObjectRetain(*((_QWORD *)&v8 + 1));
      v14 = sub_100008F88((uint64_t *)&unk_100140700);
      v15 = sub_10000C20C((unint64_t *)&qword_100140CE0, (uint64_t *)&unk_100140700, (void (*)(void))sub_100056190);
      v16 = sub_10005718C();
      _ConditionalContent<>.init(storage:)(v43, v14, &type metadata for DeviceAvatarView, v15, v16);
      sub_10004BC38(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v42, v41, v40, v39, v38, v7, v37, v10);
      v24 = (_TtC9AirDropUI33AirDropTransferSessionsController *)*((_QWORD *)&v8 + 1);
    }
    swift_bridgeObjectRelease(v24, v17, v18, v19, v20, v21, v22, v23);
    v43[0] = v45;
    v43[1] = v46;
    v43[2] = v47;
    v43[3] = v48;
    v44 = v49;
  }
  else
  {
    memset(v43, 0, sizeof(v43));
    v44 = 256;
  }
  v28 = sub_100008F88(&qword_100140CD0);
  v29 = sub_1000C7A20();
  v30 = sub_1000C7AAC();
  _ConditionalContent<>.init(storage:)(v43, v28, &type metadata for AirDropIcon, v29, v30);
  result = *(double *)&v45;
  v32 = v46;
  v33 = v47;
  v34 = v48;
  v35 = v49;
  v36 = BYTE1(v49);
  *(_OWORD *)a2 = v45;
  *(_OWORD *)(a2 + 16) = v32;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = v34;
  *(_BYTE *)(a2 + 64) = v35;
  *(_BYTE *)(a2 + 65) = v36;
  return result;
}

double sub_1000C644C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C6130(*(void **)(v1 + 8), a1);
}

uint64_t sub_1000C6454@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;

  v63 = a2;
  v3 = sub_100008F88(&qword_100140B40);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NearbySharingInteractionFailureView(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NearbySharingInteractionAttributes(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100008F88(&qword_100140B48);
  __chkstk_darwin(v15, v16);
  v18 = (uint64_t *)((char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_100008F88(&qword_10013EF70);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v28);
  v32 = (char *)&v60 - v30;
  if (a1)
  {
    v33 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v34 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    *v18 = ObservedObject.init(wrappedValue:)(a1, v33, v34);
    v18[1] = v35;
    swift_storeEnumTagMultiPayload(v18, v15, 0);
    v36 = sub_100020CC0();
    v37 = sub_100008694(&qword_10013C148, type metadata accessor for NearbySharingInteractionFailureView, (uint64_t)&unk_1000EEAF0);
    v38 = v63;
    _ConditionalContent<>.init(storage:)(v18, &type metadata for NearbySharingInteractionBannerContent, v7, v36, v37);
    v39 = sub_100008F88(&qword_10013C138);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  v61 = v15;
  v62 = v6;
  if (qword_10013ABF0 != -1)
  {
    v57 = (char *)&v60 - v30;
    v58 = v29;
    v59 = v31;
    swift_once(&qword_10013ABF0, sub_100028C8C);
    v32 = v57;
    v31 = v59;
    v29 = v58;
  }
  v41 = *(_QWORD *)(*(_QWORD *)(qword_100147DA0
                              + OBJC_IVAR____TtC9AirDropUI33AirDropTransferSessionsController_nearbySharingInteractionCoordinator)
                  + OBJC_IVAR____TtC9AirDropUI35NearbySharingInteractionCoordinator_failureActivity);
  if (v41)
  {
    v42 = (uint64_t)v10;
    v60 = v7;
    v43 = v32;
    v44 = v29;
    v45 = v31;
    v46 = swift_retain(v41);
    Activity.attributes.getter(v46);
    swift_release(v41);
    sub_10000CC18((uint64_t)&v14[*(int *)(v11 + 20)], (uint64_t)v22, &qword_10013EF70);
    sub_10000C4C8((uint64_t)v14, type metadata accessor for NearbySharingInteractionAttributes);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v22, 1, v44) != 1)
    {
      v47 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v48 = v43;
      v47(v43, v22, v44);
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v27, v43, v44);
      KeyPath = swift_getKeyPath(&unk_1000EE8B0);
      v47((char *)v42, v27, v44);
      v50 = v60;
      v51 = v42 + *(int *)(v60 + 20);
      *(_QWORD *)v51 = KeyPath;
      *(_BYTE *)(v51 + 8) = 0;
      sub_10000C484(v42, (uint64_t)v18, type metadata accessor for NearbySharingInteractionFailureView);
      swift_storeEnumTagMultiPayload(v18, v61, 1);
      v52 = sub_100020CC0();
      v53 = sub_100008694(&qword_10013C148, type metadata accessor for NearbySharingInteractionFailureView, (uint64_t)&unk_1000EEAF0);
      v54 = (uint64_t)v62;
      _ConditionalContent<>.init(storage:)(v18, &type metadata for NearbySharingInteractionBannerContent, v50, v52, v53);
      sub_10000C4C8(v42, type metadata accessor for NearbySharingInteractionFailureView);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
      v55 = sub_100008F88(&qword_10013C138);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 0, 1, v55);
      return sub_10000CBD4(v54, v63, &qword_100140B40);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 56))(v22, 1, 1);
  }
  sub_10000CC5C((uint64_t)v22, &qword_10013EF70);
  v56 = sub_100008F88(&qword_10013C138);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v63, 1, 1, v56);
}

uint64_t type metadata accessor for NearbySharingInteractionFailureView(uint64_t a1)
{
  return sub_1000138D0(a1, qword_100140BB0, (uint64_t)&nominal type descriptor for NearbySharingInteractionFailureView);
}

uint64_t sub_1000C6934@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = sub_100008F88(&qword_100140B40);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = type metadata accessor for SystemApertureLayoutState(0);
  v9 = sub_100008694((unint64_t *)&qword_10013C120, type metadata accessor for SystemApertureLayoutState, (uint64_t)&unk_1000EA18C);
  v10 = EnvironmentObject.init()(v8, v9);
  v12 = v11;
  sub_1000C6454(v7, (uint64_t)v6);
  v13 = sub_1000B7980(&qword_100140B50, &qword_100140B40, (void (*)(void))sub_100020C3C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v14 = AnyView.init<A>(_:)(v6, v3, v13);
  v15 = 0;
  if (v7)
  {
    v16 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v17 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v15 = ObservedObject.init(wrappedValue:)(v7, v16, v17);
  }
  else
  {
    v18 = 0;
  }
  v36 = v15;
  v37 = v18;
  v19 = sub_100008F88(&qword_10013C150);
  v20 = sub_1000B7980(&qword_10013C158, &qword_10013C150, (void (*)(void))sub_100020D68, (uint64_t)&protocol conformance descriptor for <A> A?);
  v21 = AnyView.init<A>(_:)(&v36, v19, v20);
  v22 = AnyView.init<A>(_:)(v21, &type metadata for EmptyView, &protocol witness table for EmptyView);
  v23 = 0;
  if (v7)
  {
    v35 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v24 = v22;
    v25 = v21;
    v26 = v14;
    v27 = v12;
    v28 = v10;
    v29 = sub_100008694(&qword_10013D2C0, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_1000EAF44);
    v30 = v7;
    v31 = v29;
    v10 = v28;
    v12 = v27;
    v14 = v26;
    v21 = v25;
    v22 = v24;
    v23 = ObservedObject.init(wrappedValue:)(v30, v35, v31);
  }
  else
  {
    v32 = 0;
  }
  v36 = v23;
  v37 = v32;
  result = AnyView.init<A>(_:)(&v36, v19, v20);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = result;
  *(_WORD *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 4;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionStatusIndicator()
{
  return &type metadata for NearbySharingInteractionStatusIndicator;
}

uint64_t *sub_1000C6BA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    LOBYTE(v6) = v10[8];
    sub_1000254D0(*(_QWORD *)v10, v6);
    *(_QWORD *)v9 = v11;
    v9[8] = v6;
  }
  return a1;
}

uint64_t sub_1000C6C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_10002551C(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000C6C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  LOBYTE(a2) = *(_BYTE *)(v9 + 8);
  sub_1000254D0(*(_QWORD *)v9, a2);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = a2;
  return a1;
}

uint64_t sub_1000C6D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  LOBYTE(a2) = *(_BYTE *)(v9 + 8);
  sub_1000254D0(*(_QWORD *)v9, a2);
  v11 = *(_QWORD *)v8;
  v12 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = a2;
  sub_10002551C(v11, v12);
  return a1;
}

uint64_t sub_1000C6D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t sub_1000C6E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  v11 = *(_QWORD *)v8;
  v12 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = (_BYTE)v9;
  sub_10002551C(v11, v12);
  return a1;
}

uint64_t sub_1000C6E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6E84);
}

uint64_t sub_1000C6E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_1000C6F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6F0C);
}

uint64_t sub_1000C6F0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t sub_1000C6F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B9700(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType, (uint64_t)"\t");
}

ValueMetadata *type metadata accessor for NearbySharingInteractionBannerContent()
{
  return &type metadata for NearbySharingInteractionBannerContent;
}

_QWORD *initializeWithTake for NearbySharingInteractionSystemApertureElement(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionSystemApertureElement()
{
  return &type metadata for NearbySharingInteractionSystemApertureElement;
}

void **initializeBufferWithCopyOfBuffer for NearbySharingInteractionBannerView(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for NearbySharingInteractionBannerView(id *a1)
{

}

void **assignWithCopy for NearbySharingInteractionBannerView(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for NearbySharingInteractionBannerView(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s9AirDropUI45NearbySharingInteractionSystemApertureElementVwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s9AirDropUI45NearbySharingInteractionSystemApertureElementVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionBannerView()
{
  return &type metadata for NearbySharingInteractionBannerView;
}

uint64_t sub_1000C7124(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114BA0, 1);
}

unint64_t sub_1000C7138(uint64_t a1)
{
  unint64_t result;

  result = sub_1000C715C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C715C()
{
  unint64_t result;

  result = qword_100140BF0;
  if (!qword_100140BF0)
  {
    result = swift_getWitnessTable(&unk_1000EEA34, &type metadata for NearbySharingInteractionSystemApertureElement);
    atomic_store(result, (unint64_t *)&qword_100140BF0);
  }
  return result;
}

uint64_t sub_1000C71A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114B78, 1);
}

uint64_t sub_1000C71B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114B50, 1);
}

uint64_t sub_1000C71C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114B28, 1);
}

unint64_t sub_1000C71D0()
{
  unint64_t result;

  result = qword_100140C08;
  if (!qword_100140C08)
  {
    result = swift_getWitnessTable(&unk_1000EB81C, &type metadata for JindoBlurEffectModifier);
    atomic_store(result, (unint64_t *)&qword_100140C08);
  }
  return result;
}

uint64_t sub_1000C7214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 152);
  v4 = *(unsigned int *)(a1 + 144) | ((unint64_t)*(unsigned __int8 *)(a1 + 148) << 32);
  sub_1000C7290(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4,
    SBYTE4(v4),
    SHIWORD(v4),
    *(_BYTE *)(a1 + 149));
  swift_retain(v2);
  return a1;
}

uint64_t sub_1000C7290(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,__int16 a21,char a22)
{
  if ((a22 & 1) == 0)
    return sub_1000C72E4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20 & 1);
  return result;
}

uint64_t sub_1000C72E4(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  id v24;

  if ((a20 & 1) != 0)
  {
    sub_1000254D0(result, a2 & 1);
    swift_retain(a6);
    v24 = a4;
    return sub_10004BD1C(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t sub_1000C73D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 152);
  v4 = *(unsigned int *)(a1 + 144) | ((unint64_t)*(unsigned __int8 *)(a1 + 148) << 32);
  sub_1000C7454(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4,
    SBYTE4(v4),
    SHIWORD(v4),
    *(_BYTE *)(a1 + 149));
  swift_release(v2);
  return a1;
}

uint64_t sub_1000C7454(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,__int16 a21,char a22)
{
  if ((a22 & 1) == 0)
    return sub_1000C74A8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20 & 1);
  return result;
}

uint64_t sub_1000C74A8(uint64_t result, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  if ((a20 & 1) != 0)
  {
    sub_10002551C(result, a2 & 1);

    swift_release(a6);
    return sub_10004BC68(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t sub_1000C75A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C75C4()
{
  uint64_t v0;

  sub_1000C5168(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000C75CC(uint64_t result)
{
  *(_BYTE *)(result + 149) = 1;
  return result;
}

unint64_t sub_1000C75D8()
{
  unint64_t result;

  result = qword_100140C30;
  if (!qword_100140C30)
  {
    result = swift_getWitnessTable(&unk_1000EED6C, &type metadata for NearbyInteractionConnectionView);
    atomic_store(result, (unint64_t *)&qword_100140C30);
  }
  return result;
}

unint64_t sub_1000C761C()
{
  unint64_t result;

  result = qword_100140C38;
  if (!qword_100140C38)
  {
    result = swift_getWitnessTable(&unk_1000EED1C, &type metadata for NearbySharingInteractionContactView);
    atomic_store(result, (unint64_t *)&qword_100140C38);
  }
  return result;
}

uint64_t sub_1000C7660(uint64_t result)
{
  *(_BYTE *)(result + 148) = 1;
  return result;
}

uint64_t sub_1000C766C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v12 = *(_OWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  sub_1000254D0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_retain(v3);
  v10 = v2;
  sub_10004BD1C(v16, v15, v14, v13, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v8, v9);
  return a1;
}

uint64_t sub_1000C772C(uint64_t result)
{
  *(_BYTE *)(result + 149) = 0;
  return result;
}

uint64_t sub_1000C7734(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  sub_10002551C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));

  swift_release(v3);
  sub_10004BC68(v15, v14, v13, v12, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9);
  return a1;
}

uint64_t sub_1000C77F4(uint64_t result)
{
  *(_BYTE *)(result + 148) = 0;
  return result;
}

uint64_t sub_1000C780C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_1000C782C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_1000C784C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_100008F88((uint64_t *)&unk_100140760);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000CC18(a1, (uint64_t)v5, (uint64_t *)&unk_100140760);
  return EnvironmentValues.symbolRenderingMode.setter(v5);
}

uint64_t sub_1000C78D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_BYTE *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 192);
  v7 = *(_QWORD *)(a1 + 320);
  v8 = *(_BYTE *)(a1 + 328);
  v9 = *(_QWORD *)(a1 + 336);
  sub_1000452A8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_1000452A8(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_1000254D0(v7, v8);
  swift_retain(v9);
  return a1;
}

uint64_t sub_1000C7974(uint64_t a1)
{
  _TtC9AirDropUI33AirDropTransferSessionsController *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v2 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_BYTE *)(a1 + 184);
  v6 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)(a1 + 192);
  v7 = *(_QWORD *)(a1 + 320);
  v8 = *(_BYTE *)(a1 + 328);
  v9 = *(_QWORD *)(a1 + 336);
  sub_100044F90(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2, v10, v11, v12, v13, v14, v15, v16);
  sub_100044F90(v3, v4, v5);
  swift_bridgeObjectRelease(v6, v17, v18, v19, v20, v21, v22, v23);
  sub_10002551C(v7, v8);
  swift_release(v9);
  return a1;
}

unint64_t sub_1000C7A20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140CD8;
  if (!qword_100140CD8)
  {
    v1 = sub_10000950C(&qword_100140CD0);
    sub_10000C20C((unint64_t *)&qword_100140CE0, (uint64_t *)&unk_100140700, (void (*)(void))sub_100056190);
    sub_10005718C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140CD8);
  }
  return result;
}

unint64_t sub_1000C7AAC()
{
  unint64_t result;

  result = qword_100140CF0;
  if (!qword_100140CF0)
  {
    result = swift_getWitnessTable(&unk_1000EECCC, &type metadata for AirDropIcon);
    atomic_store(result, (unint64_t *)&qword_100140CF0);
  }
  return result;
}

unint64_t sub_1000C7AF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D28;
  if (!qword_100140D28)
  {
    v1 = sub_10000950C(&qword_100140D20);
    sub_10000C20C(&qword_100140D30, &qword_100140D38, (void (*)(void))sub_100020CC0);
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D28);
  }
  return result;
}

unint64_t sub_1000C7B94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D40;
  if (!qword_100140D40)
  {
    v1 = sub_10000950C(&qword_100140D08);
    sub_1000C7C18();
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D40);
  }
  return result;
}

unint64_t sub_1000C7C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D48;
  if (!qword_100140D48)
  {
    v1 = sub_10000950C(&qword_100140D00);
    sub_100008694(&qword_10013C148, type metadata accessor for NearbySharingInteractionFailureView, (uint64_t)&unk_1000EEAF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D48);
  }
  return result;
}

uint64_t destroy for NearbySharingInteractionContactView(uint64_t a1)
{
  sub_10002551C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));

  swift_release(*(_QWORD *)(a1 + 40));
  return sub_10004BC68(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
}

uint64_t initializeWithCopy for NearbySharingInteractionContactView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000254D0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = v7;
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a2 + 136);
  v19 = *(_DWORD *)(a2 + 144);
  v16 = v6;
  swift_retain(v8);
  sub_10004BD1C(v22, v21, v9, v10, v11, v12, v20, v23, v18, v13, v14, v15);
  *(_QWORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v23;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = v15;
  *(_DWORD *)(a1 + 144) = v19;
  return a1;
}

uint64_t assignWithCopy for NearbySharingInteractionContactView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1000254D0(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10002551C(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 + 16);
  v8 = *(void **)(v2 + 24);
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v10 = v8;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_retain(v12);
  swift_release(v11);
  v13 = *(_QWORD *)(v2 + 48);
  v14 = *(_QWORD *)(v2 + 56);
  v15 = *(_QWORD *)(v2 + 64);
  v16 = *(_QWORD *)(v2 + 72);
  v17 = *(_QWORD *)(v2 + 80);
  v18 = *(_QWORD *)(v2 + 88);
  v19 = *(_QWORD *)(v2 + 96);
  v20 = *(_QWORD *)(v2 + 104);
  v33 = *(_QWORD *)(v2 + 112);
  v34 = *(_QWORD *)(v2 + 120);
  v35 = *(_QWORD *)(v2 + 128);
  v36 = *(_QWORD *)(v2 + 136);
  LODWORD(v2) = *(_DWORD *)(v2 + 144);
  sub_10004BD1C(v13, v14, v15, v16, v17, v18, v19, v20, v33, v34, v35, v36);
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  v26 = *(_QWORD *)(a1 + 88);
  v27 = *(_QWORD *)(a1 + 96);
  v28 = *(_QWORD *)(a1 + 104);
  v29 = *(_OWORD *)(a1 + 112);
  v30 = *(_QWORD *)(a1 + 128);
  v31 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = v34;
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 136) = v36;
  *(_DWORD *)(a1 + 144) = v2;
  sub_10004BC68(v21, v22, v23, v24, v25, v26, v27, v28, v29, *((uint64_t *)&v29 + 1), v30, v31);
  return a1;
}

__n128 initializeWithTake for NearbySharingInteractionContactView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NearbySharingInteractionContactView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10002551C(v6, v7);
  v8 = a2[3];
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;

  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_release(v10);
  v11 = *((_DWORD *)a2 + 36);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_OWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 136);
  v23 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v23;
  v24 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v24;
  v25 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 128) = v25;
  *(_DWORD *)(a1 + 144) = v11;
  sub_10004BC68(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionContactView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 148))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionContactView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 148) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 148) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionContactView()
{
  return &type metadata for NearbySharingInteractionContactView;
}

ValueMetadata *type metadata accessor for NearbyInteractionConnectionView()
{
  return &type metadata for NearbyInteractionConnectionView;
}

ValueMetadata *type metadata accessor for AirDropIcon()
{
  return &type metadata for AirDropIcon;
}

unint64_t sub_1000C8170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D50;
  if (!qword_100140D50)
  {
    v1 = sub_10000950C(&qword_100140C10);
    sub_1000C81DC();
    sub_1000C8390();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D50);
  }
  return result;
}

unint64_t sub_1000C81DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D58;
  if (!qword_100140D58)
  {
    v1 = sub_10000950C(&qword_100140C00);
    sub_1000B7980(&qword_100140D60, &qword_100140D68, (void (*)(void))sub_1000C8280, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_10000CB94(&qword_100140DA0, &qword_10013FD98, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D58);
  }
  return result;
}

unint64_t sub_1000C8280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D70;
  if (!qword_100140D70)
  {
    v1 = sub_10000950C(&qword_100140D78);
    sub_1000C8304();
    sub_10000CB94((unint64_t *)&unk_100140D90, &qword_10013FDE0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D70);
  }
  return result;
}

unint64_t sub_1000C8304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140D80;
  if (!qword_100140D80)
  {
    v1 = sub_10000950C(&qword_100140D88);
    sub_10000C9D0(&qword_100140C28, &qword_100140C20, (void (*)(void))sub_1000C75D8, (void (*)(void))sub_1000C761C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140D80);
  }
  return result;
}

unint64_t sub_1000C8390()
{
  unint64_t result;

  result = qword_100140DA8;
  if (!qword_100140DA8)
  {
    result = swift_getWitnessTable(&unk_1000EA2FC, &type metadata for SystemApertureDismissalModifier);
    atomic_store(result, (unint64_t *)&qword_100140DA8);
  }
  return result;
}

unint64_t sub_1000C83D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140DB0;
  if (!qword_100140DB0)
  {
    v1 = sub_10000950C((uint64_t *)&unk_100140C70);
    sub_1000C845C();
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140DB0);
  }
  return result;
}

unint64_t sub_1000C845C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140DB8;
  if (!qword_100140DB8)
  {
    v1 = sub_10000950C(&qword_100140C58);
    sub_1000C8500(&qword_100140DC0, &qword_100140C50, &qword_100140DC8, &qword_100140C48);
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140DB8);
  }
  return result;
}

uint64_t sub_1000C8500(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000950C(a2);
    sub_10000CB94(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C8580()
{
  return sub_10000C9D0(&qword_100140DD0, &qword_100140DD8, (void (*)(void))sub_1000C7A20, (void (*)(void))sub_1000C7AAC);
}

unint64_t sub_1000C85B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140DE0;
  if (!qword_100140DE0)
  {
    v1 = sub_10000950C(&qword_100140CF8);
    sub_10000C9D0(&qword_100140DE8, &qword_100140D18, (void (*)(void))sub_1000C7AF0, (void (*)(void))sub_1000C7B94);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100140DE0);
  }
  return result;
}

uint64_t sub_1000C863C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114C40, 1);
}

uint64_t sub_1000C864C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114C18, 1);
}

uint64_t sub_1000C865C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114BF0, 1);
}

uint64_t sub_1000C8678()
{
  uint64_t v0;

  return sub_1000C320C(v0 + 16);
}

unint64_t sub_1000C8680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140E98;
  if (!qword_100140E98)
  {
    v1 = sub_10000950C(&qword_100140E80);
    sub_1000C8704();
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140E98);
  }
  return result;
}

unint64_t sub_1000C8704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100140EA0;
  if (!qword_100140EA0)
  {
    v1 = sub_10000950C(&qword_100140E78);
    sub_1000C8500(&qword_100140EA8, &qword_100140E70, (unint64_t *)&unk_100140EB0, &qword_100140E68);
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100140EA0);
  }
  return result;
}

uint64_t sub_1000C87AC()
{
  uint64_t v0;

  sub_10002551C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  sub_10004BC68(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 164, 7);
}

void sub_1000C8818()
{
  uint64_t v0;

  sub_1000C3284(v0 + 16);
}

uint64_t sub_1000C8830(uint64_t a1)
{

  return a1;
}

uint64_t sub_1000C885C()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_10002551C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  sub_10004BC68(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_100009070((_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 208), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocObject(v0, 216, 7);
}

uint64_t sub_1000C88D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000C3028(a1, v2 + 16, v2 + 168, a2);
}

uint64_t type metadata accessor for BannerShareableContentActionButton(uint64_t a1)
{
  return sub_1000138D0(a1, qword_100141030, (uint64_t)&nominal type descriptor for BannerShareableContentActionButton);
}

uint64_t sub_1000C88F8()
{
  uint64_t v0;
  SEL v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  sub_10002551C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  sub_10004BC68(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_100009070((_QWORD *)(v0 + 168));
  sub_100009070((_QWORD *)(v0 + 208));
  swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)(v0 + 248), v1, v2, v3, v4, v5, v6, v7);
  return swift_deallocObject(v0, 256, 7);
}

uint64_t sub_1000C897C()
{
  uint64_t v0;

  return sub_1000C3190(v0 + 16, (_QWORD *)(v0 + 168), v0 + 208);
}

uint64_t sub_1000C898C(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 8);
  return a1;
}

uint64_t *sub_1000C89B4(uint64_t *a1)
{
  void *v2;
  id v3;

  v2 = (void *)a1[13];
  sub_10004BD1C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  v3 = v2;
  return a1;
}

uint64_t *sub_1000C8A14(uint64_t *a1)
{
  void *v2;

  v2 = (void *)a1[13];
  sub_10004BC68(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);

  return a1;
}

uint64_t sub_1000C8A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C8A80);
}

uint64_t sub_1000C8A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000C8AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C8B08);
}

uint64_t sub_1000C8B08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

unint64_t sub_1000C8B84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141068;
  if (!qword_100141068)
  {
    v1 = sub_10000950C(&qword_100140E18);
    sub_10000CB94(&qword_100141070, &qword_100140E00, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141068);
  }
  return result;
}

unint64_t sub_1000C8C24()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100141078;
  if (!qword_100141078)
  {
    v1 = sub_10000950C(&qword_100140F20);
    v2[0] = sub_10000950C(&qword_100140E80);
    v2[1] = sub_1000C8680();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_1000C8CB8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141078);
  }
  return result;
}

unint64_t sub_1000C8CB8()
{
  unint64_t result;

  result = qword_100141080;
  if (!qword_100141080)
  {
    result = swift_getWitnessTable(&unk_1000E90C8, &type metadata for RemoteAlertViewModifier);
    atomic_store(result, (unint64_t *)&qword_100141080);
  }
  return result;
}

unint64_t sub_1000C8D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141088;
  if (!qword_100141088)
  {
    v1 = sub_10000950C(&qword_100140E38);
    sub_10000C20C(&qword_100141090, &qword_100140E30, (void (*)(void))sub_1000C8DA4);
    sub_10000CB94((unint64_t *)&unk_1001410B0, &qword_10013C368, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141088);
  }
  return result;
}

unint64_t sub_1000C8DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141098;
  if (!qword_100141098)
  {
    v1 = sub_10000950C(&qword_100140E28);
    sub_1000C8E28();
    sub_10000CB94(&qword_1001410A8, &qword_100140E20, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141098);
  }
  return result;
}

unint64_t sub_1000C8E28()
{
  unint64_t result;

  result = qword_1001410A0;
  if (!qword_1001410A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_1001410A0);
  }
  return result;
}

uint64_t sub_1000C8E6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100114C68, 1);
}

uint64_t sub_1000C8E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for BannerShareableContentActionButton(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000C8F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BannerShareableContentActionButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for BannerShareableContentActionButton(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(void))(v0 + *(int *)(v1 + 20) + ((v2 + 16) & ~v2)))();
}

uint64_t sub_1000C8F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C0C0C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000C8F98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001410C8;
  if (!qword_1001410C8)
  {
    v1 = sub_10000950C(&qword_1001410C0);
    sub_10000C20C(&qword_1001410D0, &qword_1001410D8, (void (*)(void))sub_1000C903C);
    sub_10000CB94((unint64_t *)&unk_100140410, &qword_10013B638, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001410C8);
  }
  return result;
}

unint64_t sub_1000C903C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001410E0;
  if (!qword_1001410E0)
  {
    v1 = sub_10000950C(&qword_1001410E8);
    sub_1000C90C0();
    sub_10000CB94(&qword_100141130, &qword_100141138, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001410E0);
  }
  return result;
}

unint64_t sub_1000C90C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001410F0;
  if (!qword_1001410F0)
  {
    v1 = sub_10000950C(&qword_1001410F8);
    sub_1000C9144();
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001410F0);
  }
  return result;
}

unint64_t sub_1000C9144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141100;
  if (!qword_100141100)
  {
    v1 = sub_10000950C(&qword_100141108);
    sub_10000C20C((unint64_t *)&qword_100141110, (uint64_t *)&unk_1001407E0, (void (*)(void))sub_1000C91E8);
    sub_10000CB94((unint64_t *)&unk_1001410B0, &qword_10013C368, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141100);
  }
  return result;
}

unint64_t sub_1000C91E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141120;
  if (!qword_100141120)
  {
    v1 = sub_10000950C(&qword_1001407F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141120);
  }
  return result;
}

uint64_t sub_1000C924C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000C9288(uint64_t a1)
{
  sub_1000452A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_1000C92B8(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_1000C92E0()
{
  return sub_10000CB94(&qword_100141180, &qword_100141188, (uint64_t)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_1000C9328()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded);
}

void sub_1000C933C()
{
  uint64_t v0;
  char v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  _OWORD v14[2];
  id v15[4];

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) == 1
    && *(_QWORD *)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage) != 0;
  sub_1000C9C98(v1);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "publishedObjectWithName:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_10007A204((uint64_t)v14, (uint64_t)v15);
  if (v15[3])
  {
    v5 = sub_100018D44(0, (unint64_t *)&unk_1001411E0, CALayer_ptr);
    if ((swift_dynamicCast(&v13, v15, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v6 = v13;
      v7 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage);
      if (v7 && (v8 = objc_msgSend(v7, "CGImage")) != 0)
      {
        v15[0] = v8;
        type metadata accessor for CGImage(0);
        v10 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v9);

      }
      else
      {
        v10 = 0;
      }
      objc_msgSend(v6, "setContents:", v10);
      swift_unknownObjectRelease(v10);
      objc_msgSend(v6, "setContentsGravity:", kCAGravityResizeAspect);
      v11 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
      v12 = objc_msgSend(v11, "CGColor");

      objc_msgSend(v6, "setBackgroundColor:", v12);
    }
  }
  else
  {
    sub_10005FB4C((uint64_t)v15);
  }
}

void sub_1000C95A8(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t ObjCClassFromMetadata;
  void *v22;
  char *v23;
  id v24;
  id v25;
  id v26;
  NSString v27;
  id v28;
  NSString v29;
  char *v30;
  id v31;
  id v32;
  id v33;
  _TtC9AirDropUI33AirDropTransferSessionsController *v34;
  char *v35;
  Class isa;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  void *v47;
  char *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  NSString v55;
  id v56;
  void *v57;
  uint64_t v58;
  id v59;
  char *v60;
  uint64_t v61;
  _TtC9AirDropUI33AirDropTransferSessionsController *v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  NSString v64;
  SEL v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74[2];
  _OWORD v75[2];
  _QWORD v76[4];
  objc_super v77;

  v73 = a1;
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress] = 0;
  v16 = &v4[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState];
  v17 = enum case for SFAirDropReceive.Transfer.State.created(_:);
  v19 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v16, v17, v19);
  *(_QWORD *)&v4[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage] = 0;
  v20 = (objc_class *)type metadata accessor for AirDropSystemApertureIconView(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v20);
  v22 = (void *)objc_opt_self(NSBundle);
  v23 = v4;
  v24 = objc_msgSend(v22, "bundleForClass:", ObjCClassFromMetadata);
  v25 = objc_allocWithZone((Class)BSUICAPackageView);
  v26 = v24;
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v25, "initWithPackageName:inBundle:", v27, v26);

  if (v28)
  {
    objc_msgSend(v28, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    if (qword_10013AD80 != -1)
      swift_once(&qword_10013AD80, sub_1000CAD5C);
    objc_msgSend(v28, "setFrame:", 0.0, 0.0, *(double *)&qword_100148078, *(double *)&qword_100148078);
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setState:", v29);

    *(_QWORD *)&v23[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView] = v28;
    v30 = &v23[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_overrideIntrinsicContentSize];
    if ((a4 & 1) != 0)
    {
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;
      v30[16] = 1;
    }
    else
    {
      *(_QWORD *)v30 = a3;
      *((_QWORD *)v30 + 1) = a3;
      v30[16] = 0;
    }
    v31 = v28;

    v77.receiver = v23;
    v77.super_class = v20;
    v32 = objc_msgSendSuper2(&v77, "init");
    objc_msgSend(v32, "addSubview:", v31);
    v33 = v32;
    v34 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_1000CA820(v31, a2, 0.0);

    sub_100018D44(0, &qword_10013C100, NSLayoutConstraint_ptr);
    v35 = (char *)v33;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v34, v37, v38, v39, v40, v41, v42, v43);
    objc_msgSend(v35, "addConstraints:", isa);

    if (qword_10013ABE0 != -1)
      swift_once(&qword_10013ABE0, sub_100023E74);
    v44 = qword_100147D90;
    KeyPath = swift_getKeyPath(&unk_1000EEF70);
    v46 = swift_getKeyPath(&unk_1000EEF98);
    static Published.subscript.getter(v76, v44, KeyPath, v46);
    swift_release(KeyPath);
    swift_release(v46);
    if (LOBYTE(v76[0]) == 1)
    {
      v47 = (void *)objc_opt_self(UIColor);
      v48 = v35;
      v49 = objc_msgSend(v47, "systemPinkColor");
      v50 = objc_msgSend(v49, "colorWithAlphaComponent:", 0.3);

      objc_msgSend(v48, "setBackgroundColor:", v50);
      v51 = v31;
      v52 = objc_msgSend(v47, "systemGreenColor");
      v53 = objc_msgSend(v52, "colorWithAlphaComponent:", 0.4);

      objc_msgSend(v51, "setBackgroundColor:", v53);
    }
    v54 = *(id *)&v35[OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView];
    v55 = String._bridgeToObjectiveC()();
    v56 = objc_msgSend(v54, "publishedObjectWithName:", v55);

    if (v56)
    {
      _bridgeAnyObjectToAny(_:)(v75);
      swift_unknownObjectRelease(v56);
    }
    else
    {
      memset(v75, 0, sizeof(v75));
    }
    v57 = v73;
    sub_10007A204((uint64_t)v75, (uint64_t)v76);
    if (v76[3])
    {
      v58 = sub_100018D44(0, (unint64_t *)&unk_1001411E0, CALayer_ptr);
      if ((swift_dynamicCast(v74, v76, (char *)&type metadata for Any + 8, v58, 6) & 1) != 0)
      {
        v59 = v74[0];
        objc_msgSend(v74[0], "setHidden:", 1);

      }
    }
    else
    {
      sub_10005FB4C((uint64_t)v76);
    }
    objc_msgSend(v35, "setClipsToBounds:", 0);
    v60 = v35;
    v61 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x80000001000F2C40);
    static Locale.current.getter(v61);
    String.init(localized:table:bundle:locale:comment:)(v15, 0, 0, 0, v11, 0, 0, 256);
    v63 = v62;
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v63, v65, v66, v67, v68, v69, v70, v71);
    objc_msgSend(v60, "setAccessibilityLabel:", v64);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000C9C98(char a1)
{
  uint64_t v1;
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "publishedObjectWithName:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10007A204((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    v6 = sub_100018D44(0, (unint64_t *)&unk_1001411E0, CALayer_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
    {
      v7 = v8;
      objc_msgSend(v8, "setHidden:", (a1 & 1) == 0);

    }
  }
  else
  {
    sub_10005FB4C((uint64_t)v10);
  }
}

void sub_1000C9DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t (**v16)();
  _TtC9AirDropUI33AirDropTransferSessionsController *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _TtC9AirDropUI33AirDropTransferSessionsController *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SEL v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  _TtC9AirDropUI33AirDropTransferSessionsController *v48;
  uint64_t v49;
  __n128 v50;
  int v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  int *v64;
  char *v65;
  SEL v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  SEL v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  SEL v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  void *v95;
  NSString v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  const char *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  uint64_t v111;
  int *v112;
  SEL v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  SEL v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  int *v138;
  char *v139;
  SEL v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  SEL v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  SEL v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  char v180[24];

  v3 = v2;
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = &v180[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for Locale.Language(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = &v180[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = off_100141000;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) != 1)
  {
    if (*(double *)(v3 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress) < 1.0)
      v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE700000000000000;
    else
      v48 = 0;
    goto LABEL_14;
  }
  v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Locale.preferredLanguages.getter(v13);
  v25 = v17;
  if (*(_QWORD *)v17->connection)
  {
    v26 = v3;
    v27 = *(_QWORD *)v17->airDropClient;
    v28 = *(_QWORD *)v17->transfersMonitorTask;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v25, v29, v30, v31, v32, v33, v34, v35);
    v36 = v27;
    v3 = v26;
    v37 = v28;
    v16 = off_100141000;
    v38 = Locale.Language.init(identifier:)(v36, v37);
    v39 = Locale.Language.characterDirection.getter(v38);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    if (v39 == 2)
    {
      v47 = 1;
      v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE800000000000000;
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  v47 = 0;
  v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE400000000000000;
LABEL_10:
  if (*(double *)((char *)v16[50] + v3) >= 1.0)
  {
    swift_bridgeObjectRelease(v48, v40, v41, v42, v43, v44, v45, v46);
    if (v47)
      v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE800000000000000;
    else
      v48 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE400000000000000;
  }
LABEL_14:
  v49 = v3 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  v50 = swift_beginAccess(v3 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState, v180, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v9, v49, v4, v50);
  v51 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v9, v4);
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v59 = sub_100008F88(&qword_10013CA70);
LABEL_32:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v9, v59);
    goto LABEL_33;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v60 = &qword_10013BDF8;
LABEL_18:
    v61 = &v9[*(int *)(sub_100008F88(v60) + 48)];
    v62 = (uint64_t *)&unk_10013DC90;
LABEL_19:
    v63 = sub_100008F88(v62);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v61, v63);
LABEL_20:
    v59 = type metadata accessor for SFAirDrop.ContactInfo(0);
    goto LABEL_32;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
    goto LABEL_15;
  if (v51 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v64 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
    v65 = &v9[v64[12]];
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v64[16] + 8], v66, v67, v68, v69, v70, v71, v72);
    v73 = &v9[v64[20]];
    v74 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v74 - 8) + 8))(v73, v74);
    v75 = type metadata accessor for SFAirDrop.Progress(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v65, v75);
LABEL_31:
    v59 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    goto LABEL_32;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v76 = sub_100008F88(&qword_10013CAB0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[*(int *)(v76 + 48)], v77, v78, v79, v80, v81, v82, v83);
    v84 = &v9[*(int *)(v76 + 80)];
    v85 = type metadata accessor for SFAirDrop.DeclineAction(0);
LABEL_30:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(v84, v85);
    goto LABEL_31;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:)
    || v51 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v86 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[*(int *)(v86 + 48)], v87, v88, v89, v90, v91, v92, v93);
    v94 = *(int *)(v86 + 64);
LABEL_29:
    v84 = &v9[v94];
    v85 = sub_100008F88(&qword_10013CA70);
    goto LABEL_30;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v111 = *(int *)(sub_100008F88((uint64_t *)&unk_10013DC70) + 48);
LABEL_37:
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v111], v104, v105, v106, v107, v108, v109, v110);
    goto LABEL_31;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:)
    || v51 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v112 = (int *)sub_100008F88(&qword_10013BDE0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v112[12]], v113, v114, v115, v116, v117, v118, v119);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v112[16]], v120, v121, v122, v123, v124, v125, v126);
    v94 = v112[20];
    goto LABEL_29;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v127 = sub_100008F88((uint64_t *)&unk_10013DCF0);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[*(int *)(v127 + 48)], v128, v129, v130, v131, v132, v133, v134);
    v111 = *(int *)(v127 + 64);
    goto LABEL_37;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v61 = &v9[*(int *)(sub_100008F88(&qword_10013BDF0) + 48)];
    v62 = &qword_10013CA70;
    goto LABEL_19;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.importingReceivedContact(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    goto LABEL_20;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v60 = (uint64_t *)&unk_10013DCE0;
    goto LABEL_18;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v135 = &v9[*(int *)(sub_100008F88(&qword_10013DCD8) + 48)];
    v136 = type metadata accessor for SFAirDrop.ContactRequest(0);
    v137 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v136 - 8) + 8);
    v137(v135, v136);
    v137(v9, v136);
    goto LABEL_33;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v138 = (int *)sub_100008F88(&qword_10013DCD0);
    v139 = &v9[v138[12]];
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v138[16] + 8], v140, v141, v142, v143, v144, v145, v146);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v138[20]], v147, v148, v149, v150, v151, v152, v153);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v138[24]], v154, v155, v156, v157, v158, v159, v160);
    swift_bridgeObjectRelease(*(_TtC9AirDropUI33AirDropTransferSessionsController **)&v9[v138[28]], v161, v162, v163, v164, v165, v166, v167);
    v168 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v168 - 8) + 8))(v139, v168);
    v59 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
    goto LABEL_32;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    swift_bridgeObjectRelease(v48, v52, v53, v54, v55, v56, v57, v58);
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    v169 = &v9[*(int *)(sub_100008F88(&qword_10013DCC0) + 48)];
    v170 = type metadata accessor for SFAirDropReceive.Failure(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v170 - 8) + 8))(v169, v170);
    v171 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v171 - 8) + 8))(v9, v171);
    goto LABEL_59;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.legacyTransferState(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v9, v4);
    if (*(_QWORD *)v9 == 9 || *(_QWORD *)v9 == 3)
    {
      swift_bridgeObjectRelease(v48, v172, v173, v174, v175, v176, v177, v178);
      goto LABEL_59;
    }
    goto LABEL_33;
  }
  if (v51 == enum case for SFAirDropReceive.Transfer.State.created(_:)
    || v51 == enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:)
    || v51 == enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:)
    || v51 == enum case for SFAirDropReceive.Transfer.State.waitingForContactExchangeRequest(_:))
  {
LABEL_33:
    if (v48)
    {
      v95 = *(void **)(v3 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView);
      v96 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v48, v97, v98, v99, v100, v101, v102, v103);
      objc_msgSend(v95, "setState:", v96);
LABEL_60:

      return;
    }
LABEL_59:
    v96 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_airDropMicaView), "layer");
    objc_msgSend(v96, "setBeginTime:", CACurrentMediaTime());
    goto LABEL_60;
  }
  swift_bridgeObjectRelease(v48, v52, v53, v54, v55, v56, v57, v58);
  _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
  __break(1u);
}

void sub_1000CA648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

}

id sub_1000CA6A4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureIconView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CA738()
{
  return type metadata accessor for AirDropSystemApertureIconView(0);
}

uint64_t type metadata accessor for AirDropSystemApertureIconView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001411D0;
  if (!qword_1001411D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirDropSystemApertureIconView);
  return result;
}

uint64_t sub_1000CA77C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for SFAirDropReceive.Transfer.State(319, a2);
  if (v4 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = "\b";
    v5[4] = &unk_1000EEF58;
    result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 128);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000CA820(void *a1, uint64_t a2, double a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  double v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;

  v4 = v3;
  switch(a2)
  {
    case 1:
    case 4:
      v8 = sub_100008F88((uint64_t *)&unk_10013DF40);
      v9 = swift_allocObject(v8, 48, 7);
      *(_OWORD *)(v9 + 16) = xmmword_1000EBEB0;
      v10 = objc_msgSend(a1, "widthAnchor");
      v11 = objc_msgSend(v4, "widthAnchor");
      v12 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v11, -a3);

      *(_QWORD *)(v9 + 32) = v12;
      v13 = objc_msgSend(a1, "heightAnchor");
      v14 = objc_msgSend(a1, "widthAnchor");
      v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

      *(_QWORD *)(v9 + 40) = v15;
      v41 = v9;
      ((void (*)(void))specialized Array._endMutation())();
      if (a2 == 1)
      {
        v16 = objc_msgSend(a1, "topAnchor");
        v17 = objc_msgSend(v4, "topAnchor");
      }
      else
      {
        v16 = objc_msgSend(a1, "bottomAnchor");
        v17 = objc_msgSend(v4, "bottomAnchor");
      }
      goto LABEL_4;
    case 2:
    case 8:
      v19 = sub_100008F88((uint64_t *)&unk_10013DF40);
      v20 = swift_allocObject(v19, 48, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1000EBEB0;
      v21 = objc_msgSend(a1, "heightAnchor");
      v22 = objc_msgSend(v4, "heightAnchor");
      v23 = objc_msgSend(v21, "constraintEqualToAnchor:constant:", v22, -a3);

      *(_QWORD *)(v20 + 32) = v23;
      v24 = objc_msgSend(a1, "widthAnchor");
      v25 = objc_msgSend(a1, "heightAnchor");
      v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

      *(_QWORD *)(v20 + 40) = v26;
      v41 = v20;
      ((void (*)(void))specialized Array._endMutation())();
      if (a2 == 2)
      {
        v16 = objc_msgSend(a1, "leadingAnchor");
        v17 = objc_msgSend(v4, "leadingAnchor");
      }
      else
      {
        v16 = objc_msgSend(a1, "trailingAnchor");
        v17 = objc_msgSend(v4, "trailingAnchor");
      }
LABEL_4:
      v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);
      v36 = v18;

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v38 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v37 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v38 >= v37 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized Array._endMutation()(v39);
      break;
    default:
      v27 = sub_100008F88((uint64_t *)&unk_10013DF40);
      v28 = swift_allocObject(v27, 48, 7);
      *(_OWORD *)(v28 + 16) = xmmword_1000EBEB0;
      v29 = objc_msgSend(a1, "widthAnchor");
      v30 = objc_msgSend(v4, "widthAnchor");
      v31 = -a3;
      v32 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, v31);

      *(_QWORD *)(v28 + 32) = v32;
      v33 = objc_msgSend(a1, "heightAnchor");
      v34 = objc_msgSend(v4, "heightAnchor");
      v35 = objc_msgSend(v33, "constraintEqualToAnchor:constant:", v34, v31);

      *(_QWORD *)(v28 + 40) = v35;
      v41 = v28;
      ((void (*)(void))specialized Array._endMutation())();
      break;
  }
  return v41;
}

void sub_1000CAD5C()
{
  qword_100148078 = 0x4037000000000000;
}

uint64_t sub_1000CAD6C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded);
}

id sub_1000CB06C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AirDropSystemApertureView()
{
  return objc_opt_self(_TtC9AirDropUI25AirDropSystemApertureView);
}

ValueMetadata *type metadata accessor for AirDropSystemApertureIcon()
{
  return &type metadata for AirDropSystemApertureIcon;
}

uint64_t sub_1000CB0CC(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v40[3];
  __int128 v41;

  v3 = v2;
  v4 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (id *)((char *)&v40[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)*((_QWORD *)v2 + 3);
  v10 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureIconView(0));
  sub_1000C95A8(v9, 2, 0, 1);
  v12 = v11;
  v41 = *v3;
  v13 = *((_QWORD *)&v41 + 1);
  KeyPath = swift_getKeyPath(&unk_1000EF140);
  v15 = swift_getKeyPath(&unk_1000EF168);
  swift_retain(v13);
  static Published.subscript.getter(v40, v16, KeyPath, v15);
  swift_release(KeyPath);
  swift_release(v15);
  sub_10001AAF0((uint64_t)&v41);
  v17 = v40[0];
  objc_msgSend(v40[0], "fractionCompleted");
  v19 = v18;

  *(double *)(v12 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress) = fmax(v19, 0.01);
  sub_1000C9DB0(v20, v21);
  v22 = swift_getKeyPath(&unk_1000EF188);
  v23 = swift_getKeyPath(&unk_1000EF1B0);
  swift_retain(v13);
  static Published.subscript.getter(v8, v24, v22, v23);
  swift_release(v22);
  swift_release(v23);
  sub_10001AAF0((uint64_t)&v41);
  v25 = v12 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  v26 = swift_beginAccess(v12 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState, v40, 33, 0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t, __n128))(v5 + 24))(v25, v8, v4, v26);
  v27 = swift_endAccess(v40);
  sub_1000C9DB0(v27, v28);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  *(_BYTE *)(v12 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) = 1;
  v29 = OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage;
  sub_1000C9C98(*(_QWORD *)(v12 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage) != 0);
  sub_1000C9DB0(v30, v31);
  if ((v3[1] & 1) != 0)
  {
    v32 = swift_getKeyPath(&unk_1000EF1D0);
    v33 = swift_getKeyPath(&unk_1000EF1F8);
    swift_retain(v13);
    static Published.subscript.getter(v40, v34, v32, v33);
    swift_release(v32);
    swift_release(v33);
    sub_10001AAF0((uint64_t)&v41);
    v35 = v40[0];
    if (v40[0])
    {
      v36 = *(void **)(v12 + v29);
      *(id *)(v12 + v29) = v40[0];
      v37 = v35;

      sub_1000C933C();
    }
  }
  return v12;
}

void sub_1000CB378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000CB490(a1, a2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
}

uint64_t sub_1000CB384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000CB704();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000CB3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000CB704();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000CB424(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CB704();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000CB44C()
{
  unint64_t result;

  result = qword_100141220;
  if (!qword_100141220)
  {
    result = swift_getWitnessTable(&unk_1000EF05C, &type metadata for AirDropSystemApertureIcon);
    atomic_store(result, (unint64_t *)&qword_100141220);
  }
  return result;
}

void sub_1000CB490(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  id v38[3];

  v7 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (id *)((char *)&v38[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_1000EF140);
  v13 = swift_getKeyPath(&unk_1000EF168);
  swift_retain(a3);
  static Published.subscript.getter(v38, v14, KeyPath, v13);
  swift_release(a3);
  swift_release(KeyPath);
  *(_QWORD *)&v15 = swift_release(v13).n128_u64[0];
  v16 = v38[0];
  objc_msgSend(v38[0], "fractionCompleted", v15);
  v18 = v17;

  *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_progress) = v18;
  sub_1000C9DB0(v19, v20);
  v21 = swift_getKeyPath(&unk_1000EF188);
  v22 = swift_getKeyPath(&unk_1000EF1B0);
  swift_retain(a3);
  static Published.subscript.getter(v11, v23, v21, v22);
  swift_release(a3);
  swift_release(v21);
  swift_release(v22);
  v24 = a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState;
  v25 = swift_beginAccess(a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_transferState, v38, 33, 0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t, __n128))(v8 + 24))(v24, v11, v7, v25);
  v26 = swift_endAccess(v38);
  sub_1000C9DB0(v26, v27);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) = 1;
  v28 = OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage;
  sub_1000C9C98(*(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI29AirDropSystemApertureIconView_thumbnailImage) != 0);
  sub_1000C9DB0(v29, v30);
  if ((a4 & 1) != 0)
  {
    v31 = swift_getKeyPath(&unk_1000EF1D0);
    v32 = swift_getKeyPath(&unk_1000EF1F8);
    swift_retain(a3);
    static Published.subscript.getter(v38, v33, v31, v32);
    swift_release(a3);
    swift_release(v31);
    swift_release(v32);
    v34 = v38[0];
    if (v38[0])
    {
      v35 = *(void **)(a1 + v28);
      *(id *)(a1 + v28) = v38[0];
      v36 = v34;

      sub_1000C933C();
    }
  }
}

unint64_t sub_1000CB704()
{
  unint64_t result;

  result = qword_100141228;
  if (!qword_100141228)
  {
    result = swift_getWitnessTable(&unk_1000EF0AC, &type metadata for AirDropSystemApertureIcon);
    atomic_store(result, (unint64_t *)&qword_100141228);
  }
  return result;
}

uint64_t sub_1000CB748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_1000A64B4(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_100129C28, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_10013F240, v17);
}

uint64_t sub_1000CB88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_100141230);
  v1 = sub_100009558(v0, (uint64_t)qword_100141230);
  if (qword_10013AD60 != -1)
    swift_once(&qword_10013AD60, sub_100092254);
  v2 = sub_100009558(v0, (uint64_t)qword_100148040);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t *sub_1000CB91C(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void **v8;
  void **v9;
  id v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  _TtC9AirDropUI33AirDropTransferSessionsController *v12;
  SEL v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  Class isa;
  SEL v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void **v30;
  uint64_t v31;
  void **v32;
  id v33;
  void **v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void **v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void **v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  unint64_t v62;
  _TtC9AirDropUI33AirDropTransferSessionsController *v63;
  SEL v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _TtC9AirDropUI33AirDropTransferSessionsController *v74;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  void **v83;
  void **v85;
  id v86;
  uint64_t v87;
  id v88;
  int v89;
  uint64_t v90;
  void **aBlock;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;

  v2 = v1;
  v4 = *v2;
  *((_BYTE *)v2 + 48) = 0;
  v5 = (void *)objc_opt_self(CHHapticPattern);
  aBlock = 0;
  v6 = a1;
  v7 = objc_msgSend(v5, "patternForKey:error:", v6, &aBlock);
  v8 = aBlock;
  if (!v7)
  {
    v50 = aBlock;
    v51 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
LABEL_11:
    v89 = 0;
    goto LABEL_12;
  }
  v9 = aBlock;

  v2[2] = (uint64_t)v7;
  v10 = objc_msgSend(v7, "configurationDictionary");
  v11 = (_TtC9AirDropUI33AirDropTransferSessionsController *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for String, &type metadata for String, &protocol witness table for String);

  v12 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_1000CBFAC((uint64_t)v11);
  swift_bridgeObjectRelease(v11, v13, v14, v15, v16, v17, v18, v19);
  v20 = objc_allocWithZone((Class)CHHapticEngine);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12, v22, v23, v24, v25, v26, v27, v28);
  aBlock = 0;
  v29 = objc_msgSend(v20, "initWithAudioSession:sessionIsShared:options:error:", 0, 0, isa, &aBlock);

  v30 = aBlock;
  if (!v29)
  {
    v52 = aBlock;
    v51 = _convertNSErrorToError(_:)(v30);

    swift_willThrow();
    goto LABEL_11;
  }
  v2[3] = (uint64_t)v29;
  v31 = v2[2];
  aBlock = 0;
  v32 = v30;
  v33 = objc_msgSend(v29, "createPlayerWithPattern:error:", v31, &aBlock);
  v34 = aBlock;
  if (v33)
  {
    v2[4] = (uint64_t)v33;
    v2[5] = (uint64_t)v6;
    v35 = swift_allocObject(&unk_100129C50, 24, 7);
    swift_weakInit(v35 + 16, v2);
    v95 = sub_1000CED9C;
    v96 = v35;
    aBlock = _NSConcreteStackBlock;
    v92 = 1107296256;
    v93 = sub_1000DA060;
    v94 = &unk_100129C68;
    v36 = _Block_copy(&aBlock);
    v37 = v96;
    v88 = v6;
    v38 = v34;
    v39 = v29;
    objc_msgSend(v39, "setResetHandler:", v36, swift_release(v37).n128_f64[0]);
    _Block_release(v36);

    v40 = (void *)v2[3];
    v41 = swift_allocObject(&unk_100129C50, 24, 7);
    swift_weakInit(v41 + 16, v2);
    v95 = sub_1000CEDBC;
    v96 = v41;
    aBlock = _NSConcreteStackBlock;
    v92 = 1107296256;
    v93 = sub_1000A656C;
    v94 = &unk_100129C90;
    v42 = _Block_copy(&aBlock);
    v43 = v96;
    v44 = v40;
    objc_msgSend(v44, "setStoppedHandler:", v42, swift_release(v43).n128_f64[0]);
    _Block_release(v42);

    objc_msgSend((id)v2[3], "setAutoShutdownEnabled:", 1);
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_100009558(v45, (uint64_t)qword_100141230);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "ShockwaveHapticsPlayer: haptic engine setup successfully", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    return v2;
  }
  v85 = aBlock;
  v51 = _convertNSErrorToError(_:)(v34);

  swift_willThrow();
  v89 = 1;
LABEL_12:
  if (qword_10013AD88 != -1)
    swift_once(&qword_10013AD88, sub_1000CB88C);
  v53 = type metadata accessor for Logger(0);
  sub_100009558(v53, (uint64_t)qword_100141230);
  v54 = v6;
  swift_errorRetain(v51);
  v55 = v54;
  v56 = swift_errorRetain(v51);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = swift_slowAlloc(22, -1);
    v87 = v4;
    v60 = (void **)swift_slowAlloc(64, -1);
    aBlock = v60;
    *(_DWORD *)v59 = 136315394;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v86 = v7;
    v63 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v62;
    v90 = sub_10003A834(v61, v62, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &aBlock);

    swift_bridgeObjectRelease(v63, v64, v65, v66, v67, v68, v69, v70);
    *(_WORD *)(v59 + 12) = 2080;
    v90 = v51;
    swift_errorRetain(v51);
    v71 = sub_100008F88((uint64_t *)&unk_10013CB30);
    v72 = String.init<A>(reflecting:)(&v90, v71);
    v74 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v73;
    v90 = sub_10003A834(v72, v73, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &aBlock);
    v75 = v74;
    v7 = v86;
    swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
    swift_errorRelease(v51);
    swift_errorRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "ShockwaveHapticsPlayer: Haptics for %s failed to initialize: %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
    v83 = v60;
    v4 = v87;
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }
  else
  {

    swift_errorRelease(v51);
    swift_errorRelease(v51);
  }

  swift_willThrow();
  if (v7)

  if (v89)
  swift_deallocPartialClassInstance(v2, v4, 49, 7);
  return v2;
}

uint64_t sub_1000CBFAC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100008F88(&qword_10013F370);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v31)
        goto LABEL_37;
      v15 = *(_QWORD *)(v32 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v31)
          goto LABEL_37;
        v15 = *(_QWORD *)(v32 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v31)
            goto LABEL_37;
          v15 = *(_QWORD *)(v32 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = 16 * v13;
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = v19[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v18);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)&v42[0] = *v19;
    *((_QWORD *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_10004E130(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_10004E130(v41, v42);
    sub_10004E130(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(_QWORD *)(v11 + 32) = v36;
    result = (uint64_t)sub_10004E130(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_100028460(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v32 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000CC368(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  _TtC9AirDropUI33AirDropTransferSessionsController *v20;
  SEL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _TtC9AirDropUI33AirDropTransferSessionsController *v43;
  SEL v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  id v53;
  _BYTE v54[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v54, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(void **)(Strong + 24);
    v53 = 0;
    v5 = objc_msgSend(v4, "startAndReturnError:", &v53);
    v6 = v53;
    if ((v5 & 1) != 0)
    {
      v7 = qword_10013AD88;
      v8 = v53;
      if (v7 != -1)
        swift_once(&qword_10013AD88, sub_1000CB88C);
      v9 = type metadata accessor for Logger(0);
      sub_100009558(v9, (uint64_t)qword_100141230);
      v10 = swift_retain_n(v3, 2);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v11, v12))
      {

        swift_release_n(v3, 3);
        return;
      }
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (void *)swift_slowAlloc(32, -1);
      v53 = v14;
      *(_DWORD *)v13 = 136315138;
      v51 = *(id *)(v3 + 40);
      type metadata accessor for CHHapticPatternLibraryKey(0);
      v16 = v15;
      v17 = v51;
      v18 = String.init<A>(reflecting:)(&v51, v16);
      v20 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v19;
      v51 = (id)sub_10003A834(v18, v19, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v20, v21, v22, v23, v24, v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "ShockwaveHapticsPlayer: restarted haptic engine %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
      swift_release(v3);
    }
    else
    {
      v33 = v53;
      v34 = (void *)_convertNSErrorToError(_:)(v6);

      swift_willThrow();
      *(_BYTE *)(v3 + 48) = 0;
      if (qword_10013AD88 != -1)
        swift_once(&qword_10013AD88, sub_1000CB88C);
      v35 = type metadata accessor for Logger(0);
      sub_100009558(v35, (uint64_t)qword_100141230);
      swift_errorRetain(v34);
      v36 = swift_errorRetain(v34);
      v11 = Logger.logObject.getter(v36);
      v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = (void *)swift_slowAlloc(32, -1);
        v53 = v39;
        *(_DWORD *)v38 = 136315138;
        v51 = v34;
        swift_errorRetain(v34);
        v40 = sub_100008F88((uint64_t *)&unk_10013CB30);
        v41 = String.init<A>(reflecting:)(&v51, v40);
        v43 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v42;
        v51 = (id)sub_10003A834(v41, v42, (uint64_t *)&v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
        swift_bridgeObjectRelease(v43, v44, v45, v46, v47, v48, v49, v50);
        swift_errorRelease(v34);
        swift_errorRelease(v34);
        _os_log_impl((void *)&_mh_execute_header, v11, v37, "ShockwaveHapticsPlayer: failed restarting haptic engine: %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
        swift_release(v3);

        swift_errorRelease(v34);
        return;
      }
      swift_release(v3);
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      swift_errorRelease(v34);
    }

  }
  else
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100009558(v28, (uint64_t)qword_100141230);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "ShockwaveHapticsPlayer: self nil while resetHandler is called, exiting", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
}

double sub_1000CC820(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE v18[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v18, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    *(_BYTE *)(Strong + 48) = 0;
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100009558(v6, (uint64_t)qword_100141230);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134217984;
      v17 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "ShockwaveHapticsPlayer: stopped haptic engine for (%ld)", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);
      swift_release(v5);

    }
    else
    {

      *(_QWORD *)&result = swift_release(v5).n128_u64[0];
    }
  }
  else
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100009558(v12, (uint64_t)qword_100141230);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "ShockwaveHapticsPlayer: self nil while stoppedHandler is called, exiting", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  return result;
}

void sub_1000CCA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Swift::String v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *object;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  Swift::String v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  unsigned int v61;
  void *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  Swift::String v74;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  _TtC9AirDropUI33AirDropTransferSessionsController *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  void *v91;
  unsigned int v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  SEL v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  Swift::String v104;
  _TtC9AirDropUI33AirDropTransferSessionsController *v105;
  SEL v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  _TtC9AirDropUI33AirDropTransferSessionsController *v113;
  SEL v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  uint64_t v127;
  SEL v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  Swift::String v135;
  _TtC9AirDropUI33AirDropTransferSessionsController *v136;
  SEL v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  _TtC9AirDropUI33AirDropTransferSessionsController *v144;
  SEL v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _TtC9AirDropUI33AirDropTransferSessionsController *v155;
  SEL v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  void *v163;
  _TtC9AirDropUI33AirDropTransferSessionsController *v164[2];
  uint64_t v165;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v2 = type metadata accessor for Logger(0);
    sub_100009558(v2, (uint64_t)qword_100141230);
    v3 = swift_retain_n(v0, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      *(_DWORD *)v6 = 136315138;
      v165 = v7;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000, v8, v9, v10, v11, v12, v13, v14);
      v163 = (void *)0xD000000000000027;
      v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
      v15._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 40));
      object = (_TtC9AirDropUI33AirDropTransferSessionsController *)v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object, v17, v18, v19, v20, v21, v22, v23);
      v163 = (void *)sub_10003A834(0xD000000000000027, 0x80000001000F2EE0, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164);
      swift_release_n(v0, 2);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0, v24, v25, v26, v27, v28, v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "ShockwaveHapticsPlayer: Haptics is playing, ignoring play request for %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
  }
  else
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v31 = type metadata accessor for Logger(0);
    sub_100009558(v31, (uint64_t)qword_100141230);
    v32 = swift_retain_n(v0, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      *(_DWORD *)v35 = 136315138;
      v165 = v36;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000, v37, v38, v39, v40, v41, v42, v43);
      v163 = (void *)0xD000000000000027;
      v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
      v44._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 40));
      v45 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
      v163 = (void *)sub_10003A834(0xD000000000000027, 0x80000001000F2EE0, &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164);
      swift_release_n(v0, 2);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0, v53, v54, v55, v56, v57, v58, v59);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ShockwaveHapticsPlayer: Starting engine for %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
    v60 = *(void **)(v0 + 24);
    v163 = 0;
    v61 = objc_msgSend(v60, "startAndReturnError:", &v163);
    v62 = v163;
    if (!v61)
      goto LABEL_19;
    swift_retain_n(v1, 2);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_DWORD *)v65 = 136315138;
      v165 = v66;
      v163 = 0;
      v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease(v164[0], v67, v68, v69, v70, v71, v72, v73);
      v163 = (void *)0xD000000000000027;
      v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
      v74._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v1 + 40));
      v75 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v74._object;
      String.append(_:)(v74);
      swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
      v83 = v164[0];
      v163 = (void *)sub_10003A834((uint64_t)v163, (unint64_t)v164[0], &v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "ShockwaveHapticsPlayer: Engine started for %s", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    v91 = *(void **)(v1 + 32);
    v163 = 0;
    v92 = objc_msgSend(v91, "startAtTime:error:", &v163, 0.0);
    v62 = v163;
    if (v92)
    {
      swift_retain_n(v1, 2);
      v93 = Logger.logObject.getter(v62);
      v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(12, -1);
        v96 = swift_slowAlloc(32, -1);
        *(_DWORD *)v95 = 136315138;
        v165 = v96;
        v163 = 0;
        v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease(v164[0], v97, v98, v99, v100, v101, v102, v103);
        v163 = (void *)0xD000000000000027;
        v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
        v104._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v1 + 40));
        v105 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v104._object;
        String.append(_:)(v104);
        swift_bridgeObjectRelease(v105, v106, v107, v108, v109, v110, v111, v112);
        v113 = v164[0];
        v163 = (void *)sub_10003A834((uint64_t)v163, (unint64_t)v164[0], &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v113, v114, v115, v116, v117, v118, v119, v120);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "ShockwaveHapticsPlayer: Player started for %s", v95, 0xCu);
        swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v95, -1, -1);

      }
      else
      {

        swift_release_n(v1, 2);
      }
      *(_BYTE *)(v1 + 48) = 1;
    }
    else
    {
LABEL_19:
      v121 = v62;
      v122 = _convertNSErrorToError(_:)(v62);

      swift_willThrow();
      swift_retain(v1);
      swift_errorRetain(v122);
      swift_retain(v1);
      v123 = swift_errorRetain(v122);
      v124 = Logger.logObject.getter(v123);
      v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = swift_slowAlloc(22, -1);
        v127 = swift_slowAlloc(64, -1);
        v165 = v127;
        *(_DWORD *)v126 = 136315394;
        v163 = 0;
        v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease(v164[0], v128, v129, v130, v131, v132, v133, v134);
        v163 = (void *)0xD000000000000027;
        v164[0] = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
        v135._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v1 + 40));
        v136 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v135._object;
        String.append(_:)(v135);
        swift_bridgeObjectRelease(v136, v137, v138, v139, v140, v141, v142, v143);
        v144 = v164[0];
        v163 = (void *)sub_10003A834((uint64_t)v163, (unint64_t)v164[0], &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v144, v145, v146, v147, v148, v149, v150, v151);
        *(_WORD *)(v126 + 12) = 2080;
        v163 = (void *)v122;
        swift_errorRetain(v122);
        v152 = sub_100008F88((uint64_t *)&unk_10013CB30);
        v153 = String.init<A>(reflecting:)(&v163, v152);
        v155 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v154;
        v163 = (void *)sub_10003A834(v153, v154, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164);
        swift_bridgeObjectRelease(v155, v156, v157, v158, v159, v160, v161, v162);
        swift_errorRelease(v122);
        swift_errorRelease(v122);
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "ShockwaveHapticsPlayer: Failed to start haptics for %s: %s", (uint8_t *)v126, 0x16u);
        swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1, -1);
        swift_slowDealloc(v126, -1, -1);

        swift_errorRelease(v122);
      }
      else
      {
        swift_errorRelease(v122);
        swift_release_n(v1, 2);
        swift_errorRelease(v122);
        swift_errorRelease(v122);

      }
    }
  }
}

void sub_1000CD358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  SEL v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Swift::String v15;
  _TtC9AirDropUI33AirDropTransferSessionsController *object;
  SEL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  Swift::String v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  SEL v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  SEL v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  unsigned int v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  SEL v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  Swift::String v74;
  _TtC9AirDropUI33AirDropTransferSessionsController *v75;
  SEL v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  _TtC9AirDropUI33AirDropTransferSessionsController *v83;
  SEL v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  SEL v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  Swift::String v105;
  _TtC9AirDropUI33AirDropTransferSessionsController *v106;
  SEL v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  _TtC9AirDropUI33AirDropTransferSessionsController *v114;
  SEL v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _TtC9AirDropUI33AirDropTransferSessionsController *v125;
  SEL v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  SEL v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  Swift::String v145;
  _TtC9AirDropUI33AirDropTransferSessionsController *v146;
  SEL v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  _TtC9AirDropUI33AirDropTransferSessionsController *v154;
  SEL v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  _TtC9AirDropUI33AirDropTransferSessionsController *v163;
  uint64_t v164;

  v1 = v0;
  if (*(_BYTE *)(v0 + 48) == 1)
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v2 = type metadata accessor for Logger(0);
    sub_100009558(v2, (uint64_t)qword_100141230);
    v3 = swift_retain_n(v0, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      *(_DWORD *)v6 = 136315138;
      v164 = v7;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000, v8, v9, v10, v11, v12, v13, v14);
      v162 = (id)0xD000000000000027;
      v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
      v15._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 40));
      object = (_TtC9AirDropUI33AirDropTransferSessionsController *)v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(object, v17, v18, v19, v20, v21, v22, v23);
      v162 = (id)sub_10003A834(0xD000000000000027, 0x80000001000F2EE0, &v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
      swift_release_n(v0, 2);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0, v24, v25, v26, v27, v28, v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "ShockwaveHapticsPlayer: Stopping player for %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
    v60 = *(void **)(v0 + 32);
    v162 = 0;
    v61 = objc_msgSend(v60, "stopAtTime:error:", &v162, 0.0);
    v62 = v162;
    if (v61)
    {
      swift_retain_n(v1, 2);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(12, -1);
        v66 = swift_slowAlloc(32, -1);
        *(_DWORD *)v65 = 136315138;
        v162 = 0;
        v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        v164 = v66;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease(v163, v67, v68, v69, v70, v71, v72, v73);
        v162 = (id)0xD000000000000027;
        v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
        v74._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v1 + 40));
        v75 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v74._object;
        String.append(_:)(v74);
        swift_bridgeObjectRelease(v75, v76, v77, v78, v79, v80, v81, v82);
        v83 = v163;
        v162 = (id)sub_10003A834((uint64_t)v162, (unint64_t)v163, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v83, v84, v85, v86, v87, v88, v89, v90);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "ShockwaveHapticsPlayer: Player stopped for %s", v65, 0xCu);
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);

      }
      else
      {

        swift_release_n(v1, 2);
      }
      objc_msgSend(*(id *)(v1 + 24), "stopWithCompletionHandler:", 0);
      v133 = swift_retain_n(v1, 2);
      v134 = Logger.logObject.getter(v133);
      v135 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v134, v135))
      {
        v136 = (uint8_t *)swift_slowAlloc(12, -1);
        v137 = swift_slowAlloc(32, -1);
        *(_DWORD *)v136 = 136315138;
        v162 = 0;
        v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        v164 = v137;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease(v163, v138, v139, v140, v141, v142, v143, v144);
        v162 = (id)0xD000000000000027;
        v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
        v145._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v1 + 40));
        v146 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v145._object;
        String.append(_:)(v145);
        swift_bridgeObjectRelease(v146, v147, v148, v149, v150, v151, v152, v153);
        v154 = v163;
        v162 = (id)sub_10003A834((uint64_t)v162, (unint64_t)v163, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v154, v155, v156, v157, v158, v159, v160, v161);
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "ShockwaveHapticsPlayer: Engine stopped for %s", v136, 0xCu);
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v136, -1, -1);

      }
      else
      {

        swift_release_n(v1, 2);
      }
      *(_BYTE *)(v1 + 48) = 0;
    }
    else
    {
      v91 = v162;
      v92 = (void *)_convertNSErrorToError(_:)(v62);

      swift_willThrow();
      *(_BYTE *)(v1 + 48) = 0;
      swift_retain(v1);
      swift_errorRetain(v92);
      swift_retain(v1);
      v93 = swift_errorRetain(v92);
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v96 = swift_slowAlloc(22, -1);
        v97 = swift_slowAlloc(64, -1);
        *(_DWORD *)v96 = 136315394;
        v162 = 0;
        v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
        v164 = v97;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease(v163, v98, v99, v100, v101, v102, v103, v104);
        v162 = (id)0xD000000000000027;
        v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
        v105._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v1 + 40));
        v106 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v105._object;
        String.append(_:)(v105);
        swift_bridgeObjectRelease(v106, v107, v108, v109, v110, v111, v112, v113);
        v114 = v163;
        v162 = (id)sub_10003A834((uint64_t)v162, (unint64_t)v163, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v114, v115, v116, v117, v118, v119, v120, v121);
        *(_WORD *)(v96 + 12) = 2080;
        v162 = v92;
        swift_errorRetain(v92);
        v122 = sub_100008F88((uint64_t *)&unk_10013CB30);
        v123 = String.init<A>(reflecting:)(&v162, v122);
        v125 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v124;
        v162 = (id)sub_10003A834(v123, v124, &v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_bridgeObjectRelease(v125, v126, v127, v128, v129, v130, v131, v132);
        swift_errorRelease(v92);
        swift_errorRelease(v92);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "ShockwaveHapticsPlayer: Failed to stop haptics for %s: %s", (uint8_t *)v96, 0x16u);
        swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v96, -1, -1);

        swift_errorRelease(v92);
      }
      else
      {
        swift_errorRelease(v92);
        swift_release_n(v1, 2);
        swift_errorRelease(v92);
        swift_errorRelease(v92);

      }
    }
  }
  else
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v31 = type metadata accessor for Logger(0);
    sub_100009558(v31, (uint64_t)qword_100141230);
    v32 = swift_retain_n(v0, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      *(_DWORD *)v35 = 136315138;
      v164 = v36;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000, v37, v38, v39, v40, v41, v42, v43);
      v162 = (id)0xD000000000000027;
      v163 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0;
      v44._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 40));
      v45 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v45, v46, v47, v48, v49, v50, v51, v52);
      v162 = (id)sub_10003A834(0xD000000000000027, 0x80000001000F2EE0, &v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
      swift_release_n(v0, 2);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F2EE0, v53, v54, v55, v56, v57, v58, v59);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ShockwaveHapticsPlayer: Haptics not playing, ignoring stop request for %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
  }
}

uint64_t sub_1000CDC8C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 49, 7);
}

_QWORD *sub_1000CDCC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for ShockwaveHapticsPlayer();
  v1 = swift_allocObject(v0, 49, 7);
  result = sub_1000CDD00();
  qword_100148080 = v1;
  return result;
}

_QWORD *sub_1000CDD00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  id v3;
  unsigned int v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_QWORD *)v0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  v2 = (uint64_t *)(v0 + 16);
  v3 = objc_msgSend((id)objc_opt_self(CHHapticEngine), "capabilitiesForHardware");
  v4 = objc_msgSend(v3, "supportsHaptics");
  swift_unknownObjectRelease(v3);
  *((_BYTE *)v2 + 32) = v4;
  if (v4)
  {
    v5 = String._bridgeToObjectiveC()();
    v6 = type metadata accessor for ShockwaveHapticsPlayer.Haptic();
    v7 = swift_allocObject(v6, 49, 7);
    sub_1000CB91C(v5);
    v8 = *v2;
    *v2 = v7;
    swift_release(v8);
    v9 = String._bridgeToObjectiveC()();
    v10 = swift_allocObject(v6, 49, 7);
    sub_1000CB91C(v9);
    v11 = v1[3];
    v1[3] = v10;
    swift_release(v11);
    v12 = String._bridgeToObjectiveC()();
    v13 = swift_allocObject(v6, 49, 7);
    sub_1000CB91C(v12);
    v14 = v1[4];
    v1[4] = v13;
    swift_release(v14);
    v15 = String._bridgeToObjectiveC()();
    v16 = swift_allocObject(v6, 49, 7);
    sub_1000CB91C(v15);
    v17 = v1[5];
    v1[5] = v16;
    swift_release(v17);
  }
  return v1;
}

double sub_1000CDEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  NSObject *oslog;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 && (*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100009558(v3, (uint64_t)qword_100141230);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Skipped playing primaryHintingHaptic, secondaryHintingHaptic is currently playing", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 32);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v1 + 32));
      sub_1000CD358();
      *(_QWORD *)&result = swift_release(v8).n128_u64[0];
    }
    v9 = *(_QWORD *)(v1 + 16);
    if (v9)
    {
      swift_retain(*(_QWORD *)(v1 + 16));
      sub_1000CCA1C();
      *(_QWORD *)&result = swift_release(v9).n128_u64[0];
    }
  }
  return result;
}

double sub_1000CE030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  NSObject *oslog;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 40);
  if (v2 && (*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100009558(v3, (uint64_t)qword_100141230);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Skipped playing primaryConnectedHaptic, secondaryConnectedHaptic is currently playing", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 16);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v1 + 16));
      sub_1000CD358();
      *(_QWORD *)&result = swift_release(v8).n128_u64[0];
    }
    v9 = *(_QWORD *)(v1 + 32);
    if (v9)
    {
      swift_retain(*(_QWORD *)(v1 + 32));
      sub_1000CCA1C();
      *(_QWORD *)&result = swift_release(v9).n128_u64[0];
    }
  }
  return result;
}

double sub_1000CE164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  NSObject *oslog;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 && (*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100009558(v3, (uint64_t)qword_100141230);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Skipped playing secondaryHintingHaptic, primaryHintingHaptic is currently playing", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 40);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v1 + 40));
      sub_1000CD358();
      *(_QWORD *)&result = swift_release(v8).n128_u64[0];
    }
    v9 = *(_QWORD *)(v1 + 24);
    if (v9)
    {
      swift_retain(*(_QWORD *)(v1 + 24));
      sub_1000CCA1C();
      *(_QWORD *)&result = swift_release(v9).n128_u64[0];
    }
  }
  return result;
}

double sub_1000CE298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  NSObject *oslog;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  if (v2 && (*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    if (qword_10013AD88 != -1)
      swift_once(&qword_10013AD88, sub_1000CB88C);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100009558(v3, (uint64_t)qword_100141230);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Skipped playing secondaryConnectedHaptic, primaryConnectedHaptic is currently playing", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 24);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v1 + 24));
      sub_1000CD358();
      *(_QWORD *)&result = swift_release(v8).n128_u64[0];
    }
    v9 = *(_QWORD *)(v1 + 40);
    if (v9)
    {
      swift_retain(*(_QWORD *)(v1 + 40));
      sub_1000CCA1C();
      *(_QWORD *)&result = swift_release(v9).n128_u64[0];
    }
  }
  return result;
}

double sub_1000CE3CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v2, v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  if (v7 && *(_BYTE *)(v7 + 48) == 1)
  {
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject(&unk_100129C00, 40, 7);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v1;
    swift_retain(v1);
    v10 = sub_1000CB748((uint64_t)v6, (uint64_t)&unk_100141470, (uint64_t)v9);
    *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  }
  v11 = v1[3];
  if (v11 && *(_BYTE *)(v11 + 48) == 1)
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    v13 = (_QWORD *)swift_allocObject(&unk_100129BD8, 40, 7);
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v1;
    swift_retain(v1);
    v14 = sub_1000CB748((uint64_t)v6, (uint64_t)&unk_100141460, (uint64_t)v13);
    *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  }
  v15 = v1[4];
  if (v15)
  {
    swift_retain(v1[4]);
    sub_1000CD358();
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  v16 = v1[5];
  if (v16)
  {
    swift_retain(v1[5]);
    sub_1000CD358();
    *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000CE554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CE5B4, 0, 0);
}

uint64_t sub_1000CE5B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100141478 + dword_100141478);
  v1 = (_QWORD *)swift_task_alloc(unk_10014147C);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000CE634;
  return v3(2000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1000CE634()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 48));
  v4 = v2[4];
  v3 = v2[5];
  v5 = v2[3];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000CEDEC;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000CE6CC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CE6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_retain(*(_QWORD *)(v1 + 16));
    sub_1000CD358();
    swift_release(v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CE71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CE77C, 0, 0);
}

uint64_t sub_1000CE77C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100141478 + dword_100141478);
  v1 = (_QWORD *)swift_task_alloc(unk_10014147C);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000CE7FC;
  return v3(2000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1000CE7FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 48));
  v4 = v2[4];
  v3 = v2[5];
  v5 = v2[3];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000CEDF0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000CE894;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CE894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    swift_retain(*(_QWORD *)(v1 + 24));
    sub_1000CD358();
    swift_release(v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CE8E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for ShockwaveHapticsPlayer()
{
  return objc_opt_self(_TtC9AirDropUI22ShockwaveHapticsPlayer);
}

uint64_t type metadata accessor for ShockwaveHapticsPlayer.Haptic()
{
  return objc_opt_self(_TtCC9AirDropUI22ShockwaveHapticsPlayer6Haptic);
}

uint64_t sub_1000CE964(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10014145C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000104E4;
  return sub_1000CE71C(a1, v4, v5, v6);
}

uint64_t sub_1000CE9D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10014146C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100018F40;
  return sub_1000CE554(a1, v4, v5, v6);
}

uint64_t sub_1000CEA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1000CEAE4, 0, 0);
}

uint64_t sub_1000CEAE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100008694(&qword_100141480, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100008694(&qword_100141488, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1000CEBFC;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1000CEBFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1000CECA8, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000CECA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CECE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CED08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100141494);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000104E4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100141490 + dword_100141490))(a1, v4);
}

uint64_t sub_1000CED78()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000CED9C()
{
  uint64_t v0;

  sub_1000CC368(v0);
}

uint64_t sub_1000CEDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CEDB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_1000CEDBC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CC820(a1, v1);
}

uint64_t sub_1000CEDC4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000CEDFC(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_1000D30C4(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_1000D343C(result, v3, 0, a1);
  return swift_retain(v5);
}

uint64_t sub_1000CEE60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;

  v2 = type metadata accessor for LayoutSubviews(0);
  v3 = sub_100008694(&qword_1001416C8, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(&v12, v2, v3);
  dispatch thunk of Collection.endIndex.getter(v11, v2, v3);
  if (v12 == v11[0])
  {
    v4 = type metadata accessor for LayoutSubview(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
  else
  {
    v6 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v11, &v12, v2, v3);
    v8 = v7;
    v9 = type metadata accessor for LayoutSubview(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, v8, v9);
    v6(v11, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
  }
}

uint64_t sub_1000CEF78(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  void *v5;
  id v6;

  result = sub_1000D30C4(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = (void *)sub_1000D343C(result, v3, 0, a1);
  v6 = v5;
  return (uint64_t)v5;
}

uint64_t sub_1000CEFE4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  uint64_t v8;
  char v9;
  SEL v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)__CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7, v10, v11, v12, v13, v14, v15, v16);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_1000D33B4(a1);
  if ((v20 & 1) == 0)
  {
    v6 = v19;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v19)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_100063218(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_1000D314C(v4, v6, v2 != 0, a1);
      v17 = v21;
      sub_100063218(v4, v6, v2 != 0);
      return v17;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CF0F0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_100018F40;
  return v5();
}

uint64_t sub_1000CF144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_100141498);
  v1 = sub_100009558(v0, (uint64_t)qword_100141498);
  if (qword_10013AD50 != -1)
    swift_once(&qword_10013AD50, sub_100092204);
  v2 = sub_100009558(v0, (uint64_t)qword_100148010);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

double sub_1000CF1D4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = type metadata accessor for AirDropUIBannerManager();
  v1 = swift_allocObject(v0, 50, 7);
  result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_WORD *)(v1 + 48) = 0;
  qword_100148088 = v1;
  return result;
}

unint64_t sub_1000CF208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  uint64_t v8;
  const char *v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  SEL v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  Swift::String v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _TtC9AirDropUI33AirDropTransferSessionsController *v30;
  Swift::String v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _QWORD v39[3];
  _BYTE v40[8];
  unint64_t v41;
  unint64_t v42;

  if (a3 == 1)
    return 0xD00000000000001BLL;
  v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F3340;
  v8 = 0xD000000000000020;
  switch(a2)
  {
    case 0:
      if (a1)
        v8 = 0xD000000000000037;
      else
        v8 = 0xD00000000000001ELL;
      if (a1)
        v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F31D0;
      else
        v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F3210;
      goto LABEL_19;
    case 1:
      goto LABEL_19;
    case 2:
      v8 = 0xD00000000000001CLL;
      v9 = "a session request was denied";
      goto LABEL_18;
    case 3:
      v8 = 0xD000000000000023;
      v9 = "the owner requested an invalidation";
      goto LABEL_18;
    case 4:
      v9 = "the server disconnected from XPC";
      goto LABEL_18;
    case 5:
      v8 = 0xD000000000000018;
      v9 = "the app was foregrounded";
      goto LABEL_18;
    case 6:
      v8 = 0xD000000000000017;
      v9 = "the assertion timed out";
      goto LABEL_18;
    case 7:
      v9 = "the assertion request was denied";
      goto LABEL_18;
    case 8:
      v8 = 0xD00000000000001ALL;
      v9 = "the relevant session ended";
      goto LABEL_18;
    default:
      v8 = 0xD000000000000014;
      v9 = "something went wrong";
LABEL_18:
      v7 = (_TtC9AirDropUI33AirDropTransferSessionsController *)((unint64_t)(v9 - 32) | 0x8000000000000000);
LABEL_19:
      v10 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000;
      swift_errorRetain(a3);
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease((_TtC9AirDropUI33AirDropTransferSessionsController *)0xE000000000000000, v11, v12, v13, v14, v15, v16, v17);
      v41 = 0xD000000000000022;
      v42 = 0x80000001000F31A0;
      v18._countAndFlagsBits = v8;
      v18._object = v7;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v7, v19, v20, v21, v22, v23, v24, v25);
      v26._countAndFlagsBits = 0x3A726F727245202ELL;
      v26._object = (void *)0xE900000000000020;
      String.append(_:)(v26);
      if (a3)
      {
        swift_getErrorValue(a3, v40, v39);
        v27 = v39[1];
        v28 = v39[2];
        swift_errorRetain(a3);
        v29 = Error.localizedDescription.getter(v27, v28);
        v10 = v30;
        sub_1000D7C34(a1, a2, a3);
      }
      else
      {
        v29 = 0;
      }
      v31._countAndFlagsBits = v29;
      v31._object = v10;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(v10, v32, v33, v34, v35, v36, v37, v38);
      sub_1000D7C34(a1, a2, a3);
      result = v41;
      break;
  }
  return result;
}

unint64_t sub_1000CF450()
{
  uint64_t *v0;

  return sub_1000CF208(*v0, v0[1], v0[2]);
}

uint64_t sub_1000CF45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(_QWORD, _QWORD, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __n128 v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t (*)(char *, uint64_t));
  uint64_t (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t (*v99)(char *, uint64_t);
  uint64_t (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void (*v125)(char *, uint64_t);
  os_log_t v126;
  uint64_t v127;
  __n128 v128;
  __n128 v129;
  void *v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  char *v134;
  __n128 v135;
  char *v136;
  __n128 v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  char *v154;
  char *v155;
  uint64_t v156;
  int v157;
  uint64_t (*v158)(char *, uint64_t);
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;

  v1 = v0;
  v141 = type metadata accessor for UUID(0);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v2);
  v139 = (char *)&v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for Date(0);
  v143 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145, v4);
  v144 = (char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = (uint64_t (*)(char *, uint64_t))type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0);
  v156 = *((_QWORD *)v158 - 1);
  v7 = __chkstk_darwin(v158, v6);
  v147 = (char *)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v146 = (char *)&v138 - v11;
  v13 = __chkstk_darwin(v10, v12);
  v155 = (char *)&v138 - v14;
  __chkstk_darwin(v13, v15);
  v154 = (char *)&v138 - v16;
  v17 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v138 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext(0);
  v149 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  v160 = (char *)&v138 - v28;
  v29 = sub_100008F88(&qword_10013CD40);
  __chkstk_darwin(v29, v30);
  v164 = (uint64_t *)((char *)&v138 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0);
  v165 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32, v33);
  v36 = (char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v37);
  v39 = (char *)&v138 - v38;
  if (qword_10013ABF0 != -1)
    swift_once(&qword_10013ABF0, sub_100028C8C);
  v151 = v18;
  v152 = v21;
  v153 = (void (*)(_QWORD, _QWORD, _QWORD))v17;
  v148 = v26;
  v142 = v36;
  v161 = v39;
  v40 = qword_100147DA0;
  KeyPath = swift_getKeyPath(&unk_1000EF360);
  v42 = swift_getKeyPath(&unk_1000EF388);
  static Published.subscript.getter(&v168, v40, KeyPath, v42);
  swift_release(v42);
  swift_release(KeyPath);
  v43 = v168;
  v44 = sub_1000D4DCC((uint64_t)v168);
  v46 = v45;
  if (qword_10013AD98 != -1)
    swift_once(&qword_10013AD98, sub_1000CF144);
  v47 = type metadata accessor for Logger(0);
  v48 = sub_100009558(v47, (uint64_t)qword_100141498);
  swift_retain_n(v44, 2);
  v49 = swift_bridgeObjectRetain_n(v43, 2);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v159 = v32;
    v150 = v48;
    v163 = v1;
    v52 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    v168 = (_QWORD *)v53;
    *(_DWORD *)v52 = 136315394;
    v162 = v22;
    v157 = v46;
    if (v44)
    {
      v55 = *(_QWORD *)(v44 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
      v54 = *(_QWORD *)(v44 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
      swift_bridgeObjectRetain(v54);
    }
    else
    {
      v54 = 0xE300000000000000;
      v55 = 7104878;
    }
    v166 = sub_10003A834(v55, v54, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
    swift_bridgeObjectRelease(v54);
    swift_release_n(v44, 2);
    *(_WORD *)(v52 + 12) = 2080;
    v61 = type metadata accessor for AirDropTransferSession(0);
    v62 = swift_bridgeObjectRetain(v43);
    v63 = Dictionary.Values.description.getter(v62, &type metadata for String, v61, &protocol witness table for String);
    v64 = v43;
    v66 = v65;
    swift_bridgeObjectRelease(v64);
    v166 = sub_10003A834(v63, v66, (uint64_t *)&v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
    v67 = v66;
    v43 = v64;
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease_n(v64, 2);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Banner session chosen is %s from sessions %s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    v22 = v162;
    v1 = v163;
    v48 = v150;
    v32 = v159;
    v46 = v157;
    if (!v44)
      goto LABEL_15;
  }
  else
  {
    swift_release_n(v44, 2);
    swift_bridgeObjectRelease_n(v43, 2);

    if (!v44)
    {
LABEL_15:
      v68 = swift_bridgeObjectRetain(v43);
      sub_1000D6E10(v68, v69);
      v71 = v70;
      if ((unint64_t)v70 >> 62)
      {
        if (v70 >= 0)
          v70 &= 0xFFFFFFFFFFFFFF8uLL;
        v72 = _CocoaArrayWrapper.endIndex.getter(v70);
      }
      else
      {
        v72 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v71);
      if (v72)
        sub_1000D0754();
      else
        sub_1000D092C();
      goto LABEL_24;
    }
  }
  if (*(_QWORD *)(v1 + 24))
  {
    v56 = *(void **)(v1 + 16);
    if (!v56)
    {
      v59 = v164;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v164, 1, 1, v32);
      goto LABEL_20;
    }
    swift_retain(v44);
    v57 = v56;
    v58 = v164;
    sub_10007FEF8(v164);

    v59 = v58;
    v60 = v165;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v165 + 48))(v59, 1, v32) == 1)
    {
      swift_release(v44);
LABEL_20:
      sub_10000CC5C((uint64_t)v59, &qword_10013CD40);
      goto LABEL_21;
    }
    v162 = v22;
    v163 = v1;
    v75 = v59;
    v76 = v161;
    v77 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v60 + 32))(v161, v75, v32);
    v78 = v152;
    SFAirDrop.NearbySharingInteraction.state.getter(v77);
    v79 = v151;
    v80 = v153;
    if ((*(unsigned int (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v151 + 88))(v78, v153) == enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:))
    {
      v157 = v46;
      v159 = v32;
      v164 = v43;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v79 + 96))(v78, v80);
      v81 = v149;
      v82 = v162;
      v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v149 + 32))(v160, v78, v162);
      SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v83);
      v84 = v158;
      v153 = *(void (**)(_QWORD, _QWORD, _QWORD))(v156 + 104);
      v153(v155, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:), v158);
      v85 = sub_100008694(&qword_10013D270, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType, (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
      dispatch thunk of RawRepresentable.rawValue.getter(&v168, v84, v85);
      dispatch thunk of RawRepresentable.rawValue.getter(&v166, v84, v85);
      v86 = v169;
      v87 = v167;
      if (v168 == (_QWORD *)v166 && v169 == v167)
      {
        v88 = 1;
        v87 = v169;
      }
      else
      {
        v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v168, v169, v166, v167, 0);
      }
      v90 = v163;
      swift_bridgeObjectRelease(v87);
      swift_bridgeObjectRelease(v86);
      v91 = *(void (**)(char *, uint64_t (*)(char *, uint64_t)))(v156 + 8);
      v92 = v158;
      v91(v155, v158);
      v91(v154, v92);
      v93 = v148;
      v94 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 16))(v148, v160, v82);
      if ((v88 & 1) != 0)
      {
        v150 = v48;
        v158 = *(uint64_t (**)(char *, uint64_t))(v81 + 8);
        v95 = v158(v93, v82);
        v43 = v164;
      }
      else
      {
        SFAirDrop.NearbySharingInteraction.ConnectionContext.type.getter(v94);
        v153(v147, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.share(_:), v92);
        dispatch thunk of RawRepresentable.rawValue.getter(&v168, v92, v85);
        dispatch thunk of RawRepresentable.rawValue.getter(&v166, v92, v85);
        v96 = v169;
        v97 = v167;
        if (v168 == (_QWORD *)v166 && v169 == v167)
        {
          v98 = 1;
          v97 = v169;
        }
        else
        {
          v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v168, v169, v166, v167, 0);
        }
        v43 = v164;
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease(v96);
        v99 = v158;
        v91(v147, v158);
        v91(v146, v99);
        v100 = *(uint64_t (**)(char *, uint64_t))(v149 + 8);
        v95 = v100(v148, v82);
        if ((v98 & 1) == 0)
        {
          v129 = swift_release(v44);
          ((void (*)(char *, uint64_t, __n128))v100)(v160, v82, v129);
          (*(void (**)(char *, uint64_t))(v165 + 8))(v161, v159);
          LOBYTE(v46) = v157;
          goto LABEL_21;
        }
        v158 = v100;
        v150 = v48;
      }
      v101 = v159;
      LOBYTE(v46) = v157;
      v102 = v44 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime;
      v103 = v144;
      v104 = v161;
      SFAirDrop.NearbySharingInteraction.creationDate.getter(v95);
      v105 = static Date.> infix(_:_:)(v102, v103);
      v106 = *(void (**)(char *, uint64_t))(v143 + 8);
      v106(v103, v145);
      if ((v105 & 1) != 0)
      {
        v107 = v165;
        v108 = v142;
        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v142, v104, v101);
        v109 = swift_retain_n(v44, 2);
        v110 = Logger.logObject.getter(v109);
        v111 = static os_log_type_t.default.getter();
        v112 = v111;
        if (os_log_type_enabled(v110, v111))
        {
          v113 = swift_slowAlloc(22, -1);
          v156 = swift_slowAlloc(64, -1);
          v168 = (_QWORD *)v156;
          *(_DWORD *)v113 = 136315394;
          v114 = sub_100008694(&qword_1001416B8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v154 = (char *)v110;
          LODWORD(v155) = v112;
          v115 = v145;
          v116 = dispatch thunk of CustomStringConvertible.description.getter(v145, v114);
          v118 = v117;
          v166 = sub_10003A834(v116, v117, (uint64_t *)&v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
          swift_bridgeObjectRelease(v118);
          v119 = swift_release_n(v44, 2);
          *(_WORD *)(v113 + 12) = 2080;
          v120 = v144;
          SFAirDrop.NearbySharingInteraction.creationDate.getter(v119);
          v121 = dispatch thunk of CustomStringConvertible.description.getter(v115, v114);
          v123 = v122;
          v106(v120, v115);
          v166 = sub_10003A834(v121, v123, (uint64_t *)&v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, &v167);
          v124 = v123;
          v90 = v163;
          swift_bridgeObjectRelease(v124);
          v125 = *(void (**)(char *, uint64_t))(v165 + 8);
          v125(v108, v159);
          v126 = (os_log_t)v154;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v154, (os_log_type_t)v155, "Ending Boop due to AirDrop - transfer.startDate:%s > nearbySharingInteraction.creationDate:%s.", (uint8_t *)v113, 0x16u);
          v127 = v156;
          swift_arrayDestroy(v156, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v127, -1, -1);
          swift_slowDealloc(v113, -1, -1);

        }
        else
        {
          swift_release_n(v44, 2);
          v125 = *(void (**)(char *, uint64_t))(v107 + 8);
          v125(v108, v101);

        }
        v130 = *(void **)(v90 + 16);
        v131 = v162;
        if (v130)
        {
          v132 = v130;
          v133 = (uint64_t)v139;
          v134 = v161;
          SFAirDrop.NearbySharingInteraction.id.getter();
          sub_100085818(v133);

          v135 = swift_release(v44);
          (*(void (**)(uint64_t, uint64_t, __n128))(v140 + 8))(v133, v141, v135);
          v158(v160, v131);
          v136 = v134;
        }
        else
        {
          v137 = swift_release(v44);
          ((void (*)(char *, uint64_t, __n128))v158)(v160, v131, v137);
          v136 = v161;
        }
        v125(v136, v159);
        v43 = v164;
        LOBYTE(v46) = v157;
      }
      else
      {
        v128 = swift_release(v44);
        ((void (*)(char *, uint64_t, __n128))v158)(v160, v162, v128);
        (*(void (**)(char *, uint64_t))(v165 + 8))(v104, v101);
      }
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v76, v32);
    v89 = swift_release(v44);
    (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD), __n128))(v79 + 8))(v78, v80, v89);
  }
LABEL_21:
  v73 = swift_retain(v44);
  sub_1000D03D0(v73);
  if ((v46 & 1) == 0)
  {
    sub_1000D6ABC();
    swift_bridgeObjectRelease(v43);
    swift_release(v44);
    return v44;
  }
  sub_1000D0754();
  swift_release(v44);
LABEL_24:
  swift_bridgeObjectRelease(v43);
  return v44;
}

void sub_1000D03D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  char v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v1;
  v5 = type metadata accessor for ActivityState(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v40 - v12;
  v14 = *(_QWORD *)(v1 + 32);
  if (v14)
  {
    v42 = a1;
    v15 = v3;
    v16 = swift_retain(v14);
    dispatch thunk of Activity.activityState.getter(v16);
    v17 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
    v17(v10, enum case for ActivityState.dismissed(_:), v5);
    v18 = static ActivityState.== infix(_:_:)(v13, v10);
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19(v10, v5);
    v20 = ((uint64_t (*)(char *, uint64_t))v19)(v13, v5);
    if ((v18 & 1) != 0)
    {
      swift_release(v14);
      v3 = v15;
      a1 = v42;
    }
    else
    {
      dispatch thunk of Activity.activityState.getter(v20);
      v17(v10, enum case for ActivityState.ended(_:), v5);
      v21 = static ActivityState.== infix(_:_:)(v13, v10);
      v22 = swift_release(v14);
      ((void (*)(char *, uint64_t, __n128))v19)(v10, v5, v22);
      v19(v13, v5);
      v3 = v15;
      a1 = v42;
      if ((v21 & 1) == 0)
        return;
    }
  }
  if (qword_10013AD98 != -1)
    swift_once(&qword_10013AD98, sub_1000CF144);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100009558(v23, (uint64_t)qword_100141498);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Requesting AirDrop activity", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier + 8);
  v40 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferIdentifier);
  v41 = v28;
  swift_bridgeObjectRetain(v28);
  v29._countAndFlagsBits = 45;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x732D72656E6E6162;
  v30._object = (void *)0xEE006E6F69737365;
  String.append(_:)(v30);
  v31 = v41;
  v32 = sub_10006BEA8(v40, v41);
  swift_bridgeObjectRelease(v31);
  if (!v2)
  {
    v33 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = v32;
    swift_retain(v32);
    swift_release(v33);
    if (qword_10013ABF0 != -1)
      swift_once(&qword_10013ABF0, sub_100028C8C);
    v34 = qword_100147DA0;
    KeyPath = swift_getKeyPath(&unk_1000EF318);
    v36 = swift_getKeyPath(&unk_1000EF340);
    static Published.subscript.getter(&v40, v34, KeyPath, v36);
    swift_release(KeyPath);
    swift_release(v36);
    v37 = v40;
    if (v40)
    {
      v38 = *(_QWORD *)(v3 + 32);
      v39 = *(_QWORD *)(v40 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
      *(_QWORD *)(v40 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v38;
      swift_retain(v38);
      swift_release(v32);
      swift_release(v37);
      v32 = v39;
    }
    swift_release(v32);
  }
}

void sub_1000D0740()
{
  sub_1000D6ABC();
}

void sub_1000D0754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = qword_10013AD98;
    swift_retain(v1);
    if (v2 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v3 = type metadata accessor for Logger(0);
    sub_100009558(v3, (uint64_t)qword_100141498);
    v4 = swift_retain_n(v1, 2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v17 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = Activity.id.getter(v8);
      v11 = v10;
      v16 = sub_10003A834(v9, v10, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Releasing AirDrop banner for activity %s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

      v12 = swift_release_n(v1, 2);
    }
    v13 = Activity.id.getter(v12);
    v15 = v14;
    sub_1000D20B0(v13, v14);
    swift_release(v1);
    swift_bridgeObjectRelease(v15);
  }
}

double sub_1000D092C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = v0;
  v2 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100008F88(&qword_10013EA30);
  __chkstk_darwin(v7, v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + 32);
  if (v12)
  {
    v13 = qword_10013AD98;
    swift_retain(*(_QWORD *)(v0 + 32));
    if (v13 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v14 = type metadata accessor for Logger(0);
    sub_100009558(v14, (uint64_t)qword_100141498);
    v15 = swift_retain_n(v12, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v43 = v2;
      v19 = (uint8_t *)v18;
      v20 = swift_slowAlloc(32, -1);
      v42 = v3;
      v21 = v20;
      v46 = v20;
      v44 = v0;
      *(_DWORD *)v19 = 136315138;
      v22 = Activity.id.getter(v20);
      v24 = v23;
      v45 = sub_10003A834(v22, v23, &v46);
      v1 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_release_n(v12, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Releasing AirDrop banner and ending activity %s", v19, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      v25 = v21;
      v3 = v42;
      swift_slowDealloc(v25, -1, -1);
      v26 = v19;
      v2 = v43;
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_release_n(v12, 2);
    }
    v27 = sub_100008F88(&qword_10013EA38);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v11, 1, 1, v27);
    static ActivityUIDismissalPolicy.immediate.getter(v28);
    dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v11, v6);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v29 = sub_10000CC5C((uint64_t)v11, &qword_10013EA30);
    v30 = Activity.id.getter(v29);
    v32 = v31;
    sub_1000D20B0(v30, v31);
    swift_bridgeObjectRelease(v32);
    v33 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;
    swift_release(v33);
    if (qword_10013ABF0 != -1)
      swift_once(&qword_10013ABF0, sub_100028C8C);
    v34 = qword_100147DA0;
    KeyPath = swift_getKeyPath(&unk_1000EF318);
    v36 = swift_getKeyPath(&unk_1000EF340);
    static Published.subscript.getter(&v46, v34, KeyPath, v36);
    swift_release(KeyPath);
    swift_release(v36);
    v37 = v46;
    if (v46)
    {
      v38 = *(_QWORD *)(v1 + 32);
      v39 = *(_QWORD *)(v46 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
      *(_QWORD *)(v46 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v38;
      swift_retain(v38);
      swift_release(v12);
      swift_release(v37);
      v40 = v39;
    }
    else
    {
      v40 = v12;
    }
    *(_QWORD *)&result = swift_release(v40).n128_u64[0];
  }
  return result;
}

void sub_1000D0CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _TtC9AirDropUI33AirDropTransferSessionsController *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _TtC9AirDropUI33AirDropTransferSessionsController *v24;
  SEL v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v35;
  _TtC9AirDropUI33AirDropTransferSessionsController *v36;
  SEL v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 32);
  if (v4)
  {
    v5 = qword_10013AD98;
    swift_retain(*(_QWORD *)(v1 + 32));
    if (v5 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v6 = type metadata accessor for Logger(0);
    sub_100009558(v6, (uint64_t)qword_100141498);
    swift_retain_n(v4, 2);
    v7 = swift_retain_n(a1, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v47 = v44;
      *(_DWORD *)v10 = 136315394;
      v11 = Activity.id.getter(v44);
      v13 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v12;
      v45 = sub_10003A834(v11, v12, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
      v21 = swift_release_n(v4, 2);
      *(_WORD *)(v10 + 12) = 2080;
      v22 = Activity.id.getter(v21);
      v24 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v23;
      v45 = sub_10003A834(v22, v23, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v24, v25, v26, v27, v28, v29, v30, v31);
      swift_release_n(a1, 2);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ending AirDrop banner activity %s due to Boop banner activity: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_release_n(v4, 2);
      swift_release_n(a1, 2);
    }

    sub_1000D092C();
    swift_release(v4);
  }
  v32 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = a1;
  swift_retain(a1);
  swift_release(v32);
  v34 = Activity.id.getter(v33);
  v36 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v35;
  sub_1000D100C(v34, v35);
  swift_bridgeObjectRelease(v36, v37, v38, v39, v40, v41, v42, v43);
}

void sub_1000D0F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _TtC9AirDropUI33AirDropTransferSessionsController *v6;
  _TtC9AirDropUI33AirDropTransferSessionsController *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _TtC9AirDropUI33AirDropTransferSessionsController *v17;
  char v19;
  SEL v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  SEL v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 24);
  if (!v3)
  {
    Activity.id.getter(a1);
    v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v10;
    goto LABEL_12;
  }
  v4 = swift_retain(v3);
  v5 = Activity.id.getter(v4);
  v7 = v6;
  swift_release(v3);
  v9 = Activity.id.getter(v8);
  v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v10;
  if (!v7)
  {
LABEL_12:
    swift_bridgeObjectRelease(v17, v10, v11, v12, v13, v14, v15, v16);
    return;
  }
  if (v5 == v9 && v7 == (_TtC9AirDropUI33AirDropTransferSessionsController *)v10)
  {
    swift_bridgeObjectRelease_n(v7, 2);
    goto LABEL_11;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v10, 0);
  swift_bridgeObjectRelease(v7, v20, v21, v22, v23, v24, v25, v26);
  swift_bridgeObjectRelease(v17, v27, v28, v29, v30, v31, v32, v33);
  if ((v19 & 1) != 0)
  {
LABEL_11:
    v34 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    swift_release(v34);
    v36 = Activity.id.getter(v35);
    v17 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v37;
    sub_1000D20B0(v36, v37);
    goto LABEL_12;
  }
}

void sub_1000D100C(NSObject *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61;
  NSString v62;
  NSString v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, _QWORD, uint64_t);
  uint64_t v85;
  char *v86;
  char v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t KeyPath;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t aBlock[5];
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;

  v4 = v3;
  v5 = v2;
  v130 = type metadata accessor for ActivityState(0);
  v127 = *(_QWORD *)(v130 - 8);
  v9 = __chkstk_darwin(v130, v8);
  v129 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v128 = (char *)&v121 - v12;
  v13 = *(void **)(v2 + 40);
  if (!v13)
    goto LABEL_20;
  v14 = v13;
  v15 = objc_msgSend(v14, "sessionIdentifier");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  if (v16 == a1 && v18 == a2)
  {
    swift_bridgeObjectRelease(a2);
LABEL_12:

    if (!*(_QWORD *)(v5 + 40))
      goto LABEL_20;
    goto LABEL_13;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, a1, a2, 0);
  swift_bridgeObjectRelease(v18);
  if ((v20 & 1) != 0)
    goto LABEL_12;
  if (qword_10013AD98 != -1)
    swift_once(&qword_10013AD98, sub_1000CF144);
  v125 = v3;
  v21 = type metadata accessor for Logger(0);
  sub_100009558(v21, (uint64_t)qword_100141498);
  v22 = v14;
  swift_bridgeObjectRetain_n(a2, 2);
  v23 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  v26 = v25;
  v126 = v24;
  if (os_log_type_enabled(v24, v25))
  {
    v27 = swift_slowAlloc(22, -1);
    v123 = swift_slowAlloc(64, -1);
    aBlock[0] = v123;
    *(_DWORD *)v27 = 136315394;
    v28 = objc_msgSend(v23, "sessionIdentifier", v27 + 4);
    LODWORD(v122) = v26;
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

    v133 = sub_10003A834(v30, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
    swift_bridgeObjectRelease(v32);

    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v133 = sub_10003A834((uint64_t)a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
    swift_bridgeObjectRelease_n(a2, 3);
    v33 = v126;
    _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v122, "Releasing assertion for other activity %s in favour of new assertion for activity %s", (uint8_t *)v27, 0x16u);
    v34 = v123;
    swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v40 = objc_msgSend(v23, "sessionIdentifier");
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  sub_1000D20B0(v41, v43);
  swift_bridgeObjectRelease(v43);

  v4 = v125;
  if (!*(_QWORD *)(v5 + 40))
  {
LABEL_20:
    if ((*(_BYTE *)(v5 + 48) & 1) != 0)
    {
      if (qword_10013AD98 != -1)
        swift_once(&qword_10013AD98, sub_1000CF144);
      v44 = type metadata accessor for Logger(0);
      v45 = sub_100009558(v44, (uint64_t)qword_100141498);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Not taking assertion yet since banner is still showing", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      *(_BYTE *)(v5 + 49) = 1;
      return;
    }
    *(_BYTE *)(v5 + 49) = 0;
    if (qword_10013AD98 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v124 = v5;
    v126 = a1;
    v49 = type metadata accessor for Logger(0);
    v50 = sub_100009558(v49, (uint64_t)qword_100141498);
    v51 = swift_bridgeObjectRetain_n(a2, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter();
    v54 = os_log_type_enabled(v52, v53);
    v125 = v4;
    if (v54)
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = swift_slowAlloc(32, -1);
      aBlock[0] = v56;
      *(_DWORD *)v55 = 136315138;
      swift_bridgeObjectRetain(a2);
      v57 = v126;
      v133 = sub_10003A834((uint64_t)v126, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Acquire assertion START [sessionIdentifier = %s]", v55, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);

      v57 = v126;
    }
    v58 = swift_allocObject(&unk_100129CF0, 24, 7);
    v59 = v124;
    swift_weakInit(v58 + 16, v124);
    v60 = (_QWORD *)swift_allocObject(&unk_100129D18, 40, 7);
    v60[2] = v58;
    v60[3] = v57;
    v60[4] = a2;
    v61 = objc_allocWithZone((Class)SNAProminentPresentationAssertion);
    swift_bridgeObjectRetain(a2);
    v62 = String._bridgeToObjectiveC()();
    v63 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1000D6CF8;
    v132 = v60;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000D2E1C;
    aBlock[3] = (uint64_t)&unk_100129D30;
    v64 = _Block_copy(aBlock);
    v65 = objc_msgSend(v61, "initWithExplanation:sessionIdentifier:invalidationHandler:", v62, v63, v64, swift_release(v132).n128_f64[0]);
    _Block_release(v64);

    if (objc_msgSend(v65, "state") == (id)1)
    {
      v66 = *(void **)(v59 + 40);
      *(_QWORD *)(v59 + 40) = v65;
      v67 = v65;

      swift_bridgeObjectRetain_n(a2, 2);
      v68 = v67;
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc(22, -1);
        v72 = swift_slowAlloc(32, -1);
        aBlock[0] = v72;
        *(_DWORD *)v71 = 136315394;
        swift_bridgeObjectRetain(a2);
        v133 = sub_10003A834((uint64_t)v126, a2, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v71 + 12) = 2048;
        v73 = objc_msgSend(v68, "state");

        v133 = (uint64_t)v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);

        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Acquire assertion END [sessionIdentifier = %s, assertion state %lu]", (uint8_t *)v71, 0x16u);
        swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v71, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      return;
    }
    v74 = *(_QWORD *)(v59 + 32);
    v75 = v126;
    if (!v74)
      goto LABEL_53;
    v123 = v50;
    v76 = swift_retain(v74);
    v77 = Activity.id.getter(v76);
    v79 = v78;
    if (v77 == v75 && v78 == a2)
    {
      v80 = swift_bridgeObjectRelease(a2);
    }
    else
    {
      v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, v75, a2, 0);
      v80 = swift_bridgeObjectRelease(v79);
      if ((v81 & 1) == 0)
      {
LABEL_52:
        swift_release(v76);
LABEL_53:
        swift_bridgeObjectRetain_n(a2, 2);
        v113 = v65;
        v114 = Logger.logObject.getter(v113);
        v115 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v114, v115))
        {
          v116 = swift_slowAlloc(22, -1);
          v117 = swift_slowAlloc(32, -1);
          aBlock[0] = v117;
          *(_DWORD *)v116 = 136315394;
          swift_bridgeObjectRetain(a2);
          v133 = sub_10003A834((uint64_t)v75, a2, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);
          swift_bridgeObjectRelease_n(a2, 3);
          *(_WORD *)(v116 + 12) = 2048;
          v118 = objc_msgSend(v113, "state");

          v133 = (uint64_t)v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134);

          _os_log_impl((void *)&_mh_execute_header, v114, v115, "Acquire assertion FAIL [sessionIdentifier = %s, assertion state %lu]", (uint8_t *)v116, 0x16u);
          swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v117, -1, -1);
          swift_slowDealloc(v116, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n(a2, 2);
        }

        v119 = sub_1000D6D1C();
        swift_allocError(&type metadata for AirDropUIBannerManager.AssertionError, v119, 0, 0);
        *v120 = 0;
        v120[1] = 0;
        v120[2] = 1;
        swift_willThrow();
LABEL_57:

        return;
      }
    }
    v82 = v128;
    dispatch thunk of Activity.activityState.getter(v80);
    v83 = v127;
    v84 = *(void (**)(char *, _QWORD, uint64_t))(v127 + 104);
    v122 = v65;
    v86 = v129;
    v85 = v130;
    v84(v129, enum case for ActivityState.dismissed(_:), v130);
    v87 = static ActivityState.== infix(_:_:)(v82, v86);
    v88 = *(void (**)(char *, uint64_t))(v83 + 8);
    v89 = v86;
    v65 = v122;
    v88(v89, v85);
    v90 = ((uint64_t (*)(char *, uint64_t))v88)(v82, v85);
    if ((v87 & 1) != 0)
      goto LABEL_60;
    v91 = v128;
    dispatch thunk of Activity.activityState.getter(v90);
    v93 = v129;
    v92 = v130;
    v84(v129, enum case for ActivityState.ended(_:), v130);
    v94 = static ActivityState.== infix(_:_:)(v91, v93);
    v95 = v93;
    v65 = v122;
    v88(v95, v92);
    v88(v91, v92);
    if ((v94 & 1) != 0)
    {
LABEL_60:
      if (qword_10013ABF0 != -1)
        swift_once(&qword_10013ABF0, sub_100028C8C);
      v96 = qword_100147DA0;
      KeyPath = swift_getKeyPath(&unk_1000EF318);
      v98 = swift_getKeyPath(&unk_1000EF340);
      static Published.subscript.getter(aBlock, v96, KeyPath, v98);
      swift_release(v98);
      swift_release(KeyPath);
      v100 = aBlock[0];
      if (aBlock[0])
      {
        v101 = Logger.logObject.getter(v99);
        v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          v103 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v103 = 0;
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "Acquire assertion failed due to activity being ended, recreating activity and retrying...", v103, 2u);
          swift_slowDealloc(v103, -1, -1);
        }

        v104 = v124;
        v105 = *(_QWORD *)(v124 + 32);
        *(_QWORD *)(v124 + 32) = 0;
        swift_release(v105);
        v106 = qword_100147DA0;
        v107 = swift_getKeyPath(&unk_1000EF318);
        v108 = swift_getKeyPath(&unk_1000EF340);
        static Published.subscript.getter(aBlock, v106, v107, v108);
        swift_release(v108);
        swift_release(v107);
        v109 = aBlock[0];
        v110 = v125;
        if (aBlock[0])
        {
          v111 = *(_QWORD *)(v104 + 32);
          v112 = *(_QWORD *)(aBlock[0] + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity);
          *(_QWORD *)(aBlock[0] + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_activity) = v111;
          swift_retain(v111);
          swift_release(v112);
          swift_release(v109);
        }
        sub_1000D03D0(v100);
        if (!v110)
          sub_1000D6ABC();
        swift_release(v100);
        swift_release(v76);
        goto LABEL_57;
      }
    }
    goto LABEL_52;
  }
LABEL_13:
  if (qword_10013AD98 != -1)
    swift_once(&qword_10013AD98, sub_1000CF144);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_100009558(v35, (uint64_t)qword_100141498);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Not taking assertion as it is non-nil", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

}

uint64_t sub_1000D1DD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _BYTE v23[24];

  v10 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v10, v11);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a3 += 16;
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = swift_allocObject(&unk_100129CF0, 24, 7);
  swift_beginAccess(a3, v23, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  swift_weakInit(v15 + 16, Strong);
  swift_release(Strong);
  v17 = (_QWORD *)swift_allocObject(&unk_100129D68, 56, 7);
  v17[2] = v15;
  v17[3] = a4;
  v17[4] = a5;
  v17[5] = a1;
  v17[6] = a2;
  v18 = swift_allocObject(&unk_100129D90, 32, 7);
  *(_QWORD *)(v18 + 16) = &unk_1001416A8;
  *(_QWORD *)(v18 + 24) = v17;
  swift_bridgeObjectRetain(a5);
  v19 = a1;
  swift_errorRetain(a2);
  v20 = static Task<>.noThrow(priority:operation:)(v13, &unk_1001416B0, v18, (char *)&type metadata for () + 8);
  swift_release(v18);
  swift_release(v20);
  return sub_10000CC5C((uint64_t)v13, &qword_10013BCC0);
}

uint64_t sub_1000D1F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[10] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000D1FF0, v7, v8);
}

uint64_t sub_1000D1FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  __n128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 80));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    sub_1000D74A4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), (uint64_t)objc_msgSend(*(id *)(v0 + 64), "state"), (uint64_t)objc_msgSend(*(id *)(v0 + 64), "invalidationReason"), 0, *(_QWORD *)(v0 + 72));
    v3 = swift_release(v4);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

void sub_1000D20B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v5 = *(void **)(v2 + 40);
  if (v5)
  {
    v6 = v2;
    v7 = qword_10013AD98;
    v8 = v5;
    if (v7 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v9 = type metadata accessor for Logger(0);
    sub_100009558(v9, (uint64_t)qword_100141498);
    v10 = swift_bridgeObjectRetain_n(a2, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v29 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(a2);
      v28 = sub_10003A834(a1, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Release assertion START [sessionIdentifier = %s]", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    objc_msgSend(v8, "invalidate");
    v21 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;

    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v29 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(a2);
      v28 = sub_10003A834(a1, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Release assertion END [sessionIdentifier = %s]", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_10013AD98 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v15 = type metadata accessor for Logger(0);
    sub_100009558(v15, (uint64_t)qword_100141498);
    v16 = swift_bridgeObjectRetain_n(a2, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v29 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(a2);
      v28 = sub_10003A834(a1, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not releasing assertion for session identifier %s since assertion is nil", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      return;
    }

  }
  swift_bridgeObjectRelease_n(a2, 2);
}

uint64_t sub_1000D2504(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_100008F88(&qword_10013BCC0);
  result = __chkstk_darwin(v4, v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + 48) = a1;
  if ((a1 & 1) == 0)
  {
    if (qword_10013AD98 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100009558(v9, (uint64_t)qword_100141498);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Banner session dismissed", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
    v15 = swift_allocObject(&unk_100129CC8, 32, 7);
    *(_QWORD *)(v15 + 16) = &unk_100141688;
    *(_QWORD *)(v15 + 24) = v2;
    swift_retain(v2);
    v16 = static Task<>.noThrow(priority:operation:)(v8, &unk_10013FD00, v15, (char *)&type metadata for () + 8);
    swift_release(v15);
    swift_release(v16);
    return sub_10000CC5C((uint64_t)v8, &qword_10013BCC0);
  }
  return result;
}

uint64_t sub_1000D26B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 32) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000D2724, v3, v4);
}

uint64_t sub_1000D2724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  _TtC9AirDropUI33AirDropTransferSessionsController *v13;
  SEL v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  if (*(_BYTE *)(v1 + 49) == 1)
  {
    if (qword_10013AD98 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v2 = (uint64_t *)(v0 + 16);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100009558(v3, (uint64_t)qword_100141498);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Taking assertion for banner requested while racing", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 24);

    v9 = *(_QWORD *)(v8 + 24);
    if (v9)
    {
      swift_retain(v9);
      v11 = Activity.id.getter(v10);
      v13 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v12;
      sub_1000D100C(v11, v12);
      swift_release(v9);
      swift_bridgeObjectRelease(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      if (qword_10013ABF0 != -1)
        swift_once(&qword_10013ABF0, sub_100028C8C);
      v21 = qword_100147DA0;
      KeyPath = swift_getKeyPath(&unk_1000EF318);
      v23 = swift_getKeyPath(&unk_1000EF340);
      static Published.subscript.getter((_QWORD *)(v0 + 16), v21, KeyPath, v23);
      swift_release(KeyPath);
      swift_release(v23);
      v24 = *v2;
      if (*v2)
      {
        sub_1000D03D0(*v2);
        sub_1000D6ABC();
        swift_release(v24);
      }
      else
      {
        *(_BYTE *)(v1 + 49) = 0;
      }
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2A78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocClassInstance(v0, 50, 7);
}

uint64_t type metadata accessor for AirDropUIBannerManager()
{
  return objc_opt_self(_TtC9AirDropUI22AirDropUIBannerManager);
}

uint64_t sub_1000D2AD4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100141684);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100018F40;
  return sub_1000D26B8(v0);
}

uint64_t sub_1000D2B1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D2B40@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D2C90(a1, (uint64_t)&unk_1000EF3F0, (uint64_t)&unk_1000EF418, a2);
}

uint64_t sub_1000D2B54(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D2D10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&unk_1000EF3F0, (uint64_t)&unk_1000EF418);
}

uint64_t sub_1000D2B70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D2C90(a1, (uint64_t)&unk_1000EF3A8, (uint64_t)&unk_1000EF3D0, a2);
}

uint64_t sub_1000D2B84(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v16 - v10;
  sub_10000CC18(a1, (uint64_t)&v16 - v10, &qword_10013C9E0);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EF3A8);
  v14 = swift_getKeyPath(&unk_1000EF3D0);
  sub_10000CC18((uint64_t)v11, (uint64_t)v7, &qword_10013C9E0);
  swift_retain(v12);
  static Published.subscript.setter(v7, v12, KeyPath, v14);
  return sub_10000CC5C((uint64_t)v11, &qword_10013C9E0);
}

uint64_t sub_1000D2C7C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D2C90(a1, (uint64_t)&unk_1000EF438, (uint64_t)&unk_1000EF460, a2);
}

uint64_t sub_1000D2C90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(a4, v6, KeyPath, v8);
  swift_release(KeyPath);
  return swift_release(v8);
}

uint64_t sub_1000D2CF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D2D10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.DisplayPriority, (uint64_t)&unk_1000EF438, (uint64_t)&unk_1000EF460);
}

uint64_t sub_1000D2D10(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v25;

  v11 = a5(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v25 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)&v25 - v18, a1, v11);
  v21 = *a2;
  KeyPath = swift_getKeyPath(a6);
  v23 = swift_getKeyPath(a7);
  v20(v16, (uint64_t)v19, v11);
  swift_retain(v21);
  static Published.subscript.setter(v16, v21, KeyPath, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
}

void sub_1000D2E1C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

uint64_t sub_1000D2E98(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void *sub_1000D2EB8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

void sub_1000D2F4C(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

void (*sub_1000D2FFC(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000D3050(v6, a2, a3);
  return sub_100024D08;
}

uint64_t *sub_1000D3050(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_1000D30BC;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D30BC(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000D30C4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_1000D314C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_100018D44(0, &qword_100140AA8, TUConversationActivitySession_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_100018D44(0, &qword_100140AA8, TUConversationActivitySession_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_1000D33B4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000D343C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000D3490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  char v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  double v90;
  char *v91;
  int v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  int v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  int *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  char *v120;
  uint64_t v121;
  char *v122;
  double v123;
  void (*v124)(char *, uint64_t);
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  int v141;
  char *v142;
  double v143;
  void (*v144)(char *, uint64_t);
  double v145;
  uint64_t v146;
  char *v147;
  double v148;
  void (*v149)(char *, uint64_t);
  char *v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  double v158;
  void (*v159)(char *, uint64_t);
  int *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(char *, uint64_t);
  char *v172;
  char *v173;
  uint64_t v174;
  void (*v175)(char *, uint64_t);
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t v209;

  v196 = a6;
  v184 = a5;
  v199 = a4;
  v209 = a3;
  v207 = a2;
  v201 = a1;
  v6 = type metadata accessor for SFAirDrop.Progress(0);
  v197 = *(_QWORD *)(v6 - 8);
  v198 = v6;
  __chkstk_darwin(v6, v7);
  v190 = (char *)&v177 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for SFAirDropReceive.Failure(0);
  v179 = *(_QWORD *)(v181 - 8);
  v10 = __chkstk_darwin(v181, v9);
  v178 = (char *)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v180 = (char *)&v177 - v13;
  v15 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v14);
  v202 = *(_QWORD *)(v15 - 8);
  v203 = v15;
  __chkstk_darwin(v15, v16);
  v204 = (char *)&v177 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for SFAirDropSend.Failure(0);
  v193 = *(_QWORD *)(v195 - 8);
  v19 = __chkstk_darwin(v195, v18);
  v192 = (char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  v194 = (char *)&v177 - v22;
  v23 = sub_100008F88(&qword_10013CD20);
  v25 = __chkstk_darwin(v23, v24);
  v188 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25, v27);
  v189 = (uint64_t)&v177 - v29;
  v31 = __chkstk_darwin(v28, v30);
  v183 = (uint64_t)&v177 - v32;
  __chkstk_darwin(v31, v33);
  v35 = (char *)&v177 - v34;
  v200 = type metadata accessor for Date(0);
  v206 = *(_QWORD *)(v200 - 8);
  v37 = __chkstk_darwin(v200, v36);
  v185 = (char *)&v177 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v37, v39);
  v186 = (char *)&v177 - v41;
  v43 = __chkstk_darwin(v40, v42);
  v187 = (char *)&v177 - v44;
  v46 = __chkstk_darwin(v43, v45);
  v182 = (char *)&v177 - v47;
  v49 = __chkstk_darwin(v46, v48);
  v191 = (char *)&v177 - v50;
  v52 = __chkstk_darwin(v49, v51);
  v54 = (char *)&v177 - v53;
  __chkstk_darwin(v52, v55);
  v57 = (char *)&v177 - v56;
  v58 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v58, v59);
  v61 = (char *)&v177 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v63 = *(_QWORD *)(v62 - 8);
  v65 = __chkstk_darwin(v62, v64);
  v205 = (char *)&v177 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65, v67);
  *(_QWORD *)&v208 = (char *)&v177 - v68;
  v69 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v70 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69, v71);
  v73 = (char *)&v177 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v73, enum case for SFAirDrop.DisplayPriority.high(_:), v69);
  v74 = sub_100008694(&qword_1001416C0, (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.DisplayPriority, (uint64_t)&protocol conformance descriptor for SFAirDrop.DisplayPriority);
  v75 = dispatch thunk of static Equatable.== infix(_:_:)(v209, v73, v69, v74);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v73, v69);
  if ((v75 & 1) != 0)
  {
    if (qword_10013AD98 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v76 = type metadata accessor for Logger(0);
    v77 = sub_100009558(v76, (uint64_t)qword_100141498);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Showing banner because high display priority was requested", v80, 2u);
      swift_slowDealloc(v80, -1, -1);
    }

    goto LABEL_7;
  }
  sub_10000CC18(v207, (uint64_t)v61, &qword_10013C9E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62) != 1)
  {
    v90 = v208;
    (*(void (**)(double, char *, uint64_t))(v63 + 32))(COERCE_DOUBLE(*(_QWORD *)&v208), v61, v62);
    v91 = v205;
    (*(void (**)(char *, double, uint64_t))(v63 + 16))(v205, COERCE_DOUBLE(*(_QWORD *)&v90), v62);
    v92 = (*(uint64_t (**)(char *, uint64_t))(v63 + 88))(v91, v62);
    if (v92 == enum case for SFAirDropSend.Transfer.State.transferring(_:))
    {
      (*(void (**)(char *, uint64_t))(v63 + 96))(v91, v62);
      swift_bridgeObjectRelease(*((_QWORD *)v91 + 1));
      v93 = (int *)sub_100008F88(&qword_10013BCA0);
      swift_bridgeObjectRelease(*(_QWORD *)&v91[v93[16] + 8]);
      sub_10000CC18(v199, (uint64_t)v35, &qword_10013CD20);
      v94 = v206;
      v95 = v200;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v35, 1, v200) == 1)
      {
        (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
        sub_10000CC5C((uint64_t)v35, &qword_10013CD20);
        v81 = 0;
        v96 = v198;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v57, v35, v95);
        v110 = (*(uint64_t (**)(char *, char *, uint64_t))(v94 + 16))(v54, v57, v95);
        v96 = v198;
        if ((v196 & 1) != 0)
        {
          v111 = *(void (**)(char *, uint64_t))(v94 + 8);
          v111(v54, v95);
          v111(v57, v95);
          (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
          v81 = 0;
        }
        else
        {
          v122 = v191;
          static Date.now.getter(v110);
          v123 = Date.timeIntervalSince(_:)(v54);
          v124 = *(void (**)(char *, uint64_t))(v206 + 8);
          v124(v122, v95);
          v124(v54, v95);
          v124(v57, v95);
          (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
          v81 = v123 <= 3.0;
        }
      }
      v125 = &v91[v93[12]];
      v126 = &v91[v93[20]];
      v127 = type metadata accessor for SFAirDrop.DeclineAction(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v127 - 8) + 8))(v126, v127);
      (*(void (**)(char *, uint64_t))(v197 + 8))(v125, v96);
      return v81 & 1;
    }
    if (v92 != enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
    {
      v119 = *(void (**)(char *, uint64_t))(v63 + 8);
      v119(*(char **)&v208, v62);
      v120 = v91;
LABEL_31:
      v119(v120, v62);
      v81 = 0;
      return v81 & 1;
    }
    (*(void (**)(char *, uint64_t))(v63 + 96))(v91, v62);
    v103 = sub_100008F88(&qword_10013BC90);
    v104 = v193;
    v105 = v194;
    v106 = v195;
    (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v194, &v91[*(int *)(v103 + 48)], v195);
    v107 = v192;
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v192, v105, v106);
    v108 = (*(uint64_t (**)(char *, uint64_t))(v104 + 88))(v107, v106);
    if (v108 == enum case for SFAirDropSend.Failure.missingEndpoint(_:))
      goto LABEL_23;
    if (v108 != enum case for SFAirDropSend.Failure.resolveFailure(_:))
    {
      if (v108 == enum case for SFAirDropSend.Failure.unexpected(_:))
      {
LABEL_23:
        v109 = *(void (**)(char *, uint64_t))(v104 + 8);
        v109(v105, v106);
        (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
        v109(v107, v106);
LABEL_24:
        v81 = 1;
LABEL_34:
        v121 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v121 - 8) + 8))(v91, v121);
        return v81 & 1;
      }
      if (v108 != enum case for SFAirDropSend.Failure.receiverDeclined(_:)
        && v108 != enum case for SFAirDropSend.Failure.cancelled(_:))
      {
        if (v108 == enum case for SFAirDropSend.Failure.unsupportedConnection(_:)
          || v108 == enum case for SFAirDropSend.Failure.badRequest(_:)
          || v108 == enum case for SFAirDropSend.Failure.badResponse(_:)
          || v108 == enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:)
          || v108 == enum case for SFAirDropSend.Failure.streamError(_:)
          || v108 == enum case for SFAirDropSend.Failure.missingOwnContact(_:))
        {
          (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v106);
          (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
          goto LABEL_24;
        }
        if (v108 == enum case for SFAirDropSend.Failure.missingRecordData(_:)
          || v108 == enum case for SFAirDropSend.Failure.serverError(_:))
        {
          (*(void (**)(char *, uint64_t))(v193 + 8))(v194, v195);
          (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
          v81 = 1;
          v91 = v205;
          goto LABEL_34;
        }
        v91 = v205;
        v105 = v194;
        v106 = v195;
        v104 = v193;
        if (v108 != enum case for SFAirDropSend.Failure.insufficientStorage(_:))
        {
          v168 = _diagnoseUnexpectedEnumCase<A>(type:)(v195, v195);
          __break(1u);
          goto LABEL_95;
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v106);
    (*(void (**)(double, uint64_t))(v63 + 8))(COERCE_DOUBLE(*(_QWORD *)&v208), v62);
    v81 = 0;
    goto LABEL_34;
  }
  sub_10000CC5C((uint64_t)v61, &qword_10013C9E0);
  v83 = v202;
  v84 = v203;
  v85 = v204;
  (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v204, v201, v203);
  v86 = (*(uint64_t (**)(char *, uint64_t))(v83 + 88))(v85, v84);
  if (v86 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v87 = sub_100008F88(&qword_10013CA70);
LABEL_12:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v85, v87);
    v88 = sub_100018D44(0, (unint64_t *)&qword_10013BCF0, NSUserDefaults_ptr);
    v89 = (void *)static NSUserDefaults.airdrop.getter(v88);
    v81 = SFAirDropUserDefaults.systemLevelProgressEnabled.getter();

    return v81 & 1;
  }
  v97 = v206;
  if (v86 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v98 = (uint64_t *)&unk_10013BDF8;
LABEL_18:
    v99 = &v85[*(int *)(sub_100008F88(v98) + 48)];
    v100 = (uint64_t *)&unk_10013DC90;
LABEL_19:
    v101 = sub_100008F88(v100);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v101 - 8) + 8))(v99, v101);
    v102 = type metadata accessor for SFAirDrop.ContactInfo(0);
LABEL_20:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v102 - 8) + 8))(v85, v102);
LABEL_7:
    v81 = 1;
    return v81 & 1;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v112 = (int *)sub_100008F88((uint64_t *)&unk_10013DC80);
    v113 = &v85[v112[12]];
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v112[16] + 8]);
    v115 = v197;
    v114 = v198;
    v116 = v190;
    (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v190, v113, v198);
    v117 = v189;
    sub_10000CC18(v199, v189, &qword_10013CD20);
    v118 = v200;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v117, 1, v200) == 1)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v114);
      sub_10000CC5C(v117, &qword_10013CD20);
    }
    else
    {
      v133 = v187;
      v134 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 32))(v187, v117, v118);
      if ((v196 & 1) == 0)
      {
        v208 = COERCE_DOUBLE(SFAirDrop.Progress.percent.getter(v134));
        LODWORD(v209) = v141;
        v142 = v191;
        static Date.now.getter(*(_QWORD *)&v208);
        v143 = Date.timeIntervalSince(_:)(v133);
        v144 = *(void (**)(char *, uint64_t))(v97 + 8);
        v144(v142, v118);
        v144(v133, v118);
        (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v114);
        if ((v209 & 1) != 0 || v208 <= 0.9)
          v145 = 3.0;
        else
          v145 = 4.0;
        v81 = v143 <= v145;
        goto LABEL_66;
      }
      (*(void (**)(char *, uint64_t))(v97 + 8))(v133, v118);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v114);
    }
    v81 = 0;
LABEL_66:
    v150 = &v85[v112[20]];
    v151 = type metadata accessor for SFAirDrop.DeclineAction(0);
LABEL_67:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v151 - 8) + 8))(v150, v151);
    v152 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
LABEL_68:
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v152 - 8) + 8))(v85, v152);
    return v81 & 1;
  }
  v62 = v200;
  if (v86 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v128 = sub_100008F88(&qword_10013CAB0);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[*(int *)(v128 + 48)]);
    v129 = &v85[*(int *)(v128 + 80)];
    v130 = type metadata accessor for SFAirDrop.DeclineAction(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v130 - 8) + 8))(v129, v130);
LABEL_39:
    v131 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v131 - 8) + 8))(v85, v131);
    v132 = v188;
    sub_10000CC18(v199, v188, &qword_10013CD20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v132, 1, v62) == 1)
    {
      sub_10000CC5C(v132, &qword_10013CD20);
      v81 = 0;
      return v81 & 1;
    }
    v138 = v186;
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v186, v132, v62);
    v139 = v185;
    v140 = (*(uint64_t (**)(char *, char *, uint64_t))(v97 + 16))(v185, v138, v62);
    if ((v196 & 1) == 0)
    {
      v147 = v191;
      static Date.now.getter(v140);
      v148 = Date.timeIntervalSince(_:)(v139);
      v149 = *(void (**)(char *, uint64_t))(v97 + 8);
      v149(v147, v62);
      v149(v139, v62);
      v149(v138, v62);
      v81 = v148 <= 5.0;
      return v81 & 1;
    }
    v119 = *(void (**)(char *, uint64_t))(v97 + 8);
    v119(v139, v62);
    v120 = v138;
    goto LABEL_31;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v135 = sub_100008F88(&qword_10013CAD0);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[*(int *)(v135 + 48)]);
    v136 = &v85[*(int *)(v135 + 64)];
    v137 = sub_100008F88(&qword_10013CA70);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v137 - 8) + 8))(v136, v137);
    v102 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    goto LABEL_20;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v146 = sub_100008F88((uint64_t *)&unk_10013DC70);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[*(int *)(v146 + 48)]);
    goto LABEL_39;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v153 = (int *)sub_100008F88(&qword_10013BDE0);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v153[12]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v153[16]]);
    v154 = v183;
    sub_10000CC18(v184, v183, &qword_10013CD20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v154, 1, v62) == 1)
    {
      sub_10000CC5C(v154, &qword_10013CD20);
      v81 = 0;
    }
    else
    {
      v155 = v182;
      v156 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 32))(v182, v154, v62);
      v157 = v191;
      static Date.now.getter(v156);
      v158 = Date.timeIntervalSince(_:)(v155);
      v159 = *(void (**)(char *, uint64_t))(v97 + 8);
      v159(v157, v62);
      v159(v155, v62);
      v81 = v158 <= 7.0;
    }
    v150 = &v85[v153[20]];
    v151 = sub_100008F88(&qword_10013CA70);
    goto LABEL_67;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v99 = &v85[*(int *)(sub_100008F88(&qword_10013BDF0) + 48)];
    v100 = &qword_10013CA70;
    goto LABEL_19;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v98 = (uint64_t *)&unk_10013DCE0;
    goto LABEL_18;
  }
  if (v86 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
    v160 = (int *)sub_100008F88(&qword_10013DCD0);
    v161 = &v85[v160[12]];
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v160[16] + 8]);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v160[20]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v160[24]]);
    swift_bridgeObjectRelease(*(_QWORD *)&v85[v160[28]]);
    v162 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v162 - 8) + 8))(v161, v162);
    v87 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
    goto LABEL_12;
  }
  if (v86 != enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v84);
    v81 = 0;
    return v81 & 1;
  }
  (*(void (**)(char *, uint64_t))(v83 + 96))(v85, v84);
  v163 = sub_100008F88(&qword_10013DCC0);
  v164 = v179;
  v165 = v180;
  v166 = v181;
  (*(void (**)(char *, char *, uint64_t))(v179 + 32))(v180, &v85[*(int *)(v163 + 48)], v181);
  v167 = v178;
  (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v178, v165, v166);
  v168 = (*(uint64_t (**)(char *, uint64_t))(v164 + 88))(v167, v166);
  if (v168 == enum case for SFAirDropReceive.Failure.unsupportedType(_:))
  {
    v169 = v179;
    v170 = v181;
    (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
    v171 = *(void (**)(char *, uint64_t))(v169 + 96);
    v172 = v178;
    v171(v178, v170);
    swift_bridgeObjectRelease(*((_QWORD *)v172 + 1));
    v173 = &v172[*(int *)(sub_100008F88(&qword_10013DCC8) + 48)];
    v174 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v174 - 8) + 8))(v173, v174);
    v81 = 1;
LABEL_101:
    v152 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
    goto LABEL_68;
  }
  if (v168 == enum case for SFAirDropReceive.Failure.unexpected(_:))
  {
    v175 = *(void (**)(char *, uint64_t))(v179 + 8);
    v176 = v181;
    v175(v180, v181);
    v175(v178, v176);
    v81 = 1;
LABEL_100:
    v85 = v204;
    goto LABEL_101;
  }
  if (v168 == enum case for SFAirDropReceive.Failure.declined(_:)
    || v168 == enum case for SFAirDropReceive.Failure.askDismissed(_:))
  {
    goto LABEL_99;
  }
  if (v168 == enum case for SFAirDropReceive.Failure.senderCancelled(_:))
  {
LABEL_92:
    (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
    v81 = 1;
    goto LABEL_100;
  }
LABEL_95:
  if (v168 == enum case for SFAirDropReceive.Failure.receiverCancelled(_:)
    || v168 == enum case for SFAirDropReceive.Failure.mixedTypes(_:))
  {
    goto LABEL_99;
  }
  if (v168 == enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:))
    goto LABEL_92;
  if (v168 == enum case for SFAirDropReceive.Failure.missingOwnContact(_:))
  {
LABEL_99:
    (*(void (**)(char *, uint64_t))(v179 + 8))(v180, v181);
    v81 = 0;
    goto LABEL_100;
  }
  if (v168 == enum case for SFAirDropReceive.Failure.streamError(_:)
    || v168 == enum case for SFAirDropReceive.Failure.askNotHandled(_:)
    || v168 == enum case for SFAirDropReceive.Failure.incompleteTransfer(_:)
    || v168 == enum case for SFAirDropReceive.Failure.badRequest(_:)
    || v168 == enum case for SFAirDropReceive.Failure.moveToAppFailed(_:)
    || v168 == enum case for SFAirDropReceive.Failure.insufficientStorage(_:))
  {
    goto LABEL_92;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v181, v181);
  __break(1u);
  return result;
}

void sub_1000D4908(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t i;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int64_t v62;
  char v63[24];
  char v64[32];
  _QWORD *v65;

  v2 = sub_100008F88(&qword_10013CD20);
  v4 = __chkstk_darwin(v2, v3);
  v60 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v59 = (char *)&v49 - v7;
  v8 = type metadata accessor for SFAirDrop.DisplayPriority(0);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  __chkstk_darwin(v8, v9);
  v56 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v11, v12);
  v55 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v14);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  __chkstk_darwin(v15, v16);
  v52 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v61 = a1;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v65 = &_swiftEmptyArrayStorage;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  else
    v23 = -1;
  v24 = v23 & v19;
  v50 = v20;
  v51 = (unint64_t)(v22 + 63) >> 6;
  v25 = v52;
  v27 = v55;
  v26 = v56;
  v29 = (uint64_t)v59;
  v28 = (uint64_t)v60;
  if ((v23 & v19) != 0)
    goto LABEL_7;
LABEL_8:
  v32 = v18 + 1;
  if (!__OFADD__(v18, 1))
  {
    if (v32 < v51)
    {
      v33 = *(_QWORD *)(v50 + 8 * v32);
      v34 = v18 + 1;
      if (v33)
        goto LABEL_23;
      v34 = v18 + 2;
      if (v18 + 2 >= v51)
        goto LABEL_27;
      v33 = *(_QWORD *)(v50 + 8 * v34);
      if (v33)
        goto LABEL_23;
      v34 = v18 + 3;
      if (v18 + 3 >= v51)
        goto LABEL_27;
      v33 = *(_QWORD *)(v50 + 8 * v34);
      if (v33)
        goto LABEL_23;
      v34 = v18 + 4;
      if (v18 + 4 >= v51)
        goto LABEL_27;
      v33 = *(_QWORD *)(v50 + 8 * v34);
      if (v33)
      {
LABEL_23:
        v24 = (v33 - 1) & v33;
        v62 = v34;
        for (i = __clz(__rbit64(v33)) + (v34 << 6); ; i = v30 | (v18 << 6))
        {
          v36 = *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * i);
          KeyPath = swift_getKeyPath(&unk_1000EF3F0);
          v38 = swift_getKeyPath(&unk_1000EF418);
          v39 = swift_retain(v36);
          static Published.subscript.getter(v25, v39, KeyPath, v38);
          swift_release(KeyPath);
          swift_release(v38);
          v40 = swift_getKeyPath(&unk_1000EF3A8);
          v41 = swift_getKeyPath(&unk_1000EF3D0);
          static Published.subscript.getter(v27, v36, v40, v41);
          swift_release(v40);
          swift_release(v41);
          v42 = swift_getKeyPath(&unk_1000EF438);
          v43 = swift_getKeyPath(&unk_1000EF460);
          static Published.subscript.getter(v26, v36, v42, v43);
          swift_release(v42);
          swift_release(v43);
          v44 = v36 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime;
          swift_beginAccess(v36 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_transferringStateStartTime, v64, 0, 0);
          sub_10000CC18(v44, v29, &qword_10013CD20);
          v45 = v36 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
          swift_beginAccess(v36 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v63, 0, 0);
          sub_10000CC18(v45, v28, &qword_10013CD20);
          LOBYTE(v45) = sub_1000D3490((uint64_t)v25, (uint64_t)v27, (uint64_t)v26, v29, v28, *(unsigned __int8 *)(v36+ OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled));
          sub_10000CC5C(v28, &qword_10013CD20);
          sub_10000CC5C(v29, &qword_10013CD20);
          (*(void (**)(_QWORD *, uint64_t))(v57 + 8))(v26, v58);
          sub_10000CC5C((uint64_t)v27, &qword_10013C9E0);
          v46 = (*(uint64_t (**)(_QWORD *, uint64_t))(v53 + 8))(v25, v54);
          if ((v45 & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v46);
            v47 = v65[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
            v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v36);
            specialized ContiguousArray._endMutation()(v48);
            v18 = v62;
            if (!v24)
              goto LABEL_8;
          }
          else
          {
            swift_release(v36);
            v18 = v62;
            if (!v24)
              goto LABEL_8;
          }
LABEL_7:
          v30 = __clz(__rbit64(v24));
          v24 &= v24 - 1;
          v62 = v18;
        }
      }
      v35 = v18 + 5;
      if (v18 + 5 < v51)
      {
        v33 = *(_QWORD *)(v50 + 8 * v35);
        if (v33)
        {
          v34 = v18 + 5;
          goto LABEL_23;
        }
        while (1)
        {
          v34 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_29;
          if (v34 >= v51)
            break;
          v33 = *(_QWORD *)(v50 + 8 * v34);
          ++v35;
          if (v33)
            goto LABEL_23;
        }
      }
    }
LABEL_27:
    swift_release(v61);
    return;
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_1000D4DCC(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void (*v139)(unint64_t, unint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  __n128 v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  char *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  __n128 v189;
  uint64_t v190;
  int v191;
  uint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  BOOL v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  __n128 v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t result;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __n128 v231;
  uint64_t v232;
  int *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  double v245;
  void (*v246)(char *, uint64_t);
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  unint64_t v263;
  char *v264;
  uint64_t v265;
  char v266;
  BOOL v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int (*v277)(uint64_t, uint64_t, uint64_t);
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char v282;
  void (*v283)(char *, uint64_t);
  uint64_t v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  int v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  _QWORD *v297;
  _QWORD *v298;
  char *v299;
  char *v300;
  _QWORD *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  char v309[24];
  char v310[24];
  _QWORD v311[2];

  v3 = sub_100008F88(&qword_10013CD20);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (unint64_t)&v284 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (char *)&v284 - v10;
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v284 - v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v284 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v284 - v23;
  v26 = __chkstk_darwin(v22, v25);
  v294 = (char *)&v284 - v27;
  __chkstk_darwin(v26, v28);
  v293 = (char *)&v284 - v29;
  v31 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v30);
  v303 = *(_QWORD *)(v31 - 8);
  v304 = v31;
  v33 = __chkstk_darwin(v31, v32);
  v295 = (char *)&v284 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33, v35);
  v297 = (uint64_t *)((char *)&v284 - v37);
  v39 = __chkstk_darwin(v36, v38);
  v298 = (uint64_t *)((char *)&v284 - v40);
  v42 = __chkstk_darwin(v39, v41);
  v301 = (uint64_t *)((char *)&v284 - v43);
  __chkstk_darwin(v42, v44);
  v302 = (char *)&v284 - v45;
  v46 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v307 = *(_QWORD *)(v46 - 8);
  v308 = v46;
  v48 = __chkstk_darwin(v46, v47);
  v299 = (char *)&v284 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48, v50);
  v296 = (char *)&v284 - v51;
  v52 = sub_100008F88(&qword_10013C9E0);
  v54 = __chkstk_darwin(v52, v53);
  v300 = (char *)&v284 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __chkstk_darwin(v54, v56);
  v306 = (char *)&v284 - v58;
  __chkstk_darwin(v57, v59);
  v61 = (uint64_t *)((char *)&v284 - v60);
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v290 = v14;
  v289 = v24;
  v291 = v16;
  v62 = swift_bridgeObjectRetain(a1);
  sub_1000D4908(v62);
  v64 = v63;
  v288 = v20;
  v65 = v63 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v63 >> 62)
  {
    v116 = v63;
    if (v63 >= 0)
      v64 = v63 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v63);
    v117 = _CocoaArrayWrapper.endIndex.getter(v64);
    v305 = v116;
    swift_bridgeObjectRelease(v116);
    if (!v117)
    {
      v164 = sub_1000CEDFC(a1);
      if (v164)
      {
        v70 = v164;
        if ((*(_BYTE *)(v164 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) != 0)
          goto LABEL_10;
        swift_release(v164);
      }
    }
    v66 = 0;
    v64 = v305;
    goto LABEL_68;
  }
  if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v66 = 0;
    goto LABEL_5;
  }
  v305 = v63;
  v69 = sub_1000CEDFC(a1);
  if (v69)
  {
    v70 = v69;
    if ((*(_BYTE *)(v69 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_systemApertureIsEnabled) & 1) != 0)
    {
LABEL_10:
      swift_bridgeObjectRelease(v305);
      v71 = swift_bridgeObjectRetain(a1);
      sub_1000D6E10(v71, v72);
      v74 = v73;
      v75 = v70;
      v64 = v74;
      swift_release(v75);
      v65 = v64 & 0xFFFFFFFFFFFFFF8;
      v66 = 1;
      if ((v64 & 0x8000000000000000) == 0 && (v64 & 0x4000000000000000) == 0)
      {
LABEL_5:
        v67 = *(_QWORD *)(v65 + 16);
        if (!v67)
          goto LABEL_71;
        goto LABEL_15;
      }
LABEL_68:
      a1 = v64;
      if (v64 >= 0)
        v64 = v65;
      swift_bridgeObjectRetain(a1);
      v118 = v64;
      v64 = a1;
      v67 = _CocoaArrayWrapper.endIndex.getter(v118);
      swift_bridgeObjectRelease(a1);
      if (!v67)
        goto LABEL_71;
      goto LABEL_15;
    }
    swift_release(v69);
  }
  v66 = 0;
  v64 = v305;
  v67 = *(_QWORD *)(v65 + 16);
  if (!v67)
  {
LABEL_71:
    swift_bridgeObjectRelease(v64);
    return 0;
  }
LABEL_15:
  v311[0] = &_swiftEmptyArrayStorage;
  if (v67 < 1)
  {
    __break(1u);
  }
  else
  {
    v287 = v15;
    v286 = v11;
    v285 = v7;
    v292 = v66;
    v76 = v64 & 0xC000000000000001;
    swift_bridgeObjectRetain(v64);
    v77 = 0;
    v1 = v64;
    do
    {
      if (v76)
      {
        v78 = specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v64);
      }
      else
      {
        v78 = *(_QWORD *)(v64 + 8 * v77 + 32);
        swift_retain(v78);
      }
      KeyPath = swift_getKeyPath(&unk_1000EF3A8);
      v80 = swift_getKeyPath(&unk_1000EF3D0);
      static Published.subscript.getter(v61, v78, KeyPath, v80);
      swift_release(KeyPath);
      v81 = swift_release(v80);
      v66 = *(_QWORD *)(v307 + 48);
      LODWORD(KeyPath) = ((uint64_t (*)(_QWORD *, uint64_t, unint64_t, __n128))v66)(v61, 1, v308, v81);
      v82 = sub_10000CC5C((uint64_t)v61, &qword_10013C9E0);
      if ((_DWORD)KeyPath == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v82);
        v83 = *(_QWORD *)(v311[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v83);
        v84 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v78);
        specialized ContiguousArray._endMutation()(v84);
      }
      else
      {
        swift_release(v78);
      }
      ++v77;
      v64 = v1;
    }
    while (v67 != v77);
    swift_bridgeObjectRelease(v1);
    v85 = 0;
    v305 = v311[0];
    v311[0] = &_swiftEmptyArrayStorage;
    v86 = v306;
    do
    {
      if (v76)
      {
        v87 = specialized _ArrayBuffer._getElementSlowPath(_:)(v85, v64);
      }
      else
      {
        v87 = *(_QWORD *)(v64 + 8 * v85 + 32);
        swift_retain(v87);
      }
      v88 = swift_getKeyPath(&unk_1000EF3A8);
      v89 = swift_getKeyPath(&unk_1000EF3D0);
      static Published.subscript.getter(v86, v87, v88, v89);
      swift_release(v88);
      v90 = swift_release(v89);
      a1 = ((uint64_t (*)(_QWORD *, uint64_t, unint64_t, __n128))v66)(v86, 1, v308, v90);
      v91 = sub_10000CC5C((uint64_t)v86, &qword_10013C9E0);
      if ((_DWORD)a1 == 1)
      {
        swift_release(v87);
      }
      else
      {
        a1 = (uint64_t)v311;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v91);
        v92 = *(_QWORD *)(v311[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v92);
        v93 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v92, v87);
        specialized ContiguousArray._endMutation()(v93);
      }
      ++v85;
      v64 = v1;
    }
    while (v67 != v85);
    swift_bridgeObjectRelease(v1);
    v67 = v311[0];
    v7 = v305;
    if ((v305 & 0x8000000000000000) == 0 && (v305 & 0x4000000000000000) == 0)
    {
      v94 = *(_QWORD *)(v305 + 16);
      v95 = v300;
      if (v94)
        goto LABEL_35;
LABEL_74:
      swift_release(v7);
      v311[0] = &_swiftEmptyArrayStorage;
      if ((v67 & 0x8000000000000000) == 0 && (v67 & 0x4000000000000000) == 0)
      {
        v108 = *(_QWORD *)(v67 + 16);
        swift_retain(v67);
        goto LABEL_77;
      }
LABEL_135:
      v165 = swift_retain(v67);
      v108 = _CocoaArrayWrapper.endIndex.getter(v165);
LABEL_77:
      v7 = (unint64_t)v296;
      if (v108)
      {
        if (v108 < 1)
        {
          __break(1u);
          goto LABEL_144;
        }
        v120 = 0;
        LODWORD(v306) = enum case for SFAirDropSend.Transfer.State.transferFailed(_:);
        do
        {
          if ((v67 & 0xC000000000000001) != 0)
          {
            v94 = specialized _ArrayBuffer._getElementSlowPath(_:)(v120, v67);
          }
          else
          {
            v94 = *(_QWORD *)(v67 + 8 * v120 + 32);
            swift_retain(v94);
          }
          v121 = swift_getKeyPath(&unk_1000EF3A8);
          v122 = swift_getKeyPath(&unk_1000EF3D0);
          static Published.subscript.getter(v95, v94, v121, v122);
          swift_release(v121);
          v123 = swift_release(v122);
          v124 = v308;
          if (((unsigned int (*)(_QWORD *, uint64_t, unint64_t, __n128))v66)(v95, 1, v308, v123) == 1)
          {
            sub_10000CC5C((uint64_t)v95, &qword_10013C9E0);
            swift_release(v94);
          }
          else
          {
            v125 = v307;
            (*(void (**)(unint64_t, _QWORD *, unint64_t))(v307 + 32))(v7, v95, v124);
            v126 = v7;
            v127 = v299;
            (*(void (**)(char *, unint64_t, unint64_t))(v125 + 16))(v299, v126, v124);
            v128 = (*(uint64_t (**)(char *, unint64_t))(v125 + 88))(v127, v124);
            if (v128 == (_DWORD)v306)
            {
              (*(void (**)(char *, unint64_t))(v125 + 96))(v127, v124);
              v129 = sub_100008F88(&qword_10013BC90);
              v130 = v124;
              v131 = &v127[*(int *)(v129 + 48)];
              (*(void (**)(unint64_t, unint64_t))(v125 + 8))(v126, v130);
              v132 = type metadata accessor for SFAirDropSend.Failure(0);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)(v132 - 8) + 8))(v131, v132);
              v133 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
              v134 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v133 - 8) + 8))(v127, v133);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v134);
              v135 = *(_QWORD *)(v311[0] + 16);
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v135);
              v136 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v135, v94);
              specialized ContiguousArray._endMutation()(v136);
            }
            else
            {
              v137 = v125;
              v138 = v124;
              v139 = *(void (**)(unint64_t, unint64_t))(v137 + 8);
              v139(v126, v138);
              v139((unint64_t)v127, v138);
              swift_release(v94);
            }
            v7 = v126;
            v95 = v300;
          }
          ++v120;
        }
        while (v108 != v120);
        swift_release(v67);
        a1 = v311[0];
        if ((v311[0] & 0x8000000000000000) != 0)
          goto LABEL_136;
      }
      else
      {
        swift_release(v67);
        a1 = (uint64_t)&_swiftEmptyArrayStorage;
        if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
          goto LABEL_136;
      }
      if ((a1 & 0x4000000000000000) == 0)
      {
        v1 = *(_QWORD *)(a1 + 16);
        swift_retain(a1);
        if (!v1)
          goto LABEL_137;
        goto LABEL_95;
      }
LABEL_136:
      v166 = swift_retain(a1);
      v1 = _CocoaArrayWrapper.endIndex.getter(v166);
      if (!v1)
      {
LABEL_137:
        swift_release_n(a1, 2);
        if (!v108)
        {
          swift_release(v67);
          return 0;
        }
        v1 = v67 & 0xC000000000000001;
        if ((v67 & 0xC000000000000001) == 0)
        {
          if (*(_QWORD *)(v67 + 16))
          {
            v68 = *(_QWORD *)(v67 + 32);
            swift_retain(v67);
            swift_retain(v68);
            v167 = v108 - 1;
            if (v108 == 1)
            {
LABEL_141:
              swift_release_n(v67, 2);
              return v68;
            }
LABEL_201:
            if (v108 >= 2)
            {
              if (v1 || (v200 = *(_QWORD *)(v67 + 16), v200 >= 2) && v167 < v200)
              {
                v201 = 0;
                do
                {
                  if (v1)
                  {
                    v202 = specialized _ArrayBuffer._getElementSlowPath(_:)(v201 + 1, v67);
                  }
                  else
                  {
                    v202 = *(_QWORD *)(v67 + 8 * v201 + 40);
                    swift_retain(v202);
                  }
                  v203 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v202 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
                  v204 = (v203 & 1) == 0;
                  if ((v203 & 1) != 0)
                    v205 = v68;
                  else
                    v205 = v202;
                  if (!v204)
                    v68 = v202;
                  swift_release(v205);
                  ++v201;
                }
                while (v167 != v201);
                goto LABEL_141;
              }
LABEL_281:
              __break(1u);
              goto LABEL_282;
            }
            goto LABEL_241;
          }
          __break(1u);
          goto LABEL_216;
        }
LABEL_200:
        swift_retain(v67);
        v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v67);
        v167 = v108 - 1;
        if (v108 == 1)
          goto LABEL_141;
        goto LABEL_201;
      }
LABEL_95:
      v66 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)(a1 + 16))
        {
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
          v157 = v67 - 1;
          if (v67 == 1)
            goto LABEL_231;
LABEL_115:
          if (v67 >= 2)
          {
            if (v108 || (v158 = *(_QWORD *)(a1 + 16), v158 >= 2) && v157 < v158)
            {
              v159 = 0;
              do
              {
                if (v108)
                {
                  v160 = specialized _ArrayBuffer._getElementSlowPath(_:)(v159 + 1, a1);
                }
                else
                {
                  v160 = *(_QWORD *)(a1 + 8 * v159 + 40);
                  swift_retain(v160);
                }
                v161 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v160 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
                v162 = (v161 & 1) == 0;
                if ((v161 & 1) != 0)
                  v163 = v68;
                else
                  v163 = v160;
                if (!v162)
                  v68 = v160;
                swift_release(v163);
                ++v159;
              }
              while (v157 != v159);
              goto LABEL_231;
            }
            __break(1u);
LABEL_264:
            __break(1u);
            goto LABEL_265;
          }
          __break(1u);
          goto LABEL_236;
        }
        v68 = *(_QWORD *)(a1 + 32);
        swift_retain(v68);
        v7 = v1 - 1;
        if (v1 == 1)
          goto LABEL_98;
LABEL_145:
        if (v1 >= 2)
        {
          if (!v66)
          {
            v168 = *(_QWORD *)(a1 + 16);
            if (v168 < 2 || v7 >= v168)
            {
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              v225 = swift_retain(a1);
              v67 = _CocoaArrayWrapper.endIndex.getter(v225);
              v221 = v295;
              if (!v67)
                goto LABEL_243;
LABEL_228:
              v108 = a1 & 0xC000000000000001;
              if ((a1 & 0xC000000000000001) != 0)
              {
LABEL_265:
                result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
                v68 = result;
                v223 = v67 - 1;
                if (v67 != 1)
                  goto LABEL_266;
                goto LABEL_231;
              }
              if (*(_QWORD *)(a1 + 16))
              {
                v68 = *(_QWORD *)(a1 + 32);
                result = swift_retain(v68);
                v223 = v67 - 1;
                if (v67 != 1)
                {
LABEL_266:
                  if (v67 < 2)
                  {
LABEL_302:
                    __break(1u);
                    goto LABEL_303;
                  }
                  if (v108 || (v255 = *(_QWORD *)(a1 + 16), v255 >= 2) && v223 < v255)
                  {
                    v256 = 0;
                    do
                    {
                      if (v108)
                      {
                        v257 = specialized _ArrayBuffer._getElementSlowPath(_:)(v256 + 1, a1);
                      }
                      else
                      {
                        v257 = *(_QWORD *)(a1 + 8 * v256 + 40);
                        swift_retain(v257);
                      }
                      v258 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v257 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
                      v259 = (v258 & 1) == 0;
                      if ((v258 & 1) != 0)
                        v260 = v68;
                      else
                        v260 = v257;
                      if (!v259)
                        v68 = v257;
                      swift_release(v260);
                      ++v256;
                    }
                    while (v223 != v256);
                    goto LABEL_231;
                  }
                  goto LABEL_323;
                }
LABEL_231:
                v224 = a1;
                goto LABEL_232;
              }
              __break(1u);
              goto LABEL_281;
            }
          }
          v169 = 0;
          do
          {
            if (v66)
            {
              v170 = specialized _ArrayBuffer._getElementSlowPath(_:)(v169 + 1, a1);
            }
            else
            {
              v170 = *(_QWORD *)(a1 + 8 * v169 + 40);
              swift_retain(v170);
            }
            v171 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v170 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
            v172 = (v171 & 1) == 0;
            if ((v171 & 1) != 0)
              v173 = v68;
            else
              v173 = v170;
            if (!v172)
              v68 = v170;
            swift_release(v173);
            ++v169;
          }
          while (v7 != v169);
LABEL_98:
          swift_release_n(a1, 2);
          v140 = v67;
          goto LABEL_233;
        }
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
LABEL_144:
      v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      v7 = v1 - 1;
      if (v1 == 1)
        goto LABEL_98;
      goto LABEL_145;
    }
  }
  v119 = swift_retain(v7);
  v94 = _CocoaArrayWrapper.endIndex.getter(v119);
  swift_release(v7);
  v95 = v300;
  if (!v94)
    goto LABEL_74;
LABEL_35:
  swift_release(v67);
  v311[0] = &_swiftEmptyArrayStorage;
  v306 = (char *)(v94 - 1);
  if (v94 < 1)
  {
    __break(1u);
  }
  else
  {
    v308 = v7 & 0xC000000000000001;
    v96 = enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:);
    swift_retain(v7);
    v97 = 0;
    do
    {
      v95 = (_QWORD *)v94;
      if (v308)
      {
        v66 = specialized _ArrayBuffer._getElementSlowPath(_:)(v97, v7);
      }
      else
      {
        v66 = *(_QWORD *)(v7 + 8 * (_QWORD)v97 + 32);
        swift_retain(v66);
      }
      v98 = v302;
      v99 = swift_getKeyPath(&unk_1000EF3F0);
      v100 = swift_getKeyPath(&unk_1000EF418);
      static Published.subscript.getter(v98, v66, v99, v100);
      swift_release(v99);
      v101 = swift_release(v100);
      v103 = v303;
      v102 = v304;
      v1 = *(_QWORD *)(v303 + 88);
      if (((unsigned int (*)(_QWORD *, uint64_t, __n128))v1)(v98, v304, v101) == v96)
      {
        (*(void (**)(_QWORD *, uint64_t))(v103 + 96))(v98, v102);
        v104 = sub_100008F88(&qword_10013CA70);
        v105 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v104 - 8) + 8))(v98, v104);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v105);
        v106 = *(_QWORD *)(v311[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v106);
        v107 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v106, v66);
        specialized ContiguousArray._endMutation()(v107);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v103 + 8))(v98, v102);
        swift_release(v66);
      }
      v97 = (_QWORD *)((char *)v97 + 1);
      v94 = (uint64_t)v95;
      v7 = v305;
    }
    while (v95 != v97);
    swift_release(v305);
    a1 = v311[0];
    if ((v311[0] & 0x8000000000000000) == 0 && (v311[0] & 0x4000000000000000) == 0)
    {
      v67 = *(_QWORD *)(v311[0] + 16);
      swift_retain(v311[0]);
      if (v67)
      {
LABEL_47:
        v108 = a1 & 0xC000000000000001;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
          v109 = v67 - 1;
          if (v67 == 1)
            goto LABEL_231;
          goto LABEL_50;
        }
        if (*(_QWORD *)(a1 + 16))
        {
          v68 = *(_QWORD *)(a1 + 32);
          swift_retain(v68);
          v109 = v67 - 1;
          if (v67 == 1)
            goto LABEL_231;
LABEL_50:
          if (v67 >= 2)
          {
            if (v108 || (v110 = *(_QWORD *)(a1 + 16), v110 >= 2) && v109 < v110)
            {
              v111 = 0;
              do
              {
                if (v108)
                {
                  v112 = specialized _ArrayBuffer._getElementSlowPath(_:)(v111 + 1, a1);
                }
                else
                {
                  v112 = *(_QWORD *)(a1 + 8 * v111 + 40);
                  swift_retain(v112);
                }
                v113 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v112 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
                v114 = (v113 & 1) == 0;
                if ((v113 & 1) != 0)
                  v115 = v68;
                else
                  v115 = v112;
                if (!v114)
                  v68 = v112;
                swift_release(v115);
                ++v111;
              }
              while (v109 != v111);
              goto LABEL_231;
            }
LABEL_236:
            __break(1u);
            goto LABEL_237;
          }
          goto LABEL_195;
        }
        __break(1u);
        goto LABEL_135;
      }
      goto LABEL_101;
    }
  }
  v141 = swift_retain(a1);
  v67 = _CocoaArrayWrapper.endIndex.getter(v141);
  if (v67)
    goto LABEL_47;
LABEL_101:
  swift_release_n(a1, 2);
  v311[0] = &_swiftEmptyArrayStorage;
  swift_retain(v7);
  v142 = 0;
  v143 = enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:);
  do
  {
    if (v308)
    {
      v144 = specialized _ArrayBuffer._getElementSlowPath(_:)(v142, v7);
    }
    else
    {
      v144 = *(_QWORD *)(v7 + 8 * v142 + 32);
      swift_retain(v144);
    }
    v145 = swift_getKeyPath(&unk_1000EF3F0);
    v146 = swift_getKeyPath(&unk_1000EF418);
    v147 = v301;
    static Published.subscript.getter(v301, v144, v145, v146);
    swift_release(v145);
    v148 = swift_release(v146);
    v149 = v304;
    if (((unsigned int (*)(_QWORD *, uint64_t, __n128))v1)(v147, v304, v148) == v143)
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 96))(v147, v149);
      v150 = sub_100008F88(&qword_10013CAD0);
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v147 + *(int *)(v150 + 48)));
      v151 = (char *)v147 + *(int *)(v150 + 64);
      v152 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v152 - 8) + 8))(v151, v152);
      v153 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      v154 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v153 - 8) + 8))(v147, v153);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v154);
      v155 = *(_QWORD *)(v311[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v155);
      v156 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v155, v144);
      specialized ContiguousArray._endMutation()(v156);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 8))(v147, v149);
      swift_release(v144);
    }
    ++v142;
    v7 = v305;
  }
  while (v94 != v142);
  swift_release(v305);
  a1 = v311[0];
  if ((v311[0] & 0x8000000000000000) != 0 || (v311[0] & 0x4000000000000000) != 0)
  {
    v174 = swift_retain(v311[0]);
    v67 = _CocoaArrayWrapper.endIndex.getter(v174);
    if (v67)
      goto LABEL_112;
  }
  else
  {
    v67 = *(_QWORD *)(v311[0] + 16);
    swift_retain(v311[0]);
    if (v67)
    {
LABEL_112:
      v108 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
        goto LABEL_196;
      if (*(_QWORD *)(a1 + 16))
      {
        v68 = *(_QWORD *)(a1 + 32);
        swift_retain(v68);
        v157 = v67 - 1;
        if (v67 == 1)
          goto LABEL_231;
        goto LABEL_115;
      }
      __break(1u);
      goto LABEL_199;
    }
  }
  swift_release_n(a1, 2);
  v311[0] = &_swiftEmptyArrayStorage;
  swift_retain(v7);
  v175 = 0;
  v176 = enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:);
  v177 = enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:);
  LODWORD(v307) = enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:);
  do
  {
    if (v308)
    {
      v185 = specialized _ArrayBuffer._getElementSlowPath(_:)(v175, v7);
    }
    else
    {
      v185 = *(_QWORD *)(v7 + 8 * v175 + 32);
      swift_retain(v185);
    }
    v186 = swift_getKeyPath(&unk_1000EF3F0);
    v187 = swift_getKeyPath(&unk_1000EF418);
    v188 = v298;
    static Published.subscript.getter(v298, v185, v186, v187);
    swift_release(v186);
    v189 = swift_release(v187);
    v190 = v304;
    v191 = ((uint64_t (*)(_QWORD *, uint64_t, __n128))v1)(v188, v304, v189);
    if (v191 == v176)
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 96))(v188, v190);
      v192 = (uint64_t *)&unk_10013BDF8;
LABEL_172:
      v178 = (char *)v188 + *(int *)(sub_100008F88(v192) + 48);
      v179 = (uint64_t *)&unk_10013DC90;
      goto LABEL_162;
    }
    if (v191 == v177)
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 96))(v188, v190);
      v178 = (char *)v188 + *(int *)(sub_100008F88(&qword_10013BDF0) + 48);
      v179 = &qword_10013CA70;
LABEL_162:
      v180 = sub_100008F88(v179);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v180 - 8) + 8))(v178, v180);
      v181 = type metadata accessor for SFAirDrop.ContactInfo(0);
      v182 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v181 - 8) + 8))(v188, v181);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v182);
      v183 = *(_QWORD *)(v311[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v183);
      v184 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v183, v185);
      specialized ContiguousArray._endMutation()(v184);
      goto LABEL_163;
    }
    if (v191 == (_DWORD)v307)
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 96))(v188, v190);
      v192 = (uint64_t *)&unk_10013DCE0;
      goto LABEL_172;
    }
    (*(void (**)(_QWORD *, uint64_t))(v303 + 8))(v188, v190);
    swift_release(v185);
LABEL_163:
    v7 = v305;
    ++v175;
  }
  while (v94 != v175);
  swift_release(v305);
  a1 = v311[0];
  if ((v311[0] & 0x8000000000000000) != 0 || (v311[0] & 0x4000000000000000) != 0)
  {
LABEL_216:
    v206 = swift_retain(a1);
    v67 = _CocoaArrayWrapper.endIndex.getter(v206);
    if (!v67)
      goto LABEL_217;
LABEL_177:
    v108 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_237:
      v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      v193 = v67 - 1;
      if (v67 == 1)
        goto LABEL_231;
LABEL_180:
      if (v67 >= 2)
      {
        if (v108 || (v194 = *(_QWORD *)(a1 + 16), v194 >= 2) && v193 < v194)
        {
          v195 = 0;
          do
          {
            if (v108)
            {
              v196 = specialized _ArrayBuffer._getElementSlowPath(_:)(v195 + 1, a1);
            }
            else
            {
              v196 = *(_QWORD *)(a1 + 8 * v195 + 40);
              swift_retain(v196);
            }
            v197 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v196 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
            v198 = (v197 & 1) == 0;
            if ((v197 & 1) != 0)
              v199 = v68;
            else
              v199 = v196;
            if (!v198)
              v68 = v196;
            swift_release(v199);
            ++v195;
          }
          while (v193 != v195);
          goto LABEL_231;
        }
        __break(1u);
        goto LABEL_302;
      }
      goto LABEL_264;
    }
    if (*(_QWORD *)(a1 + 16))
    {
      v68 = *(_QWORD *)(a1 + 32);
      swift_retain(v68);
      v193 = v67 - 1;
      if (v67 == 1)
        goto LABEL_231;
      goto LABEL_180;
    }
    __break(1u);
    goto LABEL_240;
  }
  v67 = *(_QWORD *)(v311[0] + 16);
  swift_retain(v311[0]);
  if (v67)
    goto LABEL_177;
LABEL_217:
  swift_release_n(a1, 2);
  v311[0] = &_swiftEmptyArrayStorage;
  swift_retain(v7);
  v207 = 0;
  v208 = enum case for SFAirDropReceive.Transfer.State.transferFailed(_:);
  do
  {
    if (v308)
    {
      v209 = specialized _ArrayBuffer._getElementSlowPath(_:)(v207, v7);
    }
    else
    {
      v209 = *(_QWORD *)(v7 + 8 * v207 + 32);
      swift_retain(v209);
    }
    v210 = swift_getKeyPath(&unk_1000EF3F0);
    v211 = swift_getKeyPath(&unk_1000EF418);
    v212 = v297;
    static Published.subscript.getter(v297, v209, v210, v211);
    swift_release(v210);
    v213 = swift_release(v211);
    v214 = v304;
    if (((unsigned int (*)(_QWORD *, uint64_t, __n128))v1)(v212, v304, v213) == v208)
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 96))(v212, v214);
      v215 = (char *)v212 + *(int *)(sub_100008F88(&qword_10013DCC0) + 48);
      v216 = type metadata accessor for SFAirDropReceive.Failure(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v216 - 8) + 8))(v215, v216);
      v217 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
      v218 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v217 - 8) + 8))(v212, v217);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v218);
      v219 = *(_QWORD *)(v311[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v219);
      v220 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v219, v209);
      specialized ContiguousArray._endMutation()(v220);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 8))(v212, v214);
      swift_release(v209);
    }
    ++v207;
    v7 = v305;
  }
  while (v94 != v207);
  swift_release(v305);
  a1 = v311[0];
  if ((v311[0] & 0x8000000000000000) != 0 || (v311[0] & 0x4000000000000000) != 0)
    goto LABEL_242;
  v67 = *(_QWORD *)(v311[0] + 16);
  swift_retain(v311[0]);
  v221 = v295;
  if (v67)
    goto LABEL_228;
LABEL_243:
  swift_release_n(a1, 2);
  v311[0] = &_swiftEmptyArrayStorage;
  v226 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
  swift_retain(v7);
  v227 = 0;
  LODWORD(v307) = v226;
  while (2)
  {
    if (v308)
    {
      v228 = specialized _ArrayBuffer._getElementSlowPath(_:)(v227, v7);
    }
    else
    {
      v228 = *(_QWORD *)(v7 + 8 * v227 + 32);
      swift_retain(v228);
    }
    v229 = swift_getKeyPath(&unk_1000EF3F0);
    v230 = swift_getKeyPath(&unk_1000EF418);
    static Published.subscript.getter(v221, v228, v229, v230);
    swift_release(v229);
    v231 = swift_release(v230);
    v232 = v304;
    if (((unsigned int (*)(_QWORD *, uint64_t, __n128))v1)(v221, v304, v231) == v226)
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 96))(v221, v232);
      v233 = (int *)sub_100008F88(&qword_10013BDE0);
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v221 + v233[12]));
      swift_bridgeObjectRelease(*(_QWORD *)((char *)v221 + v233[16]));
      v234 = (char *)v221 + v233[20];
      v235 = v228 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
      swift_beginAccess(v228 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v309, 0, 0);
      v236 = v235;
      v237 = (uint64_t)v290;
      sub_10000CC18(v236, (uint64_t)v290, &qword_10013CD20);
      v238 = v291;
      v239 = v287;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v291 + 48))(v237, 1, v287) == 1)
      {
        sub_10000CC5C(v237, &qword_10013CD20);
        v240 = sub_100008F88(&qword_10013CA70);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v240 - 8) + 8))(v234, v240);
        v241 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v241 - 8) + 8))(v221, v241);
        goto LABEL_253;
      }
      v242 = v293;
      v243 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v238 + 32))(v293, v237, v239);
      v244 = v294;
      static Date.now.getter(v243);
      v245 = Date.timeIntervalSince(_:)(v242);
      v246 = *(void (**)(char *, uint64_t))(v238 + 8);
      v246(v244, v239);
      v247 = v242;
      v221 = v295;
      v246(v247, v239);
      v248 = sub_100008F88(&qword_10013CA70);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v248 - 8) + 8))(v234, v248);
      v249 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
      v250 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v249 - 8) + 8))(v221, v249);
      if (v245 <= 7.0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v250);
        v251 = *(_QWORD *)(v311[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v251);
        v252 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v251, v228);
        specialized ContiguousArray._endMutation()(v252);
      }
      else
      {
LABEL_253:
        swift_release(v228);
      }
      v7 = v305;
      v226 = v307;
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t))(v303 + 8))(v221, v232);
      swift_release(v228);
      v7 = v305;
    }
    if (v94 != ++v227)
      continue;
    break;
  }
  swift_release(v7);
  v307 = v311[0];
  if ((v311[0] & 0x8000000000000000) == 0 && (v307 & 0x4000000000000000) == 0)
  {
    v68 = *(_QWORD *)(v307 + 16);
    result = swift_retain(v307);
    if (v68)
      goto LABEL_259;
LABEL_283:
    result = swift_release_n(v307, 2);
    if (v308)
    {
      swift_retain(v7);
      v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
      v262 = v306;
      if (v94 != 1)
      {
LABEL_291:
        v264 = 0;
        do
        {
          if (v308)
          {
            v265 = specialized _ArrayBuffer._getElementSlowPath(_:)(v264 + 1, v7);
          }
          else
          {
            v265 = *(_QWORD *)(v7 + 8 * (_QWORD)v264 + 40);
            swift_retain(v265);
          }
          v266 = static Date.< infix(_:_:)(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v265 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime);
          v267 = (v266 & 1) == 0;
          if ((v266 & 1) != 0)
            v268 = v68;
          else
            v268 = v265;
          if (!v267)
            v68 = v265;
          swift_release(v268);
          ++v264;
        }
        while (v262 != v264);
      }
LABEL_288:
      swift_release_n(v7, 2);
      return v68;
    }
    v263 = *(_QWORD *)(v7 + 16);
    if (v263)
    {
      v68 = *(_QWORD *)(v7 + 32);
      swift_retain(v7);
      result = swift_retain(v68);
      if (v94 == 1)
        goto LABEL_288;
      v262 = v306;
      if (v263 >= 2 && v94 - 1 < (uint64_t)v263)
        goto LABEL_291;
LABEL_327:
      __break(1u);
      return result;
    }
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
    goto LABEL_327;
  }
LABEL_282:
  v261 = swift_retain(v307);
  result = _CocoaArrayWrapper.endIndex.getter(v261);
  v68 = result;
  if (!result)
    goto LABEL_283;
LABEL_259:
  v308 = v307 & 0xC000000000000001;
  if ((v307 & 0xC000000000000001) != 0)
  {
LABEL_303:
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v307);
    v253 = result;
    v254 = v68 - 1;
    if (v68 == 1)
      goto LABEL_262;
    goto LABEL_304;
  }
  if (!*(_QWORD *)(v307 + 16))
  {
    __break(1u);
LABEL_323:
    __break(1u);
    goto LABEL_324;
  }
  v253 = *(_QWORD *)(v307 + 32);
  result = swift_retain(v253);
  v254 = v68 - 1;
  if (v68 == 1)
  {
LABEL_262:
    v68 = v253;
    v224 = v307;
    goto LABEL_232;
  }
LABEL_304:
  if (v68 < 2)
  {
LABEL_324:
    __break(1u);
    goto LABEL_325;
  }
  if (!v308)
  {
    v269 = *(_QWORD *)(v307 + 16);
    if (v269 < 2 || v254 >= v269)
      goto LABEL_326;
  }
  v270 = 0;
  v304 = v254;
  v271 = v291;
  v272 = v287;
  while (2)
  {
    if (v308)
    {
      v68 = specialized _ArrayBuffer._getElementSlowPath(_:)(v270 + 1, v307);
    }
    else
    {
      v68 = *(_QWORD *)(v307 + 8 * v270 + 40);
      swift_retain(v68);
    }
    v274 = v253 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
    swift_beginAccess(v253 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v311, 0, 0);
    v275 = v274;
    v276 = (uint64_t)v286;
    sub_10000CC18(v275, (uint64_t)v286, &qword_10013CD20);
    v277 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v271 + 48);
    if (v277(v276, 1, v272) == 1)
    {
LABEL_317:
      sub_10000CC5C(v276, &qword_10013CD20);
      if ((static Date.< infix(_:_:)(v253 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime, v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_startTime) & 1) != 0)goto LABEL_320;
      goto LABEL_309;
    }
    v278 = v289;
    v306 = *(char **)(v271 + 32);
    ((void (*)(char *, char *, uint64_t))v306)(v289, v286, v272);
    v279 = v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime;
    swift_beginAccess(v68 + OBJC_IVAR____TtC9AirDropUI22AirDropTransferSession_waitingForOpenResponseStateStartTime, v310, 0, 0);
    v280 = v279;
    v276 = v285;
    sub_10000CC18(v280, v285, &qword_10013CD20);
    if (v277(v276, 1, v272) == 1)
    {
      (*(void (**)(char *, uint64_t))(v271 + 8))(v278, v272);
      v254 = v304;
      goto LABEL_317;
    }
    v281 = v288;
    ((void (*)(char *, uint64_t, uint64_t))v306)(v288, v276, v272);
    v282 = static Date.< infix(_:_:)(v278, v281);
    v283 = *(void (**)(char *, uint64_t))(v271 + 8);
    v283(v281, v272);
    v283(v278, v272);
    v254 = v304;
    if ((v282 & 1) == 0)
    {
LABEL_309:
      v273 = v68;
      v68 = v253;
      goto LABEL_310;
    }
LABEL_320:
    v273 = v253;
LABEL_310:
    swift_release(v273);
    ++v270;
    v253 = v68;
    if (v254 != v270)
      continue;
    break;
  }
  v224 = v307;
LABEL_232:
  swift_release_n(v224, 2);
  v140 = v305;
LABEL_233:
  swift_release(v140);
  return v68;
}

void sub_1000D6ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = qword_10013AD98;
    swift_retain(*(_QWORD *)(v0 + 32));
    if (v2 != -1)
      swift_once(&qword_10013AD98, sub_1000CF144);
    v3 = type metadata accessor for Logger(0);
    sub_100009558(v3, (uint64_t)qword_100141498);
    v4 = swift_retain_n(v1, 2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v18 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = Activity.id.getter(v8);
      v11 = v10;
      v16 = sub_10003A834(v9, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease(v11);
      swift_release_n(v1, 2);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Requesting AirDrop banner for activity %s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_release_n(v1, 2);
    }

    v13 = Activity.id.getter(v12);
    v15 = v14;
    sub_1000D100C(v13, v14);
    swift_bridgeObjectRelease(v15);
    swift_release(v1);
  }
}

uint64_t sub_1000D6CA8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D6CCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D6CF8(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1000D1DD8(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1000D6D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D6D14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000D6D1C()
{
  unint64_t result;

  result = qword_100141698;
  if (!qword_100141698)
  {
    result = swift_getWitnessTable(&unk_1000EF4B8, &type metadata for AirDropUIBannerManager.AssertionError);
    atomic_store(result, &qword_100141698);
  }
  return result;
}

uint64_t sub_1000D6D60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_errorRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D6D9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_1001416A4);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1000104E4;
  return sub_1000D1F7C(v2, v3, v4, v5, v6);
}

void sub_1000D6E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void (*v48)(char *);
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  _QWORD *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v3 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v72 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v71 = (char *)&v60 - v17;
  v18 = 0;
  v78 = a1;
  v19 = *(_QWORD *)(a1 + 64);
  v75 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v66 = v6 + 1;
  v76 = (unint64_t)(v20 + 63) >> 6;
  v79 = &_swiftEmptyArrayStorage;
  v70 = enum case for SFAirDropSend.Transfer.State.analyzingFullContent(_:);
  v68 = enum case for SFAirDropSend.Transfer.State.waitingForSensitiveContentResponse(_:);
  v69 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
  v67 = enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:);
  v64 = enum case for SFAirDropReceive.Transfer.State.created(_:);
  v65 = enum case for SFAirDropSend.Transfer.State.created(_:);
  v62 = enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:);
  v63 = enum case for SFAirDropSend.Transfer.State.waitingForAskResponse(_:);
  v61 = enum case for SFAirDropReceive.Transfer.State.analyizingPreview(_:);
  while (v22)
  {
    v27 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    v28 = v27 | (v18 << 6);
LABEL_25:
    v32 = *(_QWORD *)(*(_QWORD *)(v78 + 56) + 8 * v28);
    KeyPath = swift_getKeyPath(&unk_1000EF3A8);
    v34 = swift_getKeyPath(&unk_1000EF3D0);
    v35 = swift_retain(v32);
    static Published.subscript.getter(v10, v35, KeyPath, v34);
    swift_release(KeyPath);
    v36 = swift_release(v34);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1, v11, v36) == 1)
    {
      sub_10000CC5C((uint64_t)v10, &qword_10013C9E0);
      v37 = swift_getKeyPath(&unk_1000EF3F0);
      v38 = swift_getKeyPath(&unk_1000EF418);
      static Published.subscript.getter(v6, v32, v37, v38);
      swift_release(v37);
      v39 = swift_release(v38);
      v41 = v73;
      v40 = v74;
      v42 = (*(uint64_t (**)(_QWORD *, uint64_t, __n128))(v73 + 88))(v6, v74, v39);
      if (v42 == v69)
      {
        (*(void (**)(_QWORD *, uint64_t))(v41 + 96))(v6, v40);
        v23 = (int *)sub_100008F88(&qword_10013BDE0);
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v23[12]));
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v23[16]));
        v24 = (char *)v6 + v23[20];
        v25 = sub_100008F88(&qword_10013CA70);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
        v26 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
LABEL_5:
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v6, v26);
        goto LABEL_6;
      }
      if (v42 == v67)
      {
        (*(void (**)(_QWORD *, uint64_t))(v41 + 96))(v6, v40);
        v43 = (int *)sub_100008F88(&qword_10013DCD0);
        v44 = (char *)v6 + v43[12];
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v66 + v43[16]));
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v43[20]));
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v43[24]));
        swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v43[28]));
        v45 = type metadata accessor for SFAirDropReceive.ItemDestination(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
        v26 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
        goto LABEL_5;
      }
      if (v42 != v64 && v42 != v62 && v42 != v61)
      {
        v57 = (*(uint64_t (**)(_QWORD *, uint64_t))(v41 + 8))(v6, v40);
        goto LABEL_43;
      }
LABEL_6:
      swift_release(v32);
    }
    else
    {
      v77 = v18;
      v46 = v10;
      v47 = v6;
      v48 = *(void (**)(char *))(v12 + 32);
      v49 = v12;
      v50 = v71;
      v51 = v46;
      v48(v71);
      v52 = v72;
      v53 = v50;
      v12 = v49;
      ((void (*)(char *, char *, uint64_t))v48)(v72, v53, v11);
      v54 = (*(uint64_t (**)(_QWORD *, uint64_t))(v49 + 88))(v52, v11);
      if (v54 == v70)
      {
        (*(void (**)(_QWORD *, uint64_t))(v49 + 96))(v52, v11);
        swift_bridgeObjectRelease(*v52);
        v55 = (char *)v52 + *(int *)(sub_100008F88(&qword_10013CFD0) + 64);
        v56 = type metadata accessor for SFAirDrop.DeclineAction(0);
LABEL_33:
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
        swift_release(v32);
        v6 = v47;
        goto LABEL_34;
      }
      if (v54 == v68)
      {
        (*(void (**)(_QWORD *, uint64_t))(v49 + 96))(v52, v11);
        swift_bridgeObjectRelease(*v52);
        v55 = (char *)v52 + *(int *)(sub_100008F88(&qword_10013CFC8) + 48);
        v56 = sub_100008F88((uint64_t *)&unk_10013DCA0);
        goto LABEL_33;
      }
      v6 = v47;
      if (v54 == v65 || v54 == v63)
      {
        swift_release(v32);
LABEL_34:
        v10 = v51;
        v18 = v77;
      }
      else
      {
        v57 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v52, v11);
        v10 = v51;
        v18 = v77;
LABEL_43:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v57);
        v58 = v79[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v58);
        v59 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v32);
        specialized ContiguousArray._endMutation()(v59);
      }
    }
  }
  v29 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v29 >= v76)
    goto LABEL_44;
  v30 = *(_QWORD *)(v75 + 8 * v29);
  ++v18;
  if (v30)
    goto LABEL_24;
  v18 = v29 + 1;
  if (v29 + 1 >= v76)
    goto LABEL_44;
  v30 = *(_QWORD *)(v75 + 8 * v18);
  if (v30)
    goto LABEL_24;
  v18 = v29 + 2;
  if (v29 + 2 >= v76)
    goto LABEL_44;
  v30 = *(_QWORD *)(v75 + 8 * v18);
  if (v30)
    goto LABEL_24;
  v18 = v29 + 3;
  if (v29 + 3 >= v76)
    goto LABEL_44;
  v30 = *(_QWORD *)(v75 + 8 * v18);
  if (v30)
  {
LABEL_24:
    v22 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v18 << 6);
    goto LABEL_25;
  }
  v31 = v29 + 4;
  if (v31 >= v76)
  {
LABEL_44:
    swift_release(v78);
    return;
  }
  v30 = *(_QWORD *)(v75 + 8 * v31);
  if (v30)
  {
    v18 = v31;
    goto LABEL_24;
  }
  while (1)
  {
    v18 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v18 >= v76)
      goto LABEL_44;
    v30 = *(_QWORD *)(v75 + 8 * v18);
    ++v31;
    if (v30)
      goto LABEL_24;
  }
LABEL_46:
  __break(1u);
}

void sub_1000D74A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_10013AD98 != -1)
    swift_once(&qword_10013AD98, sub_1000CF144);
  v12 = type metadata accessor for Logger(0);
  sub_100009558(v12, (uint64_t)qword_100141498);
  v13 = swift_bridgeObjectRetain_n(a2, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {
    swift_bridgeObjectRelease_n(a2, 2);

    if (a3)
      goto LABEL_5;
LABEL_11:
    if ((a5 & 1) != 0)
      a4 = 7;
    v23 = sub_1000D6D1C();
    v22 = swift_allocError(&type metadata for AirDropUIBannerManager.AssertionError, v23, 0, 0);
    *v21 = 0;
    goto LABEL_14;
  }
  v32 = a5;
  v16 = (uint8_t *)swift_slowAlloc(12, -1);
  v33 = a6;
  v17 = swift_slowAlloc(32, -1);
  v35 = v17;
  *(_DWORD *)v16 = 136315138;
  swift_bridgeObjectRetain(a2);
  v34 = sub_10003A834(a1, a2, &v35);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
  swift_bridgeObjectRelease_n(a2, 3);
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "Assertion invalidated [sessionIdentifier = %s]", v16, 0xCu);
  swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
  v18 = v17;
  a6 = v33;
  swift_slowDealloc(v18, -1, -1);
  v19 = v16;
  a5 = v32;
  swift_slowDealloc(v19, -1, -1);

  if (!a3)
    goto LABEL_11;
LABEL_5:
  if (a3 == 1)
    return;
  if (a3 != 2)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x80000001000F3160, "AirDropUI/AirDropUIBannerManager.swift", 38, 2, 500, 0);
    __break(1u);
    return;
  }
  if ((a5 & 1) != 0)
    a4 = 0;
  v20 = sub_1000D6D1C();
  v22 = swift_allocError(&type metadata for AirDropUIBannerManager.AssertionError, v20, 0, 0);
  *v21 = 2;
LABEL_14:
  v21[1] = a4;
  v21[2] = a6;
  v24 = swift_errorRetain(a6);
  swift_willThrow(v24);
  swift_errorRetain(v22);
  v25 = swift_errorRetain(v22);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138412290;
    swift_errorRetain(v22);
    v30 = _swift_stdlib_bridgeErrorToNSError(v22);
    v35 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    *v29 = v30;
    swift_errorRelease(v22);
    swift_errorRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Assertion invalidation reason: %@", v28, 0xCu);
    v31 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v29, 1, v31);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    swift_errorRelease(v22);
  }
  else
  {
    swift_errorRelease(v22);
    swift_errorRelease(v22);
    swift_errorRelease(v22);

  }
}

uint64_t sub_1000D7888@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D2C90(a1, (uint64_t)&unk_1000EF3A8, (uint64_t)&unk_1000EF3D0, a2);
}

uint64_t sub_1000D78B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D2C90(a1, (uint64_t)&unk_1000EF3F0, (uint64_t)&unk_1000EF418, a2);
}

uint64_t sub_1000D78D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D2D10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDropReceive.Transfer.State, (uint64_t)&unk_1000EF3F0, (uint64_t)&unk_1000EF418);
}

uint64_t sub_1000D7900@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000D2C90(a1, (uint64_t)&unk_1000EF438, (uint64_t)&unk_1000EF460, a2);
}

uint64_t sub_1000D7924(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D2D10(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for SFAirDrop.DisplayPriority, (uint64_t)&unk_1000EF438, (uint64_t)&unk_1000EF460);
}

unint64_t destroy for AirDropUIBannerManager.AssertionError(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 16);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t _s9AirDropUI22AirDropUIBannerManagerC14AssertionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if ((int)v4 - 1 < 0)
  {
    swift_errorRetain(v3);
    *(_QWORD *)(a1 + 16) = v3;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  return a1;
}

_QWORD *assignWithCopy for AirDropUIBannerManager.AssertionError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;

  v4 = a1[2];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[2];
  v7 = v6 - 1;
  if (a2[2] < 0xFFFFFFFFuLL)
    v5 = a2[2];
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v12 = a2[2];
      swift_errorRetain(v12);
      a1[2] = v12;
      swift_errorRelease(v4);
      return a1;
    }
    swift_errorRelease(a1[2]);
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v10 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v10;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v9 = a2[2];
  swift_errorRetain(v9);
  a1[2] = v9;
  return a1;
}

uint64_t assignWithTake for AirDropUIBannerManager.AssertionError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 16);
    if ((int)v7 - 1 < 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v6;
      swift_errorRelease(v4);
      return a1;
    }
    swift_errorRelease(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirDropUIBannerManager.AssertionError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AirDropUIBannerManager.AssertionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 1;
  }
  return result;
}

uint64_t sub_1000D7BD0(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_1000D7BF4(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    result[2] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropUIBannerManager.AssertionError()
{
  return &type metadata for AirDropUIBannerManager.AssertionError;
}

uint64_t sub_1000D7C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_errorRelease(a3);
  return result;
}

ValueMetadata *type metadata accessor for AirDropSystemApertureProgress()
{
  return &type metadata for AirDropSystemApertureProgress;
}

uint64_t sub_1000D7C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100017104(v0, qword_1001416D0);
  v1 = sub_100009558(v0, (uint64_t)qword_1001416D0);
  if (qword_10013AD58 != -1)
    swift_once(&qword_10013AD58, sub_100092228);
  v2 = sub_100009558(v0, (uint64_t)qword_100148028);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000D7CEC()
{
  __int128 *v0;
  void *v1;
  void *v2;
  char v3;
  id v4;
  id v5;
  id v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v18;
  __int128 v19;

  v19 = *v0;
  v1 = (void *)sub_1000D8580(*((uint64_t *)&v19 + 1));
  v2 = (void *)*((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 16);
  v4 = objc_allocWithZone((Class)type metadata accessor for AirDropSystemApertureProgressView());
  v5 = v1;
  v6 = v2;
  v7 = 1;
  sub_1000DC36C(v6, 8, v3, v1, 0, 1);
  v9 = v8;
  KeyPath = swift_getKeyPath(&unk_1000EF610);
  v11 = swift_getKeyPath(&unk_1000EF638);
  swift_retain(*((_QWORD *)&v19 + 1));
  static Published.subscript.getter(&v18, v12, KeyPath, v11);
  swift_release(KeyPath);
  swift_release(v11);
  sub_10001AAF0((uint64_t)&v19);
  v13 = v18;
  v14 = *(void **)(v9 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress) = v18;
  v15 = v13;

  sub_1000DBFB4();
  v16 = OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded;
  *(_BYTE *)(v9 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) = 1;
  sub_1000DCBAC();
  if (*(_BYTE *)(v9 + v16) == 1)
    v7 = *(_QWORD *)(v9 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction) == 0;
  objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton), "setHidden:", v7);

  return v9;
}

uint64_t sub_1000D7E54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  v7 = sub_100008F88(&qword_10013BCC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10013ADA8 != -1)
    swift_once(&qword_10013ADA8, sub_1000D7C5C);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100009558(v11, (uint64_t)qword_1001416D0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cancel button was tapped. Triggering cancel on AirDropTransferSession", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_100129F58, v18 + v5, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v19 + v18, (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v20 = static Task<>.noThrow(priority:operation:)(v10, &unk_1001416F8, v19, (char *)&type metadata for () + 8);
  swift_release(v20);
  swift_release(v19);
  return sub_10000CC5C((uint64_t)v10, &qword_10013BCC0);
}

uint64_t sub_1000D805C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[4] = a2;
  v3 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[8] = v5;
  v2[9] = static MainActor.shared.getter(v5);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to SFAirDrop.DeclineAction.decline()[1]);
  v2[10] = v6;
  *v6 = v2;
  v6[1] = sub_1000D80F0;
  return SFAirDrop.DeclineAction.decline()();
}

uint64_t sub_1000D80F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000D81B0;
  else
    v6 = sub_1000D8178;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000D8178()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D81B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _TtC9AirDropUI33AirDropTransferSessionsController *v18;
  SEL v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *log;
  uint64_t *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  swift_release(*(_QWORD *)(v0 + 72));
  if (qword_10013ADA8 != -1)
    swift_once(&qword_10013ADA8, sub_1000D7C5C);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = type metadata accessor for Logger(0);
  sub_100009558(v6, (uint64_t)qword_1001416D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 40);
  if (v10)
  {
    type = v9;
    v15 = swift_slowAlloc(22, -1);
    v30 = (uint64_t *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(32, -1);
    v33 = v32;
    *(_DWORD *)v15 = 136315394;
    log = v8;
    v16 = SFAirDrop.DeclineAction.id.getter();
    v18 = (_TtC9AirDropUI33AirDropTransferSessionsController *)v17;
    *(_QWORD *)(v0 + 16) = sub_10003A834(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    swift_bridgeObjectRelease(v18, v19, v20, v21, v22, v23, v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v11);
    v26 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 24) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    *v30 = v26;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, type, "AirDrop transfer cancel action %s failed with error %@", (uint8_t *)v15, 0x16u);
    v27 = sub_100008F88(&qword_10013BC00);
    swift_arrayDestroy(v30, 1, v27);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D846C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000D898C(a1, a2, *(_QWORD *)(v2 + 8));
}

uint64_t sub_1000D8474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000D8BDC();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000D84C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000D8BDC();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000D8514(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D8BDC();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000D853C()
{
  unint64_t result;

  result = qword_1001416E8;
  if (!qword_1001416E8)
  {
    result = swift_getWitnessTable(&unk_1000EF530, &type metadata for AirDropSystemApertureProgress);
    atomic_store(result, &qword_1001416E8);
  }
  return result;
}

uint64_t sub_1000D8580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  _TtC9AirDropUI33AirDropTransferSessionsController *v40;
  _TtC9AirDropUI33AirDropTransferSessionsController *v41;
  NSString v42;
  SEL v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v2 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v2, v3);
  v55 = (_QWORD **)((char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD **)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100008F88((uint64_t *)&unk_10013C9D0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v55 - v17;
  v19 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v56 = v22;
  v57 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v58 = (char *)&v55 - v25;
  KeyPath = swift_getKeyPath(&unk_1000EF658);
  v27 = swift_getKeyPath(&unk_1000EF680);
  swift_retain(a1);
  static Published.subscript.getter(v10, v28, KeyPath, v27);
  swift_release(a1);
  swift_release(KeyPath);
  v29 = swift_release(v27);
  SFAirDropReceive.Transfer.State.cancelAction.getter(v29);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v30(v14, 1, v19) == 1)
  {
    v31 = swift_getKeyPath(&unk_1000EF6A0);
    v32 = swift_getKeyPath(&unk_1000EF6C8);
    swift_retain(a1);
    v33 = v55;
    static Published.subscript.getter(v55, v34, v31, v32);
    swift_release(a1);
    swift_release(v31);
    swift_release(v32);
    v35 = type metadata accessor for SFAirDropSend.Transfer.State(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35) == 1)
    {
      sub_10000CC5C((uint64_t)v33, &qword_10013C9E0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    }
    else
    {
      SFAirDropSend.Transfer.State.cancelAction.getter();
      (*(void (**)(_QWORD *, uint64_t))(v36 + 8))(v33, v35);
    }
    sub_10000CC5C((uint64_t)v14, (uint64_t *)&unk_10013C9D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v18, v14, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  }
  if (v30(v18, 1, v19) == 1)
  {
    sub_10000CC5C((uint64_t)v18, (uint64_t *)&unk_10013C9D0);
    return 0;
  }
  else
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v39 = v58;
    v38(v58, v18, v19);
    sub_1000D8A8C();
    SFAirDrop.DeclineAction.id.getter();
    v41 = v40;
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41, v43, v44, v45, v46, v47, v48, v49);
    v50 = v57;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v57, v39, v19);
    v51 = *(unsigned __int8 *)(v20 + 80);
    v52 = (v51 + 16) & ~v51;
    v53 = swift_allocObject(&unk_100129F30, v52 + v56, v51 | 7);
    v38((char *)(v53 + v52), v50, v19);
    v37 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, v42, 0, 0, 0, 0, sub_1000D8ACC, v53);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v19);
  }
  return v37;
}

void sub_1000D898C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;

  KeyPath = swift_getKeyPath(&unk_1000EF610);
  v6 = swift_getKeyPath(&unk_1000EF638);
  swift_retain(a3);
  static Published.subscript.getter(&v14, v7, KeyPath, v6);
  swift_release(a3);
  swift_release(KeyPath);
  swift_release(v6);
  v8 = v14;
  v9 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress) = v14;
  v10 = v8;

  sub_1000DBFB4();
  v11 = (void *)sub_1000D8580(a3);
  v12 = *(void **)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction) = v11;
  v13 = v11;
  sub_1000DC114(v12);

}

unint64_t sub_1000D8A8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10013EE00;
  if (!qword_10013EE00)
  {
    v1 = objc_opt_self(UIAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10013EE00);
  }
  return result;
}

uint64_t sub_1000D8ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.DeclineAction(0) - 8) + 80);
  return sub_1000D7E54(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000D8B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for SFAirDrop.DeclineAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D8B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SFAirDrop.DeclineAction(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1001416F4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000104E4;
  return sub_1000D805C(a1, v5);
}

unint64_t sub_1000D8BDC()
{
  unint64_t result;

  result = qword_100141700;
  if (!qword_100141700)
  {
    result = swift_getWitnessTable(&unk_1000EF580, &type metadata for AirDropSystemApertureProgress);
    atomic_store(result, (unint64_t *)&qword_100141700);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirDropCancelledFailedView()
{
  return &type metadata for AirDropCancelledFailedView;
}

uint64_t sub_1000D8C30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100115090, 1);
}

uint64_t sub_1000D8C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  __int128 v27;

  v8 = sub_100008F88(&qword_100141708);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100008F88(&qword_100141710);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static VerticalAlignment.center.getter(v16);
  if (qword_10013ACA0 != -1)
    swift_once(&qword_10013ACA0, sub_10005F078);
  v18 = qword_100147EB0;
  *(_QWORD *)v11 = v17;
  *((_QWORD *)v11 + 1) = v18;
  v11[16] = 0;
  v19 = sub_100008F88(&qword_100141718);
  v20 = sub_1000D8E30(a1, a2, a3 & 1, (uint64_t)&v11[*(int *)(v19 + 44)]);
  if ((a3 & 1) != 0)
  {
    if (qword_10013AC50 != -1)
      v20 = swift_once(&qword_10013AC50, sub_10005EFBC);
    v21 = &xmmword_100147E30;
  }
  else
  {
    if (qword_10013AC58 != -1)
      v20 = swift_once(&qword_10013AC58, sub_10005EFDC);
    v21 = &xmmword_100147E50;
  }
  v23 = *((_QWORD *)v21 + 2);
  v22 = *((_QWORD *)v21 + 3);
  v27 = *v21;
  v24 = static Edge.Set.all.getter(v20);
  sub_10000CC18((uint64_t)v11, (uint64_t)v15, &qword_100141708);
  v25 = &v15[*(int *)(v12 + 36)];
  *v25 = v24;
  *(_OWORD *)(v25 + 8) = v27;
  *((_QWORD *)v25 + 3) = v23;
  *((_QWORD *)v25 + 4) = v22;
  v25[40] = 0;
  sub_10000CC5C((uint64_t)v11, &qword_100141708);
  return sub_10000CBD4((uint64_t)v15, a4, &qword_100141710);
}

uint64_t sub_1000D8E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  void (*v28)(char *, uint64_t);
  __n128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];

  v42[0] = a3;
  v42[1] = a1;
  v6 = sub_100008F88(&qword_10013CFA8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v42 - v12;
  v14 = type metadata accessor for DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)v42 - v21;
  KeyPath = swift_getKeyPath(&unk_1000EF770);
  v24 = swift_getKeyPath(&unk_1000EF798);
  swift_retain(a2);
  static Published.subscript.getter(v22, v25, KeyPath, v24);
  swift_release(a2);
  swift_release(KeyPath);
  v26 = swift_release(v24);
  v27.n128_f64[0] = (*(double (**)(char *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DeviceLockState.unlocked(_:), v14, v26);
  LOBYTE(v24) = static DeviceLockState.== infix(_:_:)(v22, v18, v27);
  v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28(v18, v14);
  v28(v22, v14);
  v30 = v42[0];
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if ((v24 & 1) != 0)
  {
    v35 = type metadata accessor for AirDropTransferSession(0);
    v36 = sub_1000469E0();
    swift_retain(a2);
    v31 = ObservedObject.init(wrappedValue:)(v37, v35, v36);
    v32 = v38;
    v33 = v30 & 1;
    v34 = 2;
  }
  *(_QWORD *)v13 = static HorizontalAlignment.leading.getter(v29);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v39 = sub_100008F88(&qword_10013CFB0);
  sub_1000D90D4(a2, v30 & 1, (uint64_t)&v13[*(int *)(v39 + 44)]);
  sub_10000CC18((uint64_t)v13, (uint64_t)v9, &qword_10013CFA8);
  *(_QWORD *)a4 = v31;
  *(_QWORD *)(a4 + 8) = v32;
  *(_QWORD *)(a4 + 16) = v33;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = v34;
  *(_BYTE *)(a4 + 40) = 0;
  v40 = sub_100008F88(&qword_100141720);
  sub_10000CC18((uint64_t)v9, a4 + *(int *)(v40 + 48), &qword_10013CFA8);
  sub_1000468E0(v31, v32, v33, 0, v34);
  sub_10000CC5C((uint64_t)v13, &qword_10013CFA8);
  sub_10000CC5C((uint64_t)v9, &qword_10013CFA8);
  return sub_100046990(v31, v32, v33, 0, v34);
}

uint64_t sub_1000D90D4@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[48];

  v49 = type metadata accessor for Font.TextStyle(0);
  v6 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirDropDescriptionView(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008F88((uint64_t *)&unk_100140F90);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v22 = (char *)&v43 - v21;
  v51 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v50 = a2;
  if ((a2 & 1) != 0)
  {
    if (qword_10013AC30 != -1)
      v20 = (_QWORD *)swift_once(&qword_10013AC30, sub_10005EF78);
    v29 = qword_100147E10;
    v30 = static Alignment.center.getter(v20);
    v51 = 1;
    v20 = _FrameLayout.init(width:height:alignment:)(&v53, 0, 1, v29, 0, v30, v31);
    v23 = v53;
    v24 = v54;
    v25 = v55;
    v26 = v56;
    v27 = v57;
    v28 = v58;
  }
  v43 = v23;
  v44 = v24;
  v45 = v25;
  v46 = v26;
  v47 = v27;
  v48 = v28;
  v32 = sub_1000D9400((uint64_t)v20, a1);
  v34 = v33;
  sub_1000D9B64(a1, (uint64_t)v59);
  v52 = 0x402C000000000000;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for Font.TextStyle.subheadline(_:), v49);
  v35 = sub_100043B68();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v52, v9, &type metadata for CGFloat, v35);
  v36 = (uint64_t *)&v13[*(int *)(v10 + 20)];
  *v36 = v32;
  v36[1] = v34;
  v37 = sub_100046A7C((uint64_t)v59, (uint64_t)&v13[*(int *)(v10 + 24)]);
  v38 = static Alignment.leading.getter(v37);
  sub_1000BFDC4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v17, 0.0, 1, 0.0, 1, v38, v39);
  sub_100045340((uint64_t)v13);
  sub_10000CBD4((uint64_t)v17, (uint64_t)v22, (uint64_t *)&unk_100140F90);
  sub_10000CC18((uint64_t)v22, (uint64_t)v17, (uint64_t *)&unk_100140F90);
  v40 = v51;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v43;
  *(_QWORD *)(a3 + 24) = v44;
  *(_QWORD *)(a3 + 32) = v45;
  *(_QWORD *)(a3 + 40) = v46;
  *(_QWORD *)(a3 + 48) = v47;
  *(_QWORD *)(a3 + 56) = v48;
  *(_BYTE *)(a3 + 64) = (v50 & 1) == 0;
  v41 = sub_100008F88(&qword_10013CFD8);
  sub_10000CC18((uint64_t)v17, a3 + *(int *)(v41 + 48), (uint64_t *)&unk_100140F90);
  sub_10000CC5C((uint64_t)v22, (uint64_t *)&unk_100140F90);
  return sub_10000CC5C((uint64_t)v17, (uint64_t *)&unk_100140F90);
}

uint64_t sub_1000D9400(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  void (*v45)(_QWORD *, uint64_t);
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  void (*v77)(char *, uint64_t, __n128);
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;

  v94 = type metadata accessor for SFAirDropReceive.Transfer.State(0, a2);
  v92 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94, v3);
  v93 = (uint64_t *)((char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5, v6);
  v96 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8, v9);
  v95 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SFAirDropSend.Failure(0);
  v90 = *(_QWORD *)(v11 - 8);
  v91 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v90 - v17;
  v19 = sub_100008F88(&qword_10013C9E0);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for SFAirDropSend.Transfer.State(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v31 = (char *)&v90 - v30;
  KeyPath = swift_getKeyPath(&unk_1000EF800);
  v33 = swift_getKeyPath(&unk_1000EF828);
  swift_retain(a2);
  static Published.subscript.getter(v22, v34, KeyPath, v33);
  swift_release(a2);
  swift_release(KeyPath);
  v35 = v33;
  v36 = v24;
  v37 = v23;
  v38 = swift_release(v35);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v36 + 48))(v22, 1, v23, v38) == 1)
  {
    sub_10000CC5C((uint64_t)v22, &qword_10013C9E0);
    v39 = swift_getKeyPath(&unk_1000EF7B8);
    v40 = swift_getKeyPath(&unk_1000EF7E0);
    swift_retain(a2);
    v41 = v93;
    static Published.subscript.getter(v93, v42, v39, v40);
    swift_release(a2);
    swift_release(v39);
    v43 = swift_release(v40);
    v44 = SFAirDropReceive.Transfer.State.sfTransferState.getter(v43);
    v45 = *(void (**)(_QWORD *, uint64_t))(v92 + 8);
    v46 = v94;
    v45(v41, v94);
    if (v44 == 9)
    {
      v47 = 0xD000000000000012;
      v48 = "AirDropFailedTitle";
    }
    else
    {
      v65 = swift_getKeyPath(&unk_1000EF7B8);
      v66 = swift_getKeyPath(&unk_1000EF7E0);
      swift_retain(a2);
      static Published.subscript.getter(v41, v67, v65, v66);
      swift_release(a2);
      swift_release(v65);
      v68 = swift_release(v66);
      v69 = SFAirDropReceive.Transfer.State.sfTransferState.getter(v68);
      v45(v41, v46);
      if (v69 != 3)
      {
        v83 = swift_getKeyPath(&unk_1000EF848);
        v84 = swift_getKeyPath(&unk_1000EF870);
        swift_retain(a2);
        static Published.subscript.getter(&v97, v85, v83, v84);
        swift_release(a2);
        swift_release(v83);
        swift_release(v84);
        return v97;
      }
      v47 = 0xD000000000000015;
      v48 = "AirDropCancelledTitle";
    }
    v70 = v95;
    v71 = String.LocalizationValue.init(stringLiteral:)(v47, (unint64_t)(v48 - 32) | 0x8000000000000000);
    v72 = v96;
    static Locale.current.getter(v71);
    return String.init(localized:table:bundle:locale:comment:)(v70, 0xD000000000000011, 0x80000001000F10B0, 0, v72, 0, 0, 256);
  }
  else
  {
    v49 = v14;
    v50 = v18;
    v52 = v90;
    v51 = v91;
    (*(void (**)(char *, _QWORD *, uint64_t))(v36 + 32))(v31, v22, v37);
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v27, v31, v37);
    if ((*(unsigned int (**)(char *, uint64_t))(v36 + 88))(v27, v37) == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
    {
      v94 = (uint64_t)v31;
      (*(void (**)(char *, uint64_t))(v36 + 96))(v27, v37);
      v53 = &v27[*(int *)(sub_100008F88(&qword_10013BC90) + 48)];
      v54 = v36;
      v55 = v52;
      v56 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      v57 = v50;
      v58 = v50;
      v59 = v51;
      v56(v58, v53, v51);
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v49, v57, v51);
      v60 = (*(uint64_t (**)(char *, uint64_t))(v55 + 88))(v49, v51);
      if (v60 == enum case for SFAirDropSend.Failure.receiverDeclined(_:))
      {
        v61 = v95;
        v62 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001000F3400);
        v63 = v96;
        static Locale.current.getter(v62);
        v64 = String.init(localized:table:bundle:locale:comment:)(v61, 0xD000000000000011, 0x80000001000F10B0, 0, v63, 0, 0, 256);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v94, v37);
      }
      else
      {
        v78 = v54;
        v80 = v95;
        v79 = v96;
        v81 = v94;
        if (v60 == enum case for SFAirDropSend.Failure.cancelled(_:))
        {
          v82 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x80000001000F33C0);
          static Locale.current.getter(v82);
          v64 = String.init(localized:table:bundle:locale:comment:)(v80, 0xD000000000000011, 0x80000001000F10B0, 0, v79, 0, 0, 256);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v59);
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v81, v37);
        }
        else
        {
          v86 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001000F33E0);
          static Locale.current.getter(v86);
          v64 = String.init(localized:table:bundle:locale:comment:)(v80, 0xD000000000000011, 0x80000001000F10B0, 0, v79, 0, 0, 256);
          v87 = *(void (**)(char *, uint64_t))(v55 + 8);
          v87(v57, v59);
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v81, v37);
          v87(v49, v59);
        }
      }
      v88 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 8))(v27, v88);
    }
    else
    {
      v73 = swift_getKeyPath(&unk_1000EF848);
      v74 = swift_getKeyPath(&unk_1000EF870);
      swift_retain(a2);
      static Published.subscript.getter(&v97, v75, v73, v74);
      swift_release(a2);
      swift_release(v73);
      v76 = swift_release(v74);
      v64 = v97;
      v77 = *(void (**)(char *, uint64_t, __n128))(v36 + 8);
      v77(v31, v37, v76);
      ((void (*)(char *, uint64_t))v77)(v27, v37);
    }
  }
  return v64;
}

uint64_t sub_1000D9B64@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  char v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4, v5);
  v49 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for SFAirDropReceive.Failure(0);
  v11 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52, v12);
  v50 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v51 = (char *)&v48 - v16;
  v18 = type metadata accessor for SFAirDropReceive.Transfer.State(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v48 - v25;
  KeyPath = swift_getKeyPath(&unk_1000EF7B8);
  v28 = swift_getKeyPath(&unk_1000EF7E0);
  swift_retain(a1);
  static Published.subscript.getter(v26, v29, KeyPath, v28);
  swift_release(a1);
  swift_release(KeyPath);
  v30 = swift_release(v28);
  (*(void (**)(char *, char *, uint64_t, __n128))(v19 + 16))(v22, v26, v18, v30);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 88))(v22, v18) != enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    v46 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
    v46(v26, v18);
    result = v46(v22, v18);
LABEL_6:
    v40 = 0;
    v42 = 0;
    v45 = 0;
    v44 = -64;
    goto LABEL_7;
  }
  v31 = v49;
  (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
  v32 = sub_100008F88(&qword_10013DCC0);
  v33 = v51;
  v34 = v52;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v51, &v22[*(int *)(v32 + 48)], v52);
  v35 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0);
  v36 = v22;
  v37 = v33;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v36, v35);
  v38 = v50;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v50, v37, v34);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 88))(v38, v34) != enum case for SFAirDropReceive.Failure.insufficientStorage(_:))
  {
    v47 = *(void (**)(char *, uint64_t))(v11 + 8);
    v47(v37, v34);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
    result = ((uint64_t (*)(char *, uint64_t))v47)(v38, v34);
    goto LABEL_6;
  }
  v39 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x80000001000F3390);
  static Locale.current.getter(v39);
  v40 = String.init(localized:table:bundle:locale:comment:)(v10, 0xD000000000000011, 0x80000001000F10B0, 0, v31, 0, 0, 256);
  v42 = v41;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v34);
  result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v26, v18);
  v44 = 0;
  v45 = 1;
LABEL_7:
  *(_QWORD *)a2 = v40;
  *(_QWORD *)(a2 + 8) = v42;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v45;
  *(_BYTE *)(a2 + 32) = v44;
  return result;
}

uint64_t sub_1000D9EE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000D8C40(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

unint64_t sub_1000D9F14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141728;
  if (!qword_100141728)
  {
    v1 = sub_10000950C(&qword_100141710);
    sub_1000D9F80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100141728);
  }
  return result;
}

unint64_t sub_1000D9F80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100141730;
  if (!qword_100141730)
  {
    v1 = sub_10000950C(&qword_100141708);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100141730);
  }
  return result;
}

uint64_t sub_1000D9FCC(uint64_t a1)
{
  _QWORD v2[17];

  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[4] = &unk_1000EF8E8;
  v2[5] = &unk_1000EF900;
  v2[6] = &unk_1000EF918;
  v2[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[8] = &unk_1000EF900;
  v2[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = &unk_1000EF900;
  v2[11] = &unk_1000EF900;
  v2[12] = &unk_1000EF900;
  v2[13] = &unk_1000EF900;
  v2[14] = &unk_1000EF900;
  v2[15] = &unk_1000EF900;
  v2[16] = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0, 17, v2, a1 + 96);
}

uint64_t sub_1000DA060(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000DA08C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_1000DA0D4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000DA0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_1000DA0E8()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_1000210A8();
  EnvironmentValues.subscript.getter(&var1, &type metadata for HostedBySystemAperture, &type metadata for HostedBySystemAperture, v0);
  return var1;
}

uint64_t sub_1000DA120@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1[2];
  v3 = *v1;
  if (*v1)
  {
    KeyPath = swift_getKeyPath(&unk_1000EFA28);
    v6 = swift_getKeyPath(&unk_1000EFA50);
    swift_retain(v2);
    swift_retain(v3);
    static Published.subscript.getter(&v18, v7, KeyPath, v6);
    swift_release(v3);
    swift_release(KeyPath);
    swift_release(v6);
    v17 = v19;
    v8 = v20;
    v9 = v21;
    v11 = static Edge.Set.all.getter(v10);
    LOBYTE(KeyPath) = v11;
    v12 = static Color.black.getter(v11);
    result = static Edge.Set.all.getter(v12);
    *(_QWORD *)a1 = v2;
    *(_BYTE *)(a1 + 8) = KeyPath;
    *(_OWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v12;
    *(_BYTE *)(a1 + 64) = result;
  }
  else
  {
    v14 = v1[1];
    v15 = type metadata accessor for SystemApertureLayoutState(0);
    v16 = sub_100008694((unint64_t *)&qword_10013C120, type metadata accessor for SystemApertureLayoutState, (uint64_t)&unk_1000EA18C);
    swift_retain(v2);
    result = EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000DA24C()
{
  return sub_1000DA26C();
}

uint64_t sub_1000DA26C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141740);
}

uint64_t sub_1000DA27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA2A0(a3);
}

uint64_t sub_1000DA2A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + qword_100141740) = result;
  v2 = *(_QWORD *)(v1 + qword_100141740);
  if ((unint64_t)(v2 - 3) <= 1)
    *(_QWORD *)(v1 + qword_100141750) = v2;
  return result;
}

uint64_t sub_1000DA2D0()
{
  return sub_1000DA2F0();
}

uint64_t sub_1000DA2F0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141748);
}

uint64_t sub_1000DA300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA324(a3);
}

uint64_t sub_1000DA324(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + qword_100141748) = result;
  return result;
}

uint64_t sub_1000DA334()
{
  return sub_1000DA354();
}

uint64_t sub_1000DA354()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141750);
}

uint64_t sub_1000DA364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA388(a3);
}

uint64_t sub_1000DA388(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + qword_100141750) = result;
  return result;
}

uint64_t sub_1000DA398()
{
  return sub_1000DA3B8();
}

uint64_t sub_1000DA3B8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141758);
}

uint64_t sub_1000DA3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA3EC(a3);
}

uint64_t sub_1000DA3EC(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + qword_100141758) = result;
  return result;
}

id sub_1000DA3FC()
{
  _TtC9AirDropUI33AirDropTransferSessionsController *v0;
  _TtC9AirDropUI33AirDropTransferSessionsController *v1;
  NSString v2;
  SEL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  sub_1000DBB28();
  if (v0)
  {
    v1 = v0;
    swift_bridgeObjectRetain(v0);
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_1000DA454(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (a3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = a1;
  sub_1000DA4C0(v4, v6);

}

uint64_t sub_1000DA4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + qword_100141760);
  v4 = *(_QWORD *)(v2 + qword_100141760 + 8);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

id sub_1000DA4DC()
{
  return (id)sub_1000DBB3C();
}

void sub_1000DA4FC(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_1000DA544((uint64_t)a3);

}

void sub_1000DA544(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_100141768);
  *(_QWORD *)(v1 + qword_100141768) = a1;

}

uint64_t sub_1000DA558()
{
  return sub_1000DA57C() & 1;
}

uint64_t sub_1000DA57C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_100141770);
}

uint64_t sub_1000DA58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA5B0(a3);
}

uint64_t sub_1000DA5B0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + qword_100141770) = result;
  return result;
}

id sub_1000DA5C0()
{
  return (id)sub_1000DBB4C();
}

void sub_1000DA5E0(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_1000DA628((uint64_t)a3);

}

void sub_1000DA628(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_100141790);
  *(_QWORD *)(v1 + qword_100141790) = a1;

}

id sub_1000DA63C()
{
  return (id)sub_1000DBB5C();
}

void sub_1000DA65C(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_1000DA6A4((uint64_t)a3);

}

void sub_1000DA6A4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_1001417A0);
  *(_QWORD *)(v1 + qword_1001417A0) = a1;

}

id sub_1000DA6B8()
{
  return (id)sub_1000DBB6C();
}

void sub_1000DA6D8(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_1000DA720((uint64_t)a3);

}

void sub_1000DA720(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_1001417B0);
  *(_QWORD *)(v1 + qword_1001417B0) = a1;

}

id sub_1000DA734()
{
  return (id)sub_1000DBB7C();
}

uint64_t sub_1000DA75C()
{
  return sub_1000DA77C();
}

uint64_t sub_1000DA77C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_1001417C0);
}

void sub_1000DA78C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = a1;
  sub_1000DA7CC(a3);

}

uint64_t sub_1000DA7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + qword_1001417C0);
  *(_QWORD *)(v1 + qword_1001417C0) = a1;
  return sub_1000DA7E4(v2);
}

uint64_t sub_1000DA7E4(uint64_t result)
{
  char *v1;
  id v2;

  if (*(_QWORD *)&v1[qword_1001417C0] != result)
  {
    v2 = objc_msgSend(v1, "systemApertureElementContext");
    objc_msgSend(v2, "setElementNeedsUpdate");
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_1000DA848(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000DBB84();
}

id sub_1000DA86C()
{
  char *v0;
  uint64_t v1;
  id result;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  double v16;
  double MidY;
  void *v18;
  id v19;
  void *v20;
  id v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double MidX;
  void *v31;
  void *v32;
  id v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  uint64_t v42;
  void *v43;
  void *v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v1 = *(_QWORD *)&v0[qword_100141740];
  if (v1 == 3)
  {
    v18 = *(void **)&v0[qword_100141790];
    if (v18)
    {
      v19 = v18;
      result = objc_msgSend(v0, "view");
      if (!result)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v20 = result;
      v21 = objc_msgSend(result, "SBUISA_systemApertureLeadingConcentricContentLayoutGuide");

      objc_msgSend(v21, "layoutFrame");
      v23 = v22;
      v25 = v24;
      v27 = v26;
      v29 = v28;

      v47.origin.x = v23;
      v47.origin.y = v25;
      v47.size.width = v27;
      v47.size.height = v29;
      MidX = CGRectGetMidX(v47);
      objc_msgSend(v19, "center");
      objc_msgSend(v19, "setCenter:", MidX);

    }
    v31 = *(void **)&v0[qword_1001417A0];
    if (!v31)
      goto LABEL_16;
    v15 = v31;
    result = objc_msgSend(v0, "view");
    if (result)
    {
      v32 = result;
      v33 = objc_msgSend(result, "SBUISA_systemApertureTrailingConcentricContentLayoutGuide");

      objc_msgSend(v33, "layoutFrame");
      v35 = v34;
      v37 = v36;
      v39 = v38;
      v41 = v40;

      v48.origin.x = v35;
      v48.origin.y = v37;
      v48.size.width = v39;
      v48.size.height = v41;
      v16 = CGRectGetMidX(v48);
      objc_msgSend(v15, "center");
      goto LABEL_15;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v1 != 4)
    goto LABEL_16;
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v3 = result;
  objc_msgSend(result, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = *(void **)&v0[qword_100141780];
  if (!v12)
    goto LABEL_16;
  result = objc_msgSend(v12, "view");
  if (!result)
    goto LABEL_24;
  v13 = result;
  objc_msgSend(result, "frame");
  objc_msgSend(v13, "setFrame:");

  v14 = *(void **)&v0[qword_100141780];
  if (v14)
  {
    result = objc_msgSend(v14, "view");
    if (result)
    {
      v15 = result;
      v45.origin.x = v5;
      v45.origin.y = v7;
      v45.size.width = v9;
      v45.size.height = v11;
      v16 = CGRectGetMidX(v45);
      v46.origin.x = v5;
      v46.origin.y = v7;
      v46.size.width = v9;
      v46.size.height = v11;
      MidY = CGRectGetMidY(v46);
LABEL_15:
      objc_msgSend(v15, "setCenter:", v16, MidY);

      goto LABEL_16;
    }
LABEL_27:
    __break(1u);
    return result;
  }
LABEL_16:
  v42 = *(_QWORD *)&v0[qword_100141740];
  v43 = *(void **)&v0[qword_100141790];
  if (v43)
    objc_msgSend(v43, "setHidden:", v42 == 4);
  v44 = *(void **)&v0[qword_1001417A0];
  if (v44)
    objc_msgSend(v44, "setHidden:", v42 == 4);
  result = *(id *)&v0[qword_1001417B0];
  if (result)
    return objc_msgSend(result, "setHidden:", v42 == 4);
  return result;
}

void sub_1000DABC4(void *a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v3 = swift_allocObject(&unk_10012A290, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v7[4] = sub_1000DBB08;
  v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000DA08C;
  v7[3] = &unk_10012A2A8;
  v4 = _Block_copy(v7);
  v5 = v8;
  v6 = v1;
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v4, 0, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
}

id sub_1000DAC7C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)((char *)a2 + qword_100141788);
  type metadata accessor for SystemApertureElementHostingController(0, *(_QWORD *)((swift_isaMask & *a2) + 0x50), *(_QWORD *)((swift_isaMask & *a2) + 0x58), a4);
  swift_retain(v5);
  sub_100025194(a2, v5);
  swift_release(v5);
  v6 = *(id *)((char *)a2 + qword_100141778);
  sub_100008B3C(a2, (uint64_t)v6);

  return sub_1000DA86C();
}

void sub_1000DAD1C(void *a1, uint64_t a2, void *a3)
{
  id v5;

  swift_unknownObjectRetain(a3);
  v5 = a1;
  sub_1000DABC4(a3);
  swift_unknownObjectRelease(a3);

}

uint64_t sub_1000DAD70()
{
  return 1;
}

uint64_t sub_1000DAD78()
{
  return 1;
}

void sub_1000DAD80(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  swift_unknownObjectRetain(a3);
  v5 = a1;
  sub_1000DBD5C();
  swift_unknownObjectRelease(a3);

}

void sub_1000DADCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  sub_1000DBE84();
}

id sub_1000DAE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SystemApertureElementHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_1000DAE54(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100141760 + 8));

  swift_release(*(_QWORD *)(a1 + qword_100141788));
}

uint64_t type metadata accessor for SystemApertureElementHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002111C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemApertureElementHostingController);
}

uint64_t sub_1000DAF2C()
{
  return sub_1000DB970();
}

uint64_t sub_1000DAF4C(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  return sub_1000DBA68(a1, a2, a3, a4, a5, a6, a7, a8);
}

char *sub_1000DAF6C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  objc_class *v21;
  char *v22;
  void *v23;
  char *v24;
  char *result;
  char *v26;
  uint64_t v27;
  objc_super v28;
  uint64_t v29;

  v3 = type metadata accessor for UIHostingControllerSizingOptions(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)sub_100008F88((uint64_t *)&unk_1001418B0));
  v29 = a1;
  v9 = v1;
  swift_retain(a1);
  v10 = (void *)UIHostingController.init(rootView:)(&v29);
  v11 = sub_100008F88((uint64_t *)&unk_10013C1F0);
  v12 = swift_allocObject(v11, ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72), *(unsigned __int8 *)(v4 + 80) | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000E9370;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  v29 = v12;
  v13 = sub_100008694((unint64_t *)&unk_1001418C0, (uint64_t (*)(uint64_t))&type metadata accessor for UIHostingControllerSizingOptions, (uint64_t)&protocol conformance descriptor for UIHostingControllerSizingOptions);
  v14 = sub_100008F88((uint64_t *)&unk_10013C200);
  v15 = sub_10000CB94((unint64_t *)&unk_1001418D0, (uint64_t *)&unk_10013C200, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v14, v15, v3, v13);
  dispatch thunk of UIHostingController.sizingOptions.setter(v7);
  *(_QWORD *)&v9[OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController] = v10;
  v16 = v10;
  objc_msgSend(v16, "preferredContentSize");
  v18 = v17;
  v20 = v19;

  v21 = (objc_class *)type metadata accessor for SystemApertureAccessoryView();
  v28.receiver = v9;
  v28.super_class = v21;
  v22 = (char *)objc_msgSendSuper2(&v28, "initWithFrame:", 0.0, 0.0, v18, v20);
  v23 = *(void **)&v22[OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController];
  v24 = v22;
  result = (char *)objc_msgSend(v23, "view");
  if (result)
  {
    v26 = result;
    objc_msgSend(v24, "addSubview:", result);

    swift_release(a1);
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000DB33C()
{
  return sub_10007C794(type metadata accessor for SystemApertureAccessoryView);
}

uint64_t type metadata accessor for SystemApertureAccessoryView()
{
  return objc_opt_self(_TtC9AirDropUI27SystemApertureAccessoryView);
}

char *sub_1000DB378(uint64_t a1)
{
  void *v1;
  id v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  objc_super v11;

  v3 = objc_allocWithZone((Class)type metadata accessor for SystemApertureAccessoryView());
  v4 = v1;
  v5 = swift_retain(a1);
  *(_QWORD *)&v4[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view] = sub_1000DAF6C(v5);

  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for SystemApertureAccessoryViewController();
  v6 = (char *)objc_msgSendSuper2(&v11, "initWithNibName:bundle:", 0, 0);
  v7 = *(void **)(*(_QWORD *)&v6[OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view]
                + OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController);
  v8 = v6;
  v9 = v7;
  objc_msgSend(v8, "addChildViewController:", v9);

  swift_release(a1);
  return v8;
}

id sub_1000DB564()
{
  return sub_10007C794(type metadata accessor for SystemApertureAccessoryViewController);
}

uint64_t type metadata accessor for SystemApertureAccessoryViewController()
{
  return objc_opt_self(_TtC9AirDropUI37SystemApertureAccessoryViewController);
}

uint64_t destroy for SystemApertureElement(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for SystemApertureElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[4];
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for SystemApertureElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  a1[7] = a2[7];
  return a1;
}

uint64_t *assignWithTake for SystemApertureElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  swift_release(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v6);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  a1[7] = a2[7];
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemApertureElement(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemApertureElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemApertureElement()
{
  return &type metadata for SystemApertureElement;
}

uint64_t sub_1000DB84C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001153AC, 1);
}

double sub_1000DB85C@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000EFA28);
  v5 = swift_getKeyPath(&unk_1000EFA50);
  static Published.subscript.getter(v9, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)v9;
  v7 = v9[1];
  v8 = v9[2];
  *a2 = v9[0];
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

uint64_t sub_1000DB8E0(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v8 = a1[1];
  v9 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000EFA28);
  v6 = swift_getKeyPath(&unk_1000EFA50);
  v10[0] = v9;
  v10[1] = v8;
  v11 = v2;
  v12 = v3;
  swift_retain(v4);
  return static Published.subscript.setter(v10, v4, KeyPath, v6);
}

uint64_t sub_1000DB970()
{
  char *v0;
  id v1;
  id countAndFlagsBits;
  const char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  _TtC9AirDropUI33AirDropTransferSessionsController *v11;
  Swift::String v12;
  void *object;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  _TtC9AirDropUI33AirDropTransferSessionsController *v21;
  uint64_t v22;
  id v23;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  countAndFlagsBits = objc_msgSend(v1, "bundleIdentifier");

  if (countAndFlagsBits)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits);
    v11 = v10;

    v12 = String.lowercased()();
    countAndFlagsBits = (id)v12._countAndFlagsBits;
    object = v12._object;
    swift_bridgeObjectRelease(v11, (SEL)v12._object, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    object = 0;
  }
  v20 = &v0[qword_100141760];
  v21 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v0[qword_100141760 + 8];
  *(_QWORD *)v20 = countAndFlagsBits;
  *((_QWORD *)v20 + 1) = object;
  swift_bridgeObjectRelease(v21, v3, v4, v5, v6, v7, v8, v9);
  v22 = *(_QWORD *)&v0[qword_1001417C0];
  *(_QWORD *)&v0[qword_1001417C0] = v22 & 0xFFFFFFFFFFFFFFFDLL;
  sub_1000DA7E4(v22);
  v23 = objc_msgSend(v0, "systemApertureElementContext");
  objc_msgSend(v23, "setElementNeedsUpdate");
  return swift_unknownObjectRelease(v23);
}

uint64_t sub_1000DBA68(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  char *v8;
  char *v9;
  _TtC9AirDropUI33AirDropTransferSessionsController *v10;
  uint64_t v11;
  id v12;

  v9 = &v8[qword_100141760];
  v10 = *(_TtC9AirDropUI33AirDropTransferSessionsController **)&v8[qword_100141760 + 8];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  swift_bridgeObjectRelease(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)&v8[qword_1001417C0];
  *(_QWORD *)&v8[qword_1001417C0] = v11 | 2;
  sub_1000DA7E4(v11);
  v12 = objc_msgSend(v8, "systemApertureElementContext");
  objc_msgSend(v12, "setElementNeedsUpdate");
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_1000DBAE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000DBB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000DAC7C(a1, *(_QWORD **)(v4 + 16), a3, a4);
}

uint64_t sub_1000DBB10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DBB20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DBB28()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141760);
}

uint64_t sub_1000DBB3C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141768);
}

uint64_t sub_1000DBB4C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_100141790);
}

uint64_t sub_1000DBB5C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_1001417A0);
}

uint64_t sub_1000DBB6C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + qword_1001417B0);
}

uint64_t sub_1000DBB7C()
{
  uint64_t v0;

  return v0;
}

void sub_1000DBB84()
{
  _BYTE *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v0[qword_100141740] = 0;
  *(_QWORD *)&v0[qword_100141748] = 2;
  *(_QWORD *)&v0[qword_100141750] = 4;
  *(_QWORD *)&v0[qword_100141758] = 4;
  v1 = &v0[qword_100141760];
  *v1 = 0;
  v1[1] = 0;
  v2 = (void *)SBUISystemApertureElementIdentifierAirDrop;
  *(_QWORD *)&v0[qword_100141768] = SBUISystemApertureElementIdentifierAirDrop;
  v0[qword_100141770] = 1;
  v3 = qword_100141778;
  v4 = objc_allocWithZone((Class)type metadata accessor for SystemApertureElementTransitionCoordinator());
  v5 = v2;
  *(_QWORD *)&v0[v3] = objc_msgSend(v4, "init");
  *(_QWORD *)&v0[qword_100141780] = 0;
  v6 = qword_100141788;
  v7 = type metadata accessor for SystemApertureLayoutState(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v14 = 0;
  v15 = 0;
  __asm { FMOV            V0.2D, #20.0 }
  v16 = _Q0;
  v17 = _Q0;
  Published.init(initialValue:)(&v14, &type metadata for SystemApertureLayoutState.Metrics);
  v14 = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  Published.init(initialValue:)(&v14, &type metadata for SystemApertureLayoutState.Context);
  *(_QWORD *)&v0[v6] = v8;
  *(_QWORD *)&v0[qword_100141790] = 0;
  *(_QWORD *)&v0[qword_100141798] = 0;
  *(_QWORD *)&v0[qword_1001417A0] = 0;
  *(_QWORD *)&v0[qword_1001417A8] = 0;
  *(_QWORD *)&v0[qword_1001417B0] = 0;
  *(_QWORD *)&v0[qword_1001417B8] = 0;
  *(_QWORD *)&v0[qword_1001417C0] = 1;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000F05A0, "AirDropUI/SystemApertureElementHostingController.swift", 54, 2, 205, 0);
  __break(1u);
}

id sub_1000DBD5C()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  id result;
  double v9;
  double v10;
  id v12;
  void *v13;
  _QWORD v14[6];

  objc_msgSend(v0, "preferredContentSize");
  v2 = v1;
  v4 = v3;
  v5 = *(_QWORD *)&v0[qword_100141780];
  if (v5)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC9AirDropUI37SystemApertureAccessoryViewController__view)+ OBJC_IVAR____TtC9AirDropUI27SystemApertureAccessoryView_hostingController), "preferredContentSize");
  }
  else
  {
    v7 = 0.0;
    v6 = 0.0;
  }
  objc_msgSend(v0, "setPreferredContentSize:", v6, v7);
  result = objc_msgSend(v0, "preferredContentSize");
  if (v2 != v10 || v4 != v9)
  {
    v12 = objc_msgSend(v0, "systemApertureElementContext");
    v14[4] = nullsub_1;
    v14[5] = 0;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_1000DA060;
    v14[3] = &unk_10012A2D0;
    v13 = _Block_copy(v14);
    objc_msgSend(v12, "setElementNeedsUpdateWithCoordinatedAnimations:", v13);
    _Block_release(v13);
    return (id)swift_unknownObjectRelease(v12);
  }
  return result;
}

void sub_1000DBE84()
{
  _swift_stdlib_reportUnimplementedInitializer("AirDropUI.SystemApertureElementHostingController", 48, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

ValueMetadata *type metadata accessor for HostedBySystemAperture()
{
  return &type metadata for HostedBySystemAperture;
}

unint64_t sub_1000DBEC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001418E0;
  if (!qword_1001418E0)
  {
    v1 = sub_10000950C(&qword_1001418E8);
    sub_1000DBF48();
    sub_10000CB94((unint64_t *)&unk_1001406D0, &qword_10013B7F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001418E0);
  }
  return result;
}

unint64_t sub_1000DBF48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001418F0;
  if (!qword_1001418F0)
  {
    v1 = sub_10000950C(&qword_1001418F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001418F0);
  }
  return result;
}

void sub_1000DBFB4()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  void *v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  void *v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "publishedObjectWithName:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v11);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_10007A204((uint64_t)v11, (uint64_t)v12);
  if (v13)
  {
    v4 = sub_100018D44(0, &qword_100141960, CAShapeLayer_ptr);
    if ((swift_dynamicCast(&v10, v12, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
    {
      v5 = v10;
      objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress), "fractionCompleted");
      v7 = 0.999 - v6 * 0.999 / 0.999;
      v8 = v6 < 0.01;
      v9 = 0.989;
      if (!v8)
        v9 = v7;
      objc_msgSend(v5, "setStrokeStart:", v9);

    }
  }
  else
  {
    sub_10005FB4C((uint64_t)v12);
  }
  sub_1000DCBAC();
}

void sub_1000DC114(id a1)
{
  uint64_t v1;
  id v3;
  id *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  void *v18;
  id v19;

  if (a1)
  {
    v3 = objc_msgSend(a1, "identifier");
    v4 = (id *)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    v5 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    if (!v5)
    {
      if (!v3)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v4 = (id *)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    v5 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction);
    if (!v5)
      return;
    v3 = 0;
  }
  v6 = objc_msgSend(v5, "identifier");
  v7 = v6;
  if (!v3)
  {
    if (!v6)
      return;
    goto LABEL_17;
  }
  if (!v6)
  {
LABEL_15:
    v7 = v3;
LABEL_17:

LABEL_18:
    if (*v4)
    {
      v16 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton);
      v17 = *v4;
      objc_msgSend(v16, "addAction:forControlEvents:", v17, 0x2000);
      objc_msgSend(v16, "setHidden:", (*(_BYTE *)(v1 + OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded) & 1) == 0);

    }
    if (a1)
    {
      v18 = *(void **)(v1 + OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton);
      v19 = a1;
      objc_msgSend(v18, "removeAction:forControlEvents:");
      if (!*v4)
        objc_msgSend(v18, "setHidden:", 1);

    }
    return;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  if (v8 == v11 && v10 == v12)
  {

    swift_bridgeObjectRelease_n(v10, 2);
    return;
  }
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0);

  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) == 0)
    goto LABEL_18;
}

void sub_1000DC36C(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, int a6)
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  id v27;
  _TtC9AirDropUI33AirDropTransferSessionsController *v28;
  id v29;
  id v30;
  NSString v31;
  SEL v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  NSString v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  _TtC9AirDropUI33AirDropTransferSessionsController *v45;
  _TtC9AirDropUI33AirDropTransferSessionsController *v46;
  NSString v47;
  SEL v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  objc_class *v61;
  id v62;
  id v63;
  id v64;
  _TtC9AirDropUI33AirDropTransferSessionsController *v65;
  id v66;
  Class isa;
  SEL v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  _TtC9AirDropUI33AirDropTransferSessionsController *v76;
  char *v77;
  Class v78;
  SEL v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  void *v89;
  char *v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  int v106;
  uint64_t v107;
  id v108;
  id v109;
  char v110;
  objc_super v111;

  v106 = a6;
  v103 = a5;
  v109 = a4;
  v107 = a2;
  v105 = a1;
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UIButton.Configuration(0, v14);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress;
  v22 = (void *)objc_opt_self(NSProgress);
  v23 = v6;
  *(_QWORD *)&v6[v21] = objc_msgSend(v22, "progressWithTotalUnitCount:", 1000);
  v24 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_cancelAction] = 0;
  v23[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_isTouchingDownButton] = 0;
  v23[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_didPostAccessibilityLayoutChangeNotification] = 0;
  v25 = type metadata accessor for AirDropSystemApertureIconView(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
  v27 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  if ((a3 & 1) != 0)
    v28 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F3A80;
  else
    v28 = (_TtC9AirDropUI33AirDropTransferSessionsController *)0x80000001000F3A40;
  v29 = objc_allocWithZone((Class)BSUICAPackageView);
  v30 = v27;
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28, v32, v33, v34, v35, v36, v37, v38);
  v39 = objc_msgSend(v29, "initWithPackageName:inBundle:", v31, v30);

  v104 = v30;
  if (v39)
  {
    objc_msgSend(v39, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    if (qword_10013AD80 != -1)
      swift_once(&qword_10013AD80, sub_1000CAD5C);
    objc_msgSend(v39, "setFrame:", 0.0, 0.0, *(double *)&qword_100148078, *(double *)&qword_100148078);
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v39, "setState:", v40);

    *(_QWORD *)&v23[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView] = v39;
    sub_100018D44(0, &qword_100141968, UIButton_ptr);
    v108 = v39;
    static UIButton.Configuration.plain()();
    v41 = v109;
    v42 = v109;
    v43 = (id)UIButton.init(configuration:primaryAction:)(v20, v41);
    v44 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000F3A60);
    static Locale.current.getter(v44);
    String.init(localized:table:bundle:locale:comment:)(v16, 0xD000000000000011, 0x80000001000F10B0, 0, v11, 0, 0, 256);
    v46 = v45;
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46, v48, v49, v50, v51, v52, v53, v54);
    objc_msgSend(v43, "setAccessibilityLabel:", v47);

    objc_msgSend(v43, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    *(_QWORD *)&v23[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton] = v43;
    v55 = *(void **)&v23[v24];
    *(_QWORD *)&v23[v24] = v41;
    v56 = v42;
    v57 = v43;

    v58 = &v23[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_overrideIntrinsicContentSize];
    if ((v106 & 1) != 0)
    {
      *(_QWORD *)v58 = 0;
      *((_QWORD *)v58 + 1) = 0;
      v58[16] = 1;
    }
    else
    {
      v59 = v103;
      *(_QWORD *)v58 = v103;
      *((_QWORD *)v58 + 1) = v59;
      v58[16] = 0;
    }
    v60 = v107;

    v61 = (objc_class *)type metadata accessor for AirDropSystemApertureProgressView();
    v111.receiver = v23;
    v111.super_class = v61;
    v62 = objc_msgSendSuper2(&v111, "init");
    v63 = v108;
    objc_msgSend(v62, "addSubview:", v108);
    objc_msgSend(v62, "addSubview:", v57);
    v64 = v62;
    v65 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_1000CA820(v63, v60, 0.0);

    sub_100018D44(0, &qword_10013C100, NSLayoutConstraint_ptr);
    v66 = v64;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v65, v68, v69, v70, v71, v72, v73, v74);
    objc_msgSend(v66, "addConstraints:", isa);

    v75 = v66;
    v76 = (_TtC9AirDropUI33AirDropTransferSessionsController *)sub_1000CA820(v57, v60, 0.0);

    v77 = (char *)v75;
    v78 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v76, v79, v80, v81, v82, v83, v84, v85);
    objc_msgSend(v77, "addConstraints:", v78);

    if (qword_10013ABE0 != -1)
      swift_once(&qword_10013ABE0, sub_100023E74);
    v86 = qword_100147D90;
    KeyPath = swift_getKeyPath(&unk_1000EFB08);
    v88 = swift_getKeyPath(&unk_1000EFB30);
    static Published.subscript.getter(&v110, v86, KeyPath, v88);
    swift_release(KeyPath);
    swift_release(v88);
    if (v110 == 1)
    {
      v89 = (void *)objc_opt_self(UIColor);
      v90 = v77;
      v91 = objc_msgSend(v89, "systemRedColor");
      v92 = objc_msgSend(v91, "colorWithAlphaComponent:", 0.3);

      objc_msgSend(v90, "setBackgroundColor:", v92);
      v63 = v108;
      v93 = v108;
      v94 = objc_msgSend(v89, "systemOrangeColor");
      v95 = objc_msgSend(v94, "colorWithAlphaComponent:", 0.4);

      objc_msgSend(v93, "setBackgroundColor:", v95);
    }
    v96 = *(void **)&v77[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton];
    if (v109)
    {
      v97 = v56;
      objc_msgSend(v96, "addAction:forControlEvents:", v97, 0x2000);
      objc_msgSend(v96, "setHidden:", (v77[OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded] & 1) == 0);

    }
    else
    {
      objc_msgSend(*(id *)&v77[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton], "setHidden:", 1);
    }
    v99 = v104;
    v98 = v105;
    v100 = *(void **)&v77[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton];
    objc_msgSend(v100, "addTarget:action:forControlEvents:", v77, "touchedDownCancelButton", 17);
    v101 = v77;
    objc_msgSend(v100, "addTarget:action:forControlEvents:", v101, "touchedUpCancelButton", 480);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000DCBAC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  void *v27;
  NSString v28;
  _BYTE v29[16];

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1, v2);
  v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5, v6);
  v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v0[OBJC_IVAR____TtC9AirDropUI25AirDropSystemApertureView_expanded];
  v10 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress;
  v11 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progress], "isIndeterminate");
  if (v9 == 1)
  {
    if ((v11 & 1) != 0)
    {
      v12 = 0xEB00000000676E69;
    }
    else
    {
      objc_msgSend(*(id *)&v0[v10], "fractionCompleted");
      if (v14 >= 1.0)
      {
        v22 = *(void **)&v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_transparentCancelButton];
        v23 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000F39B0);
        static Locale.current.getter(v23);
        String.init(localized:table:bundle:locale:comment:)(v8, 0xD000000000000011, 0x80000001000F10B0, 0, v4, 0, 0, 256);
        v25 = v24;
        v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v25);
        objc_msgSend(v22, "setAccessibilityLabel:", v26);

        v12 = 0xE900000000000065;
      }
      else if (v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_isTouchingDownButton])
      {
        v12 = 0xEA00000000007373;
      }
      else
      {
        v12 = 0xE400000000000000;
      }
    }
  }
  else
  {
    v13 = 0x2D746361706D6F63;
    if ((v11 & 1) != 0)
    {
      v12 = 0xEE00676E69766173;
    }
    else
    {
      objc_msgSend(*(id *)&v0[v10], "fractionCompleted");
      if (v15 >= 1.0)
      {
        v12 = 0xEC000000656E6F64;
      }
      else
      {
        v13 = 0x746361706D6F63;
        v12 = 0xE700000000000000;
      }
    }
    swift_bridgeObjectRetain(v12);
    v16 = String.LocalizationValue.init(_:)(v13, v12);
    static Locale.current.getter(v16);
    String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v4, 0, 0, 256);
    v18 = v17;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v0, "setAccessibilityLabel:", v19);

    v20 = objc_msgSend(v0, "systemApertureElementContext");
    objc_msgSend(v20, "setElementNeedsUpdate");
    swift_unknownObjectRelease(v20);
    v21 = OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_didPostAccessibilityLayoutChangeNotification;
    if ((v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_didPostAccessibilityLayoutChangeNotification] & 1) == 0)
    {
      UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, v0);
      v0[v21] = 1;
    }
  }
  v27 = *(void **)&v0[OBJC_IVAR____TtC9AirDropUI33AirDropSystemApertureProgressView_progressMicaView];
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v27, "setState:", v28);

}

void sub_1000DCFC8()
{
  uint64_t v0;

}

id sub_1000DD014()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirDropSystemApertureProgressView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AirDropSystemApertureProgressView()
{
  return objc_opt_self(_TtC9AirDropUI33AirDropSystemApertureProgressView);
}

uint64_t sub_1000DD0C4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC9AirDropUIP33_50D47D9F51EE127E457E6940AA35906319ResourceBundleClass);
}

void sub_1000DD0F4(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "createURL: CFURLSetResourcePropertyForKey %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000DD16C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithData: CGImageSourceCreateWithURL returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD198()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithURL: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD1C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateWithData returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD1F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD21C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetType image format invalid", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD248()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex (requireJPEG2000) returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD2A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceCreate returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD2CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD2F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationCreateWithData returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD324()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationFinalize failed", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD350()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGColorSpaceCreateDeviceRGB returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD37C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateCopyWithColorSpace returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

void sub_1000DD3A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006E1C();
  sub_100006E04((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateThumb returned NULL", v2, v3, v4, v5, v6);
  sub_100006E14();
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "content");
}

id objc_msgSend_itemProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemProvider");
}

id objc_msgSend_itemProviders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemProviders");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}
